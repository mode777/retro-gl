{"version":3,"sources":["webpack:///dist/bundle.js","webpack:///webpack/bootstrap bfab07809916be91459b","webpack:///./src/core/constants.ts","webpack:///./node_modules/gl-matrix/src/gl-matrix/common.js","webpack:///./node_modules/tslib/tslib.es6.js","webpack:///./node_modules/pako/lib/utils/common.js","webpack:///./node_modules/twgl.js/dist/3.x/twgl-full.js","webpack:///./node_modules/gl-matrix/src/gl-matrix.js","webpack:///./src/core/QuadBuffer.ts","webpack:///./src/core/Transform.ts","webpack:///./src/core/PixelTexture.ts","webpack:///./node_modules/pako/lib/zlib/messages.js","webpack:///./src/core/index.ts","webpack:///./node_modules/gl-matrix/src/gl-matrix/mat3.js","webpack:///./node_modules/gl-matrix/src/gl-matrix/vec3.js","webpack:///./node_modules/gl-matrix/src/gl-matrix/vec4.js","webpack:///./src/PngReader/constants.ts","webpack:///./node_modules/pako/lib/zlib/adler32.js","webpack:///./node_modules/pako/lib/zlib/crc32.js","webpack:///./node_modules/pako/lib/utils/strings.js","webpack:///./node_modules/pako/lib/zlib/zstream.js","webpack:///./node_modules/pako/lib/zlib/constants.js","webpack:///./src/main.ts","webpack:///./node_modules/gl-matrix/src/gl-matrix/mat2.js","webpack:///./node_modules/gl-matrix/src/gl-matrix/mat2d.js","webpack:///./node_modules/gl-matrix/src/gl-matrix/mat4.js","webpack:///./node_modules/gl-matrix/src/gl-matrix/quat.js","webpack:///./node_modules/gl-matrix/src/gl-matrix/vec2.js","webpack:///./src/core/Quad.ts","webpack:///./src/core/IndexBuffer.ts","webpack:///./src/core/Renderable.ts","webpack:///./src/core/Renderer.ts","webpack:///./src/core/TextBuffer.ts","webpack:///./src/core/TileBuffer.ts","webpack:///./src/core/IndexedTexture.ts","webpack:///./src/core/PaletteTexture.ts","webpack:///./src/core/RgbaTexture.ts","webpack:///./src/helpers.ts","webpack:///./node_modules/stats.js/build/stats.min.js","webpack:///./node_modules/spectorjs/dist/spector.bundle.js","webpack:///./src/BinaryHelpers.ts","webpack:///./src/PngReader/PngReader.ts","webpack:///./src/PngReader/chunks.ts","webpack:///./node_modules/pako/index.js","webpack:///./node_modules/pako/lib/deflate.js","webpack:///./node_modules/pako/lib/zlib/deflate.js","webpack:///./node_modules/pako/lib/zlib/trees.js","webpack:///./node_modules/pako/lib/inflate.js","webpack:///./node_modules/pako/lib/zlib/inflate.js","webpack:///./node_modules/pako/lib/zlib/inffast.js","webpack:///./node_modules/pako/lib/zlib/inftrees.js","webpack:///./node_modules/pako/lib/zlib/gzheader.js","webpack:///./res/shaders/8bit_vs.glsl","webpack:///./res/shaders/8bit_fs.glsl","webpack:///./res/textures/8bit/tiles.png","webpack:///./res/textures/8bit/font.png","webpack:///./res/fonts/font.json"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","value","gl_matrix_1","FLOAT_SIZE","SHORT_SIZE","BYTE_SIZE","VERTICES_QUAD","INDICES_QUAD","COMP_POS","COMP_Z_INDEX","COMP_SIZE_Z_INDEX","COMP_SIZE_POS","COMP_PAL_PAL_SHIFT","COMP_SIZE_PAL_SHIFT","COMP_UV","COMP_SIZE_UV","UV_TILE","TEXTURE_SIZE","HUGE","Number","MAX_VALUE","MIN_Z","MAX_Z","COMP_RGBA","COMP_RGB","COMP_INDEXED","PAL_OFFSET","OFFSET_Z_INDEX","OFFSET_PAL_SHIFT","OFFSET_UV","VERTEX_SIZE","VERTEX_SIZE_SHORT","QUAD_SIZE","QUAD_SIZE_SHORT","MAT4_IDENT","mat4","identity","create","MAX_VERTICES","MAX_QUADS","glMatrix","EPSILON","ARRAY_TYPE","Float32Array","Array","RANDOM","Math","random","ENABLE_SIMD","SIMD_AVAILABLE","this","USE_SIMD","setMatrixArrayType","type","degree","PI","toRadian","a","equals","b","abs","max","__webpack_exports__","__extends","__","constructor","extendStatics","__rest","e","t","indexOf","getOwnPropertySymbols","length","__decorate","decorators","target","key","desc","arguments","r","getOwnPropertyDescriptor","Reflect","decorate","__param","paramIndex","decorator","__metadata","metadataKey","metadataValue","metadata","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","rejected","throw","result","done","then","apply","__generator","body","verb","v","op","f","TypeError","_","y","label","ops","pop","trys","push","g","sent","return","Symbol","iterator","__exportStar","__values","__read","ar","error","__spread","concat","__await","__asyncGenerator","q","resume","settle","fulfill","shift","asyncIterator","__asyncDelegator","__asyncValues","__assign","setPrototypeOf","__proto__","assign","TYPED_OK","Uint8Array","Uint16Array","Int32Array","obj","sources","slice","source","shrinkBuf","buf","size","subarray","fnTyped","arraySet","dest","src","src_offs","len","dest_offs","set","flattenChunks","chunks","pos","chunk","fnUntyped","setTyped","on","Buf8","Buf16","Buf32","root","factory","id","loaded","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","undefined","twgl","m4","v3","primitives","attributes","draw","framebuffers","programs","textures","typedArrays","vertexArrays","utils","setDefaults","newDefaults","copyExistingProperties","defaults","setDefaults_","addVertexArrayObjectSupport","gl","enableVertexArrayObjects","isWebGL1","ext","getExtension","createVertexArray","createVertexArrayOES","deleteVertexArray","deleteVertexArrayOES","isVertexArray","isVertexArrayOES","bindVertexArray","bindVertexArrayOES","VERTEX_ARRAY_BINDING","VERTEX_ARRAY_BINDING_OES","create3DContext","canvas","opt_attribs","names","context","ii","getContext","getWebGLContext","createContext","resizeCanvasToDisplaySize","multiplier","width","clientWidth","height","clientHeight","notPrivate","copyPublicProperties","dst","keys","filter","forEach","api","isWebGL2","apis","srcApi","setAttributePrefix","prefix","attribPrefix","setBufferFromTypedArray","buffer","array","drawType","bindBuffer","bufferData","STATIC_DRAW","createBufferFromTypedArray","typedArray","WebGLBuffer","ARRAY_BUFFER","createBuffer","isIndices","getNormalizationForTypedArray","Int8Array","getNormalizationForTypedArrayType","typedArrayType","getArray","data","guessNumComponentsFromName","numComponents","texcoordRE","test","colorRE","getNumComponents","arrayName","makeTypedArray","isArrayBuffer","isArray","Type","createAttribsFromArrays","arrays","attribs","normalization","numValues","attribName","attrib","arrayType","numBytes","BYTES_PER_ELEMENT","getGLTypeForTypedArrayType","normalize","getGLTypeForTypedArray","stride","offset","setAttribInfoBufferFromArray","attribInfo","bufferSubData","getBytesPerValueForGLType","BYTE","UNSIGNED_BYTE","SHORT","UNSIGNED_SHORT","INT","UNSIGNED_INT","FLOAT","getNumElementsFromNonIndexedArrays","positionKeys","numElements","getNumElementsFromAttributes","getBufferParameter","BUFFER_SIZE","bytesPerValue","totalElements","createBufferInfoFromArrays","bufferInfo","indices","ELEMENT_ARRAY_BUFFER","elementType","createBufferFromArray","createBuffersFromArrays","buffers","getNumComponents_","getArray_","Uint8ClampedArray","Int16Array","Uint32Array","getTypedArrayTypeForGLType","CTOR","glTypeToTypedArray","ArrayBuffer","tt","shallowCopy","copyNamedProperties","texStorage2D","window","console","bind","warn","drawBufferInfo","count","TRIANGLES","drawElements","drawArrays","drawObjectList","objectsToDraw","lastUsedProgramInfo","lastUsedBufferInfo","active","programInfo","vertexArrayInfo","bindBuffers","useProgram","program","vertexArrayObject","setBuffersAndAttributes","setUniforms","uniforms","getBindPointForSamplerType","typeMap","bindPoint","floatSetter","location","uniform1f","floatArraySetter","uniform1fv","floatVec2Setter","uniform2fv","floatVec3Setter","uniform3fv","floatVec4Setter","uniform4fv","intSetter","uniform1i","intArraySetter","uniform1iv","intVec2Setter","uniform2iv","intVec3Setter","uniform3iv","intVec4Setter","uniform4iv","uintSetter","uniform1ui","uintArraySetter","uniform1uiv","uintVec2Setter","uniform2uiv","uintVec3Setter","uniform3uiv","uintVec4Setter","uniform4uiv","floatMat2Setter","uniformMatrix2fv","floatMat3Setter","uniformMatrix3fv","floatMat4Setter","uniformMatrix4fv","floatMat23Setter","uniformMatrix2x3fv","floatMat32Setter","uniformMatrix3x2fv","floatMat24Setter","uniformMatrix2x4fv","floatMat42Setter","uniformMatrix4x2fv","floatMat34Setter","uniformMatrix3x4fv","floatMat43Setter","uniformMatrix4x3fv","samplerSetter","unit","textureOrPair","texture","sampler","WebGLTexture","activeTexture","TEXTURE0","bindTexture","bindSampler","samplerArraySetter","units","index","floatAttribSetter","enableVertexAttribArray","vertexAttribPointer","intAttribSetter","vertexAttribIPointer","matAttribSetter","typeInfo","defaultSize","rowOffset","addLineNumbers","lineOffset","split","map","line","ndx","join","loadShader","shaderSource","shaderType","opt_errorCallback","errFn","shader","createShader","spaceRE","replace","compileShader","getShaderParameter","COMPILE_STATUS","lastError","getShaderInfoLog","deleteShader","getProgramOptions","opt_locations","errorCallback","opt","attribLocations","transformFeedbackVaryings","options","getShaderTypeFromScriptType","scriptType","FRAGMENT_SHADER","VERTEX_SHADER","deleteShaders","shaders","createProgram","progOptions","realShaders","newShaders","elem","document","getElementById","text","defaultShaderType","WebGLShader","programOptions","attachShader","bindAttribLocation","varyings","transformFeedbackMode","SEPARATE_ATTRIBS","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","deleteProgram","createShaderFromScript","scriptId","opt_shaderType","shaderScript","createProgramFromScripts","shaderScriptIds","createProgramFromSources","shaderSources","createUniformSetters","textureUnit","uniformSetters","numUniforms","ACTIVE_UNIFORMS","uniformInfo","getActiveUniform","substr","setter","getUniformLocation","toString","arraySetter","createTransformFeedbackInfo","info","numVaryings","TRANSFORM_FEEDBACK_VARYINGS","varying","getTransformFeedbackVarying","bindTransformFeedbackInfo","transformFeedbackInfo","bindBufferRange","TRANSFORM_FEEDBACK_BUFFER","bindBufferBase","unbindTransformFeedbackInfo","createTransformFeedback","tf","bindTransformFeedback","TRANSFORM_FEEDBACK","createUniformBlockSpecFromProgram","uniformData","uniformIndices","pair","pname","getActiveUniforms","blockSpecs","numUniformBlocks","ACTIVE_UNIFORM_BLOCKS","getActiveUniformBlockName","blockSpec","usedByVertexShader","getActiveUniformBlockParameter","UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER","usedByFragmentShader","UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER","UNIFORM_BLOCK_DATA_SIZE","UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES","used","usedByVertexSahder","createUniformBlockInfoFromProgram","uniformBlockSpec","blockName","uniformBufferIndex","UNIFORM_BUFFER","uniformBlockBinding","arraySuffixRE","uniformNdx","asFloat","createUniformBlockInfo","bindUniformBlock","uniformBlockInfo","bufferBindIndex","byteLength","setUniformBlock","DYNAMIC_DRAW","setBlockUniforms","values","setters","actualSetters","numArgs","andx","vals","createAttributeSetters","attribSetters","numAttribs","ACTIVE_ATTRIBUTES","getActiveAttrib","getAttribLocation","attrTypeMap","setAttributes","createProgramInfoFromProgram","createProgramInfo","good","script","getAttachmentPointForFormat","format","attachmentsByFormat","isRenderbufferFormat","renderbufferFormats","createFramebufferInfo","attachments","FRAMEBUFFER","fb","createFramebuffer","bindFramebuffer","drawingBufferWidth","drawingBufferHeight","defaultAttachments","colorAttachmentCount","framebufferInfo","framebuffer","attachmentOptions","attachment","attachmentPoint","COLOR_ATTACHMENT0","createRenderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","textureOptions","auto","min","minMag","LINEAR","mag","wrapS","wrap","CLAMP_TO_EDGE","wrapT","createTexture","WebGLRenderbuffer","framebufferRenderbuffer","framebufferTexture2D","texTarget","TEXTURE_2D","level","resizeFramebufferInfo","resizeTexture","bindFramebufferInfo","viewport","getBytesPerElementForInternalFormat","internalFormat","textureInternalFormatInfo","bytesPerElement","bytesPerElementMap","getFormatAndTypeForInternalFormat","textureFormat","isPowerOf2","canGenerateMipmap","colorRenderable","textureFilterable","canFilter","getNumComponentsForFormat","formatInfo","numColorComponents","getTextureTypeForArrayType","defaultType","guessDimensions","sqrt","TEXTURE_CUBE_MAP","setDefaultTextureColor","color","textureColor","savePackState","colorspaceConversion","lastPackState","getParameter","UNPACK_COLORSPACE_CONVERSION_WEBGL","pixelStorei","premultiplyAlpha","UNPACK_PREMULTIPLY_ALPHA_WEBGL","flipY","UNPACK_FLIP_Y_WEBGL","restorePackState","setTextureSamplerParameters","parameteriFn","TEXTURE_MIN_FILTER","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","TEXTURE_WRAP_T","TEXTURE_3D","WebGLSamplerCtor","TEXTURE_WRAP_R","wrapR","minLod","TEXTURE_MIN_LOD","maxLod","TEXTURE_MAX_LOD","baseLevel","TEXTURE_BASE_LEVEL","maxLevel","TEXTURE_MAX_LEVEL","setTextureParameters","tex","texParameteri","setSamplerParameters","samplerParameteri","createSampler","createSamplers","samplerOptions","samplers","make1Pixel","setTextureFilteringForSize","RGBA","generateMipmap","filtering","NEAREST","getCubeFaceOrder","cubeFaceOrder","TEXTURE_CUBE_MAP_POSITIVE_X","TEXTURE_CUBE_MAP_NEGATIVE_X","TEXTURE_CUBE_MAP_POSITIVE_Y","TEXTURE_CUBE_MAP_NEGATIVE_Y","TEXTURE_CUBE_MAP_POSITIVE_Z","TEXTURE_CUBE_MAP_NEGATIVE_Z","getCubeFacesWithNdx","faces","facesWithNdx","face","sort","setTextureFromElement","element","formatType","slices","imgWidth","imgHeight","nodeName","ctx","xOffset","yOffset","drawImage","texImage2D","smallest","largest","depth","xMult","yMult","texImage3D","srcX","srcY","srcW","srcH","dstW","dstH","texSubImage3D","noop","loadImage","url","crossOrigin","callback","clearEventHandlers","img","removeEventListener","onError","onLoad","msg","Image","addEventListener","setTextureTo1PixelColor","TEXTURE_2D_ARRAY","loadTextureFromUrl","err","loadCubemapFromUrls","uploadImg","faceTarget","numToLoad","errors","otherTarget","imgs","urls","loadSlicesFromUrls","firstImage","setTextureFromArray","glEnumToString","dimensions","cbrt","UNPACK_ALIGNMENT","unpackAlignment","elementsPerElement","faceSize","setEmptyTexture","HTMLElement","isAsyncSrc","createTextures","callCallbackIfReady","numDownloading","setTimeout","images","onLoadFn","createElement","RGB","RG","init","enums","WebGLSampler","createVertexArrayInfo","programInfos","vao","createVAOAndSetAttributes","createVAOFromBufferInfo","setDefaultType","ctor","oldType","MatType","negate","copy","transpose","m00","m01","m02","m03","m10","m11","m12","m13","m20","m21","m22","m23","m30","m31","m32","m33","inverse","tmp_0","tmp_1","tmp_2","tmp_3","tmp_4","tmp_5","tmp_6","tmp_7","tmp_8","tmp_9","tmp_10","tmp_11","tmp_12","tmp_13","tmp_14","tmp_15","tmp_16","tmp_17","tmp_18","tmp_19","tmp_20","tmp_21","tmp_22","tmp_23","t0","t1","t2","t3","multiply","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","a30","a31","a32","a33","b00","b01","b02","b03","b10","b11","b12","b13","b20","b21","b22","b23","b30","b31","b32","b33","setTranslation","getTranslation","getAxis","axis","off","setAxis","perspective","fieldOfViewYInRadians","aspect","zNear","zFar","tan","rangeInv","ortho","left","right","bottom","top","near","far","frustum","dx","dy","dz","lookAt","eye","up","xAxis","tempV3a","yAxis","tempV3b","zAxis","tempV3c","subtract","cross","translation","translate","v0","v1","v2","rotationX","angleInRadians","cos","sin","rotateX","rotationY","rotateY","rotationZ","rotateZ","axisRotation","x","z","xx","yy","zz","oneMinusCosine","axisRotate","r00","r01","r02","r10","r11","r12","r20","r21","r22","scaling","scale","transformPoint","transformDirection","transformNormal","mi","rotateAxis","VecType","add","lerp","mulScalar","k","divScalar","dot","lengthSq","distance","distanceSq","lenSq","divide","augmentTypedArray","cursor","jj","reset","opt_index","createAugmentedTypedArray","opt_type","allButIndices","deindexVertices","vertices","expandToUnindexed","channel","srcBuffer","dstBuffer","newVertices","flattenNormals","normals","normal","numNormals","nax","nay","naz","nbx","nby","nbz","ncx","ncy","ncz","nx","ny","nz","applyFuncToV3Array","matrix","fn","tmp","reorientDirections","reorientNormals","reorientPositions","reorientVertices","createXYQuadVertices","position","texcoord","createPlaneVertices","subdivisionsWidth","subdivisionsDepth","numVertices","positions","texcoords","u","numVertsAcross","createSphereVertices","radius","subdivisionsAxis","subdivisionsHeight","opt_startLatitudeInRadians","opt_endLatitudeInRadians","opt_startLongitudeInRadians","opt_endLongitudeInRadians","Error","latRange","longRange","theta","phi","sinTheta","cosTheta","sinPhi","cosPhi","ux","uy","uz","numVertsAround","createCubeVertices","cornerVertices","faceNormals","uvCoords","faceIndices","CUBE_FACE_INDICES","uv","createTruncatedConeVertices","bottomRadius","topRadius","radialSubdivisions","verticalSubdivisions","opt_topCap","opt_bottomCap","topCap","bottomCap","extra","vertsAroundEdge","slant","atan2","cosSlant","sinSlant","start","end","ringRadius","expandRLEData","rleData","padding","runLength","create3DFVertices","colors","numVerts","createCresentVertices","verticalRadius","outerRadius","innerRadius","thickness","subdivisionsDown","startOffset","endOffset","createArc","arcRadius","normalMult","normalAdd","uMult","uAdd","uBack","subdivisionsThick","xBack","angle","offsetRange","px","py","pz","createSurface","leftArcOffset","rightArcOffset","numVerticesDown","createCylinderVertices","createTorusVertices","bodySubdivisions","startAngle","endAngle","range","radialParts","bodyParts","sliceAngle","sliceSin","ring","ringAngle","xSin","zCos","nextRingIndex","nextSliceIndex","createDiscVertices","divisions","stacks","stackPower","firstIndex","radiusSpan","pointsPerStack","stack","stackRadius","pow","randInt","makeRandomVertexColors","vcolors","rand","numVertsPerColor","vertsPerColor","numSets","createBufferFunc","createBufferInfoFunc","copyElements","dstNdx","createArrayOfSameType","srcArray","arraySrc","newArray","newArraySpec","arraySpecPropertyNames","concatVertices","arrayOfArrays","getLengthOfCombinedArrays","arraySpec","arrayInfo","spec","copyArraysToNewArray","base","baseIndex","baseName","newArrays","duplicateVertices","create3DFBufferInfo","create3DFBuffers","createCubeBufferInfo","createCubeBuffers","createPlaneBufferInfo","createPlaneBuffers","createSphereBufferInfo","createSphereBuffers","createTruncatedConeBufferInfo","createTruncatedConeBuffers","createXYQuadBufferInfo","createXYQuadBuffers","createCresentBufferInfo","createCresentBuffers","createCylinderBufferInfo","createCylinderBuffers","createTorusBufferInfo","createTorusBuffers","createDiscBufferInfo","createDiscBuffers","mat2","mat2d","mat3","quat","vec2","vec3","vec4","constants_1","Transform_1","IndexBuffer_1","POS_OFFSET_2X","POS_OFFSET_2Y","POS_OFFSET_3X","POS_OFFSET_3Y","POS_OFFSET_4X","POS_OFFSET_4Y","Z_OFFSET_1","Z_OFFSET_2","Z_OFFSET_3","Z_OFFSET_4","PAL_OFFSET_1","PAL_OFFSET_2","PAL_OFFSET_3","PAL_OFFSET_4","UV_OFFSET_1X","UV_OFFSET_1Y","UV_OFFSET_2X","UV_OFFSET_2Y","UV_OFFSET_3X","UV_OFFSET_3Y","UV_OFFSET_4X","UV_OFFSET_4Y","BufferedSprite","_id","_buffer","transform","tag","_isDirty","_transform","Transform2d","w","h","textureX","textureY","palOffset","_options","getAttributeInfo","update","isDirty","setPositionTransformed","setZ","setPalShift","setUv","center","ox","oy","QuadBuffer","_gl","_capacity","_dirty_start","_dirty_end","_data","_shortView","_byteView","_indices","_bufferInfo","_range","_sprites","destroy","deleteBuffer","packedBuffer","indexBuffer","IndexBuffer","z_index","pal_shift","setPosition","x1","y1","x2","y2","POS_OFFSET_1X","setQuadDirty","bytes","pal","getPalShift","getZ","uvx1","uvy1","uvx2","uvy2","startShort","startByte","shorts","_resize","addMany","amount","res","setAttributeBytes","getAttributeBytes","clearQuad","byteOffset","setAllDirty","createSprite","sprite","log","newBuffer","newBytes","_vec2Transform","_dirty","_rDirty","_matrix","_quat","_trans","fromValues","_origin","_scale","_axis","_angle","_buildMatrix","_buildQuat","fromRotationTranslationScaleOrigin","setAxisAngle","ColorComponent","PixelTexture","_dirtyStart","_dirtyEnd","_texdata","_components","_texture","getRawData","setRawData","LUMINANCE","ALPHA","setDataFunc","func","totalComp","floor","comp","pixel","updateLength","updateData","rowSize","texSubImage2D","getPixel","setPixel","setRowDirty","2","1","0","-1","-2","-3","-4","-5","-6","tslib_1","out","fromMat4","clone","invert","det","adjoint","determinant","mul","rotate","rad","fromTranslation","fromRotation","fromScaling","fromMat2d","fromQuat","z2","yx","zx","zy","wx","wy","wz","normalFromMat4","b04","b05","b06","b07","b08","b09","str","frob","sub","multiplyScalar","multiplyScalarAndAdd","exactEquals","a0","a1","a2","a3","a4","a5","a6","a7","a8","b0","b1","b2","b3","b4","b5","b6","b7","b8","div","ceil","round","scaleAndAdd","dist","squaredDistance","sqrDist","squaredLength","sqrLen","ax","ay","az","bx","by","bz","hermite","factorTimes2","factor1","factor2","factor3","factor4","bezier","inverseFactor","inverseFactorTimesTwo","zScale","transformMat4","transformMat3","transformQuat","qx","qy","qz","qw","ix","iy","iz","iw","vec","arg","tempA","tempB","cosine","acos","aw","ChunkType","ColorType","SIGN_OFFSET","LENGTH_LENGTH","TYPE_LENGTH","CRC_LENGTH","adler32","adler","s1","s2","crc32","crc","crcTable","table","buf2binstring","STR_APPLY_UIA_OK","STR_APPLY_OK","String","fromCharCode","_utf8len","string2buf","c2","m_pos","str_len","buf_len","charCodeAt","binstring2buf","buf2string","c_len","utf16buf","utf8border","ZStream","input","next_in","avail_in","total_in","output","next_out","avail_out","total_out","state","data_type","Z_NO_FLUSH","Z_PARTIAL_FLUSH","Z_SYNC_FLUSH","Z_FULL_FLUSH","Z_FINISH","Z_BLOCK","Z_TREES","Z_OK","Z_STREAM_END","Z_NEED_DICT","Z_ERRNO","Z_STREAM_ERROR","Z_DATA_ERROR","Z_BUF_ERROR","Z_NO_COMPRESSION","Z_BEST_SPEED","Z_BEST_COMPRESSION","Z_DEFAULT_COMPRESSION","Z_FILTERED","Z_HUFFMAN_ONLY","Z_RLE","Z_FIXED","Z_DEFAULT_STRATEGY","Z_BINARY","Z_TEXT","Z_UNKNOWN","Z_DEFLATED","core_1","helpers_1","Stats","SPECTOR","BinaryHelpers_1","PngReader_1","spector","Spector","displayUI","spyCanvases","renderer","tiles","render","time","stats","begin","sprites","spr","sprites2","requestAnimationFrame","vs","fs","palette","tilesetPng","tileset","fontPng","font","fontInfo","fntBuffer","testR","posx","posy","_a","showPanel","appendChild","dom","initWebGl","PaletteTexture","PngReader","stringToBuffer","IndexedTexture","createPixelData","setRawPalette","createPaletteDataRgba","Renderer","paletteId","zSort","blendMode","createTileSprite","TextBuffer","write","Renderable","renderList","setInterval","LDU","L","D","U","tx","ty","aa","ab","ac","ad","atx","aty","scalar","SIMD","tmp01","tmp23","out0","out1","out2","out3","Float32x4","load","shuffle","store","row0","row1","row2","row3","tmp1","minor0","minor1","minor2","minor3","swizzle","reciprocalApproximation","splat","a_1","a_2","a_0","fromXRotation","fromYRotation","fromZRotation","fromRotationTranslation","xy","xz","yz","mat","getRotation","trace","S","fromRotationTranslationScale","sx","sy","sz","oz","rl","tb","nf","fovy","perspectiveFromFieldOfView","fov","upTan","upDegrees","downTan","downDegrees","leftTan","leftDegrees","rightTan","rightDegrees","xScale","yScale","lr","bt","x0","y0","z0","z1","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","a9","a14","a15","b9","b14","b15","rotationTo","tmpvec3","xUnitVec3","yUnitVec3","setAxes","matr","view","fromMat3","getAxisAngle","out_axis","bw","calculateW","slerp","omega","cosom","sinom","scale0","scale1","sqlerp","temp1","temp2","invDot","conjugate","fRoot","fTrace","j","transformMat2","transformMat2d","Quad","_offset","_pos1","_pos2","_pos3","_pos4","_z_shift1","_z_shift2","_z_shift3","_z_shift4","_uv1","_uv2","_uv3","_uv4","applyTransform","out_quad","setPos","uw","uh","vertex","twgl_js_1","mode7","settings","_settings","_ortho","_projection","_view","_matrixTemp","_defaults","_this","_setOptions","_getUniforms","vertexSize","enable","DEPTH_TEST","disable","BLEND","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","QuadBuffer_1","_super","_fontInfo","capacity","_fontLoookup","_text","_ptr","_createFont","seek","clear","x_1","_font","y_1","chars","wRow","widths","TileBuffer","_width","_height","_twidth","_theight","tids","baseZ","_createTileset","setTiles","setTile","tid","seq","setTileSeq","ts","_tileset","ctr","_createGeometry","PixelTexture_1","RgbaTexture_1","setPalFunc","palId","totComp","setPalDirty","setIndex","getIndex","switchColors","idx1","idx2","temp","RgbaTexture","premultipliedAlpha","alpha","antialias","path","createAlphaTexture","mesh","index_1","sb","children","style","display","cssText","preventDefault","performance","Date","now","Panel","self","memory","REVISION","addPanel","usedJSHeapSize","jsHeapSizeLimit","domElement","setMode","Infinity","devicePixelRatio","textBaseline","fillStyle","fillRect","fillText","globalAlpha","default","btoa","sourceRoot","unescape","encodeURIComponent","JSON","stringify","E","refs","parts","css","media","sourceMap","insertInto","T","insertAt","nextSibling","insertBefore","firstChild","parentNode","removeChild","splice","attrs","rel","setAttribute","singleton","URL","createObjectURL","revokeObjectURL","Blob","href","styleSheet","R","createTextNode","childNodes","convertToAbsoluteUrls","C","all","atob","querySelector","DEBUG","Boolean","WorkerGlobalScope","Prism","manual","util","encode","content","alias","match","objId","__id","languages","extend","DFS","plugins","highlightAll","selector","hooks","run","elements","querySelectorAll","highlightElement","className","toLowerCase","textContent","language","grammar","code","Worker","filename","onmessage","highlightedCode","innerHTML","postMessage","immediateClose","highlight","tokenize","Token","rest","inside","lookbehind","greedy","pattern","global","RegExp","lastIndex","exec","A","I","N","F","classes","parent","spellcheck","parse","close","currentScript","getElementsByTagName","hasAttribute","readyState","markup","comment","prolog","doctype","cdata","punctuation","namespace","attr-value","attr-name","entity","title","xml","html","mathml","svg","atrule","rule","string","important","function","style-attr","clike","class-name","keyword","boolean","number","operator","javascript","regex","template-string","interpolation","interpolation-punctuation","js","glsl","preprocessor","callbacks","counter","remove","trigger","Event","Utils","noLog","warning","LogLevel","setLevel","ConsoleLogger","getStackTrace","message","callee","caller","substring","StackTrace","nowFunction","dateBasedPerformanceNow","getTime","timing","navigationStart","Time","merge","isWebGlConstant","WebGlConstantsByValue","stringifyWebGlConstant","zeroMeaningByCommand","oneMeaningByCommand","DEPTH_BUFFER_BIT","description","STENCIL_BUFFER_BIT","COLOR_BUFFER_BIT","POINTS","LINES","LINE_LOOP","LINE_STRIP","TRIANGLE_STRIP","TRIANGLE_FAN","ZERO","ONE","SRC_COLOR","ONE_MINUS_SRC_COLOR","DST_ALPHA","ONE_MINUS_DST_ALPHA","DST_COLOR","ONE_MINUS_DST_COLOR","SRC_ALPHA_SATURATE","CONSTANT_COLOR","ONE_MINUS_CONSTANT_COLOR","CONSTANT_ALPHA","ONE_MINUS_CONSTANT_ALPHA","FUNC_ADD","FUNC_SUBSTRACT","FUNC_REVERSE_SUBTRACT","BLEND_EQUATION","BLEND_EQUATION_RGB","BLEND_EQUATION_ALPHA","BLEND_DST_RGB","BLEND_SRC_RGB","BLEND_DST_ALPHA","BLEND_SRC_ALPHA","BLEND_COLOR","ARRAY_BUFFER_BINDING","ELEMENT_ARRAY_BUFFER_BINDING","LINE_WIDTH","ALIASED_POINT_SIZE_RANGE","ALIASED_LINE_WIDTH_RANGE","CULL_FACE_MODE","FRONT_FACE","DEPTH_RANGE","DEPTH_WRITEMASK","DEPTH_CLEAR_VALUE","DEPTH_FUNC","STENCIL_CLEAR_VALUE","STENCIL_FUNC","STENCIL_FAIL","STENCIL_PASS_DEPTH_FAIL","STENCIL_PASS_DEPTH_PASS","STENCIL_REF","STENCIL_VALUE_MASK","STENCIL_WRITEMASK","STENCIL_BACK_FUNC","STENCIL_BACK_FAIL","STENCIL_BACK_PASS_DEPTH_FAIL","STENCIL_BACK_PASS_DEPTH_PASS","STENCIL_BACK_REF","STENCIL_BACK_VALUE_MASK","STENCIL_BACK_WRITEMASK","VIEWPORT","SCISSOR_BOX","COLOR_CLEAR_VALUE","COLOR_WRITEMASK","PACK_ALIGNMENT","MAX_TEXTURE_SIZE","MAX_VIEWPORT_DIMS","SUBPIXEL_BITS","RED_BITS","GREEN_BITS","BLUE_BITS","ALPHA_BITS","DEPTH_BITS","STENCIL_BITS","POLYGON_OFFSET_UNITS","POLYGON_OFFSET_FACTOR","TEXTURE_BINDING_2D","SAMPLE_BUFFERS","SAMPLES","SAMPLE_COVERAGE_VALUE","SAMPLE_COVERAGE_INVERT","COMPRESSED_TEXTURE_FORMATS","VENDOR","RENDERER","VERSION","IMPLEMENTATION_COLOR_READ_TYPE","IMPLEMENTATION_COLOR_READ_FORMAT","BROWSER_DEFAULT_WEBGL","STREAM_DRAW","BUFFER_USAGE","CURRENT_VERTEX_ATTRIB","VERTEX_ATTRIB_ARRAY_ENABLED","VERTEX_ATTRIB_ARRAY_SIZE","VERTEX_ATTRIB_ARRAY_STRIDE","VERTEX_ATTRIB_ARRAY_TYPE","VERTEX_ATTRIB_ARRAY_NORMALIZED","VERTEX_ATTRIB_ARRAY_POINTER","VERTEX_ATTRIB_ARRAY_BUFFER_BINDING","CULL_FACE","FRONT","BACK","FRONT_AND_BACK","DITHER","POLYGON_OFFSET_FILL","SAMPLE_ALPHA_TO_COVERAGE","SAMPLE_COVERAGE","SCISSOR_TEST","STENCIL_TEST","NO_ERROR","INVALID_ENUM","INVALID_VALUE","INVALID_OPERATION","OUT_OF_MEMORY","CONTEXT_LOST_WEBGL","CW","CCW","DONT_CARE","FASTEST","NICEST","GENERATE_MIPMAP_HINT","DEPTH_COMPONENT","LUMINANCE_ALPHA","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","UNSIGNED_SHORT_5_6_5","DELETE_STATUS","VALIDATE_STATUS","ATTACHED_SHADERS","MAX_VERTEX_ATTRIBS","MAX_VERTEX_UNIFORM_VECTORS","MAX_VARYING_VECTORS","MAX_COMBINED_TEXTURE_IMAGE_UNITS","MAX_VERTEX_TEXTURE_IMAGE_UNITS","MAX_TEXTURE_IMAGE_UNITS","MAX_FRAGMENT_UNIFORM_VECTORS","SHADER_TYPE","SHADING_LANGUAGE_VERSION","CURRENT_PROGRAM","NEVER","ALWAYS","LESS","EQUAL","LEQUAL","GREATER","GEQUAL","NOTEQUAL","KEEP","REPLACE","INCR","DECR","INVERT","INCR_WRAP","DECR_WRAP","NEAREST_MIPMAP_NEAREST","LINEAR_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","LINEAR_MIPMAP_LINEAR","TEXTURE","TEXTURE_BINDING_CUBE_MAP","MAX_CUBE_MAP_TEXTURE_SIZE","TEXTURE1","TEXTURE2","TEXTURE3","TEXTURE4","TEXTURE5","TEXTURE6","TEXTURE7","TEXTURE8","TEXTURE9","TEXTURE10","TEXTURE11","TEXTURE12","TEXTURE13","TEXTURE14","TEXTURE15","TEXTURE16","TEXTURE17","TEXTURE18","TEXTURE19","TEXTURE20","TEXTURE21","TEXTURE22","TEXTURE23","TEXTURE24","TEXTURE25","TEXTURE26","TEXTURE27","TEXTURE28","TEXTURE29","TEXTURE30","TEXTURE31","ACTIVE_TEXTURE","REPEAT","MIRRORED_REPEAT","FLOAT_VEC2","FLOAT_VEC3","FLOAT_VEC4","INT_VEC2","INT_VEC3","INT_VEC4","BOOL","BOOL_VEC2","BOOL_VEC3","BOOL_VEC4","FLOAT_MAT2","FLOAT_MAT3","FLOAT_MAT4","SAMPLER_2D","SAMPLER_CUBE","LOW_FLOAT","MEDIUM_FLOAT","HIGH_FLOAT","LOW_INT","MEDIUM_INT","HIGH_INT","RGBA4","RGB5_A1","RGB565","DEPTH_COMPONENT16","STENCIL_INDEX","STENCIL_INDEX8","DEPTH_STENCIL","RENDERBUFFER_WIDTH","RENDERBUFFER_HEIGHT","RENDERBUFFER_INTERNAL_FORMAT","RENDERBUFFER_RED_SIZE","RENDERBUFFER_GREEN_SIZE","RENDERBUFFER_BLUE_SIZE","RENDERBUFFER_ALPHA_SIZE","RENDERBUFFER_DEPTH_SIZE","RENDERBUFFER_STENCIL_SIZE","FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE","FRAMEBUFFER_ATTACHMENT_OBJECT_NAME","FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL","FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE","DEPTH_ATTACHMENT","STENCIL_ATTACHMENT","DEPTH_STENCIL_ATTACHMENT","NONE","FRAMEBUFFER_COMPLETE","FRAMEBUFFER_INCOMPLETE_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_DIMENSIONS","FRAMEBUFFER_UNSUPPORTED","FRAMEBUFFER_BINDING","RENDERBUFFER_BINDING","MAX_RENDERBUFFER_SIZE","INVALID_FRAMEBUFFER_OPERATION","READ_BUFFER","UNPACK_ROW_LENGTH","UNPACK_SKIP_ROWS","UNPACK_SKIP_PIXELS","PACK_ROW_LENGTH","PACK_SKIP_ROWS","PACK_SKIP_PIXELS","TEXTURE_BINDING_3D","UNPACK_SKIP_IMAGES","UNPACK_IMAGE_HEIGHT","MAX_3D_TEXTURE_SIZE","MAX_ELEMENTS_VERTICES","MAX_ELEMENTS_INDICES","MAX_TEXTURE_LOD_BIAS","MAX_FRAGMENT_UNIFORM_COMPONENTS","MAX_VERTEX_UNIFORM_COMPONENTS","MAX_ARRAY_TEXTURE_LAYERS","MIN_PROGRAM_TEXEL_OFFSET","MAX_PROGRAM_TEXEL_OFFSET","MAX_VARYING_COMPONENTS","FRAGMENT_SHADER_DERIVATIVE_HINT","RASTERIZER_DISCARD","MAX_VERTEX_OUTPUT_COMPONENTS","MAX_FRAGMENT_INPUT_COMPONENTS","MAX_SERVER_WAIT_TIMEOUT","MAX_ELEMENT_INDEX","RED","RGB8","RGBA8","RGB10_A2","TEXTURE_COMPARE_MODE","TEXTURE_COMPARE_FUNC","SRGB","SRGB8","SRGB8_ALPHA8","COMPARE_REF_TO_TEXTURE","RGBA32F","RGB32F","RGBA16F","RGB16F","TEXTURE_BINDING_2D_ARRAY","R11F_G11F_B10F","RGB9_E5","RGBA32UI","RGB32UI","RGBA16UI","RGB16UI","RGBA8UI","RGB8UI","RGBA32I","RGB32I","RGBA16I","RGB16I","RGBA8I","RGB8I","RED_INTEGER","RGB_INTEGER","RGBA_INTEGER","R8","RG8","R16F","R32F","RG16F","RG32F","R8I","R8UI","R16I","R16UI","R32I","R32UI","RG8I","RG8UI","RG16I","RG16UI","RG32I","RG32UI","R8_SNORM","RG8_SNORM","RGB8_SNORM","RGBA8_SNORM","RGB10_A2UI","TEXTURE_IMMUTABLE_FORMAT","TEXTURE_IMMUTABLE_LEVELS","UNSIGNED_INT_2_10_10_10_REV","UNSIGNED_INT_10F_11F_11F_REV","UNSIGNED_INT_5_9_9_9_REV","FLOAT_32_UNSIGNED_INT_24_8_REV","UNSIGNED_INT_24_8","HALF_FLOAT","RG_INTEGER","INT_2_10_10_10_REV","CURRENT_QUERY","QUERY_RESULT","QUERY_RESULT_AVAILABLE","ANY_SAMPLES_PASSED","ANY_SAMPLES_PASSED_CONSERVATIVE","MAX_DRAW_BUFFERS","DRAW_BUFFER0","DRAW_BUFFER1","DRAW_BUFFER2","DRAW_BUFFER3","DRAW_BUFFER4","DRAW_BUFFER5","DRAW_BUFFER6","DRAW_BUFFER7","DRAW_BUFFER8","DRAW_BUFFER9","DRAW_BUFFER10","DRAW_BUFFER11","DRAW_BUFFER12","DRAW_BUFFER13","DRAW_BUFFER14","DRAW_BUFFER15","MAX_COLOR_ATTACHMENTS","COLOR_ATTACHMENT1","COLOR_ATTACHMENT2","COLOR_ATTACHMENT3","COLOR_ATTACHMENT4","COLOR_ATTACHMENT5","COLOR_ATTACHMENT6","COLOR_ATTACHMENT7","COLOR_ATTACHMENT8","COLOR_ATTACHMENT9","COLOR_ATTACHMENT10","COLOR_ATTACHMENT11","COLOR_ATTACHMENT12","COLOR_ATTACHMENT13","COLOR_ATTACHMENT14","COLOR_ATTACHMENT15","SAMPLER_3D","SAMPLER_2D_SHADOW","SAMPLER_2D_ARRAY","SAMPLER_2D_ARRAY_SHADOW","SAMPLER_CUBE_SHADOW","INT_SAMPLER_2D","INT_SAMPLER_3D","INT_SAMPLER_CUBE","INT_SAMPLER_2D_ARRAY","UNSIGNED_INT_SAMPLER_2D","UNSIGNED_INT_SAMPLER_3D","UNSIGNED_INT_SAMPLER_CUBE","UNSIGNED_INT_SAMPLER_2D_ARRAY","MAX_SAMPLES","SAMPLER_BINDING","PIXEL_PACK_BUFFER","PIXEL_UNPACK_BUFFER","PIXEL_PACK_BUFFER_BINDING","PIXEL_UNPACK_BUFFER_BINDING","COPY_READ_BUFFER","COPY_WRITE_BUFFER","COPY_READ_BUFFER_BINDING","COPY_WRITE_BUFFER_BINDING","FLOAT_MAT2x3","FLOAT_MAT2x4","FLOAT_MAT3x2","FLOAT_MAT3x4","FLOAT_MAT4x2","FLOAT_MAT4x3","UNSIGNED_INT_VEC2","UNSIGNED_INT_VEC3","UNSIGNED_INT_VEC4","UNSIGNED_NORMALIZED","SIGNED_NORMALIZED","VERTEX_ATTRIB_ARRAY_INTEGER","VERTEX_ATTRIB_ARRAY_DIVISOR","TRANSFORM_FEEDBACK_BUFFER_MODE","MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS","TRANSFORM_FEEDBACK_BUFFER_START","TRANSFORM_FEEDBACK_BUFFER_SIZE","TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN","MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS","MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS","INTERLEAVED_ATTRIBS","TRANSFORM_FEEDBACK_BUFFER_BINDING","TRANSFORM_FEEDBACK_PAUSED","TRANSFORM_FEEDBACK_ACTIVE","TRANSFORM_FEEDBACK_BINDING","FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING","FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE","FRAMEBUFFER_ATTACHMENT_RED_SIZE","FRAMEBUFFER_ATTACHMENT_GREEN_SIZE","FRAMEBUFFER_ATTACHMENT_BLUE_SIZE","FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE","FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE","FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE","FRAMEBUFFER_DEFAULT","DEPTH24_STENCIL8","DRAW_FRAMEBUFFER_BINDING","READ_FRAMEBUFFER","DRAW_FRAMEBUFFER","READ_FRAMEBUFFER_BINDING","RENDERBUFFER_SAMPLES","FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER","FRAMEBUFFER_INCOMPLETE_MULTISAMPLE","UNIFORM_BUFFER_BINDING","UNIFORM_BUFFER_START","UNIFORM_BUFFER_SIZE","MAX_VERTEX_UNIFORM_BLOCKS","MAX_FRAGMENT_UNIFORM_BLOCKS","MAX_COMBINED_UNIFORM_BLOCKS","MAX_UNIFORM_BUFFER_BINDINGS","MAX_UNIFORM_BLOCK_SIZE","MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS","MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS","UNIFORM_BUFFER_OFFSET_ALIGNMENT","UNIFORM_TYPE","UNIFORM_SIZE","UNIFORM_BLOCK_INDEX","UNIFORM_OFFSET","UNIFORM_ARRAY_STRIDE","UNIFORM_MATRIX_STRIDE","UNIFORM_IS_ROW_MAJOR","UNIFORM_BLOCK_BINDING","UNIFORM_BLOCK_ACTIVE_UNIFORMS","OBJECT_TYPE","SYNC_CONDITION","SYNC_STATUS","SYNC_FLAGS","SYNC_FENCE","SYNC_GPU_COMMANDS_COMPLETE","UNSIGNALED","SIGNALED","ALREADY_SIGNALED","TIMEOUT_EXPIRED","CONDITION_SATISFIED","WAIT_FAILED","SYNC_FLUSH_COMMANDS_BIT","COLOR","DEPTH","STENCIL","MIN","MAX","DEPTH_COMPONENT24","STREAM_READ","STREAM_COPY","STATIC_READ","STATIC_COPY","DYNAMIC_READ","DYNAMIC_COPY","DEPTH_COMPONENT32F","DEPTH32F_STENCIL8","INVALID_INDEX","TIMEOUT_IGNORED","MAX_CLIENT_WAIT_TIMEOUT_WEBGL","VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE","extensionName","UNMASKED_VENDOR_WEBGL","UNMASKED_RENDERER_WEBGL","MAX_TEXTURE_MAX_ANISOTROPY_EXT","TEXTURE_MAX_ANISOTROPY_EXT","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","COMPRESSED_R11_EAC","COMPRESSED_SIGNED_R11_EAC","COMPRESSED_RG11_EAC","COMPRESSED_SIGNED_RG11_EAC","COMPRESSED_RGB8_ETC2","COMPRESSED_RGBA8_ETC2_EAC","COMPRESSED_SRGB8_ETC2","COMPRESSED_SRGB8_ALPHA8_ETC2_EAC","COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2","COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2","COMPRESSED_RGB_PVRTC_4BPPV1_IMG","COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","COMPRESSED_RGB_PVRTC_2BPPV1_IMG","COMPRESSED_RGBA_PVRTC_2BPPV1_IMG","COMPRESSED_RGB_ETC1_WEBGL","COMPRESSED_RGB_ATC_WEBGL","COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL","COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL","UNSIGNED_INT_24_8_WEBGL","HALF_FLOAT_OES","FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT","UNSIGNED_NORMALIZED_EXT","MIN_EXT","MAX_EXT","SRGB_EXT","SRGB_ALPHA_EXT","SRGB8_ALPHA8_EXT","FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT","FRAGMENT_SHADER_DERIVATIVE_HINT_OES","COLOR_ATTACHMENT0_WEBGL","COLOR_ATTACHMENT1_WEBGL","COLOR_ATTACHMENT2_WEBGL","COLOR_ATTACHMENT3_WEBGL","COLOR_ATTACHMENT4_WEBGL","COLOR_ATTACHMENT5_WEBGL","COLOR_ATTACHMENT6_WEBGL","COLOR_ATTACHMENT7_WEBGL","COLOR_ATTACHMENT8_WEBGL","COLOR_ATTACHMENT9_WEBGL","COLOR_ATTACHMENT10_WEBGL","COLOR_ATTACHMENT11_WEBGL","COLOR_ATTACHMENT12_WEBGL","COLOR_ATTACHMENT13_WEBGL","COLOR_ATTACHMENT14_WEBGL","COLOR_ATTACHMENT15_WEBGL","DRAW_BUFFER0_WEBGL","DRAW_BUFFER1_WEBGL","DRAW_BUFFER2_WEBGL","DRAW_BUFFER3_WEBGL","DRAW_BUFFER4_WEBGL","DRAW_BUFFER5_WEBGL","DRAW_BUFFER6_WEBGL","DRAW_BUFFER7_WEBGL","DRAW_BUFFER8_WEBGL","DRAW_BUFFER9_WEBGL","DRAW_BUFFER10_WEBGL","DRAW_BUFFER11_WEBGL","DRAW_BUFFER12_WEBGL","DRAW_BUFFER13_WEBGL","DRAW_BUFFER14_WEBGL","DRAW_BUFFER15_WEBGL","MAX_COLOR_ATTACHMENTS_WEBGL","MAX_DRAW_BUFFERS_WEBGL","QUERY_COUNTER_BITS_EXT","CURRENT_QUERY_EXT","QUERY_RESULT_EXT","QUERY_RESULT_AVAILABLE_EXT","TIME_ELAPSED_EXT","TIMESTAMP_EXT","GPU_DISJOINT_EXT","getError","blendFuncSeparate","readBuffer","getFramebufferAttachmentParameter","texParameterf","drawArraysInstanced","drawBuffers","drawElementsInstanced","drawRangeElements","WebGlConstants","WebGlConstantsByName","OBJECTNAMEKEY","OBJECTTYPEKEY","command","getCommandName","getStateName","recorder","getRecorderName","webGlObject","getWebGlObjectName","getWebGlObjectType","analyser","getAnalyserName","Decorators","isSupportedCombination","readPixels","ReadPixelsHelper","logger","spiedWindow","lastFrame","speedRatio","willPlayNextFrame","onFrameStart","eventConstructor","onFrameEnd","timeConstructor","lastSixtyFramesDuration","lastSixtyFramesCurrentIndex","lastSixtyFramesPreviousStart","fpsWindowSize","playNextFrame","changeSpeedRatio","getFps","requestAnimationFrameFunctions","spyRequestAnimationFrame","setTimerFunctions","spySetTimer","getCallback","setTimerCommonValues","TimeSpy","Spies","onContextRequested","spiedGetContext","contextVersion","HTMLCanvasElement","CanvasSpy","commandId","version","capturing","globalCapturing","injection","contextInformation","toggleCapture","toggleGlobalCapturing","tagWebGlObject","extensions","commandSpies","stateSpy","StateSpyCtor","stateNamespace","StateNamespace","recorderSpy","RecorderSpyCtor","recorderNamespace","RecorderNamespace","TimeCtor","webGlObjectSpy","WebGlObjectSpyCtor","webGlObjectNamespace","WebGlObjectNamespace","CaptureAnalyserCtor","analyserNamespace","AnalyserNamespace","initStaticCapture","recordAlways","spy","spyContext","unSpy","startCapture","currentCapture","canvasCapture","contextCapture","commands","initState","endState","startTime","listenCommandsStartTime","listenCommandsEndTime","endTime","analyses","frameMemory","stopCapture","appendRecordedInformation","appendAnalyses","isCapturing","getNextCommandCaptureId","onCommand","tagWebGlObjects","recordCommand","createCapture","captureState","unSpyableMembers","spyFunction","ExtensionsCtor","getExtensions","CapabilitiesCtor","CompressedTexturesCtor","contextAttributes","getContextAttributes","capabilities","getStateData","compressedTextures","browserAgent","navigator","userAgent","spiedCommandName","spiedCommandRunningContext","commandNamespace","CommandNamespace","stackTraceCtor","StackTraceCtor","defaultCommandCtor","DefaultCommandCtor","CommandSpyCtor","ContextSpy","stackTrace","spiedCommand","commandOptions","initCustomCommands","initCommand","overloadedCommand","customCommandsConstructors","getSpy","CommandSpy","commandEndTime","commandArguments","status","transformCapture","stringifyArgs","stringifyResult","stringifyValue","WebGlObjects","getWebGlObjectTag","displayText","HTMLImageElement","BaseCommand","Commands","isDeprecated","DefaultCommand","Clear","BlitFrameBuffer","VertexAttribPointer","GetActiveAttrib","GetActiveUniform","GetTransformFeedbackVarying","GetExtension","rangeMin","rangeMax","precision","GetShaderPrecisionFormat","GetParameter","DrawArrays","DrawArraysInstanced","DrawBuffers","DrawElements","DrawElementsInstanced","DrawElementsInstancedAngle","DrawRangeElements","toFixed","Scissor","Viewport","objectName","createCommandNames","getCreateCommandNames","updateCommandNames","getUpdateCommandNames","deleteCommandNames","getDeleteCommandNames","memoryPerSecond","totalMemory","byteSizePerInternalFormat","initializeByteSizeFormat","registerCallbacks","createWithoutSideEffects","updateWithoutSideEffects","deleteWithoutSideEffects","getBoundInstance","getWebGlConstant","changeMemorySize","delete","getByteSizeForInternalFormat","BaseRecorder","Recorders","__SPECTOR_Object_CustomData","getCustomData","getTexImage2DCustomData","getCompressedTexImage2DCustomData","getTexStorage2DCustomData","Texture2DRecorder","getTexImage3DCustomData","getCompressedTexImage3DCustomData","getTexStorage3DCustomData","Texture3DRecorder","getLength","usage","sourceLength","BufferRecorder","RenderBufferRecorder","recorders","recorderConstructors","onCommandCallbacks","initAvailableRecorders","initRecorders","RecorderSpy","stateTrackers","onCommandCapturedCallbacks","stateConstructors","initAvailableStateTrackers","initStateTrackers","requireStartAndStopStates","stateName","StateSpy","webGlObjectConstructors","webGlObjects","initAvailableWebglObjects","initWebglObjects","typeName","WebGlObjectSpy","drawCommands","consumeCommands","getConsumeCommands","changeCommandsByState","getChangeCommandsByState","commandNameToStates","getCommandNameToStates","capturedCommandsByState","currentState","readFromContextNoSideEffects","copyCurrentStateToPrevious","previousState","analyse","onChangeCommand","onConsumeCommand","isValidChangeCommand","isValidConsumeCommand","storeCommandIds","consumeCommandId","changeCommandCaptureStatus","isStateEnableNoSideEffects","areStatesEquals","unusedCommandIds","disabledCommandIds","redundantCommandIds","validCommandIds","isStateEnable","getSpectorData","__SPECTOR_Object_TAG","__SPECTOR_Metadata","readFromContext","BaseState","States","getWebgl1Parameters","getWebgl2Parameters","parameters","changeCommands","constant","readParameterFromContext","stringifyParameterValue","returnType","ParameterState","Capabilities","Information","CompressedTextures","extensionDefinition","Extensions","AlignmentState","isEnabled","BlendState","ClearState","ColorState","CoverageState","CullState","DepthState","DrawState","MipmapHintState","PolygonOffsetState","ScissorState","stencilOpStates","stencilFuncStates","stencilMaskStates","StencilState","captureFrameBuffer","workingCanvas","workingContext2D","captureCanvas","captureContext2D","imageSmoothingEnabled","mozImageSmoothingEnabled","oImageSmoothingEnabled","webkitImageSmoothingEnabled","msImageSmoothingEnabled","Attachments","FrameBuffer","getCapture","checkFramebufferStatus","FrameBufferStatus","readFrameBufferAttachmentFromContext","framebufferTextureLayer","attachmentName","textureCubeMapFace","textureLayer","createImageData","putImageData","captureBaseSize","globalCompositeOperation","setTransform","toDataURL","VisualState","drawCallTextureInputState","DrawCallTextureInputState","drawCallUboInputState","DrawCallUboInputState","frameBuffer","readFrameBufferFromContext","programStatus","getAttachedShaders","readShaderFromContext","readAttributeFromContext","readUniformFromContext","readUniformsFromContextIntoState","uniformBlocks","readUniformBlockFromContext","transformFeedbacks","readTransformFeedbackFromContext","samplerTypes","typeValue","readTextureFromContext","depthAttachment","stencilAttachment","colorAttachments","textureLevel","appendTextureState","EXT_sRGB","encoding","alphaSize","blueSize","componentType","depthSize","greenSize","redSize","stencilSize","getShaderSource","getVertexAttrib","offsetPointer","getVertexAttribOffset","bufferBinding","enabled","arraySize","normalized","vertexAttrib","divisor","integer","appendBufferCustomData","getUniform","magFilter","getTexParameter","minFilter","anisotropy","immutable","immutableLevels","samplerMaxLod","getSamplerParameter","samplerMinLod","samplerCompareFunc","samplerCompareMode","samplerWrapS","samplerWrapT","samplerWrapR","samplerMagFilter","samplerMinFilter","compareFunc","compareMode","getTextureStorage","blockIndice","arrayStride","matrixStride","rowMajor","getUboValue","getIndexedParameter","bufferSize","bufferStart","bindingPoint","activeUniformCount","fragment","bufferUsage","bufferLength","bufferOffset","bufferSourceLength","DrawCallState","visual","getTextureVisualState","cubeMapFaces","uboTypes","arrayBufferView","lengthMultiplier","getBufferSubData","attachWebGlObjectTag","stringifyWebGlObjectTag","getNextId","BaseWebGlObject","Buffer","Program","Query","Renderbuffer","Sampler","Shader","Sync","Texture","TransformFeedback","UniformLocation","VertexArrayObject","analyserName","appendAnalysis","getAnalysis","appendToAnalysis","BaseAnalyser","Analysers","analysers","analyserConstructors","initAvailableAnalysers","initAnalysers","CaptureAnalyser","total","CommandsSummaryAnalyser","localeCompare","CommandsAnalyser","totalDrawnPrimitives","PrimitivesAnalyser","scrollIntoView","getBoundingClientRect","parentElement","offsetHeight","ScrollIntoViewHelper","EmbeddedFrontend","dummyTextGeneratorElement","createFromHtml","firstElementChild","htmlTemplate","raw","htmlEscape","innerText","BaseNoneGenericComponent","events","renderElementFromTemplate","bindCommands","getAttribute","bindCommand","createEvent","mapEventListener","stopPropagation","triggerEvent","sender","stateId","BaseComponent","placeHolder","stateStore","compose","getStatesToProcess","getLastOperation","getComponentInstance","getData","composeInContainer","composeChildren","getChildrenIds","Compositor","StateStore","compositor","willRender","rootStateId","addRootState","ComponentInstance","setForRender","addChildState","insertChildState","insertChildAt","updateState","removeState","removeChildrenStates","removeChildren","getState","getGenericState","getChildrenState","getChildrenGenericState","hasChildren","updateAllChildrenState","updateAllChildrenGenericState","REFRESHRATEINMILLISECONDS","flushPendingOperations","MVX","component","removeNode","domNode","cachedCurrentChildrenContainer","cachedCurrentDomNode","idGenerator","pendingOperation","lastOperation","componentInstance","getParentId","getNewId","addChild","unshift","removeChildById","removeChildAt","logVisible","logLevel","logText","CaptureMenuComponent","onCaptureRequested","onPlayRequested","onPauseRequested","onPlayNextFrameRequested","CaptureMenuActionsComponent","onCanvasSelection","currentCanvasInformation","showList","CanvasListComponent","onCanvasSelected","CanvasListItemComponent","FpsCounterComponent","rootPlaceHolder","mvx","isTrackingCanvas","captureMenuComponent","canvasListComponent","canvasListItemComponent","actionsComponent","fpsCounterComponent","visible","SelectCanvasHelpText","hideLog","canvasListStateId","actionsStateId","fpsStateId","getSelectedCanvasInformation","updateMenuStateLog","PleaseWaitHelpText","trackPageCanvases","showMenuStateLog","hideMenuStateLog","ActionsHelpText","updateCanvasesList","updateCanvasesListInformationInternal","ref","updateCanvasesListInformation","updateMenuStateVisibility","hide","captureComplete","setFPS","CaptureMenu","onCaptureLoaded","drag","drop","loadFiles","dataTransfer","files","FileReader","onerror","onload","readAsText","CaptureListComponent","onCaptureSelected","onSaveRequested","capture","encodeURI","toTimeString","CaptureListItemComponent","VisualStateListComponent","onVisualStateSelected","VisualStateListItemComponent","CommandListComponent","onCommandSelected","CommandListItemComponent","CommandDetailComponent","getMDNLink","WebGL2Functions","WebGL2RootUrl","WebGLFunctions","WebGLRootUrl","beginQuery","beginTransformFeedback","blitFramebuffer","clearBufferfv","clearBufferiv","clearBufferuiv","clearBufferfi","clientWaitSync","compressedTexImage3D","compressedTexSubImage3D","copyBufferSubData","copyTexSubImage3D","createQuery","deleteQuery","deleteSampler","deleteSync","deleteTransformFeedback","endQuery","endTransformFeedback","fenceSync","getFragDataLocation","getInternalformatParameter","getQuery","getQueryParameter","getSyncParameter","getUniformBlockIndex","getUniformIndices","invalidateFramebuffer","invalidateSubFramebuffer","isQuery","isSampler","isSync","isTransformFeedback","pauseTransformFeedback","renderbufferStorageMultisample","resumeTransformFeedback","samplerParameterf","texStorage3D","uniform2ui","uniform3ui","uniform4ui","vertexAttribDivisor","vertexAttribI4i","vertexAttribI4ui","vertexAttribI4iv","vertexAttribI4uiv","waitSync","uniform2f","uniform2i","uniform3f","uniform3i","uniform4f","uniform4i","vertexAttrib1f","vertexAttrib2f","vertexAttrib3f","vertexAttrib4f","vertexAttrib1fv","vertexAttrib2fv","vertexAttrib3fv","vertexAttrib4fv","MDNCommandLinkHelper","JSONContentComponent","trim","JSONGroupComponent","JSONItemComponent","JSONImageItemComponent","onOpenSourceClicked","JSONSourceItemComponent","help","JSONHelpItemComponent","JSONVisualStateItemComponent","onCapturesClicked","onCommandsClicked","onInformationClicked","onInitStateClicked","onEndStateClicked","onCloseClicked","onSearchTextChanged","onSearchTextCleared","searchText","commandCount","visibility","ResultViewMenuComponent","ResultViewContentComponent","InformationColumnComponent","ResultViewComponent","_indentIfdef","_beautify","_getBracket","firstIteration","lastIteration","SourceCodeComponent","currentCommandId","commandListStateId","commandDetailStateId","currentCaptureStateId","currentCommandStateId","currentVisualStateId","visualStateListStateId","initVisualStateId","captureListComponent","captureListItemComponent","visualStateListComponent","visualStateListItemComponent","commandListComponent","commandListItemComponent","commandDetailComponent","jsonContentComponent","jsonGroupComponent","jsonItemComponent","jsonImageItemComponent","jsonSourceItemComponent","jsonHelpItemComponent","jsonVisualStateItemComponent","resultViewMenuComponent","resultViewContentComponent","resultViewComponent","sourceCodeComponent","informationColumnComponent","menuStateId","contentStateId","captureListStateId","initMenuComponent","addCapture","selectCapture","saveCapture","selectCommand","selectVisualState","updateViewState","click","displayCurrentCapture","displayCurrentCommand","displayCurrentVisualState","displayCaptures","displayInformation","displayInitState","displayEndState","search","onCaptureRelatedAction","displayJSONGroup","displayJSON","getJSONAsString","toFilter","createVisualStates","createCommands","visualStateId","duration","commandStateId","MIN_VALUE","ResultView","DefaultInjection","LoggerCtor","EventCtor","CanvasSpyCtor","ContextSpyCtor","TimeSpyCtor","CaptureMenuConstructor","ResultViewConstructor","ProvidedInjection","noFrameTimeout","captureNextFrames","retry","contexts","timeSpy","onCaptureStarted","onCapture","onErrorInternal","getFirstAvailable3dContext","tryGetContextFromHelperField","tryGetContextFromCanvas","captureMenu","getCaptureUI","pause","play","resultView","getResultUI","drawOnlyEveryXFrame","canvasSpy","spyCanvas","getAvailableContexts","getAvailableContextSpyByCanvas","captureContextSpy","captureContext","contextSpy","capturingContext","clearTimeout","triggerCapture","locals","protocol","host","pathname","Function","eval","binaryString","chunks_1","_dataView","DataView","_signature","_read","_header","_palette","colorType","Greyscale","Indexed","TruecolorAlpha","Truecolor","imageColorComponents","pngData","imageData","decompress","pngOffset","pxOffset","offsetPng","_checkSignature","_readChunks","sig","_readChunk","Header","Palette","Data","totalLength","getUint32","_chunkToString","HeaderChunk","PaletteChunk","DataChunk","End","EndChunk","PngChunk","reduce","pako","_length","_type","_crc","_bitDepth","getUint8","_colorType","_compressionMethod","_filterMethod","_interlace","getColor","inflate","deflate","constants","Deflate","method","chunkSize","windowBits","memLevel","strategy","to","gzip","ended","strm","zlib_deflate","deflateInit2","header","deflateSetHeader","dictionary","dict","strings","deflateSetDictionary","_dict_set","deflator","deflateRaw","mode","_mode","onEnd","onData","deflateEnd","errorCode","rank","zero","flush_pending","pending","pending_buf","pending_out","flush_block_only","last","trees","_tr_flush_block","block_start","strstart","put_byte","putShortMSB","read_buf","longest_match","cur_match","chain_length","max_chain_length","scan","best_len","prev_length","nice_match","limit","w_size","MIN_LOOKAHEAD","_win","wmask","w_mask","prev","strend","MAX_MATCH","scan_end1","scan_end","good_match","lookahead","match_start","fill_window","more","_w_size","window_size","hash_size","head","insert","MIN_MATCH","ins_h","hash_shift","hash_mask","deflate_stored","flush","max_block_size","pending_buf_size","BS_NEED_MORE","max_start","BS_FINISH_STARTED","BS_FINISH_DONE","deflate_fast","hash_head","bflush","match_length","_tr_tally","max_lazy_match","last_lit","BS_BLOCK_DONE","deflate_slow","max_insert","prev_match","match_available","deflate_rle","deflate_huff","Config","good_length","max_lazy","nice_length","max_chain","lm_init","configuration_table","DeflateState","gzhead","gzindex","last_flush","w_bits","hash_bits","dyn_ltree","HEAP_SIZE","dyn_dtree","D_CODES","bl_tree","BL_CODES","l_desc","d_desc","bl_desc","bl_count","MAX_BITS","heap","L_CODES","heap_len","heap_max","l_buf","lit_bufsize","d_buf","opt_len","static_len","matches","bi_buf","bi_valid","deflateResetKeep","INIT_STATE","BUSY_STATE","_tr_init","deflateReset","ret","MAX_MEM_LEVEL","deflateInit","MAX_WBITS","DEF_MEM_LEVEL","old_flush","beg","val","FINISH_STATE","hcrc","os","EXTRA_STATE","OS_CODE","level_flags","PRESET_DICT","NAME_STATE","COMMENT_STATE","HCRC_STATE","bstate","_tr_align","_tr_stored_block","avail","tmpDict","dictLength","LITERALS","deflateInfo","StaticTreeDesc","static_tree","extra_bits","extra_base","elems","max_length","has_stree","TreeDesc","dyn_tree","stat_desc","max_code","d_code","_dist_code","put_short","send_bits","Buf_size","send_code","tree","bi_reverse","bi_flush","gen_bitlen","bits","xbits","stree","overflow","gen_codes","next_code","tr_static_init","LENGTH_CODES","base_length","extra_lbits","_length_code","base_dist","extra_dbits","static_ltree","static_dtree","static_l_desc","static_d_desc","static_bl_desc","extra_blbits","MAX_BL_BITS","init_block","END_BLOCK","bi_windup","copy_block","smaller","_n2","_m2","pqdownheap","compress_block","ltree","dtree","lc","lx","build_tree","node","scan_tree","curlen","prevlen","nextlen","max_count","min_count","REP_3_6","REPZ_3_10","REPZ_11_138","send_tree","build_bl_tree","max_blindex","bl_order","send_all_trees","lcodes","dcodes","blcodes","detect_data_type","black_mask","static_init_done","stored_len","STORED_BLOCK","STATIC_TREES","opt_lenb","static_lenb","DYN_TREES","Inflate","zlib_inflate","inflateInit2","GZheader","inflateGetHeader","inflator","inflateRaw","next_out_utf8","tail","utf8str","allowBufError","inflateSetDictionary","inflateEnd","ungzip","zswap32","InflateState","havedict","flags","dmax","check","wbits","wsize","whave","wnext","hold","lencode","distcode","lenbits","distbits","ncode","nlen","ndist","have","lens","work","lendyn","distdyn","sane","back","was","inflateResetKeep","HEAD","ENOUGH_LENS","ENOUGH_DISTS","inflateReset","inflateReset2","inflateInit","DEF_WBITS","fixedtables","virgin","sym","lenfix","distfix","inflate_table","LENS","DISTS","updatewindow","put","_in","_out","from","from_source","here_bits","here_op","here_val","last_bits","last_op","last_val","opts","here","hbuf","order","TYPE","TYPEDO","inf_leave","FLAGS","BAD","DICTID","TIME","OS","xflags","EXLEN","extra_len","EXTRA","NAME","COMMENT","HCRC","DICT","CHECK","STORED","LEN_","TABLE","COPY_","COPY","LENLENS","CODES","CODELENS","LEN","inflate_fast","LIT","LENEXT","DIST","DISTEXT","MATCH","LENGTH","DONE","MEM","Z_MEM_ERROR","SYNC","dictid","inflateInfo","s_window","lcode","dcode","lmask","dmask","dolen","dodist","lbase","lext","dbase","dext","lens_index","codes","table_index","incr","fill","low","mask","curr","huff","base_index","MAXBITS","offs","extra_index"],"mappings":"CAAS,SAAUA,GCInB,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAE,OAGA,IAAAC,GAAAF,EAAAD,IACAI,EAAAJ,EACAK,GAAA,EACAH,WAUA,OANAJ,GAAAE,GAAAM,KAAAH,EAAAD,QAAAC,IAAAD,QAAAH,GAGAI,EAAAE,GAAA,EAGAF,EAAAD,QAvBA,GAAAD,KA4BAF,GAAAQ,EAAAT,EAGAC,EAAAS,EAAAP,EAGAF,EAAAU,EAAA,SAAAP,EAAAQ,EAAAC,GACAZ,EAAAa,EAAAV,EAAAQ,IACAG,OAAAC,eAAAZ,EAAAQ,GACAK,cAAA,EACAC,YAAA,EACAC,IAAAN,KAMAZ,EAAAmB,EAAA,SAAAf,GACA,GAAAQ,GAAAR,KAAAgB,WACA,WAA2B,MAAAhB,GAAA,SAC3B,WAAiC,MAAAA,GAEjC,OADAJ,GAAAU,EAAAE,EAAA,IAAAA,GACAA,GAIAZ,EAAAa,EAAA,SAAAQ,EAAAC,GAAsD,MAAAR,QAAAS,UAAAC,eAAAjB,KAAAc,EAAAC,IAGtDtB,EAAAyB,EAAA,GAGAzB,IAAA0B,EAAA,MDMM,SAAUtB,EAAQD,EAASH,GAEjC,YAEAc,QAAOC,eAAeZ,EAAS,cAAgBwB,OAAO,GEvEtD,IAAAC,GAAA5B,EAAA,EAEaG,GAAA0B,WAAa,EACb1B,EAAA2B,WAAa,EACb3B,EAAA4B,UAAY,EACZ5B,EAAA6B,cAAgB,EAChB7B,EAAA8B,aAAe,EACf9B,EAAA+B,SAAW,EACX/B,EAAAgC,aAAe,EACfhC,EAAAiC,kBAAoB,EACpBjC,EAAAkC,cAAgB,EAChBlC,EAAAmC,mBAAqB,EACrBnC,EAAAoC,oBAAsB,EACtBpC,EAAAqC,QAAU,EACVrC,EAAAsC,aAAe,EACftC,EAAAuC,QAAU,GACVvC,EAAAwC,aAAe,IACfxC,EAAAyC,KAAOC,OAAOC,UACd3C,EAAA4C,MAAQ,EACR5C,EAAA6C,MAAQ,IACR7C,EAAA8C,UAAY,EACZ9C,EAAA+C,SAAW,EACX/C,EAAAgD,aAAe,EAEfhD,EAAAiD,WAAa,EAAI,IACjBjD,EAAAkD,eAAiBlD,EAAA+B,SAAW/B,EAAAkC,cAC5BlC,EAAAmD,iBAAmBnD,EAAAkD,eAAiBlD,EAAAiC,kBACpCjC,EAAAoD,UAAYpD,EAAAmD,iBAAmBnD,EAAAoC,oBAC/BpC,EAAAqD,YAAcrD,EAAA+B,SAAW/B,EAAAkC,cAAgBlC,EAAAqC,QAAUrC,EAAAsC,aAAetC,EAAAiC,kBAAoBjC,EAAAoC,oBACtFpC,EAAAsD,kBAAoBtD,EAAAqD,aAAe,EACnCrD,EAAAuD,UAAYvD,EAAAqD,YAAcrD,EAAA6B,cAC1B7B,EAAAwD,gBAAkBxD,EAAAsD,kBAAoBtD,EAAA6B,cACtC7B,EAAAyD,WAAahC,EAAAiC,KAAKC,SAASlC,EAAAiC,KAAKE,UAChC5D,EAAA6D,aAAe,MACf7D,EAAA8D,UAAY9D,EAAA6D,aAAe7D,EAAA6B,eF2ElC,SAAU5B,EAAQD,GGrFxB,GAAA+D,KAGAA,GAAAC,QAAA,KACAD,EAAAE,WAAA,mBAAAC,2BAAAC,MACAJ,EAAAK,OAAAC,KAAAC,OACAP,EAAAQ,aAAA,EAGAR,EAAAS,eAAAT,EAAAE,aAAAC,cAAA,QAAAO,MACAV,EAAAW,SAAAX,EAAAQ,aAAAR,EAAAS,eAOAT,EAAAY,mBAAA,SAAAC,GACAb,EAAAE,WAAAW,EAGA,IAAAC,GAAAR,KAAAS,GAAA,GAOAf,GAAAgB,SAAA,SAAAC,GACA,MAAAA,GAAAH,GAYAd,EAAAkB,OAAA,SAAAD,EAAAE,GACA,MAAAb,MAAAc,IAAAH,EAAAE,IAAAnB,EAAAC,QAAAK,KAAAe,IAAA,EAAAf,KAAAc,IAAAH,GAAAX,KAAAc,IAAAD,KAGAjF,EAAAD,QAAA+D,GHoHM,SAAU9D,EAAQoF,EAAqBxF,GAE7C,YIvKA,SAAAyF,GAAA/E,EAAA2E,GAEA,QAAAK,KAAmBd,KAAAe,YAAAjF,EADnBkF,EAAAlF,EAAA2E,GAEA3E,EAAAa,UAAA,OAAA8D,EAAAvE,OAAAiD,OAAAsB,IAAAK,EAAAnE,UAAA8D,EAAA9D,UAAA,GAAAmE,IAWA,QAAAG,GAAAnE,EAAAoE,GACA,GAAAC,KACA,QAAAtE,KAAAC,GAAAZ,OAAAS,UAAAC,eAAAjB,KAAAmB,EAAAD,IAAAqE,EAAAE,QAAAvE,GAAA,IACAsE,EAAAtE,GAAAC,EAAAD,GACA,UAAAC,GAAA,kBAAAZ,QAAAmF,sBACA,OAAA5F,GAAA,EAAAoB,EAAAX,OAAAmF,sBAAAvE,GAA4DrB,EAAAoB,EAAAyE,OAAc7F,IAAAyF,EAAAE,QAAAvE,EAAApB,IAAA,IAC1E0F,EAAAtE,EAAApB,IAAAqB,EAAAD,EAAApB,IACA,OAAA0F,GAGA,QAAAI,GAAAC,EAAAC,EAAAC,EAAAC,GACA,GAAA7F,GAAAD,EAAA+F,UAAAN,OAAAO,EAAAhG,EAAA,EAAA4F,EAAA,OAAAE,IAAAzF,OAAA4F,yBAAAL,EAAAC,GAAAC,CACA,oBAAAI,UAAA,kBAAAA,SAAAC,SAAAH,EAAAE,QAAAC,SAAAR,EAAAC,EAAAC,EAAAC,OACA,QAAAlG,GAAA+F,EAAAF,OAAA,EAA4C7F,GAAA,EAAQA,KAAAK,EAAA0F,EAAA/F,MAAAoG,GAAAhG,EAAA,EAAAC,EAAA+F,GAAAhG,EAAA,EAAAC,EAAA2F,EAAAC,EAAAG,GAAA/F,EAAA2F,EAAAC,KAAAG,EACpD,OAAAhG,GAAA,GAAAgG,GAAA3F,OAAAC,eAAAsF,EAAAC,EAAAG,KAGA,QAAAI,GAAAC,EAAAC,GACA,gBAAAV,EAAAC,GAAmCS,EAAAV,EAAAC,EAAAQ,IAGnC,QAAAE,GAAAC,EAAAC,GACA,mBAAAP,UAAA,kBAAAA,SAAAQ,SAAA,MAAAR,SAAAQ,SAAAF,EAAAC,GAGA,QAAAE,GAAAC,EAAAC,EAAAC,EAAAC,GACA,WAAAD,MAAAE,UAAA,SAAAC,EAAAC,GACA,QAAAC,GAAAjG,GAAmC,IAAMkG,EAAAL,EAAAM,KAAAnG,IAA+B,MAAAmE,GAAY6B,EAAA7B,IACpF,QAAAiC,GAAApG,GAAkC,IAAMkG,EAAAL,EAAAQ,MAAArG,IAAgC,MAAAmE,GAAY6B,EAAA7B,IACpF,QAAA+B,GAAAI,GAA+BA,EAAAC,KAAAR,EAAAO,EAAAtG,OAAA,GAAA4F,GAAA,SAAAG,GAAiEA,EAAAO,EAAAtG,SAAyBwG,KAAAP,EAAAG,GACzHF,GAAAL,IAAAY,MAAAf,EAAAC,QAAAQ,UAIA,QAAAO,GAAAhB,EAAAiB,GAGA,QAAAC,GAAApH,GAAsB,gBAAAqH,GAAsB,MAAAX,IAAA1G,EAAAqH,KAC5C,QAAAX,GAAAY,GACA,GAAAC,EAAA,SAAAC,WAAA,kCACA,MAAAC,GAAA,IACA,GAAAF,EAAA,EAAAG,IAAA9C,EAAA8C,EAAA,EAAAJ,EAAA,YAAAA,EAAA,uBAAA1C,IAAAxF,KAAAsI,EAAAJ,EAAA,KAAAP,KAAA,MAAAnC,EAEA,QADA8C,EAAA,EAAA9C,IAAA0C,GAAA,EAAA1C,EAAApE,QACA8G,EAAA,IACA,cAAA1C,EAAA0C,CAAuC,MACvC,QAAkC,MAAlCG,GAAAE,SAA2CnH,MAAA8G,EAAA,GAAAP,MAAA,EAC3C,QAAAU,EAAAE,QAAkCD,EAAAJ,EAAA,GAAWA,GAAA,EAAU,SACvD,QAAAA,EAAAG,EAAAG,IAAAC,MAAyCJ,EAAAK,KAAAD,KAAc,SACvD,SACA,GAAAjD,EAAA6C,EAAAK,OAAAlD,IAAAG,OAAA,GAAAH,IAAAG,OAAA,UAAAuC,EAAA,QAAAA,EAAA,KAA6GG,EAAA,CAAO,UACpH,OAAAH,EAAA,MAAA1C,GAAA0C,EAAA,GAAA1C,EAAA,IAAA0C,EAAA,GAAA1C,EAAA,KAAgF6C,EAAAE,MAAAL,EAAA,EAAiB,OACjG,OAAAA,EAAA,IAAAG,EAAAE,MAAA/C,EAAA,IAAwD6C,EAAAE,MAAA/C,EAAA,GAAgBA,EAAA0C,CAAQ,OAChF,GAAA1C,GAAA6C,EAAAE,MAAA/C,EAAA,IAA8C6C,EAAAE,MAAA/C,EAAA,GAAgB6C,EAAAG,IAAAG,KAAAT,EAAgB,OAC9E1C,EAAA,IAAA6C,EAAAG,IAAAC,MACAJ,EAAAK,KAAAD,KAAiC,UAEjCP,EAAAH,EAAA/H,KAAA8G,EAAAuB,GACS,MAAA9C,GAAY2C,GAAA,EAAA3C,GAAa+C,EAAA,EAAS,QAAUH,EAAA3C,EAAA,EACrD,KAAA0C,EAAA,QAAAA,GAAA,EAAmC,QAAS9G,MAAA8G,EAAA,GAAAA,EAAA,UAAAP,MAAA,GAvB5C,GAAwGQ,GAAAG,EAAA9C,EAAAoD,EAAxGP,GAAaE,MAAA,EAAAM,KAAA,WAA6B,KAAArD,EAAA,QAAAA,GAAA,EAA0B,OAAAA,GAAA,IAAekD,QAAAF,OACnF,OAAAI,IAAgBrB,KAAAS,EAAA,GAAAP,MAAAO,EAAA,GAAAc,OAAAd,EAAA,IAAqD,kBAAAe,UAAAH,EAAAG,OAAAC,UAAA,WAAoE,MAAA3E,QAAeuE,EA0BxJ,QAAAK,GAAAhJ,EAAAL,GACA,OAAAsB,KAAAjB,GAAAL,EAAAqB,eAAAC,KAAAtB,EAAAsB,GAAAjB,EAAAiB,IAGA,QAAAgI,GAAA5I,GACA,GAAAL,GAAA,kBAAA8I,SAAAzI,EAAAyI,OAAAC,UAAAlJ,EAAA,CACA,OAAAG,KAAAD,KAAAM,IAEAiH,KAAA,WAEA,MADAjH,IAAAR,GAAAQ,EAAAqF,SAAArF,MAAA,KACoBc,MAAAd,KAAAR,KAAA6H,MAAArH,KAKpB,QAAA6I,GAAA7I,EAAAM,GACA,GAAAX,GAAA,kBAAA8I,SAAAzI,EAAAyI,OAAAC,SACA,KAAA/I,EAAA,MAAAK,EACA,IAAA4F,GAAAX,EAAAzF,EAAAG,EAAAD,KAAAM,GAAA8I,IACA,KACA,eAAAxI,QAAA,MAAAsF,EAAApG,EAAAyH,QAAAI,MAAAyB,EAAAT,KAAAzC,EAAA9E,OAEA,MAAAiI,GAAmB9D,GAAM8D,SACzB,QACA,IACAnD,MAAAyB,OAAA1H,EAAAH,EAAA,SAAAG,EAAAD,KAAAF,GAEA,QAAiB,GAAAyF,EAAA,KAAAA,GAAA8D,OAEjB,MAAAD,GAGA,QAAAE,KACA,OAAAF,MAAAtJ,EAAA,EAA4BA,EAAAmG,UAAAN,OAAsB7F,IAClDsJ,IAAAG,OAAAJ,EAAAlD,UAAAnG,IACA,OAAAsJ,GAGA,QAAAI,GAAAvB,GACA,MAAA5D,gBAAAmF,IAAAnF,KAAA4D,IAAA5D,MAAA,GAAAmF,GAAAvB,GAGA,QAAAwB,GAAA3C,EAAAC,EAAAE,GAIA,QAAAe,GAAApH,GAAsBgI,EAAAhI,KAAAd,EAAAc,GAAA,SAAAqH,GAAgC,UAAAf,SAAA,SAAAtC,EAAAE,GAAqC4E,EAAAf,MAAA/H,EAAAqH,EAAArD,EAAAE,IAAA,GAAA6E,EAAA/I,EAAAqH,OAC3F,QAAA0B,GAAA/I,EAAAqH,GAA2B,IAAMX,EAAAsB,EAAAhI,GAAAqH,IAAiB,MAAA1C,GAAYqE,EAAAF,EAAA,MAAAnE,IAC9D,QAAA+B,GAAApB,GAAsBA,EAAA9E,gBAAAoI,GAAAtC,QAAAC,QAAAjB,EAAA9E,MAAA6G,GAAAL,KAAAiC,EAAAzC,GAAAwC,EAAAF,EAAA,MAAAxD,GACtB,QAAA2D,GAAAzI,GAA6BuI,EAAA,OAAAvI,GAC7B,QAAAgG,GAAAhG,GAA4BuI,EAAA,QAAAvI,GAC5B,QAAAwI,GAAAzB,EAAAF,GAA2BE,EAAAF,GAAAyB,EAAAI,QAAAJ,EAAA/D,QAAAgE,EAAAD,EAAA,MAAAA,EAAA,OAR3B,IAAAX,OAAAgB,cAAA,SAAA3B,WAAA,uCACA,IAAAtI,GAAA8I,EAAA3B,EAAAY,MAAAf,EAAAC,OAAA2C,IACA,OAAA5J,MAAiBkI,EAAA,QAAAA,EAAA,SAAAA,EAAA,UAAAlI,EAAAiJ,OAAAgB,eAAA,WAAsF,MAAA1F,OAAevE,EAStH,QAAAkK,GAAA1J,GAGA,QAAA0H,GAAApH,EAAAuH,GAAyB7H,EAAAM,KAAAd,EAAAc,GAAA,SAAAqH,GAAgC,OAAA/G,OAAoBE,MAAAoI,EAAAlJ,EAAAM,GAAAqH,IAAAN,KAAA,WAAA/G,GAAgDuH,IAAAF,OAF7H,GAAAnI,GAAAoB,CACA,OAAApB,MAAiBkI,EAAA,QAAAA,EAAA,iBAAAzC,GAA4C,KAAAA,KAAWyC,EAAA,UAAAlI,EAAAiJ,OAAAC,UAAA,WAAqD,MAAA3E,OAAevE,EAI5I,QAAAmK,GAAA3J,GACA,IAAAyI,OAAAgB,cAAA,SAAA3B,WAAA,uCACA,IAAAnI,GAAAK,EAAAyI,OAAAgB,cACA,OAAA9J,KAAAD,KAAAM,GAAA,kBAAA4I,KAAA5I,KAAAyI,OAAAC,YJ6BAzI,OAAOC,eAAeyE,EAAqB,cAAgB7D,OAAO,IACjC6D,EAA+B,UAAIC,EACrCzF,EAAoBU,EAAE8E,EAAqB,WAAY,WAAa,MAAOiF,KACzEjF,EAA4B,OAAIK,EAChCL,EAAgC,WAAIW,EACpCX,EAA6B,QAAIqB,EACjCrB,EAAgC,WAAIwB,EACpCxB,EAA+B,UAAI4B,EACnC5B,EAAiC,YAAI6C,EACrC7C,EAAkC,aAAIgE,EACtChE,EAA8B,SAAIiE,EAClCjE,EAA4B,OAAIkE,EAChClE,EAA8B,SAAIqE,EAClCrE,EAA6B,QAAIuE,EACjCvE,EAAsC,iBAAIwE,EAC1CxE,EAAsC,iBAAI+E,EI3M3E/E,EAAA,cAAAgF;;;;;;;;;;;;;;AAgBA,GAAA5E,GAAA9E,OAAA4J,iBACMC,uBAAgBrG,QAAA,SAAA5D,EAAA2E,GAAsC3E,EAAAiK,UAAAtF,IAC5D,SAAA3E,EAAA2E,GAAqB,OAAA5D,KAAA4D,KAAA7D,eAAAC,KAAAf,EAAAe,GAAA4D,EAAA5D,KAQrBgJ,EAAA3J,OAAA8J,QAAA,SAAA7E,GACA,OAAArE,GAAArB,EAAA,EAAAc,EAAAqF,UAAAN,OAA4C7F,EAAAc,EAAOd,IAAA,CACnDqB,EAAA8E,UAAAnG,EACA,QAAAoB,KAAAC,GAAAZ,OAAAS,UAAAC,eAAAjB,KAAAmB,EAAAD,KAAAsE,EAAAtE,GAAAC,EAAAD,IAEA,MAAAsE,KJkVM,SAAU3F,EAAQD,EAASH,GAEjC,YKhXA,IAAA6K,GAAA,mBAAAC,aACA,mBAAAC,cACA,mBAAAC,WAGA7K,GAAAyK,OAAA,SAAAK,GAEA,IADA,GAAAC,GAAA5G,MAAA/C,UAAA4J,MAAA5K,KAAAiG,UAAA,GACA0E,EAAAhF,QAAA,CACA,GAAAkF,GAAAF,EAAAb,OACA,IAAAe,EAAA,CAEA,mBAAAA,GACA,SAAAzC,WAAAyC,EAAA,qBAGA,QAAA3J,KAAA2J,GACAA,EAAA5J,eAAAC,KACAwJ,EAAAxJ,GAAA2J,EAAA3J,KAKA,MAAAwJ,IAKA9K,EAAAkL,UAAA,SAAAC,EAAAC,GACA,MAAAD,GAAApF,SAAAqF,EAA4BD,EAC5BA,EAAAE,SAAqBF,EAAAE,SAAA,EAAAD,IACrBD,EAAApF,OAAAqF,EACAD,GAIA,IAAAG,IACAC,SAAA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA,GAAAH,EAAAJ,UAAAG,EAAAH,SAEA,WADAG,GAAAK,IAAAJ,EAAAJ,SAAAK,IAAAC,GAAAC,EAIA,QAAA1L,GAAA,EAAmBA,EAAAyL,EAASzL,IAC5BsL,EAAAI,EAAA1L,GAAAuL,EAAAC,EAAAxL,IAIA4L,cAAA,SAAAC,GACA,GAAA7L,GAAAC,EAAAwL,EAAAK,EAAAC,EAAAnE,CAIA,KADA6D,EAAA,EACAzL,EAAA,EAAAC,EAAA4L,EAAAhG,OAAkC7F,EAAAC,EAAOD,IACzCyL,GAAAI,EAAA7L,GAAA6F,MAMA,KAFA+B,EAAA,GAAA6C,YAAAgB,GACAK,EAAA,EACA9L,EAAA,EAAAC,EAAA4L,EAAAhG,OAAkC7F,EAAAC,EAAOD,IACzC+L,EAAAF,EAAA7L,GACA4H,EAAA+D,IAAAI,EAAAD,GACAA,GAAAC,EAAAlG,MAGA,OAAA+B,KAIAoE,GACAX,SAAA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA,OAAA1L,GAAA,EAAmBA,EAAAyL,EAASzL,IAC5BsL,EAAAI,EAAA1L,GAAAuL,EAAAC,EAAAxL,IAIA4L,cAAA,SAAAC,GACA,SAAApC,OAAA1B,SAAA8D,IAOA/L,GAAAmM,SAAA,SAAAC,GACAA,GACApM,EAAAqM,KAAA1B,WACA3K,EAAAsM,MAAA1B,YACA5K,EAAAuM,MAAA1B,WACA7K,EAAAyK,OAAAzK,EAAAsL,KAEAtL,EAAAqM,KAAAlI,MACAnE,EAAAsM,MAAAnI,MACAnE,EAAAuM,MAAApI,MACAnE,EAAAyK,OAAAzK,EAAAkM,KAIAlM,EAAAmM,SAAAzB,ILyXM,SAAUzK,EAAQD,EAASH;;;;;CMzdjC,SAAA2M,EAAAC,GAEAxM,EAAAD,QAAAyM,KAOChI,EAAA,WACD,gBAAA7E,GAKA,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAE,OAGA,IAAAC,GAAAF,EAAAD,IACAE,WACA0M,GAAA5M,EACA6M,QAAA,EAUA,OANA/M,GAAAE,GAAAM,KAAAH,EAAAD,QAAAC,IAAAD,QAAAH,GAGAI,EAAA0M,QAAA,EAGA1M,EAAAD,QAvBA,GAAAD,KAqCA,OATAF,GAAAQ,EAAAT,EAGAC,EAAAS,EAAAP,EAGAF,EAAAyB,EAAA,GAGAzB,EAAA,KAKA,SAAAI,EAAAD,EAAAH,GAEA,GAAA+M,GAAAC,CAEAD,IAAA/M,EAAA,GAAAA,EAAA,IAAAA,EAAA,IAAAA,EAAA,SAQEiN,MARFD,EAAA,SAAAE,EAAAC,EAAAC,EAAAC,GAEA,YAKA,OAHAH,GAAAC,KACAD,EAAAE,KACAF,EAAAG,aACAH,GACE9E,MAAAjI,EAAA4M,MAAA3M,EAAAD,QAAA6M,IAIF,SAAA5M,EAAAD,EAAAH,GAEA,GAAA+M,GAAAC,CAiCAD,IAAA/M,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,QAoSEiN,MApSFD,EAAA,SAAAM,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA,YAiHA,SAAAC,GAAAC,GACAF,EAAAG,uBAAAD,EAAAE,GACAX,EAAAY,aAAAH,GACAL,EAAAQ,aAAAH,GAOA,QAAAI,GAAAC,GACA,GAAAA,GAAAH,EAAAI,0BAGAR,EAAAS,SAAAF,GAAA,CACA,GAAAG,GAAAH,EAAAI,aAAA,0BACAD,KACAH,EAAAK,kBAAA,WACA,MAAAF,GAAAG,wBAEAN,EAAAO,kBAAA,SAAAnG,GACA+F,EAAAK,qBAAApG,IAEA4F,EAAAS,cAAA,SAAArG,GACA,MAAA+F,GAAAO,iBAAAtG,IAEA4F,EAAAW,gBAAA,SAAAvG,GACA+F,EAAAS,mBAAAxG,IAEA4F,EAAAa,qBAAAV,EAAAW,2BAYA,QAAAC,GAAAC,EAAAC,GAGA,OAFAC,IAAA,8BACAC,EAAA,KACAC,EAAA,EAAqBA,EAAAF,EAAApJ,UACrBqJ,EAAAH,EAAAK,WAAAH,EAAAE,GAAAH,MADwCG,GAMxC,MAAAD,GAcA,QAAAG,GAAAN,EAAAC,GACA,GAAAjB,GAAAe,EAAAC,EAAAC,EAEA,OADAlB,GAAAC,GACAA,EAiBA,QAAAuB,GAAAP,EAAAC,GAGA,OAFAC,IAAA,uCACAC,EAAA,KACAC,EAAA,EAAqBA,EAAAF,EAAApJ,UACrBqJ,EAAAH,EAAAK,WAAAH,EAAAE,GAAAH,MADwCG,GAMxC,MAAAD,GAqBA,QAAAE,GAAAL,EAAAC,GACA,GAAAjB,GAAAuB,EAAAP,EAAAC,EAEA,OADAlB,GAAAC,GACAA,EAUA,QAAAwB,GAAAR,EAAAS,GACAA,KAAA,EACAA,EAAArL,KAAAe,IAAA,EAAAsK,EACA,IAAAC,GAAAV,EAAAW,YAAAF,EAAA,EACAG,EAAAZ,EAAAa,aAAAJ,EAAA,CACA,QAAAT,EAAAU,WAAAV,EAAAY,cACAZ,EAAAU,QACAV,EAAAY,UACA,GAgBA,QAAAE,GAAAvP,GACA,YAAAA,IAAAuF,OAAA,GAGA,QAAAiK,GAAAvE,EAAAwE,GAIA,MAHAtP,QAAAuP,KAAAzE,GAAA0E,OAAAJ,GAAAK,QAAA,SAAAjK,GACA8J,EAAA9J,GAAAsF,EAAAtF,KAEA8J,EAhPA,GACAnC,IACAI,0BAAA,GA6NAmC,GACAf,aACAC,kBACApB,SAAAT,EAAAS,SACAmC,SAAA5C,EAAA4C,SACAb,4BACA9B,eAcA4C,GACApD,aACAC,OACAC,eACAC,WACAC,WACAC,cACAC,eAQA,OANA9M,QAAAuP,KAAAK,GAAAH,QAAA,SAAA5P,GACA,GAAAgQ,GAAAD,EAAA/P,EACAwP,GAAAQ,EAAAH,GACAA,EAAA7P,GAAAwP,EAAAQ,QAGAH,GACEpI,MAAAjI,EAAA4M,MAAA3M,EAAAD,QAAA6M,IAIF,SAAA5M,EAAAD,EAAAH,GAEA,GAAA+M,GAAAC,CAiCAD,IAAA/M,EAAA,GAAAA,EAAA,QA2pBEiN,MA3pBFD,EAAA,SAAAW,EAAAE,GACA,YA4CA,SAAA+C,GAAAC,GACA5C,EAAA6C,aAAAD,EAGA,QAAA/C,GAAAC,GACAF,EAAAG,uBAAAD,EAAAE,GAGA,QAAA8C,GAAA3C,EAAArJ,EAAAiM,EAAAC,EAAAC,GACA9C,EAAA+C,WAAApM,EAAAiM,GACA5C,EAAAgD,WAAArM,EAAAkM,EAAAC,GAAA9C,EAAAiD,aAcA,QAAAC,GAAAlD,EAAAmD,EAAAxM,EAAAmM,GACA,GAAAK,YAAAC,aACA,MAAAD,EAEAxM,MAAAqJ,EAAAqD,YACA,IAAAT,GAAA5C,EAAAsD,cAEA,OADAX,GAAA3C,EAAArJ,EAAAiM,EAAAO,EAAAL,GACAF,EAGA,QAAAW,GAAAhR,GACA,kBAAAA,EAKA,QAAAiR,GAAAL,GACA,MAAAA,aAAAM,YAGAN,YAAAzG,YAQA,QAAAgH,GAAAC,GACA,MAAAA,KAAAF,WAGAE,IAAAjH,WAMA,QAAAkH,GAAAf,GACA,MAAAA,GAAA/K,OAAA+K,IAAAgB,KAMA,QAAAC,GAAAvR,EAAAuF,GACA,GAAAiM,EASA,IAPAA,EADAC,EAAAC,KAAA1R,GACA,EACM2R,EAAAD,KAAA1R,GACN,EAEA,EAGAuF,EAAAiM,EAAA,EACA,mDAAAxR,EAAA,YAAAwR,EAAA,QAAAjM,EAAA,sCAAAiM,EAAA,0BAGA,OAAAA,GAGA,QAAAI,GAAAtB,EAAAuB,GACA,MAAAvB,GAAAkB,eAAAlB,EAAA1F,MAAA2G,EAAAM,EAAAR,EAAAf,GAAA/K,QAGA,QAAAuM,GAAAxB,EAAAtQ,GACA,GAAAgN,EAAA+E,cAAAzB,GACA,MAAAA,EAGA,IAAAtD,EAAA+E,cAAAzB,EAAAgB,MACA,MAAAhB,GAAAgB,IAGA3N,OAAAqO,QAAA1B,KACAA,GACAgB,KAAAhB,GAIA,IAAA2B,GAAA3B,EAAAlM,IAQA,OAPA6N,KAEAA,EADAjB,EAAAhR,GACAoK,YAEA1G,cAGA,GAAAuO,GAAA3B,EAAAgB,MAkJA,QAAAY,GAAAzE,EAAA0E,GACA,GAAAC,KAwCA,OAvCAjS,QAAAuP,KAAAyC,GAAAvC,QAAA,SAAAiC,GACA,IAAAb,EAAAa,GAAA,CACA,GAEAxB,GACAjM,EACAiO,EACAb,EACAc,EANAhC,EAAA6B,EAAAN,GACAU,EAAAjC,EAAAkC,QAAAlC,EAAAtQ,MAAAsQ,EAAAiC,YAAAjF,EAAA6C,aAAA0B,CAMA,oBAAAvB,IAAA,gBAAAA,GAAAgB,KAAA,CACAgB,EAAAhC,EAAAgB,MAAAhB,CACA,IAAAmC,GAAAnC,EAAAlM,MAAAV,aACAgP,EAAAJ,EAAAG,EAAAE,iBACAvO,GAAA4I,EAAA4F,2BAAAH,GACAJ,MAAA/F,KAAAgE,EAAAuC,UAAAvC,EAAAuC,UAAA1B,EAAAsB,GACAjB,EAAAlB,EAAAkB,eAAAlB,EAAA1F,MAAA2G,EAAAM,EAAAS,GACAjC,EAAA5C,EAAAsD,eACAtD,EAAA+C,WAAA/C,EAAAqD,aAAAT,GACA5C,EAAAgD,WAAAhD,EAAAqD,aAAA4B,EAAApC,EAAAC,UAAA9C,EAAAiD,iBACU,CACV,GAAAE,GAAAkB,EAAAxB,EAAAuB,EACAxB,GAAAM,EAAAlD,EAAAmD,MAAAtE,GAAAgE,EAAAC,UACAnM,EAAA4I,EAAA8F,uBAAAlC,GACAyB,MAAA/F,KAAAgE,EAAAuC,UAAAvC,EAAAuC,UAAA5B,EAAAL,GACAY,EAAAI,EAAAtB,EAAAuB,GACAS,EAAA1B,EAAArL,OAEA6M,EAAAG,IACAlC,SACAmB,gBACApN,OACAyO,UAAAR,EACAU,OAAAzC,EAAAyC,QAAA,EACAC,OAAA1C,EAAA0C,QAAA,EACAzC,SAAAD,EAAAC,aAIA9C,EAAA+C,WAAA/C,EAAAqD,aAAA,MACAsB,EAuCA,QAAAa,GAAAxF,EAAAyF,EAAA5C,EAAA0C,GACA1C,EAAAwB,EAAAxB,OACAhE,KAAA0G,GACAvF,EAAA+C,WAAA/C,EAAAqD,aAAAoC,EAAA7C,QACA5C,EAAA0F,cAAA1F,EAAAqD,aAAAkC,EAAA1C,IAEAF,EAAA3C,IAAAqD,aAAAoC,EAAA7C,OAAAC,EAAA4C,EAAA3C,UAIA,QAAA6C,GAAA3F,EAAArJ,GACA,MAAAA,KAAAqJ,EAAA4F,KAAA,EACAjP,IAAAqJ,EAAA6F,cAAA,EACAlP,IAAAqJ,EAAA8F,MAAA,EACAnP,IAAAqJ,EAAA+F,eAAA,EACApP,IAAAqJ,EAAAgG,IAAA,EACArP,IAAAqJ,EAAAiG,aAAA,EACAtP,IAAAqJ,EAAAkG,MAAA,EACA,EAOA,QAAAC,GAAAzB,GAEA,OADAxM,GACAkJ,EAAA,EAAqBA,EAAAgF,EAAAtO,WACrBI,EAAAkO,EAAAhF,KACAsD,MAF+CtD,GAM/CA,IAAAgF,EAAAtO,SACAI,EAAAxF,OAAAuP,KAAAyC,GAAA,GAEA,IAAA7B,GAAA6B,EAAAxM,GACAJ,EAAA8L,EAAAf,GAAA/K,OACAiM,EAAAI,EAAAtB,EAAA3K,GACAmO,EAAAvO,EAAAiM,CACA,IAAAjM,EAAAiM,EAAA,EACA,sBAAAA,EAAA,2BAAAjM,CAEA,OAAAuO,GAGA,QAAAC,GAAAtG,EAAA2E,GAEA,OADAzM,GACAkJ,EAAA,EAAqBA,EAAAgF,EAAAtO,WACrBI,EAAAkO,EAAAhF,KACAuD,QAGAzM,EAAA2H,EAAA6C,aAAAxK,IACAyM,MAN+CvD,GAU/CA,IAAAgF,EAAAtO,SACAI,EAAAxF,OAAAuP,KAAA0C,GAAA,GAEA,IAAAI,GAAAJ,EAAAzM,EACA8H,GAAA+C,WAAA/C,EAAAqD,aAAA0B,EAAAnC,OACA,IAAAqC,GAAAjF,EAAAuG,mBAAAvG,EAAAqD,aAAArD,EAAAwG,YACAxG,GAAA+C,WAAA/C,EAAAqD,aAAA,KAEA,IAAAoD,GAAAd,EAAA3F,EAAA+E,EAAApO,MACA+P,EAAAzB,EAAAwB,EACA1C,EAAAgB,EAAAhB,eAAAgB,EAAA5H,KAEAkJ,EAAAK,EAAA3C,CACA,IAAAsC,EAAA,KACA,sBAAAtC,EAAA,2BAAAjM,MAEA,OAAAuO,GAuGA,QAAAM,GAAA3G,EAAA0E,GACA,GAAAkC,IACAjC,QAAAF,EAAAzE,EAAA0E,IAEAmC,EAAAnC,EAAAmC,OAUA,OATAA,IACAA,EAAAxC,EAAAwC,EAAA,WACAD,EAAAC,QAAA3D,EAAAlD,EAAA6G,EAAA7G,EAAA8G,sBACAF,EAAAP,YAAAQ,EAAA/O,OACA8O,EAAAG,YAAAxH,EAAA8F,uBAAAwB,IAEAD,EAAAP,YAAAC,EAAAtG,EAAA4G,EAAAjC,SAGAiC,EA6BA,QAAAI,GAAAhH,EAAA6C,EAAAuB,GACA,GAAAzN,GAAA,YAAAyN,EAAApE,EAAA8G,qBAAA9G,EAAAqD,YAEA,OAAAH,GAAAlD,EADAqE,EAAAxB,EAAAuB,GACAzN,GA2BA,QAAAsQ,GAAAjH,EAAA0E,GACA,GAAAwC,KAaA,OAZAxU,QAAAuP,KAAAyC,GAAAvC,QAAA,SAAAjK,GACAgP,EAAAhP,GAAA8O,EAAAhH,EAAA0E,EAAAxM,QAIAwM,EAAAmC,SACAK,EAAAb,YAAA3B,EAAAmC,QAAA/O,OACAoP,EAAAH,YAAAxH,EAAA8F,uBAAAhB,EAAAK,EAAAmC,SAAA,YAEAK,EAAAb,YAAAF,EAAAzB,GAGAwC,EApnBA,GACArH,IACA6C,aAAA,IAyFAsB,EAAA,iBACAE,EAAA,gBAwSAkC,GAAA,oCAqPA,QACA3B,0BACAwC,0BACAD,wBACA9D,6BACAyD,6BACAnB,+BAEAhD,qBAEA1C,aAAAJ,EACAyH,kBAAAhD,EACAiD,UAAAxD,IAEE5J,MAAAjI,EAAA4M,MAAA3M,EAAAD,QAAA6M,IAIF,SAAA5M,EAAAD,EAAAH,GAEA,GAAA+M,GAAAC,CAgCAD,UA4JEE,MA5JFD,EAAA,WACA,YAmEA,SAAAyG,GAAAlC,GACA,GAAAA,YAAAM,WACA,MAAAmC,EAEA,IAAAzC,YAAAzG,YACA,MAAAmJ,EAEA,IAAA1C,YAAAkE,mBACA,MAAAxB,EAEA,IAAA1C,YAAAmE,YACA,MAAAxB,EAEA,IAAA3C,YAAAxG,aACA,MAAAoJ,EAEA,IAAA5C,YAAAvG,YACA,MAAAoJ,EAEA,IAAA7C,YAAAoE,aACA,MAAAtB,EAEA,IAAA9C,YAAAlN,cACA,MAAAiQ,EAEA,qCAUA,QAAAf,GAAAxB,GACA,GAAAA,IAAAF,UACA,MAAAmC,EAEA,IAAAjC,IAAAjH,WACA,MAAAmJ,EAEA,IAAAlC,IAAA0D,kBACA,MAAAxB,EAEA,IAAAlC,IAAA2D,WACA,MAAAxB,EAEA,IAAAnC,IAAAhH,YACA,MAAAoJ,EAEA,IAAApC,IAAA/G,WACA,MAAAoJ,EAEA,IAAArC,IAAA4D,YACA,MAAAtB,EAEA,IAAAtC,IAAA1N,aACA,MAAAiQ,EAEA,qCASA,QAAAsB,GAAA7Q,GACA,GAAA8Q,GAAAC,EAAA/Q,EACA,KAAA8Q,EACA,sBAEA,OAAAA,GAGA,QAAAnD,GAAAvN,GACA,MAAAA,MAAA6L,QAAA7L,EAAA6L,iBAAA+E,aA9HA,GAGA/B,GAAA,KACAC,EAAA,KACAC,EAAA,KACAC,EAAA,KACAC,EAAA,KACAC,EAAA,KACAC,EAAA,KAWAwB,KAEAE,EAAAF,CA4GA,OA3GAE,GAAAhC,GAAAnC,UACAmE,EAAA/B,GAAAnJ,WACAkL,EAAA9B,GAAAwB,WACAM,EAAA7B,GAAApJ,YACAiL,EAAA5B,GAAApJ,WACAgL,EAAA3B,GAAAsB,YACAK,EAAA1B,GAAAjQ,aACA2R,EApBA,OAoBAjL,YACAiL,EApBA,OAoBAjL,YACAiL,EApBA,OAoBAjL,YACAiL,EApBA,MAoBAjL,YACAiL,EApBA,OAoBAL,YACAK,EApBA,OAoBAL,YACAK,EApBA,OAoBAL,YACAK,EApBA,OAoBAL,YACAK,EApBA,OAoBAL,aA6FAlC,yBACAF,6BACAqC,6BACAlD,kBAEEtK,MAAAjI,EAAA4M,MAAA3M,EAAAD,QAAA6M,IAIF,SAAA5M,EAAAD,EAAAH,GAEA,GAAA+M,GAAAC,CAiCAD,UAkGEE,MAlGFD,EAAA,WACA,YAQA,SAAAiJ,GAAArK,GACA,GAAAwE,KAIA,OAHAtP,QAAAuP,KAAAzE,GAAA2E,QAAA,SAAAjK,GACA8J,EAAA9J,GAAAsF,EAAAtF,KAEA8J,EAUA,QAAA8F,GAAA5G,EAAA1D,EAAAwE,GACAd,EAAAiB,QAAA,SAAA5P,GACA,GAAAgB,GAAAiK,EAAAjL,OACAsM,KAAAtL,IACAyO,EAAAzP,GAAAgB,KAWA,QAAAqM,GAAApC,EAAAwE,GACAtP,OAAAuP,KAAAD,GAAAG,QAAA,SAAAjK,GACA8J,EAAA5O,eAAA8E,IAAAsF,EAAApK,eAAA8E,KACA8J,EAAA9J,GAAAsF,EAAAtF,MAoBA,QAAAmK,GAAArC,GAKA,QAAAA,EAAA+H,aASA,QAAA7H,GAAAF,GAMA,OAAAA,EAAA+H,aAOA,OACAnI,yBACAkI,sBACAD,cACA3H,WACAmC,WACA7G,MAVAwM,OAAAC,SAAAD,OAAAC,QAAAzM,OAAA,kBAAAwM,QAAAC,QAAAzM,MAAAwM,OAAAC,QAAAzM,MAAA0M,KAAAF,OAAAC,SAAA,aAWAE,KATAH,OAAAC,SAAAD,OAAAC,QAAAE,MAAA,kBAAAH,QAAAC,QAAAE,KAAAH,OAAAC,QAAAE,KAAAD,KAAAF,OAAAC,SAAA,eAWEjO,MAAAjI,EAAA4M,MAAA3M,EAAAD,QAAA6M,IAIF,SAAA5M,EAAAD,EAAAH,GAEA,GAAA+M,GAAAC,CAiCAD,IAAA/M,EAAA,QAuIEiN,MAvIFD,EAAA,SAAAS,GACA,YA6BA,SAAA+I,GAAApI,EAAA4G,EAAAjQ,EAAA0R,EAAA9C,GACA5O,MAAAkI,KAAAlI,EAAAqJ,EAAAsI,UAAA3R,CACA,IAAAkQ,GAAAD,EAAAC,QACAE,EAAAH,EAAAG,YACAV,MAAAxH,KAAAwJ,EAAAzB,EAAAP,YAAAgC,CACA9C,OAAA1G,KAAA0G,EAAA,EAAAA,EACAwB,GAAAF,EACA7G,EAAAuI,aAAA5R,EAAA0P,MAAAxH,KAAAkI,EAAA/G,EAAA+F,eAAAa,EAAAG,YAAAxB,GAEAvF,EAAAwI,WAAA7R,EAAA4O,EAAAc,GA4CA,QAAAoC,GAAAzI,EAAA0I,GACA,GAAAC,GAAA,KACAC,EAAA,IAEAF,GAAAvG,QAAA,SAAAlP,GACA,QAAAA,EAAA4V,OAAA,CAIA,GAAAC,GAAA7V,EAAA6V,YACAlC,EAAA3T,EAAA8V,iBAAA9V,EAAA2T,WACAoC,GAAA,EACArS,MAAAkI,KAAA5L,EAAA0D,KAAAqJ,EAAAsI,UAAArV,EAAA0D,IAEAmS,KAAAH,IACAA,EAAAG,EACA9I,EAAAiJ,WAAAH,EAAAI,SAMAF,GAAA,IAIAA,GAAApC,IAAAgC,KACAA,KAAAO,oBAAAvC,EAAAuC,mBACAnJ,EAAAW,gBAAA,MAEAiI,EAAAhC,EACAvH,EAAA+J,wBAAApJ,EAAA8I,EAAAlC,IAIAvH,EAAAgK,YAAAP,EAAA7V,EAAAqW,UAGAlB,EAAApI,EAAA4G,EAAAjQ,EAAA1D,EAAAoV,MAAApV,EAAAsS,WAGAqD,EAAAO,mBACAnJ,EAAAW,gBAAA,MAMA,OACAyH,iBACAK,mBAEEzO,MAAAjI,EAAA4M,MAAA3M,EAAAD,QAAA6M,IAIF,SAAA5M,EAAAD,EAAAH,GAEA,GAAA+M,GAAAC,CAiCAD,IAAA/M,EAAA,QAohDEiN,MAphDFD,EAAA,SAAAa,GACA,YAuEA,SAAA8J,GAAAvJ,EAAArJ,GACA,MAAA6S,IAAA7S,GAAA8S,UAMA,QAAAC,GAAA1J,EAAA2J,GACA,gBAAAvP,GACA4F,EAAA4J,UAAAD,EAAAvP,IAIA,QAAAyP,GAAA7J,EAAA2J,GACA,gBAAAvP,GACA4F,EAAA8J,WAAAH,EAAAvP,IAIA,QAAA2P,GAAA/J,EAAA2J,GACA,gBAAAvP,GACA4F,EAAAgK,WAAAL,EAAAvP,IAIA,QAAA6P,GAAAjK,EAAA2J,GACA,gBAAAvP,GACA4F,EAAAkK,WAAAP,EAAAvP,IAIA,QAAA+P,GAAAnK,EAAA2J,GACA,gBAAAvP,GACA4F,EAAAoK,WAAAT,EAAAvP,IAIA,QAAAiQ,GAAArK,EAAA2J,GACA,gBAAAvP,GACA4F,EAAAsK,UAAAX,EAAAvP,IAIA,QAAAmQ,GAAAvK,EAAA2J,GACA,gBAAAvP,GACA4F,EAAAwK,WAAAb,EAAAvP,IAIA,QAAAqQ,GAAAzK,EAAA2J,GACA,gBAAAvP,GACA4F,EAAA0K,WAAAf,EAAAvP,IAIA,QAAAuQ,GAAA3K,EAAA2J,GACA,gBAAAvP,GACA4F,EAAA4K,WAAAjB,EAAAvP,IAIA,QAAAyQ,GAAA7K,EAAA2J,GACA,gBAAAvP,GACA4F,EAAA8K,WAAAnB,EAAAvP,IAIA,QAAA2Q,GAAA/K,EAAA2J,GACA,gBAAAvP,GACA4F,EAAAgL,WAAArB,EAAAvP,IAIA,QAAA6Q,GAAAjL,EAAA2J,GACA,gBAAAvP,GACA4F,EAAAkL,YAAAvB,EAAAvP,IAIA,QAAA+Q,GAAAnL,EAAA2J,GACA,gBAAAvP,GACA4F,EAAAoL,YAAAzB,EAAAvP,IAIA,QAAAiR,GAAArL,EAAA2J,GACA,gBAAAvP,GACA4F,EAAAsL,YAAA3B,EAAAvP,IAIA,QAAAmR,GAAAvL,EAAA2J,GACA,gBAAAvP,GACA4F,EAAAwL,YAAA7B,EAAAvP,IAIA,QAAAqR,GAAAzL,EAAA2J,GACA,gBAAAvP,GACA4F,EAAA0L,iBAAA/B,GAAA,EAAAvP,IAIA,QAAAuR,GAAA3L,EAAA2J,GACA,gBAAAvP,GACA4F,EAAA4L,iBAAAjC,GAAA,EAAAvP,IAIA,QAAAyR,GAAA7L,EAAA2J,GACA,gBAAAvP,GACA4F,EAAA8L,iBAAAnC,GAAA,EAAAvP,IAIA,QAAA2R,GAAA/L,EAAA2J,GACA,gBAAAvP,GACA4F,EAAAgM,mBAAArC,GAAA,EAAAvP,IAIA,QAAA6R,GAAAjM,EAAA2J,GACA,gBAAAvP,GACA4F,EAAAkM,mBAAAvC,GAAA,EAAAvP,IAIA,QAAA+R,GAAAnM,EAAA2J,GACA,gBAAAvP,GACA4F,EAAAoM,mBAAAzC,GAAA,EAAAvP,IAIA,QAAAiS,GAAArM,EAAA2J,GACA,gBAAAvP,GACA4F,EAAAsM,mBAAA3C,GAAA,EAAAvP,IAIA,QAAAmS,GAAAvM,EAAA2J,GACA,gBAAAvP,GACA4F,EAAAwM,mBAAA7C,GAAA,EAAAvP,IAIA,QAAAqS,GAAAzM,EAAA2J,GACA,gBAAAvP,GACA4F,EAAA0M,mBAAA/C,GAAA,EAAAvP,IAIA,QAAAuS,GAAA3M,EAAArJ,EAAAiW,EAAAjD,GACA,GAAAF,GAAAF,EAAAvJ,EAAArJ,EACA,OAAA8I,GAAA4C,SAAArC,GAAA,SAAA6M,GACA,GAAAC,OAAA,GACAC,MAAA,EACAF,aAAAG,eACAF,EAAAD,EACAE,EAAA,OAEAD,EAAAD,EAAAC,QACAC,EAAAF,EAAAE,SAEA/M,EAAAsK,UAAAX,EAAAiD,GACA5M,EAAAiN,cAAAjN,EAAAkN,SAAAN,GACA5M,EAAAmN,YAAA1D,EAAAqD,GACA9M,EAAAoN,YAAAR,EAAAG,IACM,SAAAD,GACN9M,EAAAsK,UAAAX,EAAAiD,GACA5M,EAAAiN,cAAAjN,EAAAkN,SAAAN,GACA5M,EAAAmN,YAAA1D,EAAAqD,IAIA,QAAAO,GAAArN,EAAArJ,EAAAiW,EAAAjD,EAAAxM,GAGA,OAFAsM,GAAAF,EAAAvJ,EAAArJ,GACA2W,EAAA,GAAA1Q,YAAAO,GACAiE,EAAA,EAAqBA,EAAAjE,IAAWiE,EAChCkM,EAAAlM,GAAAwL,EAAAxL,CAGA,OAAA3B,GAAA4C,SAAArC,GAAA,SAAAV,GACAU,EAAAwK,WAAAb,EAAA2D,GACAhO,EAAA6C,QAAA,SAAA0K,EAAAU,GACAvN,EAAAiN,cAAAjN,EAAAkN,SAAAI,EAAAC,GACA,IAAAT,OAAA,GACAC,MAAA,EACAF,aAAAG,eACAF,EAAAD,EACAE,EAAA,OAEAD,EAAAD,EAAAC,QACAC,EAAAF,EAAAE,SAEA/M,EAAAoN,YAAAR,EAAAG,GACA/M,EAAAmN,YAAA1D,EAAAqD,MAEM,SAAAxN,GACNU,EAAAwK,WAAAb,EAAA2D,GACAhO,EAAA6C,QAAA,SAAA2K,EAAAS,GACAvN,EAAAiN,cAAAjN,EAAAkN,SAAAI,EAAAC,IACAvN,EAAAmN,YAAA1D,EAAAqD,MA8CA,QAAAU,GAAAxN,EAAAuN,GACA,gBAAAtW,GACA+I,EAAA+C,WAAA/C,EAAAqD,aAAApM,EAAA2L,QACA5C,EAAAyN,wBAAAF,GACAvN,EAAA0N,oBAAAH,EAAAtW,EAAA8M,eAAA9M,EAAAkG,KAAAlG,EAAAN,MAAAqJ,EAAAkG,MAAAjP,EAAAmO,YAAA,EAAAnO,EAAAqO,QAAA,EAAArO,EAAAsO,QAAA,IAIA,QAAAoI,GAAA3N,EAAAuN,GACA,gBAAAtW,GACA+I,EAAA+C,WAAA/C,EAAAqD,aAAApM,EAAA2L,QACA5C,EAAAyN,wBAAAF,GACAvN,EAAA4N,qBAAAL,EAAAtW,EAAA8M,eAAA9M,EAAAkG,KAAAlG,EAAAN,MAAAqJ,EAAAgG,IAAA/O,EAAAqO,QAAA,EAAArO,EAAAsO,QAAA,IAIA,QAAAsI,GAAA7N,EAAAuN,EAAAO,GACA,GAAAC,GAAAD,EAAA3Q,KACAkL,EAAAyF,EAAAzF,KAEA,iBAAApR,GACA+I,EAAA+C,WAAA/C,EAAAqD,aAAApM,EAAA2L,OASA,QARAmB,GAAA9M,EAAAkG,MAAAlG,EAAA8M,eAAAgK,EACA5Q,EAAA4G,EAAAsE,EACA1R,EAAAM,EAAAN,MAAAqJ,EAAAkG,MACA4H,EAAAtE,GAAA7S,GACA2O,EAAAwI,EAAA3Q,KAAA4G,EACAqB,EAAAnO,EAAAmO,YAAA,EACAG,EAAAtO,EAAAsO,QAAA,EACAyI,EAAA1I,EAAA+C,EACApW,EAAA,EAAsBA,EAAAoW,IAAWpW,EACjC+N,EAAAyN,wBAAAF,EAAAtb,GACA+N,EAAA0N,oBAAAH,EAAAtb,EAAAkL,EAAAxG,EAAAyO,EAAAE,EAAAC,EAAAyI,EAAA/b,IAqCA,QAAAgc,GAAAzQ,EAAA0Q,GAIA,MAHAA,MAAA,IACAA,EAEA1Q,EAAA2Q,MAAA,MAAAC,IAAA,SAAAC,EAAAC,GACA,MAAAA,GAAAJ,EAAA,KAAAG,IACME,KAAA,MAaN,QAAAC,GAAAxO,EAAAyO,EAAAC,EAAAC,GACA,GAAAC,GAAAD,GAAAnT,GAEAqT,EAAA7O,EAAA8O,aAAAJ,GAaAR,EAAA,CAcA,IAbAa,GAAA9K,KAAAwK,KACAP,EAAA,EACAO,IAAAO,QAAAD,GAAA,KAIA/O,EAAAyO,aAAAI,EAAAJ,GAGAzO,EAAAiP,cAAAJ,IAGA7O,EAAAkP,mBAAAL,EAAA7O,EAAAmP,gBACA,CAEA,GAAAC,GAAApP,EAAAqP,iBAAAR,EAGA,OAFAD,GAAAX,EAAAQ,EAAAP,GAAA,iCAAAkB,GACApP,EAAAsP,aAAAT,GACA,KAGA,MAAAA,GAsBA,QAAAU,GAAAtO,EAAAuO,EAAAb,GAKA,GAJA,kBAAAa,KACAb,EAAAa,EACAA,MAAA3Q,IAEA,kBAAAoC,GACA0N,EAAA1N,EACAA,MAAApC,OACM,IAAAoC,IAAA/K,MAAAqO,QAAAtD,GAAA,CAGN,GAAAA,EAAAwO,cACA,MAAAxO,EAEA,IAAAyO,GAAAzO,CACA0N,GAAAe,EAAAD,cACAxO,EAAAyO,EAAAC,eACA,IAAAC,GAAAF,EAAAE,0BAGA,GAAAC,IACAJ,cAAAd,GAAAnT,GACAoU,4BAGA,IAAA3O,EAAA,CACA,GAAA0O,KACAzZ,OAAAqO,QAAAtD,GACAA,EAAAkB,QAAA,SAAA4C,EAAAuJ,GACAqB,EAAA5K,GAAAyK,IAAAlB,OAGAqB,EAAA1O,EAEA4O,EAAAF,kBAGA,MAAAE,GAKA,QAAAC,GAAAC,GACA,MAAAA,GAAAnY,QAAA,WACAoI,GAAAgQ,gBACMD,EAAAnY,QAAA,WACNoI,GAAAiQ,kBADM,GAMN,QAAAC,GAAAlQ,EAAAmQ,GACAA,EAAAhO,QAAA,SAAA0M,GACA7O,EAAAsP,aAAAT,KAuBA,QAAAuB,GAAApQ,EAAAmQ,EAAAlP,EAAAuO,EAAAb,GAIA,OAHA0B,GAAAd,EAAAtO,EAAAuO,EAAAb,GACA2B,KACAC,KACAjC,EAAA,EAAsBA,EAAA6B,EAAArY,SAAsBwW,EAAA,CAC5C,GAAAO,GAAAsB,EAAA7B,EACA,oBAAAO,GAAA,CACA,GAAA2B,GAAAC,SAAAC,eAAA7B,GACArR,EAAAgT,IAAAG,KAAA9B,EACAlY,EAAAqJ,EAAA4Q,GAAAtC,GACAkC,MAAA7Z,OACAA,EAAAmZ,EAAAU,EAAA7Z,UAEAkY,EAAAL,EAAAxO,EAAAxC,EAAA7G,EAAA0Z,EAAAZ,eACAc,EAAAzV,KAAA+T,GAEAA,YAAAgC,cACAP,EAAAxV,KAAA+T,GAIA,GAAAyB,EAAAxY,SAAAqY,EAAArY,OAGA,MAFAgZ,gBAAArB,cAAA,kCACAS,EAAAlQ,EAAAuQ,GACA,IAGA,IAAArH,GAAAlJ,EAAAoQ,eACAE,GAAAnO,QAAA,SAAA0M,GACA7O,EAAA+Q,aAAA7H,EAAA2F,KAEAwB,EAAAV,iBACAjd,OAAAuP,KAAAoO,EAAAV,iBAAAxN,QAAA,SAAA4C,GACA/E,EAAAgR,mBAAA9H,EAAAmH,EAAAV,gBAAA5K,OAGA,IAAAkM,GAAAZ,EAAAT,yBAcA,IAbAqB,IACAA,EAAAtM,UACAsM,IAAAtM,SAEAzO,MAAAqO,QAAA0M,KACAA,EAAAve,OAAAuP,KAAAgP,IAEAjR,EAAA4P,0BAAA1G,EAAA+H,EAAAZ,EAAAa,uBAAAlR,EAAAmR,mBAEAnR,EAAAoR,YAAAlI,IAGAlJ,EAAAqR,oBAAAnI,EAAAlJ,EAAAsR,aACA,CAEA,GAAAlC,GAAApP,EAAAuR,kBAAArI,EAKA,OAJAmH,GAAAZ,cAAA,4BAAAL,GAEApP,EAAAwR,cAAAtI,GACAgH,EAAAlQ,EAAAuQ,GACA,KAEA,MAAArH,GAYA,QAAAuI,GAAAzR,EAAA0R,EAAAC,EAAAhD,GACA,GAAAF,GAAA,GACAmD,EAAAnB,SAAAC,eAAAgB,EACA,KAAAE,EACA,yCAAAF,CAEAjD,GAAAmD,EAAAjB,IAEA,IAAAjC,GAAAiD,GAAA7B,EAAA8B,EAAAjb,KACA,KAAA+X,EACA,qCAGA,OAAAF,GAAAxO,EAAAyO,EAAAC,EAAAC,GAyBA,QAAAkD,GAAA7R,EAAA8R,EAAA7Q,EAAAuO,EAAAb,GAGA,OAFA0B,GAAAd,EAAAtO,EAAAuO,EAAAb,GACAwB,KACA/O,EAAA,EAAqBA,EAAA0Q,EAAAha,SAA6BsJ,EAAA,CAClD,GAAAyN,GAAA4C,EAAAzR,EAAA8R,EAAA1Q,GAAApB,EAAA4Q,GAAAxP,IAAAiP,EAAAZ,cACA,KAAAZ,EACA,WAEAsB,GAAArV,KAAA+T,GAEA,MAAAuB,GAAApQ,EAAAmQ,EAAAE,GAyBA,QAAA0B,GAAA/R,EAAAgS,EAAA/Q,EAAAuO,EAAAb,GAGA,OAFA0B,GAAAd,EAAAtO,EAAAuO,EAAAb,GACAwB,KACA/O,EAAA,EAAqBA,EAAA4Q,EAAAla,SAA2BsJ,EAAA,CAChD,GAAAyN,GAAAL,EAAAxO,EAAAgS,EAAA5Q,GAAApB,EAAA4Q,GAAAxP,IAAAiP,EAAAZ,cACA,KAAAZ,EACA,WAEAsB,GAAArV,KAAA+T,GAEA,MAAAuB,GAAApQ,EAAAmQ,EAAAE,GAaA,QAAA4B,GAAAjS,EAAAkJ,GA0CA,OAzCAgJ,GAAA,EAsCAC,KACAC,EAAApS,EAAAqR,oBAAAnI,EAAAlJ,EAAAqS,iBAEAjR,EAAA,EAAqBA,EAAAgR,IAAkBhR,EAAA,CACvC,GAAAkR,GAAAtS,EAAAuS,iBAAArJ,EAAA9H,EACA,KAAAkR,EACA,KAEA,IAAA/f,GAAA+f,EAAA/f,IAEA,SAAAA,EAAAigB,QAAA,KACAjgB,IAAAigB,OAAA,EAAAjgB,EAAAuF,OAAA,GAEA,IAAA2a,GA1CA,SAAAvJ,EAAAoJ,GACA,GAAA3I,GAAA3J,EAAA0S,mBAAAxJ,EAAAoJ,EAAA/f,MACAgS,EAAA+N,EAAAnV,KAAA,WAAAmV,EAAA/f,KAAAigB,QAAA,GACA7b,EAAA2b,EAAA3b,KACAmX,EAAAtE,GAAA7S,EACA,KAAAmX,EACA,wBAAAnX,EAAAgc,SAAA,GAEA,IAAAF,EACA,IAAA3E,EAAArE,UAAA,CAEA,GAAAmD,GAAAsF,CACAA,IAAAI,EAAAnV,KAEAsV,EADAlO,EACAuJ,EAAA8E,YAAA5S,EAAArJ,EAAAiW,EAAAjD,EAAA2I,EAAAnV,MAEA2Q,EAAA2E,OAAAzS,EAAArJ,EAAAiW,EAAAjD,EAAA2I,EAAAnV,UAIAsV,GADA3E,EAAA8E,aAAArO,EACAuJ,EAAA8E,YAAA5S,EAAA2J,GAEAmE,EAAA2E,OAAAzS,EAAA2J,EAIA,OADA8I,GAAA9I,WACA8I,GAgBAvJ,EAAAoJ,EACAH,GAAA5f,GAAAkgB,EAEA,MAAAN,GAkBA,QAAAU,GAAA7S,EAAAkJ,GAGA,OAFA4J,MACAC,EAAA/S,EAAAqR,oBAAAnI,EAAAlJ,EAAAgT,6BACA5R,EAAA,EAAqBA,EAAA2R,IAAkB3R,EAAA,CACvC,GAAA6R,GAAAjT,EAAAkT,4BAAAhK,EAAA9H,EACA0R,GAAAG,EAAA1gB,OACAgb,MAAAnM,EACAzK,KAAAsc,EAAAtc,KACAwG,KAAA8V,EAAA9V,MAGA,MAAA2V,GAWA,QAAAK,GAAAnT,EAAAoT,EAAAxM,GACAwM,0BACAA,2BAEAxM,EAAAjC,UACAiC,IAAAjC,QAEA,QAAApS,KAAAqU,GAAA,CACA,GAAAqM,GAAAG,EAAA7gB,EACA,IAAA0gB,EAAA,CACA,GAAA/V,GAAA0J,EAAArU,EACA2K,GAAAqI,OACAvF,EAAAqT,gBAAArT,EAAAsT,0BAAAL,EAAA1F,MAAArQ,EAAA0F,OAAA1F,EAAAqI,OAAArI,EAAAC,MAEA6C,EAAAuT,eAAAvT,EAAAsT,0BAAAL,EAAA1F,MAAArQ,EAAA0F,UAkBA,QAAA4Q,GAAAxT,EAAAoT,EAAAxM,GACAwM,0BACAA,2BAEAxM,EAAAjC,UACAiC,IAAAjC,QAEA,QAAApS,KAAAqU,GAAA,CACA,GAAAqM,GAAAG,EAAA7gB,EACA0gB,IACAjT,EAAAuT,eAAAvT,EAAAsT,0BAAAL,EAAA1F,MAAA,OAaA,QAAAkG,GAAAzT,EAAA8I,EAAAlC,GACA,GAAA8M,GAAA1T,EAAAyT,yBAQA,OAPAzT,GAAA2T,sBAAA3T,EAAA4T,mBAAAF,GACA1T,EAAAiJ,WAAAH,EAAAI,SACAiK,EAAAnT,EAAA8I,EAAAlC,GACA5G,EAAA2T,sBAAA3T,EAAA4T,mBAAA,MAGAJ,EAAAxT,EAAA8I,EAAAlC,GACA8M,EA+CA,QAAAG,GAAA7T,EAAAkJ,GAKA,OAJAkJ,GAAApS,EAAAqR,oBAAAnI,EAAAlJ,EAAAqS,iBACAyB,KACAC,KAEA3S,EAAA,EAAqBA,EAAAgR,IAAkBhR,EAAA,CACvC2S,EAAAjZ,KAAAsG,GACA0S,EAAAhZ,QACA,IAAAwX,GAAAtS,EAAAuS,iBAAArJ,EAAA9H,EACA,KAAAkR,EACA,KAGAwB,GAAA1S,GAAA7O,KAAA+f,EAAA/f,OAGA,gDACA,+DAAA4P,QAAA,SAAA6R,GACA,GAAAC,GAAAD,EAAA,GACA9b,EAAA8b,EAAA,EACAhU,GAAAkU,kBAAAhL,EAAA6K,EAAA/T,EAAAiU,IAAA9R,QAAA,SAAA5O,EAAA+a,GACAwF,EAAAxF,GAAApW,GAAA3E,KAIA,IAAA4gB,MAEAC,EAAApU,EAAAqR,oBAAAnI,EAAAlJ,EAAAqU,sBACA,KAAAjT,EAAA,EAAiBA,EAAAgT,IAAuBhT,EAAA,CACxC,GAAA7O,GAAAyN,EAAAsU,0BAAApL,EAAA9H,GACAmT,GACAhH,MAAAnM,EACAoT,mBAAAxU,EAAAyU,+BAAAvL,EAAA9H,EAAApB,EAAA0U,2CACAC,qBAAA3U,EAAAyU,+BAAAvL,EAAA9H,EAAApB,EAAA4U,6CACAzX,KAAA6C,EAAAyU,+BAAAvL,EAAA9H,EAAApB,EAAA6U,yBACAd,eAAA/T,EAAAyU,+BAAAvL,EAAA9H,EAAApB,EAAA8U,sCAEAP,GAAAQ,KAAAR,EAAAS,oBAAAT,EAAAI,qBACAR,EAAA5hB,GAAAgiB,EAGA,OACAJ,aACAL,eA0CA,QAAAmB,GAAAjV,EAAAkJ,EAAAgM,EAAAC,GACA,GAAAhB,GAAAe,EAAAf,WACAL,EAAAoB,EAAApB,YACAS,EAAAJ,EAAAgB,EACA,KAAAZ,EAEA,MADApM,IAAA,iCAAAgN,IAEA5iB,KAAA4iB,EACA7L,YAGA,IAAAzG,GAAA,GAAA8E,aAAA4M,EAAApX,MACAyF,EAAA5C,EAAAsD,eACA8R,EAAAb,EAAAhH,KACAvN,GAAA+C,WAAA/C,EAAAqV,eAAAzS,GACA5C,EAAAsV,oBAAApM,EAAAqL,EAAAhH,MAAA6H,EAEA,IAAA3S,GAAA0S,EAAA,GACAI,IAAAtR,KAAAxB,KACAA,IAAAuM,QAAAuG,GAAA,KAEA,IAAAjM,KAYA,OAXAiL,GAAAR,eAAA5R,QAAA,SAAAqT,GACA,GAAA3R,GAAAiQ,EAAA0B,GACA1H,EAAAtE,GAAA3F,EAAAlN,MACA6N,EAAAsJ,EAAAtJ,KACA1M,EAAA+L,EAAA1G,KAAA2Q,EAAA3Q,KACA5K,EAAAsR,EAAAtR,IACAA,GAAAigB,OAAA,EAAA/P,EAAA3K,UAAA2K,IACAlQ,IAAAigB,OAAA/P,EAAA3K,SAEAwR,EAAA/W,GAAA,GAAAiS,GAAA3B,EAAAgB,EAAA0B,OAAAzN,EAAA0M,EAAAU,sBAGA3S,KAAA4iB,EACAtS,QACA4S,QAAA,GAAAxf,cAAA4M,GACAD,SACA0G,YAoBA,QAAAoM,GAAA1V,EAAA8I,EAAAqM,GACA,MAAAF,GAAAjV,EAAA8I,EAAAI,QAAAJ,EAAAoM,iBAAAC,GAqBA,QAAAQ,GAAA3V,EAAA8I,EAAA8M,GACA,GAAAV,GAAApM,EAAAoM,kBAAApM,EACAyL,EAAAW,EAAAf,WAAAyB,EAAArjB,KACA,IAAAgiB,EAAA,CACA,GAAAsB,GAAAtB,EAAAhH,KAEA,OADAvN,GAAAqT,gBAAArT,EAAAqV,eAAAQ,EAAAD,EAAAhT,OAAAgT,EAAArQ,QAAA,EAAAqQ,EAAA/S,MAAAiT,aACA,EAEA,SAkBA,QAAAC,GAAA/V,EAAA8I,EAAA8M,GACAD,EAAA3V,EAAA8I,EAAA8M,IACA5V,EAAAgD,WAAAhD,EAAAqV,eAAAO,EAAA/S,MAAA7C,EAAAgW,cAgCA,QAAAC,GAAAL,EAAAM,GACA,GAAA5M,GAAAsM,EAAAtM,QACA,QAAA/W,KAAA2jB,GAAA,CACA,GAAArT,GAAAyG,EAAA/W,EACA,IAAAsQ,EAAA,CACA,GAAAtP,GAAA2iB,EAAA3jB,EACAgB,GAAAuE,OACA+K,EAAAjF,IAAArK,GAEAsP,EAAA,GAAAtP,IAwHA,QAAA8V,GAAA8M,EAAAD,GAIA,OAFAE,GAAAD,EAAAhE,gBAAAgE,EACAE,EAAAje,UAAAN,OACAwe,EAAA,EAAuBA,EAAAD,IAAgBC,EAAA,CACvC,GAAAC,GAAAne,UAAAke,EACA,IAAApgB,MAAAqO,QAAAgS,GAEA,OADA1R,GAAA0R,EAAAze,OACAsJ,EAAA,EAAyBA,EAAAyD,IAAgBzD,EACzCiI,EAAA+M,EAAAG,EAAAnV,QAGA,QAAA7O,KAAAgkB,GAAA,CACA,GAAA9D,GAAA2D,EAAA7jB,EACAkgB,IACAA,EAAA8D,EAAAhkB,MAgBA,QAAAikB,GAAAxW,EAAAkJ,GAIA,OAHAuN,MAEAC,EAAA1W,EAAAqR,oBAAAnI,EAAAlJ,EAAA2W,mBACAvV,EAAA,EAAqBA,EAAAsV,IAAiBtV,EAAA,CACtC,GAAAqE,GAAAzF,EAAA4W,gBAAA1N,EAAA9H,EACA,KAAAqE,EACA,KAEA,IAAA8H,GAAAvN,EAAA6W,kBAAA3N,EAAAzD,EAAAlT,MACAub,EAAAgJ,GAAArR,EAAA9O,MACA8b,EAAA3E,EAAA2E,OAAAzS,EAAAuN,EAAAO,EACA2E,GAAA9I,SAAA4D,EACAkJ,EAAAhR,EAAAlT,MAAAkgB,EAGA,MAAAgE,GAwDA,QAAAM,GAAAZ,EAAAjP,GACA,OAAA3U,KAAA2U,GAAA,CACA,GAAAuL,GAAA0D,EAAA5jB,EACAkgB,IACAA,EAAAvL,EAAA3U,KA0CA,QAAA6W,IAAApJ,EAAA8I,EAAA5B,GACAA,EAAAiC,kBACAnJ,EAAAW,gBAAAuG,EAAAiC,oBAEA4N,EAAAjO,EAAA2N,eAAA3N,EAAA5B,EAAAvC,SACAuC,EAAAL,SACA7G,EAAA+C,WAAA/C,EAAA8G,qBAAAI,EAAAL,UAgCA,QAAAmQ,IAAAhX,EAAAkJ,GACA,GAAAiJ,GAAAF,EAAAjS,EAAAkJ,GACAuN,EAAAD,EAAAxW,EAAAkJ,GACAJ,GACAI,UACAiJ,iBACAsE,gBAQA,OALAhX,GAAA4C,SAAArC,KACA8I,EAAAoM,iBAAArB,EAAA7T,EAAAkJ,GACAJ,EAAAsK,sBAAAP,EAAA7S,EAAAkJ,IAGAJ,EAiCA,QAAAmO,IAAAjX,EAAAgS,EAAA/Q,EAAAuO,EAAAb,GACA,GAAA0B,GAAAd,EAAAtO,EAAAuO,EAAAb,GACAuI,GAAA,CAcA,IAbAlF,IAAA5D,IAAA,SAAApR,GAEA,GAAAA,EAAApF,QAAA,SACA,GAAAuf,GAAA1G,SAAAC,eAAA1T,EACAma,GAIAna,EAAAma,EAAAxG,MAHAN,EAAAZ,cAAA,uBAAAzS,GACAka,GAAA,GAKA,MAAAla,MAEAka,EACA,WAEA,IAAAhO,GAAA6I,EAAA/R,EAAAgS,EAAA3B,EACA,OAAAnH,GAGA8N,GAAAhX,EAAAkJ,GAFA,KAn+CA,GAAA1N,IAAAiE,EAAAjE,MACA2M,GAAA1I,EAAA0I,KAgDAqB,KAmNAA,IAjQA,OAiQqBhF,KAAAvO,aAAAkH,KAAA,EAAAsV,OAAA/I,EAAAkJ,YAAA/I,GACrBL,GAjQA,QAiQ0BhF,KAAAvO,aAAAkH,KAAA,EAAAsV,OAAA1I,GAC1BP,GAjQA,QAiQ0BhF,KAAAvO,aAAAkH,KAAA,GAAAsV,OAAAxI,GAC1BT,GAjQA,QAiQ0BhF,KAAAvO,aAAAkH,KAAA,GAAAsV,OAAAtI,GAC1BX,GAjQA,OAiQmBhF,KAAA5H,WAAAO,KAAA,EAAAsV,OAAApI,EAAAuI,YAAArI,GACnBf,GAjQA,QAiQwBhF,KAAA5H,WAAAO,KAAA,EAAAsV,OAAAhI,GACxBjB,GAjQA,QAiQwBhF,KAAA5H,WAAAO,KAAA,GAAAsV,OAAA9H,GACxBnB,GAjQA,QAiQwBhF,KAAA5H,WAAAO,KAAA,GAAAsV,OAAA5H,GACxBrB,GA7OA,OA6O4BhF,KAAA+C,YAAApK,KAAA,EAAAsV,OAAA1H,EAAA6H,YAAA3H,GAC5BzB,GA7OA,QA6OiChF,KAAA+C,YAAApK,KAAA,EAAAsV,OAAAtH,GACjC3B,GA7OA,QA6OiChF,KAAA+C,YAAApK,KAAA,GAAAsV,OAAApH,GACjC7B,GA7OA,QA6OiChF,KAAA+C,YAAApK,KAAA,GAAAsV,OAAAlH,GACjC/B,GArQA,QAqQoBhF,KAAA+C,YAAApK,KAAA,EAAAsV,OAAApI,EAAAuI,YAAArI,GACpBf,GArQA,QAqQyBhF,KAAA+C,YAAApK,KAAA,EAAAsV,OAAAhI,GACzBjB,GArQA,QAqQyBhF,KAAA+C,YAAApK,KAAA,GAAAsV,OAAA9H,GACzBnB,GArQA,QAqQyBhF,KAAA+C,YAAApK,KAAA,GAAAsV,OAAA5H,GACzBrB,GArQA,QAqQ0BhF,KAAAvO,aAAAkH,KAAA,GAAAsV,OAAAhH,GAC1BjC,GArQA,QAqQ0BhF,KAAAvO,aAAAkH,KAAA,GAAAsV,OAAA9G,GAC1BnC,GArQA,QAqQ0BhF,KAAAvO,aAAAkH,KAAA,GAAAsV,OAAA5G,GAC1BrC,GAjQA,QAiQ4BhF,KAAAvO,aAAAkH,KAAA,GAAAsV,OAAA1G,GAC5BvC,GAjQA,QAiQ4BhF,KAAAvO,aAAAkH,KAAA,GAAAsV,OAAAtG,GAC5B3C,GAjQA,QAiQ4BhF,KAAAvO,aAAAkH,KAAA,GAAAsV,OAAAxG,GAC5BzC,GAjQA,QAiQ4BhF,KAAAvO,aAAAkH,KAAA,GAAAsV,OAAAlG,GAC5B/C,GAjQA,QAiQ4BhF,KAAAvO,aAAAkH,KAAA,GAAAsV,OAAApG,GAC5B7C,GAjQA,QAiQ4BhF,KAAAvO,aAAAkH,KAAA,GAAAsV,OAAAhG,GAC5BjD,GA3QA,QA2Q0BhF,KAAA,KAAArH,KAAA,EAAAsV,OAAA9F,EAAAiG,YAAAvF,EAAA5D,UAjP1B,MAkPAD,GA3QA,QA2Q4BhF,KAAA,KAAArH,KAAA,EAAAsV,OAAA9F,EAAAiG,YAAAvF,EAAA5D,UAjP5B,OAkPAD,GA3QA,QA2Q0BhF,KAAA,KAAArH,KAAA,EAAAsV,OAAA9F,EAAAiG,YAAAvF,EAAA5D,UAjP1B,OAkPAD,GA3QA,QA2QiChF,KAAA,KAAArH,KAAA,EAAAsV,OAAA9F,EAAAiG,YAAAvF,EAAA5D,UApPjC,MAqPAD,GArQA,QAqQgChF,KAAA,KAAArH,KAAA,EAAAsV,OAAA9F,EAAAiG,YAAAvF,EAAA5D,UAlPhC,OAmPAD,GArQA,QAqQuChF,KAAA,KAAArH,KAAA,EAAAsV,OAAA9F,EAAAiG,YAAAvF,EAAA5D,UAnPvC,OAoPAD,GArQA,QAqQmChF,KAAA,KAAArH,KAAA,EAAAsV,OAAA9F,EAAAiG,YAAAvF,EAAA5D,UAtPnC,OAuPAD,GAjQA,QAiQ8BhF,KAAA,KAAArH,KAAA,EAAAsV,OAAA9F,EAAAiG,YAAAvF,EAAA5D,UAxP9B,MAyPAD,GAjQA,QAiQ8BhF,KAAA,KAAArH,KAAA,EAAAsV,OAAA9F,EAAAiG,YAAAvF,EAAA5D,UAvP9B,OAwPAD,GAjQA,QAiQgChF,KAAA,KAAArH,KAAA,EAAAsV,OAAA9F,EAAAiG,YAAAvF,EAAA5D,UAzPhC,OA0PAD,GAjQA,QAiQoChF,KAAA,KAAArH,KAAA,EAAAsV,OAAA9F,EAAAiG,YAAAvF,EAAA5D,UAxPpC,OAyPAD,GAjQA,QAiQuChF,KAAA,KAAArH,KAAA,EAAAsV,OAAA9F,EAAAiG,YAAAvF,EAAA5D,UA5PvC,MA6PAD,GAjQA,QAiQuChF,KAAA,KAAArH,KAAA,EAAAsV,OAAA9F,EAAAiG,YAAAvF,EAAA5D,UA3PvC,OA4PAD,GAjQA,QAiQyChF,KAAA,KAAArH,KAAA,EAAAsV,OAAA9F,EAAAiG,YAAAvF,EAAA5D,UA7PzC,OA8PAD,GAjQA,QAiQ6ChF,KAAA,KAAArH,KAAA,EAAAsV,OAAA9F,EAAAiG,YAAAvF,EAAA5D,UA5P7C,MAmSA,IAAAqN,MACAA,IAhVA,OAgVyB3Z,KAAA,EAAAsV,OAAAjF,GACzBsJ,GAhVA,QAgV8B3Z,KAAA,EAAAsV,OAAAjF,GAC9BsJ,GAhVA,QAgV8B3Z,KAAA,GAAAsV,OAAAjF,GAC9BsJ,GAhVA,QAgV8B3Z,KAAA,GAAAsV,OAAAjF,GAC9BsJ,GAhVA,OAgVuB3Z,KAAA,EAAAsV,OAAA9E,GACvBmJ,GAhVA,QAgV4B3Z,KAAA,EAAAsV,OAAA9E,GAC5BmJ,GAhVA,QAgV4B3Z,KAAA,GAAAsV,OAAA9E,GAC5BmJ,GAhVA,QAgV4B3Z,KAAA,GAAAsV,OAAA9E,GAC5BmJ,GA5TA,OA4TgC3Z,KAAA,EAAAsV,OAAA9E,GAChCmJ,GA5TA,QA4TqC3Z,KAAA,EAAAsV,OAAA9E,GACrCmJ,GA5TA,QA4TqC3Z,KAAA,GAAAsV,OAAA9E,GACrCmJ,GA5TA,QA4TqC3Z,KAAA,GAAAsV,OAAA9E,GACrCmJ,GApVA,QAoVwB3Z,KAAA,EAAAsV,OAAA9E,GACxBmJ,GApVA,QAoV6B3Z,KAAA,EAAAsV,OAAA9E,GAC7BmJ,GApVA,QAoV6B3Z,KAAA,GAAAsV,OAAA9E,GAC7BmJ,GApVA,QAoV6B3Z,KAAA,GAAAsV,OAAA9E,GAC7BmJ,GApVA,QAoV8B3Z,KAAA,EAAAsV,OAAA5E,EAAAxF,MAAA,GAC9ByO,GApVA,QAoV8B3Z,KAAA,EAAAsV,OAAA5E,EAAAxF,MAAA,GAC9ByO,GApVA,QAoV8B3Z,KAAA,GAAAsV,OAAA5E,EAAAxF,MAAA,EAG9B,IAAArI,QAAAnB,GAmBAkQ,GAAA,YA8GA6B,IAAA,mCAwcA2E,GAAA,YAyjBA,QACAiB,yBAEApG,gBACAyB,2BACAE,2BACAkF,qBACAD,gCACA/E,uBACA4B,oCACAoB,oCACAS,yBAEAjC,0BACAZ,8BACAM,4BAEA4D,gBACA3N,2BACAC,cACA0M,kBACAE,mBACAN,qBAEE3b,MAAAjI,EAAA4M,MAAA3M,EAAAD,QAAA6M,IAIF,SAAA5M,EAAAD,EAAAH,GAEA,GAAA+M,GAAAC,CAiCAD,IAAA/M,EAAA,GAAAA,EAAA,QA8SEiN,MA9SFD,EAAA,SAAAU,EAAAG,GACA,YAwFA,SAAA2X,GAAAC,GACA,MAAAC,GAAAD,GAYA,QAAAE,GAAAF,GACA,MAAAG,GAAAH,GA8CA,QAAAI,GAAAzX,EAAA0X,EAAAhW,EAAAE,GACA,GAAA3J,GAAA+H,EAAA2X,YACAC,EAAA5X,EAAA6X,mBACA7X,GAAA8X,gBAAA7f,EAAA2f,GACAlW,KAAA1B,EAAA+X,mBACAnW,KAAA5B,EAAAgY,oBACAN,KAAAO,CACA,IAAAC,GAAA,EACAC,GACAC,YAAAR,EACAF,eACAhW,QACAE,SAqCA,OAnCA8V,GAAAvV,QAAA,SAAAkW,GACA,GAAAC,GAAAD,EAAAC,WACAjB,EAAAgB,EAAAhB,OACAkB,EAAAnB,EAAAC,EAIA,IAHAkB,IACAA,EAAAC,EAAAN,MAEAI,EACA,GAAAf,EAAAF,GACAiB,EAAAtY,EAAAyY,qBACAzY,EAAA0Y,iBAAA1Y,EAAA2Y,aAAAL,GACAtY,EAAA4Y,oBAAA5Y,EAAA2Y,aAAAtB,EAAA3V,EAAAE,OACU,CACV,GAAAiX,GAAApZ,EAAAoI,YAAAwQ,EACAQ,GAAAnX,QACAmX,EAAAjX,aACA/C,KAAAga,EAAAC,OACAD,EAAAC,MAAA,EACAD,EAAAE,IAAAF,EAAAE,KAAAF,EAAAG,QAAAhZ,EAAAiZ,OACAJ,EAAAK,IAAAL,EAAAK,KAAAL,EAAAG,QAAAhZ,EAAAiZ,OACAJ,EAAAM,MAAAN,EAAAM,OAAAN,EAAAO,MAAApZ,EAAAqZ,cACAR,EAAAS,MAAAT,EAAAS,OAAAT,EAAAO,MAAApZ,EAAAqZ,eAEAf,EAAAhZ,EAAAia,cAAAvZ,EAAA6Y,GAGA,GAAAP,YAAAkB,mBACAxZ,EAAAyZ,wBAAAxhB,EAAAsgB,EAAAvY,EAAA2Y,aAAAL,OACQ,MAAAA,YAAAtL,eAGR,8BAFAhN,GAAA0Z,qBAAAzhB,EAAAsgB,EAAAF,EAAAsB,WAAA3Z,EAAA4Z,WAAAtB,EAAAD,EAAAwB,OAAA,GAIA1B,EAAAT,YAAA5c,KAAAwd,KAEAH,EA8CA,QAAA2B,GAAA9Z,EAAAmY,EAAAT,EAAAhW,EAAAE,GACAF,KAAA1B,EAAA+X,mBACAnW,KAAA5B,EAAAgY,oBACAG,EAAAzW,QACAyW,EAAAvW,SACA8V,KAAAO,EACAP,EAAAvV,QAAA,SAAAkW,EAAA/J,GACA,GAAAgK,GAAAH,EAAAT,YAAApJ,GACA+I,EAAAgB,EAAAhB,MACA,IAAAiB,YAAAkB,mBACAxZ,EAAA0Y,iBAAA1Y,EAAA2Y,aAAAL,GACAtY,EAAA4Y,oBAAA5Y,EAAA2Y,aAAAtB,EAAA3V,EAAAE,OACQ,MAAA0W,YAAAtL,eAGR,8BAFA1N,GAAAya,cAAA/Z,EAAAsY,EAAAD,EAAA3W,EAAAE,MA2BA,QAAAoY,GAAAha,EAAAmY,EAAAlgB,GACAA,KAAA+H,EAAA2X,YACAQ,GACAnY,EAAA8X,gBAAA7f,EAAAkgB,EAAAC,aACApY,EAAAia,SAAA,IAAA9B,EAAAzW,MAAAyW,EAAAvW,UAEA5B,EAAA8X,gBAAA7f,EAAA,MACA+H,EAAAia,SAAA,IAAAja,EAAA+X,mBAAA/X,EAAAgY,sBAnRA,GAgBAQ,GAAA,MAgDAP,IAA8BZ,OA1D9B,KA0D8B1gB,KA9D9B,KA8D8BoiB,IApC9B,KAoC8BK,KAzC9B,QAyCuG/B,OAjDvG,QAmDAC,IACAA,GApDA,OAIA,MAiDAA,EAvDA,MAKA,MAmDAA,EAvDA,OAIA,MAoDAA,EAjEA,MAYA,MAsDAA,EA3DA,OAKA,KA4DA,IAAAE,KA4MA,OA3MAA,GArEA,QAqEA,EACAA,EArEA,QAqEA,EACAA,EArEA,QAqEA,EACAA,EAlEA,QAkEA,EACAA,EAtEA,QAsEA,EACAA,EAtEA,OAsEA,EACAA,EAtEA,QAsEA,GAsMAwC,sBACAvC,wBACAqC,0BAEE9f,MAAAjI,EAAA4M,MAAA3M,EAAAD,QAAA6M,IAIF,SAAA5M,EAAAD,EAAAH,GAEA,GAAA+M,GAAAC,CAiCAD,IAAA/M,EAAA,GAAAA,EAAA,QA2iDEiN,MA3iDFD,EAAA,SAAAW,EAAAE,GACA,YAwPA,SAAAya,GAAAC,EAAAxjB,GACA,GAAAmc,GAAAsH,EAAAD,EACA,KAAArH,EACA,8BAEA,IAAAuH,GAAAvH,EAAAwH,mBAAA3jB,EACA,QAAAkI,KAAAwb,EACA,8BAEA,OAAAA,GASA,QAAAE,GAAAJ,GACA,GAAArH,GAAAsH,EAAAD,EACA,KAAArH,EACA,8BAEA,QACAuE,OAAAvE,EAAA0H,cACA7jB,KAAAT,MAAAqO,QAAAuO,EAAAnc,MAAAmc,EAAAnc,KAAA,GAAAmc,EAAAnc,MASA,QAAA8jB,GAAAlnB,GACA,WAAAA,IAAA,GASA,QAAAmnB,GAAA1a,EAAA0B,EAAAE,EAAAuY,GACA,IAAA1a,EAAA4C,SAAArC,GACA,MAAAya,GAAA/Y,IAAA+Y,EAAA7Y,EAEA,IAAAkR,GAAAsH,EAAAD,EACA,KAAArH,EACA,8BAEA,OAAAA,GAAA6H,iBAAA7H,EAAA8H,kBASA,QAAAC,GAAAV,GACA,GAAArH,GAAAsH,EAAAD,EACA,KAAArH,EACA,8BAEA,OAAAA,GAAA8H,kBASA,QAAAE,GAAAzD,GACA,GAAAvE,GAAAiI,EAAA1D,EACA,KAAAvE,EACA,wBAAAuE,CAEA,OAAAvE,GAAAkI,mBAQA,QAAAC,GAAAjb,EAAAxC,EAAA0d,GACA,MAAA5W,GAAA9G,GACA+B,EAAA8F,uBAAA7H,GAEA0d,GAAAlb,EAAA6F,cAGA,QAAAsV,GAAAnb,EAAA/H,EAAAyJ,EAAAE,EAAAyE,GACA,GAAAA,EAAA,KACA,6BAEA,IAAA3E,GAAAE,GASM,GAAAA,GAKA,IAAAF,IACNA,EAAA2E,EAAAzE,GACA,EACA,kCANA,KADAA,EAAAyE,EAAA3E,GACA,EACA,kCAZA,CACA,GAAAvE,GAAA/G,KAAAglB,KAAA/U,GAAApO,IAAA+H,EAAAqb,iBAAA,KACAle,GAAA,MACAuE,EAAAvE,EACAyE,EAAAzE,IAEAuE,EAAA2E,EACAzE,EAAA,GAaA,OACAF,QACAE,UAiBA,QAAA0Z,GAAAC,GACA1b,EAAA2b,aAAA,GAAA9e,aAAA,IAAA6e,EAAA,OAAAA,EAAA,OAAAA,EAAA,OAAAA,EAAA,KAGA,QAAA7b,GAAAC,GACAF,EAAAG,uBAAAD,EAAAE,GACAF,EAAA6b,cACAF,EAAA3b,EAAA6b,cA4IA,QAAAC,GAAAzb,EAAA6P,OACAhR,KAAAgR,EAAA6L,uBACAC,EAAAD,qBAAA1b,EAAA4b,aAAA5b,EAAA6b,oCACA7b,EAAA8b,YAAA9b,EAAA6b,mCAAAhM,EAAA6L,2BAEA7c,KAAAgR,EAAAkM,mBACAJ,EAAAI,iBAAA/b,EAAA4b,aAAA5b,EAAAgc,gCACAhc,EAAA8b,YAAA9b,EAAAgc,+BAAAnM,EAAAkM,uBAEAld,KAAAgR,EAAAoM,QACAN,EAAAM,MAAAjc,EAAA4b,aAAA5b,EAAAkc,qBACAlc,EAAA8b,YAAA9b,EAAAkc,oBAAArM,EAAAoM,QASA,QAAAE,GAAAnc,EAAA6P,OACAhR,KAAAgR,EAAA6L,sBACA1b,EAAA8b,YAAA9b,EAAA6b,mCAAAF,EAAAD,0BAEA7c,KAAAgR,EAAAkM,kBACA/b,EAAA8b,YAAA9b,EAAAgc,+BAAAL,EAAAI,sBAEAld,KAAAgR,EAAAoM,OACAjc,EAAA8b,YAAA9b,EAAAkc,oBAAAP,EAAAM,OAeA,QAAAG,GAAApc,EAAA/H,EAAAokB,EAAAxM,GACAA,EAAAmJ,SACAqD,EAAAlqB,KAAA6N,EAAA/H,EAAA+H,EAAAsc,mBAAAzM,EAAAmJ,QACAqD,EAAAlqB,KAAA6N,EAAA/H,EAAA+H,EAAAuc,mBAAA1M,EAAAmJ,SAEAnJ,EAAAkJ,KACAsD,EAAAlqB,KAAA6N,EAAA/H,EAAA+H,EAAAsc,mBAAAzM,EAAAkJ,KAEAlJ,EAAAqJ,KACAmD,EAAAlqB,KAAA6N,EAAA/H,EAAA+H,EAAAuc,mBAAA1M,EAAAqJ,KAEArJ,EAAAuJ,OACAiD,EAAAlqB,KAAA6N,EAAA/H,EAAA+H,EAAAwc,eAAA3M,EAAAuJ,MACAiD,EAAAlqB,KAAA6N,EAAA/H,EAAA+H,EAAAyc,eAAA5M,EAAAuJ,OACAnhB,IAAA+H,EAAA0c,YAAAzkB,YAAA0kB,KACAN,EAAAlqB,KAAA6N,EAAA/H,EAAA+H,EAAA4c,eAAA/M,EAAAuJ,OAGAvJ,EAAAgN,OACAR,EAAAlqB,KAAA6N,EAAA/H,EAAA+H,EAAA4c,eAAA/M,EAAAgN,OAEAhN,EAAAsJ,OACAkD,EAAAlqB,KAAA6N,EAAA/H,EAAA+H,EAAAwc,eAAA3M,EAAAsJ,OAEAtJ,EAAAyJ,OACA+C,EAAAlqB,KAAA6N,EAAA/H,EAAA+H,EAAAyc,eAAA5M,EAAAyJ,OAEAzJ,EAAAiN,QACAT,EAAAlqB,KAAA6N,EAAA/H,EAAA+H,EAAA+c,gBAAAlN,EAAAiN,QAEAjN,EAAAmN,QACAX,EAAAlqB,KAAA6N,EAAA/H,EAAA+H,EAAAid,gBAAApN,EAAAmN,QAEAnN,EAAAqN,WACAb,EAAAlqB,KAAA6N,EAAA/H,EAAA+H,EAAAmd,mBAAAtN,EAAAqN,WAEArN,EAAAuN,UACAf,EAAAlqB,KAAA6N,EAAA/H,EAAA+H,EAAAqd,kBAAAxN,EAAAuN,UAYA,QAAAE,GAAAtd,EAAAud,EAAA1N,GACA,GAAA5X,GAAA4X,EAAA5X,QAAA+H,EAAA4Z,UACA5Z,GAAAmN,YAAAlV,EAAAslB,GACAnB,EAAApc,EAAA/H,EAAA+H,EAAAwd,cAAA3N,GAUA,QAAA4N,GAAAzd,EAAA+M,EAAA8C,GACAuM,EAAApc,EAAA+M,EAAA/M,EAAA0d,kBAAA7N,GAiBA,QAAA8N,GAAA3d,EAAA6P,GACA,GAAA9C,GAAA/M,EAAA2d,eAEA,OADAF,GAAAzd,EAAA+M,EAAA8C,GACA9C,EAoCA,QAAA6Q,GAAA5d,EAAA6d,GACA,GAAAC,KAIA,OAHAprB,QAAAuP,KAAA4b,GAAA1b,QAAA,SAAA5P,GACAurB,EAAAvrB,GAAAorB,EAAA3d,EAAA6d,EAAAtrB,MAEAurB,EASA,QAAAC,GAAAxC,GAEA,MADAA,MAAA1b,EAAA2b,aACAlX,EAAAiX,GACAA,EAEA,GAAA7e,aAAA,IAAA6e,EAAA,OAAAA,EAAA,OAAAA,EAAA,OAAAA,EAAA,KAiBA,QAAAyC,GAAAhe,EAAAud,EAAA1N,EAAAnO,EAAAE,EAAAuY,EAAAxjB,GACAkZ,KAAAhQ,EAAAgZ,eACAsB,KAAAna,EAAAie,KACAtnB,KAAAqJ,EAAA6F,aACA,IAAA5N,GAAA4X,EAAA5X,QAAA+H,EAAA4Z,UAIA,IAHAlY,KAAAmO,EAAAnO,MACAE,KAAAiO,EAAAjO,OACA5B,EAAAmN,YAAAlV,EAAAslB,GACA7C,EAAA1a,EAAA0B,EAAAE,EAAAuY,EAAAxjB,GACAqJ,EAAAke,eAAAjmB,OACM,CACN,GAAAkmB,GAAAtD,EAAAV,EAAAxjB,GAAAqJ,EAAAiZ,OAAAjZ,EAAAoe,OACApe,GAAAwd,cAAAvlB,EAAA+H,EAAAsc,mBAAA6B,GACAne,EAAAwd,cAAAvlB,EAAA+H,EAAAuc,mBAAA4B,GACAne,EAAAwd,cAAAvlB,EAAA+H,EAAAwc,eAAAxc,EAAAqZ,eACArZ,EAAAwd,cAAAvlB,EAAA+H,EAAAyc,eAAAzc,EAAAqZ,gBAWA,QAAAgF,GAAAre,EAAA6P,GAEA,MADAA,SACAA,EAAAyO,gBAAAte,EAAAue,4BAAAve,EAAAwe,4BAAAxe,EAAAye,4BAAAze,EAAA0e,4BAAA1e,EAAA2e,4BAAA3e,EAAA4e,6BAsBA,QAAAC,GAAA7e,EAAA6P,GACA,GAAAiP,GAAAT,EAAAre,EAAA6P,GAEAkP,EAAAD,EAAA1Q,IAAA,SAAA4Q,EAAA1Q,GACA,OAAe0Q,OAAA1Q,QAKf,OAHAyQ,GAAAE,KAAA,SAAAloB,EAAAE,GACA,MAAAF,GAAAioB,KAAA/nB,EAAA+nB,OAEAD,EAgBA,QAAAG,GAAAlf,EAAAud,EAAA4B,EAAAtP,GACAA,KAAAhQ,EAAAgZ,cACA,IAAA5gB,GAAA4X,EAAA5X,QAAA+H,EAAA4Z,WACAlY,EAAAyd,EAAAzd,MACAE,EAAAud,EAAAvd,OACAuY,EAAAtK,EAAAsK,gBAAAtK,EAAAwH,QAAArX,EAAAie,KACAmB,EAAA7E,EAAAJ,GACA9C,EAAAxH,EAAAwH,QAAA+H,EAAA/H,OACA1gB,EAAAkZ,EAAAlZ,MAAAyoB,EAAAzoB,IAGA,IAFA8kB,EAAAzb,EAAA6P,GACA7P,EAAAmN,YAAAlV,EAAAslB,GACAtlB,IAAA+H,EAAAqb,iBAAA,CAEA,GAEAle,GACAkiB,EAHAC,EAAAH,EAAAzd,MACA6d,EAAAJ,EAAAvd,MAGA,IAAA0d,EAAA,IAAAC,EAEApiB,EAAAoiB,EACAF,GAAA,6BACQ,IAAAE,EAAA,IAAAD,EAERniB,EAAAmiB,EACAD,GAAA,6BACQ,IAAAC,EAAA,GAAAC,EAAA,EAERpiB,EAAAmiB,EAAA,EACAD,GAAA,6BACQ,IAAAC,EAAA,GAAAC,EAAA,EAKR,iDAAAJ,EAAA3hB,IAAA2hB,EAAA3hB,IAAA2hB,EAAAK,SAHAriB,GAAAmiB,EAAA,EACAD,GAAA,yBAIAI,EAAAze,OAAAU,MAAAvE,EACAsiB,EAAAze,OAAAY,OAAAzE,EACAuE,EAAAvE,EACAyE,EAAAzE,EACA0hB,EAAA7e,EAAA6P,GAAA1N,QAAA,SAAA7H,GACA,GAAAolB,GAAAL,EAAA,EAAA/kB,EAAAgU,IAAA,GAAAnR,EACAwiB,EAAAN,EAAA,EAAA/kB,EAAAgU,IAAA,GAAAnR,CACAsiB,GAAAG,UAAAT,EAAAO,EAAAC,EAAAxiB,IAAA,IAAAA,KACA6C,EAAA6f,WAAAvlB,EAAA0kB,KAAA,EAAA7E,EAAA9C,EAAA1gB,EAAA8oB,EAAAze,UAGAye,EAAAze,OAAAU,MAAA,EACA+d,EAAAze,OAAAY,OAAA,MACM,IAAA3J,IAAA+H,EAAA0c,WAAA,CACN,GAAAoD,GAAA1pB,KAAA2iB,IAAAoG,EAAAzd,MAAAyd,EAAAvd,QACAme,EAAA3pB,KAAAe,IAAAgoB,EAAAzd,MAAAyd,EAAAvd,QACAoe,EAAAD,EAAAD,CACA,IAAAE,EAAA,KACA,+CAEA,IAAAC,GAAAd,EAAAzd,QAAAqe,EAAA,IACAG,EAAAf,EAAAvd,SAAAme,EAAA,GACA/f,GAAAmgB,WAAAloB,EAAA,EAAAkiB,EAAA2F,MAAA,EAAAzI,EAAA1gB,EAAA,MAEA8oB,EAAAze,OAAAU,MAAAoe,EACAL,EAAAze,OAAAY,OAAAke,CACA,QAAAxtB,GAAA,EAAsBA,EAAA0tB,IAAW1tB,EAAA,CAGjC,GAAA8tB,GAAA9tB,EAAAwtB,EAAAG,EACAI,EAAA/tB,EAAAwtB,EAAAI,EACAI,EAAAR,EACAS,EAAAT,EAGAU,EAAAV,EACAW,EAAAX,CACAL,GAAAG,UAAAT,EAAAiB,EAAAC,EAAAC,EAAAC,EAJA,EACA,EAGAC,EAAAC,GACAzgB,EAAA0gB,cAAAzoB,EAAA,MAAA3F,EAAAwtB,IAAA,EAAAzI,EAAA1gB,EAAA8oB,EAAAze,QAEAye,EAAAze,OAAAU,MAAA,EACA+d,EAAAze,OAAAY,OAAA,MAIA5B,GAAA6f,WAAA5nB,EAAA,EAAAkiB,EAAA9C,EAAA1gB,EAAAwoB,EAEAhD,GAAAnc,EAAA6P,IACA,IAAAA,EAAAiJ,MACAkF,EAAAhe,EAAAud,EAAA1N,EAAAnO,EAAAE,EAAAuY,EAAAxjB,GAEA2mB,EAAAtd,EAAAud,EAAA1N,GAGA,QAAA8Q,MASA,QAAAC,GAAAC,EAAAC,EAAAC,GAQA,QAAAC,KACAC,EAAAC,oBAAA,QAAAC,GACAF,EAAAC,oBAAA,OAAAE,GACAH,EAAA,KAGA,QAAAE,KACA,GAAAE,GAAA,wBAAAR,CACAphB,GAAAjE,MAAA6lB,GACAN,EAAAM,EAAAJ,GACAD,IAGA,QAAAI,KACAL,EAAA,KAAAE,GACAD,IAtBAD,KAAAJ,CACA,IAAAM,GAAA,GAAAK,MA2BA,OA1BAR,OAAAjiB,KAAAiiB,IAAAjhB,EAAAihB,gBACAjiB,KAAAiiB,IACAG,EAAAH,eAqBAG,EAAAM,iBAAA,QAAAJ,GACAF,EAAAM,iBAAA,OAAAH,GACAH,EAAAzjB,IAAAqjB,EACAI,EAYA,QAAAO,GAAAxhB,EAAAud,EAAA1N,GACAA,KAAAhQ,EAAAgZ,cACA,IAAA5gB,GAAA4X,EAAA5X,QAAA+H,EAAA4Z,UAEA,IADA5Z,EAAAmN,YAAAlV,EAAAslB,IACA,IAAA1N,EAAA0L,MAAA,CAKA,GAAAA,GAAAwC,EAAAlO,EAAA0L,MACA,IAAAtjB,IAAA+H,EAAAqb,iBACA,OAAAja,GAAA,EAAuBA,EAAA,IAAQA,EAC/BpB,EAAA6f,WAAA7f,EAAAue,4BAAAnd,EAAA,EAAApB,EAAAie,KAAA,MAAAje,EAAAie,KAAAje,EAAA6F,cAAA0V,OAEMtjB,KAAA+H,EAAA0c,YAAAzkB,IAAA+H,EAAAyhB,iBACNzhB,EAAAmgB,WAAAloB,EAAA,EAAA+H,EAAAie,KAAA,QAAAje,EAAAie,KAAAje,EAAA6F,cAAA0V,GAEAvb,EAAA6f,WAAA5nB,EAAA,EAAA+H,EAAAie,KAAA,MAAAje,EAAAie,KAAAje,EAAA6F,cAAA0V,IAiEA,QAAAmG,GAAA1hB,EAAAud,EAAA1N,EAAAkR,GAcA,MAbAA,MAAAJ,EACA9Q,KAAAhQ,EAAAgZ,eACA2I,EAAAxhB,EAAAud,EAAA1N,GAEAA,EAAApQ,EAAAoI,YAAAgI,GACA+Q,EAAA/Q,EAAArS,IAAAqS,EAAAiR,YAAA,SAAAa,EAAAV,GACAU,EACAZ,EAAAY,EAAApE,EAAA0D,IAEA/B,EAAAlf,EAAAud,EAAA0D,EAAApR,GACAkR,EAAA,KAAAxD,EAAA0D,MAgBA,QAAAW,GAAA5hB,EAAAud,EAAA1N,EAAAkR,GAsBA,QAAAc,GAAAC,GACA,gBAAAH,EAAAV,KACAc,EACAJ,EACAK,EAAAlnB,KAAA6mB,GAEAV,EAAAvf,QAAAuf,EAAArf,OACAogB,EAAAlnB,KAAA,qCAAAmmB,EAAAzjB,MAEAie,EAAAzb,EAAA6P,GACA7P,EAAAmN,YAAAlV,EAAAslB,GAIA,IAAAwE,EAEA1D,EAAAre,GAAAmC,QAAA,SAAA8f,GAEAjiB,EAAA6f,WAAAoC,EAAA,EAAA9H,EAAA9C,EAAA1gB,EAAAsqB,KAGAjhB,EAAA6f,WAAAiC,EAAA,EAAA3H,EAAA9C,EAAA1gB,EAAAsqB,GAGA9E,EAAAnc,EAAA6P,GACA7P,EAAAke,eAAAjmB,IAIA,IAAA8pB,GACAhB,EAAAiB,EAAAlqB,OAAAkqB,MAAAnjB,GAAAqjB,EAAA3E,IAnDAwD,KAAAJ,CACA,IAAAwB,GAAAtS,EAAArS,GACA,QAAA2kB,EAAArqB,OACA,yCAEA,IAAAqiB,GAAAtK,EAAAsK,gBAAAtK,EAAAwH,QAAArX,EAAAie,KACAmB,EAAA7E,EAAAJ,GACA9C,EAAAxH,EAAAwH,QAAA+H,EAAA/H,OACA1gB,EAAAkZ,EAAAlZ,MAAAqJ,EAAA6F,cACA5N,EAAA4X,EAAA5X,QAAA+H,EAAA4Z,UACA,IAAA3hB,IAAA+H,EAAAqb,iBACA,sCAEAmG,GAAAxhB,EAAAud,EAAA1N,GAEAA,EAAApQ,EAAAoI,YAAAgI,EACA,IAEAqS,GAFAH,EAAA,EACAC,KAEAlD,EAAAT,EAAAre,EAAA6P,EAqCAqS,GAAAC,EAAA/T,IAAA,SAAAyS,EAAAvS,GACA,MAAAsS,GAAAC,EAAAhR,EAAAiR,YAAAe,EAAA/C,EAAAxQ,OAuBA,QAAA8T,GAAApiB,EAAAud,EAAA1N,EAAAkR,GAsBA,QAAAc,GAAA9kB,GACA,gBAAA4kB,EAAAV,GAEA,KADAc,EACAJ,EACAK,EAAAlnB,KAAA6mB,OACU,CAIV,GAHAlG,EAAAzb,EAAA6P,GACA7P,EAAAmN,YAAAlV,EAAAslB,GAEA8E,EAAA,CACAA,GAAA,EACA3gB,EAAAmO,EAAAnO,OAAAuf,EAAAvf,MACAE,EAAAiO,EAAAjO,QAAAqf,EAAArf,OACA5B,EAAAmgB,WAAAloB,EAAA,EAAAkiB,EAAAzY,EAAAE,EAAAoe,EAAA,EAAA3I,EAAA1gB,EAAA,KAGA,QAAArD,GAAA,EAA4BA,EAAA0sB,IAAW1sB,EACvC0M,EAAA0gB,cAAAzoB,EAAA,MAAA3E,EAAAoO,EAAAE,EAAA,EAAAyV,EAAA1gB,EAAAsqB,OAEY,CACZ,GAAAzjB,GAAAyjB,CACAA,GAAAvf,WAAAuf,EAAArf,aAEApE,EAAAiiB,EAAAze,OACAye,EAAAze,OAAAU,QACA+d,EAAAze,OAAAY,SACA6d,EAAAG,UAAAqB,EAAA,IAAAvf,EAAAE,IAGA5B,EAAA0gB,cAAAzoB,EAAA,MAAA8E,EAAA2E,EAAAE,EAAA,EAAAyV,EAAA1gB,EAAA6G,GAGAA,IAAAiiB,EAAAze,SACAye,EAAAze,OAAAU,MAAA,EACA+d,EAAAze,OAAAY,OAAA,GAIAua,EAAAnc,EAAA6P,GACA7P,EAAAke,eAAAjmB,GAGA,IAAA8pB,GACAhB,EAAAiB,EAAAlqB,OAAAkqB,MAAAnjB,GAAAqjB,EAAA3E,IAhEAwD,KAAAJ,CACA,IAAAwB,GAAAtS,EAAArS,IACA2c,EAAAtK,EAAAsK,gBAAAtK,EAAAwH,QAAArX,EAAAie,KACAmB,EAAA7E,EAAAJ,GACA9C,EAAAxH,EAAAwH,QAAA+H,EAAA/H,OACA1gB,EAAAkZ,EAAAlZ,MAAAqJ,EAAA6F,cACA5N,EAAA4X,EAAA5X,QAAA+H,EAAAyhB,gBACA,IAAAxpB,IAAA+H,EAAA0c,YAAAzkB,IAAA+H,EAAAyhB,iBACA,oDAEAD,GAAAxhB,EAAAud,EAAA1N,GAEAA,EAAApQ,EAAAoI,YAAAgI,EACA,IAEAqS,GAFAH,EAAAI,EAAArqB,OACAkqB,KAEAtgB,EAAAmO,EAAAnO,MACAE,EAAAiO,EAAAjO,OACAoe,EAAAmC,EAAArqB,OACAuqB,GAAA,CAkDAH,GAAAC,EAAA/T,IAAA,SAAAyS,EAAAvS,GACA,MAAAsS,GAAAC,EAAAhR,EAAAiR,YAAAe,EAAAvT,MAcA,QAAAgU,GAAAtiB,EAAAud,EAAA/f,EAAAqS,GACAA,KAAAhQ,EAAAgZ,cACA,IAAA5gB,GAAA4X,EAAA5X,QAAA+H,EAAA4Z,UACA5Z,GAAAmN,YAAAlV,EAAAslB,EACA,IAAA7b,GAAAmO,EAAAnO,MACAE,EAAAiO,EAAAjO,OACAoe,EAAAnQ,EAAAmQ,MACA7F,EAAAtK,EAAAsK,gBAAAtK,EAAAwH,QAAArX,EAAAie,KACAmB,EAAA7E,EAAAJ,GACA9C,EAAAxH,EAAAwH,QAAA+H,EAAA/H,OACA1gB,EAAAkZ,EAAAlZ,MAAAskB,EAAAjb,EAAAxC,EAAA4hB,EAAAzoB,KACA,IAAA2N,EAAA9G,GAIAA,YAAA6J,qBACA7J,EAAA,GAAAd,YAAAc,EAAAoF,aALA,CACA,GAAA4B,GAAAjF,EAAAiI,2BAAA7Q,EACA6G,GAAA,GAAAgH,GAAAhH,GAMA,GAAA6c,GAAAH,EAAAC,EAAAxjB,GACA0P,EAAA7I,EAAAsY,WAAAuE,CACA,IAAAhU,EAAA,EACA,sCAAAkc,EAAAviB,EAAAqX,EAEA,IAAAmL,EACA,IAAAvqB,IAAA+H,EAAA0c,WACA,GAAAhb,GAAAE,GAAAoe,GAQQte,GAAAE,GAAAoe,GAIApe,GAAAF,GAAAse,GAKRwC,EAAArH,EAAAnb,EAAA/H,EAAAyJ,EAAAE,EAAAyE,EAAA2Z,GACAte,EAAA8gB,EAAA9gB,MACAE,EAAA4gB,EAAA5gB,SANA4gB,EAAArH,EAAAnb,EAAA/H,EAAAyJ,EAAAse,EAAA3Z,EAAAzE,GACAF,EAAA8gB,EAAA9gB,MACAse,EAAAwC,EAAA5gB,SANA4gB,EAAArH,EAAAnb,EAAA/H,EAAA2J,EAAAoe,EAAA3Z,EAAA3E,GACAE,EAAA4gB,EAAA9gB,MACAse,EAAAwC,EAAA5gB,YAXA,CACA,GAAAzE,GAAA/G,KAAAqsB,KAAApc,EACA,IAAAlJ,EAAA,KACA,uDAAAkJ,CAEA3E,GAAAvE,EACAyE,EAAAzE,EACA6iB,EAAA7iB,MAeAqlB,GAAArH,EAAAnb,EAAA/H,EAAAyJ,EAAAE,EAAAyE,GACA3E,EAAA8gB,EAAA9gB,MACAE,EAAA4gB,EAAA5gB,MAqBA,OAnBA5B,GAAA8b,YAAA9b,EAAA0iB,iBAAA7S,EAAA8S,iBAAA,GACAlH,EAAAzb,EAAA6P,GACA5X,IAAA+H,EAAAqb,iBACA,WACA,GAAAuH,GAAAvI,EAAA7c,EAAA0H,kBACA2d,EAAAxc,EAAA,EAAAuc,CAEA/D,GAAA7e,EAAA6P,GAAA1N,QAAA,SAAA7H,GACA,GAAAiL,GAAAsd,EAAAvoB,EAAAgU,IACAzK,EAAArG,EAAAJ,SAAAmI,IAAAsd,EACA7iB,GAAA6f,WAAAvlB,EAAA0kB,KAAA,EAAA7E,EAAAzY,EAAAE,EAAA,EAAAyV,EAAA1gB,EAAAkN,QAGM5L,IAAA+H,EAAA0c,WACN1c,EAAAmgB,WAAAloB,EAAA,EAAAkiB,EAAAzY,EAAAE,EAAAoe,EAAA,EAAA3I,EAAA1gB,EAAA6G,GAEAwC,EAAA6f,WAAA5nB,EAAA,EAAAkiB,EAAAzY,EAAAE,EAAA,EAAAyV,EAAA1gB,EAAA6G,GAEA2e,EAAAnc,EAAA6P,IAEAnO,QACAE,SACAoe,QACArpB,QAYA,QAAAmsB,GAAA9iB,EAAAud,EAAA1N,GACA,GAAA5X,GAAA4X,EAAA5X,QAAA+H,EAAA4Z,UACA5Z,GAAAmN,YAAAlV,EAAAslB,EACA,IAAApD,GAAAtK,EAAAsK,gBAAAtK,EAAAwH,QAAArX,EAAAie,KACAmB,EAAA7E,EAAAJ,GACA9C,EAAAxH,EAAAwH,QAAA+H,EAAA/H,OACA1gB,EAAAkZ,EAAAlZ,MAAAyoB,EAAAzoB,IAEA,IADA8kB,EAAAzb,EAAA6P,GACA5X,IAAA+H,EAAAqb,iBACA,OAAAja,GAAA,EAAuBA,EAAA,IAAQA,EAC/BpB,EAAA6f,WAAA7f,EAAAue,4BAAAnd,EAAA,EAAA+Y,EAAAtK,EAAAnO,MAAAmO,EAAAjO,OAAA,EAAAyV,EAAA1gB,EAAA,UAEMsB,KAAA+H,EAAA0c,WACN1c,EAAAmgB,WAAAloB,EAAA,EAAAkiB,EAAAtK,EAAAnO,MAAAmO,EAAAjO,OAAAiO,EAAAmQ,MAAA,EAAA3I,EAAA1gB,EAAA,MAEAqJ,EAAA6f,WAAA5nB,EAAA,EAAAkiB,EAAAtK,EAAAnO,MAAAmO,EAAAjO,OAAA,EAAAyV,EAAA1gB,EAAA,KAEAwlB,GAAAnc,EAAA6P,GAWA,QAAA0J,GAAAvZ,EAAA6P,EAAAkR,GACAA,KAAAJ,EACA9Q,KAAAhQ,EAAAgZ,cACA,IAAA0E,GAAAvd,EAAAuZ,gBACAthB,EAAA4X,EAAA5X,QAAA+H,EAAA4Z,WACAlY,EAAAmO,EAAAnO,OAAA,EACAE,EAAAiO,EAAAjO,QAAA,EACAuY,EAAAtK,EAAAsK,gBAAAna,EAAAie,KACAmB,EAAA7E,EAAAJ,GACAxjB,EAAAkZ,EAAAlZ,MAAAyoB,EAAAzoB,IACAqJ,GAAAmN,YAAAlV,EAAAslB,GACAtlB,IAAA+H,EAAAqb,mBAEArb,EAAAwd,cAAAvlB,EAAA+H,EAAAwc,eAAAxc,EAAAqZ,eACArZ,EAAAwd,cAAAvlB,EAAA+H,EAAAyc,eAAAzc,EAAAqZ,eAEA,IAAA7b,GAAAqS,EAAArS,GACA,IAAAA,EAIA,GAHA,kBAAAA,KACAA,IAAAwC,EAAA6P,IAEA,gBAAArS,GACAkkB,EAAA1hB,EAAAud,EAAA1N,EAAAkR,OACQ,IAAAzc,EAAA9G,IAAAtH,MAAAqO,QAAA/G,KAAA,gBAAAA,GAAA,IAAAtH,MAAAqO,QAAA/G,EAAA,KAAA8G,EAAA9G,EAAA,MACR,GAAAglB,GAAAF,EAAAtiB,EAAAud,EAAA/f,EAAAqS,EACAnO,GAAA8gB,EAAA9gB,MACAE,EAAA4gB,EAAA5gB,OACAjL,EAAA6rB,EAAA7rB,SACQ,IAAAT,MAAAqO,QAAA/G,IAAA,gBAAAA,GAAA,GACRvF,IAAA+H,EAAAqb,iBACAuG,EAAA5hB,EAAAud,EAAA1N,EAAAkR,GAEAqB,EAAApiB,EAAAud,EAAA1N,EAAAkR,OAEQ,MAAAvjB,YAAAulB,cAKR,2BAJA7D,GAAAlf,EAAAud,EAAA/f,EAAAqS,GACAnO,EAAAlE,EAAAkE,MACAE,EAAApE,EAAAoE,WAKAkhB,GAAA9iB,EAAAud,EAAA1N,EAMA,QAJA,IAAAA,EAAAiJ,MACAkF,EAAAhe,EAAAud,EAAA1N,EAAAnO,EAAAE,EAAAuY,EAAAxjB,GAEA2mB,EAAAtd,EAAAud,EAAA1N,GACA0N,EAmBA,QAAAxD,GAAA/Z,EAAAud,EAAA1N,EAAAnO,EAAAE,GACAF,KAAAmO,EAAAnO,MACAE,KAAAiO,EAAAjO,MACA,IAAA3J,GAAA4X,EAAA5X,QAAA+H,EAAA4Z,UACA5Z,GAAAmN,YAAAlV,EAAAslB,EACA,IAGA5mB,GAHAwjB,EAAAtK,EAAAsK,gBAAAtK,EAAAwH,QAAArX,EAAAie,KACAmB,EAAA7E,EAAAJ,GACA9C,EAAAxH,EAAAwH,QAAA+H,EAAA/H,OAEA7Z,EAAAqS,EAAArS,GAQA,IAJA7G,EAHA6G,IAEM8G,EAAA9G,IAAAtH,MAAAqO,QAAA/G,IAAA,gBAAAA,GAAA,IACNqS,EAAAlZ,MAAAskB,EAAAjb,EAAAxC,EAAA4hB,EAAAzoB,MAFAkZ,EAAAlZ,MAAAyoB,EAAAzoB,KAMAsB,IAAA+H,EAAAqb,iBACA,OAAAja,GAAA,EAAuBA,EAAA,IAAQA,EAC/BpB,EAAA6f,WAAA7f,EAAAue,4BAAAnd,EAAA,EAAAiW,EAAA3V,EAAAE,EAAA,EAAAyV,EAAA1gB,EAAA,UAGAqJ,GAAA6f,WAAA5nB,EAAA,EAAAof,EAAA3V,EAAAE,EAAA,EAAAyV,EAAA1gB,EAAA,MAWA,QAAAqsB,GAAAxlB,GACA,sBAAAA,IAAAtH,MAAAqO,QAAA/G,IAAA,gBAAAA,GAAA,GA8EA,QAAAylB,GAAAjjB,EAAA6Y,EAAAkI,GAOA,QAAAmC,KACA,IAAAC,GACAC,WAAA,WACArC,EAAAiB,EAAAlqB,OAAAkqB,MAAAnjB,GAAAS,EAAA+jB,IACU,GAVVtC,KAAAJ,CACA,IAAAwC,GAAA,EACAnB,KACA1iB,KACA+jB,IAiCA,OAvBA3wB,QAAAuP,KAAA4W,GAAA1W,QAAA,SAAA5P,GACA,GACA+wB,GADAzT,EAAAgJ,EAAAtmB,EAEAywB,GAAAnT,EAAArS,OACA8lB,EAAA,SAAA3B,EAAApE,EAAA0D,GACAoC,EAAA9wB,GAAA0uB,IACAkC,EACAxB,GACAK,EAAAlnB,KAAA6mB,GAEAuB,OAEAC,GAEA7jB,EAAA/M,GAAAgnB,EAAAvZ,EAAA6P,EAAAyT,KAOAJ,IAEA5jB,EA9/CA,GACAO,IACA2b,aAAA,GAAA9e,aAAA,kBACAmc,kBACAiI,gBAAAjiB,IAEAyF,EAAA/E,EAAA+E,cAGAmb,EAAAhP,SAAA8S,cAAA,UAAAliB,WAAA,MAIAmiB,EAAA,KA+FAC,EAAA,MAOA1I,KAIAzgB,EAAAygB,CACAzgB,GA5GA,OA4GiB0gB,mBAAA,GACjB1gB,EA1GA,OA0GqB0gB,mBAAA,GACrB1gB,EA1GA,OA0G2B0gB,mBAAA,GAC3B1gB,EAAAkpB,IAAexI,mBAAA,GACf1gB,EA9GA,OA8GgB0gB,mBAAA,GAChB1gB,EAfA,OAee0gB,mBAAA,GACf1gB,EAfA,QAeuB0gB,mBAAA,GACvB1gB,EAAAmpB,IAAczI,mBAAA,GACd1gB,EAnBA,QAmBsB0gB,mBAAA,GACtB1gB,EAAAkpB,IAAexI,mBAAA,GACf1gB,EAlBA,QAkBuB0gB,mBAAA,GACvB1gB,EArHA,OAqHgB0gB,mBAAA,GAChB1gB,EAnBA,QAmBwB0gB,mBAAA,GACxB1gB,EApHA,OAoH2B0gB,mBAAA,GAC3B1gB,EApHA,QAoHyB0gB,mBAAA,EAGzB,IAAAZ,OAEA,WAEA,GAAAziB,GAAAyiB,CAEAziB,GAnIA,OAmImB6iB,cAnInB,KAmImBG,iBAAA,EAAAC,mBAAA,EAAAP,iBAAA,SAAA1jB,MApDnB,KASA,KACA,MALA,OAgDAgB,EAjIA,OAiIuB6iB,cAjIvB,KAiIuBG,iBAAA,EAAAC,mBAAA,EAAAP,iBAAA,SAAA1jB,MArDvB,KASA,KACA,MALA,OAiDAgB,EAjIA,OAiI6B6iB,cAjI7B,KAiI6BG,iBAAA,EAAAC,mBAAA,EAAAP,iBAAA,SAAA1jB,MAtD7B,KASA,KACA,MALA,OAkDAgB,EAAA6rB,IAAiBhJ,cAAAgJ,EAAA7I,iBAAA,EAAAC,mBAAA,EAAAP,iBAAA,YAAA1jB,MAvDjB,KASA,KACA,MALA,KAGA,QAgDAgB,EArIA,OAqIkB6iB,cArIlB,KAqIkBG,iBAAA,EAAAC,mBAAA,EAAAP,iBAAA,cAAA1jB,MAxDlB,KASA,KACA,MALA,KACA,MACA,QAoDAgB,EArHA,QAqHgB6iB,cAxChB,KAwCgBG,iBAAA,EAAAC,mBAAA,EAAAP,gBAAA,EAAA1jB,KA3DhB,MA4DAgB,EArHA,QAqHsB6iB,cAzCtB,KAyCsBG,iBAAA,EAAAC,mBAAA,EAAAP,gBAAA,EAAA1jB,KA7DtB,MA8DAgB,EArHA,QAqHkB6iB,cA1ClB,KA0CkBG,iBAAA,EAAAC,mBAAA,EAAAP,iBAAA,KAAA1jB,MAxDlB,KAIA,OAqDAgB,EArHA,QAqHkB6iB,cA3ClB,KA2CkBG,iBAAA,EAAAC,mBAAA,EAAAP,gBAAA,EAAA1jB,KAzDlB,MA0DAgB,EArHA,QAqHkB6iB,cA3ClB,MA2CkBG,iBAAA,EAAAC,mBAAA,EAAAP,gBAAA,EAAA1jB,KA/DlB,MAgEAgB,EArHA,QAqHiB6iB,cA5CjB,MA4CiBG,iBAAA,EAAAC,mBAAA,EAAAP,gBAAA,EAAA1jB,KAjEjB,MAkEAgB,EA3GA,QA2GmB6iB,cA7CnB,MA6CmBG,iBAAA,EAAAC,mBAAA,EAAAP,gBAAA,EAAA1jB,KA/DnB,MAgEAgB,EA3GA,QA2GkB6iB,cA9ClB,MA8CkBG,iBAAA,EAAAC,mBAAA,EAAAP,gBAAA,EAAA1jB,KAjElB,MAkEAgB,EA3GA,QA2GmB6iB,cA/CnB,MA+CmBG,iBAAA,EAAAC,mBAAA,EAAAP,gBAAA,EAAA1jB,KA/DnB,MAgEAgB,EA3GA,QA2GkB6iB,cAhDlB,MAgDkBG,iBAAA,EAAAC,mBAAA,EAAAP,gBAAA,EAAA1jB,KAjElB,MAkEAgB,EArHA,QAqHiB6iB,cAAAiJ,EAAA9I,iBAAA,EAAAC,mBAAA,EAAAP,gBAAA,EAAA1jB,KArEjB,MAsEAgB,EArHA,QAqHuB6iB,cAAAiJ,EAAA9I,iBAAA,EAAAC,mBAAA,EAAAP,gBAAA,EAAA1jB,KAvEvB,MAwEAgB,EArHA,QAqHmB6iB,cAAAiJ,EAAA9I,iBAAA,EAAAC,mBAAA,EAAAP,iBAAA,KAAA1jB,MAlEnB,KAIA,OA+DAgB,EArHA,QAqHmB6iB,cAAAiJ,EAAA9I,iBAAA,EAAAC,mBAAA,EAAAP,gBAAA,EAAA1jB,KAnEnB,MAoEAgB,EArHA,QAqHmB6iB,cAvDnB,MAuDmBG,iBAAA,EAAAC,mBAAA,EAAAP,gBAAA,EAAA1jB,KAzEnB,MA0EAgB,EArHA,QAqHkB6iB,cAxDlB,MAwDkBG,iBAAA,EAAAC,mBAAA,EAAAP,gBAAA,EAAA1jB,KA3ElB,MA4EAgB,EA/HA,QA+HoB6iB,cAzDpB,MAyDoBG,iBAAA,EAAAC,mBAAA,EAAAP,gBAAA,EAAA1jB,KAzEpB,MA0EAgB,EA/HA,QA+HmB6iB,cA1DnB,MA0DmBG,iBAAA,EAAAC,mBAAA,EAAAP,gBAAA,EAAA1jB,KA3EnB,MA4EAgB,EA/HA,QA+HoB6iB,cA3DpB,MA2DoBG,iBAAA,EAAAC,mBAAA,EAAAP,gBAAA,EAAA1jB,KAzEpB,MA0EAgB,EA/HA,QA+HmB6iB,cA5DnB,MA4DmBG,iBAAA,EAAAC,mBAAA,EAAAP,gBAAA,EAAA1jB,KA3EnB,MA4EAgB,EArHA,QAqHkB6iB,cAAAgJ,EAAA7I,iBAAA,EAAAC,mBAAA,EAAAP,gBAAA,EAAA1jB,KA/ElB,MAgFAgB,EArHA,QAqHmB6iB,cAAAgJ,EAAA7I,iBAAA,EAAAC,mBAAA,EAAAP,gBAAA,EAAA1jB,KAhFnB,MAiFAgB,EArHA,QAqHoB6iB,cAAAgJ,EAAA7I,iBAAA,EAAAC,mBAAA,EAAAP,iBAAA,KAAA1jB,MAjFpB,KAQA,QA0EAgB,EArHA,QAqHwB6iB,cAAAgJ,EAAA7I,iBAAA,EAAAC,mBAAA,EAAAP,gBAAA,EAAA1jB,KAnFxB,MAoFAgB,EArHA,QAqH4B6iB,cAAAgJ,EAAA7I,iBAAA,EAAAC,mBAAA,EAAAP,iBAAA,QAAA1jB,MA9E5B,KAIA,KAGA,QAwEAgB,EArHA,QAqHqB6iB,cAAAgJ,EAAA7I,iBAAA,EAAAC,mBAAA,EAAAP,iBAAA,QAAA1jB,MA/ErB,KAIA,KAIA,QAwEAgB,EArHA,QAqHoB6iB,cAAAgJ,EAAA7I,iBAAA,EAAAC,mBAAA,EAAAP,iBAAA,MAAA1jB,MAhFpB,KAIA,OA6EAgB,EArHA,QAqHoB6iB,cAAAgJ,EAAA7I,iBAAA,EAAAC,mBAAA,EAAAP,gBAAA,GAAA1jB,KAjFpB,MAkFAgB,EArHA,QAqHoB6iB,cAlEpB,MAkEoBG,iBAAA,EAAAC,mBAAA,EAAAP,gBAAA,EAAA1jB,KAvFpB,MAwFAgB,EArHA,QAqHmB6iB,cAnEnB,MAmEmBG,iBAAA,EAAAC,mBAAA,EAAAP,gBAAA,EAAA1jB,KAzFnB,MA0FAgB,EArHA,QAqHqB6iB,cApErB,MAoEqBG,iBAAA,EAAAC,mBAAA,EAAAP,gBAAA,EAAA1jB,KAvFrB,MAwFAgB,EArHA,QAqHoB6iB,cArEpB,MAqEoBG,iBAAA,EAAAC,mBAAA,EAAAP,gBAAA,EAAA1jB,KAzFpB,MA0FAgB,EArHA,QAqHqB6iB,cAtErB,MAsEqBG,iBAAA,EAAAC,mBAAA,EAAAP,gBAAA,GAAA1jB,KAvFrB,MAwFAgB,EArHA,QAqHoB6iB,cAvEpB,MAuEoBG,iBAAA,EAAAC,mBAAA,EAAAP,gBAAA,GAAA1jB,KAzFpB,MA0FAgB,EArHA,QAqHmB6iB,cA1KnB,KA0KmBG,iBAAA,EAAAC,mBAAA,EAAAP,gBAAA,EAAA1jB,KA7FnB,MA8FAgB,EArHA,QAqH0B6iB,cA3K1B,KA2K0BG,iBAAA,EAAAC,mBAAA,EAAAP,gBAAA,EAAA1jB,KA9F1B,MA+FAgB,EArHA,QAqHyB6iB,cA5KzB,KA4KyBG,iBAAA,EAAAC,mBAAA,EAAAP,gBAAA,EAAA1jB,KAhGzB,MAiGAgB,EArHA,QAqHqB6iB,cA7KrB,KA6KqBG,iBAAA,EAAAC,mBAAA,EAAAP,iBAAA,OAAA1jB,MAhGrB,KAOA,MAIA,QAsFAgB,EArHA,QAqHmB6iB,cA9KnB,KA8KmBG,iBAAA,EAAAC,mBAAA,EAAAP,iBAAA,KAAA1jB,MAjGnB,KAMA,QA4FAgB,EArHA,QAqHsB6iB,cA/KtB,KA+KsBG,iBAAA,EAAAC,mBAAA,EAAAP,gBAAA,EAAA1jB,KAvFtB,OAwFAgB,EArHA,QAqHqB6iB,cAhLrB,KAgLqBG,iBAAA,EAAAC,mBAAA,EAAAP,iBAAA,MAAA1jB,MA9FrB,KAIA,OA2FAgB,EArHA,QAqHqB6iB,cAjLrB,KAiLqBG,iBAAA,EAAAC,mBAAA,EAAAP,gBAAA,GAAA1jB,KA/FrB,MAgGAgB,EArHA,QAqHqB6iB,cA/ErB,MA+EqBG,iBAAA,EAAAC,mBAAA,EAAAP,gBAAA,EAAA1jB,KArGrB,MAsGAgB,EArHA,QAqHoB6iB,cAhFpB,MAgFoBG,iBAAA,EAAAC,mBAAA,EAAAP,gBAAA,EAAA1jB,KAvGpB,MAwGAgB,EArHA,QAqHwB6iB,cAjFxB,MAiFwBG,iBAAA,EAAAC,mBAAA,EAAAP,gBAAA,EAAA1jB,KA5FxB,OA6FAgB,EArHA,QAqHsB6iB,cAlFtB,MAkFsBG,iBAAA,EAAAC,mBAAA,EAAAP,gBAAA,EAAA1jB,KAtGtB,MAuGAgB,EArHA,QAqHqB6iB,cAnFrB,MAmFqBG,iBAAA,EAAAC,mBAAA,EAAAP,gBAAA,EAAA1jB,KAxGrB,MAyGAgB,EArHA,QAqHqB6iB,cApFrB,MAoFqBG,iBAAA,EAAAC,mBAAA,EAAAP,gBAAA,GAAA1jB,KAvGrB,MAwGAgB,EArHA,QAqHsB6iB,cArFtB,MAqFsBG,iBAAA,EAAAC,mBAAA,EAAAP,gBAAA,GAAA1jB,KAvGtB,MAyGAgB,EArHA,QAqH+B6iB,cAvL/B,KAuL+BG,iBAAA,EAAAC,mBAAA,EAAAP,iBAAA,KAAA1jB,MA3G/B,KAEA,OA0GAgB,EArHA,QAqH+B6iB,cAxL/B,KAwL+BG,iBAAA,EAAAC,mBAAA,EAAAP,gBAAA,EAAA1jB,KA1G/B,MA2GAgB,EArHA,QAqHgC6iB,cAzLhC,KAyLgCG,iBAAA,EAAAC,mBAAA,EAAAP,gBAAA,EAAA1jB,KA1GhC,MA2GAgB,EApHA,QAoH8B6iB,cAzL9B,MAyL8BG,iBAAA,EAAAC,mBAAA,EAAAP,gBAAA,EAAA1jB,KAjG9B,OAkGAgB,EAtHA,QAsH+B6iB,cA1L/B,MA0L+BG,iBAAA,EAAAC,mBAAA,EAAAP,gBAAA,EAAA1jB,KAnG/B,OAqGAjE,OAAAuP,KAAAtK,GAAAwK,QAAA,SAAAgY,GACA,GAAArH,GAAAnb,EAAAwiB,EAEA,IADArH,EAAAwH,sBACApkB,MAAAqO,QAAAuO,EAAAuH,iBACAvH,EAAAuH,gBAAAlY,QAAA,SAAAkY,EAAA/L,GACA,GAAA3X,GAAAmc,EAAAnc,KAAA2X,EACAwE,GAAAwH,mBAAA3jB,GAAA0jB,QAEU,CACV,GAAA1jB,GAAAmc,EAAAnc,IACAmc,GAAAwH,mBAAA3jB,GAAAmc,EAAAuH,qBA4KA,IAAAkI,GAAA,WAGA,QAAAmB,GAAA1jB,GACA,IAAA2jB,EAAA,CACAA,IACA,QAAAzrB,KAAA8H,GACA,gBAAAA,GAAA9H,KACAyrB,EAAA3jB,EAAA9H,QAPA,GAAAyrB,EAaA,iBAAA3jB,EAAAzM,GAEA,MADAmwB,GAAA1jB,GACA2jB,EAAApwB,IAAA,KAAAA,EAAAof,SAAA,QAuGAgJ,KAuCAgB,EAAA3U,OAAA4b,cAAA,YAi+BA,QACA9jB,aAAAJ,EAEAie,gBACAC,iBACAH,uBAEAlE,gBACAuJ,kBACAR,sBACAZ,qBACAxC,wBACAlB,6BACAV,uBACAhC,yBACA2H,iBACAlJ,gBACAe,4BACAZ,wCAEElgB,MAAAjI,EAAA4M,MAAA3M,EAAAD,QAAA6M,IAIF,SAAA5M,EAAAD,EAAAH,GAEA,GAAA+M,GAAAC,CAiCAD,IAAA/M,EAAA,QA4HEiN,MA5HFD,EAAA,SAAAS,GACA,YA8DA,SAAAwkB,GAAA7jB,EAAA8jB,EAAAld,GACA,GAAAmd,GAAA/jB,EAAAK,mBASA,OARAL,GAAAW,gBAAAojB,GACAD,EAAAhsB,SACAgsB,OAEAA,EAAA3hB,QAAA,SAAA2G,GACAzJ,EAAA+J,wBAAApJ,EAAA8I,EAAAlC,KAEA5G,EAAAW,gBAAA,OAEA0F,YAAAO,EAAAP,YACAU,YAAAH,EAAAG,YACAoC,kBAAA4a,GAaA,QAAAC,GAAAhkB,EAAAmW,EAAAxR,EAAAkC,GACA,GAAAkd,GAAA/jB,EAAAK,mBASA,OARAL,GAAAW,gBAAAojB,GACA1kB,EAAA0X,cAAAZ,EAAAxR,GACAkC,GACA7G,EAAA+C,WAAA/C,EAAA8G,qBAAAD,GAIA7G,EAAAW,gBAAA,MACAojB,EAcA,QAAAE,GAAAjkB,EAAA8I,EAAAlC,GACA,MAAAod,GAAAhkB,EAAA8I,EAAA2N,eAAA3N,EAAAlC,EAAAjC,QAAAiC,EAAAC,SAKA,OACAgd,wBACAG,4BACAC,4BAEEjqB,MAAAjI,EAAA4M,MAAA3M,EAAAD,QAAA6M,IAIF,SAAA5M,EAAAD,EAAAH,GAEA,GAAA+M,GAAAC,CAiCAD,IAAA/M,EAAA,SA6uCEiN,MA7uCFD,EAAA,SAAAI,GACA,YA8CA,SAAAklB,GAAAC,GACA,GAAAC,GAAAC,CAEA,OADAA,GAAAF,EACAC,EAUA,QAAAE,GAAAlyB,EAAA4P,GAoBA,MAnBAA,MAAA,GAAAqiB,GAAA,IAEAriB,EAAA,IAAA5P,EAAA,GACA4P,EAAA,IAAA5P,EAAA,GACA4P,EAAA,IAAA5P,EAAA,GACA4P,EAAA,IAAA5P,EAAA,GACA4P,EAAA,IAAA5P,EAAA,GACA4P,EAAA,IAAA5P,EAAA,GACA4P,EAAA,IAAA5P,EAAA,GACA4P,EAAA,IAAA5P,EAAA,GACA4P,EAAA,IAAA5P,EAAA,GACA4P,EAAA,IAAA5P,EAAA,GACA4P,EAAA,KAAA5P,EAAA,IACA4P,EAAA,KAAA5P,EAAA,IACA4P,EAAA,KAAA5P,EAAA,IACA4P,EAAA,KAAA5P,EAAA,IACA4P,EAAA,KAAA5P,EAAA,IACA4P,EAAA,KAAA5P,EAAA,IAEA4P,EAUA,QAAAuiB,GAAAnyB,EAAA4P,GAoBA,MAnBAA,MAAA,GAAAqiB,GAAA,IAEAriB,EAAA,GAAA5P,EAAA,GACA4P,EAAA,GAAA5P,EAAA,GACA4P,EAAA,GAAA5P,EAAA,GACA4P,EAAA,GAAA5P,EAAA,GACA4P,EAAA,GAAA5P,EAAA,GACA4P,EAAA,GAAA5P,EAAA,GACA4P,EAAA,GAAA5P,EAAA,GACA4P,EAAA,GAAA5P,EAAA,GACA4P,EAAA,GAAA5P,EAAA,GACA4P,EAAA,GAAA5P,EAAA,GACA4P,EAAA,IAAA5P,EAAA,IACA4P,EAAA,IAAA5P,EAAA,IACA4P,EAAA,IAAA5P,EAAA,IACA4P,EAAA,IAAA5P,EAAA,IACA4P,EAAA,IAAA5P,EAAA,IACA4P,EAAA,IAAA5P,EAAA,IAEA4P,EAUA,QAAAtM,GAAAsM,GAoBA,MAnBAA,MAAA,GAAAqiB,GAAA,IAEAriB,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MAEAA,EAUA,QAAAwiB,GAAApyB,EAAA4P,GAEA,IADAA,KAAA,GAAAqiB,GAAA,OACAjyB,EAAA,CACA,GAAAuF,EAyBA,OAvBAA,GAAAvF,EAAA,GACAA,EAAA,GAAAA,EAAA,GACAA,EAAA,GAAAuF,EAEAA,EAAAvF,EAAA,GACAA,EAAA,GAAAA,EAAA,GACAA,EAAA,GAAAuF,EAEAA,EAAAvF,EAAA,GACAA,EAAA,GAAAA,EAAA,IACAA,EAAA,IAAAuF,EAEAA,EAAAvF,EAAA,GACAA,EAAA,GAAAA,EAAA,GACAA,EAAA,GAAAuF,EAEAA,EAAAvF,EAAA,GACAA,EAAA,GAAAA,EAAA,IACAA,EAAA,IAAAuF,EAEAA,EAAAvF,EAAA,IACAA,EAAA,IAAAA,EAAA,IACAA,EAAA,IAAAuF,EACAqK,EAGA,GAAAyiB,GAAAryB,EAAA,GACAsyB,EAAAtyB,EAAA,GACAuyB,EAAAvyB,EAAA,GACAwyB,EAAAxyB,EAAA,GACAyyB,EAAAzyB,EAAA,GACA0yB,EAAA1yB,EAAA,GACA2yB,EAAA3yB,EAAA,GACA4yB,EAAA5yB,EAAA,GACA6yB,EAAA7yB,EAAA,GACA8yB,EAAA9yB,EAAA,GACA+yB,EAAA/yB,EAAA,IACAgzB,EAAAhzB,EAAA,IACAizB,EAAAjzB,EAAA,IACAkzB,EAAAlzB,EAAA,IACAmzB,EAAAnzB,EAAA,IACAozB,EAAApzB,EAAA,GAmBA,OAjBA4P,GAAA,GAAAyiB,EACAziB,EAAA,GAAA6iB,EACA7iB,EAAA,GAAAijB,EACAjjB,EAAA,GAAAqjB,EACArjB,EAAA,GAAA0iB,EACA1iB,EAAA,GAAA8iB,EACA9iB,EAAA,GAAAkjB,EACAljB,EAAA,GAAAsjB,EACAtjB,EAAA,GAAA2iB,EACA3iB,EAAA,GAAA+iB,EACA/iB,EAAA,IAAAmjB,EACAnjB,EAAA,IAAAujB,EACAvjB,EAAA,IAAA4iB,EACA5iB,EAAA,IAAAgjB,EACAhjB,EAAA,IAAAojB,EACApjB,EAAA,IAAAwjB,EAEAxjB,EAUA,QAAAyjB,GAAArzB,EAAA4P,GACAA,KAAA,GAAAqiB,GAAA,GAEA,IAAAI,GAAAryB,EAAA,GACAsyB,EAAAtyB,EAAA,GACAuyB,EAAAvyB,EAAA,GACAwyB,EAAAxyB,EAAA,GACAyyB,EAAAzyB,EAAA,GACA0yB,EAAA1yB,EAAA,GACA2yB,EAAA3yB,EAAA,GACA4yB,EAAA5yB,EAAA,GACA6yB,EAAA7yB,EAAA,GACA8yB,EAAA9yB,EAAA,GACA+yB,EAAA/yB,EAAA,IACAgzB,EAAAhzB,EAAA,IACAizB,EAAAjzB,EAAA,IACAkzB,EAAAlzB,EAAA,IACAmzB,EAAAnzB,EAAA,IACAozB,EAAApzB,EAAA,IACAszB,EAAAP,EAAAK,EACAG,EAAAJ,EAAAH,EACAQ,EAAAb,EAAAS,EACAK,EAAAN,EAAAP,EACAc,EAAAf,EAAAK,EACAW,EAAAZ,EAAAH,EACAgB,EAAArB,EAAAa,EACAS,EAAAV,EAAAX,EACAsB,EAAAvB,EAAAS,EACAe,EAAAhB,EAAAP,EACAwB,EAAAzB,EAAAK,EACAqB,EAAAtB,EAAAH,EACA0B,EAAArB,EAAAK,EACAiB,EAAAlB,EAAAH,EACAsB,EAAA3B,EAAAS,EACAmB,EAAApB,EAAAP,EACA4B,EAAA7B,EAAAK,EACAyB,EAAA1B,EAAAH,EACA8B,EAAAnC,EAAAa,EACAuB,EAAAxB,EAAAX,EACAoC,EAAArC,EAAAS,EACA6B,EAAA9B,EAAAP,EACAsC,EAAAvC,EAAAK,EACAmC,EAAApC,EAAAH,EAEAwC,EAAAxB,EAAAZ,EAAAe,EAAAX,EAAAY,EAAAR,GAAAK,EAAAb,EAAAc,EAAAV,EAAAa,EAAAT,GACA6B,EAAAxB,EAAAjB,EAAAsB,EAAAd,EAAAiB,EAAAb,GAAAI,EAAAhB,EAAAuB,EAAAf,EAAAgB,EAAAZ,GACA8B,EAAAxB,EAAAlB,EAAAuB,EAAAnB,EAAAsB,EAAAd,GAAAO,EAAAnB,EAAAsB,EAAAlB,EAAAuB,EAAAf,GACA+B,EAAAtB,EAAArB,EAAAwB,EAAApB,EAAAuB,EAAAnB,GAAAY,EAAApB,EAAAyB,EAAArB,EAAAsB,EAAAlB,GAEA5yB,EAAA,GAAAmyB,EAAAyC,EAAArC,EAAAsC,EAAAlC,EAAAmC,EAAA/B,EAAAgC,EAmBA,OAjBArlB,GAAA,GAAA1P,EAAA40B,EACAllB,EAAA,GAAA1P,EAAA60B,EACAnlB,EAAA,GAAA1P,EAAA80B,EACAplB,EAAA,GAAA1P,EAAA+0B,EACArlB,EAAA,GAAA1P,GAAAqzB,EAAAd,EAAAe,EAAAX,EAAAc,EAAAV,GAAAK,EAAAb,EAAAgB,EAAAZ,EAAAa,EAAAT,IACArjB,EAAA,GAAA1P,GAAAozB,EAAAjB,EAAAwB,EAAAhB,EAAAiB,EAAAb,GAAAM,EAAAlB,EAAAuB,EAAAf,EAAAkB,EAAAd,IACArjB,EAAA,GAAA1P,GAAAuzB,EAAApB,EAAAuB,EAAAnB,EAAAwB,EAAAhB,GAAAO,EAAAnB,EAAAwB,EAAApB,EAAAuB,EAAAf,IACArjB,EAAA,GAAA1P,GAAAwzB,EAAArB,EAAA0B,EAAAtB,EAAAuB,EAAAnB,GAAAc,EAAAtB,EAAAyB,EAAArB,EAAAwB,EAAApB,IACAjjB,EAAA,GAAA1P,GAAAg0B,EAAAtB,EAAAyB,EAAArB,EAAAsB,EAAAlB,GAAAe,EAAAvB,EAAAwB,EAAApB,EAAAuB,EAAAnB,IACAxjB,EAAA,GAAA1P,GAAAi0B,EAAA3B,EAAAgC,EAAAxB,EAAA2B,EAAAvB,GAAAc,EAAA1B,EAAAiC,EAAAzB,EAAA0B,EAAAtB,IACAxjB,EAAA,IAAA1P,GAAAk0B,EAAA5B,EAAAiC,EAAA7B,EAAAgC,EAAAxB,GAAAiB,EAAA7B,EAAAgC,EAAA5B,EAAAiC,EAAAzB,IACAxjB,EAAA,IAAA1P,GAAAq0B,EAAA/B,EAAAkC,EAAA9B,EAAAiC,EAAA7B,GAAAsB,EAAA9B,EAAAmC,EAAA/B,EAAAgC,EAAA5B,IACApjB,EAAA,IAAA1P,GAAAk0B,EAAArB,EAAAwB,EAAApB,EAAAgB,EAAAxB,GAAA2B,EAAAnB,EAAAe,EAAAvB,EAAA0B,EAAAtB,IACAnjB,EAAA,IAAA1P,GAAAw0B,EAAAvB,EAAAe,EAAA3B,EAAAkC,EAAA1B,GAAAyB,EAAAzB,EAAA4B,EAAAxB,EAAAgB,EAAA5B,IACA3iB,EAAA,IAAA1P,GAAAs0B,EAAA7B,EAAAkC,EAAA1B,EAAAkB,EAAA9B,GAAAqC,EAAAzB,EAAAiB,EAAA7B,EAAAkC,EAAA9B,IACA/iB,EAAA,IAAA1P,GAAA00B,EAAA7B,EAAAuB,EAAA/B,EAAAoC,EAAAhC,GAAA+B,EAAA/B,EAAAkC,EAAA9B,EAAAwB,EAAAhC,IAEA3iB,EAWA,QAAAslB,GAAAvwB,EAAAE,EAAA+K,GACAA,KAAA,GAAAqiB,GAAA,GAEA,IAAAkD,GAAAxwB,EAAA,GACAywB,EAAAzwB,EAAA,GACA0wB,EAAA1wB,EAAA,GACA2wB,EAAA3wB,EAAA,GACA4wB,EAAA5wB,EAAA,GACA6wB,EAAA7wB,EAAA,GACA8wB,EAAA9wB,EAAA,GACA+wB,EAAA/wB,EAAA,GACAgxB,EAAAhxB,EAAA,GACAixB,EAAAjxB,EAAA,GACAkxB,EAAAlxB,EAAA,IACAmxB,EAAAnxB,EAAA,IACAoxB,EAAApxB,EAAA,IACAqxB,EAAArxB,EAAA,IACAsxB,EAAAtxB,EAAA,IACAuxB,EAAAvxB,EAAA,IACAwxB,EAAAtxB,EAAA,GACAuxB,EAAAvxB,EAAA,GACAwxB,EAAAxxB,EAAA,GACAyxB,EAAAzxB,EAAA,GACA0xB,EAAA1xB,EAAA,GACA2xB,EAAA3xB,EAAA,GACA4xB,EAAA5xB,EAAA,GACA6xB,EAAA7xB,EAAA,GACA8xB,EAAA9xB,EAAA,GACA+xB,EAAA/xB,EAAA,GACAgyB,EAAAhyB,EAAA,IACAiyB,EAAAjyB,EAAA,IACAkyB,EAAAlyB,EAAA,IACAmyB,EAAAnyB,EAAA,IACAoyB,EAAApyB,EAAA,IACAqyB,EAAAryB,EAAA,GAmBA,OAjBA+K,GAAA,GAAAulB,EAAAgB,EAAAZ,EAAAa,EAAAT,EAAAU,EAAAN,EAAAO,EACA1mB,EAAA,GAAAwlB,EAAAe,EAAAX,EAAAY,EAAAR,EAAAS,EAAAL,EAAAM,EACA1mB,EAAA,GAAAylB,EAAAc,EAAAV,EAAAW,EAAAP,EAAAQ,EAAAJ,EAAAK,EACA1mB,EAAA,GAAA0lB,EAAAa,EAAAT,EAAAU,EAAAN,EAAAO,EAAAH,EAAAI,EACA1mB,EAAA,GAAAulB,EAAAoB,EAAAhB,EAAAiB,EAAAb,EAAAc,EAAAV,EAAAW,EACA9mB,EAAA,GAAAwlB,EAAAmB,EAAAf,EAAAgB,EAAAZ,EAAAa,EAAAT,EAAAU,EACA9mB,EAAA,GAAAylB,EAAAkB,EAAAd,EAAAe,EAAAX,EAAAY,EAAAR,EAAAS,EACA9mB,EAAA,GAAA0lB,EAAAiB,EAAAb,EAAAc,EAAAV,EAAAW,EAAAP,EAAAQ,EACA9mB,EAAA,GAAAulB,EAAAwB,EAAApB,EAAAqB,EAAAjB,EAAAkB,EAAAd,EAAAe,EACAlnB,EAAA,GAAAwlB,EAAAuB,EAAAnB,EAAAoB,EAAAhB,EAAAiB,EAAAb,EAAAc,EACAlnB,EAAA,IAAAylB,EAAAsB,EAAAlB,EAAAmB,EAAAf,EAAAgB,EAAAZ,EAAAa,EACAlnB,EAAA,IAAA0lB,EAAAqB,EAAAjB,EAAAkB,EAAAd,EAAAe,EAAAX,EAAAY,EACAlnB,EAAA,IAAAulB,EAAA4B,EAAAxB,EAAAyB,EAAArB,EAAAsB,EAAAlB,EAAAmB,EACAtnB,EAAA,IAAAwlB,EAAA2B,EAAAvB,EAAAwB,EAAApB,EAAAqB,EAAAjB,EAAAkB,EACAtnB,EAAA,IAAAylB,EAAA0B,EAAAtB,EAAAuB,EAAAnB,EAAAoB,EAAAhB,EAAAiB,EACAtnB,EAAA,IAAA0lB,EAAAyB,EAAArB,EAAAsB,EAAAlB,EAAAmB,EAAAf,EAAAgB,EAEAtnB,EAYA,QAAAunB,GAAAxyB,EAAAqD,EAAA4H,GAoBA,MAnBAA,MAAAtM,IACAqB,IAAAiL,IACAA,EAAA,GAAAjL,EAAA,GACAiL,EAAA,GAAAjL,EAAA,GACAiL,EAAA,GAAAjL,EAAA,GACAiL,EAAA,GAAAjL,EAAA,GACAiL,EAAA,GAAAjL,EAAA,GACAiL,EAAA,GAAAjL,EAAA,GACAiL,EAAA,GAAAjL,EAAA,GACAiL,EAAA,GAAAjL,EAAA,GACAiL,EAAA,GAAAjL,EAAA,GACAiL,EAAA,GAAAjL,EAAA,GACAiL,EAAA,IAAAjL,EAAA,IACAiL,EAAA,IAAAjL,EAAA,KAEAiL,EAAA,IAAA5H,EAAA,GACA4H,EAAA,IAAA5H,EAAA,GACA4H,EAAA,IAAA5H,EAAA,GACA4H,EAAA,MACAA,EAWA,QAAAwnB,GAAAp3B,EAAA4P,GAKA,MAJAA,MAAAhD,EAAArJ,SACAqM,EAAA,GAAA5P,EAAA,IACA4P,EAAA,GAAA5P,EAAA,IACA4P,EAAA,GAAA5P,EAAA,IACA4P,EAWA,QAAAynB,GAAAr3B,EAAAs3B,EAAA1nB,GACAA,KAAAhD,EAAArJ,QACA,IAAAg0B,GAAA,EAAAD,CAIA,OAHA1nB,GAAA,GAAA5P,EAAAu3B,EAAA,GACA3nB,EAAA,GAAA5P,EAAAu3B,EAAA,GACA3nB,EAAA,GAAA5P,EAAAu3B,EAAA,GACA3nB,EAWA,QAAA4nB,GAAA7yB,EAAAqD,EAAAsvB,EAAA1nB,GACAA,IAAAjL,IACAiL,EAAAuiB,EAAAxtB,EAAAiL,GAEA,IAAA2nB,GAAA,EAAAD,CAIA,OAHA1nB,GAAA2nB,EAAA,GAAAvvB,EAAA,GACA4H,EAAA2nB,EAAA,GAAAvvB,EAAA,GACA4H,EAAA2nB,EAAA,GAAAvvB,EAAA,GACA4H,EAwBA,QAAA6nB,GAAAC,EAAAC,EAAAC,EAAAC,EAAAjoB,GACAA,KAAA,GAAAqiB,GAAA,GAEA,IAAA/pB,GAAAlE,KAAA8zB,IAAA,GAAA9zB,KAAAS,GAAA,GAAAizB,GACAK,EAAA,GAAAH,EAAAC,EAsBA,OApBAjoB,GAAA,GAAA1H,EAAAyvB,EACA/nB,EAAA,KACAA,EAAA,KACAA,EAAA,KAEAA,EAAA,KACAA,EAAA,GAAA1H,EACA0H,EAAA,KACAA,EAAA,KAEAA,EAAA,KACAA,EAAA,KACAA,EAAA,KAAAgoB,EAAAC,GAAAE,EACAnoB,EAAA,OAEAA,EAAA,MACAA,EAAA,MACAA,EAAA,IAAAgoB,EAAAC,EAAAE,EAAA,EACAnoB,EAAA,MAEAA,EAmBA,QAAAooB,GAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA1oB,GAuBA,MAtBAA,MAAA,GAAAqiB,GAAA,IAEAriB,EAAA,MAAAsoB,EAAAD,GACAroB,EAAA,KACAA,EAAA,KACAA,EAAA,KAEAA,EAAA,KACAA,EAAA,MAAAwoB,EAAAD,GACAvoB,EAAA,KACAA,EAAA,KAEAA,EAAA,KACAA,EAAA,KACAA,EAAA,QAAA0oB,EAAAD,GACAzoB,EAAA,MAEAA,EAAA,KAAAsoB,EAAAD,MAAAC,GACAtoB,EAAA,KAAAwoB,EAAAD,MAAAC,GACAxoB,EAAA,KAAAyoB,KAAAC,GACA1oB,EAAA,MAEAA,EAsBA,QAAA2oB,GAAAN,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA1oB,GACAA,KAAA,GAAAqiB,GAAA,GAEA,IAAAuG,GAAAN,EAAAD,EACAQ,EAAAL,EAAAD,EACAO,EAAAL,EAAAC,CAmBA,OAjBA1oB,GAAA,KAAAyoB,EAAAG,EACA5oB,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KAAAyoB,EAAAI,EACA7oB,EAAA,KACAA,EAAA,KACAA,EAAA,IAAAqoB,EAAAC,GAAAM,EACA5oB,EAAA,IAAAwoB,EAAAD,GAAAM,EACA7oB,EAAA,IAAA0oB,EAAAI,EACA9oB,EAAA,OACAA,EAAA,MACAA,EAAA,MACAA,EAAA,IAAAyoB,EAAAC,EAAAI,EACA9oB,EAAA,MAEAA,EAiBA,QAAA+oB,GAAAC,EAAA/yB,EAAAgzB,EAAAjpB,GACAA,KAAA,GAAAqiB,GAAA,GAEA,IAAA6G,GAAAC,EACAC,EAAAC,EACAC,EAAAC,CAuBA,OArBAvsB,GAAAoG,UAAApG,EAAAwsB,SAAAR,EAAA/yB,EAAAqzB,MACAtsB,EAAAoG,UAAApG,EAAAysB,MAAAR,EAAAK,EAAAJ,MACAlsB,EAAAoG,UAAApG,EAAAysB,MAAAH,EAAAJ,EAAAE,MAEAppB,EAAA,GAAAkpB,EAAA,GACAlpB,EAAA,GAAAkpB,EAAA,GACAlpB,EAAA,GAAAkpB,EAAA,GACAlpB,EAAA,KACAA,EAAA,GAAAopB,EAAA,GACAppB,EAAA,GAAAopB,EAAA,GACAppB,EAAA,GAAAopB,EAAA,GACAppB,EAAA,KACAA,EAAA,GAAAspB,EAAA,GACAtpB,EAAA,GAAAspB,EAAA,GACAtpB,EAAA,IAAAspB,EAAA,GACAtpB,EAAA,MACAA,EAAA,IAAAgpB,EAAA,GACAhpB,EAAA,IAAAgpB,EAAA,GACAhpB,EAAA,IAAAgpB,EAAA,GACAhpB,EAAA,MAEAA,EAWA,QAAA0pB,GAAAtxB,EAAA4H,GAmBA,MAlBAA,MAAA,GAAAqiB,GAAA,IAEAriB,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,MACAA,EAAA,MACAA,EAAA,IAAA5H,EAAA,GACA4H,EAAA,IAAA5H,EAAA,GACA4H,EAAA,IAAA5H,EAAA,GACA4H,EAAA,MACAA,EAYA,QAAA2pB,GAAAv5B,EAAAgI,EAAA4H,GACAA,KAAA,GAAAqiB,GAAA,GAEA,IAAAuH,GAAAxxB,EAAA,GACAyxB,EAAAzxB,EAAA,GACA0xB,EAAA1xB,EAAA,GACAqqB,EAAAryB,EAAA,GACAsyB,EAAAtyB,EAAA,GACAuyB,EAAAvyB,EAAA,GACAwyB,EAAAxyB,EAAA,GACAyyB,EAAAzyB,EAAA,GACA0yB,EAAA1yB,EAAA,GACA2yB,EAAA3yB,EAAA,GACA4yB,EAAA5yB,EAAA,GACA6yB,EAAA7yB,EAAA,GACA8yB,EAAA9yB,EAAA,GACA+yB,EAAA/yB,EAAA,IACAgzB,EAAAhzB,EAAA,IACAizB,EAAAjzB,EAAA,IACAkzB,EAAAlzB,EAAA,IACAmzB,EAAAnzB,EAAA,IACAozB,EAAApzB,EAAA,GAsBA,OApBAA,KAAA4P,IACAA,EAAA,GAAAyiB,EACAziB,EAAA,GAAA0iB,EACA1iB,EAAA,GAAA2iB,EACA3iB,EAAA,GAAA4iB,EACA5iB,EAAA,GAAA6iB,EACA7iB,EAAA,GAAA8iB,EACA9iB,EAAA,GAAA+iB,EACA/iB,EAAA,GAAAgjB,EACAhjB,EAAA,GAAAijB,EACAjjB,EAAA,GAAAkjB,EACAljB,EAAA,IAAAmjB,EACAnjB,EAAA,IAAAojB,GAGApjB,EAAA,IAAAyiB,EAAAmH,EAAA/G,EAAAgH,EAAA5G,EAAA6G,EAAAzG,EACArjB,EAAA,IAAA0iB,EAAAkH,EAAA9G,EAAA+G,EAAA3G,EAAA4G,EAAAxG,EACAtjB,EAAA,IAAA2iB,EAAAiH,EAAA7G,EAAA8G,EAAA1G,EAAA2G,EAAAvG,EACAvjB,EAAA,IAAA4iB,EAAAgH,EAAA5G,EAAA6G,EAAAzG,EAAA0G,EAAAtG,EAEAxjB,EAUA,QAAA+pB,GAAAC,EAAAhqB,GACAA,KAAA,GAAAqiB,GAAA,GAEA,IAAAhyB,GAAA+D,KAAA61B,IAAAD,GACA14B,EAAA8C,KAAA81B,IAAAF,EAmBA,OAjBAhqB,GAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,GAAA3P,EACA2P,EAAA,GAAA1O,EACA0O,EAAA,KACAA,EAAA,KACAA,EAAA,IAAA1O,EACA0O,EAAA,IAAA3P,EACA2P,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MAEAA,EAYA,QAAAmqB,GAAA/5B,EAAA45B,EAAAhqB,GACAA,KAAA,GAAAqiB,GAAA,GAEA,IAAAQ,GAAAzyB,EAAA,GACA0yB,EAAA1yB,EAAA,GACA2yB,EAAA3yB,EAAA,GACA4yB,EAAA5yB,EAAA,GACA6yB,EAAA7yB,EAAA,GACA8yB,EAAA9yB,EAAA,GACA+yB,EAAA/yB,EAAA,IACAgzB,EAAAhzB,EAAA,IACAC,EAAA+D,KAAA61B,IAAAD,GACA14B,EAAA8C,KAAA81B,IAAAF,EAsBA,OApBAhqB,GAAA,GAAA3P,EAAAwyB,EAAAvxB,EAAA2xB,EACAjjB,EAAA,GAAA3P,EAAAyyB,EAAAxxB,EAAA4xB,EACAljB,EAAA,GAAA3P,EAAA0yB,EAAAzxB,EAAA6xB,EACAnjB,EAAA,GAAA3P,EAAA2yB,EAAA1xB,EAAA8xB,EACApjB,EAAA,GAAA3P,EAAA4yB,EAAA3xB,EAAAuxB,EACA7iB,EAAA,GAAA3P,EAAA6yB,EAAA5xB,EAAAwxB,EACA9iB,EAAA,IAAA3P,EAAA8yB,EAAA7xB,EAAAyxB,EACA/iB,EAAA,IAAA3P,EAAA+yB,EAAA9xB,EAAA0xB,EAEA5yB,IAAA4P,IACAA,EAAA,GAAA5P,EAAA,GACA4P,EAAA,GAAA5P,EAAA,GACA4P,EAAA,GAAA5P,EAAA,GACA4P,EAAA,GAAA5P,EAAA,GACA4P,EAAA,IAAA5P,EAAA,IACA4P,EAAA,IAAA5P,EAAA,IACA4P,EAAA,IAAA5P,EAAA,IACA4P,EAAA,IAAA5P,EAAA,KAGA4P,EAUA,QAAAoqB,GAAAJ,EAAAhqB,GACAA,KAAA,GAAAqiB,GAAA,GAEA,IAAAhyB,GAAA+D,KAAA61B,IAAAD,GACA14B,EAAA8C,KAAA81B,IAAAF,EAmBA,OAjBAhqB,GAAA,GAAA3P,EACA2P,EAAA,KACAA,EAAA,IAAA1O,EACA0O,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,GAAA1O,EACA0O,EAAA,KACAA,EAAA,IAAA3P,EACA2P,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MAEAA,EAYA,QAAAqqB,GAAAj6B,EAAA45B,EAAAhqB,GACAA,KAAA,GAAAqiB,GAAA,GAEA,IAAAI,GAAAryB,EAAA,GACAsyB,EAAAtyB,EAAA,GACAuyB,EAAAvyB,EAAA,GACAwyB,EAAAxyB,EAAA,GACA6yB,EAAA7yB,EAAA,GACA8yB,EAAA9yB,EAAA,GACA+yB,EAAA/yB,EAAA,IACAgzB,EAAAhzB,EAAA,IACAC,EAAA+D,KAAA61B,IAAAD,GACA14B,EAAA8C,KAAA81B,IAAAF,EAsBA,OApBAhqB,GAAA,GAAA3P,EAAAoyB,EAAAnxB,EAAA2xB,EACAjjB,EAAA,GAAA3P,EAAAqyB,EAAApxB,EAAA4xB,EACAljB,EAAA,GAAA3P,EAAAsyB,EAAArxB,EAAA6xB,EACAnjB,EAAA,GAAA3P,EAAAuyB,EAAAtxB,EAAA8xB,EACApjB,EAAA,GAAA3P,EAAA4yB,EAAA3xB,EAAAmxB,EACAziB,EAAA,GAAA3P,EAAA6yB,EAAA5xB,EAAAoxB,EACA1iB,EAAA,IAAA3P,EAAA8yB,EAAA7xB,EAAAqxB,EACA3iB,EAAA,IAAA3P,EAAA+yB,EAAA9xB,EAAAsxB,EAEAxyB,IAAA4P,IACAA,EAAA,GAAA5P,EAAA,GACA4P,EAAA,GAAA5P,EAAA,GACA4P,EAAA,GAAA5P,EAAA,GACA4P,EAAA,GAAA5P,EAAA,GACA4P,EAAA,IAAA5P,EAAA,IACA4P,EAAA,IAAA5P,EAAA,IACA4P,EAAA,IAAA5P,EAAA,IACA4P,EAAA,IAAA5P,EAAA,KAGA4P,EAUA,QAAAsqB,GAAAN,EAAAhqB,GACAA,KAAA,GAAAqiB,GAAA,GAEA,IAAAhyB,GAAA+D,KAAA61B,IAAAD,GACA14B,EAAA8C,KAAA81B,IAAAF,EAmBA,OAjBAhqB,GAAA,GAAA3P,EACA2P,EAAA,GAAA1O,EACA0O,EAAA,KACAA,EAAA,KACAA,EAAA,IAAA1O,EACA0O,EAAA,GAAA3P,EACA2P,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MAEAA,EAYA,QAAAuqB,GAAAn6B,EAAA45B,EAAAhqB,GACAA,KAAA,GAAAqiB,GAAA,GAEA,IAAAI,GAAAryB,EAAA,GACAsyB,EAAAtyB,EAAA,GACAuyB,EAAAvyB,EAAA,GACAwyB,EAAAxyB,EAAA,GACAyyB,EAAAzyB,EAAA,GACA0yB,EAAA1yB,EAAA,GACA2yB,EAAA3yB,EAAA,GACA4yB,EAAA5yB,EAAA,GACAC,EAAA+D,KAAA61B,IAAAD,GACA14B,EAAA8C,KAAA81B,IAAAF,EAsBA,OApBAhqB,GAAA,GAAA3P,EAAAoyB,EAAAnxB,EAAAuxB,EACA7iB,EAAA,GAAA3P,EAAAqyB,EAAApxB,EAAAwxB,EACA9iB,EAAA,GAAA3P,EAAAsyB,EAAArxB,EAAAyxB,EACA/iB,EAAA,GAAA3P,EAAAuyB,EAAAtxB,EAAA0xB,EACAhjB,EAAA,GAAA3P,EAAAwyB,EAAAvxB,EAAAmxB,EACAziB,EAAA,GAAA3P,EAAAyyB,EAAAxxB,EAAAoxB,EACA1iB,EAAA,GAAA3P,EAAA0yB,EAAAzxB,EAAAqxB,EACA3iB,EAAA,GAAA3P,EAAA2yB,EAAA1xB,EAAAsxB,EAEAxyB,IAAA4P,IACAA,EAAA,GAAA5P,EAAA,GACA4P,EAAA,GAAA5P,EAAA,GACA4P,EAAA,IAAA5P,EAAA,IACA4P,EAAA,IAAA5P,EAAA,IACA4P,EAAA,IAAA5P,EAAA,IACA4P,EAAA,IAAA5P,EAAA,IACA4P,EAAA,IAAA5P,EAAA,IACA4P,EAAA,IAAA5P,EAAA,KAGA4P,EAcA,QAAAwqB,GAAA9C,EAAAsC,EAAAhqB,GACAA,KAAA,GAAAqiB,GAAA,GAEA,IAAAoI,GAAA/C,EAAA,GACAjvB,EAAAivB,EAAA,GACAgD,EAAAhD,EAAA,GACA32B,EAAAqD,KAAAglB,KAAAqR,IAAAhyB,IAAAiyB,IACAD,IAAA15B,EACA0H,GAAA1H,EACA25B,GAAA35B,CACA,IAAA45B,GAAAF,IACAG,EAAAnyB,IACAoyB,EAAAH,IACAr6B,EAAA+D,KAAA61B,IAAAD,GACA14B,EAAA8C,KAAA81B,IAAAF,GACAc,EAAA,EAAAz6B,CAmBA,OAjBA2P,GAAA,GAAA2qB,GAAA,EAAAA,GAAAt6B,EACA2P,EAAA,GAAAyqB,EAAAhyB,EAAAqyB,EAAAJ,EAAAp5B,EACA0O,EAAA,GAAAyqB,EAAAC,EAAAI,EAAAryB,EAAAnH,EACA0O,EAAA,KACAA,EAAA,GAAAyqB,EAAAhyB,EAAAqyB,EAAAJ,EAAAp5B,EACA0O,EAAA,GAAA4qB,GAAA,EAAAA,GAAAv6B,EACA2P,EAAA,GAAAvH,EAAAiyB,EAAAI,EAAAL,EAAAn5B,EACA0O,EAAA,KACAA,EAAA,GAAAyqB,EAAAC,EAAAI,EAAAryB,EAAAnH,EACA0O,EAAA,GAAAvH,EAAAiyB,EAAAI,EAAAL,EAAAn5B,EACA0O,EAAA,IAAA6qB,GAAA,EAAAA,GAAAx6B,EACA2P,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MAEAA,EAcA,QAAA+qB,GAAA36B,EAAAs3B,EAAAsC,EAAAhqB,GACAA,KAAA,GAAAqiB,GAAA,GAEA,IAAAoI,GAAA/C,EAAA,GACAjvB,EAAAivB,EAAA,GACAgD,EAAAhD,EAAA,GACA32B,EAAAqD,KAAAglB,KAAAqR,IAAAhyB,IAAAiyB,IACAD,IAAA15B,EACA0H,GAAA1H,EACA25B,GAAA35B,CACA,IAAA45B,GAAAF,IACAG,EAAAnyB,IACAoyB,EAAAH,IACAr6B,EAAA+D,KAAA61B,IAAAD,GACA14B,EAAA8C,KAAA81B,IAAAF,GACAc,EAAA,EAAAz6B,EAEA26B,EAAAL,GAAA,EAAAA,GAAAt6B,EACA46B,EAAAR,EAAAhyB,EAAAqyB,EAAAJ,EAAAp5B,EACA45B,EAAAT,EAAAC,EAAAI,EAAAryB,EAAAnH,EACA65B,EAAAV,EAAAhyB,EAAAqyB,EAAAJ,EAAAp5B,EACA85B,EAAAR,GAAA,EAAAA,GAAAv6B,EACAg7B,EAAA5yB,EAAAiyB,EAAAI,EAAAL,EAAAn5B,EACAg6B,EAAAb,EAAAC,EAAAI,EAAAryB,EAAAnH,EACAi6B,EAAA9yB,EAAAiyB,EAAAI,EAAAL,EAAAn5B,EACAk6B,EAAAX,GAAA,EAAAA,GAAAx6B,EAEAoyB,EAAAryB,EAAA,GACAsyB,EAAAtyB,EAAA,GACAuyB,EAAAvyB,EAAA,GACAwyB,EAAAxyB,EAAA,GACAyyB,EAAAzyB,EAAA,GACA0yB,EAAA1yB,EAAA,GACA2yB,EAAA3yB,EAAA,GACA4yB,EAAA5yB,EAAA,GACA6yB,EAAA7yB,EAAA,GACA8yB,EAAA9yB,EAAA,GACA+yB,EAAA/yB,EAAA,IACAgzB,EAAAhzB,EAAA,GAsBA,OApBA4P,GAAA,GAAAgrB,EAAAvI,EAAAwI,EAAApI,EAAAqI,EAAAjI,EACAjjB,EAAA,GAAAgrB,EAAAtI,EAAAuI,EAAAnI,EAAAoI,EAAAhI,EACAljB,EAAA,GAAAgrB,EAAArI,EAAAsI,EAAAlI,EAAAmI,EAAA/H,EACAnjB,EAAA,GAAAgrB,EAAApI,EAAAqI,EAAAjI,EAAAkI,EAAA9H,EACApjB,EAAA,GAAAmrB,EAAA1I,EAAA2I,EAAAvI,EAAAwI,EAAApI,EACAjjB,EAAA,GAAAmrB,EAAAzI,EAAA0I,EAAAtI,EAAAuI,EAAAnI,EACAljB,EAAA,GAAAmrB,EAAAxI,EAAAyI,EAAArI,EAAAsI,EAAAlI,EACAnjB,EAAA,GAAAmrB,EAAAvI,EAAAwI,EAAApI,EAAAqI,EAAAjI,EACApjB,EAAA,GAAAsrB,EAAA7I,EAAA8I,EAAA1I,EAAA2I,EAAAvI,EACAjjB,EAAA,GAAAsrB,EAAA5I,EAAA6I,EAAAzI,EAAA0I,EAAAtI,EACAljB,EAAA,IAAAsrB,EAAA3I,EAAA4I,EAAAxI,EAAAyI,EAAArI,EACAnjB,EAAA,IAAAsrB,EAAA1I,EAAA2I,EAAAvI,EAAAwI,EAAApI,EAEAhzB,IAAA4P,IACAA,EAAA,IAAA5P,EAAA,IACA4P,EAAA,IAAA5P,EAAA,IACA4P,EAAA,IAAA5P,EAAA,IACA4P,EAAA,IAAA5P,EAAA,KAGA4P,EAaA,QAAAyrB,GAAArzB,EAAA4H,GAoBA,MAnBAA,MAAA,GAAAqiB,GAAA,IAEAriB,EAAA,GAAA5H,EAAA,GACA4H,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,GAAA5H,EAAA,GACA4H,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,IAAA5H,EAAA,GACA4H,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MAEAA,EAcA,QAAA0rB,GAAAt7B,EAAAgI,EAAA4H,GACAA,KAAA,GAAAqiB,GAAA,GAEA,IAAAuH,GAAAxxB,EAAA,GACAyxB,EAAAzxB,EAAA,GACA0xB,EAAA1xB,EAAA,EAsBA,OApBA4H,GAAA,GAAA4pB,EAAAx5B,EAAA,GACA4P,EAAA,GAAA4pB,EAAAx5B,EAAA,GACA4P,EAAA,GAAA4pB,EAAAx5B,EAAA,GACA4P,EAAA,GAAA4pB,EAAAx5B,EAAA,GACA4P,EAAA,GAAA6pB,EAAAz5B,EAAA,GACA4P,EAAA,GAAA6pB,EAAAz5B,EAAA,GACA4P,EAAA,GAAA6pB,EAAAz5B,EAAA,GACA4P,EAAA,GAAA6pB,EAAAz5B,EAAA,GACA4P,EAAA,GAAA8pB,EAAA15B,EAAA,GACA4P,EAAA,GAAA8pB,EAAA15B,EAAA,GACA4P,EAAA,IAAA8pB,EAAA15B,EAAA,IACA4P,EAAA,IAAA8pB,EAAA15B,EAAA,IAEAA,IAAA4P,IACAA,EAAA,IAAA5P,EAAA,IACA4P,EAAA,IAAA5P,EAAA,IACA4P,EAAA,IAAA5P,EAAA,IACA4P,EAAA,IAAA5P,EAAA,KAGA4P,EAaA,QAAA2rB,GAAAv7B,EAAAgI,EAAA4H,GACAA,KAAAhD,EAAArJ,QACA,IAAAi2B,GAAAxxB,EAAA,GACAyxB,EAAAzxB,EAAA,GACA0xB,EAAA1xB,EAAA,GACA9H,EAAAs5B,EAAAx5B,EAAA,GAAAy5B,EAAAz5B,EAAA,GAAA05B,EAAA15B,EAAA,IAAAA,EAAA,GAMA,OAJA4P,GAAA,IAAA4pB,EAAAx5B,EAAA,GAAAy5B,EAAAz5B,EAAA,GAAA05B,EAAA15B,EAAA,GAAAA,EAAA,KAAAE,EACA0P,EAAA,IAAA4pB,EAAAx5B,EAAA,GAAAy5B,EAAAz5B,EAAA,GAAA05B,EAAA15B,EAAA,GAAAA,EAAA,KAAAE,EACA0P,EAAA,IAAA4pB,EAAAx5B,EAAA,GAAAy5B,EAAAz5B,EAAA,GAAA05B,EAAA15B,EAAA,IAAAA,EAAA,KAAAE,EAEA0P,EAgBA,QAAA4rB,GAAAx7B,EAAAgI,EAAA4H,GACAA,KAAAhD,EAAArJ,QAEA,IAAAi2B,GAAAxxB,EAAA,GACAyxB,EAAAzxB,EAAA,GACA0xB,EAAA1xB,EAAA,EAMA,OAJA4H,GAAA,GAAA4pB,EAAAx5B,EAAA,GAAAy5B,EAAAz5B,EAAA,GAAA05B,EAAA15B,EAAA,GACA4P,EAAA,GAAA4pB,EAAAx5B,EAAA,GAAAy5B,EAAAz5B,EAAA,GAAA05B,EAAA15B,EAAA,GACA4P,EAAA,GAAA4pB,EAAAx5B,EAAA,GAAAy5B,EAAAz5B,EAAA,GAAA05B,EAAA15B,EAAA,IAEA4P,EAkBA,QAAA6rB,GAAAz7B,EAAAgI,EAAA4H,GACAA,KAAAhD,EAAArJ,QACA,IAAAm4B,GAAArI,EAAArzB,GACAw5B,EAAAxxB,EAAA,GACAyxB,EAAAzxB,EAAA,GACA0xB,EAAA1xB,EAAA,EAMA,OAJA4H,GAAA,GAAA4pB,EAAAkC,EAAA,GAAAjC,EAAAiC,EAAA,GAAAhC,EAAAgC,EAAA,GACA9rB,EAAA,GAAA4pB,EAAAkC,EAAA,GAAAjC,EAAAiC,EAAA,GAAAhC,EAAAgC,EAAA,GACA9rB,EAAA,GAAA4pB,EAAAkC,EAAA,GAAAjC,EAAAiC,EAAA,GAAAhC,EAAAgC,EAAA,IAEA9rB,EA1qCA,GAAAqiB,GAAApuB,aAEAk1B,EAAAnsB,EAAArJ,SACA01B,EAAArsB,EAAArJ,SACA41B,EAAAvsB,EAAArJ,QA2qCA,QACAo3B,aACAP,eACA72B,OAAAD,EACA6uB,OACAoG,UACAlB,UACAD,iBACA9zB,WACA+vB,UACAsF,SACAzD,WACAhD,SACA8F,QACAP,cACAsC,UACAE,UACAE,UACAwB,WAAAhB,EACAhB,YACAK,YACAE,YACAoB,QACAD,UACA7D,UACA1F,iBACAqF,iBACAqE,qBACAC,kBACAF,iBACAhC,YACAD,cACAlH,cAEExqB,MAAAjI,EAAA4M,MAAA3M,EAAAD,QAAA6M,IAIF,SAAA5M,EAAAD,EAAAH,GAEA,GAAA+M,GAAAC,CAiCAD,UAuWEE,MAvWFD,EAAA,WACA,YAyCA,SAAAslB,GAAAC,GACA,GAAAC,GAAA4J,CAEA,OADAA,GAAA7J,EACAC,EAQA,QAAAzuB,GAAA82B,EAAAhyB,EAAAiyB,GACA,GAAA1qB,GAAA,GAAAgsB,GAAA,EAUA,OATAvB,KACAzqB,EAAA,GAAAyqB,GAEAhyB,IACAuH,EAAA,GAAAvH,GAEAiyB,IACA1qB,EAAA,GAAA0qB,GAEA1qB,EAUA,QAAAisB,GAAAl3B,EAAAE,EAAA+K,GAOA,MANAA,MAAA,GAAAgsB,GAAA,GAEAhsB,EAAA,GAAAjL,EAAA,GAAAE,EAAA,GACA+K,EAAA,GAAAjL,EAAA,GAAAE,EAAA,GACA+K,EAAA,GAAAjL,EAAA,GAAAE,EAAA,GAEA+K,EAUA,QAAAwpB,GAAAz0B,EAAAE,EAAA+K,GAOA,MANAA,MAAA,GAAAgsB,GAAA,GAEAhsB,EAAA,GAAAjL,EAAA,GAAAE,EAAA,GACA+K,EAAA,GAAAjL,EAAA,GAAAE,EAAA,GACA+K,EAAA,GAAAjL,EAAA,GAAAE,EAAA,GAEA+K,EAaA,QAAAksB,GAAAn3B,EAAAE,EAAAU,EAAAqK,GAOA,MANAA,MAAA,GAAAgsB,GAAA,GAEAhsB,EAAA,MAAArK,GAAAZ,EAAA,GAAAY,EAAAV,EAAA,GACA+K,EAAA,MAAArK,GAAAZ,EAAA,GAAAY,EAAAV,EAAA,GACA+K,EAAA,MAAArK,GAAAZ,EAAA,GAAAY,EAAAV,EAAA,GAEA+K,EAWA,QAAAmsB,GAAA/zB,EAAAg0B,EAAApsB,GAOA,MANAA,MAAA,GAAAgsB,GAAA,GAEAhsB,EAAA,GAAA5H,EAAA,GAAAg0B,EACApsB,EAAA,GAAA5H,EAAA,GAAAg0B,EACApsB,EAAA,GAAA5H,EAAA,GAAAg0B,EAEApsB,EAWA,QAAAqsB,GAAAj0B,EAAAg0B,EAAApsB,GAOA,MANAA,MAAA,GAAAgsB,GAAA,GAEAhsB,EAAA,GAAA5H,EAAA,GAAAg0B,EACApsB,EAAA,GAAA5H,EAAA,GAAAg0B,EACApsB,EAAA,GAAA5H,EAAA,GAAAg0B,EAEApsB,EAYA,QAAAypB,GAAA10B,EAAAE,EAAA+K,GACAA,KAAA,GAAAgsB,GAAA,EAEA,IAAA7G,GAAApwB,EAAA,GAAAE,EAAA,GAAAF,EAAA,GAAAE,EAAA,GACAmwB,EAAArwB,EAAA,GAAAE,EAAA,GAAAF,EAAA,GAAAE,EAAA,EAKA,OAJA+K,GAAA,GAAAjL,EAAA,GAAAE,EAAA,GAAAF,EAAA,GAAAE,EAAA,GACA+K,EAAA,GAAAmlB,EACAnlB,EAAA,GAAAolB,EAEAplB,EAWA,QAAAssB,GAAAv3B,EAAAE,GACA,MAAAF,GAAA,GAAAE,EAAA,GAAAF,EAAA,GAAAE,EAAA,GAAAF,EAAA,GAAAE,EAAA,GASA,QAAAa,GAAAsC,GACA,MAAAhE,MAAAglB,KAAAhhB,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IASA,QAAAm0B,GAAAn0B,GACA,MAAAA,GAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAUA,QAAAo0B,GAAAz3B,EAAAE,GACA,GAAA2zB,GAAA7zB,EAAA,GAAAE,EAAA,GACA4zB,EAAA9zB,EAAA,GAAAE,EAAA,GACA6zB,EAAA/zB,EAAA,GAAAE,EAAA,EACA,OAAAb,MAAAglB,KAAAwP,IAAAC,IAAAC,KAUA,QAAA2D,GAAA13B,EAAAE,GACA,GAAA2zB,GAAA7zB,EAAA,GAAAE,EAAA,GACA4zB,EAAA9zB,EAAA,GAAAE,EAAA,GACA6zB,EAAA/zB,EAAA,GAAAE,EAAA,EACA,OAAA2zB,KAAAC,IAAAC,IAUA,QAAA1lB,GAAArO,EAAAiL,GACAA,KAAA,GAAAgsB,GAAA,EAEA,IAAAU,GAAA33B,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GACA2G,EAAAtH,KAAAglB,KAAAsT,EAWA,OAVAhxB,GAAA,MACAsE,EAAA,GAAAjL,EAAA,GAAA2G,EACAsE,EAAA,GAAAjL,EAAA,GAAA2G,EACAsE,EAAA,GAAAjL,EAAA,GAAA2G,IAEAsE,EAAA,KACAA,EAAA,KACAA,EAAA,MAGAA,EAUA,QAAAsiB,GAAAlqB,EAAA4H,GAOA,MANAA,MAAA,GAAAgsB,GAAA,GAEAhsB,EAAA,IAAA5H,EAAA,GACA4H,EAAA,IAAA5H,EAAA,GACA4H,EAAA,IAAA5H,EAAA,GAEA4H,EAUA,QAAAuiB,GAAAnqB,EAAA4H,GAOA,MANAA,MAAA,GAAAgsB,GAAA,GAEAhsB,EAAA,GAAA5H,EAAA,GACA4H,EAAA,GAAA5H,EAAA,GACA4H,EAAA,GAAA5H,EAAA,GAEA4H,EAaA,QAAAslB,GAAAvwB,EAAAE,EAAA+K,GAOA,MANAA,MAAA,GAAAgsB,GAAA,GAEAhsB,EAAA,GAAAjL,EAAA,GAAAE,EAAA,GACA+K,EAAA,GAAAjL,EAAA,GAAAE,EAAA,GACA+K,EAAA,GAAAjL,EAAA,GAAAE,EAAA,GAEA+K,EAaA,QAAA2sB,GAAA53B,EAAAE,EAAA+K,GAOA,MANAA,MAAA,GAAAgsB,GAAA,GAEAhsB,EAAA,GAAAjL,EAAA,GAAAE,EAAA,GACA+K,EAAA,GAAAjL,EAAA,GAAAE,EAAA,GACA+K,EAAA,GAAAjL,EAAA,GAAAE,EAAA,GAEA+K,EAnTA,GAAAgsB,GAAA/3B,YAwTA,QACAg4B,MACA1J,OACA5uB,SACA81B,QACA+C,WACAC,aACAE,SACAN,YACAC,MACAJ,OACAp2B,SACAy2B,WACAJ,YACA7G,WACAhD,SACAlf,YACA8e,iBACAsH,aAEExxB,MAAAjI,EAAA4M,MAAA3M,EAAAD,QAAA6M,IAIF,SAAA5M,EAAAD,EAAAH,GAEA,GAAA+M,GAAAC,CAiEAD,IAAA/M,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAAAA,EAAA,SAgsDEiN,MAhsDFD,EAAA,SAAAM,EAAAO,EAAAV,EAAAC,GACA,YAYA,SAAA4vB,GAAAzrB,EAAAY,GACA,GAAA8qB,GAAA,CAsBA,OArBA1rB,GAAArI,KAAA,WACA,OAAAsG,GAAA,EAAuBA,EAAAhJ,UAAAN,SAAuBsJ,EAAA,CAC9C,GAAA7N,GAAA6E,UAAAgJ,EACA,IAAA7N,YAAA2C,QAAA3C,EAAAqP,QAAArP,EAAAqP,iBAAA+E,aACA,OAAAmnB,GAAA,EAA2BA,EAAAv7B,EAAAuE,SAAmBg3B,EAC9C3rB,EAAA0rB,KAAAt7B,EAAAu7B,OAGA3rB,GAAA0rB,KAAAt7B,IAIA4P,EAAA4rB,MAAA,SAAAC,GACAH,EAAAG,GAAA,GAEA7rB,EAAAY,gBACArR,OAAAC,eAAAwQ,EAAA,eACArQ,IAAA,WACA,MAAA0D,MAAAsB,OAAAtB,KAAAuN,cAAA,KAGAZ,EAyBA,QAAA8rB,GAAAlrB,EAAAsC,EAAA6oB,GAEA,MAAAN,GAAA,IADAM,GAAAj5B,cACA8N,EAAAsC,GAAAtC,GAGA,QAAAorB,GAAA58B,GACA,kBAAAA,EASA,QAAA68B,GAAAC,GAKA,QAAAC,GAAAC,GAIA,OAHAC,GAAAH,EAAAE,GACAxrB,EAAAyrB,EAAAzrB,cACA0rB,EAAAR,EAAAlrB,EAAAsC,EAAAmpB,EAAAj4B,aACA6J,EAAA,EAAuBA,EAAAiF,IAAkBjF,EAGzC,OAFAkN,GAAAzH,EAAAzF,GACAmE,EAAA+I,EAAAvK,EACA+qB,EAAA,EAAyBA,EAAA/qB,IAAoB+qB,EAC7CW,EAAA30B,KAAA00B,EAAAjqB,EAAAupB,GAGAY,GAAAH,GAAAE,EAfA,GAAA5oB,GAAAwoB,EAAAxoB,QACA6oB,KACArpB,EAAAQ,EAAA/O,MAkBA,OAFApF,QAAAuP,KAAAotB,GAAAntB,OAAAitB,GAAAhtB,QAAAmtB,GAEAI,EASA,QAAAC,GAAAN,GACA,GAAAA,EAAAxoB,QACA,oEAKA,QAFA+oB,GAAAP,EAAAQ,OACAC,EAAAF,EAAA93B,OACAsJ,EAAA,EAAqBA,EAAA0uB,EAAiB1uB,GAAA,GAEtC,GAAA2uB,GAAAH,EAAAxuB,EAAA,GACA4uB,EAAAJ,EAAAxuB,EAAA,GACA6uB,EAAAL,EAAAxuB,EAAA,GAEA8uB,EAAAN,EAAAxuB,EAAA,GACA+uB,EAAAP,EAAAxuB,EAAA,GACAgvB,EAAAR,EAAAxuB,EAAA,GAEAivB,EAAAT,EAAAxuB,EAAA,GACAkvB,EAAAV,EAAAxuB,EAAA,GACAmvB,EAAAX,EAAAxuB,EAAA,GAGAovB,EAAAT,EAAAG,EAAAG,EACAI,EAAAT,EAAAG,EAAAG,EACAI,EAAAT,EAAAG,EAAAG,EAGAz4B,EAAA1B,KAAAglB,KAAAoV,IAAAC,IAAAC,IAEAF,IAAA14B,EACA24B,GAAA34B,EACA44B,GAAA54B,EAGA83B,EAAAxuB,EAAA,GAAAovB,EACAZ,EAAAxuB,EAAA,GAAAqvB,EACAb,EAAAxuB,EAAA,GAAAsvB,EAEAd,EAAAxuB,EAAA,GAAAovB,EACAZ,EAAAxuB,EAAA,GAAAqvB,EACAb,EAAAxuB,EAAA,GAAAsvB,EAEAd,EAAAxuB,EAAA,GAAAovB,EACAZ,EAAAxuB,EAAA,GAAAqvB,EACAb,EAAAxuB,EAAA,GAAAsvB,EAGA,MAAArB,GAGA,QAAAsB,GAAA9tB,EAAA+tB,EAAAC,GAGA,OAFAnzB,GAAAmF,EAAA/K,OACAg5B,EAAA,GAAA76B,cAAA,GACAmL,EAAA,EAAqBA,EAAA1D,EAAU0D,GAAA,EAC/ByvB,EAAAD,GAAA/tB,EAAAzB,GAAAyB,EAAAzB,EAAA,GAAAyB,EAAAzB,EAAA,IAAA0vB,GACAjuB,EAAAzB,GAAA0vB,EAAA,GACAjuB,EAAAzB,EAAA,GAAA0vB,EAAA,GACAjuB,EAAAzB,EAAA,GAAA0vB,EAAA,GAIA,QAAAjD,GAAAC,EAAA1zB,EAAA4H,GACAA,KAAAhD,EAAArJ,QACA,IAAAi2B,GAAAxxB,EAAA,GACAyxB,EAAAzxB,EAAA,GACA0xB,EAAA1xB,EAAA,EAMA,OAJA4H,GAAA,GAAA4pB,EAAAkC,EAAA,GAAAjC,EAAAiC,EAAA,GAAAhC,EAAAgC,EAAA,GACA9rB,EAAA,GAAA4pB,EAAAkC,EAAA,GAAAjC,EAAAiC,EAAA,GAAAhC,EAAAgC,EAAA,GACA9rB,EAAA,GAAA4pB,EAAAkC,EAAA,GAAAjC,EAAAiC,EAAA,GAAAhC,EAAAgC,EAAA,IAEA9rB,EAUA,QAAA+uB,GAAAluB,EAAA+tB,GAEA,MADAD,GAAA9tB,EAAA+tB,EAAA7xB,EAAA6uB,oBACA/qB,EAWA,QAAAmuB,GAAAnuB,EAAA+tB,GAEA,MADAD,GAAA9tB,EAAA9D,EAAA0mB,QAAAmL,GAAA/C,GACAhrB,EAWA,QAAAouB,GAAApuB,EAAA+tB,GAEA,MADAD,GAAA9tB,EAAA+tB,EAAA7xB,EAAA4uB,gBACA9qB,EAaA,QAAAquB,GAAAxsB,EAAAksB,GAWA,MAVAl+B,QAAAuP,KAAAyC,GAAAvC,QAAA,SAAA5P,GACA,GAAAsQ,GAAA6B,EAAAnS,EACAA,GAAAqF,QAAA,UACAq5B,EAAApuB,EAAA+tB,GACQr+B,EAAAqF,QAAA,WAAArF,EAAAqF,QAAA,aACRm5B,EAAAluB,EAAA+tB,GACQr+B,EAAAqF,QAAA,YACRo5B,EAAAnuB,EAAA+tB,KAGAlsB,EA+DA,QAAAysB,GAAAh0B,EAAAuiB,EAAAC,GAKA,MAJAxiB,MAAA,EACAuiB,KAAA,EACAC,KAAA,EACAxiB,GAAA,IAEAi0B,UACArtB,cAAA,EACAF,MAAA6b,GAAA,EAAAviB,EAAAwiB,GAAA,EAAAxiB,EAAAuiB,EAAA,EAAAviB,EAAAwiB,GAAA,EAAAxiB,EAAAuiB,GAAA,EAAAviB,EAAAwiB,EAAA,EAAAxiB,EAAAuiB,EAAA,EAAAviB,EAAAwiB,EAAA,EAAAxiB,IAEA0yB,QAAA,yBACAwB,UAAA,iBACAxqB,SAAA,cAiDA,QAAAyqB,GAAA5vB,EAAAse,EAAAuR,EAAAC,EAAAZ,GACAlvB,KAAA,EACAse,KAAA,EACAuR,KAAA,EACAC,KAAA,EACAZ,KAAA7xB,EAAArJ,UAOA,QALA+7B,IAAAF,EAAA,IAAAC,EAAA,GACAE,EAAAzC,EAAA,EAAAwC,GACA7B,EAAAX,EAAA,EAAAwC,GACAE,EAAA1C,EAAA,EAAAwC,GAEA/E,EAAA,EAAoBA,GAAA8E,EAAwB9E,IAC5C,OAAAD,GAAA,EAAsBA,GAAA8E,EAAwB9E,IAAA,CAC9C,GAAAmF,GAAAnF,EAAA8E,EACAn3B,EAAAsyB,EAAA8E,CACAE,GAAA52B,KAAA4G,EAAAkwB,EAAA,GAAAlwB,EAAA,EAAAse,EAAA5lB,EAAA,GAAA4lB,GACA4P,EAAA90B,KAAA,OACA62B,EAAA72B,KAAA82B,EAAAx3B,GAOA,OAHAy3B,GAAAN,EAAA,EACA1qB,EAAAooB,EAAA,EAAAsC,EAAAC,EAAA,EAAA70B,aAEA+vB,EAAA,EAAoBA,EAAA8E,EAAuB9E,IAE3C,OAAAD,GAAA,EAAsBA,EAAA8E,EAAuB9E,IAG7C5lB,EAAA/L,MAAA4xB,EAAA,GAAAmF,EAAApF,GAAAC,EAAA,GAAAmF,EAAApF,GAAAC,EAAA,GAAAmF,EAAApF,EAAA,GAGA5lB,EAAA/L,MAAA4xB,EAAA,GAAAmF,EAAApF,GAAAC,EAAA,GAAAmF,EAAApF,EAAA,GAAAC,EAAA,GAAAmF,EAAApF,EAAA,EAUA,OANAyE,IACAE,SAAAM,EACA7B,OAAAD,EACAyB,SAAAM,EACA9qB,WACM+pB,GAmEN,QAAAkB,GAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA,GAAAL,GAAA,GAAAC,GAAA,EACA,KAAAK,OAAA,oDAGAJ,MAAA,EACAC,KAAA/7B,KAAAS,GACAu7B,KAAA,EACAC,KAAA,EAAAj8B,KAAAS,EAcA,QAZA07B,GAAAJ,EAAAD,EACAM,EAAAH,EAAAD,EAKAX,GAAAO,EAAA,IAAAC,EAAA,GACAP,EAAAzC,EAAA,EAAAwC,GACA7B,EAAAX,EAAA,EAAAwC,GACAE,EAAA1C,EAAA,EAAAwC,GAGAh3B,EAAA,EAAoBA,GAAAw3B,EAAyBx3B,IAC7C,OAAAgyB,GAAA,EAAsBA,GAAAuF,EAAuBvF,IAAA,CAE7C,GAAAmF,GAAAnF,EAAAuF,EACA53B,EAAAK,EAAAw3B,EACAQ,EAAAD,EAAAZ,EACAc,EAAAH,EAAAn4B,EACAu4B,EAAAv8B,KAAA81B,IAAAuG,GACAG,EAAAx8B,KAAA61B,IAAAwG,GACAI,EAAAz8B,KAAA81B,IAAAwG,GACAI,EAAA18B,KAAA61B,IAAAyG,GACAK,EAAAH,EAAAC,EACAG,EAAAF,EACAG,EAAAN,EAAAE,CACAnB,GAAA52B,KAAAi3B,EAAAgB,EAAAhB,EAAAiB,EAAAjB,EAAAkB,GACArD,EAAA90B,KAAAi4B,EAAAC,EAAAC,GACAtB,EAAA72B,KAAA,EAAA82B,EAAAx3B,GAMA,OAFA84B,GAAAlB,EAAA,EACAnrB,EAAAooB,EAAA,EAAA+C,EAAAC,EAAA,EAAAt1B,aACA8vB,EAAA,EAAoBA,EAAAuF,EAAsBvF,IAE1C,OAAAhyB,GAAA,EAAsBA,EAAAw3B,EAAwBx3B,IAG9CoM,EAAA/L,MAAAL,EAAA,GAAAy4B,EAAAzG,GAAAhyB,EAAA,GAAAy4B,EAAAzG,EAAA,GAAAhyB,EAAA,GAAAy4B,EAAAzG,GAGA5lB,EAAA/L,MAAAL,EAAA,GAAAy4B,EAAAzG,GAAAhyB,EAAA,GAAAy4B,EAAAzG,EAAA,GAAAhyB,EAAA,GAAAy4B,EAAAzG,EAAA,EAIA,QACA2E,SAAAM,EACA7B,OAAAD,EACAyB,SAAAM,EACA9qB,WAgDA,QAAAssB,GAAAh2B,GACAA,KAAA,CAeA,QAdAixB,GAAAjxB,EAAA,EAEAi2B,KAAAhF,uFAEAiF,IAAA,mDAEAC,IAAA,wBAGA5B,EAAAzC,EAAA,EADA,IAEAW,EAAAX,EAAA,EAFA,IAGA0C,EAAA1C,EAAA,EAHA,IAIApoB,EAAAooB,EAAA,KAAAtyB,aAEArC,EAAA,EAAoBA,EAAA,IAAOA,EAAA,CAE3B,OADAi5B,GAAAC,EAAAl5B,GACAF,EAAA,EAAsBA,EAAA,IAAOA,EAAA,CAC7B,GAAAg3B,GAAAgC,EAAAG,EAAAn5B,IACAy1B,EAAAwD,EAAA/4B,GACAm5B,EAAAH,EAAAl5B,EAIAs3B,GAAA52B,KAAAs2B,GACAxB,EAAA90B,KAAA+0B,GACA8B,EAAA72B,KAAA24B,GAGA,GAAAluB,GAAA,EAAAjL,CACAuM,GAAA/L,KAAAyK,EAAA,EAAAA,EAAA,EAAAA,EAAA,GACAsB,EAAA/L,KAAAyK,EAAA,EAAAA,EAAA,EAAAA,EAAA,GAGA,OACA6rB,SAAAM,EACA7B,OAAAD,EACAyB,SAAAM,EACA9qB,WAmEA,QAAA6sB,GAAAC,EAAAC,EAAAhyB,EAAAiyB,EAAAC,EAAAC,EAAAC,GACA,GAAAH,EAAA,EACA,KAAAvB,OAAA,0CAGA,IAAAwB,EAAA,EACA,KAAAxB,OAAA,4CAwBA,QArBA2B,OAAAp1B,KAAAk1B,KACAG,MAAAr1B,KAAAm1B,KAEAG,GAAAF,EAAA,MAAAC,EAAA,KAEAzC,GAAAoC,EAAA,IAAAC,EAAA,EAAAK,GACAzC,EAAAzC,EAAA,EAAAwC,GACA7B,EAAAX,EAAA,EAAAwC,GACAE,EAAA1C,EAAA,EAAAwC,GACA5qB,EAAAooB,EAAA,EAAA4E,GAAAC,EAAAK,GAAA,EAAAx3B,aAEAy3B,EAAAP,EAAA,EAGAQ,EAAAj+B,KAAAk+B,MAAAX,EAAAC,EAAAhyB,GACA2yB,EAAAn+B,KAAA61B,IAAAoI,GACAG,EAAAp+B,KAAA81B,IAAAmI,GAEAI,EAAAR,GAAA,IACAS,EAAAZ,GAAAI,EAAA,KAEAtH,EAAA6H,EAAyB7H,GAAA8H,IAAW9H,EAAA,CACpC,GAEA+H,GAFAv6B,EAAAwyB,EAAAkH,EACAr5B,EAAAmH,EAAAxH,CAEAwyB,GAAA,GACAnyB,EAAA,EACAL,EAAA,EACAu6B,EAAAhB,GACQ/G,EAAAkH,GACRr5B,EAAAmH,EACAxH,EAAA,EACAu6B,EAAAf,GAEAe,EAAAhB,EAAA/G,EAAAkH,GAAAF,EAAAD,IAEA,IAAA/G,OAAAkH,EAAA,IACAa,EAAA,EACAv6B,EAAA,GAEAK,GAAAmH,EAAA,CACA,QAAAR,GAAA,EAAuBA,EAAAgzB,IAAsBhzB,EAAA,CAC7C,GAAA8qB,GAAA91B,KAAA81B,IAAA9qB,EAAAhL,KAAAS,GAAA,EAAAg9B,GACA5H,EAAA71B,KAAA61B,IAAA7qB,EAAAhL,KAAAS,GAAA,EAAAg9B,EACAnC,GAAA52B,KAAAoxB,EAAAyI,EAAAl6B,EAAAwxB,EAAA0I,GACA/E,EAAA90B,KAAA8xB,EAAA,GAAAA,EAAAkH,EAAA,EAAA5H,EAAAqI,EAAA3H,EAAA,KAAAA,EAAAkH,EAAA,EAAAU,EAAA5H,EAAA,GAAAA,EAAAkH,EAAA,EAAA7H,EAAAsI,GACA5C,EAAA72B,KAAAsG,EAAAyyB,EAAA,EAAAz5B,IAIA,OAAAwyB,GAAA,EAAqBA,EAAAkH,EAAAK,IAAmCvH,EAExD,OAAAxrB,GAAA,EAAuBA,EAAAyyB,IAAyBzyB,EAEhDyF,EAAA/L,KAAAs5B,GAAAxH,EAAA,KAAAxrB,EAAAgzB,GAAAxH,EAAA,KAAAxrB,EAAAgzB,GAAAxH,EAAA,KAAAxrB,GACAyF,EAAA/L,KAAAs5B,GAAAxH,EAAA,KAAAxrB,EAAAgzB,GAAAxH,EAAA,KAAAxrB,EAAAgzB,GAAAxH,EAAA,KAAAxrB,EAIA,QACAgwB,SAAAM,EACA7B,OAAAD,EACAyB,SAAAM,EACA9qB,WAUA,QAAA+tB,GAAAC,EAAAC,GACAA,OAEA,QADAjxB,MACAzC,EAAA,EAAqBA,EAAAyzB,EAAA/8B,OAAqBsJ,GAAA,GAC1C,GAAA2zB,GAAAF,EAAAzzB,GACA+d,EAAA0V,EAAA93B,MAAAqE,EAAA,EAAAA,EAAA,EACA+d,GAAArkB,KAAAd,MAAAmlB,EAAA2V,EACA,QAAAhG,GAAA,EAAuBA,EAAAiG,IAAgBjG,EACvCjrB,EAAA/I,KAAAd,MAAA6J,EAAAsb,GAGA,MAAAtb,GAiCA,QAAAmxB,KAEA,GAAAtD,IAEA,6CAGA,gDAGA,gDAGA,mDAGA,sDAGA,sDAGA,6CAGA,sDAGA,sDAGA,mDAGA,mDAGA,mDAGA,mDAGA,sDAGA,sDAGA,8CAEAC,GAEA,gDAGA,gDAGA,gDAGA,wBAGA,wBAGA,wBAGA,wBAGA,wBAGA,wBAGA,wBAGA,wBAGA,wBAGA,wBAGA,wBAGA,wBAGA,yBAEA/B,EAAAgF,GAIA,SAKA,UAGA,QAGA,QAGA,SAGA,QAGA,QAGA,QAGA,SAGA,QAGA,SAGA,WAEAK,EAAAL,GAIA,cAKA,aAGA,aAGA,aAGA,aAGA,aAGA,aAGA,aAGA,aAGA,aAGA,aAGA,sBAEAM,EAAAxD,EAAA55B,OAAA,EAEA4M,GACA0sB,SAAAnC,EAAA,EAAAiG,GACA7D,SAAApC,EAAA,EAAAiG,GACArF,OAAAZ,EAAA,EAAAiG,GACA3Z,MAAA0T,EAAA,EAAAiG,EAAAx4B,YACAmK,QAAAooB,EAAA,EAAAiG,EAAA,EAAAv4B,aAGA+H,GAAA0sB,SAAAt2B,KAAA42B,GACAhtB,EAAA2sB,SAAAv2B,KAAA62B,GACAjtB,EAAAmrB,OAAA/0B,KAAA80B,GACAlrB,EAAA6W,MAAAzgB,KAAAm6B,EAEA,QAAA7zB,GAAA,EAAqBA,EAAA8zB,IAAe9zB,EACpCsD,EAAAmC,QAAA/L,KAAAsG,EAGA,OAAAsD,GAmDA,QAAAywB,GAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAgBA,QAAAxH,GAAAn3B,EAAAE,EAAA3D,GACA,MAAAyD,IAAAE,EAAAF,GAAAzD,EAGA,QAAAqiC,GAAAC,EAAAnJ,EAAAoJ,EAAAC,EAAAC,EAAAC,GACA,OAAAtJ,GAAA,EAAsBA,GAAA8I,EAAuB9I,IAAA,CAC7C,GAAAuJ,GAAAxJ,GAAAyJ,EAAA,GACA97B,EAAAsyB,EAAA8I,EACAW,EAAA,GAAAF,EAAA,IACAG,GAAAX,EAAAr7B,EAAAi8B,GAAAjgC,KAAAS,GACAvD,EAAA8C,KAAA81B,IAAAkK,GACA/jC,EAAA+D,KAAA61B,IAAAmK,GACArE,EAAA7D,EAAAkH,EAAAQ,EAAAtiC,GACAgjC,EAAAH,EAAAZ,EACAgB,EAAAlkC,EAAA+iC,EACAoB,EAAAljC,EAAAy+B,CACAL,GAAA52B,KAAAw7B,EAAAC,EAAAC,EACA,IAAAzjC,GAAAiM,EAAAivB,IAAAjvB,EAAAsoB,UAAA,EAAAh0B,EAAAjB,GAAAwjC,GAAAC,EACAlG,GAAA90B,KAAA/H,GACA4+B,EAAA72B,KAAAm7B,EAAAF,EAAAC,EAAA57B,IAgBA,QAAAq8B,GAAAC,EAAAC,GACA,OAAAjK,GAAA,EAAsBA,EAAA8I,IAAsB9I,EAE5C7lB,EAAA/L,KAAA47B,EAAAhK,EAAA,EAAAgK,EAAAhK,EAAA,EAAAiK,EAAAjK,EAAA,GAGA7lB,EAAA/L,KAAA47B,EAAAhK,EAAA,EAAAiK,EAAAjK,EAAA,EAAAiK,EAAAjK,EAAA,GAxDA,GAAA8I,GAAA,EACA,KAAAlD,OAAA,8BAGAmD,MAAA,EACAC,KAAA,CAkCA,QAhCAQ,GAAA,EAEAG,EAAAX,EAAAD,EACAhE,EAAA,GAAA+D,EAAA,MAAAU,GACAxE,EAAAzC,EAAA,EAAAwC,GACA7B,EAAAX,EAAA,EAAAwC,GACAE,EAAA1C,EAAA,EAAAwC,GA0BAhF,EAAA,EAAoBA,EAAAyJ,EAAuBzJ,IAAA,CAC3C,GAAAwJ,GAAA,GAAAxJ,GAAAyJ,EAAA,MACAP,GAAAN,EAAA5I,GAAA,oBACAkJ,EAAAN,EAAA5I,GAAA,QAAAwJ,EAAA,UACAN,EAAAL,EAAA7I,GAAA,oBACAkJ,EAAAL,EAAA7I,GAAA,QAAAwJ,EAAA,UAIA,GAAApvB,GAAAooB,EAAA,IAAAuG,GAAA,EAAAU,GAAAv5B,aAYAi6B,EAAApB,EAAA,CAUA,OARAiB,GAAA,EAAAG,EAAA,EAAAA,GAEAH,EAAA,EAAAG,EAAA,EAAAA,GAEAH,EAAA,EAAAG,EAAA,EAAAA,GAEAH,EAAA,EAAAG,EAAA,EAAAA,IAGAxF,SAAAM,EACA7B,OAAAD,EACAyB,SAAAM,EACA9qB,WAiDA,QAAAgwB,GAAA9E,EAAAnwB,EAAAiyB,EAAAC,EAAAG,EAAAC,GACA,MAAAR,GAAA3B,IAAAnwB,EAAAiyB,EAAAC,EAAAG,EAAAC,GA6CA,QAAA4C,GAAA/E,EAAAwD,EAAA1B,EAAAkD,EAAAC,EAAAC,GACA,GAAApD,EAAA,EACA,KAAAvB,OAAA,0CAGA,IAAAyE,EAAA,EACA,KAAAzE,OAAA,4CAGA0E,MAAA,EACAC,KAAA,EAAA7gC,KAAAS,EAWA,QAVAqgC,GAAAD,EAAAD,EAEAG,EAAAtD,EAAA,EACAuD,EAAAL,EAAA,EACAtF,EAAA0F,EAAAC,EACA1F,EAAAzC,EAAA,EAAAwC,GACA7B,EAAAX,EAAA,EAAAwC,GACAE,EAAA1C,EAAA,EAAAwC,GACA5qB,EAAAooB,EAAA,EAAA4E,EAAAkD,EAAA,EAAAp6B,aAEAI,EAAA,EAAwBA,EAAAq6B,IAAmBr6B,EAO3C,OANA3C,GAAA2C,EAAAg6B,EACAM,EAAAj9B,EAAAhE,KAAAS,GAAA,EACAygC,EAAAlhC,KAAA81B,IAAAmL,GACA1C,EAAA5C,EAAAuF,EAAA/B,EACA9E,EAAAr6B,KAAA61B,IAAAoL,GACA58B,EAAAg2B,EAAA8E,EACAgC,EAAA,EAAyBA,EAAAJ,IAAoBI,EAAA,CAC7C,GAAA3F,GAAA2F,EAAA1D,EACA2D,EAAAR,EAAApF,EAAAsF,EACAO,EAAArhC,KAAA81B,IAAAsL,GACAE,EAAAthC,KAAA61B,IAAAuL,GACA/K,EAAAgL,EAAA9C,EACAjI,EAAAgL,EAAA/C,EACAnE,EAAAiH,EAAAH,EACA5G,EAAAgH,EAAAJ,CACA5F,GAAA52B,KAAA2xB,EAAAhyB,EAAAiyB,GACAkD,EAAA90B,KAAA01B,EAAAC,EAAAC,GACAiB,EAAA72B,KAAA82B,EAAA,EAAAx3B,GAIA,OAAA2C,GAAA,EAAwBA,EAAAg6B,IAA0Bh6B,EAElD,OAAAw6B,GAAA,EAAyBA,EAAA1D,IAA2B0D,EAAA,CAEpD,GAAAI,GAAA,EAAAJ,EACAK,EAAA,EAAA76B,CACA8J,GAAA/L,KAAAq8B,EAAAp6B,EAAAw6B,EAAAJ,EAAAS,EAAAL,EAAAJ,EAAAp6B,EAAA46B,GACA9wB,EAAA/L,KAAAq8B,EAAAS,EAAAL,EAAAJ,EAAAS,EAAAD,EAAAR,EAAAp6B,EAAA46B,GAIA,OACAvG,SAAAM,EACA7B,OAAAD,EACAyB,SAAAM,EACA9qB,WAqFA,QAAAgxB,GAAA9F,EAAA+F,EAAAC,EAAAzC,EAAA0C,GACA,GAAAF,EAAA,EACA,KAAAxF,OAAA,+BAGAyF,MAAA,EACAC,KAAA,EACA1C,KAAA,CAgBA,QAZA7D,IAAAqG,EAAA,IAAAC,EAAA,GAEArG,EAAAzC,EAAA,EAAAwC,GACA7B,EAAAX,EAAA,EAAAwC,GACAE,EAAA1C,EAAA,EAAAwC,GACA5qB,EAAAooB,EAAA,EAAA8I,EAAAD,EAAA,EAAAn7B,aAEAs7B,EAAA,EACAC,EAAAnG,EAAAuD,EACA6C,EAAAL,EAAA,EAGAM,EAAA,EAAwBA,GAAAL,IAAiBK,EAAA,CAGzC,OAFAC,GAAA/C,EAAA4C,EAAA9hC,KAAAkiC,IAAAF,EAAAL,EAAAC,GAEA/lC,EAAA,EAAsBA,GAAA6lC,IAAgB7lC,EAAA,CACtC,GAAAwgC,GAAA,EAAAr8B,KAAAS,GAAA5E,EAAA6lC,EACArL,EAAA4L,EAAAjiC,KAAA61B,IAAAwG,GACA/F,EAAA2L,EAAAjiC,KAAA81B,IAAAuG,EAKA,IAHAf,EAAA52B,KAAA2xB,EAAA,EAAAC,GACAkD,EAAA90B,KAAA,OACA62B,EAAA72B,KAAA,EAAA7I,EAAA6lC,EAAAM,EAAAL,GACAK,EAAA,GAAAnmC,IAAA6lC,EAAA,CAIA,GAAA/gC,GAAAkhC,GAAAhmC,EAAA,GACAgF,EAAAghC,EAAAhmC,EACAI,EAAA4lC,EAAAhmC,EAAAkmC,EACA7lC,EAAA2lC,GAAAhmC,EAAA,GAAAkmC,CAGAtxB,GAAA/L,KAAA/D,EAAAE,EAAA5E,GACAwU,EAAA/L,KAAA/D,EAAA1E,EAAAC,IAIA2lC,GAAAH,EAAA,EAGA,OACA1G,SAAAM,EACA7B,OAAAD,EACAyB,SAAAM,EACA9qB,WASA,QAAA0xB,GAAArB,GACA,MAAA9gC,MAAAC,SAAA6gC,EAAA,EA6BA,QAAAsB,GAAAnJ,EAAAxf,GACAA,OACA,IAAAxJ,GAAAgpB,EAAA+B,SAAA/qB,YACAoyB,EAAAxJ,EAAA,EAAA5oB,EAAA3J,YACAg8B,EAAA7oB,EAAA6oB,MAAA,SAAApqB,EAAAihB,GACA,MAAAA,GAAA,EAAAgJ,EAAA,SAGA,IADAlJ,EAAA9T,MAAAkd,EACApJ,EAAAxoB,QAEA,OAAAzF,GAAA,EAAuBA,EAAAiF,IAAkBjF,EACzCq3B,EAAA39B,KAAA49B,EAAAt3B,EAAA,GAAAs3B,EAAAt3B,EAAA,GAAAs3B,EAAAt3B,EAAA,GAAAs3B,EAAAt3B,EAAA,QAMA,QAFAu3B,GAAA9oB,EAAA+oB,eAAA,EACAC,EAAAxyB,EAAAsyB,EACAv3B,EAAA,EAAuBA,EAAAy3B,IAAcz3B,EAGrC,OADAma,IAAAmd,EAAAt3B,EAAA,GAAAs3B,EAAAt3B,EAAA,GAAAs3B,EAAAt3B,EAAA,GAAAs3B,EAAAt3B,EAAA,IACA0tB,EAAA,EAAyBA,EAAA6J,IAAuB7J,EAChD2J,EAAA39B,KAAAygB,EAIA,OAAA8T,GAOA,QAAAyJ,GAAAjI,GACA,gBAAA7wB,GACA,GAAA0E,GAAAmsB,EAAA72B,MAAAxD,KAAAN,MAAA/C,UAAA4J,MAAA5K,KAAAiG,UAAA,GACA,OAAA8G,GAAA+H,wBAAAjH,EAAA0E,IAQA,QAAAq0B,GAAAlI,GACA,gBAAA7wB,GACA,GAAA0E,GAAAmsB,EAAA72B,MAAA,KAAA9D,MAAA/C,UAAA4J,MAAA5K,KAAAiG,UAAA,GACA,OAAA8G,GAAAyH,2BAAA3G,EAAA0E,IAcA,QAAAs0B,GAAAx7B,EAAAwE,EAAAi3B,EAAA1zB,GACAA,KAAA,CAEA,QADAzN,GAAA0F,EAAA1F,OACAsJ,EAAA,EAAqBA,EAAAtJ,IAAasJ,EAClCY,EAAAi3B,EAAA73B,GAAA5D,EAAA4D,GAAAmE,EAWA,QAAA2zB,GAAAC,EAAArhC,GACA,GAAAshC,GAAAx1B,EAAAu1B,GACAE,EAAA,GAAAD,GAAA7hC,YAAAO,GACAwhC,EAAAD,CAYA,OAVAD,GAAAr1B,eAAAq1B,EAAA/yB,aACAuoB,EAAAyK,EAAAD,EAAAr1B,eAGAo1B,EAAAt1B,OACAy1B,GACAz1B,KAAAw1B,GAEA55B,EAAAqI,oBAAAyxB,EAAAJ,EAAAG,IAEAA,EA4BA,QAAAE,GAAAC,GAyBA,QAAAC,GAAAnnC,GAGA,OADAonC,GADA7hC,EAAA,EAEAsJ,EAAA,EAAuBA,EAAAq4B,EAAA3hC,SAA2BsJ,EAAA,CAClD,GAAAsD,GAAA+0B,EAAAr4B,GACAw4B,EAAAl1B,EAAAnS,EAEAuF,IADA8L,EAAAg2B,GACA9hC,OACA6hC,IAAAC,EAAA/1B,OACA81B,EAAAC,GAGA,OACA9hC,SACA+hC,KAAAF,GAIA,QAAAG,GAAAvnC,EAAAwnC,EAAAV,GAGA,OAFAW,GAAA,EACAz0B,EAAA,EACAnE,EAAA,EAAuBA,EAAAq4B,EAAA3hC,SAA2BsJ,EAAA,CAClD,GAAAsD,GAAA+0B,EAAAr4B,GACAw4B,EAAAl1B,EAAAnS,GACAsQ,EAAAe,EAAAg2B,EACA,aAAArnC,GACAymC,EAAAn2B,EAAAw2B,EAAA9zB,EAAAy0B,GACAA,GAAAD,EAAA34B,IAEA43B,EAAAn2B,EAAAw2B,EAAA9zB,GAEAA,GAAA1C,EAAA/K,QAnDA,OAHAmiC,GADA/4B,KAIAE,EAAA,EAAqBA,EAAAq4B,EAAA3hC,SAA2BsJ,EAAA,CAChD,GAAAsD,GAAA+0B,EAAAr4B,EACA1O,QAAAuP,KAAAyC,GAAAvC,QAAA,SAAA5P,GAEA2O,EAAA3O,KACA2O,EAAA3O,OAEA0nC,GAAA,YAAA1nC,IACA0nC,EAAA1nC,EAEA,IAAAqnC,GAAAl1B,EAAAnS,GACAwR,EAAAI,EAAAy1B,EAAArnC,GACAsQ,EAAAe,EAAAg2B,GACAvzB,EAAAxD,EAAA/K,OAAAiM,CACA7C,GAAA3O,GAAAuI,KAAAuL,KAyCA,GAAA0zB,GAAA74B,EAAA+4B,GAEAC,IAOA,OANAxnC,QAAAuP,KAAAf,GAAAiB,QAAA,SAAA5P,GACA,GAAAugB,GAAA4mB,EAAAnnC,GACA+mC,EAAAJ,EAAApmB,EAAA+mB,KAAA/mB,EAAAhb,OACAgiC,GAAAvnC,EAAAwnC,EAAAn2B,EAAA01B,IACAY,EAAA3nC,GAAA+mC,IAEAY,EAaA,QAAAC,GAAAz1B,GACA,GAAAw1B,KAQA,OAPAxnC,QAAAuP,KAAAyC,GAAAvC,QAAA,SAAA5P,GACA,GAAAonC,GAAAj1B,EAAAnS,GACA4mC,EAAAv1B,EAAA+1B,GACAL,EAAAJ,EAAAS,EAAAR,EAAArhC,OACAkhC,GAAAG,EAAAv1B,EAAA01B,GAAA,GACAY,EAAA3nC,GAAA+mC,IAEAY,EA9oDA,GAAAt2B,GAAA1E,EAAAkI,UACAjD,EAAAjF,EAAAiI,kBAwhBAqsB,IAAA,UACA,UACA,UACA,UACA,UACA,UAi9BA+F,GAAA,yFAoKA,QACAa,oBAAArB,EAAA/D,GACAqF,iBAAAvB,EAAA9D,GACAA,oBACA/F,4BACAqL,qBAAAvB,EAAA5F,GACAoH,kBAAAzB,EAAA3F,GACAA,qBACAqH,sBAAAzB,EAAAzH,GACAmJ,mBAAA3B,EAAAxH,GACAA,sBACAoJ,uBAAA3B,EAAAjH,GACA6I,oBAAA7B,EAAAhH,GACAA,uBACA8I,8BAAA7B,EAAArF,GACAmH,2BAAA/B,EAAApF,GACAA,8BACAoH,uBAAA/B,EAAA5H,GACA4J,oBAAAjC,EAAA3H,GACAA,uBACA6J,wBAAAjC,EAAA5D,GACA8F,qBAAAnC,EAAA3D,GACAA,wBACA+F,yBAAAnC,EAAAlC,GACAsE,sBAAArC,EAAAjC,GACAA,yBACAuE,sBAAArC,EAAAjC,GACAuE,mBAAAvC,EAAAhC,GACAA,sBACAwE,qBAAAvC,EAAAlB,GACA0D,kBAAAzC,EAAAjB,GACAA,qBACAzI,kBACAO,iBACA6I,yBACAzH,qBACAC,kBACAC,oBACAC,mBACAsI,iBACAW,sBAEEngC,MAAAjI,EAAA4M,MAAA3M,EAAAD,QAAA6M,SNyeI,SAAU5M,EAAQD,EAASH,GOxkSjCG,EAAA+D,SAAAlE,EAAA,GACAG,EAAAypC,KAAA5pC,EAAA,IACAG,EAAA0pC,MAAA7pC,EAAA,IACAG,EAAA2pC,KAAA9pC,EAAA,IACAG,EAAA0D,KAAA7D,EAAA,IACAG,EAAA4pC,KAAA/pC,EAAA,IACAG,EAAA6pC,KAAAhqC,EAAA,IACAG,EAAA8pC,KAAAjqC,EAAA,IACAG,EAAA+pC,KAAAlqC,EAAA,KP0mSM,SAAUI,EAAQD,EAASH,GAEjC,YAEAc,QAAOC,eAAeZ,EAAS,cAAgBwB,OAAO,GQjpStD,IAAAwoC,GAAAnqC,EAAA,GAEAoqC,EAAApqC,EAAA,GACAkN,EAAAlN,EAAA,GAEAqqC,EAAArqC,EAAA,IAIMsqC,EAAgBH,EAAA1mC,kBAChB8mC,EAAgBD,EAAgB,EAChCE,EAAoC,EAApBL,EAAA1mC,kBAChBgnC,EAAgBD,EAAgB,EAChCE,EAAoC,EAApBP,EAAA1mC,kBAChBknC,EAAgBD,EAAgB,EAEhCE,EAAaT,EAAA9mC,eACbwnC,EAAaV,EAAA3mC,YAAc2mC,EAAA9mC,eAC3BynC,EAA2B,EAAdX,EAAA3mC,YAAkB2mC,EAAA9mC,eAC/B0nC,EAA2B,EAAdZ,EAAA3mC,YAAkB2mC,EAAA9mC,eAE/B2nC,EAAeb,EAAA7mC,iBACf2nC,EAAed,EAAA3mC,YAAc2mC,EAAA7mC,iBAC7B4nC,EAA6B,EAAdf,EAAA3mC,YAAkB2mC,EAAA7mC,iBACjC6nC,EAA6B,EAAdhB,EAAA3mC,YAAkB2mC,EAAA7mC,iBAEjC8nC,EAAejB,EAAA5mC,UACf8nC,EAAeD,EAAe,EAC9BE,EAAenB,EAAA3mC,YAAc2mC,EAAA5mC,UAC7BgoC,EAAeD,EAAe,EAC9BE,EAA6B,EAAdrB,EAAA3mC,YAAkB2mC,EAAA5mC,UACjCkoC,EAAeD,EAAe,EAC9BE,EAA6B,EAAdvB,EAAA3mC,YAAkB2mC,EAAA5mC,UACjCooC,EAAeD,EAAe,EAEpCE,EAAA,WAOI,QAAAA,GAAoBC,EAAqBC,EAAqBC,EAAyB9tB,GAAnErZ,KAAAinC,MAAqBjnC,KAAAknC,UANhClnC,KAAAonC,OAIDpnC,KAAAqnC,UAAW,EAGfrnC,KAAKsnC,WAAaH,GAAa,GAAI3B,GAAA+B,YAChCluB,GACC6tB,EAAQ3mB,cACJ0mB,EACA5tB,EAAQ4c,EACR5c,EAAQpV,EACRoV,EAAQ4c,EAAI5c,EAAQmuB,EACpBnuB,EAAQpV,EAAIoV,EAAQouB,EACpBpuB,EAAQquB,SACRruB,EAAQsuB,SACRtuB,EAAQquB,SAAWruB,EAAQmuB,EAC3BnuB,EAAQsuB,SAAWtuB,EAAQouB,EAC3BpuB,EAAQ6c,EACR7c,EAAQuuB,WAGhB5nC,KAAK6nC,SAAWxuB,GAAW6tB,EAAQY,iBAAiBb,GA2C5D,MAxCI/qC,QAAAC,eAAI6qC,EAAArqC,UAAA,aR6nSAL,IQ7nSJ,WACI,MAAO0D,MAAKsnC,YR+nSZjrC,YAAY,EACZD,cAAc,IQ7nSlBF,OAAAC,eAAI6qC,EAAArqC,UAAA,WRgoSAL,IQhoSJ,WACI,MAAO0D,MAAKqnC,URkoSZhrC,YAAY,EACZD,cAAc,IQhoSlBF,OAAAC,eAAI6qC,EAAArqC,UAAA,KRmoSAL,IQnoSJ,WACI,MAAO0D,MAAK6nC,SAAS5R,GRqoSrB55B,YAAY,EACZD,cAAc,IQnoSlBF,OAAAC,eAAI6qC,EAAArqC,UAAA,KRsoSAL,IQtoSJ,WACI,MAAO0D,MAAK6nC,SAAS5jC,GRwoSrB5H,YAAY,EACZD,cAAc,IQjoSlB4qC,EAAArqC,UAAAorC,OAAA,WACI,GAAG/nC,KAAKsnC,WAAWU,SAAWhoC,KAAKqnC,SAAS,CACxC,GAAI9mC,GAAIP,KAAK6nC,SACTjsC,EAAIoE,KAAKsnC,WAAWlN,OACpBnyB,EAAKjI,KAAKinC,GAEdjnC,MAAKknC,QAAQe,uBAAuBhgC,EAAG1H,EAAE01B,EAAE11B,EAAE0D,EAAE1D,EAAE01B,EAAE11B,EAAEinC,EAAEjnC,EAAE0D,EAAE1D,EAAEknC,EAAE7rC,GAC/DoE,KAAKknC,QAAQgB,KAAKjgC,EAAI1H,EAAE21B,GAAK,GAC7Bl2B,KAAKknC,QAAQiB,YAAYlgC,EAAI1H,EAAEqnC,WAAa,GAC5C5nC,KAAKknC,QAAQkB,MAAMngC,EAAI1H,EAAEmnC,SAAUnnC,EAAEonC,SAAUpnC,EAAEmnC,SAASnnC,EAAEinC,EAAGjnC,EAAEonC,SAASpnC,EAAEknC,GAC5EznC,KAAKqnC,UAAW,IAIxBL,EAAArqC,UAAA0rC,OAAA,WACIroC,KAAKsnC,WAAWgB,GAAKtoC,KAAK6nC,SAAS5R,EAAIj2B,KAAK6nC,SAASL,EAAE,EACvDxnC,KAAKsnC,WAAWiB,GAAKvoC,KAAK6nC,SAAS5jC,EAAIjE,KAAK6nC,SAASJ,EAAE,GAG/DT,KAEAwB,EAAA,WAaI,QAAAA,GAAoBC,EAAoCC,OAAA,KAAAA,MAAA,IAApC1oC,KAAAyoC,MAAoCzoC,KAAA0oC,YAPhD1oC,KAAA2oC,aAAepD,EAAAvnC,KACfgC,KAAA4oC,WAAa,EAOjB5oC,KAAK6oC,MAAQ,GAAI13B,aAAYu3B,EAAYnD,EAAAnoC,cAAgBmoC,EAAA3mC,aACzDoB,KAAK8oC,WAAa,GAAI3iC,aAAYnG,KAAK6oC,OACvC7oC,KAAK+oC,UAAY,GAAI7iC,YAAWlG,KAAK6oC,OACrC7oC,KAAKgpC,SAAW,GAAI7iC,aAAYuiC,EAAYnD,EAAAloC,cAuUpD,MAlUInB,QAAAC,eAAIqsC,EAAA7rC,UAAA,WR4nSAL,IQ5nSJ,WACI,MAAQ0D,MAAK4oC,WAAa5oC,KAAK2oC,aAAgB,GR8nS/CtsC,YAAY,EACZD,cAAc,IQ5nSlBF,OAAAC,eAAIqsC,EAAA7rC,UAAA,cR+nSAL,IQ/nSJ,WACI,IAAI0D,KAAKipC,YACL,KAAM,yDACV,OAAOjpC,MAAKipC,aRioSZ5sC,YAAY,EACZD,cAAc,IQ/nSlBF,OAAAC,eAAIqsC,EAAA7rC,UAAA,YRkoSAL,IQloSJ,WACI,MAAO0D,MAAK0oC,WRooSZrsC,YAAY,EACZD,cAAc,IQloSlBF,OAAAC,eAAIqsC,EAAA7rC,UAAA,QRqoSAL,IQroSJ,WACI,MAAO0D,MAAKkpC,QRuoSZ7sC,YAAY,EACZD,cAAc,IQroSlBF,OAAAC,eAAIqsC,EAAA7rC,UAAA,cRwoSAL,IQxoSJ,WACI,MAAO0D,MAAKkpC,OAAS3D,EAAAloC,cR0oSrBhB,YAAY,EACZD,cAAc,IQpoSlBosC,EAAA7rC,UAAAorC,OAAA,WAII,GAHG/nC,KAAKmpC,UACJnpC,KAAKmpC,SAASx9B,QAAQ,SAAA7O,GAAK,MAAAA,GAAEirC,WAE9B/nC,KAAKgoC,QAAQ,CACZ,GAAIx+B,GAAKxJ,KAAKyoC,IACVr8B,EAASpM,KAAKoQ,WAAWjC,QAAkB,SAAE/B,OAC7CiB,EAAO,GAAInH,YAAWlG,KAAK6oC,MAAO7oC,KAAK2oC,aAAc3oC,KAAK4oC,WAAa5oC,KAAK2oC,aAChFn/B,GAAG+C,WAAW/C,EAAGqD,aAAcT,GAC/B5C,EAAG0F,cAAc1F,EAAGqD,aAAc7M,KAAK2oC,aAAct7B,GAErDrN,KAAK2oC,aAAepD,EAAAvnC,KACpBgC,KAAK4oC,WAAa,IAI1BJ,EAAA7rC,UAAAysC,QAAA,WACIppC,KAAKyoC,IAAIY,aAAarpC,KAAKipC,YAAY96B,QAAkB,SAAE/B,QAC3DpM,KAAKyoC,IAAIY,aAAarpC,KAAKipC,YAAY96B,QAAkB,SAAE/B,QAC3DpM,KAAKyoC,IAAIY,aAAarpC,KAAKipC,YAAY96B,QAAiB,QAAE/B,QAE1DpM,KAAKgpC,SAAW,KAChBhpC,KAAK8oC,WAAa,KAClB9oC,KAAK+oC,UAAY,KACjB/oC,KAAK6oC,MAAQ,MAGjB3sC,OAAAC,eAAcqsC,EAAA7rC,UAAA,SRsoSVyK,IQtoSJ,SAAoBrK,GAChBiD,KAAKkpC,OAASnsC,EACXiD,KAAKipC,cACJjpC,KAAKipC,YAAYp5B,YAAc9S,EAAQwoC,EAAAloC,eRyoS3ChB,YAAY,EACZD,cAAc,IQtoSlBosC,EAAA7rC,UAAAwC,OAAA,WACI,GAAImqC,GAAehhC,EAAKoE,2BACpB1M,KAAKyoC,IAAKzoC,KAAK6oC,MAAO7oC,KAAKyoC,IAAI57B,aAAc7M,KAAKyoC,IAAIjpB,cAEpD+pB,EAAc,GAAI9D,GAAA+D,YAAYxpC,KAAKyoC,IA8CzC,OA5CAzoC,MAAKipC,aACDp5B,YAAa7P,KAAKkpC,OAASlpC,KAAKkpC,OAAS3D,EAAAloC,aAAe2C,KAAKgpC,SAAS1nC,OACtE+O,QAASk5B,EAAYn9B,OACrBmE,YAAag5B,EAAYh5B,YACzBpC,SACIysB,UACIxuB,OAAQk9B,EACR/7B,cAAeg4B,EAAAjoC,SACf6C,KAAMH,KAAKyoC,IAAIl5B,eACfT,OAAQy2B,EAAA3mC,YACRmQ,OAAQ,GAEZ06B,SACIr9B,OAAQk9B,EACR/7B,cAAeg4B,EAAAhoC,aACf4C,KAAMH,KAAKyoC,IAAIp5B,cACfP,OAAQy2B,EAAA3mC,YACRmQ,OAAQw2B,EAAA9mC,eACRmQ,WAAW,GAEf86B,WACIt9B,OAAQk9B,EACR/7B,cAAeg4B,EAAA7nC,mBACfyC,KAAMH,KAAKyoC,IAAIp5B,cACfP,OAAQy2B,EAAA3mC,YACRmQ,OAAQw2B,EAAA7mC,iBACRkQ,WAAW,GAEfisB,UACIzuB,OAAQk9B,EACR/7B,cAAeg4B,EAAA3nC,QACfuC,KAAMH,KAAKyoC,IAAIp5B,cACfP,OAAQy2B,EAAA3mC,YACRmQ,OAAQw2B,EAAA5mC,UACRiQ,WAAW,KAKvB5O,KAAKkpC,OAAS,EAEdlpC,KAAK2oC,aAAepD,EAAAvnC,KACpBgC,KAAK4oC,WAAa,EAEX5oC,MAGXwoC,EAAA7rC,UAAAgtC,YAAA,SAAY1hC,EAAY2hC,EAAYC,EAAYC,EAAYC,GACxD,GAAI9L,GAAQh2B,EAAKs9B,EAAAxmC,gBACbwI,EAAMvH,KAAK8oC,UAEfvhC,GAAI02B,EA5OU,GA4Oa2L,EAC3BriC,EAAI02B,EA5OU+L,GA4OaH,EAC3BtiC,EAAI02B,EAAMyH,GAAiBoE,EAC3BviC,EAAI02B,EAAM0H,GAAiBkE,EAC3BtiC,EAAI02B,EAAM2H,GAAiBkE,EAC3BviC,EAAI02B,EAAM4H,GAAiBkE,EAC3BxiC,EAAI02B,EAAM6H,GAAiB8D,EAC3BriC,EAAI02B,EAAM8H,GAAiBgE,EAE3B/pC,KAAKiqC,aAAahM,IAGtBuK,EAAA7rC,UAAAsrC,uBAAA,SAAuBhgC,EAAY2hC,EAAYC,EAAYC,EAAYC,EAAYnuC,GAC/E,GAAIqiC,GAAQh2B,EAAKs9B,EAAAxmC,gBACbwI,EAAMvH,KAAK8oC,UAEfvhC,GAAI02B,EA5PU,GA4PariC,EAAE,GAAKguC,EAAKhuC,EAAE,GAAKiuC,EAAKjuC,EAAE,IACrD2L,EAAI02B,EA5PU+L,GA4PapuC,EAAE,GAAKguC,EAAKhuC,EAAE,GAAKiuC,EAAKjuC,EAAE,IACrD2L,EAAI02B,EAAMyH,GAAiB9pC,EAAE,GAAKkuC,EAAKluC,EAAE,GAAKiuC,EAAKjuC,EAAE,IACrD2L,EAAI02B,EAAM0H,GAAiB/pC,EAAE,GAAKkuC,EAAKluC,EAAE,GAAKiuC,EAAKjuC,EAAE,IACrD2L,EAAI02B,EAAM2H,GAAiBhqC,EAAE,GAAKkuC,EAAKluC,EAAE,GAAKmuC,EAAKnuC,EAAE,IACrD2L,EAAI02B,EAAM4H,GAAiBjqC,EAAE,GAAKkuC,EAAKluC,EAAE,GAAKmuC,EAAKnuC,EAAE,IACrD2L,EAAI02B,EAAM6H,GAAiBlqC,EAAE,GAAKguC,EAAKhuC,EAAE,GAAKmuC,EAAKnuC,EAAE,IACrD2L,EAAI02B,EAAM8H,GAAiBnqC,EAAE,GAAKguC,EAAKhuC,EAAE,GAAKmuC,EAAKnuC,EAAE,KAGzD4sC,EAAA7rC,UAAAyrC,MAAA,SAAMngC,EAAY2hC,EAAYC,EAAYC,EAAYC,GAClD,GAAI9L,GAAQh2B,EAAKs9B,EAAAzmC,UACborC,EAAQlqC,KAAK+oC,SAEjBmB,GAAMjM,EAAMuI,GAAgBoD,EAC5BM,EAAMjM,EAAMwI,GAAgBoD,EAC5BK,EAAMjM,EAAMyI,GAAgBoD,EAAI,EAChCI,EAAMjM,EAAM0I,GAAgBkD,EAC5BK,EAAMjM,EAAM2I,GAAgBkD,EAAK,EACjCI,EAAMjM,EAAM4I,GAAgBkD,EAAK,EACjCG,EAAMjM,EAAM6I,GAAgB8C,EAC5BM,EAAMjM,EAAM8I,GAAgBgD,EAAK,EAEjC/pC,KAAKiqC,aAAahM,IAGtBuK,EAAA7rC,UAAAwrC,YAAA,SAAYlgC,EAAYkiC,GACpB,GAAIlM,GAAQh2B,EAAKs9B,EAAAzmC,UACborC,EAAQlqC,KAAK+oC,SAEjBmB,GAAMjM,EAAMmI,GAAgB+D,EAC5BD,EAAMjM,EAAMoI,GAAgB8D,EAC5BD,EAAMjM,EAAMqI,GAAgB6D,EAC5BD,EAAMjM,EAAMsI,GAAgB4D,EAE5BnqC,KAAKiqC,aAAahM,IAGtBuK,EAAA7rC,UAAAytC,YAAA,SAAYniC,GACR,MAAOjI,MAAK+oC,UAAU9gC,EAAKs9B,EAAAzmC,UAAYsnC,IAG3CoC,EAAA7rC,UAAAurC,KAAA,SAAKjgC,EAAYiuB,GACb,GAAI+H,GAAQh2B,EAAKs9B,EAAAzmC,UACborC,EAAQlqC,KAAK+oC,SAEjBmB,GAAMjM,EAAM+H,GAAc9P,EAC1BgU,EAAMjM,EAAMgI,GAAc/P,EAC1BgU,EAAMjM,EAAMiI,GAAchQ,EAC1BgU,EAAMjM,EAAMkI,GAAcjQ,EAE1Bl2B,KAAKiqC,aAAahM,IAGtBuK,EAAA7rC,UAAA0tC,KAAA,SAAKpiC,GACD,MAAOjI,MAAK+oC,UAAU9gC,EAAKs9B,EAAAzmC,UAAYknC,IAG3CwC,EAAA7rC,UAAA4jB,cAAA,SAActY,EAAY2hC,EAAYC,EAAYC,EAAYC,EAAYO,EAAcC,EAAcC,EAAcC,EAAcvU,EAAWiU,GACzI,GAAIO,GAAaziC,EAAKs9B,EAAAxmC,gBAClB4rC,EAAY1iC,EAAKs9B,EAAAzmC,UAEjB8rC,EAAS5qC,KAAK8oC,WACdoB,EAAQlqC,KAAK+oC,SAEjB6B,GAAOF,EA7TO,GA6TqBd,EACnCgB,EAAOF,EA7TOV,GA6TqBH,EACnCK,EAAMS,EAAU3E,GAAc9P,EAC9BgU,EAAMS,EAAUvE,GAAgB+D,EAChCD,EAAMS,EAAUnE,GAAgB8D,EAChCJ,EAAMS,EAAUlE,GAAgB8D,EAEhCK,EAAOF,EAAWhF,GAAiBoE,EACnCc,EAAOF,EAAW/E,GAAiBkE,EACnCK,EAAMS,EAAU1E,GAAc/P,EAC9BgU,EAAMS,EAAUtE,GAAgB8D,EAChCD,EAAMS,EAAUjE,GAAgB8D,EAAO,EACvCN,EAAMS,EAAUhE,GAAgB4D,EAEhCK,EAAOF,EAAW9E,GAAiBkE,EACnCc,EAAOF,EAAW7E,GAAiBkE,EACnCG,EAAMS,EAAUzE,GAAchQ,EAC9BgU,EAAMS,EAAUrE,GAAgB6D,EAChCD,EAAMS,EAAU/D,GAAgB4D,EAAO,EACvCN,EAAMS,EAAU9D,GAAgB4D,EAAO,EAEvCG,EAAOF,EAAW5E,GAAiB8D,EACnCgB,EAAOF,EAAW3E,GAAiBgE,EACnCG,EAAMS,EAAUxE,GAAcjQ,EAC9BgU,EAAMS,EAAUpE,GAAgB4D,EAChCD,EAAMS,EAAU7D,GAAgBwD,EAChCJ,EAAMS,EAAU5D,GAAgB0D,EAAO,EAEvCzqC,KAAKiqC,aAAaU,IAGtBnC,EAAA7rC,UAAA86B,IAAA,WAII,MAHGz3B,MAAKkpC,QAAUlpC,KAAK0oC,WACnB1oC,KAAK6qC,QAAyB,EAAjB7qC,KAAK0oC,WAEf1oC,KAAKkpC,UAGhBV,EAAA7rC,UAAAmuC,QAAA,SAAQC,GAEJ,IAAK,GADCC,MACGvvC,EAAI,EAAGA,EAAIsvC,EAAQtvC,IACxBuvC,EAAI1mC,KAAKtE,KAAKy3B,QAItB+Q,EAAA7rC,UAAAmrC,iBAAA,SAAiB7/B,GACb,GAAIyiC,GAAaziC,EAAKs9B,EAAAxmC,gBAClB4rC,EAAY1iC,EAAKs9B,EAAAzmC,UAEjB8rC,EAAS5qC,KAAK8oC,WACdoB,EAAQlqC,KAAK+oC,SAEjB,QACI9S,EAAG2U,EAAOF,EAlXA,GAmXVzmC,EAAG2mC,EAAOF,EAlXAV,GAmXVxC,EAAGoD,EAAOF,EAAW9E,GAAiBgF,EAAOF,EApXnC,GAqXVjD,EAAGmD,EAAOF,EAAW7E,GAAiB+E,EAAOF,EApXnCV,GAqXV9T,EAAGgU,EAAMS,EAAU3E,GACnB4B,UAAWsC,EAAMS,EAAUvE,GAC3BsB,SAAUwC,EAAMS,EAAUnE,GAC1BmB,SAAUuC,EAAMS,EAAUlE,KAIlC+B,EAAA7rC,UAAAsuC,kBAAA,SAAkBhjC,EAAYyX,GAC1B,GAAIirB,GAAY1iC,EAAKs9B,EAAAzmC,SACTkB,MAAK+oC,UACX3hC,IAAIsY,EAAQirB,GAElB3qC,KAAKiqC,aAAaU,IAGtBnC,EAAA7rC,UAAAuuC,kBAAA,SAAkBjjC,EAAYyX,GAC1B,GAAIirB,GAAY1iC,EAAKs9B,EAAAzmC,SACrB,OAAO,IAAIoH,YAAWlG,KAAK6oC,MAAO8B,EAAWpF,EAAAzmC,YAGjD0pC,EAAA7rC,UAAAwuC,UAAA,SAAUljC,GACNjI,KAAKugB,cAAc,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAG3CioB,EAAA7rC,UAAAstC,aAAA,SAAamB,GACTprC,KAAK2oC,aAAe/oC,KAAK2iB,IAAI6oB,EAAYprC,KAAK2oC,cAC9C3oC,KAAK4oC,WAAahpC,KAAKe,IAAIyqC,EAAW7F,EAAAzmC,UAAWkB,KAAK4oC,aAG1DJ,EAAA7rC,UAAA0uC,YAAA,WACIrrC,KAAK2oC,aAAe,EACpB3oC,KAAK4oC,WAAa5oC,KAAKkpC,OAAS3D,EAAAzmC,WAGpC0pC,EAAA7rC,UAAA2uC,aAAA,SAAarjC,EAAYk/B,EAAyB9tB,GAC9C,GAAIkyB,GAAS,GAAIvE,GAAe/+B,EAAIjI,KAAMmnC,EAAW9tB,EAGrD,OAFArZ,MAAKmpC,SAAWnpC,KAAKmpC,aACrBnpC,KAAKmpC,SAAS7kC,KAAKinC,GACZA,GAGH/C,EAAA7rC,UAAAkuC,QAAR,SAAgBlkC,GACZ,GAAGA,EAAO4+B,EAAAlmC,UACN,KAAM,6BAA6BkmC,EAAAlmC,UAAS,eAAesH,CAE/D3G,MAAK0oC,UAAY/hC,CACjB,IAAMyF,GAASpM,KAAKoQ,WAAWjC,QAAkB,SAAE/B,MAEnDqF,SAAQ+5B,IAAI,oBAAoB7kC,EAChC,IAAM8kC,GAAY,GAAIt6B,aAAYxK,EAAO4+B,EAAAzmC,WACnC4sC,EAAW,GAAIxlC,YAAWulC,EAChCC,GAAStkC,IAAIpH,KAAK+oC,WAElB/oC,KAAK8oC,WAAa,GAAI3iC,aAAYslC,GAClCzrC,KAAK+oC,UAAY2C,EACjB1rC,KAAK6oC,MAAQ4C,EAEbzrC,KAAKyoC,IAAIl8B,WAAWvM,KAAKyoC,IAAI57B,aAAcT,GAC3CpM,KAAKyoC,IAAIj8B,WAAWxM,KAAKyoC,IAAI57B,aAAc7M,KAAK6oC,MAAO7oC,KAAKyoC,IAAIjpB,eAG5DgpB,EAAA7rC,UAAAgvC,eAAR,SAAuB1V,EAAWhyB,EAAWrI,EAASmT,OAAA,KAAAA,MAAA,GAClD/O,KAAK8oC,WAAW/5B,GAAUnT,EAAE,GAAKq6B,EAAIr6B,EAAE,GAAKqI,EAAIrI,EAAE,IAClDoE,KAAK8oC,WAAW/5B,EAAO,GAAKnT,EAAE,GAAKq6B,EAAIr6B,EAAE,GAAKqI,EAAIrI,EAAE,KAI5D4sC,IAxVajtC,GAAAitC,cRu7SP,SAAUhtC,EAAQD,EAASH,GAEjC,YAEAc,QAAOC,eAAeZ,EAAS,cAAgBwB,OAAO,GSliTtD,IAAAC,GAAA5B,EAAA,GAEAmsC,EAAA,WAcI,QAAAA,KAXQvnC,KAAA4rC,QAAS,EACT5rC,KAAA6rC,SAAU,EAWd7rC,KAAK8rC,QAAU9uC,EAAAiC,KAAKE,SACpBa,KAAK+rC,MAAQ/uC,EAAAmoC,KAAKhmC,SAClBa,KAAKgsC,OAAShvC,EAAAqoC,KAAK4G,WAAW,EAAE,EAAE,GAClCjsC,KAAKksC,QAAUlvC,EAAAqoC,KAAK4G,WAAW,EAAE,EAAE,GACnCjsC,KAAKmsC,OAASnvC,EAAAqoC,KAAK4G,WAAW,EAAE,EAAE,GAClCjsC,KAAKosC,MAAQpvC,EAAAqoC,KAAK4G,WAAW,EAAE,EAAE,GACjCjsC,KAAKqsC,OAAS,EA0GtB,MAvGInwC,QAAAC,eAAIorC,EAAA5qC,UAAA,UTuhTAL,ISvhTJ,WAKI,MAJG0D,MAAK4rC,QACJ5rC,KAAKssC,eAETtsC,KAAKssC,eACEtsC,KAAK8rC,STwhTZzvC,YAAY,EACZD,cAAc,ISthTlBF,OAAAC,eAAIorC,EAAA5qC,UAAA,KTyhTAL,ISzhTJ,WACI,MAAO0D,MAAKgsC,OAAO,IT2hTnB5kC,ISxhTJ,SAAMrK,GACFiD,KAAKgsC,OAAO,GAAKjvC,EACjBiD,KAAK4rC,QAAS,GT0hTdvvC,YAAY,EACZD,cAAc,ISxhTlBF,OAAAC,eAAIorC,EAAA5qC,UAAA,KT2hTAL,IS3hTJ,WACI,MAAO0D,MAAKgsC,OAAO,IT6hTnB5kC,IS1hTJ,SAAMrK,GACFiD,KAAKgsC,OAAO,GAAKjvC,EACjBiD,KAAK4rC,QAAS,GT4hTdvvC,YAAY,EACZD,cAAc,IS1hTlBF,OAAAC,eAAIorC,EAAA5qC,UAAA,KT6hTAL,IS7hTJ,WACI,MAAO0D,MAAKgsC,OAAO,IT+hTnB5kC,IS5hTJ,SAAMrK,GACFiD,KAAKgsC,OAAO,GAAKjvC,EACjBiD,KAAK4rC,QAAS,GT8hTdvvC,YAAY,EACZD,cAAc,IS5hTlBF,OAAAC,eAAIorC,EAAA5qC,UAAA,OT+hTAL,IS/hTJ,WACI,MAAO0D,MAAKqsC,QTiiTZjlC,IS9hTJ,SAAQrK,GACJiD,KAAKqsC,OAAStvC,EACdiD,KAAK6rC,SAAU,EACf7rC,KAAK4rC,QAAS,GTgiTdvvC,YAAY,EACZD,cAAc,IS9hTlBF,OAAAC,eAAIorC,EAAA5qC,UAAA,MTiiTAL,ISjiTJ,WACI,MAAO0D,MAAKmsC,OAAO,ITmiTnB/kC,IShiTJ,SAAOrK,GACHiD,KAAKmsC,OAAO,GAAKpvC,EACjBiD,KAAK4rC,QAAS,GTkiTdvvC,YAAY,EACZD,cAAc,IShiTlBF,OAAAC,eAAIorC,EAAA5qC,UAAA,MTmiTAL,ISniTJ,WACI,MAAO0D,MAAKmsC,OAAO,ITqiTnB/kC,ISliTJ,SAAOrK,GACHiD,KAAKmsC,OAAO,GAAKpvC,EACjBiD,KAAK4rC,QAAS,GToiTdvvC,YAAY,EACZD,cAAc,ISliTlBF,OAAAC,eAAIorC,EAAA5qC,UAAA,MTqiTAL,ISriTJ,WACI,MAAO0D,MAAKksC,QAAQ,ITuiTpB9kC,ISpiTJ,SAAOrK,GACHiD,KAAKksC,QAAQ,GAAKnvC,EAClBiD,KAAK4rC,QAAS,GTsiTdvvC,YAAY,EACZD,cAAc,ISpiTlBF,OAAAC,eAAIorC,EAAA5qC,UAAA,MTuiTAL,ISviTJ,WACI,MAAO0D,MAAKksC,QAAQ,ITyiTpB9kC,IStiTJ,SAAOrK,GACHiD,KAAKksC,QAAQ,GAAKnvC,EAClBiD,KAAK4rC,QAAS,GTwiTdvvC,YAAY,EACZD,cAAc,IStiTlBF,OAAAC,eAAIorC,EAAA5qC,UAAA,WTyiTAL,ISziTJ,WACI,MAAO0D,MAAK4rC,QT2iTZvvC,YAAY,EACZD,cAAc,ISziTlBmrC,EAAA5qC,UAAAorC,OAAA,WACO/nC,KAAK4rC,QACJ5rC,KAAKssC,gBAIL/E,EAAA5qC,UAAA2vC,aAAR,WACOtsC,KAAK6rC,SACJ7rC,KAAKusC,aAETvvC,EAAAiC,KAAKutC,mCAAmCxsC,KAAK8rC,QAAQ9rC,KAAK+rC,MAAO/rC,KAAKgsC,OAAQhsC,KAAKmsC,OAAQnsC,KAAKksC,SAChGlsC,KAAK4rC,QAAS,GAGVrE,EAAA5qC,UAAA4vC,WAAR,WACIvvC,EAAAmoC,KAAKsH,aAAazsC,KAAK+rC,MAAO/rC,KAAKosC,MAAOpsC,KAAKqsC,QAC/CrsC,KAAK6rC,SAAU,GAEvBtE,IA/HahsC,GAAAgsC,eT6qTP,SAAU/rC,EAAQD,EAASH,GAEjC,YAEAc,QAAOC,eAAeZ,EAAS,cAAgBwB,OAAO,GUrrTtD,IAAAwoC,GAAAnqC,EAAA,GACAkN,EAAAlN,EAAA,IAEA,SAAYsxC,GACRA,IAAA,SACAA,IAAA,SACAA,IAAA,SACAA,IAAA,UAJQnxC,EAAAmxC,iBAAAnxC,EAAAmxC,mBAOZ,IAAAC,GAAA,WAOI,QAAAA,GAAsBlE,GAAAzoC,KAAAyoC,MAHXzoC,KAAA4sC,YAAcrH,EAAAvnC,KACfgC,KAAA6sC,UAAY,EAGlB7sC,KAAK8sC,SAAW,GAAI5mC,YAAWq/B,EAAAxnC,aAAewnC,EAAAxnC,aAAeiC,KAAK+sC,aA4G1E,MAzGI7wC,QAAAC,eAAWwwC,EAAAhwC,UAAA,WVkrTPL,IUlrTJ,WACI,IAAI0D,KAAKgtC,SACL,KAAM,2DAEV,OAAOhtC,MAAKgtC,UVmrTZ3wC,YAAY,EACZD,cAAc,IU9qTXuwC,EAAAhwC,UAAAswC,WAAP,WACI,MAAOjtC,MAAK8sC,UAGTH,EAAAhwC,UAAAuwC,WAAP,SAAkBnwC,GACdiD,KAAK8sC,SAAW/vC,EAChBiD,KAAKqrC,eAGTnvC,OAAAC,eAAWwwC,EAAAhwC,UAAA,cV+qTPL,IU/qTJ,WACI,OAAQ0D,KAAK6nC,SAAShnB,QAClB,IAAK7gB,MAAKyoC,IAAIhhB,KACV,MAAO,GACX,KAAKznB,MAAKyoC,IAAI0E,UACd,IAAKntC,MAAKyoC,IAAI2E,MACV,MAAO,EACX,KAAKptC,MAAKyoC,IAAIzb,IACV,MAAO,MVkrTf3wB,YAAY,EACZD,cAAc,IU/qTXuwC,EAAAhwC,UAAA0wC,YAAP,SAAmBC,GAKf,IAAK,GAJDvmB,GAAM/mB,KAAK8sC,SAEXS,GADI3tC,KAAK4tC,MACGxtC,KAAK+sC,aAEZtxC,EAAI,EAAGA,EAAIsrB,EAAIzlB,OAAQ7F,IAAK,CACjC,GAAIgyC,GAAOhyC,EAAI8xC,EACXG,EAAQ9tC,KAAK4tC,OAAO/xC,EAAIgyC,GAAQF,EACpCxmB,GAAItrB,GAAK6xC,EAAKI,EAAQnI,EAAAxnC,aAAc6B,KAAK4tC,MAAME,EAAQnI,EAAAxnC,cAAetC,EAAI8xC,GAG9EvtC,KAAKqrC,eAGFsB,EAAAhwC,UAAAwC,OAAP,WAII,MAHAa,MAAKgtC,SAAW1kC,EAAKya,cAAc/iB,KAAKyoC,IAAKzoC,KAAK6nC,UAClD7nC,KAAK6sC,UAAY,EACjB7sC,KAAK4sC,YAAcrH,EAAAvnC,KACZgC,MAGJ2sC,EAAAhwC,UAAAorC,OAAP,WACI,GAAI4F,GAAe3tC,KAAK6sC,UAAY7sC,KAAK4sC,WACzC,IAAGe,EAAe,EAAE,CAChB,GAAI1xC,GAAI+D,KAAK6nC,SACT+F,EAAa,GAAI1nC,YAAWlG,KAAK8sC,SAAS1gC,OAAQpM,KAAK4sC,YAAae,GACpEE,EAAU7tC,KAAK+sC,YAAcxH,EAAAxnC,aAE7BkG,EAAIrE,KAAK4tC,MAAMxtC,KAAK4sC,YAAciB,GAElCpG,EAAI7nC,KAAK4tC,MAAMG,EAAeE,EAClCp8B,SAAQ+5B,IAJA,EAIMvnC,EAFN,IAEUwjC,GAElBznC,KAAKyoC,IAAI9xB,YAAY1a,EAAEwF,OAAQzB,KAAKsW,SACpCtW,KAAKyoC,IAAIqF,cAAc7xC,EAAEwF,OAAQ,EAPzB,EAO+BwC,EAL/B,IAKqCwjC,EAAGxrC,EAAE4kB,OAAQ5kB,EAAEkE,KAAMytC,GAElE5tC,KAAK6sC,UAAY,EACjB7sC,KAAK4sC,YAAcrH,EAAAvnC,OAIpB2uC,EAAAhwC,UAAA0uC,YAAP,WACIrrC,KAAK4sC,YAAc,EACnB5sC,KAAK6sC,UAAY7sC,KAAK8sC,SAASxrC,QAG5BqrC,EAAAhwC,UAAAoxC,SAAP,SAAgB9X,EAAWhyB,GAIvB,IAAK,GAHDpI,GAAImE,KAAK+sC,YACT/B,EAAM,GAAItrC,OAAM7D,GAChBkT,GAAU9K,EAAIshC,EAAAxnC,aAAek4B,GAAKp6B,EAC7BJ,EAAI,EAAGA,EAAII,EAAGJ,IACnBuvC,EAAIvvC,GAAKuE,KAAK8sC,SAAS/9B,EAAOtT,EAElC,OAAOuvC,IAGJ2B,EAAAhwC,UAAAqxC,SAAP,SAAgB/X,EAAWhyB,EAAW8gB,GAClC,GAAIlpB,GAAImE,KAAK+sC,WACb,IAAGhoB,EAAMzjB,QAAUzF,EACf,KAAM,0CAA0CA,CAEpD,KAAK,GADDkT,IAAU9K,EAAIshC,EAAAxnC,aAAek4B,GAAKp6B,EAC7BJ,EAAI,EAAGA,EAAII,EAAGJ,IACnBuE,KAAK8sC,SAAS/9B,EAAOtT,GAAKspB,EAAMtpB,EAEpCuE,MAAKiuC,YAAYhqC,IAGd0oC,EAAAhwC,UAAAsxC,YAAP,SAAmBhqC,GACf,GAAIg6B,GAAQh6B,EAAIshC,EAAAxnC,aAAeiC,KAAK+sC,WACpC/sC,MAAK4sC,YAAchtC,KAAK2iB,IAAIviB,KAAK4sC,YAAa3O,GAC9Cj+B,KAAK6sC,UAAYjtC,KAAKe,IAAIX,KAAK6sC,UAAW5O,EAAQsH,EAAAxnC,aAAeiC,KAAK+sC,cAI9EJ,IApHsBpxC,GAAAoxC,gBVgyThB,SAAUnxC,EAAQD,EAASH,GAEjC,YWvxTAI,GAAAD,SACA2yC,EAAA,kBACAC,EAAA,aACAC,EAAA,GACAC,KAAA,aACAC,KAAA,eACAC,KAAA,aACAC,KAAA,sBACAC,KAAA,eACAC,KAAA,yBXmzTM,SAAUlzC,EAAQD,EAASH,GAEjC,YAEAc,QAAOC,eAAeZ,EAAS,cAAgBwB,OAAO,GACtD,IAAI4xC,GAAUvzC,EAAoB,EYt1TlCuzC,GAAA/pC,aAAAxJ,EAAA,GAAAG,GAEAozC,EAAA/pC,aAAAxJ,EAAA,IAAAG,GACAozC,EAAA/pC,aAAAxJ,EAAA,GAAAG,GACAozC,EAAA/pC,aAAAxJ,EAAA,IAAAG,GACAozC,EAAA/pC,aAAAxJ,EAAA,IAAAG,GACAozC,EAAA/pC,aAAAxJ,EAAA,IAAAG,GACAozC,EAAA/pC,aAAAxJ,EAAA,IAAAG,GACAozC,EAAA/pC,aAAAxJ,EAAA,GAAAG,GACAozC,EAAA/pC,aAAAxJ,EAAA,GAAAG,GACAozC,EAAA/pC,aAAAxJ,EAAA,IAAAG,GACAozC,EAAA/pC,aAAAxJ,EAAA,IAAAG,IZ21TM,SAAUC,EAAQD,EAASH,Gal1TjC,GAAAkE,GAAAlE,EAAA,GAMA8pC,IAOAA,GAAA/lC,OAAA,WACA,GAAAyvC,GAAA,GAAAtvC,GAAAE,WAAA,EAUA,OATAovC,GAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,GAUA1J,EAAA2J,SAAA,SAAAD,EAAAruC,GAUA,MATAquC,GAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,IACAquC,GASA1J,EAAA4J,MAAA,SAAAvuC,GACA,GAAAquC,GAAA,GAAAtvC,GAAAE,WAAA,EAUA,OATAovC,GAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,GAUA1J,EAAAnX,KAAA,SAAA6gB,EAAAruC,GAUA,MATAquC,GAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,GAiBA1J,EAAA+G,WAAA,SAAAhe,EAAAC,EAAAC,EAAAE,EAAAC,EAAAC,EAAAE,EAAAC,EAAAC,GACA,GAAAigB,GAAA,GAAAtvC,GAAAE,WAAA,EAUA,OATAovC,GAAA,GAAA3gB,EACA2gB,EAAA,GAAA1gB,EACA0gB,EAAA,GAAAzgB,EACAygB,EAAA,GAAAvgB,EACAugB,EAAA,GAAAtgB,EACAsgB,EAAA,GAAArgB,EACAqgB,EAAA,GAAAngB,EACAmgB,EAAA,GAAAlgB,EACAkgB,EAAA,GAAAjgB,EACAigB,GAkBA1J,EAAA99B,IAAA,SAAAwnC,EAAA3gB,EAAAC,EAAAC,EAAAE,EAAAC,EAAAC,EAAAE,EAAAC,EAAAC,GAUA,MATAigB,GAAA,GAAA3gB,EACA2gB,EAAA,GAAA1gB,EACA0gB,EAAA,GAAAzgB,EACAygB,EAAA,GAAAvgB,EACAugB,EAAA,GAAAtgB,EACAsgB,EAAA,GAAArgB,EACAqgB,EAAA,GAAAngB,EACAmgB,EAAA,GAAAlgB,EACAkgB,EAAA,GAAAjgB,EACAigB,GASA1J,EAAAhmC,SAAA,SAAA0vC,GAUA,MATAA,GAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,GAUA1J,EAAAlX,UAAA,SAAA4gB,EAAAruC,GAEA,GAAAquC,IAAAruC,EAAA,CACA,GAAAywB,GAAAzwB,EAAA,GAAA0wB,EAAA1wB,EAAA,GAAA8wB,EAAA9wB,EAAA,EACAquC,GAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAA5d,EACA4d,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAA3d,EACA2d,EAAA,GAAAvd,MAEAud,GAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,EAGA,OAAAquC,IAUA1J,EAAA6J,OAAA,SAAAH,EAAAruC,GACA,GAAAwwB,GAAAxwB,EAAA,GAAAywB,EAAAzwB,EAAA,GAAA0wB,EAAA1wB,EAAA,GACA4wB,EAAA5wB,EAAA,GAAA6wB,EAAA7wB,EAAA,GAAA8wB,EAAA9wB,EAAA,GACAgxB,EAAAhxB,EAAA,GAAAixB,EAAAjxB,EAAA,GAAAkxB,EAAAlxB,EAAA,GAEAyxB,EAAAP,EAAAL,EAAAC,EAAAG,EACAY,GAAAX,EAAAN,EAAAE,EAAAE,EACAiB,EAAAhB,EAAAL,EAAAC,EAAAG,EAGAyd,EAAAje,EAAAiB,EAAAhB,EAAAoB,EAAAnB,EAAAuB,CAEA,OAAAwc,IAGAA,EAAA,EAAAA,EAEAJ,EAAA,GAAA5c,EAAAgd,EACAJ,EAAA,KAAAnd,EAAAT,EAAAC,EAAAO,GAAAwd,EACAJ,EAAA,IAAAvd,EAAAL,EAAAC,EAAAG,GAAA4d,EACAJ,EAAA,GAAAxc,EAAA4c,EACAJ,EAAA,IAAAnd,EAAAV,EAAAE,EAAAM,GAAAyd,EACAJ,EAAA,KAAAvd,EAAAN,EAAAE,EAAAE,GAAA6d,EACAJ,EAAA,GAAApc,EAAAwc,EACAJ,EAAA,KAAApd,EAAAT,EAAAC,EAAAO,GAAAyd,EACAJ,EAAA,IAAAxd,EAAAL,EAAAC,EAAAG,GAAA6d,EACAJ,GAbA,MAuBA1J,EAAA+J,QAAA,SAAAL,EAAAruC,GACA,GAAAwwB,GAAAxwB,EAAA,GAAAywB,EAAAzwB,EAAA,GAAA0wB,EAAA1wB,EAAA,GACA4wB,EAAA5wB,EAAA,GAAA6wB,EAAA7wB,EAAA,GAAA8wB,EAAA9wB,EAAA,GACAgxB,EAAAhxB,EAAA,GAAAixB,EAAAjxB,EAAA,GAAAkxB,EAAAlxB,EAAA,EAWA,OATAquC,GAAA,GAAAxd,EAAAK,EAAAJ,EAAAG,EACAod,EAAA,GAAA3d,EAAAO,EAAAR,EAAAS,EACAmd,EAAA,GAAA5d,EAAAK,EAAAJ,EAAAG,EACAwd,EAAA,GAAAvd,EAAAE,EAAAJ,EAAAM,EACAmd,EAAA,GAAA7d,EAAAU,EAAAR,EAAAM,EACAqd,EAAA,GAAA3d,EAAAE,EAAAJ,EAAAM,EACAud,EAAA,GAAAzd,EAAAK,EAAAJ,EAAAG,EACAqd,EAAA,GAAA5d,EAAAO,EAAAR,EAAAS,EACAod,EAAA,GAAA7d,EAAAK,EAAAJ,EAAAG,EACAyd,GASA1J,EAAAgK,YAAA,SAAA3uC,GACA,GAAAwwB,GAAAxwB,EAAA,GAAAywB,EAAAzwB,EAAA,GAAA0wB,EAAA1wB,EAAA,GACA4wB,EAAA5wB,EAAA,GAAA6wB,EAAA7wB,EAAA,GAAA8wB,EAAA9wB,EAAA,GACAgxB,EAAAhxB,EAAA,GAAAixB,EAAAjxB,EAAA,GAAAkxB,EAAAlxB,EAAA,EAEA,OAAAwwB,IAAAU,EAAAL,EAAAC,EAAAG,GAAAR,IAAAS,EAAAN,EAAAE,EAAAE,GAAAN,GAAAO,EAAAL,EAAAC,EAAAG,IAWA2T,EAAApU,SAAA,SAAA8d,EAAAruC,EAAAE,GACA,GAAAswB,GAAAxwB,EAAA,GAAAywB,EAAAzwB,EAAA,GAAA0wB,EAAA1wB,EAAA,GACA4wB,EAAA5wB,EAAA,GAAA6wB,EAAA7wB,EAAA,GAAA8wB,EAAA9wB,EAAA,GACAgxB,EAAAhxB,EAAA,GAAAixB,EAAAjxB,EAAA,GAAAkxB,EAAAlxB,EAAA,GAEAwxB,EAAAtxB,EAAA,GAAAuxB,EAAAvxB,EAAA,GAAAwxB,EAAAxxB,EAAA,GACA0xB,EAAA1xB,EAAA,GAAA2xB,EAAA3xB,EAAA,GAAA4xB,EAAA5xB,EAAA,GACA8xB,EAAA9xB,EAAA,GAAA+xB,EAAA/xB,EAAA,GAAAgyB,EAAAhyB,EAAA,EAaA,OAXAmuC,GAAA,GAAA7c,EAAAhB,EAAAiB,EAAAb,EAAAc,EAAAV,EACAqd,EAAA,GAAA7c,EAAAf,EAAAgB,EAAAZ,EAAAa,EAAAT,EACAod,EAAA,GAAA7c,EAAAd,EAAAe,EAAAX,EAAAY,EAAAR,EAEAmd,EAAA,GAAAzc,EAAApB,EAAAqB,EAAAjB,EAAAkB,EAAAd,EACAqd,EAAA,GAAAzc,EAAAnB,EAAAoB,EAAAhB,EAAAiB,EAAAb,EACAod,EAAA,GAAAzc,EAAAlB,EAAAmB,EAAAf,EAAAgB,EAAAZ,EAEAmd,EAAA,GAAArc,EAAAxB,EAAAyB,EAAArB,EAAAsB,EAAAlB,EACAqd,EAAA,GAAArc,EAAAvB,EAAAwB,EAAApB,EAAAqB,EAAAjB,EACAod,EAAA,GAAArc,EAAAtB,EAAAuB,EAAAnB,EAAAoB,EAAAhB,EACAmd,GAOA1J,EAAAiK,IAAAjK,EAAApU,SAUAoU,EAAA/P,UAAA,SAAAyZ,EAAAruC,EAAAqD,GACA,GAAAmtB,GAAAxwB,EAAA,GAAAywB,EAAAzwB,EAAA,GAAA0wB,EAAA1wB,EAAA,GACA4wB,EAAA5wB,EAAA,GAAA6wB,EAAA7wB,EAAA,GAAA8wB,EAAA9wB,EAAA,GACAgxB,EAAAhxB,EAAA,GAAAixB,EAAAjxB,EAAA,GAAAkxB,EAAAlxB,EAAA,GACA01B,EAAAryB,EAAA,GAAAK,EAAAL,EAAA,EAaA,OAXAgrC,GAAA,GAAA7d,EACA6d,EAAA,GAAA5d,EACA4d,EAAA,GAAA3d,EAEA2d,EAAA,GAAAzd,EACAyd,EAAA,GAAAxd,EACAwd,EAAA,GAAAvd,EAEAud,EAAA,GAAA3Y,EAAAlF,EAAA9sB,EAAAktB,EAAAI,EACAqd,EAAA,GAAA3Y,EAAAjF,EAAA/sB,EAAAmtB,EAAAI,EACAod,EAAA,GAAA3Y,EAAAhF,EAAAhtB,EAAAotB,EAAAI,EACAmd,GAWA1J,EAAAkK,OAAA,SAAAR,EAAAruC,EAAA8uC,GACA,GAAAte,GAAAxwB,EAAA,GAAAywB,EAAAzwB,EAAA,GAAA0wB,EAAA1wB,EAAA,GACA4wB,EAAA5wB,EAAA,GAAA6wB,EAAA7wB,EAAA,GAAA8wB,EAAA9wB,EAAA,GACAgxB,EAAAhxB,EAAA,GAAAixB,EAAAjxB,EAAA,GAAAkxB,EAAAlxB,EAAA,GAEAzD,EAAA8C,KAAA81B,IAAA2Z,GACAxzC,EAAA+D,KAAA61B,IAAA4Z,EAaA,OAXAT,GAAA,GAAA/yC,EAAAk1B,EAAAj0B,EAAAq0B,EACAyd,EAAA,GAAA/yC,EAAAm1B,EAAAl0B,EAAAs0B,EACAwd,EAAA,GAAA/yC,EAAAo1B,EAAAn0B,EAAAu0B,EAEAud,EAAA,GAAA/yC,EAAAs1B,EAAAr0B,EAAAi0B,EACA6d,EAAA,GAAA/yC,EAAAu1B,EAAAt0B,EAAAk0B,EACA4d,EAAA,GAAA/yC,EAAAw1B,EAAAv0B,EAAAm0B,EAEA2d,EAAA,GAAArd,EACAqd,EAAA,GAAApd,EACAod,EAAA,GAAAnd,EACAmd,GAWA1J,EAAAhO,MAAA,SAAA0X,EAAAruC,EAAAqD,GACA,GAAAqyB,GAAAryB,EAAA,GAAAK,EAAAL,EAAA,EAaA,OAXAgrC,GAAA,GAAA3Y,EAAA11B,EAAA,GACAquC,EAAA,GAAA3Y,EAAA11B,EAAA,GACAquC,EAAA,GAAA3Y,EAAA11B,EAAA,GAEAquC,EAAA,GAAA3qC,EAAA1D,EAAA,GACAquC,EAAA,GAAA3qC,EAAA1D,EAAA,GACAquC,EAAA,GAAA3qC,EAAA1D,EAAA,GAEAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,GAcA1J,EAAAoK,gBAAA,SAAAV,EAAAhrC,GAUA,MATAgrC,GAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,GAAAhrC,EAAA,GACAgrC,EAAA,GAAAhrC,EAAA,GACAgrC,EAAA,KACAA,GAcA1J,EAAAqK,aAAA,SAAAX,EAAAS,GACA,GAAAvyC,GAAA8C,KAAA81B,IAAA2Z,GAAAxzC,EAAA+D,KAAA61B,IAAA4Z,EAaA,OAXAT,GAAA,GAAA/yC,EACA+yC,EAAA,GAAA9xC,EACA8xC,EAAA,KAEAA,EAAA,IAAA9xC,EACA8xC,EAAA,GAAA/yC,EACA+yC,EAAA,KAEAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,GAcA1J,EAAAsK,YAAA,SAAAZ,EAAAhrC,GAYA,MAXAgrC,GAAA,GAAAhrC,EAAA,GACAgrC,EAAA,KACAA,EAAA,KAEAA,EAAA,KACAA,EAAA,GAAAhrC,EAAA,GACAgrC,EAAA,KAEAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,GAUA1J,EAAAuK,UAAA,SAAAb,EAAAruC,GAYA,MAXAquC,GAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,KAEAA,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,KAEAA,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,KACAA,GAWA1J,EAAAwK,SAAA,SAAAd,EAAAvpC,GACA,GAAA4wB,GAAA5wB,EAAA,GAAApB,EAAAoB,EAAA,GAAA6wB,EAAA7wB,EAAA,GAAAmiC,EAAAniC,EAAA,GACAykC,EAAA7T,IACA8T,EAAA9lC,IACA0rC,EAAAzZ,IAEAC,EAAAF,EAAA6T,EACA8F,EAAA3rC,EAAA6lC,EACA1T,EAAAnyB,EAAA8lC,EACA8F,EAAA3Z,EAAA4T,EACAgG,EAAA5Z,EAAA6T,EACA1T,EAAAH,EAAAyZ,EACAI,EAAAvI,EAAAsC,EACAkG,EAAAxI,EAAAuC,EACAkG,EAAAzI,EAAAmI,CAcA,OAZAf,GAAA,KAAAxY,EAAAC,EACAuY,EAAA,GAAAgB,EAAAK,EACArB,EAAA,GAAAiB,EAAAG,EAEApB,EAAA,GAAAgB,EAAAK,EACArB,EAAA,KAAAzY,EAAAE,EACAuY,EAAA,GAAAkB,EAAAC,EAEAnB,EAAA,GAAAiB,EAAAG,EACApB,EAAA,GAAAkB,EAAAC,EACAnB,EAAA,KAAAzY,EAAAC,EAEAwY,GAWA1J,EAAAgL,eAAA,SAAAtB,EAAAruC,GACA,GAAAwwB,GAAAxwB,EAAA,GAAAywB,EAAAzwB,EAAA,GAAA0wB,EAAA1wB,EAAA,GAAA2wB,EAAA3wB,EAAA,GACA4wB,EAAA5wB,EAAA,GAAA6wB,EAAA7wB,EAAA,GAAA8wB,EAAA9wB,EAAA,GAAA+wB,EAAA/wB,EAAA,GACAgxB,EAAAhxB,EAAA,GAAAixB,EAAAjxB,EAAA,GAAAkxB,EAAAlxB,EAAA,IAAAmxB,EAAAnxB,EAAA,IACAoxB,EAAApxB,EAAA,IAAAqxB,EAAArxB,EAAA,IAAAsxB,EAAAtxB,EAAA,IAAAuxB,EAAAvxB,EAAA,IAEAwxB,EAAAhB,EAAAK,EAAAJ,EAAAG,EACAa,EAAAjB,EAAAM,EAAAJ,EAAAE,EACAc,EAAAlB,EAAAO,EAAAJ,EAAAC,EACAe,EAAAlB,EAAAK,EAAAJ,EAAAG,EACA+e,EAAAnf,EAAAM,EAAAJ,EAAAE,EACAgf,EAAAnf,EAAAK,EAAAJ,EAAAG,EACAgf,EAAA9e,EAAAK,EAAAJ,EAAAG,EACA2e,EAAA/e,EAAAM,EAAAJ,EAAAE,EACA4e,EAAAhf,EAAAO,EAAAJ,EAAAC,EACA6e,EAAAhf,EAAAK,EAAAJ,EAAAG,EACAO,EAAAX,EAAAM,EAAAJ,EAAAE,EACAQ,EAAAX,EAAAK,EAAAJ,EAAAG,EAGAmd,EAAAjd,EAAAK,EAAAJ,EAAAG,EAAAF,EAAAue,EAAAte,EAAAqe,EAAAJ,EAAAG,EAAAF,EAAAC,CAEA,OAAArB,IAGAA,EAAA,EAAAA,EAEAJ,EAAA,IAAAxd,EAAAgB,EAAAf,EAAAc,EAAAb,EAAAkf,GAAAxB,EACAJ,EAAA,IAAAvd,EAAAkf,EAAApf,EAAAiB,EAAAd,EAAAgf,GAAAtB,EACAJ,EAAA,IAAAzd,EAAAgB,EAAAf,EAAAmf,EAAAjf,EAAA+e,GAAArB,EAEAJ,EAAA,IAAA3d,EAAAkB,EAAAnB,EAAAoB,EAAAlB,EAAAsf,GAAAxB,EACAJ,EAAA,IAAA7d,EAAAqB,EAAAnB,EAAAsf,EAAArf,EAAAof,GAAAtB,EACAJ,EAAA,IAAA5d,EAAAuf,EAAAxf,EAAAoB,EAAAjB,EAAAmf,GAAArB,EAEAJ,EAAA,IAAAhd,EAAAwe,EAAAve,EAAAse,EAAAre,EAAAI,GAAA8c,EACAJ,EAAA,IAAA/c,EAAAI,EAAAN,EAAAye,EAAAte,EAAAE,GAAAgd,EACAJ,EAAA,IAAAjd,EAAAwe,EAAAve,EAAAK,EAAAH,EAAAC,GAAAid,EAEAJ,GAhBA,MAyBA1J,EAAAuL,IAAA,SAAAlwC,GACA,cAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QACAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QACAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QASA2kC,EAAAwL,KAAA,SAAAnwC,GACA,MAAAX,MAAAglB,KAAAhlB,KAAAkiC,IAAAvhC,EAAA,MAAAX,KAAAkiC,IAAAvhC,EAAA,MAAAX,KAAAkiC,IAAAvhC,EAAA,MAAAX,KAAAkiC,IAAAvhC,EAAA,MAAAX,KAAAkiC,IAAAvhC,EAAA,MAAAX,KAAAkiC,IAAAvhC,EAAA,MAAAX,KAAAkiC,IAAAvhC,EAAA,MAAAX,KAAAkiC,IAAAvhC,EAAA,MAAAX,KAAAkiC,IAAAvhC,EAAA,QAWA2kC,EAAAzN,IAAA,SAAAmX,EAAAruC,EAAAE,GAUA,MATAmuC,GAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,GAWA1J,EAAAlQ,SAAA,SAAA4Z,EAAAruC,EAAAE,GAUA,MATAmuC,GAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,GAOA1J,EAAAyL,IAAAzL,EAAAlQ,SAUAkQ,EAAA0L,eAAA,SAAAhC,EAAAruC,EAAAE,GAUA,MATAmuC,GAAA,GAAAruC,EAAA,GAAAE,EACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EACAmuC,GAYA1J,EAAA2L,qBAAA,SAAAjC,EAAAruC,EAAAE,EAAAy2B,GAUA,MATA0X,GAAA,GAAAruC,EAAA,GAAAE,EAAA,GAAAy2B,EACA0X,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GAAAy2B,EACA0X,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GAAAy2B,EACA0X,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GAAAy2B,EACA0X,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GAAAy2B,EACA0X,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GAAAy2B,EACA0X,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GAAAy2B,EACA0X,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GAAAy2B,EACA0X,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GAAAy2B,EACA0X,GAUA1J,EAAA4L,YAAA,SAAAvwC,EAAAE,GACA,MAAAF,GAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IACAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IACAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAUAykC,EAAA1kC,OAAA,SAAAD,EAAAE,GACA,GAAAswC,GAAAxwC,EAAA,GAAAywC,EAAAzwC,EAAA,GAAA0wC,EAAA1wC,EAAA,GAAA2wC,EAAA3wC,EAAA,GAAA4wC,EAAA5wC,EAAA,GAAA6wC,EAAA7wC,EAAA,GAAA8wC,EAAA9wC,EAAA,GAAA+wC,EAAA/wC,EAAA,GAAAgxC,EAAAhxC,EAAA,GACAixC,EAAA/wC,EAAA,GAAAgxC,EAAAhxC,EAAA,GAAAixC,EAAAjxC,EAAA,GAAAkxC,EAAAlxC,EAAA,GAAAmxC,EAAAnxC,EAAA,GAAAoxC,EAAApxC,EAAA,GAAAqxC,EAAAvxC,EAAA,GAAAwxC,EAAAtxC,EAAA,GAAAuxC,EAAAvxC,EAAA,EACA,OAAAb,MAAAc,IAAAqwC,EAAAS,IAAAlyC,EAAAC,QAAAK,KAAAe,IAAA,EAAAf,KAAAc,IAAAqwC,GAAAnxC,KAAAc,IAAA8wC,KACA5xC,KAAAc,IAAAswC,EAAAS,IAAAnyC,EAAAC,QAAAK,KAAAe,IAAA,EAAAf,KAAAc,IAAAswC,GAAApxC,KAAAc,IAAA+wC,KACA7xC,KAAAc,IAAAuwC,EAAAS,IAAApyC,EAAAC,QAAAK,KAAAe,IAAA,EAAAf,KAAAc,IAAAuwC,GAAArxC,KAAAc,IAAAgxC,KACA9xC,KAAAc,IAAAwwC,EAAAS,IAAAryC,EAAAC,QAAAK,KAAAe,IAAA,EAAAf,KAAAc,IAAAwwC,GAAAtxC,KAAAc,IAAAixC,KACA/xC,KAAAc,IAAAywC,EAAAS,IAAAtyC,EAAAC,QAAAK,KAAAe,IAAA,EAAAf,KAAAc,IAAAywC,GAAAvxC,KAAAc,IAAAkxC,KACAhyC,KAAAc,IAAA0wC,EAAAS,IAAAvyC,EAAAC,QAAAK,KAAAe,IAAA,EAAAf,KAAAc,IAAA0wC,GAAAxxC,KAAAc,IAAAmxC,KACAjyC,KAAAc,IAAA2wC,EAAAS,IAAAxyC,EAAAC,QAAAK,KAAAe,IAAA,EAAAf,KAAAc,IAAA2wC,GAAAzxC,KAAAc,IAAAoxC,KACAlyC,KAAAc,IAAA4wC,EAAAS,IAAAzyC,EAAAC,QAAAK,KAAAe,IAAA,EAAAf,KAAAc,IAAA4wC,GAAA1xC,KAAAc,IAAAqxC,KACAnyC,KAAAc,IAAA6wC,EAAAS,IAAA1yC,EAAAC,QAAAK,KAAAe,IAAA,EAAAf,KAAAc,IAAA6wC,GAAA3xC,KAAAc,IAAAsxC,KAIAx2C,EAAAD,QAAA2pC,Gb62TM,SAAU1pC,EAAQD,EAASH,GclkVjC,GAAAkE,GAAAlE,EAAA,GAMAiqC,IAOAA,GAAAlmC,OAAA,WACA,GAAAyvC,GAAA,GAAAtvC,GAAAE,WAAA,EAIA,OAHAovC,GAAA,KACAA,EAAA,KACAA,EAAA,KACAA,GASAvJ,EAAAyJ,MAAA,SAAAvuC,GACA,GAAAquC,GAAA,GAAAtvC,GAAAE,WAAA,EAIA,OAHAovC,GAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,GAWAvJ,EAAA4G,WAAA,SAAAhW,EAAAhyB,EAAAiyB,GACA,GAAA0Y,GAAA,GAAAtvC,GAAAE,WAAA,EAIA,OAHAovC,GAAA,GAAA3Y,EACA2Y,EAAA,GAAA3qC,EACA2qC,EAAA,GAAA1Y,EACA0Y,GAUAvJ,EAAAtX,KAAA,SAAA6gB,EAAAruC,GAIA,MAHAquC,GAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,GAYAvJ,EAAAj+B,IAAA,SAAAwnC,EAAA3Y,EAAAhyB,EAAAiyB,GAIA,MAHA0Y,GAAA,GAAA3Y,EACA2Y,EAAA,GAAA3qC,EACA2qC,EAAA,GAAA1Y,EACA0Y,GAWAvJ,EAAA5N,IAAA,SAAAmX,EAAAruC,EAAAE,GAIA,MAHAmuC,GAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,GAWAvJ,EAAArQ,SAAA,SAAA4Z,EAAAruC,EAAAE,GAIA,MAHAmuC,GAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,GAOAvJ,EAAAsL,IAAAtL,EAAArQ,SAUAqQ,EAAAvU,SAAA,SAAA8d,EAAAruC,EAAAE,GAIA,MAHAmuC,GAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,GAOAvJ,EAAA8J,IAAA9J,EAAAvU,SAUAuU,EAAAlN,OAAA,SAAAyW,EAAAruC,EAAAE,GAIA,MAHAmuC,GAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,GAOAvJ,EAAA4M,IAAA5M,EAAAlN,OASAkN,EAAA6M,KAAA,SAAAtD,EAAAruC,GAIA,MAHAquC,GAAA,GAAAhvC,KAAAsyC,KAAA3xC,EAAA,IACAquC,EAAA,GAAAhvC,KAAAsyC,KAAA3xC,EAAA,IACAquC,EAAA,GAAAhvC,KAAAsyC,KAAA3xC,EAAA,IACAquC,GAUAvJ,EAAAmI,MAAA,SAAAoB,EAAAruC,GAIA,MAHAquC,GAAA,GAAAhvC,KAAA4tC,MAAAjtC,EAAA,IACAquC,EAAA,GAAAhvC,KAAA4tC,MAAAjtC,EAAA,IACAquC,EAAA,GAAAhvC,KAAA4tC,MAAAjtC,EAAA,IACAquC,GAWAvJ,EAAA9iB,IAAA,SAAAqsB,EAAAruC,EAAAE,GAIA,MAHAmuC,GAAA,GAAAhvC,KAAA2iB,IAAAhiB,EAAA,GAAAE,EAAA,IACAmuC,EAAA,GAAAhvC,KAAA2iB,IAAAhiB,EAAA,GAAAE,EAAA,IACAmuC,EAAA,GAAAhvC,KAAA2iB,IAAAhiB,EAAA,GAAAE,EAAA,IACAmuC,GAWAvJ,EAAA1kC,IAAA,SAAAiuC,EAAAruC,EAAAE,GAIA,MAHAmuC,GAAA,GAAAhvC,KAAAe,IAAAJ,EAAA,GAAAE,EAAA,IACAmuC,EAAA,GAAAhvC,KAAAe,IAAAJ,EAAA,GAAAE,EAAA,IACAmuC,EAAA,GAAAhvC,KAAAe,IAAAJ,EAAA,GAAAE,EAAA,IACAmuC,GAUAvJ,EAAA8M,MAAA,SAAAvD,EAAAruC,GAIA,MAHAquC,GAAA,GAAAhvC,KAAAuyC,MAAA5xC,EAAA,IACAquC,EAAA,GAAAhvC,KAAAuyC,MAAA5xC,EAAA,IACAquC,EAAA,GAAAhvC,KAAAuyC,MAAA5xC,EAAA,IACAquC,GAWAvJ,EAAAnO,MAAA,SAAA0X,EAAAruC,EAAAE,GAIA,MAHAmuC,GAAA,GAAAruC,EAAA,GAAAE,EACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EACAmuC,GAYAvJ,EAAA+M,YAAA,SAAAxD,EAAAruC,EAAAE,EAAAy2B,GAIA,MAHA0X,GAAA,GAAAruC,EAAA,GAAAE,EAAA,GAAAy2B,EACA0X,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GAAAy2B,EACA0X,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GAAAy2B,EACA0X,GAUAvJ,EAAArN,SAAA,SAAAz3B,EAAAE,GACA,GAAAw1B,GAAAx1B,EAAA,GAAAF,EAAA,GACA0D,EAAAxD,EAAA,GAAAF,EAAA,GACA21B,EAAAz1B,EAAA,GAAAF,EAAA,EACA,OAAAX,MAAAglB,KAAAqR,IAAAhyB,IAAAiyB,MAOAmP,EAAAgN,KAAAhN,EAAArN,SASAqN,EAAAiN,gBAAA,SAAA/xC,EAAAE,GACA,GAAAw1B,GAAAx1B,EAAA,GAAAF,EAAA,GACA0D,EAAAxD,EAAA,GAAAF,EAAA,GACA21B,EAAAz1B,EAAA,GAAAF,EAAA,EACA,OAAA01B,KAAAhyB,IAAAiyB,KAOAmP,EAAAkN,QAAAlN,EAAAiN,gBAQAjN,EAAA/jC,OAAA,SAAAf,GACA,GAAA01B,GAAA11B,EAAA,GACA0D,EAAA1D,EAAA,GACA21B,EAAA31B,EAAA,EACA,OAAAX,MAAAglB,KAAAqR,IAAAhyB,IAAAiyB,MAOAmP,EAAAn+B,IAAAm+B,EAAA/jC,OAQA+jC,EAAAmN,cAAA,SAAAjyC,GACA,GAAA01B,GAAA11B,EAAA,GACA0D,EAAA1D,EAAA,GACA21B,EAAA31B,EAAA,EACA,OAAA01B,KAAAhyB,IAAAiyB,KAOAmP,EAAAoN,OAAApN,EAAAmN,cASAnN,EAAAvX,OAAA,SAAA8gB,EAAAruC,GAIA,MAHAquC,GAAA,IAAAruC,EAAA,GACAquC,EAAA,IAAAruC,EAAA,GACAquC,EAAA,IAAAruC,EAAA,GACAquC,GAUAvJ,EAAApW,QAAA,SAAA2f,EAAAruC,GAIA,MAHAquC,GAAA,KAAAruC,EAAA,GACAquC,EAAA,KAAAruC,EAAA,GACAquC,EAAA,KAAAruC,EAAA,GACAquC,GAUAvJ,EAAAz2B,UAAA,SAAAggC,EAAAruC,GACA,GAAA01B,GAAA11B,EAAA,GACA0D,EAAA1D,EAAA,GACA21B,EAAA31B,EAAA,GACA2G,EAAA+uB,IAAAhyB,IAAAiyB,GAQA,OAPAhvB,GAAA,IAEAA,EAAA,EAAAtH,KAAAglB,KAAA1d,GACA0nC,EAAA,GAAAruC,EAAA,GAAA2G,EACA0nC,EAAA,GAAAruC,EAAA,GAAA2G,EACA0nC,EAAA,GAAAruC,EAAA,GAAA2G,GAEA0nC,GAUAvJ,EAAAvN,IAAA,SAAAv3B,EAAAE,GACA,MAAAF,GAAA,GAAAE,EAAA,GAAAF,EAAA,GAAAE,EAAA,GAAAF,EAAA,GAAAE,EAAA,IAWA4kC,EAAApQ,MAAA,SAAA2Z,EAAAruC,EAAAE,GACA,GAAAiyC,GAAAnyC,EAAA,GAAAoyC,EAAApyC,EAAA,GAAAqyC,EAAAryC,EAAA,GACAsyC,EAAApyC,EAAA,GAAAqyC,EAAAryC,EAAA,GAAAsyC,EAAAtyC,EAAA,EAKA,OAHAmuC,GAAA,GAAA+D,EAAAI,EAAAH,EAAAE,EACAlE,EAAA,GAAAgE,EAAAC,EAAAH,EAAAK,EACAnE,EAAA,GAAA8D,EAAAI,EAAAH,EAAAE,EACAjE,GAYAvJ,EAAA3N,KAAA,SAAAkX,EAAAruC,EAAAE,EAAAU,GACA,GAAAuxC,GAAAnyC,EAAA,GACAoyC,EAAApyC,EAAA,GACAqyC,EAAAryC,EAAA,EAIA,OAHAquC,GAAA,GAAA8D,EAAAvxC,GAAAV,EAAA,GAAAiyC,GACA9D,EAAA,GAAA+D,EAAAxxC,GAAAV,EAAA,GAAAkyC,GACA/D,EAAA,GAAAgE,EAAAzxC,GAAAV,EAAA,GAAAmyC,GACAhE,GAcAvJ,EAAA2N,QAAA,SAAApE,EAAAruC,EAAAE,EAAA5E,EAAAC,EAAAqF,GACA,GAAA8xC,GAAA9xC,IACA+xC,EAAAD,GAAA,EAAA9xC,EAAA,KACAgyC,EAAAF,GAAA9xC,EAAA,GAAAA,EACAiyC,EAAAH,GAAA9xC,EAAA,GACAkyC,EAAAJ,GAAA,IAAA9xC,EAMA,OAJAytC,GAAA,GAAAruC,EAAA,GAAA2yC,EAAAzyC,EAAA,GAAA0yC,EAAAt3C,EAAA,GAAAu3C,EAAAt3C,EAAA,GAAAu3C,EACAzE,EAAA,GAAAruC,EAAA,GAAA2yC,EAAAzyC,EAAA,GAAA0yC,EAAAt3C,EAAA,GAAAu3C,EAAAt3C,EAAA,GAAAu3C,EACAzE,EAAA,GAAAruC,EAAA,GAAA2yC,EAAAzyC,EAAA,GAAA0yC,EAAAt3C,EAAA,GAAAu3C,EAAAt3C,EAAA,GAAAu3C,EAEAzE,GAcAvJ,EAAAiO,OAAA,SAAA1E,EAAAruC,EAAAE,EAAA5E,EAAAC,EAAAqF,GACA,GAAAoyC,GAAA,EAAApyC,EACAqyC,EAAAD,IACAN,EAAA9xC,IACA+xC,EAAAM,EAAAD,EACAJ,EAAA,EAAAhyC,EAAAqyC,EACAJ,EAAA,EAAAH,EAAAM,EACAF,EAAAJ,EAAA9xC,CAMA,OAJAytC,GAAA,GAAAruC,EAAA,GAAA2yC,EAAAzyC,EAAA,GAAA0yC,EAAAt3C,EAAA,GAAAu3C,EAAAt3C,EAAA,GAAAu3C,EACAzE,EAAA,GAAAruC,EAAA,GAAA2yC,EAAAzyC,EAAA,GAAA0yC,EAAAt3C,EAAA,GAAAu3C,EAAAt3C,EAAA,GAAAu3C,EACAzE,EAAA,GAAAruC,EAAA,GAAA2yC,EAAAzyC,EAAA,GAAA0yC,EAAAt3C,EAAA,GAAAu3C,EAAAt3C,EAAA,GAAAu3C,EAEAzE,GAUAvJ,EAAAxlC,OAAA,SAAA+uC,EAAA1X,GACAA,KAAA,CAEA,IAAAr1B,GAAA,EAAAvC,EAAAK,SAAAC,KAAAS,GACA61B,EAAA,EAAA52B,EAAAK,SAAA,EACA8zC,EAAA7zC,KAAAglB,KAAA,EAAAsR,KAAAgB,CAKA,OAHA0X,GAAA,GAAAhvC,KAAA61B,IAAA5zB,GAAA4xC,EACA7E,EAAA,GAAAhvC,KAAA81B,IAAA7zB,GAAA4xC,EACA7E,EAAA,GAAA1Y,EAAAgB,EACA0X,GAYAvJ,EAAAqO,cAAA,SAAA9E,EAAAruC,EAAA3E,GACA,GAAAq6B,GAAA11B,EAAA,GAAA0D,EAAA1D,EAAA,GAAA21B,EAAA31B,EAAA,GACAinC,EAAA5rC,EAAA,GAAAq6B,EAAAr6B,EAAA,GAAAqI,EAAArI,EAAA,IAAAs6B,EAAAt6B,EAAA,GAKA,OAJA4rC,MAAA,EACAoH,EAAA,IAAAhzC,EAAA,GAAAq6B,EAAAr6B,EAAA,GAAAqI,EAAArI,EAAA,GAAAs6B,EAAAt6B,EAAA,KAAA4rC,EACAoH,EAAA,IAAAhzC,EAAA,GAAAq6B,EAAAr6B,EAAA,GAAAqI,EAAArI,EAAA,GAAAs6B,EAAAt6B,EAAA,KAAA4rC,EACAoH,EAAA,IAAAhzC,EAAA,GAAAq6B,EAAAr6B,EAAA,GAAAqI,EAAArI,EAAA,IAAAs6B,EAAAt6B,EAAA,KAAA4rC,EACAoH,GAWAvJ,EAAAsO,cAAA,SAAA/E,EAAAruC,EAAA3E,GACA,GAAAq6B,GAAA11B,EAAA,GAAA0D,EAAA1D,EAAA,GAAA21B,EAAA31B,EAAA,EAIA,OAHAquC,GAAA,GAAA3Y,EAAAr6B,EAAA,GAAAqI,EAAArI,EAAA,GAAAs6B,EAAAt6B,EAAA,GACAgzC,EAAA,GAAA3Y,EAAAr6B,EAAA,GAAAqI,EAAArI,EAAA,GAAAs6B,EAAAt6B,EAAA,GACAgzC,EAAA,GAAA3Y,EAAAr6B,EAAA,GAAAqI,EAAArI,EAAA,GAAAs6B,EAAAt6B,EAAA,GACAgzC,GAWAvJ,EAAAuO,cAAA,SAAAhF,EAAAruC,EAAA8E,GAGA,GAAA4wB,GAAA11B,EAAA,GAAA0D,EAAA1D,EAAA,GAAA21B,EAAA31B,EAAA,GACAszC,EAAAxuC,EAAA,GAAAyuC,EAAAzuC,EAAA,GAAA0uC,EAAA1uC,EAAA,GAAA2uC,EAAA3uC,EAAA,GAGA4uC,EAAAD,EAAA/d,EAAA6d,EAAA5d,EAAA6d,EAAA9vC,EACAiwC,EAAAF,EAAA/vC,EAAA8vC,EAAA9d,EAAA4d,EAAA3d,EACAie,EAAAH,EAAA9d,EAAA2d,EAAA5vC,EAAA6vC,EAAA7d,EACAme,GAAAP,EAAA5d,EAAA6d,EAAA7vC,EAAA8vC,EAAA7d,CAMA,OAHA0Y,GAAA,GAAAqF,EAAAD,EAAAI,GAAAP,EAAAK,GAAAH,EAAAI,GAAAL,EACAlF,EAAA,GAAAsF,EAAAF,EAAAI,GAAAN,EAAAK,GAAAN,EAAAI,GAAAF,EACAnF,EAAA,GAAAuF,EAAAH,EAAAI,GAAAL,EAAAE,GAAAH,EAAAI,GAAAL,EACAjF,GAWAvJ,EAAA1P,QAAA,SAAAiZ,EAAAruC,EAAAE,EAAA5E,GACA,GAAAgB,MAAAgF,IAgBA,OAdAhF,GAAA,GAAA0D,EAAA,GAAAE,EAAA,GACA5D,EAAA,GAAA0D,EAAA,GAAAE,EAAA,GACA5D,EAAA,GAAA0D,EAAA,GAAAE,EAAA,GAGAoB,EAAA,GAAAhF,EAAA,GACAgF,EAAA,GAAAhF,EAAA,GAAA+C,KAAA61B,IAAA55B,GAAAgB,EAAA,GAAA+C,KAAA81B,IAAA75B,GACAgG,EAAA,GAAAhF,EAAA,GAAA+C,KAAA81B,IAAA75B,GAAAgB,EAAA,GAAA+C,KAAA61B,IAAA55B,GAGA+yC,EAAA,GAAA/sC,EAAA,GAAApB,EAAA,GACAmuC,EAAA,GAAA/sC,EAAA,GAAApB,EAAA,GACAmuC,EAAA,GAAA/sC,EAAA,GAAApB,EAAA,GAEAmuC,GAWAvJ,EAAAxP,QAAA,SAAA+Y,EAAAruC,EAAAE,EAAA5E,GACA,GAAAgB,MAAAgF,IAgBA,OAdAhF,GAAA,GAAA0D,EAAA,GAAAE,EAAA,GACA5D,EAAA,GAAA0D,EAAA,GAAAE,EAAA,GACA5D,EAAA,GAAA0D,EAAA,GAAAE,EAAA,GAGAoB,EAAA,GAAAhF,EAAA,GAAA+C,KAAA81B,IAAA75B,GAAAgB,EAAA,GAAA+C,KAAA61B,IAAA55B,GACAgG,EAAA,GAAAhF,EAAA,GACAgF,EAAA,GAAAhF,EAAA,GAAA+C,KAAA61B,IAAA55B,GAAAgB,EAAA,GAAA+C,KAAA81B,IAAA75B,GAGA+yC,EAAA,GAAA/sC,EAAA,GAAApB,EAAA,GACAmuC,EAAA,GAAA/sC,EAAA,GAAApB,EAAA,GACAmuC,EAAA,GAAA/sC,EAAA,GAAApB,EAAA,GAEAmuC,GAWAvJ,EAAAtP,QAAA,SAAA6Y,EAAAruC,EAAAE,EAAA5E,GACA,GAAAgB,MAAAgF,IAgBA,OAdAhF,GAAA,GAAA0D,EAAA,GAAAE,EAAA,GACA5D,EAAA,GAAA0D,EAAA,GAAAE,EAAA,GACA5D,EAAA,GAAA0D,EAAA,GAAAE,EAAA,GAGAoB,EAAA,GAAAhF,EAAA,GAAA+C,KAAA61B,IAAA55B,GAAAgB,EAAA,GAAA+C,KAAA81B,IAAA75B,GACAgG,EAAA,GAAAhF,EAAA,GAAA+C,KAAA81B,IAAA75B,GAAAgB,EAAA,GAAA+C,KAAA61B,IAAA55B,GACAgG,EAAA,GAAAhF,EAAA,GAGA+xC,EAAA,GAAA/sC,EAAA,GAAApB,EAAA,GACAmuC,EAAA,GAAA/sC,EAAA,GAAApB,EAAA,GACAmuC,EAAA,GAAA/sC,EAAA,GAAApB,EAAA,GAEAmuC,GAeAvJ,EAAA15B,QAAA,WACA,GAAA0oC,GAAAhP,EAAAlmC,QAEA,iBAAAoB,EAAAuO,EAAAC,EAAA8C,EAAAwoB,EAAAia,GACA,GAAA74C,GAAAC,CAeA,KAdAoT,IACAA,EAAA,GAGAC,IACAA,EAAA,GAIArT,EADAmW,EACAjS,KAAA2iB,IAAA1Q,EAAA/C,EAAAC,EAAAxO,EAAAe,QAEAf,EAAAe,OAGA7F,EAAAsT,EAAuBtT,EAAAC,EAAOD,GAAAqT,EAC9BulC,EAAA,GAAA9zC,EAAA9E,GAA0B44C,EAAA,GAAA9zC,EAAA9E,EAAA,GAAiB44C,EAAA,GAAA9zC,EAAA9E,EAAA,GAC3C4+B,EAAAga,IAAAC,GACA/zC,EAAA9E,GAAA44C,EAAA,GAA0B9zC,EAAA9E,EAAA,GAAA44C,EAAA,GAAiB9zC,EAAA9E,EAAA,GAAA44C,EAAA,EAG3C,OAAA9zC,OAUA8kC,EAAAzF,MAAA,SAAAr/B,EAAAE,GAEA,GAAA8zC,GAAAlP,EAAA4G,WAAA1rC,EAAA,GAAAA,EAAA,GAAAA,EAAA,IACAi0C,EAAAnP,EAAA4G,WAAAxrC,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAEA4kC,GAAAz2B,UAAA2lC,KACAlP,EAAAz2B,UAAA4lC,IAEA,IAAAC,GAAApP,EAAAvN,IAAAyc,EAAAC,EAEA,OAAAC,GAAA,EACA,EAEA70C,KAAA80C,KAAAD,IAUApP,EAAAoL,IAAA,SAAAlwC,GACA,cAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAUA8kC,EAAAyL,YAAA,SAAAvwC,EAAAE,GACA,MAAAF,GAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAUA4kC,EAAA7kC,OAAA,SAAAD,EAAAE,GACA,GAAAswC,GAAAxwC,EAAA,GAAAywC,EAAAzwC,EAAA,GAAA0wC,EAAA1wC,EAAA,GACAixC,EAAA/wC,EAAA,GAAAgxC,EAAAhxC,EAAA,GAAAixC,EAAAjxC,EAAA,EACA,OAAAb,MAAAc,IAAAqwC,EAAAS,IAAAlyC,EAAAC,QAAAK,KAAAe,IAAA,EAAAf,KAAAc,IAAAqwC,GAAAnxC,KAAAc,IAAA8wC,KACA5xC,KAAAc,IAAAswC,EAAAS,IAAAnyC,EAAAC,QAAAK,KAAAe,IAAA,EAAAf,KAAAc,IAAAswC,GAAApxC,KAAAc,IAAA+wC,KACA7xC,KAAAc,IAAAuwC,EAAAS,IAAApyC,EAAAC,QAAAK,KAAAe,IAAA,EAAAf,KAAAc,IAAAuwC,GAAArxC,KAAAc,IAAAgxC,KAGAl2C,EAAAD,QAAA8pC,Gd6lVM,SAAU7pC,EAAQD,EAASH,Gej1WjC,GAAAkE,GAAAlE,EAAA,GAMAkqC,IAOAA,GAAAnmC,OAAA,WACA,GAAAyvC,GAAA,GAAAtvC,GAAAE,WAAA,EAKA,OAJAovC,GAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,GASAtJ,EAAAwJ,MAAA,SAAAvuC,GACA,GAAAquC,GAAA,GAAAtvC,GAAAE,WAAA,EAKA,OAJAovC,GAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,GAYAtJ,EAAA2G,WAAA,SAAAhW,EAAAhyB,EAAAiyB,EAAAsR,GACA,GAAAoH,GAAA,GAAAtvC,GAAAE,WAAA,EAKA,OAJAovC,GAAA,GAAA3Y,EACA2Y,EAAA,GAAA3qC,EACA2qC,EAAA,GAAA1Y,EACA0Y,EAAA,GAAApH,EACAoH,GAUAtJ,EAAAvX,KAAA,SAAA6gB,EAAAruC,GAKA,MAJAquC,GAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,GAaAtJ,EAAAl+B,IAAA,SAAAwnC,EAAA3Y,EAAAhyB,EAAAiyB,EAAAsR,GAKA,MAJAoH,GAAA,GAAA3Y,EACA2Y,EAAA,GAAA3qC,EACA2qC,EAAA,GAAA1Y,EACA0Y,EAAA,GAAApH,EACAoH,GAWAtJ,EAAA7N,IAAA,SAAAmX,EAAAruC,EAAAE,GAKA,MAJAmuC,GAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,GAWAtJ,EAAAtQ,SAAA,SAAA4Z,EAAAruC,EAAAE,GAKA,MAJAmuC,GAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,GAOAtJ,EAAAqL,IAAArL,EAAAtQ,SAUAsQ,EAAAxU,SAAA,SAAA8d,EAAAruC,EAAAE,GAKA,MAJAmuC,GAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,GAOAtJ,EAAA6J,IAAA7J,EAAAxU,SAUAwU,EAAAnN,OAAA,SAAAyW,EAAAruC,EAAAE,GAKA,MAJAmuC,GAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,GAOAtJ,EAAA2M,IAAA3M,EAAAnN,OASAmN,EAAA4M,KAAA,SAAAtD,EAAAruC,GAKA,MAJAquC,GAAA,GAAAhvC,KAAAsyC,KAAA3xC,EAAA,IACAquC,EAAA,GAAAhvC,KAAAsyC,KAAA3xC,EAAA,IACAquC,EAAA,GAAAhvC,KAAAsyC,KAAA3xC,EAAA,IACAquC,EAAA,GAAAhvC,KAAAsyC,KAAA3xC,EAAA,IACAquC,GAUAtJ,EAAAkI,MAAA,SAAAoB,EAAAruC,GAKA,MAJAquC,GAAA,GAAAhvC,KAAA4tC,MAAAjtC,EAAA,IACAquC,EAAA,GAAAhvC,KAAA4tC,MAAAjtC,EAAA,IACAquC,EAAA,GAAAhvC,KAAA4tC,MAAAjtC,EAAA,IACAquC,EAAA,GAAAhvC,KAAA4tC,MAAAjtC,EAAA,IACAquC,GAWAtJ,EAAA/iB,IAAA,SAAAqsB,EAAAruC,EAAAE,GAKA,MAJAmuC,GAAA,GAAAhvC,KAAA2iB,IAAAhiB,EAAA,GAAAE,EAAA,IACAmuC,EAAA,GAAAhvC,KAAA2iB,IAAAhiB,EAAA,GAAAE,EAAA,IACAmuC,EAAA,GAAAhvC,KAAA2iB,IAAAhiB,EAAA,GAAAE,EAAA,IACAmuC,EAAA,GAAAhvC,KAAA2iB,IAAAhiB,EAAA,GAAAE,EAAA,IACAmuC,GAWAtJ,EAAA3kC,IAAA,SAAAiuC,EAAAruC,EAAAE,GAKA,MAJAmuC,GAAA,GAAAhvC,KAAAe,IAAAJ,EAAA,GAAAE,EAAA,IACAmuC,EAAA,GAAAhvC,KAAAe,IAAAJ,EAAA,GAAAE,EAAA,IACAmuC,EAAA,GAAAhvC,KAAAe,IAAAJ,EAAA,GAAAE,EAAA,IACAmuC,EAAA,GAAAhvC,KAAAe,IAAAJ,EAAA,GAAAE,EAAA,IACAmuC,GAUAtJ,EAAA6M,MAAA,SAAAvD,EAAAruC,GAKA,MAJAquC,GAAA,GAAAhvC,KAAAuyC,MAAA5xC,EAAA,IACAquC,EAAA,GAAAhvC,KAAAuyC,MAAA5xC,EAAA,IACAquC,EAAA,GAAAhvC,KAAAuyC,MAAA5xC,EAAA,IACAquC,EAAA,GAAAhvC,KAAAuyC,MAAA5xC,EAAA,IACAquC,GAWAtJ,EAAApO,MAAA,SAAA0X,EAAAruC,EAAAE,GAKA,MAJAmuC,GAAA,GAAAruC,EAAA,GAAAE,EACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EACAmuC,GAYAtJ,EAAA8M,YAAA,SAAAxD,EAAAruC,EAAAE,EAAAy2B,GAKA,MAJA0X,GAAA,GAAAruC,EAAA,GAAAE,EAAA,GAAAy2B,EACA0X,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GAAAy2B,EACA0X,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GAAAy2B,EACA0X,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GAAAy2B,EACA0X,GAUAtJ,EAAAtN,SAAA,SAAAz3B,EAAAE,GACA,GAAAw1B,GAAAx1B,EAAA,GAAAF,EAAA,GACA0D,EAAAxD,EAAA,GAAAF,EAAA,GACA21B,EAAAz1B,EAAA,GAAAF,EAAA,GACAinC,EAAA/mC,EAAA,GAAAF,EAAA,EACA,OAAAX,MAAAglB,KAAAqR,IAAAhyB,IAAAiyB,IAAAsR,MAOAlC,EAAA+M,KAAA/M,EAAAtN,SASAsN,EAAAgN,gBAAA,SAAA/xC,EAAAE,GACA,GAAAw1B,GAAAx1B,EAAA,GAAAF,EAAA,GACA0D,EAAAxD,EAAA,GAAAF,EAAA,GACA21B,EAAAz1B,EAAA,GAAAF,EAAA,GACAinC,EAAA/mC,EAAA,GAAAF,EAAA,EACA,OAAA01B,KAAAhyB,IAAAiyB,IAAAsR,KAOAlC,EAAAiN,QAAAjN,EAAAgN,gBAQAhN,EAAAhkC,OAAA,SAAAf,GACA,GAAA01B,GAAA11B,EAAA,GACA0D,EAAA1D,EAAA,GACA21B,EAAA31B,EAAA,GACAinC,EAAAjnC,EAAA,EACA,OAAAX,MAAAglB,KAAAqR,IAAAhyB,IAAAiyB,IAAAsR,MAOAlC,EAAAp+B,IAAAo+B,EAAAhkC,OAQAgkC,EAAAkN,cAAA,SAAAjyC,GACA,GAAA01B,GAAA11B,EAAA,GACA0D,EAAA1D,EAAA,GACA21B,EAAA31B,EAAA,GACAinC,EAAAjnC,EAAA,EACA,OAAA01B,KAAAhyB,IAAAiyB,IAAAsR,KAOAlC,EAAAmN,OAAAnN,EAAAkN,cASAlN,EAAAxX,OAAA,SAAA8gB,EAAAruC,GAKA,MAJAquC,GAAA,IAAAruC,EAAA,GACAquC,EAAA,IAAAruC,EAAA,GACAquC,EAAA,IAAAruC,EAAA,GACAquC,EAAA,IAAAruC,EAAA,GACAquC,GAUAtJ,EAAArW,QAAA,SAAA2f,EAAAruC,GAKA,MAJAquC,GAAA,KAAAruC,EAAA,GACAquC,EAAA,KAAAruC,EAAA,GACAquC,EAAA,KAAAruC,EAAA,GACAquC,EAAA,KAAAruC,EAAA,GACAquC,GAUAtJ,EAAA12B,UAAA,SAAAggC,EAAAruC,GACA,GAAA01B,GAAA11B,EAAA,GACA0D,EAAA1D,EAAA,GACA21B,EAAA31B,EAAA,GACAinC,EAAAjnC,EAAA,GACA2G,EAAA+uB,IAAAhyB,IAAAiyB,IAAAsR,GAQA,OAPAtgC,GAAA,IACAA,EAAA,EAAAtH,KAAAglB,KAAA1d,GACA0nC,EAAA,GAAA3Y,EAAA/uB,EACA0nC,EAAA,GAAA3qC,EAAAiD,EACA0nC,EAAA,GAAA1Y,EAAAhvB,EACA0nC,EAAA,GAAApH,EAAAtgC,GAEA0nC,GAUAtJ,EAAAxN,IAAA,SAAAv3B,EAAAE,GACA,MAAAF,GAAA,GAAAE,EAAA,GAAAF,EAAA,GAAAE,EAAA,GAAAF,EAAA,GAAAE,EAAA,GAAAF,EAAA,GAAAE,EAAA,IAYA6kC,EAAA5N,KAAA,SAAAkX,EAAAruC,EAAAE,EAAAU,GACA,GAAAuxC,GAAAnyC,EAAA,GACAoyC,EAAApyC,EAAA,GACAqyC,EAAAryC,EAAA,GACAo0C,EAAAp0C,EAAA,EAKA,OAJAquC,GAAA,GAAA8D,EAAAvxC,GAAAV,EAAA,GAAAiyC,GACA9D,EAAA,GAAA+D,EAAAxxC,GAAAV,EAAA,GAAAkyC,GACA/D,EAAA,GAAAgE,EAAAzxC,GAAAV,EAAA,GAAAmyC,GACAhE,EAAA,GAAA+F,EAAAxzC,GAAAV,EAAA,GAAAk0C,GACA/F,GAUAtJ,EAAAzlC,OAAA,SAAA+uC,EAAA1X,GAUA,MATAA,MAAA,EAGA0X,EAAA,GAAAtvC,EAAAK,SACAivC,EAAA,GAAAtvC,EAAAK,SACAivC,EAAA,GAAAtvC,EAAAK,SACAivC,EAAA,GAAAtvC,EAAAK,SACA2lC,EAAA12B,UAAAggC,KACAtJ,EAAApO,MAAA0X,IAAA1X,GACA0X,GAWAtJ,EAAAoO,cAAA,SAAA9E,EAAAruC,EAAA3E,GACA,GAAAq6B,GAAA11B,EAAA,GAAA0D,EAAA1D,EAAA,GAAA21B,EAAA31B,EAAA,GAAAinC,EAAAjnC,EAAA,EAKA,OAJAquC,GAAA,GAAAhzC,EAAA,GAAAq6B,EAAAr6B,EAAA,GAAAqI,EAAArI,EAAA,GAAAs6B,EAAAt6B,EAAA,IAAA4rC,EACAoH,EAAA,GAAAhzC,EAAA,GAAAq6B,EAAAr6B,EAAA,GAAAqI,EAAArI,EAAA,GAAAs6B,EAAAt6B,EAAA,IAAA4rC,EACAoH,EAAA,GAAAhzC,EAAA,GAAAq6B,EAAAr6B,EAAA,GAAAqI,EAAArI,EAAA,IAAAs6B,EAAAt6B,EAAA,IAAA4rC,EACAoH,EAAA,GAAAhzC,EAAA,GAAAq6B,EAAAr6B,EAAA,GAAAqI,EAAArI,EAAA,IAAAs6B,EAAAt6B,EAAA,IAAA4rC,EACAoH,GAWAtJ,EAAAsO,cAAA,SAAAhF,EAAAruC,EAAA8E,GACA,GAAA4wB,GAAA11B,EAAA,GAAA0D,EAAA1D,EAAA,GAAA21B,EAAA31B,EAAA,GACAszC,EAAAxuC,EAAA,GAAAyuC,EAAAzuC,EAAA,GAAA0uC,EAAA1uC,EAAA,GAAA2uC,EAAA3uC,EAAA,GAGA4uC,EAAAD,EAAA/d,EAAA6d,EAAA5d,EAAA6d,EAAA9vC,EACAiwC,EAAAF,EAAA/vC,EAAA8vC,EAAA9d,EAAA4d,EAAA3d,EACAie,EAAAH,EAAA9d,EAAA2d,EAAA5vC,EAAA6vC,EAAA7d,EACAme,GAAAP,EAAA5d,EAAA6d,EAAA7vC,EAAA8vC,EAAA7d,CAOA,OAJA0Y,GAAA,GAAAqF,EAAAD,EAAAI,GAAAP,EAAAK,GAAAH,EAAAI,GAAAL,EACAlF,EAAA,GAAAsF,EAAAF,EAAAI,GAAAN,EAAAK,GAAAN,EAAAI,GAAAF,EACAnF,EAAA,GAAAuF,EAAAH,EAAAI,GAAAL,EAAAE,GAAAH,EAAAI,GAAAL,EACAjF,EAAA,GAAAruC,EAAA,GACAquC,GAeAtJ,EAAA35B,QAAA,WACA,GAAA0oC,GAAA/O,EAAAnmC,QAEA,iBAAAoB,EAAAuO,EAAAC,EAAA8C,EAAAwoB,EAAAia,GACA,GAAA74C,GAAAC,CAeA,KAdAoT,IACAA,EAAA,GAGAC,IACAA,EAAA,GAIArT,EADAmW,EACAjS,KAAA2iB,IAAA1Q,EAAA/C,EAAAC,EAAAxO,EAAAe,QAEAf,EAAAe,OAGA7F,EAAAsT,EAAuBtT,EAAAC,EAAOD,GAAAqT,EAC9BulC,EAAA,GAAA9zC,EAAA9E,GAA0B44C,EAAA,GAAA9zC,EAAA9E,EAAA,GAAiB44C,EAAA,GAAA9zC,EAAA9E,EAAA,GAAiB44C,EAAA,GAAA9zC,EAAA9E,EAAA,GAC5D4+B,EAAAga,IAAAC,GACA/zC,EAAA9E,GAAA44C,EAAA,GAA0B9zC,EAAA9E,EAAA,GAAA44C,EAAA,GAAiB9zC,EAAA9E,EAAA,GAAA44C,EAAA,GAAiB9zC,EAAA9E,EAAA,GAAA44C,EAAA,EAG5D,OAAA9zC,OAUA+kC,EAAAmL,IAAA,SAAAlwC,GACA,cAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAUA+kC,EAAAwL,YAAA,SAAAvwC,EAAAE,GACA,MAAAF,GAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAUA6kC,EAAA9kC,OAAA,SAAAD,EAAAE,GACA,GAAAswC,GAAAxwC,EAAA,GAAAywC,EAAAzwC,EAAA,GAAA0wC,EAAA1wC,EAAA,GAAA2wC,EAAA3wC,EAAA,GACAixC,EAAA/wC,EAAA,GAAAgxC,EAAAhxC,EAAA,GAAAixC,EAAAjxC,EAAA,GAAAkxC,EAAAlxC,EAAA,EACA,OAAAb,MAAAc,IAAAqwC,EAAAS,IAAAlyC,EAAAC,QAAAK,KAAAe,IAAA,EAAAf,KAAAc,IAAAqwC,GAAAnxC,KAAAc,IAAA8wC,KACA5xC,KAAAc,IAAAswC,EAAAS,IAAAnyC,EAAAC,QAAAK,KAAAe,IAAA,EAAAf,KAAAc,IAAAswC,GAAApxC,KAAAc,IAAA+wC,KACA7xC,KAAAc,IAAAuwC,EAAAS,IAAApyC,EAAAC,QAAAK,KAAAe,IAAA,EAAAf,KAAAc,IAAAuwC,GAAArxC,KAAAc,IAAAgxC,KACA9xC,KAAAc,IAAAwwC,EAAAS,IAAAryC,EAAAC,QAAAK,KAAAe,IAAA,EAAAf,KAAAc,IAAAwwC,GAAAtxC,KAAAc,IAAAixC,KAGAn2C,EAAAD,QAAA+pC,Gf42WM,SAAU9pC,EAAQD,EAASH,GAEjC,YAEAc,QAAOC,eAAeZ,EAAS,cAAgBwB,OAAO,KgBh9XtD,SAAY63C,GACRA,IAAA,4BACAA,IAAA,8BACAA,IAAA,wBACAA,IAAA,uBAJQr5C,EAAAq5C,YAAAr5C,EAAAq5C,gBASZ,SAAYC,GACRA,IAAA,yBACAA,IAAA,yBACAA,IAAA,qBACAA,IAAA,mCACAA,IAAA,oCALQt5C,EAAAs5C,YAAAt5C,EAAAs5C,eAQCt5C,EAAAu5C,YAAc,EACdv5C,EAAAw5C,cAAgB,EAChBx5C,EAAAy5C,YAAc,EACdz5C,EAAA05C,WAAa,GhBo9XpB,SAAUz5C,EAAQD,EAASH,GAEjC,YiBj9XA,SAAA85C,GAAAC,EAAAzuC,EAAAQ,EAAAK,GAKA,IAJA,GAAA6tC,GAAA,MAAAD,EAAA,EACAE,EAAAF,IAAA,WACA54C,EAAA,EAEA,IAAA2K,GAAA,CAIA3K,EAAA2K,EAAA,QAAAA,EACAA,GAAA3K,CAEA,IACA64C,IAAA1uC,EAAAa,KAAA,EACA8tC,IAAAD,EAAA,UACK74C,EAEL64C,IAAA,MACAC,GAAA,MAGA,MAAAD,GAAAC,GAAA,KAIA75C,EAAAD,QAAA25C,GjBg/XM,SAAU15C,EAAQD,EAASH,GAEjC,YkBx/XA,SAAAk6C,GAAAC,EAAA7uC,EAAAQ,EAAAK,GACA,GAAApG,GAAAq0C,EACAtX,EAAA32B,EAAAL,CAEAquC,KAAA,CAEA,QAAA95C,GAAA8L,EAAmB9L,EAAAyiC,EAASziC,IAC5B85C,MAAA,EAAAp0C,EAAA,KAAAo0C,EAAA7uC,EAAAjL,IAGA,UAAA85C,EAbA,GAAAC,GAfA,WAGA,OAFA35C,GAAA45C,KAEAl5C,EAAA,EAAiBA,EAAA,IAASA,IAAA,CAC1BV,EAAAU,CACA,QAAAq7B,GAAA,EAAmBA,EAAA,EAAOA,IAC1B/7B,EAAA,EAAAA,EAAA,WAAAA,IAAA,EAAAA,IAAA,CAEA45C,GAAAl5C,GAAAV,EAGA,MAAA45C,KAqBAj6C,GAAAD,QAAA+5C,GlB0iYM,SAAU95C,EAAQD,EAASH,GAEjC,YmBlhYA,SAAAs6C,GAAAhvC,EAAAQ,GAEA,GAAAA,EAAA,QACAR,EAAAE,UAAA+uC,IAAAjvC,EAAAE,UAAAgvC,GACA,MAAAC,QAAAC,aAAAtyC,MAAA,KAAAyF,EAAAxC,UAAAC,EAAAQ,GAKA,QADA7D,GAAA,GACA5H,EAAA,EAAiBA,EAAAyL,EAASzL,IAC1B4H,GAAAwyC,OAAAC,aAAApvC,EAAAjL,GAEA,OAAA4H,GA5FA,GAAA4F,GAAA7N,EAAA,GAQAw6C,GAAA,EACAD,GAAA,CAEA,KAAKE,OAAAC,aAAAtyC,MAAA,UAA0C,MAAA1C,GAAa80C,GAAA,EAC5D,IAAKC,OAAAC,aAAAtyC,MAAA,QAAA0C,YAAA,IAAsD,MAAApF,GAAa60C,GAAA,EAOxE,OADAI,GAAA,GAAA9sC,GAAArB,KAAA,KACAvC,EAAA,EAAeA,EAAA,IAASA,IACxB0wC,EAAA1wC,MAAA,MAAAA,GAAA,MAAAA,GAAA,MAAAA,GAAA,MAAAA,GAAA,OAEA0wC,GAAA,KAAAA,EAAA,OAIAx6C,EAAAy6C,WAAA,SAAAvF,GACA,GAAA/pC,GAAA7K,EAAAo6C,EAAAC,EAAAz6C,EAAA06C,EAAA1F,EAAAnvC,OAAA80C,EAAA,CAGA,KAAAF,EAAA,EAAiBA,EAAAC,EAAiBD,IAClCr6C,EAAA40C,EAAA4F,WAAAH,GACA,cAAAr6C,IAAAq6C,EAAA,EAAAC,GAEA,eADAF,EAAAxF,EAAA4F,WAAAH,EAAA,OAEAr6C,EAAA,OAAAA,EAAA,YAAAo6C,EAAA,OACAC,KAGAE,GAAAv6C,EAAA,MAAAA,EAAA,OAAAA,EAAA,SAOA,KAHA6K,EAAA,GAAAuC,GAAArB,KAAAwuC,GAGA36C,EAAA,EAAAy6C,EAAA,EAAwBz6C,EAAA26C,EAAaF,IACrCr6C,EAAA40C,EAAA4F,WAAAH,GACA,cAAAr6C,IAAAq6C,EAAA,EAAAC,GAEA,eADAF,EAAAxF,EAAA4F,WAAAH,EAAA,OAEAr6C,EAAA,OAAAA,EAAA,YAAAo6C,EAAA,OACAC,KAGAr6C,EAAA,IAEA6K,EAAAjL,KAAAI,EACKA,EAAA,MAEL6K,EAAAjL,KAAA,IAAAI,IAAA,EACA6K,EAAAjL,KAAA,OAAAI,GACKA,EAAA,OAEL6K,EAAAjL,KAAA,IAAAI,IAAA,GACA6K,EAAAjL,KAAA,IAAAI,IAAA,KACA6K,EAAAjL,KAAA,OAAAI,IAGA6K,EAAAjL,KAAA,IAAAI,IAAA,GACA6K,EAAAjL,KAAA,IAAAI,IAAA,MACA6K,EAAAjL,KAAA,IAAAI,IAAA,KACA6K,EAAAjL,KAAA,OAAAI,EAIA,OAAA6K,IAqBAnL,EAAAm6C,cAAA,SAAAhvC,GACA,MAAAgvC,GAAAhvC,IAAApF,SAKA/F,EAAA+6C,cAAA,SAAA7F,GAEA,OADA/pC,GAAA,GAAAuC,GAAArB,KAAA6oC,EAAAnvC,QACA7F,EAAA,EAAAyL,EAAAR,EAAApF,OAAmC7F,EAAAyL,EAASzL,IAC5CiL,EAAAjL,GAAAg1C,EAAA4F,WAAA56C,EAEA,OAAAiL,IAKAnL,EAAAg7C,WAAA,SAAA7vC,EAAA/F,GACA,GAAAlF,GAAAmzC,EAAA/yC,EAAA26C,EACAtvC,EAAAvG,GAAA+F,EAAApF,OAKAm1C,EAAA,GAAA/2C,OAAA,EAAAwH,EAEA,KAAA0nC,EAAA,EAAAnzC,EAAA,EAAsBA,EAAAyL,GAGtB,IAFArL,EAAA6K,EAAAjL,MAEA,IAAmBg7C,EAAA7H,KAAA/yC,MAInB,KAFA26C,EAAAT,EAAAl6C,IAEA,EAAoB46C,EAAA7H,KAAA,MAA0BnzC,GAAA+6C,EAAA,MAA9C,CAKA,IAFA36C,GAAA,IAAA26C,EAAA,OAAAA,EAAA,KAEAA,EAAA,GAAA/6C,EAAAyL,GACArL,KAAA,KAAA6K,EAAAjL,KACA+6C,GAIAA,GAAA,EAAoBC,EAAA7H,KAAA,MAEpB/yC,EAAA,MACA46C,EAAA7H,KAAA/yC,GAEAA,GAAA,MACA46C,EAAA7H,KAAA,MAAA/yC,GAAA,QACA46C,EAAA7H,KAAA,WAAA/yC,GAIA,MAAA65C,GAAAe,EAAA7H,IAUArzC,EAAAm7C,WAAA,SAAAhwC,EAAA/F,GACA,GAAA4G,EAOA,KALA5G,KAAA+F,EAAApF,OACAX,EAAA+F,EAAApF,SAAyBX,EAAA+F,EAAApF,QAGzBiG,EAAA5G,EAAA,EACA4G,GAAA,aAAAb,EAAAa,KAAkDA,GAIlD,OAAAA,GAAA,EAAgB5G,EAIhB,IAAA4G,EAAkB5G,EAElB4G,EAAAwuC,EAAArvC,EAAAa,IAAA5G,EAAA4G,EAAA5G,InB6mYM,SAAUnF,EAAQD,EAASH,GAEjC,YoBjxYA,SAAAu7C,KAEA32C,KAAA42C,MAAA,KACA52C,KAAA62C,QAAA,EAEA72C,KAAA82C,SAAA,EAEA92C,KAAA+2C,SAAA,EAEA/2C,KAAAg3C,OAAA,KACAh3C,KAAAi3C,SAAA,EAEAj3C,KAAAk3C,UAAA,EAEAl3C,KAAAm3C,UAAA,EAEAn3C,KAAA6qB,IAAA,GAEA7qB,KAAAo3C,MAAA,KAEAp3C,KAAAq3C,UAAA,EAEAr3C,KAAAm1C,MAAA,EAGA35C,EAAAD,QAAAo7C,GpB4yYM,SAAUn7C,EAAQD,EAASH,GAEjC,YqBv0YAI,GAAAD,SAGA+7C,WAAA,EACAC,gBAAA,EACAC,aAAA,EACAC,aAAA,EACAC,SAAA,EACAC,QAAA,EACAC,QAAA,EAKAC,KAAA,EACAC,aAAA,EACAC,YAAA,EACAC,SAAA,EACAC,gBAAA,EACAC,cAAA,EAEAC,aAAA,EAIAC,iBAAA,EACAC,aAAA,EACAC,mBAAA,EACAC,uBAAA,EAGAC,WAAA,EACAC,eAAA,EACAC,MAAA,EACAC,QAAA,EACAC,mBAAA,EAGAC,SAAA,EACAC,OAAA,EAEAC,UAAA,EAGAC,WAAA,IrBo2YM,SAAUx9C,EAAQD,EAASH,GAEjC,YAEAc,QAAOC,eAAeZ,EAAS,cAAgBwB,OAAO,GACtD,IAAI4xC,GAAUvzC,EAAoB,GsBz6YlC69C,EAAA79C,EAAA,IACA89C,EAAA99C,EAAA,IACAkN,EAAAlN,EAAA,GACA+9C,EAAA/9C,EAAA,IACAg+C,EAAAh+C,EAAA,IACAi+C,EAAAj+C,EAAA,IACAk+C,EAAAl+C,EAAA,IAGMm+C,EAAU,GAAIH,GAAQI,OAC5BD,GAAQE,YACRF,EAAQG,aAGR,IAAIlwC,GAEAmwC,EAEAC,EACAz/B,EAJAhZ,EAAI,GAMR,WtBq6YWwtC,EAAQnsC,UAAUxC,SAAM,OAAQ,GAAQ,WsB50Y/C,QAAA65C,GAAgBC,GACZC,EAAMC,QAEN74C,GAAG,GACHZ,GAAG,GACH05C,EAAQtuC,QAAQ,SAAA7O,GAAK,MAAAA,GAAEqqC,UAAUljC,EAAsB,EAAlBrE,KAAK81B,IAAI54B,EAAEm5B,EAAE,EAAE90B,IAEpD,IAAM+4C,GAAMzsC,EAAK69B,aAAa79B,EAAKgqB,MAAO,GAAIwhB,GAAA1R,aAC1CC,EAAG,EACHC,EAAG,EACHG,UAAW,EACXF,SAAU,GACVC,SAAU,EACV1R,EAAG,EACHhyB,EAAG,EACHiyB,EAAG,KAEPgkB,GAAI9S,IAAQ,GAAIxnC,KAAKC,SACrBq6C,EAAI9S,IAAQ,GAAIxnC,KAAKC,SACrBs6C,EAAS71C,KAAK41C,GAEdC,EAASxuC,QAAQ,SAAA7O,IACVA,EAAEqqC,UAAUlR,EAAI,KAAOn5B,EAAEqqC,UAAUlR,EAAI,KACtCn5B,EAAEsqC,IAAQ,IAAKtqC,EAAEsqC,IAAQ,KAE1BtqC,EAAEqqC,UAAUljC,EAAI,KAAOnH,EAAEqqC,UAAUljC,EAAI,KACtCnH,EAAEsqC,IAAQ,IAAKtqC,EAAEsqC,IAAQ,IAE7BtqC,EAAEqqC,UAAUlR,GAAKn5B,EAAEsqC,IAAQ,GAC3BtqC,EAAEqqC,UAAUljC,GAAKnH,EAAEsqC,IAAQ,KAK/BuS,EAASE,SAETE,EAAM7b,MACNkc,sBAAsBP,GtBy0YtB,GAAIE,GAAOM,EAAIC,EAAIhoC,EAAaioC,EAASC,EAAYC,EAASC,EAASC,EAAMC,EAAUC,EAAWZ,EAASx+C,EAAG8vC,EAAQ99B,EAAM0sC,EAAUW,EAAOv6C,EAAGw6C,EAAMC,CACtJ,OAAOrM,GAAQlrC,YAAYzD,KAAM,SAAUi7C,GsBn4Y/C,IAnEIlB,EAAQ,GAAIZ,GAChBY,EAAMmB,UAAW,GACjBjhC,SAASvW,KAAKy3C,YAAapB,EAAMqB,KAEjC5xC,EAAK0vC,EAAAmC,YAGDhB,EAAaj/C,EAAQ,IACrBk/C,EAAal/C,EAAQ,IAErBkX,EAAchK,EAAKmY,kBAAkBjX,GAAK6wC,EAAIC,IAE5CC,EAAU,GAAItB,GAAAqC,eAAe9xC,GAAIrK,SAEjCq7C,EAAa,GAAIlB,GAAAiC,UAAUlC,EAAAmC,eAAepgD,EAAQ,MAClDq/C,EAAU,GAAIxB,GAAAwC,eAAejyC,GAAIrK,SACvCs7C,EAAQvN,WAAWsN,EAAWkB,mBAC9BnB,EAAQoB,cAAc,EAAGnB,EAAWoB,sBAAsB,MAEpDlB,EAAU,GAAIpB,GAAAiC,UAAUlC,EAAAmC,eAAepgD,EAAQ,MAC/Cu/C,EAAO,GAAI1B,GAAAwC,eAAejyC,GAAIrK,SAC9By7C,EAAqBx/C,EAAQ,IACnCu/C,EAAKzN,WAAWwN,EAAQgB,mBACxBnB,EAAQoB,cAAc,EAAGjB,EAAQkB,sBAAsB,MAEvDjC,EAAW,GAAIV,GAAA4C,SAASryC,GACpB6O,OAAQ/F,EACRioC,QAASA,EACTjkC,QAASqkC,EACTmB,UAAW,EACXC,OAAO,EACPC,UAAW,SAGfpC,EAAQV,EAAA+C,iBAAiBzyC,EAAIixC,EAASF,EAAS,GAqB3CM,EAAY,GAAI5B,GAAAiD,WAAW1yC,EAAIoxC,GAAUz7C,SAC7C07C,EAAUsB,MAAM,aAAc,IAAK,IAAI,GAAG,EAAE,GAC5CtB,EAAUsB,MAAM,YAAa,IAAK,IAAI,GAAM,GAC5CtB,EAAUsB,MAAM,WAAY,IAAK,IAAI,GAAQ,GAC7CtB,EAAUsB,MAAM,OAAQ,IAAK,IAAI,GAAQ,GACzChiC,EAAO,GAAI8+B,GAAAmD,YACPhwC,OAAQyuC,EACRvkC,QAASqkC,EACTmB,UAAW,IAGX7B,KACKx+C,EAAI,EAAGA,EAAI,aAAa6F,OAAQ7F,IACjC8vC,EAASsP,EAAUvP,aAAa7vC,GACpCw+C,EAAQ31C,KAAKinC,EtB67YT,OsB17YF99B,GAAO,GAAIwrC,GAAAzQ,WAAWh/B,GAAIrK,SAC1Bg7C,KAEAW,EAAQ,GAAI7B,GAAAmD,YACdhwC,OAAQqB,EACR6I,QAASmkC,EACTqB,UAAW,IAGfnC,EAAS0C,WAAW/3C,KAAKs1C,GACzBD,EAAS0C,WAAW/3C,KAAK6V,GACzBw/B,EAAS0C,WAAW/3C,KAAKw2C,GAErBv6C,EAAI,GAyCR65C,sBAAsBP,GAElBkB,EAAO,EACPC,EAAO,EAEXsB,YAAY,aAGT,KtB43Ya,WASd,SAAU9gD,EAAQD,EAASH,GuB/gZjC,GAAAkE,GAAAlE,EAAA,GAMA4pC,IAOAA,GAAA7lC,OAAA,WACA,GAAAyvC,GAAA,GAAAtvC,GAAAE,WAAA,EAKA,OAJAovC,GAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,GASA5J,EAAA8J,MAAA,SAAAvuC,GACA,GAAAquC,GAAA,GAAAtvC,GAAAE,WAAA,EAKA,OAJAovC,GAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,GAUA5J,EAAAjX,KAAA,SAAA6gB,EAAAruC,GAKA,MAJAquC,GAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,GASA5J,EAAA9lC,SAAA,SAAA0vC,GAKA,MAJAA,GAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,GAYA5J,EAAAiH,WAAA,SAAAhe,EAAAC,EAAAG,EAAAC,GACA,GAAAsgB,GAAA,GAAAtvC,GAAAE,WAAA,EAKA,OAJAovC,GAAA,GAAA3gB,EACA2gB,EAAA,GAAA1gB,EACA0gB,EAAA,GAAAvgB,EACAugB,EAAA,GAAAtgB,EACAsgB,GAaA5J,EAAA59B,IAAA,SAAAwnC,EAAA3gB,EAAAC,EAAAG,EAAAC,GAKA,MAJAsgB,GAAA,GAAA3gB,EACA2gB,EAAA,GAAA1gB,EACA0gB,EAAA,GAAAvgB,EACAugB,EAAA,GAAAtgB,EACAsgB,GAWA5J,EAAAhX,UAAA,SAAA4gB,EAAAruC,GAEA,GAAAquC,IAAAruC,EAAA,CACA,GAAAywC,GAAAzwC,EAAA,EACAquC,GAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAoC,MAEApC,GAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,EAGA,OAAAquC,IAUA5J,EAAA+J,OAAA,SAAAH,EAAAruC,GACA,GAAAwwC,GAAAxwC,EAAA,GAAAywC,EAAAzwC,EAAA,GAAA0wC,EAAA1wC,EAAA,GAAA2wC,EAAA3wC,EAAA,GAGAyuC,EAAA+B,EAAAG,EAAAD,EAAAD,CAEA,OAAAhC,IAGAA,EAAA,EAAAA,EAEAJ,EAAA,GAAAsC,EAAAlC,EACAJ,EAAA,IAAAoC,EAAAhC,EACAJ,EAAA,IAAAqC,EAAAjC,EACAJ,EAAA,GAAAmC,EAAA/B,EAEAJ,GATA,MAmBA5J,EAAAiK,QAAA,SAAAL,EAAAruC,GAEA,GAAAwwC,GAAAxwC,EAAA,EAMA,OALAquC,GAAA,GAAAruC,EAAA,GACAquC,EAAA,IAAAruC,EAAA,GACAquC,EAAA,IAAAruC,EAAA,GACAquC,EAAA,GAAAmC,EAEAnC,GASA5J,EAAAkK,YAAA,SAAA3uC,GACA,MAAAA,GAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAWAykC,EAAAlU,SAAA,SAAA8d,EAAAruC,EAAAE,GACA,GAAAswC,GAAAxwC,EAAA,GAAAywC,EAAAzwC,EAAA,GAAA0wC,EAAA1wC,EAAA,GAAA2wC,EAAA3wC,EAAA,GACAixC,EAAA/wC,EAAA,GAAAgxC,EAAAhxC,EAAA,GAAAixC,EAAAjxC,EAAA,GAAAkxC,EAAAlxC,EAAA,EAKA,OAJAmuC,GAAA,GAAAmC,EAAAS,EAAAP,EAAAQ,EACA7C,EAAA,GAAAoC,EAAAQ,EAAAN,EAAAO,EACA7C,EAAA,GAAAmC,EAAAW,EAAAT,EAAAU,EACA/C,EAAA,GAAAoC,EAAAU,EAAAR,EAAAS,EACA/C,GAOA5J,EAAAmK,IAAAnK,EAAAlU,SAUAkU,EAAAoK,OAAA,SAAAR,EAAAruC,EAAA8uC,GACA,GAAA0B,GAAAxwC,EAAA,GAAAywC,EAAAzwC,EAAA,GAAA0wC,EAAA1wC,EAAA,GAAA2wC,EAAA3wC,EAAA,GACAzD,EAAA8C,KAAA81B,IAAA2Z,GACAxzC,EAAA+D,KAAA61B,IAAA4Z,EAKA,OAJAT,GAAA,GAAAmC,EAAAl1C,EAAAo1C,EAAAn0C,EACA8xC,EAAA,GAAAoC,EAAAn1C,EAAAq1C,EAAAp0C,EACA8xC,EAAA,GAAAmC,GAAAj0C,EAAAm0C,EAAAp1C,EACA+yC,EAAA,GAAAoC,GAAAl0C,EAAAo0C,EAAAr1C,EACA+yC,GAWA5J,EAAA9N,MAAA,SAAA0X,EAAAruC,EAAAqD,GACA,GAAAmtC,GAAAxwC,EAAA,GAAAywC,EAAAzwC,EAAA,GAAA0wC,EAAA1wC,EAAA,GAAA2wC,EAAA3wC,EAAA,GACA60B,EAAAxxB,EAAA,GAAAyxB,EAAAzxB,EAAA,EAKA,OAJAgrC,GAAA,GAAAmC,EAAA3b,EACAwZ,EAAA,GAAAoC,EAAA5b,EACAwZ,EAAA,GAAAqC,EAAA5b,EACAuZ,EAAA,GAAAsC,EAAA7b,EACAuZ,GAcA5J,EAAAuK,aAAA,SAAAX,EAAAS,GACA,GAAAvyC,GAAA8C,KAAA81B,IAAA2Z,GACAxzC,EAAA+D,KAAA61B,IAAA4Z,EAKA,OAJAT,GAAA,GAAA/yC,EACA+yC,EAAA,GAAA9xC,EACA8xC,EAAA,IAAA9xC,EACA8xC,EAAA,GAAA/yC,EACA+yC,GAcA5J,EAAAwK,YAAA,SAAAZ,EAAAhrC,GAKA,MAJAgrC,GAAA,GAAAhrC,EAAA,GACAgrC,EAAA,KACAA,EAAA,KACAA,EAAA,GAAAhrC,EAAA,GACAgrC,GASA5J,EAAAyL,IAAA,SAAAlwC,GACA,cAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QASAykC,EAAA0L,KAAA,SAAAnwC,GACA,MAAAX,MAAAglB,KAAAhlB,KAAAkiC,IAAAvhC,EAAA,MAAAX,KAAAkiC,IAAAvhC,EAAA,MAAAX,KAAAkiC,IAAAvhC,EAAA,MAAAX,KAAAkiC,IAAAvhC,EAAA,QAWAykC,EAAAuX,IAAA,SAAAC,EAAAC,EAAAC,EAAAn8C,GAKA,MAJAi8C,GAAA,GAAAj8C,EAAA,GAAAA,EAAA,GACAm8C,EAAA,GAAAn8C,EAAA,GACAm8C,EAAA,GAAAn8C,EAAA,GACAm8C,EAAA,GAAAn8C,EAAA,GAAAi8C,EAAA,GAAAE,EAAA,IACAF,EAAAC,EAAAC,IAWA1X,EAAAvN,IAAA,SAAAmX,EAAAruC,EAAAE,GAKA,MAJAmuC,GAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,GAWA5J,EAAAhQ,SAAA,SAAA4Z,EAAAruC,EAAAE,GAKA,MAJAmuC,GAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,GAOA5J,EAAA2L,IAAA3L,EAAAhQ,SASAgQ,EAAA8L,YAAA,SAAAvwC,EAAAE,GACA,MAAAF,GAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAUAukC,EAAAxkC,OAAA,SAAAD,EAAAE,GACA,GAAAswC,GAAAxwC,EAAA,GAAAywC,EAAAzwC,EAAA,GAAA0wC,EAAA1wC,EAAA,GAAA2wC,EAAA3wC,EAAA,GACAixC,EAAA/wC,EAAA,GAAAgxC,EAAAhxC,EAAA,GAAAixC,EAAAjxC,EAAA,GAAAkxC,EAAAlxC,EAAA,EACA,OAAAb,MAAAc,IAAAqwC,EAAAS,IAAAlyC,EAAAC,QAAAK,KAAAe,IAAA,EAAAf,KAAAc,IAAAqwC,GAAAnxC,KAAAc,IAAA8wC,KACA5xC,KAAAc,IAAAswC,EAAAS,IAAAnyC,EAAAC,QAAAK,KAAAe,IAAA,EAAAf,KAAAc,IAAAswC,GAAApxC,KAAAc,IAAA+wC,KACA7xC,KAAAc,IAAAuwC,EAAAS,IAAApyC,EAAAC,QAAAK,KAAAe,IAAA,EAAAf,KAAAc,IAAAuwC,GAAArxC,KAAAc,IAAAgxC,KACA9xC,KAAAc,IAAAwwC,EAAAS,IAAAryC,EAAAC,QAAAK,KAAAe,IAAA,EAAAf,KAAAc,IAAAwwC,GAAAtxC,KAAAc,IAAAixC,KAWA3M,EAAA4L,eAAA,SAAAhC,EAAAruC,EAAAE,GAKA,MAJAmuC,GAAA,GAAAruC,EAAA,GAAAE,EACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EACAmuC,GAYA5J,EAAA6L,qBAAA,SAAAjC,EAAAruC,EAAAE,EAAAy2B,GAKA,MAJA0X,GAAA,GAAAruC,EAAA,GAAAE,EAAA,GAAAy2B,EACA0X,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GAAAy2B,EACA0X,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GAAAy2B,EACA0X,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GAAAy2B,EACA0X,GAGApzC,EAAAD,QAAAypC,GvB0iZM,SAAUxpC,EAAQD,EAASH,GwBz8ZjC,GAAAkE,GAAAlE,EAAA,GAoBA6pC,IAOAA,GAAA9lC,OAAA,WACA,GAAAyvC,GAAA,GAAAtvC,GAAAE,WAAA,EAOA,OANAovC,GAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,GASA3J,EAAA6J,MAAA,SAAAvuC,GACA,GAAAquC,GAAA,GAAAtvC,GAAAE,WAAA,EAOA,OANAovC,GAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,GAUA3J,EAAAlX,KAAA,SAAA6gB,EAAAruC,GAOA,MANAquC,GAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,GASA3J,EAAA/lC,SAAA,SAAA0vC,GAOA,MANAA,GAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,GAcA3J,EAAAgH,WAAA,SAAA1rC,EAAAE,EAAA5E,EAAAC,EAAA6gD,EAAAC,GACA,GAAAhO,GAAA,GAAAtvC,GAAAE,WAAA,EAOA,OANAovC,GAAA,GAAAruC,EACAquC,EAAA,GAAAnuC,EACAmuC,EAAA,GAAA/yC,EACA+yC,EAAA,GAAA9yC,EACA8yC,EAAA,GAAA+N,EACA/N,EAAA,GAAAgO,EACAhO,GAeA3J,EAAA79B,IAAA,SAAAwnC,EAAAruC,EAAAE,EAAA5E,EAAAC,EAAA6gD,EAAAC,GAOA,MANAhO,GAAA,GAAAruC,EACAquC,EAAA,GAAAnuC,EACAmuC,EAAA,GAAA/yC,EACA+yC,EAAA,GAAA9yC,EACA8yC,EAAA,GAAA+N,EACA/N,EAAA,GAAAgO,EACAhO,GAUA3J,EAAA8J,OAAA,SAAAH,EAAAruC,GACA,GAAAs8C,GAAAt8C,EAAA,GAAAu8C,EAAAv8C,EAAA,GAAAw8C,EAAAx8C,EAAA,GAAAy8C,EAAAz8C,EAAA,GACA08C,EAAA18C,EAAA,GAAA28C,EAAA38C,EAAA,GAEAyuC,EAAA6N,EAAAG,EAAAF,EAAAC,CACA,OAAA/N,IAGAA,EAAA,EAAAA,EAEAJ,EAAA,GAAAoO,EAAAhO,EACAJ,EAAA,IAAAkO,EAAA9N,EACAJ,EAAA,IAAAmO,EAAA/N,EACAJ,EAAA,GAAAiO,EAAA7N,EACAJ,EAAA,IAAAmO,EAAAG,EAAAF,EAAAC,GAAAjO,EACAJ,EAAA,IAAAkO,EAAAG,EAAAJ,EAAAK,GAAAlO,EACAJ,GAVA,MAmBA3J,EAAAiK,YAAA,SAAA3uC,GACA,MAAAA,GAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAWA0kC,EAAAnU,SAAA,SAAA8d,EAAAruC,EAAAE,GACA,GAAAswC,GAAAxwC,EAAA,GAAAywC,EAAAzwC,EAAA,GAAA0wC,EAAA1wC,EAAA,GAAA2wC,EAAA3wC,EAAA,GAAA4wC,EAAA5wC,EAAA,GAAA6wC,EAAA7wC,EAAA,GACAixC,EAAA/wC,EAAA,GAAAgxC,EAAAhxC,EAAA,GAAAixC,EAAAjxC,EAAA,GAAAkxC,EAAAlxC,EAAA,GAAAmxC,EAAAnxC,EAAA,GAAAoxC,EAAApxC,EAAA,EAOA,OANAmuC,GAAA,GAAAmC,EAAAS,EAAAP,EAAAQ,EACA7C,EAAA,GAAAoC,EAAAQ,EAAAN,EAAAO,EACA7C,EAAA,GAAAmC,EAAAW,EAAAT,EAAAU,EACA/C,EAAA,GAAAoC,EAAAU,EAAAR,EAAAS,EACA/C,EAAA,GAAAmC,EAAAa,EAAAX,EAAAY,EAAAV,EACAvC,EAAA,GAAAoC,EAAAY,EAAAV,EAAAW,EAAAT,EACAxC,GAOA3J,EAAAkK,IAAAlK,EAAAnU,SAUAmU,EAAAmK,OAAA,SAAAR,EAAAruC,EAAA8uC,GACA,GAAA0B,GAAAxwC,EAAA,GAAAywC,EAAAzwC,EAAA,GAAA0wC,EAAA1wC,EAAA,GAAA2wC,EAAA3wC,EAAA,GAAA4wC,EAAA5wC,EAAA,GAAA6wC,EAAA7wC,EAAA,GACAzD,EAAA8C,KAAA81B,IAAA2Z,GACAxzC,EAAA+D,KAAA61B,IAAA4Z,EAOA,OANAT,GAAA,GAAAmC,EAAAl1C,EAAAo1C,EAAAn0C,EACA8xC,EAAA,GAAAoC,EAAAn1C,EAAAq1C,EAAAp0C,EACA8xC,EAAA,GAAAmC,GAAAj0C,EAAAm0C,EAAAp1C,EACA+yC,EAAA,GAAAoC,GAAAl0C,EAAAo0C,EAAAr1C,EACA+yC,EAAA,GAAAuC,EACAvC,EAAA,GAAAwC,EACAxC,GAWA3J,EAAA/N,MAAA,SAAA0X,EAAAruC,EAAAqD,GACA,GAAAmtC,GAAAxwC,EAAA,GAAAywC,EAAAzwC,EAAA,GAAA0wC,EAAA1wC,EAAA,GAAA2wC,EAAA3wC,EAAA,GAAA4wC,EAAA5wC,EAAA,GAAA6wC,EAAA7wC,EAAA,GACA60B,EAAAxxB,EAAA,GAAAyxB,EAAAzxB,EAAA,EAOA,OANAgrC,GAAA,GAAAmC,EAAA3b,EACAwZ,EAAA,GAAAoC,EAAA5b,EACAwZ,EAAA,GAAAqC,EAAA5b,EACAuZ,EAAA,GAAAsC,EAAA7b,EACAuZ,EAAA,GAAAuC,EACAvC,EAAA,GAAAwC,EACAxC,GAWA3J,EAAA9P,UAAA,SAAAyZ,EAAAruC,EAAAqD,GACA,GAAAmtC,GAAAxwC,EAAA,GAAAywC,EAAAzwC,EAAA,GAAA0wC,EAAA1wC,EAAA,GAAA2wC,EAAA3wC,EAAA,GAAA4wC,EAAA5wC,EAAA,GAAA6wC,EAAA7wC,EAAA,GACA60B,EAAAxxB,EAAA,GAAAyxB,EAAAzxB,EAAA,EAOA,OANAgrC,GAAA,GAAAmC,EACAnC,EAAA,GAAAoC,EACApC,EAAA,GAAAqC,EACArC,EAAA,GAAAsC,EACAtC,EAAA,GAAAmC,EAAA3b,EAAA6b,EAAA5b,EAAA8b,EACAvC,EAAA,GAAAoC,EAAA5b,EAAA8b,EAAA7b,EAAA+b,EACAxC,GAcA3J,EAAAsK,aAAA,SAAAX,EAAAS,GACA,GAAAvyC,GAAA8C,KAAA81B,IAAA2Z,GAAAxzC,EAAA+D,KAAA61B,IAAA4Z,EAOA,OANAT,GAAA,GAAA/yC,EACA+yC,EAAA,GAAA9xC,EACA8xC,EAAA,IAAA9xC,EACA8xC,EAAA,GAAA/yC,EACA+yC,EAAA,KACAA,EAAA,KACAA,GAcA3J,EAAAuK,YAAA,SAAAZ,EAAAhrC,GAOA,MANAgrC,GAAA,GAAAhrC,EAAA,GACAgrC,EAAA,KACAA,EAAA,KACAA,EAAA,GAAAhrC,EAAA,GACAgrC,EAAA,KACAA,EAAA,KACAA,GAcA3J,EAAAqK,gBAAA,SAAAV,EAAAhrC,GAOA,MANAgrC,GAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,GAAAhrC,EAAA,GACAgrC,EAAA,GAAAhrC,EAAA,GACAgrC,GASA3J,EAAAwL,IAAA,SAAAlwC,GACA,eAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QACAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QASA0kC,EAAAyL,KAAA,SAAAnwC,GACA,MAAAX,MAAAglB,KAAAhlB,KAAAkiC,IAAAvhC,EAAA,MAAAX,KAAAkiC,IAAAvhC,EAAA,MAAAX,KAAAkiC,IAAAvhC,EAAA,MAAAX,KAAAkiC,IAAAvhC,EAAA,MAAAX,KAAAkiC,IAAAvhC,EAAA,MAAAX,KAAAkiC,IAAAvhC,EAAA,UAWA0kC,EAAAxN,IAAA,SAAAmX,EAAAruC,EAAAE,GAOA,MANAmuC,GAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,GAWA3J,EAAAjQ,SAAA,SAAA4Z,EAAAruC,EAAAE,GAOA,MANAmuC,GAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,GAOA3J,EAAA0L,IAAA1L,EAAAjQ,SAUAiQ,EAAA2L,eAAA,SAAAhC,EAAAruC,EAAAE,GAOA,MANAmuC,GAAA,GAAAruC,EAAA,GAAAE,EACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EACAmuC,GAYA3J,EAAA4L,qBAAA,SAAAjC,EAAAruC,EAAAE,EAAAy2B,GAOA,MANA0X,GAAA,GAAAruC,EAAA,GAAAE,EAAA,GAAAy2B,EACA0X,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GAAAy2B,EACA0X,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GAAAy2B,EACA0X,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GAAAy2B,EACA0X,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GAAAy2B,EACA0X,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GAAAy2B,EACA0X,GAUA3J,EAAA6L,YAAA,SAAAvwC,EAAAE,GACA,MAAAF,GAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAUAwkC,EAAAzkC,OAAA,SAAAD,EAAAE,GACA,GAAAswC,GAAAxwC,EAAA,GAAAywC,EAAAzwC,EAAA,GAAA0wC,EAAA1wC,EAAA,GAAA2wC,EAAA3wC,EAAA,GAAA4wC,EAAA5wC,EAAA,GAAA6wC,EAAA7wC,EAAA,GACAixC,EAAA/wC,EAAA,GAAAgxC,EAAAhxC,EAAA,GAAAixC,EAAAjxC,EAAA,GAAAkxC,EAAAlxC,EAAA,GAAAmxC,EAAAnxC,EAAA,GAAAoxC,EAAApxC,EAAA,EACA,OAAAb,MAAAc,IAAAqwC,EAAAS,IAAAlyC,EAAAC,QAAAK,KAAAe,IAAA,EAAAf,KAAAc,IAAAqwC,GAAAnxC,KAAAc,IAAA8wC,KACA5xC,KAAAc,IAAAswC,EAAAS,IAAAnyC,EAAAC,QAAAK,KAAAe,IAAA,EAAAf,KAAAc,IAAAswC,GAAApxC,KAAAc,IAAA+wC,KACA7xC,KAAAc,IAAAuwC,EAAAS,IAAApyC,EAAAC,QAAAK,KAAAe,IAAA,EAAAf,KAAAc,IAAAuwC,GAAArxC,KAAAc,IAAAgxC,KACA9xC,KAAAc,IAAAwwC,EAAAS,IAAAryC,EAAAC,QAAAK,KAAAe,IAAA,EAAAf,KAAAc,IAAAwwC,GAAAtxC,KAAAc,IAAAixC,KACA/xC,KAAAc,IAAAywC,EAAAS,IAAAtyC,EAAAC,QAAAK,KAAAe,IAAA,EAAAf,KAAAc,IAAAywC,GAAAvxC,KAAAc,IAAAkxC,KACAhyC,KAAAc,IAAA0wC,EAAAS,IAAAvyC,EAAAC,QAAAK,KAAAe,IAAA,EAAAf,KAAAc,IAAA0wC,GAAAxxC,KAAAc,IAAAmxC,KAGAr2C,EAAAD,QAAA0pC,GxBo+ZM,SAAUzpC,EAAQD,EAASH,GyBp6ajC,GAAAkE,GAAAlE,EAAA,GAMA6D,GACAk+C,UACAC,QAQAn+C,GAAAE,OAAA,WACA,GAAAyvC,GAAA,GAAAtvC,GAAAE,WAAA,GAiBA,OAhBAovC,GAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,GASA3vC,EAAA6vC,MAAA,SAAAvuC,GACA,GAAAquC,GAAA,GAAAtvC,GAAAE,WAAA,GAiBA,OAhBAovC,GAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,IAAAruC,EAAA,IACAquC,EAAA,IAAAruC,EAAA,IACAquC,EAAA,IAAAruC,EAAA,IACAquC,EAAA,IAAAruC,EAAA,IACAquC,EAAA,IAAAruC,EAAA,IACAquC,EAAA,IAAAruC,EAAA,IACAquC,GAUA3vC,EAAA8uB,KAAA,SAAA6gB,EAAAruC,GAiBA,MAhBAquC,GAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,IAAAruC,EAAA,IACAquC,EAAA,IAAAruC,EAAA,IACAquC,EAAA,IAAAruC,EAAA,IACAquC,EAAA,IAAAruC,EAAA,IACAquC,EAAA,IAAAruC,EAAA,IACAquC,EAAA,IAAAruC,EAAA,IACAquC,GAwBA3vC,EAAAgtC,WAAA,SAAAhe,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA,GAAA4f,GAAA,GAAAtvC,GAAAE,WAAA,GAiBA,OAhBAovC,GAAA,GAAA3gB,EACA2gB,EAAA,GAAA1gB,EACA0gB,EAAA,GAAAzgB,EACAygB,EAAA,GAAAxgB,EACAwgB,EAAA,GAAAvgB,EACAugB,EAAA,GAAAtgB,EACAsgB,EAAA,GAAArgB,EACAqgB,EAAA,GAAApgB,EACAogB,EAAA,GAAAngB,EACAmgB,EAAA,GAAAlgB,EACAkgB,EAAA,IAAAjgB,EACAigB,EAAA,IAAAhgB,EACAggB,EAAA,IAAA/f,EACA+f,EAAA,IAAA9f,EACA8f,EAAA,IAAA7f,EACA6f,EAAA,IAAA5f,EACA4f,GAyBA3vC,EAAAmI,IAAA,SAAAwnC,EAAA3gB,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAiBA,MAhBA4f,GAAA,GAAA3gB,EACA2gB,EAAA,GAAA1gB,EACA0gB,EAAA,GAAAzgB,EACAygB,EAAA,GAAAxgB,EACAwgB,EAAA,GAAAvgB,EACAugB,EAAA,GAAAtgB,EACAsgB,EAAA,GAAArgB,EACAqgB,EAAA,GAAApgB,EACAogB,EAAA,GAAAngB,EACAmgB,EAAA,GAAAlgB,EACAkgB,EAAA,IAAAjgB,EACAigB,EAAA,IAAAhgB,EACAggB,EAAA,IAAA/f,EACA+f,EAAA,IAAA9f,EACA8f,EAAA,IAAA7f,EACA6f,EAAA,IAAA5f,EACA4f,GAUA3vC,EAAAC,SAAA,SAAA0vC,GAiBA,MAhBAA,GAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,GAUA3vC,EAAAk+C,OAAAnvB,UAAA,SAAA4gB,EAAAruC,GAEA,GAAAquC,IAAAruC,EAAA,CACA,GAAAywB,GAAAzwB,EAAA,GAAA0wB,EAAA1wB,EAAA,GAAA2wB,EAAA3wB,EAAA,GACA8wB,EAAA9wB,EAAA,GAAA+wB,EAAA/wB,EAAA,GACAmxB,EAAAnxB,EAAA,GAEAquC,GAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,IACAquC,EAAA,GAAA5d,EACA4d,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,IACAquC,EAAA,GAAA3d,EACA2d,EAAA,GAAAvd,EACAud,EAAA,IAAAruC,EAAA,IACAquC,EAAA,IAAA1d,EACA0d,EAAA,IAAAtd,EACAsd,EAAA,IAAAld,MAEAkd,GAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,IACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,IACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,IAAAruC,EAAA,IACAquC,EAAA,IAAAruC,EAAA,IACAquC,EAAA,IAAAruC,EAAA,GACAquC,EAAA,IAAAruC,EAAA,GACAquC,EAAA,IAAAruC,EAAA,IACAquC,EAAA,IAAAruC,EAAA,GAGA,OAAAquC,IAUA3vC,EAAAm+C,KAAApvB,UAAA,SAAA4gB,EAAAruC,GACA,GAAAwwC,GAAAC,EAAAC,EAAAC,EACAmM,EAAAC,EACAC,EAAAC,EAAAC,EAAAC,CAqBA,OAnBA3M,GAAAqM,KAAAO,UAAAC,KAAAr9C,EAAA,GACAywC,EAAAoM,KAAAO,UAAAC,KAAAr9C,EAAA,GACA0wC,EAAAmM,KAAAO,UAAAC,KAAAr9C,EAAA,GACA2wC,EAAAkM,KAAAO,UAAAC,KAAAr9C,EAAA,IAEA88C,EAAAD,KAAAO,UAAAE,QAAA9M,EAAAC,EAAA,SACAsM,EAAAF,KAAAO,UAAAE,QAAA5M,EAAAC,EAAA,SACAqM,EAAAH,KAAAO,UAAAE,QAAAR,EAAAC,EAAA,SACAE,EAAAJ,KAAAO,UAAAE,QAAAR,EAAAC,EAAA,SACAF,KAAAO,UAAAG,MAAAlP,EAAA,EAAA2O,GACAH,KAAAO,UAAAG,MAAAlP,EAAA,EAAA4O,GAEAH,EAAAD,KAAAO,UAAAE,QAAA9M,EAAAC,EAAA,SACAsM,EAAAF,KAAAO,UAAAE,QAAA5M,EAAAC,EAAA,SACAuM,EAAAL,KAAAO,UAAAE,QAAAR,EAAAC,EAAA,SACAI,EAAAN,KAAAO,UAAAE,QAAAR,EAAAC,EAAA,SACAF,KAAAO,UAAAG,MAAAlP,EAAA,EAAA6O,GACAL,KAAAO,UAAAG,MAAAlP,EAAA,GAAA8O,GAEA9O,GAUA3vC,EAAA+uB,UAAA1uB,EAAAW,SAAAhB,EAAAm+C,KAAApvB,UAAA/uB,EAAAk+C,OAAAnvB,UASA/uB,EAAAk+C,OAAApO,OAAA,SAAAH,EAAAruC,GACA,GAAAwwB,GAAAxwB,EAAA,GAAAywB,EAAAzwB,EAAA,GAAA0wB,EAAA1wB,EAAA,GAAA2wB,EAAA3wB,EAAA,GACA4wB,EAAA5wB,EAAA,GAAA6wB,EAAA7wB,EAAA,GAAA8wB,EAAA9wB,EAAA,GAAA+wB,EAAA/wB,EAAA,GACAgxB,EAAAhxB,EAAA,GAAAixB,EAAAjxB,EAAA,GAAAkxB,EAAAlxB,EAAA,IAAAmxB,EAAAnxB,EAAA,IACAoxB,EAAApxB,EAAA,IAAAqxB,EAAArxB,EAAA,IAAAsxB,EAAAtxB,EAAA,IAAAuxB,EAAAvxB,EAAA,IAEAwxB,EAAAhB,EAAAK,EAAAJ,EAAAG,EACAa,EAAAjB,EAAAM,EAAAJ,EAAAE,EACAc,EAAAlB,EAAAO,EAAAJ,EAAAC,EACAe,EAAAlB,EAAAK,EAAAJ,EAAAG,EACA+e,EAAAnf,EAAAM,EAAAJ,EAAAE,EACAgf,EAAAnf,EAAAK,EAAAJ,EAAAG,EACAgf,EAAA9e,EAAAK,EAAAJ,EAAAG,EACA2e,EAAA/e,EAAAM,EAAAJ,EAAAE,EACA4e,EAAAhf,EAAAO,EAAAJ,EAAAC,EACA6e,EAAAhf,EAAAK,EAAAJ,EAAAG,EACAO,EAAAX,EAAAM,EAAAJ,EAAAE,EACAQ,EAAAX,EAAAK,EAAAJ,EAAAG,EAGAmd,EAAAjd,EAAAK,EAAAJ,EAAAG,EAAAF,EAAAue,EAAAte,EAAAqe,EAAAJ,EAAAG,EAAAF,EAAAC,CAEA,OAAArB,IAGAA,EAAA,EAAAA,EAEAJ,EAAA,IAAAxd,EAAAgB,EAAAf,EAAAc,EAAAb,EAAAkf,GAAAxB,EACAJ,EAAA,IAAA3d,EAAAkB,EAAAnB,EAAAoB,EAAAlB,EAAAsf,GAAAxB,EACAJ,EAAA,IAAAhd,EAAAwe,EAAAve,EAAAse,EAAAre,EAAAI,GAAA8c,EACAJ,EAAA,IAAAnd,EAAA0e,EAAA3e,EAAA4e,EAAA1e,EAAAQ,GAAA8c,EACAJ,EAAA,IAAAvd,EAAAkf,EAAApf,EAAAiB,EAAAd,EAAAgf,GAAAtB,EACAJ,EAAA,IAAA7d,EAAAqB,EAAAnB,EAAAsf,EAAArf,EAAAof,GAAAtB,EACAJ,EAAA,IAAA/c,EAAAI,EAAAN,EAAAye,EAAAte,EAAAE,GAAAgd,EACAJ,EAAA,IAAArd,EAAA6e,EAAA3e,EAAAQ,EAAAP,EAAAM,GAAAgd,EACAJ,EAAA,IAAAzd,EAAAgB,EAAAf,EAAAmf,EAAAjf,EAAA+e,GAAArB,EACAJ,EAAA,IAAA5d,EAAAuf,EAAAxf,EAAAoB,EAAAjB,EAAAmf,GAAArB,EACAJ,EAAA,KAAAjd,EAAAwe,EAAAve,EAAAK,EAAAH,EAAAC,GAAAid,EACAJ,EAAA,KAAApd,EAAAS,EAAAV,EAAA4e,EAAAze,EAAAK,GAAAid,EACAJ,EAAA,KAAAxd,EAAAkf,EAAAnf,EAAAqf,EAAAnf,EAAAgf,GAAArB,EACAJ,EAAA,KAAA7d,EAAAyf,EAAAxf,EAAAsf,EAAArf,EAAAof,GAAArB,EACAJ,EAAA,KAAAhd,EAAAI,EAAAL,EAAAO,EAAAL,EAAAE,GAAAid,EACAJ,EAAA,KAAArd,EAAAW,EAAAV,EAAAQ,EAAAP,EAAAM,GAAAid,EAEAJ,GArBA,MA+BA3vC,EAAAm+C,KAAArO,OAAA,SAAAH,EAAAruC,GACA,GAAAw9C,GAAAC,EAAAC,EAAAC,EACAC,EACAC,EAAAC,EAAAC,EAAAC,EACAvP,EACA+B,EAAAqM,KAAAO,UAAAC,KAAAr9C,EAAA,GACAywC,EAAAoM,KAAAO,UAAAC,KAAAr9C,EAAA,GACA0wC,EAAAmM,KAAAO,UAAAC,KAAAr9C,EAAA,GACA2wC,EAAAkM,KAAAO,UAAAC,KAAAr9C,EAAA,GAyEA,OAtEA49C,GAAAf,KAAAO,UAAAE,QAAA9M,EAAAC,EAAA,SACAgN,EAAAZ,KAAAO,UAAAE,QAAA5M,EAAAC,EAAA,SACA6M,EAAAX,KAAAO,UAAAE,QAAAM,EAAAH,EAAA,SACAA,EAAAZ,KAAAO,UAAAE,QAAAG,EAAAG,EAAA,SACAA,EAAAf,KAAAO,UAAAE,QAAA9M,EAAAC,EAAA,SACAkN,EAAAd,KAAAO,UAAAE,QAAA5M,EAAAC,EAAA,SACA+M,EAAAb,KAAAO,UAAAE,QAAAM,EAAAD,EAAA,SACAA,EAAAd,KAAAO,UAAAE,QAAAK,EAAAC,EAAA,SAEAA,EAAAf,KAAAO,UAAAxO,IAAA8O,EAAAC,GACAC,EAAAf,KAAAO,UAAAa,QAAAL,EAAA,SACAC,EAAAhB,KAAAO,UAAAxO,IAAA6O,EAAAG,GACAE,EAAAjB,KAAAO,UAAAxO,IAAA4O,EAAAI,GACAA,EAAAf,KAAAO,UAAAa,QAAAL,EAAA,SACAC,EAAAhB,KAAAO,UAAAhN,IAAAyM,KAAAO,UAAAxO,IAAA6O,EAAAG,GAAAC,GACAC,EAAAjB,KAAAO,UAAAhN,IAAAyM,KAAAO,UAAAxO,IAAA4O,EAAAI,GAAAE,GACAA,EAAAjB,KAAAO,UAAAa,QAAAH,EAAA,SAEAF,EAAAf,KAAAO,UAAAxO,IAAA6O,EAAAC,GACAE,EAAAf,KAAAO,UAAAa,QAAAL,EAAA,SACAC,EAAAhB,KAAAO,UAAAlmB,IAAA2lB,KAAAO,UAAAxO,IAAA+O,EAAAC,GAAAC,GACAG,EAAAnB,KAAAO,UAAAxO,IAAA4O,EAAAI,GACAA,EAAAf,KAAAO,UAAAa,QAAAL,EAAA,SACAC,EAAAhB,KAAAO,UAAAhN,IAAAyN,EAAAhB,KAAAO,UAAAxO,IAAA+O,EAAAC,IACAI,EAAAnB,KAAAO,UAAAhN,IAAAyM,KAAAO,UAAAxO,IAAA4O,EAAAI,GAAAI,GACAA,EAAAnB,KAAAO,UAAAa,QAAAD,EAAA,SAEAJ,EAAAf,KAAAO,UAAAxO,IAAAiO,KAAAO,UAAAa,QAAAR,EAAA,SAAAE,GACAC,EAAAf,KAAAO,UAAAa,QAAAL,EAAA,SACAF,EAAAb,KAAAO,UAAAa,QAAAP,EAAA,SACAG,EAAAhB,KAAAO,UAAAlmB,IAAA2lB,KAAAO,UAAAxO,IAAA8O,EAAAE,GAAAC,GACAE,EAAAlB,KAAAO,UAAAxO,IAAA4O,EAAAI,GACAA,EAAAf,KAAAO,UAAAa,QAAAL,EAAA,SACAC,EAAAhB,KAAAO,UAAAhN,IAAAyN,EAAAhB,KAAAO,UAAAxO,IAAA8O,EAAAE,IACAG,EAAAlB,KAAAO,UAAAhN,IAAAyM,KAAAO,UAAAxO,IAAA4O,EAAAI,GAAAG,GACAA,EAAAlB,KAAAO,UAAAa,QAAAF,EAAA,SAEAH,EAAAf,KAAAO,UAAAxO,IAAA4O,EAAAC,GACAG,EAAAf,KAAAO,UAAAa,QAAAL,EAAA,SACAG,EAAAlB,KAAAO,UAAAlmB,IAAA2lB,KAAAO,UAAAxO,IAAA+O,EAAAC,GAAAG,GACAC,EAAAnB,KAAAO,UAAAhN,IAAAyM,KAAAO,UAAAxO,IAAA8O,EAAAE,GAAAI,GACAJ,EAAAf,KAAAO,UAAAa,QAAAL,EAAA,SACAG,EAAAlB,KAAAO,UAAAhN,IAAAyM,KAAAO,UAAAxO,IAAA+O,EAAAC,GAAAG,GACAC,EAAAnB,KAAAO,UAAAhN,IAAA4N,EAAAnB,KAAAO,UAAAxO,IAAA8O,EAAAE,IAEAA,EAAAf,KAAAO,UAAAxO,IAAA4O,EAAAG,GACAC,EAAAf,KAAAO,UAAAa,QAAAL,EAAA,SACAE,EAAAjB,KAAAO,UAAAhN,IAAA0N,EAAAjB,KAAAO,UAAAxO,IAAA8O,EAAAE,IACAG,EAAAlB,KAAAO,UAAAlmB,IAAA2lB,KAAAO,UAAAxO,IAAA6O,EAAAG,GAAAG,GACAH,EAAAf,KAAAO,UAAAa,QAAAL,EAAA,SACAE,EAAAjB,KAAAO,UAAAlmB,IAAA2lB,KAAAO,UAAAxO,IAAA8O,EAAAE,GAAAE,GACAC,EAAAlB,KAAAO,UAAAhN,IAAA2N,EAAAlB,KAAAO,UAAAxO,IAAA6O,EAAAG,IAEAA,EAAAf,KAAAO,UAAAxO,IAAA4O,EAAAE,GACAE,EAAAf,KAAAO,UAAAa,QAAAL,EAAA,SACAE,EAAAjB,KAAAO,UAAAlmB,IAAA2lB,KAAAO,UAAAxO,IAAA+O,EAAAC,GAAAE,GACAE,EAAAnB,KAAAO,UAAAhN,IAAA4N,EAAAnB,KAAAO,UAAAxO,IAAA6O,EAAAG,IACAA,EAAAf,KAAAO,UAAAa,QAAAL,EAAA,SACAE,EAAAjB,KAAAO,UAAAhN,IAAA0N,EAAAjB,KAAAO,UAAAxO,IAAA+O,EAAAC,IACAI,EAAAnB,KAAAO,UAAAlmB,IAAA2lB,KAAAO,UAAAxO,IAAA6O,EAAAG,GAAAI,GAGAvP,EAAAoO,KAAAO,UAAAxO,IAAA4O,EAAAK,GACApP,EAAAoO,KAAAO,UAAAlmB,IAAA2lB,KAAAO,UAAAa,QAAAxP,EAAA,SAAAA,GACAA,EAAAoO,KAAAO,UAAAlmB,IAAA2lB,KAAAO,UAAAa,QAAAxP,EAAA,SAAAA,GACAmP,EAAAf,KAAAO,UAAAc,wBAAAzP,GACAA,EAAAoO,KAAAO,UAAAhN,IACAyM,KAAAO,UAAAlmB,IAAA0mB,KACAf,KAAAO,UAAAxO,IAAAH,EAAAoO,KAAAO,UAAAxO,IAAAgP,QACAnP,EAAAoO,KAAAO,UAAAa,QAAAxP,EAAA,WAMAoO,KAAAO,UAAAG,MAAAlP,EAAA,EAAAwO,KAAAO,UAAAxO,IAAAH,EAAAoP,IACAhB,KAAAO,UAAAG,MAAAlP,EAAA,EAAAwO,KAAAO,UAAAxO,IAAAH,EAAAqP,IACAjB,KAAAO,UAAAG,MAAAlP,EAAA,EAAAwO,KAAAO,UAAAxO,IAAAH,EAAAsP,IACAlB,KAAAO,UAAAG,MAAAlP,EAAA,GAAAwO,KAAAO,UAAAxO,IAAAH,EAAAuP,IACA3P,GARA,MAkBA3vC,EAAA8vC,OAAAzvC,EAAAW,SAAAhB,EAAAm+C,KAAArO,OAAA9vC,EAAAk+C,OAAApO,OASA9vC,EAAAk+C,OAAAlO,QAAA,SAAAL,EAAAruC,GACA,GAAAwwB,GAAAxwB,EAAA,GAAAywB,EAAAzwB,EAAA,GAAA0wB,EAAA1wB,EAAA,GAAA2wB,EAAA3wB,EAAA,GACA4wB,EAAA5wB,EAAA,GAAA6wB,EAAA7wB,EAAA,GAAA8wB,EAAA9wB,EAAA,GAAA+wB,EAAA/wB,EAAA,GACAgxB,EAAAhxB,EAAA,GAAAixB,EAAAjxB,EAAA,GAAAkxB,EAAAlxB,EAAA,IAAAmxB,EAAAnxB,EAAA,IACAoxB,EAAApxB,EAAA,IAAAqxB,EAAArxB,EAAA,IAAAsxB,EAAAtxB,EAAA,IAAAuxB,EAAAvxB,EAAA,GAkBA,OAhBAquC,GAAA,GAAAxd,GAAAK,EAAAK,EAAAJ,EAAAG,GAAAL,GAAAH,EAAAS,EAAAR,EAAAO,GAAAD,GAAAP,EAAAK,EAAAJ,EAAAG,GACAmd,EAAA,KAAA5d,GAAAS,EAAAK,EAAAJ,EAAAG,GAAAL,GAAAP,EAAAa,EAAAZ,EAAAW,GAAAD,GAAAX,EAAAS,EAAAR,EAAAO,IACAmd,EAAA,GAAA5d,GAAAK,EAAAS,EAAAR,EAAAO,GAAAT,GAAAH,EAAAa,EAAAZ,EAAAW,GAAAD,GAAAX,EAAAK,EAAAJ,EAAAG,GACAud,EAAA,KAAA5d,GAAAK,EAAAK,EAAAJ,EAAAG,GAAAL,GAAAH,EAAAS,EAAAR,EAAAO,GAAAD,GAAAP,EAAAK,EAAAJ,EAAAG,IACAud,EAAA,KAAAzd,GAAAM,EAAAK,EAAAJ,EAAAG,GAAAN,GAAAF,EAAAS,EAAAR,EAAAO,GAAAF,GAAAN,EAAAK,EAAAJ,EAAAG,IACAmd,EAAA,GAAA7d,GAAAU,EAAAK,EAAAJ,EAAAG,GAAAN,GAAAN,EAAAa,EAAAZ,EAAAW,GAAAF,GAAAV,EAAAS,EAAAR,EAAAO,GACAmd,EAAA,KAAA7d,GAAAM,EAAAS,EAAAR,EAAAO,GAAAV,GAAAF,EAAAa,EAAAZ,EAAAW,GAAAF,GAAAV,EAAAK,EAAAJ,EAAAG,IACAud,EAAA,GAAA7d,GAAAM,EAAAK,EAAAJ,EAAAG,GAAAN,GAAAF,EAAAS,EAAAR,EAAAO,GAAAF,GAAAN,EAAAK,EAAAJ,EAAAG,GACAud,EAAA,GAAAzd,GAAAK,EAAAM,EAAAJ,EAAAE,GAAAL,GAAAH,EAAAU,EAAAR,EAAAM,GAAAD,GAAAP,EAAAM,EAAAJ,EAAAE,GACAod,EAAA,KAAA7d,GAAAS,EAAAM,EAAAJ,EAAAE,GAAAL,GAAAP,EAAAc,EAAAZ,EAAAU,GAAAD,GAAAX,EAAAU,EAAAR,EAAAM,IACAod,EAAA,IAAA7d,GAAAK,EAAAU,EAAAR,EAAAM,GAAAT,GAAAH,EAAAc,EAAAZ,EAAAU,GAAAD,GAAAX,EAAAM,EAAAJ,EAAAE,GACAwd,EAAA,MAAA7d,GAAAK,EAAAM,EAAAJ,EAAAE,GAAAL,GAAAH,EAAAU,EAAAR,EAAAM,GAAAD,GAAAP,EAAAM,EAAAJ,EAAAE,IACAwd,EAAA,MAAAzd,GAAAK,EAAAK,EAAAJ,EAAAG,GAAAL,GAAAH,EAAAS,EAAAR,EAAAO,GAAAD,GAAAP,EAAAK,EAAAJ,EAAAG,IACAod,EAAA,IAAA7d,GAAAS,EAAAK,EAAAJ,EAAAG,GAAAL,GAAAP,EAAAa,EAAAZ,EAAAW,GAAAD,GAAAX,EAAAS,EAAAR,EAAAO,GACAod,EAAA,MAAA7d,GAAAK,EAAAS,EAAAR,EAAAO,GAAAT,GAAAH,EAAAa,EAAAZ,EAAAW,GAAAD,GAAAX,EAAAK,EAAAJ,EAAAG,IACAwd,EAAA,IAAA7d,GAAAK,EAAAK,EAAAJ,EAAAG,GAAAL,GAAAH,EAAAS,EAAAR,EAAAO,GAAAD,GAAAP,EAAAK,EAAAJ,EAAAG,GACAwd,GAUA3vC,EAAAm+C,KAAAnO,QAAA,SAAAL,EAAAruC,GACA,GAAAwwC,GAAAC,EAAAC,EAAAC,EACA6M,EAAAC,EAAAC,EAAAC,EACAC,EACAC,EAAAC,EAAAC,EAAAC,EAEAxN,EAAAqM,KAAAO,UAAAC,KAAAr9C,EAAA,GACAywC,EAAAoM,KAAAO,UAAAC,KAAAr9C,EAAA,GACA0wC,EAAAmM,KAAAO,UAAAC,KAAAr9C,EAAA,GACA2wC,EAAAkM,KAAAO,UAAAC,KAAAr9C,EAAA,GAqEA,OAlEA49C,GAAAf,KAAAO,UAAAE,QAAA9M,EAAAC,EAAA,SACAgN,EAAAZ,KAAAO,UAAAE,QAAA5M,EAAAC,EAAA,SACA6M,EAAAX,KAAAO,UAAAE,QAAAM,EAAAH,EAAA,SACAA,EAAAZ,KAAAO,UAAAE,QAAAG,EAAAG,EAAA,SAEAA,EAAAf,KAAAO,UAAAE,QAAA9M,EAAAC,EAAA,SACAkN,EAAAd,KAAAO,UAAAE,QAAA5M,EAAAC,EAAA,SACA+M,EAAAb,KAAAO,UAAAE,QAAAM,EAAAD,EAAA,SACAA,EAAAd,KAAAO,UAAAE,QAAAK,EAAAC,EAAA,SAEAA,EAAAf,KAAAO,UAAAxO,IAAA8O,EAAAC,GACAC,EAAAf,KAAAO,UAAAa,QAAAL,EAAA,SACAC,EAAAhB,KAAAO,UAAAxO,IAAA6O,EAAAG,GACAE,EAAAjB,KAAAO,UAAAxO,IAAA4O,EAAAI,GACAA,EAAAf,KAAAO,UAAAa,QAAAL,EAAA,SACAC,EAAAhB,KAAAO,UAAAhN,IAAAyM,KAAAO,UAAAxO,IAAA6O,EAAAG,GAAAC,GACAC,EAAAjB,KAAAO,UAAAhN,IAAAyM,KAAAO,UAAAxO,IAAA4O,EAAAI,GAAAE,GACAA,EAAAjB,KAAAO,UAAAa,QAAAH,EAAA,SAEAF,EAAAf,KAAAO,UAAAxO,IAAA6O,EAAAC,GACAE,EAAAf,KAAAO,UAAAa,QAAAL,EAAA,SACAC,EAAAhB,KAAAO,UAAAlmB,IAAA2lB,KAAAO,UAAAxO,IAAA+O,EAAAC,GAAAC,GACAG,EAAAnB,KAAAO,UAAAxO,IAAA4O,EAAAI,GACAA,EAAAf,KAAAO,UAAAa,QAAAL,EAAA,SACAC,EAAAhB,KAAAO,UAAAhN,IAAAyN,EAAAhB,KAAAO,UAAAxO,IAAA+O,EAAAC,IACAI,EAAAnB,KAAAO,UAAAhN,IAAAyM,KAAAO,UAAAxO,IAAA4O,EAAAI,GAAAI,GACAA,EAAAnB,KAAAO,UAAAa,QAAAD,EAAA,SAEAJ,EAAAf,KAAAO,UAAAxO,IAAAiO,KAAAO,UAAAa,QAAAR,EAAA,SAAAE,GACAC,EAAAf,KAAAO,UAAAa,QAAAL,EAAA,SACAF,EAAAb,KAAAO,UAAAa,QAAAP,EAAA,SACAG,EAAAhB,KAAAO,UAAAlmB,IAAA2lB,KAAAO,UAAAxO,IAAA8O,EAAAE,GAAAC,GACAE,EAAAlB,KAAAO,UAAAxO,IAAA4O,EAAAI,GACAA,EAAAf,KAAAO,UAAAa,QAAAL,EAAA,SACAC,EAAAhB,KAAAO,UAAAhN,IAAAyN,EAAAhB,KAAAO,UAAAxO,IAAA8O,EAAAE,IACAG,EAAAlB,KAAAO,UAAAhN,IAAAyM,KAAAO,UAAAxO,IAAA4O,EAAAI,GAAAG,GACAA,EAAAlB,KAAAO,UAAAa,QAAAF,EAAA,SAEAH,EAAAf,KAAAO,UAAAxO,IAAA4O,EAAAC,GACAG,EAAAf,KAAAO,UAAAa,QAAAL,EAAA,SACAG,EAAAlB,KAAAO,UAAAlmB,IAAA2lB,KAAAO,UAAAxO,IAAA+O,EAAAC,GAAAG,GACAC,EAAAnB,KAAAO,UAAAhN,IAAAyM,KAAAO,UAAAxO,IAAA8O,EAAAE,GAAAI,GACAJ,EAAAf,KAAAO,UAAAa,QAAAL,EAAA,SACAG,EAAAlB,KAAAO,UAAAhN,IAAAyM,KAAAO,UAAAxO,IAAA+O,EAAAC,GAAAG,GACAC,EAAAnB,KAAAO,UAAAhN,IAAA4N,EAAAnB,KAAAO,UAAAxO,IAAA8O,EAAAE,IAEAA,EAAAf,KAAAO,UAAAxO,IAAA4O,EAAAG,GACAC,EAAAf,KAAAO,UAAAa,QAAAL,EAAA,SACAE,EAAAjB,KAAAO,UAAAhN,IAAA0N,EAAAjB,KAAAO,UAAAxO,IAAA8O,EAAAE,IACAG,EAAAlB,KAAAO,UAAAlmB,IAAA2lB,KAAAO,UAAAxO,IAAA6O,EAAAG,GAAAG,GACAH,EAAAf,KAAAO,UAAAa,QAAAL,EAAA,SACAE,EAAAjB,KAAAO,UAAAlmB,IAAA2lB,KAAAO,UAAAxO,IAAA8O,EAAAE,GAAAE,GACAC,EAAAlB,KAAAO,UAAAhN,IAAA2N,EAAAlB,KAAAO,UAAAxO,IAAA6O,EAAAG,IAEAA,EAAAf,KAAAO,UAAAxO,IAAA4O,EAAAE,GACAE,EAAAf,KAAAO,UAAAa,QAAAL,EAAA,SACAE,EAAAjB,KAAAO,UAAAlmB,IAAA2lB,KAAAO,UAAAxO,IAAA+O,EAAAC,GAAAE,GACAE,EAAAnB,KAAAO,UAAAhN,IAAA4N,EAAAnB,KAAAO,UAAAxO,IAAA6O,EAAAG,IACAA,EAAAf,KAAAO,UAAAa,QAAAL,EAAA,SACAE,EAAAjB,KAAAO,UAAAhN,IAAA0N,EAAAjB,KAAAO,UAAAxO,IAAA+O,EAAAC,IACAI,EAAAnB,KAAAO,UAAAlmB,IAAA2lB,KAAAO,UAAAxO,IAAA6O,EAAAG,GAAAI,GAEAnB,KAAAO,UAAAG,MAAAlP,EAAA,EAAAwP,GACAhB,KAAAO,UAAAG,MAAAlP,EAAA,EAAAyP,GACAjB,KAAAO,UAAAG,MAAAlP,EAAA,EAAA0P,GACAlB,KAAAO,UAAAG,MAAAlP,EAAA,GAAA2P,GACA3P,GAUA3vC,EAAAgwC,QAAA3vC,EAAAW,SAAAhB,EAAAm+C,KAAAnO,QAAAhwC,EAAAk+C,OAAAlO,QAQAhwC,EAAAiwC,YAAA,SAAA3uC,GACA,GAAAwwB,GAAAxwB,EAAA,GAAAywB,EAAAzwB,EAAA,GAAA0wB,EAAA1wB,EAAA,GAAA2wB,EAAA3wB,EAAA,GACA4wB,EAAA5wB,EAAA,GAAA6wB,EAAA7wB,EAAA,GAAA8wB,EAAA9wB,EAAA,GAAA+wB,EAAA/wB,EAAA,GACAgxB,EAAAhxB,EAAA,GAAAixB,EAAAjxB,EAAA,GAAAkxB,EAAAlxB,EAAA,IAAAmxB,EAAAnxB,EAAA,IACAoxB,EAAApxB,EAAA,IAAAqxB,EAAArxB,EAAA,IAAAsxB,EAAAtxB,EAAA,IAAAuxB,EAAAvxB,EAAA,GAgBA,QAdAwwB,EAAAK,EAAAJ,EAAAG,IAWAM,EAAAK,EAAAJ,EAAAG,IAVAd,EAAAM,EAAAJ,EAAAE,IASAK,EAAAM,EAAAJ,EAAAE,IARAb,EAAAO,EAAAJ,EAAAC,IAOAK,EAAAK,EAAAJ,EAAAG,IANAZ,EAAAK,EAAAJ,EAAAG,IAKAG,EAAAO,EAAAJ,EAAAC,IAJAX,EAAAM,EAAAJ,EAAAE,IAGAG,EAAAM,EAAAJ,EAAAE,IAFAV,EAAAK,EAAAJ,EAAAG,IACAE,EAAAK,EAAAJ,EAAAG,IAmBA1yB,EAAAm+C,KAAAtsB,SAAA,SAAA8d,EAAAruC,EAAAE,GACA,GAAAswC,GAAAqM,KAAAO,UAAAC,KAAAr9C,EAAA,GACAywC,EAAAoM,KAAAO,UAAAC,KAAAr9C,EAAA,GACA0wC,EAAAmM,KAAAO,UAAAC,KAAAr9C,EAAA,GACA2wC,EAAAkM,KAAAO,UAAAC,KAAAr9C,EAAA,IAEAixC,EAAA4L,KAAAO,UAAAC,KAAAn9C,EAAA,GACA88C,EAAAH,KAAAO,UAAAlmB,IACA2lB,KAAAO,UAAAxO,IAAAiO,KAAAO,UAAAa,QAAAhN,EAAA,SAAAT,GACAqM,KAAAO,UAAAlmB,IACA2lB,KAAAO,UAAAxO,IAAAiO,KAAAO,UAAAa,QAAAhN,EAAA,SAAAR,GACAoM,KAAAO,UAAAlmB,IACA2lB,KAAAO,UAAAxO,IAAAiO,KAAAO,UAAAa,QAAAhN,EAAA,SAAAP,GACAmM,KAAAO,UAAAxO,IAAAiO,KAAAO,UAAAa,QAAAhN,EAAA,SAAAN,KACAkM,MAAAO,UAAAG,MAAAlP,EAAA,EAAA2O,EAEA,IAAA9L,GAAA2L,KAAAO,UAAAC,KAAAn9C,EAAA,GACA+8C,EAAAJ,KAAAO,UAAAlmB,IACA2lB,KAAAO,UAAAxO,IAAAiO,KAAAO,UAAAa,QAAA/M,EAAA,SAAAV,GACAqM,KAAAO,UAAAlmB,IACA2lB,KAAAO,UAAAxO,IAAAiO,KAAAO,UAAAa,QAAA/M,EAAA,SAAAT,GACAoM,KAAAO,UAAAlmB,IACA2lB,KAAAO,UAAAxO,IAAAiO,KAAAO,UAAAa,QAAA/M,EAAA,SAAAR,GACAmM,KAAAO,UAAAxO,IAAAiO,KAAAO,UAAAa,QAAA/M,EAAA,SAAAP,KACAkM,MAAAO,UAAAG,MAAAlP,EAAA,EAAA4O,EAEA,IAAA9L,GAAA0L,KAAAO,UAAAC,KAAAn9C,EAAA,GACAg9C,EAAAL,KAAAO,UAAAlmB,IACA2lB,KAAAO,UAAAxO,IAAAiO,KAAAO,UAAAa,QAAA9M,EAAA,SAAAX,GACAqM,KAAAO,UAAAlmB,IACA2lB,KAAAO,UAAAxO,IAAAiO,KAAAO,UAAAa,QAAA9M,EAAA,SAAAV,GACAoM,KAAAO,UAAAlmB,IACA2lB,KAAAO,UAAAxO,IAAAiO,KAAAO,UAAAa,QAAA9M,EAAA,SAAAT,GACAmM,KAAAO,UAAAxO,IAAAiO,KAAAO,UAAAa,QAAA9M,EAAA,SAAAR,KACAkM,MAAAO,UAAAG,MAAAlP,EAAA,EAAA6O,EAEA,IAAA9L,GAAAyL,KAAAO,UAAAC,KAAAn9C,EAAA,IACAi9C,EAAAN,KAAAO,UAAAlmB,IACA2lB,KAAAO,UAAAxO,IAAAiO,KAAAO,UAAAa,QAAA7M,EAAA,SAAAZ,GACAqM,KAAAO,UAAAlmB,IACA2lB,KAAAO,UAAAxO,IAAAiO,KAAAO,UAAAa,QAAA7M,EAAA,SAAAX,GACAoM,KAAAO,UAAAlmB,IACA2lB,KAAAO,UAAAxO,IAAAiO,KAAAO,UAAAa,QAAA7M,EAAA,SAAAV,GACAmM,KAAAO,UAAAxO,IAAAiO,KAAAO,UAAAa,QAAA7M,EAAA,SAAAT,KAGA,OAFAkM,MAAAO,UAAAG,MAAAlP,EAAA,GAAA8O,GAEA9O,GAWA3vC,EAAAk+C,OAAArsB,SAAA,SAAA8d,EAAAruC,EAAAE,GACA,GAAAswB,GAAAxwB,EAAA,GAAAywB,EAAAzwB,EAAA,GAAA0wB,EAAA1wB,EAAA,GAAA2wB,EAAA3wB,EAAA,GACA4wB,EAAA5wB,EAAA,GAAA6wB,EAAA7wB,EAAA,GAAA8wB,EAAA9wB,EAAA,GAAA+wB,EAAA/wB,EAAA,GACAgxB,EAAAhxB,EAAA,GAAAixB,EAAAjxB,EAAA,GAAAkxB,EAAAlxB,EAAA,IAAAmxB,EAAAnxB,EAAA,IACAoxB,EAAApxB,EAAA,IAAAqxB,EAAArxB,EAAA,IAAAsxB,EAAAtxB,EAAA,IAAAuxB,EAAAvxB,EAAA,IAGAixC,EAAA/wC,EAAA,GAAAgxC,EAAAhxC,EAAA,GAAAixC,EAAAjxC,EAAA,GAAAkxC,EAAAlxC,EAAA,EAuBA,OAtBAmuC,GAAA,GAAA4C,EAAAzgB,EAAA0gB,EAAAtgB,EAAAugB,EAAAngB,EAAAogB,EAAAhgB,EACAid,EAAA,GAAA4C,EAAAxgB,EAAAygB,EAAArgB,EAAAsgB,EAAAlgB,EAAAmgB,EAAA/f,EACAgd,EAAA,GAAA4C,EAAAvgB,EAAAwgB,EAAApgB,EAAAqgB,EAAAjgB,EAAAkgB,EAAA9f,EACA+c,EAAA,GAAA4C,EAAAtgB,EAAAugB,EAAAngB,EAAAogB,EAAAhgB,EAAAigB,EAAA7f,EAEA0f,EAAA/wC,EAAA,GAAcgxC,EAAAhxC,EAAA,GAAWixC,EAAAjxC,EAAA,GAAWkxC,EAAAlxC,EAAA,GACpCmuC,EAAA,GAAA4C,EAAAzgB,EAAA0gB,EAAAtgB,EAAAugB,EAAAngB,EAAAogB,EAAAhgB,EACAid,EAAA,GAAA4C,EAAAxgB,EAAAygB,EAAArgB,EAAAsgB,EAAAlgB,EAAAmgB,EAAA/f,EACAgd,EAAA,GAAA4C,EAAAvgB,EAAAwgB,EAAApgB,EAAAqgB,EAAAjgB,EAAAkgB,EAAA9f,EACA+c,EAAA,GAAA4C,EAAAtgB,EAAAugB,EAAAngB,EAAAogB,EAAAhgB,EAAAigB,EAAA7f,EAEA0f,EAAA/wC,EAAA,GAAcgxC,EAAAhxC,EAAA,GAAWixC,EAAAjxC,EAAA,IAAYkxC,EAAAlxC,EAAA,IACrCmuC,EAAA,GAAA4C,EAAAzgB,EAAA0gB,EAAAtgB,EAAAugB,EAAAngB,EAAAogB,EAAAhgB,EACAid,EAAA,GAAA4C,EAAAxgB,EAAAygB,EAAArgB,EAAAsgB,EAAAlgB,EAAAmgB,EAAA/f,EACAgd,EAAA,IAAA4C,EAAAvgB,EAAAwgB,EAAApgB,EAAAqgB,EAAAjgB,EAAAkgB,EAAA9f,EACA+c,EAAA,IAAA4C,EAAAtgB,EAAAugB,EAAAngB,EAAAogB,EAAAhgB,EAAAigB,EAAA7f,EAEA0f,EAAA/wC,EAAA,IAAegxC,EAAAhxC,EAAA,IAAYixC,EAAAjxC,EAAA,IAAYkxC,EAAAlxC,EAAA,IACvCmuC,EAAA,IAAA4C,EAAAzgB,EAAA0gB,EAAAtgB,EAAAugB,EAAAngB,EAAAogB,EAAAhgB,EACAid,EAAA,IAAA4C,EAAAxgB,EAAAygB,EAAArgB,EAAAsgB,EAAAlgB,EAAAmgB,EAAA/f,EACAgd,EAAA,IAAA4C,EAAAvgB,EAAAwgB,EAAApgB,EAAAqgB,EAAAjgB,EAAAkgB,EAAA9f,EACA+c,EAAA,IAAA4C,EAAAtgB,EAAAugB,EAAAngB,EAAAogB,EAAAhgB,EAAAigB,EAAA7f,EACA8c,GAWA3vC,EAAA6xB,SAAAxxB,EAAAW,SAAAhB,EAAAm+C,KAAAtsB,SAAA7xB,EAAAk+C,OAAArsB,SAMA7xB,EAAAkwC,IAAAlwC,EAAA6xB,SAUA7xB,EAAAk+C,OAAAhoB,UAAA,SAAAyZ,EAAAruC,EAAAqD,GACA,GACAmtB,GAAAC,EAAAC,EAAAC,EACAC,EAAAC,EAAAC,EAAAC,EACAC,EAAAC,EAAAC,EAAAC,EAHAuE,EAAAryB,EAAA,GAAAK,EAAAL,EAAA,GAAAsyB,EAAAtyB,EAAA,EAyBA,OApBArD,KAAAquC,GACAA,EAAA,IAAAruC,EAAA,GAAA01B,EAAA11B,EAAA,GAAA0D,EAAA1D,EAAA,GAAA21B,EAAA31B,EAAA,IACAquC,EAAA,IAAAruC,EAAA,GAAA01B,EAAA11B,EAAA,GAAA0D,EAAA1D,EAAA,GAAA21B,EAAA31B,EAAA,IACAquC,EAAA,IAAAruC,EAAA,GAAA01B,EAAA11B,EAAA,GAAA0D,EAAA1D,EAAA,IAAA21B,EAAA31B,EAAA,IACAquC,EAAA,IAAAruC,EAAA,GAAA01B,EAAA11B,EAAA,GAAA0D,EAAA1D,EAAA,IAAA21B,EAAA31B,EAAA,MAEAwwB,EAAAxwB,EAAA,GAAmBywB,EAAAzwB,EAAA,GAAY0wB,EAAA1wB,EAAA,GAAY2wB,EAAA3wB,EAAA,GAC3C4wB,EAAA5wB,EAAA,GAAmB6wB,EAAA7wB,EAAA,GAAY8wB,EAAA9wB,EAAA,GAAY+wB,EAAA/wB,EAAA,GAC3CgxB,EAAAhxB,EAAA,GAAmBixB,EAAAjxB,EAAA,GAAYkxB,EAAAlxB,EAAA,IAAamxB,EAAAnxB,EAAA,IAE5CquC,EAAA,GAAA7d,EAAqB6d,EAAA,GAAA5d,EAAc4d,EAAA,GAAA3d,EAAc2d,EAAA,GAAA1d,EACjD0d,EAAA,GAAAzd,EAAqByd,EAAA,GAAAxd,EAAcwd,EAAA,GAAAvd,EAAcud,EAAA,GAAAtd,EACjDsd,EAAA,GAAArd,EAAqBqd,EAAA,GAAApd,EAAcod,EAAA,IAAAnd,EAAemd,EAAA,IAAAld,EAElDkd,EAAA,IAAA7d,EAAAkF,EAAA9E,EAAAltB,EAAAstB,EAAA2E,EAAA31B,EAAA,IACAquC,EAAA,IAAA5d,EAAAiF,EAAA7E,EAAAntB,EAAAutB,EAAA0E,EAAA31B,EAAA,IACAquC,EAAA,IAAA3d,EAAAgF,EAAA5E,EAAAptB,EAAAwtB,EAAAyE,EAAA31B,EAAA,IACAquC,EAAA,IAAA1d,EAAA+E,EAAA3E,EAAArtB,EAAAytB,EAAAwE,EAAA31B,EAAA,KAGAquC,GAWA3vC,EAAAm+C,KAAAjoB,UAAA,SAAAyZ,EAAAruC,EAAAqD,GACA,GAAAmtC,GAAAqM,KAAAO,UAAAC,KAAAr9C,EAAA,GACAywC,EAAAoM,KAAAO,UAAAC,KAAAr9C,EAAA,GACA0wC,EAAAmM,KAAAO,UAAAC,KAAAr9C,EAAA,GACA2wC,EAAAkM,KAAAO,UAAAC,KAAAr9C,EAAA,IACA8zC,EAAA+I,KAAAO,UAAA/5C,EAAA,GAAAA,EAAA,GAAAA,EAAA,KAEArD,KAAAquC,IACAA,EAAA,GAAAruC,EAAA,GAAsBquC,EAAA,GAAAruC,EAAA,GAAequC,EAAA,GAAAruC,EAAA,GAAequC,EAAA,GAAAruC,EAAA,GACpDquC,EAAA,GAAAruC,EAAA,GAAsBquC,EAAA,GAAAruC,EAAA,GAAequC,EAAA,GAAAruC,EAAA,GAAequC,EAAA,GAAAruC,EAAA,GACpDquC,EAAA,GAAAruC,EAAA,GAAsBquC,EAAA,GAAAruC,EAAA,GAAequC,EAAA,IAAAruC,EAAA,IAAiBquC,EAAA,IAAAruC,EAAA,KAGtDwwC,EAAAqM,KAAAO,UAAAxO,IAAA4B,EAAAqM,KAAAO,UAAAa,QAAAnK,EAAA,UACArD,EAAAoM,KAAAO,UAAAxO,IAAA6B,EAAAoM,KAAAO,UAAAa,QAAAnK,EAAA,UACApD,EAAAmM,KAAAO,UAAAxO,IAAA8B,EAAAmM,KAAAO,UAAAa,QAAAnK,EAAA,SAEA,IAAA3jB,GAAA0sB,KAAAO,UAAAlmB,IAAAsZ,EAAAqM,KAAAO,UAAAlmB,IAAAuZ,EAAAoM,KAAAO,UAAAlmB,IAAAwZ,EAAAC,IAGA,OAFAkM,MAAAO,UAAAG,MAAAlP,EAAA,GAAAle,GAEAke,GAWA3vC,EAAAk2B,UAAA71B,EAAAW,SAAAhB,EAAAm+C,KAAAjoB,UAAAl2B,EAAAk+C,OAAAhoB,UAUAl2B,EAAAk+C,OAAAjmB,MAAA,SAAA0X,EAAAruC,EAAAqD,GACA,GAAAqyB,GAAAryB,EAAA,GAAAK,EAAAL,EAAA,GAAAsyB,EAAAtyB,EAAA,EAkBA,OAhBAgrC,GAAA,GAAAruC,EAAA,GAAA01B,EACA2Y,EAAA,GAAAruC,EAAA,GAAA01B,EACA2Y,EAAA,GAAAruC,EAAA,GAAA01B,EACA2Y,EAAA,GAAAruC,EAAA,GAAA01B,EACA2Y,EAAA,GAAAruC,EAAA,GAAA0D,EACA2qC,EAAA,GAAAruC,EAAA,GAAA0D,EACA2qC,EAAA,GAAAruC,EAAA,GAAA0D,EACA2qC,EAAA,GAAAruC,EAAA,GAAA0D,EACA2qC,EAAA,GAAAruC,EAAA,GAAA21B,EACA0Y,EAAA,GAAAruC,EAAA,GAAA21B,EACA0Y,EAAA,IAAAruC,EAAA,IAAA21B,EACA0Y,EAAA,IAAAruC,EAAA,IAAA21B,EACA0Y,EAAA,IAAAruC,EAAA,IACAquC,EAAA,IAAAruC,EAAA,IACAquC,EAAA,IAAAruC,EAAA,IACAquC,EAAA,IAAAruC,EAAA,IACAquC,GAWA3vC,EAAAm+C,KAAAlmB,MAAA,SAAA0X,EAAAruC,EAAAqD,GACA,GAAAmtC,GAAAC,EAAAC,EACAoD,EAAA+I,KAAAO,UAAA/5C,EAAA,GAAAA,EAAA,GAAAA,EAAA,KAkBA,OAhBAmtC,GAAAqM,KAAAO,UAAAC,KAAAr9C,EAAA,GACA68C,KAAAO,UAAAG,MACAlP,EAAA,EAAAwO,KAAAO,UAAAxO,IAAA4B,EAAAqM,KAAAO,UAAAa,QAAAnK,EAAA,WAEArD,EAAAoM,KAAAO,UAAAC,KAAAr9C,EAAA,GACA68C,KAAAO,UAAAG,MACAlP,EAAA,EAAAwO,KAAAO,UAAAxO,IAAA6B,EAAAoM,KAAAO,UAAAa,QAAAnK,EAAA,WAEApD,EAAAmM,KAAAO,UAAAC,KAAAr9C,EAAA,GACA68C,KAAAO,UAAAG,MACAlP,EAAA,EAAAwO,KAAAO,UAAAxO,IAAA8B,EAAAmM,KAAAO,UAAAa,QAAAnK,EAAA,WAEAzF,EAAA,IAAAruC,EAAA,IACAquC,EAAA,IAAAruC,EAAA,IACAquC,EAAA,IAAAruC,EAAA,IACAquC,EAAA,IAAAruC,EAAA,IACAquC,GAWA3vC,EAAAi4B,MAAA53B,EAAAW,SAAAhB,EAAAm+C,KAAAlmB,MAAAj4B,EAAAk+C,OAAAjmB,MAWAj4B,EAAAmwC,OAAA,SAAAR,EAAAruC,EAAA8uC,EAAAnc,GACA,GAEAp2B,GAAAjB,EAAAsF,EACA4vB,EAAAC,EAAAC,EAAAC,EACAC,EAAAC,EAAAC,EAAAC,EACAC,EAAAC,EAAAC,EAAAC,EACAK,EAAAC,EAAAC,EACAE,EAAAC,EAAAC,EACAE,EAAAC,EAAAC,EARAwD,EAAA/C,EAAA,GAAAjvB,EAAAivB,EAAA,GAAAgD,EAAAhD,EAAA,GACAhsB,EAAAtH,KAAAglB,KAAAqR,IAAAhyB,IAAAiyB,IASA,OAAAt2B,MAAAc,IAAAwG,GAAA5H,EAAAC,QAA2C,MAE3C2H,EAAA,EAAAA,EACA+uB,GAAA/uB,EACAjD,GAAAiD,EACAgvB,GAAAhvB,EAEApK,EAAA8C,KAAA81B,IAAA2Z,GACAxzC,EAAA+D,KAAA61B,IAAA4Z,GACAluC,EAAA,EAAAtF,EAEAk1B,EAAAxwB,EAAA,GAAeywB,EAAAzwB,EAAA,GAAY0wB,EAAA1wB,EAAA,GAAY2wB,EAAA3wB,EAAA,GACvC4wB,EAAA5wB,EAAA,GAAe6wB,EAAA7wB,EAAA,GAAY8wB,EAAA9wB,EAAA,GAAY+wB,EAAA/wB,EAAA,GACvCgxB,EAAAhxB,EAAA,GAAeixB,EAAAjxB,EAAA,GAAYkxB,EAAAlxB,EAAA,IAAamxB,EAAAnxB,EAAA,IAGxCwxB,EAAAkE,IAAA90B,EAAAtF,EAAwBm2B,EAAA/tB,EAAAgyB,EAAA90B,EAAA+0B,EAAAp5B,EAAyBm1B,EAAAiE,EAAAD,EAAA90B,EAAA8C,EAAAnH,EACjDq1B,EAAA8D,EAAAhyB,EAAA9C,EAAA+0B,EAAAp5B,EAA4Bs1B,EAAAnuB,IAAA9C,EAAAtF,EAAqBw2B,EAAA6D,EAAAjyB,EAAA9C,EAAA80B,EAAAn5B,EACjDy1B,EAAA0D,EAAAC,EAAA/0B,EAAA8C,EAAAnH,EAA4B01B,EAAAvuB,EAAAiyB,EAAA/0B,EAAA80B,EAAAn5B,EAAyB21B,EAAAyD,IAAA/0B,EAAAtF,EAGrD+yC,EAAA,GAAA7d,EAAAgB,EAAAZ,EAAAa,EAAAT,EAAAU,EACA2c,EAAA,GAAA5d,EAAAe,EAAAX,EAAAY,EAAAR,EAAAS,EACA2c,EAAA,GAAA3d,EAAAc,EAAAV,EAAAW,EAAAP,EAAAQ,EACA2c,EAAA,GAAA1d,EAAAa,EAAAT,EAAAU,EAAAN,EAAAO,EACA2c,EAAA,GAAA7d,EAAAoB,EAAAhB,EAAAiB,EAAAb,EAAAc,EACAuc,EAAA,GAAA5d,EAAAmB,EAAAf,EAAAgB,EAAAZ,EAAAa,EACAuc,EAAA,GAAA3d,EAAAkB,EAAAd,EAAAe,EAAAX,EAAAY,EACAuc,EAAA,GAAA1d,EAAAiB,EAAAb,EAAAc,EAAAV,EAAAW,EACAuc,EAAA,GAAA7d,EAAAwB,EAAApB,EAAAqB,EAAAjB,EAAAkB,EACAmc,EAAA,GAAA5d,EAAAuB,EAAAnB,EAAAoB,EAAAhB,EAAAiB,EACAmc,EAAA,IAAA3d,EAAAsB,EAAAlB,EAAAmB,EAAAf,EAAAgB,EACAmc,EAAA,IAAA1d,EAAAqB,EAAAjB,EAAAkB,EAAAd,EAAAe,EAEAlyB,IAAAquC,IACAA,EAAA,IAAAruC,EAAA,IACAquC,EAAA,IAAAruC,EAAA,IACAquC,EAAA,IAAAruC,EAAA,IACAquC,EAAA,IAAAruC,EAAA,KAEAquC,IAWA3vC,EAAAk+C,OAAAxnB,QAAA,SAAAiZ,EAAAruC,EAAA8uC,GACA,GAAAvyC,GAAA8C,KAAA81B,IAAA2Z,GACAxzC,EAAA+D,KAAA61B,IAAA4Z,GACAle,EAAA5wB,EAAA,GACA6wB,EAAA7wB,EAAA,GACA8wB,EAAA9wB,EAAA,GACA+wB,EAAA/wB,EAAA,GACAgxB,EAAAhxB,EAAA,GACAixB,EAAAjxB,EAAA,GACAkxB,EAAAlxB,EAAA,IACAmxB,EAAAnxB,EAAA,GAsBA,OApBAA,KAAAquC,IACAA,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,IAAAruC,EAAA,IACAquC,EAAA,IAAAruC,EAAA,IACAquC,EAAA,IAAAruC,EAAA,IACAquC,EAAA,IAAAruC,EAAA,KAIAquC,EAAA,GAAAzd,EAAAt1B,EAAA01B,EAAAz0B,EACA8xC,EAAA,GAAAxd,EAAAv1B,EAAA21B,EAAA10B,EACA8xC,EAAA,GAAAvd,EAAAx1B,EAAA41B,EAAA30B,EACA8xC,EAAA,GAAAtd,EAAAz1B,EAAA61B,EAAA50B,EACA8xC,EAAA,GAAArd,EAAA11B,EAAAs1B,EAAAr0B,EACA8xC,EAAA,GAAApd,EAAA31B,EAAAu1B,EAAAt0B,EACA8xC,EAAA,IAAAnd,EAAA51B,EAAAw1B,EAAAv0B,EACA8xC,EAAA,IAAAld,EAAA71B,EAAAy1B,EAAAx0B,EACA8xC,GAWA3vC,EAAAm+C,KAAAznB,QAAA,SAAAiZ,EAAAruC,EAAA8uC,GACA,GAAAvyC,GAAAsgD,KAAAO,UAAAe,MAAA9+C,KAAA81B,IAAA2Z,IACAxzC,EAAAuhD,KAAAO,UAAAe,MAAA9+C,KAAA61B,IAAA4Z,GAEA9uC,KAAAquC,IACAA,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,IAAAruC,EAAA,IACAquC,EAAA,IAAAruC,EAAA,IACAquC,EAAA,IAAAruC,EAAA,IACAquC,EAAA,IAAAruC,EAAA,IAIA,IAAAo+C,GAAAvB,KAAAO,UAAAC,KAAAr9C,EAAA,GACAq+C,EAAAxB,KAAAO,UAAAC,KAAAr9C,EAAA,EAKA,OAJA68C,MAAAO,UAAAG,MAAAlP,EAAA,EACAwO,KAAAO,UAAAlmB,IAAA2lB,KAAAO,UAAAxO,IAAAwP,EAAA9iD,GAAAuhD,KAAAO,UAAAxO,IAAAyP,EAAA9hD,KACAsgD,KAAAO,UAAAG,MAAAlP,EAAA,EACAwO,KAAAO,UAAAhN,IAAAyM,KAAAO,UAAAxO,IAAAyP,EAAA/iD,GAAAuhD,KAAAO,UAAAxO,IAAAwP,EAAA7hD,KACA8xC,GAWA3vC,EAAA02B,QAAAr2B,EAAAW,SAAAhB,EAAAm+C,KAAAznB,QAAA12B,EAAAk+C,OAAAxnB,QAUA12B,EAAAk+C,OAAAtnB,QAAA,SAAA+Y,EAAAruC,EAAA8uC,GACA,GAAAvyC,GAAA8C,KAAA81B,IAAA2Z,GACAxzC,EAAA+D,KAAA61B,IAAA4Z,GACAte,EAAAxwB,EAAA,GACAywB,EAAAzwB,EAAA,GACA0wB,EAAA1wB,EAAA,GACA2wB,EAAA3wB,EAAA,GACAgxB,EAAAhxB,EAAA,GACAixB,EAAAjxB,EAAA,GACAkxB,EAAAlxB,EAAA,IACAmxB,EAAAnxB,EAAA,GAsBA,OApBAA,KAAAquC,IACAA,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,IAAAruC,EAAA,IACAquC,EAAA,IAAAruC,EAAA,IACAquC,EAAA,IAAAruC,EAAA,IACAquC,EAAA,IAAAruC,EAAA,KAIAquC,EAAA,GAAA7d,EAAAl1B,EAAA01B,EAAAz0B,EACA8xC,EAAA,GAAA5d,EAAAn1B,EAAA21B,EAAA10B,EACA8xC,EAAA,GAAA3d,EAAAp1B,EAAA41B,EAAA30B,EACA8xC,EAAA,GAAA1d,EAAAr1B,EAAA61B,EAAA50B,EACA8xC,EAAA,GAAA7d,EAAAj0B,EAAAy0B,EAAA11B,EACA+yC,EAAA,GAAA5d,EAAAl0B,EAAA00B,EAAA31B,EACA+yC,EAAA,IAAA3d,EAAAn0B,EAAA20B,EAAA51B,EACA+yC,EAAA,IAAA1d,EAAAp0B,EAAA40B,EAAA71B,EACA+yC,GAWA3vC,EAAAm+C,KAAAvnB,QAAA,SAAA+Y,EAAAruC,EAAA8uC,GACA,GAAAvyC,GAAAsgD,KAAAO,UAAAe,MAAA9+C,KAAA81B,IAAA2Z,IACAxzC,EAAAuhD,KAAAO,UAAAe,MAAA9+C,KAAA61B,IAAA4Z,GAEA9uC,KAAAquC,IACAA,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,IAAAruC,EAAA,IACAquC,EAAA,IAAAruC,EAAA,IACAquC,EAAA,IAAAruC,EAAA,IACAquC,EAAA,IAAAruC,EAAA,IAIA,IAAAs+C,GAAAzB,KAAAO,UAAAC,KAAAr9C,EAAA,GACAq+C,EAAAxB,KAAAO,UAAAC,KAAAr9C,EAAA,EAKA,OAJA68C,MAAAO,UAAAG,MAAAlP,EAAA,EACAwO,KAAAO,UAAAhN,IAAAyM,KAAAO,UAAAxO,IAAA0P,EAAAhjD,GAAAuhD,KAAAO,UAAAxO,IAAAyP,EAAA9hD,KACAsgD,KAAAO,UAAAG,MAAAlP,EAAA,EACAwO,KAAAO,UAAAlmB,IAAA2lB,KAAAO,UAAAxO,IAAA0P,EAAA/hD,GAAAsgD,KAAAO,UAAAxO,IAAAyP,EAAA/iD,KACA+yC,GAWA3vC,EAAA42B,QAAAv2B,EAAAW,SAAAhB,EAAAm+C,KAAAvnB,QAAA52B,EAAAk+C,OAAAtnB,QAUA52B,EAAAk+C,OAAApnB,QAAA,SAAA6Y,EAAAruC,EAAA8uC,GACA,GAAAvyC,GAAA8C,KAAA81B,IAAA2Z,GACAxzC,EAAA+D,KAAA61B,IAAA4Z,GACAte,EAAAxwB,EAAA,GACAywB,EAAAzwB,EAAA,GACA0wB,EAAA1wB,EAAA,GACA2wB,EAAA3wB,EAAA,GACA4wB,EAAA5wB,EAAA,GACA6wB,EAAA7wB,EAAA,GACA8wB,EAAA9wB,EAAA,GACA+wB,EAAA/wB,EAAA,EAsBA,OApBAA,KAAAquC,IACAA,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,IAAAruC,EAAA,IACAquC,EAAA,IAAAruC,EAAA,IACAquC,EAAA,IAAAruC,EAAA,IACAquC,EAAA,IAAAruC,EAAA,IACAquC,EAAA,IAAAruC,EAAA,IACAquC,EAAA,IAAAruC,EAAA,KAIAquC,EAAA,GAAA7d,EAAAl1B,EAAAs1B,EAAAr0B,EACA8xC,EAAA,GAAA5d,EAAAn1B,EAAAu1B,EAAAt0B,EACA8xC,EAAA,GAAA3d,EAAAp1B,EAAAw1B,EAAAv0B,EACA8xC,EAAA,GAAA1d,EAAAr1B,EAAAy1B,EAAAx0B,EACA8xC,EAAA,GAAAzd,EAAAt1B,EAAAk1B,EAAAj0B,EACA8xC,EAAA,GAAAxd,EAAAv1B,EAAAm1B,EAAAl0B,EACA8xC,EAAA,GAAAvd,EAAAx1B,EAAAo1B,EAAAn0B,EACA8xC,EAAA,GAAAtd,EAAAz1B,EAAAq1B,EAAAp0B,EACA8xC,GAWA3vC,EAAAm+C,KAAArnB,QAAA,SAAA6Y,EAAAruC,EAAA8uC,GACA,GAAAvyC,GAAAsgD,KAAAO,UAAAe,MAAA9+C,KAAA81B,IAAA2Z,IACAxzC,EAAAuhD,KAAAO,UAAAe,MAAA9+C,KAAA61B,IAAA4Z,GAEA9uC,KAAAquC,IACAA,EAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,EAAA,IAAAruC,EAAA,IACAquC,EAAA,IAAAruC,EAAA,IACAquC,EAAA,IAAAruC,EAAA,IACAquC,EAAA,IAAAruC,EAAA,IACAquC,EAAA,IAAAruC,EAAA,IACAquC,EAAA,IAAAruC,EAAA,IAIA,IAAAs+C,GAAAzB,KAAAO,UAAAC,KAAAr9C,EAAA,GACAo+C,EAAAvB,KAAAO,UAAAC,KAAAr9C,EAAA,EAKA,OAJA68C,MAAAO,UAAAG,MAAAlP,EAAA,EACAwO,KAAAO,UAAAlmB,IAAA2lB,KAAAO,UAAAxO,IAAA0P,EAAAhjD,GAAAuhD,KAAAO,UAAAxO,IAAAwP,EAAA7hD,KACAsgD,KAAAO,UAAAG,MAAAlP,EAAA,EACAwO,KAAAO,UAAAhN,IAAAyM,KAAAO,UAAAxO,IAAAwP,EAAA9iD,GAAAuhD,KAAAO,UAAAxO,IAAA0P,EAAA/hD,KACA8xC,GAWA3vC,EAAA82B,QAAAz2B,EAAAW,SAAAhB,EAAAm+C,KAAArnB,QAAA92B,EAAAk+C,OAAApnB,QAaA92B,EAAAqwC,gBAAA,SAAAV,EAAAhrC,GAiBA,MAhBAgrC,GAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,MACAA,EAAA,MACAA,EAAA,IAAAhrC,EAAA,GACAgrC,EAAA,IAAAhrC,EAAA,GACAgrC,EAAA,IAAAhrC,EAAA,GACAgrC,EAAA,MACAA,GAcA3vC,EAAAuwC,YAAA,SAAAZ,EAAAhrC,GAiBA,MAhBAgrC,GAAA,GAAAhrC,EAAA,GACAgrC,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,GAAAhrC,EAAA,GACAgrC,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,IAAAhrC,EAAA,GACAgrC,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,GAeA3vC,EAAAswC,aAAA,SAAAX,EAAAS,EAAAnc,GACA,GAEAp2B,GAAAjB,EAAAsF,EAFA80B,EAAA/C,EAAA,GAAAjvB,EAAAivB,EAAA,GAAAgD,EAAAhD,EAAA,GACAhsB,EAAAtH,KAAAglB,KAAAqR,IAAAhyB,IAAAiyB,IAGA,OAAAt2B,MAAAc,IAAAwG,GAAA5H,EAAAC,QAA2C,MAE3C2H,EAAA,EAAAA,EACA+uB,GAAA/uB,EACAjD,GAAAiD,EACAgvB,GAAAhvB,EAEApK,EAAA8C,KAAA81B,IAAA2Z,GACAxzC,EAAA+D,KAAA61B,IAAA4Z,GACAluC,EAAA,EAAAtF,EAGA+yC,EAAA,GAAA3Y,IAAA90B,EAAAtF,EACA+yC,EAAA,GAAA3qC,EAAAgyB,EAAA90B,EAAA+0B,EAAAp5B,EACA8xC,EAAA,GAAA1Y,EAAAD,EAAA90B,EAAA8C,EAAAnH,EACA8xC,EAAA,KACAA,EAAA,GAAA3Y,EAAAhyB,EAAA9C,EAAA+0B,EAAAp5B,EACA8xC,EAAA,GAAA3qC,IAAA9C,EAAAtF,EACA+yC,EAAA,GAAA1Y,EAAAjyB,EAAA9C,EAAA80B,EAAAn5B,EACA8xC,EAAA,KACAA,EAAA,GAAA3Y,EAAAC,EAAA/0B,EAAA8C,EAAAnH,EACA8xC,EAAA,GAAA3qC,EAAAiyB,EAAA/0B,EAAA80B,EAAAn5B,EACA8xC,EAAA,IAAA1Y,IAAA/0B,EAAAtF,EACA+yC,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,IAcA3vC,EAAA6/C,cAAA,SAAAlQ,EAAAS,GACA,GAAAvyC,GAAA8C,KAAA81B,IAAA2Z,GACAxzC,EAAA+D,KAAA61B,IAAA4Z,EAmBA,OAhBAT,GAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,GAAA/yC,EACA+yC,EAAA,GAAA9xC,EACA8xC,EAAA,KACAA,EAAA,KACAA,EAAA,IAAA9xC,EACA8xC,EAAA,IAAA/yC,EACA+yC,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,GAcA3vC,EAAA8/C,cAAA,SAAAnQ,EAAAS,GACA,GAAAvyC,GAAA8C,KAAA81B,IAAA2Z,GACAxzC,EAAA+D,KAAA61B,IAAA4Z,EAmBA,OAhBAT,GAAA,GAAA/yC,EACA+yC,EAAA,KACAA,EAAA,IAAA9xC,EACA8xC,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,GAAA9xC,EACA8xC,EAAA,KACAA,EAAA,IAAA/yC,EACA+yC,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,GAcA3vC,EAAA+/C,cAAA,SAAApQ,EAAAS,GACA,GAAAvyC,GAAA8C,KAAA81B,IAAA2Z,GACAxzC,EAAA+D,KAAA61B,IAAA4Z,EAmBA,OAhBAT,GAAA,GAAA/yC,EACA+yC,EAAA,GAAA9xC,EACA8xC,EAAA,KACAA,EAAA,KACAA,EAAA,IAAA9xC,EACA8xC,EAAA,GAAA/yC,EACA+yC,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,GAkBA3vC,EAAAggD,wBAAA,SAAArQ,EAAAvpC,EAAAzB,GAEA,GAAAqyB,GAAA5wB,EAAA,GAAApB,EAAAoB,EAAA,GAAA6wB,EAAA7wB,EAAA,GAAAmiC,EAAAniC,EAAA,GACAykC,EAAA7T,IACA8T,EAAA9lC,IACA0rC,EAAAzZ,IAEAC,EAAAF,EAAA6T,EACAoV,EAAAjpB,EAAA8T,EACAoV,EAAAlpB,EAAA0Z,EACAvZ,EAAAnyB,EAAA8lC,EACAqV,EAAAn7C,EAAA0rC,EACAtZ,EAAAH,EAAAyZ,EACAI,EAAAvI,EAAAsC,EACAkG,EAAAxI,EAAAuC,EACAkG,EAAAzI,EAAAmI,CAmBA,OAjBAf,GAAA,MAAAxY,EAAAC,GACAuY,EAAA,GAAAsQ,EAAAjP,EACArB,EAAA,GAAAuQ,EAAAnP,EACApB,EAAA,KACAA,EAAA,GAAAsQ,EAAAjP,EACArB,EAAA,MAAAzY,EAAAE,GACAuY,EAAA,GAAAwQ,EAAArP,EACAnB,EAAA,KACAA,EAAA,GAAAuQ,EAAAnP,EACApB,EAAA,GAAAwQ,EAAArP,EACAnB,EAAA,OAAAzY,EAAAC,GACAwY,EAAA,MACAA,EAAA,IAAAhrC,EAAA,GACAgrC,EAAA,IAAAhrC,EAAA,GACAgrC,EAAA,IAAAhrC,EAAA,GACAgrC,EAAA,MAEAA,GAYA3vC,EAAA+zB,eAAA,SAAA4b,EAAAyQ,GAKA,MAJAzQ,GAAA,GAAAyQ,EAAA,IACAzQ,EAAA,GAAAyQ,EAAA,IACAzQ,EAAA,GAAAyQ,EAAA,IAEAzQ,GAYA3vC,EAAAqgD,YAAA,SAAA1Q,EAAAyQ,GAEA,GAAAE,GAAAF,EAAA,GAAAA,EAAA,GAAAA,EAAA,IACAG,EAAA,CA4BA,OA1BAD,GAAA,GACAC,EAAA,EAAA5/C,KAAAglB,KAAA26B,EAAA,GACA3Q,EAAA,OAAA4Q,EACA5Q,EAAA,IAAAyQ,EAAA,GAAAA,EAAA,IAAAG,EACA5Q,EAAA,IAAAyQ,EAAA,GAAAA,EAAA,IAAAG,EACA5Q,EAAA,IAAAyQ,EAAA,GAAAA,EAAA,IAAAG,GACGH,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,KACHG,EAAA,EAAA5/C,KAAAglB,KAAA,EAAAy6B,EAAA,GAAAA,EAAA,GAAAA,EAAA,KACAzQ,EAAA,IAAAyQ,EAAA,GAAAA,EAAA,IAAAG,EACA5Q,EAAA,OAAA4Q,EACA5Q,EAAA,IAAAyQ,EAAA,GAAAA,EAAA,IAAAG,EACA5Q,EAAA,IAAAyQ,EAAA,GAAAA,EAAA,IAAAG,GACGH,EAAA,GAAAA,EAAA,KACHG,EAAA,EAAA5/C,KAAAglB,KAAA,EAAAy6B,EAAA,GAAAA,EAAA,GAAAA,EAAA,KACAzQ,EAAA,IAAAyQ,EAAA,GAAAA,EAAA,IAAAG,EACA5Q,EAAA,IAAAyQ,EAAA,GAAAA,EAAA,IAAAG,EACA5Q,EAAA,OAAA4Q,EACA5Q,EAAA,IAAAyQ,EAAA,GAAAA,EAAA,IAAAG,IAEAA,EAAA,EAAA5/C,KAAAglB,KAAA,EAAAy6B,EAAA,IAAAA,EAAA,GAAAA,EAAA,IACAzQ,EAAA,IAAAyQ,EAAA,GAAAA,EAAA,IAAAG,EACA5Q,EAAA,IAAAyQ,EAAA,GAAAA,EAAA,IAAAG,EACA5Q,EAAA,IAAAyQ,EAAA,GAAAA,EAAA,IAAAG,EACA5Q,EAAA,OAAA4Q,GAGA5Q,GAoBA3vC,EAAAwgD,6BAAA,SAAA7Q,EAAAvpC,EAAAzB,EAAA9G,GAEA,GAAAm5B,GAAA5wB,EAAA,GAAApB,EAAAoB,EAAA,GAAA6wB,EAAA7wB,EAAA,GAAAmiC,EAAAniC,EAAA,GACAykC,EAAA7T,IACA8T,EAAA9lC,IACA0rC,EAAAzZ,IAEAC,EAAAF,EAAA6T,EACAoV,EAAAjpB,EAAA8T,EACAoV,EAAAlpB,EAAA0Z,EACAvZ,EAAAnyB,EAAA8lC,EACAqV,EAAAn7C,EAAA0rC,EACAtZ,EAAAH,EAAAyZ,EACAI,EAAAvI,EAAAsC,EACAkG,EAAAxI,EAAAuC,EACAkG,EAAAzI,EAAAmI,EACA+P,EAAA5iD,EAAA,GACA6iD,EAAA7iD,EAAA,GACA8iD,EAAA9iD,EAAA,EAmBA,OAjBA8xC,GAAA,OAAAxY,EAAAC,IAAAqpB,EACA9Q,EAAA,IAAAsQ,EAAAjP,GAAAyP,EACA9Q,EAAA,IAAAuQ,EAAAnP,GAAA0P,EACA9Q,EAAA,KACAA,EAAA,IAAAsQ,EAAAjP,GAAA0P,EACA/Q,EAAA,OAAAzY,EAAAE,IAAAspB,EACA/Q,EAAA,IAAAwQ,EAAArP,GAAA4P,EACA/Q,EAAA,KACAA,EAAA,IAAAuQ,EAAAnP,GAAA4P,EACAhR,EAAA,IAAAwQ,EAAArP,GAAA6P,EACAhR,EAAA,QAAAzY,EAAAC,IAAAwpB,EACAhR,EAAA,MACAA,EAAA,IAAAhrC,EAAA,GACAgrC,EAAA,IAAAhrC,EAAA,GACAgrC,EAAA,IAAAhrC,EAAA,GACAgrC,EAAA,MAEAA,GAuBA3vC,EAAAutC,mCAAA,SAAAoC,EAAAvpC,EAAAzB,EAAA9G,EAAAb,GAEA,GAAAg6B,GAAA5wB,EAAA,GAAApB,EAAAoB,EAAA,GAAA6wB,EAAA7wB,EAAA,GAAAmiC,EAAAniC,EAAA,GACAykC,EAAA7T,IACA8T,EAAA9lC,IACA0rC,EAAAzZ,IAEAC,EAAAF,EAAA6T,EACAoV,EAAAjpB,EAAA8T,EACAoV,EAAAlpB,EAAA0Z,EACAvZ,EAAAnyB,EAAA8lC,EACAqV,EAAAn7C,EAAA0rC,EACAtZ,EAAAH,EAAAyZ,EACAI,EAAAvI,EAAAsC,EACAkG,EAAAxI,EAAAuC,EACAkG,EAAAzI,EAAAmI,EAEA+P,EAAA5iD,EAAA,GACA6iD,EAAA7iD,EAAA,GACA8iD,EAAA9iD,EAAA,GAEAwrC,EAAArsC,EAAA,GACAssC,EAAAtsC,EAAA,GACA4jD,EAAA5jD,EAAA,EAmBA,OAjBA2yC,GAAA,OAAAxY,EAAAC,IAAAqpB,EACA9Q,EAAA,IAAAsQ,EAAAjP,GAAAyP,EACA9Q,EAAA,IAAAuQ,EAAAnP,GAAA0P,EACA9Q,EAAA,KACAA,EAAA,IAAAsQ,EAAAjP,GAAA0P,EACA/Q,EAAA,OAAAzY,EAAAE,IAAAspB,EACA/Q,EAAA,IAAAwQ,EAAArP,GAAA4P,EACA/Q,EAAA,KACAA,EAAA,IAAAuQ,EAAAnP,GAAA4P,EACAhR,EAAA,IAAAwQ,EAAArP,GAAA6P,EACAhR,EAAA,QAAAzY,EAAAC,IAAAwpB,EACAhR,EAAA,MACAA,EAAA,IAAAhrC,EAAA,GAAA0kC,GAAAsG,EAAA,GAAAtG,EAAAsG,EAAA,GAAArG,EAAAqG,EAAA,GAAAiR,GACAjR,EAAA,IAAAhrC,EAAA,GAAA2kC,GAAAqG,EAAA,GAAAtG,EAAAsG,EAAA,GAAArG,EAAAqG,EAAA,GAAAiR,GACAjR,EAAA,IAAAhrC,EAAA,GAAAi8C,GAAAjR,EAAA,GAAAtG,EAAAsG,EAAA,GAAArG,EAAAqG,EAAA,IAAAiR,GACAjR,EAAA,MAEAA,GAWA3vC,EAAAywC,SAAA,SAAAd,EAAAvpC,GACA,GAAA4wB,GAAA5wB,EAAA,GAAApB,EAAAoB,EAAA,GAAA6wB,EAAA7wB,EAAA,GAAAmiC,EAAAniC,EAAA,GACAykC,EAAA7T,IACA8T,EAAA9lC,IACA0rC,EAAAzZ,IAEAC,EAAAF,EAAA6T,EACA8F,EAAA3rC,EAAA6lC,EACA1T,EAAAnyB,EAAA8lC,EACA8F,EAAA3Z,EAAA4T,EACAgG,EAAA5Z,EAAA6T,EACA1T,EAAAH,EAAAyZ,EACAI,EAAAvI,EAAAsC,EACAkG,EAAAxI,EAAAuC,EACAkG,EAAAzI,EAAAmI,CAsBA,OApBAf,GAAA,KAAAxY,EAAAC,EACAuY,EAAA,GAAAgB,EAAAK,EACArB,EAAA,GAAAiB,EAAAG,EACApB,EAAA,KAEAA,EAAA,GAAAgB,EAAAK,EACArB,EAAA,KAAAzY,EAAAE,EACAuY,EAAA,GAAAkB,EAAAC,EACAnB,EAAA,KAEAA,EAAA,GAAAiB,EAAAG,EACApB,EAAA,GAAAkB,EAAAC,EACAnB,EAAA,MAAAzY,EAAAC,EACAwY,EAAA,MAEAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MAEAA,GAeA3vC,EAAAk1B,QAAA,SAAAya,EAAA/a,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA,GAAA4rB,GAAA,GAAAhsB,EAAAD,GACAksB,EAAA,GAAA/rB,EAAAD,GACAisB,EAAA,GAAA/rB,EAAAC,EAiBA,OAhBA0a,GAAA,KAAA3a,EAAA6rB,EACAlR,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KAAA3a,EAAA8rB,EACAnR,EAAA,KACAA,EAAA,KACAA,EAAA,IAAA9a,EAAAD,GAAAisB,EACAlR,EAAA,IAAA5a,EAAAD,GAAAgsB,EACAnR,EAAA,KAAA1a,EAAAD,GAAA+rB,EACApR,EAAA,OACAA,EAAA,MACAA,EAAA,MACAA,EAAA,IAAA1a,EAAAD,EAAA,EAAA+rB,EACApR,EAAA,MACAA,GAaA3vC,EAAAo0B,YAAA,SAAAub,EAAAqR,EAAA1sB,EAAAU,EAAAC,GACA,GAAApwB,GAAA,EAAAlE,KAAA8zB,IAAAusB,EAAA,GACAD,EAAA,GAAA/rB,EAAAC,EAiBA,OAhBA0a,GAAA,GAAA9qC,EAAAyvB,EACAqb,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,GAAA9qC,EACA8qC,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KAAA1a,EAAAD,GAAA+rB,EACApR,EAAA,OACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MAAA1a,EAAAD,EAAA+rB,EACApR,EAAA,MACAA,GAcA3vC,EAAAihD,2BAAA,SAAAtR,EAAAuR,EAAAlsB,EAAAC,GACA,GAAAksB,GAAAxgD,KAAA8zB,IAAAysB,EAAAE,UAAAzgD,KAAAS,GAAA,KACAigD,EAAA1gD,KAAA8zB,IAAAysB,EAAAI,YAAA3gD,KAAAS,GAAA,KACAmgD,EAAA5gD,KAAA8zB,IAAAysB,EAAAM,YAAA7gD,KAAAS,GAAA,KACAqgD,EAAA9gD,KAAA8zB,IAAAysB,EAAAQ,aAAA/gD,KAAAS,GAAA,KACAugD,EAAA,GAAAJ,EAAAE,GACAG,EAAA,GAAAT,EAAAE,EAkBA,OAhBA1R,GAAA,GAAAgS,EACAhS,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,GAAAiS,EACAjS,EAAA,KACAA,EAAA,KACAA,EAAA,KAAA4R,EAAAE,GAAAE,EAAA,GACAhS,EAAA,IAAAwR,EAAAE,GAAAO,EAAA,GACAjS,EAAA,IAAA1a,GAAAD,EAAAC,GACA0a,EAAA,OACAA,EAAA,MACAA,EAAA,MACAA,EAAA,IAAA1a,EAAAD,KAAAC,GACA0a,EAAA,MACAA,GAeA3vC,EAAA20B,MAAA,SAAAgb,EAAA/a,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA,GAAA4sB,GAAA,GAAAjtB,EAAAC,GACAitB,EAAA,GAAAhtB,EAAAC,GACAgsB,EAAA,GAAA/rB,EAAAC,EAiBA,OAhBA0a,GAAA,MAAAkS,EACAlS,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,MAAAmS,EACAnS,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,MAAAoR,EACApR,EAAA,MACAA,EAAA,KAAA/a,EAAAC,GAAAgtB,EACAlS,EAAA,KAAA5a,EAAAD,GAAAgtB,EACAnS,EAAA,KAAA1a,EAAAD,GAAA+rB,EACApR,EAAA,MACAA,GAYA3vC,EAAAs1B,OAAA,SAAAqa,EAAApa,EAAA6T,EAAA5T,GACA,GAAAusB,GAAApX,EAAAE,EAAAmX,EAAApX,EAAAE,EAAAmX,EAAAC,EAAAxR,EAAAzoC,EACAk6C,EAAA5sB,EAAA,GACA6sB,EAAA7sB,EAAA,GACA8sB,EAAA9sB,EAAA,GACA+sB,EAAA9sB,EAAA,GACA+sB,EAAA/sB,EAAA,GACAgtB,EAAAhtB,EAAA,GACAitB,EAAArZ,EAAA,GACAsZ,EAAAtZ,EAAA,GACAuZ,EAAAvZ,EAAA,EAEA,OAAAzoC,MAAAc,IAAA0gD,EAAAM,GAAApiD,EAAAC,SACAK,KAAAc,IAAA2gD,EAAAM,GAAAriD,EAAAC,SACAK,KAAAc,IAAA4gD,EAAAM,GAAAtiD,EAAAC,QACAN,EAAAC,SAAA0vC,IAGAsS,EAAAE,EAAAM,EACAP,EAAAE,EAAAM,EACAhS,EAAA2R,EAAAM,EAEA16C,EAAA,EAAAtH,KAAAglB,KAAAs8B,IAAAC,IAAAxR,KACAuR,GAAAh6C,EACAi6C,GAAAj6C,EACAyoC,GAAAzoC,EAEA85C,EAAAQ,EAAA7R,EAAA8R,EAAAN,EACAvX,EAAA6X,EAAAP,EAAAK,EAAA5R,EACA7F,EAAAyX,EAAAJ,EAAAK,EAAAN,EACAh6C,EAAAtH,KAAAglB,KAAAo8B,IAAApX,IAAAE,KACA5iC,GAKAA,EAAA,EAAAA,EACA85C,GAAA95C,EACA0iC,GAAA1iC,EACA4iC,GAAA5iC,IAPA85C,EAAA,EACApX,EAAA,EACAE,EAAA,GAQAmX,EAAAE,EAAArX,EAAA6F,EAAA/F,EACAC,EAAA8F,EAAAqR,EAAAE,EAAApX,EACAC,EAAAmX,EAAAtX,EAAAuX,EAAAH,EAEA95C,EAAAtH,KAAAglB,KAAAq8B,IAAApX,IAAAE,KACA7iC,GAKAA,EAAA,EAAAA,EACA+5C,GAAA/5C,EACA2iC,GAAA3iC,EACA6iC,GAAA7iC,IAPA+5C,EAAA,EACApX,EAAA,EACAE,EAAA,GAQA6E,EAAA,GAAAoS,EACApS,EAAA,GAAAqS,EACArS,EAAA,GAAAsS,EACAtS,EAAA,KACAA,EAAA,GAAAhF,EACAgF,EAAA,GAAA/E,EACA+E,EAAA,GAAAuS,EACAvS,EAAA,KACAA,EAAA,GAAA9E,EACA8E,EAAA,GAAA7E,EACA6E,EAAA,IAAAe,EACAf,EAAA,MACAA,EAAA,MAAAoS,EAAAI,EAAAxX,EAAAyX,EAAAvX,EAAAwX,GACA1S,EAAA,MAAAqS,EAAAG,EAAAvX,EAAAwX,EAAAtX,EAAAuX,GACA1S,EAAA,MAAAsS,EAAAE,EAAAD,EAAAE,EAAA1R,EAAA2R,GACA1S,EAAA,MAEAA,IASA3vC,EAAAwxC,IAAA,SAAAlwC,GACA,cAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QACAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QACAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,SAAAA,EAAA,SACAA,EAAA,SAAAA,EAAA,SAAAA,EAAA,SAAAA,EAAA,SASAtB,EAAAyxC,KAAA,SAAAnwC,GACA,MAAAX,MAAAglB,KAAAhlB,KAAAkiC,IAAAvhC,EAAA,MAAAX,KAAAkiC,IAAAvhC,EAAA,MAAAX,KAAAkiC,IAAAvhC,EAAA,MAAAX,KAAAkiC,IAAAvhC,EAAA,MAAAX,KAAAkiC,IAAAvhC,EAAA,MAAAX,KAAAkiC,IAAAvhC,EAAA,MAAAX,KAAAkiC,IAAAvhC,EAAA,MAAAX,KAAAkiC,IAAAvhC,EAAA,MAAAX,KAAAkiC,IAAAvhC,EAAA,MAAAX,KAAAkiC,IAAAvhC,EAAA,MAAAX,KAAAkiC,IAAAvhC,EAAA,OAAAX,KAAAkiC,IAAAvhC,EAAA,OAAAX,KAAAkiC,IAAAvhC,EAAA,OAAAX,KAAAkiC,IAAAvhC,EAAA,OAAAX,KAAAkiC,IAAAvhC,EAAA,OAAAX,KAAAkiC,IAAAvhC,EAAA,SAWAtB,EAAAw4B,IAAA,SAAAmX,EAAAruC,EAAAE,GAiBA,MAhBAmuC,GAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,EAAA,IAAAruC,EAAA,IAAAE,EAAA,IACAmuC,EAAA,IAAAruC,EAAA,IAAAE,EAAA,IACAmuC,EAAA,IAAAruC,EAAA,IAAAE,EAAA,IACAmuC,EAAA,IAAAruC,EAAA,IAAAE,EAAA,IACAmuC,EAAA,IAAAruC,EAAA,IAAAE,EAAA,IACAmuC,EAAA,IAAAruC,EAAA,IAAAE,EAAA,IACAmuC,GAWA3vC,EAAA+1B,SAAA,SAAA4Z,EAAAruC,EAAAE,GAiBA,MAhBAmuC,GAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,EAAA,IAAAruC,EAAA,IAAAE,EAAA,IACAmuC,EAAA,IAAAruC,EAAA,IAAAE,EAAA,IACAmuC,EAAA,IAAAruC,EAAA,IAAAE,EAAA,IACAmuC,EAAA,IAAAruC,EAAA,IAAAE,EAAA,IACAmuC,EAAA,IAAAruC,EAAA,IAAAE,EAAA,IACAmuC,EAAA,IAAAruC,EAAA,IAAAE,EAAA,IACAmuC,GAOA3vC,EAAA0xC,IAAA1xC,EAAA+1B,SAUA/1B,EAAA2xC,eAAA,SAAAhC,EAAAruC,EAAAE,GAiBA,MAhBAmuC,GAAA,GAAAruC,EAAA,GAAAE,EACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EACAmuC,EAAA,IAAAruC,EAAA,IAAAE,EACAmuC,EAAA,IAAAruC,EAAA,IAAAE,EACAmuC,EAAA,IAAAruC,EAAA,IAAAE,EACAmuC,EAAA,IAAAruC,EAAA,IAAAE,EACAmuC,EAAA,IAAAruC,EAAA,IAAAE,EACAmuC,EAAA,IAAAruC,EAAA,IAAAE,EACAmuC,GAYA3vC,EAAA4xC,qBAAA,SAAAjC,EAAAruC,EAAAE,EAAAy2B,GAiBA,MAhBA0X,GAAA,GAAAruC,EAAA,GAAAE,EAAA,GAAAy2B,EACA0X,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GAAAy2B,EACA0X,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GAAAy2B,EACA0X,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GAAAy2B,EACA0X,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GAAAy2B,EACA0X,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GAAAy2B,EACA0X,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GAAAy2B,EACA0X,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GAAAy2B,EACA0X,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GAAAy2B,EACA0X,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GAAAy2B,EACA0X,EAAA,IAAAruC,EAAA,IAAAE,EAAA,IAAAy2B,EACA0X,EAAA,IAAAruC,EAAA,IAAAE,EAAA,IAAAy2B,EACA0X,EAAA,IAAAruC,EAAA,IAAAE,EAAA,IAAAy2B,EACA0X,EAAA,IAAAruC,EAAA,IAAAE,EAAA,IAAAy2B,EACA0X,EAAA,IAAAruC,EAAA,IAAAE,EAAA,IAAAy2B,EACA0X,EAAA,IAAAruC,EAAA,IAAAE,EAAA,IAAAy2B,EACA0X,GAUA3vC,EAAA6xC,YAAA,SAAAvwC,EAAAE,GACA,MAAAF,GAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IACAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IACAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAAAF,EAAA,MAAAE,EAAA,KAAAF,EAAA,MAAAE,EAAA,KACAF,EAAA,MAAAE,EAAA,KAAAF,EAAA,MAAAE,EAAA,KAAAF,EAAA,MAAAE,EAAA,KAAAF,EAAA,MAAAE,EAAA,KAUAxB,EAAAuB,OAAA,SAAAD,EAAAE,GACA,GAAAswC,GAAAxwC,EAAA,GAAAywC,EAAAzwC,EAAA,GAAA0wC,EAAA1wC,EAAA,GAAA2wC,EAAA3wC,EAAA,GACA4wC,EAAA5wC,EAAA,GAAA6wC,EAAA7wC,EAAA,GAAA8wC,EAAA9wC,EAAA,GAAA+wC,EAAA/wC,EAAA,GACAgxC,EAAAhxC,EAAA,GAAAshD,EAAAthD,EAAA,GAAA4wB,EAAA5wB,EAAA,IAAA6wB,EAAA7wB,EAAA,IACA8wB,EAAA9wB,EAAA,IAAA+wB,EAAA/wB,EAAA,IAAAuhD,EAAAvhD,EAAA,IAAAwhD,EAAAxhD,EAAA,IAEAixC,EAAA/wC,EAAA,GAAAgxC,EAAAhxC,EAAA,GAAAixC,EAAAjxC,EAAA,GAAAkxC,EAAAlxC,EAAA,GACAmxC,EAAAnxC,EAAA,GAAAoxC,EAAApxC,EAAA,GAAAqxC,EAAArxC,EAAA,GAAAsxC,EAAAtxC,EAAA,GACAuxC,EAAAvxC,EAAA,GAAAuhD,EAAAvhD,EAAA,GAAA0xB,EAAA1xB,EAAA,IAAA2xB,EAAA3xB,EAAA,IACA4xB,EAAA5xB,EAAA,IAAA6xB,EAAA7xB,EAAA,IAAAwhD,EAAAxhD,EAAA,IAAAyhD,EAAAzhD,EAAA,GAEA,OAAAb,MAAAc,IAAAqwC,EAAAS,IAAAlyC,EAAAC,QAAAK,KAAAe,IAAA,EAAAf,KAAAc,IAAAqwC,GAAAnxC,KAAAc,IAAA8wC,KACA5xC,KAAAc,IAAAswC,EAAAS,IAAAnyC,EAAAC,QAAAK,KAAAe,IAAA,EAAAf,KAAAc,IAAAswC,GAAApxC,KAAAc,IAAA+wC,KACA7xC,KAAAc,IAAAuwC,EAAAS,IAAApyC,EAAAC,QAAAK,KAAAe,IAAA,EAAAf,KAAAc,IAAAuwC,GAAArxC,KAAAc,IAAAgxC,KACA9xC,KAAAc,IAAAwwC,EAAAS,IAAAryC,EAAAC,QAAAK,KAAAe,IAAA,EAAAf,KAAAc,IAAAwwC,GAAAtxC,KAAAc,IAAAixC,KACA/xC,KAAAc,IAAAywC,EAAAS,IAAAtyC,EAAAC,QAAAK,KAAAe,IAAA,EAAAf,KAAAc,IAAAywC,GAAAvxC,KAAAc,IAAAkxC,KACAhyC,KAAAc,IAAA0wC,EAAAS,IAAAvyC,EAAAC,QAAAK,KAAAe,IAAA,EAAAf,KAAAc,IAAA0wC,GAAAxxC,KAAAc,IAAAmxC,KACAjyC,KAAAc,IAAA2wC,EAAAS,IAAAxyC,EAAAC,QAAAK,KAAAe,IAAA,EAAAf,KAAAc,IAAA2wC,GAAAzxC,KAAAc,IAAAoxC,KACAlyC,KAAAc,IAAA4wC,EAAAS,IAAAzyC,EAAAC,QAAAK,KAAAe,IAAA,EAAAf,KAAAc,IAAA4wC,GAAA1xC,KAAAc,IAAAqxC,KACAnyC,KAAAc,IAAA6wC,EAAAS,IAAA1yC,EAAAC,QAAAK,KAAAe,IAAA,EAAAf,KAAAc,IAAA6wC,GAAA3xC,KAAAc,IAAAsxC,KACApyC,KAAAc,IAAAmhD,EAAAG,IAAA1iD,EAAAC,QAAAK,KAAAe,IAAA,EAAAf,KAAAc,IAAAmhD,GAAAjiD,KAAAc,IAAAshD,KACApiD,KAAAc,IAAAywB,EAAAgB,IAAA7yB,EAAAC,QAAAK,KAAAe,IAAA,EAAAf,KAAAc,IAAAywB,GAAAvxB,KAAAc,IAAAyxB,KACAvyB,KAAAc,IAAA0wB,EAAAgB,IAAA9yB,EAAAC,QAAAK,KAAAe,IAAA,EAAAf,KAAAc,IAAA0wB,GAAAxxB,KAAAc,IAAA0xB,KACAxyB,KAAAc,IAAA2wB,EAAAgB,IAAA/yB,EAAAC,QAAAK,KAAAe,IAAA,EAAAf,KAAAc,IAAA2wB,GAAAzxB,KAAAc,IAAA2xB,KACAzyB,KAAAc,IAAA4wB,EAAAgB,IAAAhzB,EAAAC,QAAAK,KAAAe,IAAA,EAAAf,KAAAc,IAAA4wB,GAAA1xB,KAAAc,IAAA4xB,KACA1yB,KAAAc,IAAAohD,EAAAG,IAAA3iD,EAAAC,QAAAK,KAAAe,IAAA,EAAAf,KAAAc,IAAAohD,GAAAliD,KAAAc,IAAAuhD,KACAriD,KAAAc,IAAAqhD,EAAAG,IAAA5iD,EAAAC,QAAAK,KAAAe,IAAA,EAAAf,KAAAc,IAAAqhD,GAAAniD,KAAAc,IAAAwhD,KAKA1mD,EAAAD,QAAA0D,GzB+7aM,SAAUzD,EAAQD,EAASH,G0BlgfjC,GAAAkE,GAAAlE,EAAA,GACA8pC,EAAA9pC,EAAA,IACAiqC,EAAAjqC,EAAA,IACAkqC,EAAAlqC,EAAA,IAMA+pC,IAOAA,GAAAhmC,OAAA,WACA,GAAAyvC,GAAA,GAAAtvC,GAAAE,WAAA,EAKA,OAJAovC,GAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,GAcAzJ,EAAAgd,WAAA,WACA,GAAAC,GAAA/c,EAAAlmC,SACAkjD,EAAAhd,EAAA4G,WAAA,OACAqW,EAAAjd,EAAA4G,WAAA,MAEA,iBAAA2C,EAAAruC,EAAAE,GACA,GAAAq3B,GAAAuN,EAAAvN,IAAAv3B,EAAAE,EACA,OAAAq3B,IAAA,SACAuN,EAAApQ,MAAAmtB,EAAAC,EAAA9hD,GACA8kC,EAAA/jC,OAAA8gD,GAAA,MACA/c,EAAApQ,MAAAmtB,EAAAE,EAAA/hD,GACA8kC,EAAAz2B,UAAAwzC,KACAjd,EAAAsH,aAAAmC,EAAAwT,EAAAxiD,KAAAS,IACAuuC,GACS9W,EAAA,SACT8W,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,IAEAvJ,EAAApQ,MAAAmtB,EAAA7hD,EAAAE,GACAmuC,EAAA,GAAAwT,EAAA,GACAxT,EAAA,GAAAwT,EAAA,GACAxT,EAAA,GAAAwT,EAAA,GACAxT,EAAA,KAAA9W,EACAqN,EAAAv2B,UAAAggC,UAeAzJ,EAAAod,QAAA,WACA,GAAAC,GAAAtd,EAAA/lC,QAEA,iBAAAyvC,EAAA6T,EAAA3uB,EAAAW,GAaA,MAZA+tB,GAAA,GAAA1uB,EAAA,GACA0uB,EAAA,GAAA1uB,EAAA,GACA0uB,EAAA,GAAA1uB,EAAA,GAEA0uB,EAAA,GAAA/tB,EAAA,GACA+tB,EAAA,GAAA/tB,EAAA,GACA+tB,EAAA,GAAA/tB,EAAA,GAEA+tB,EAAA,IAAAC,EAAA,GACAD,EAAA,IAAAC,EAAA,GACAD,EAAA,IAAAC,EAAA,GAEAtd,EAAAv2B,UAAAggC,EAAAzJ,EAAAud,SAAA9T,EAAA4T,QAWArd,EAAA2J,MAAAxJ,EAAAwJ,MAYA3J,EAAA8G,WAAA3G,EAAA2G,WAUA9G,EAAApX,KAAAuX,EAAAvX,KAaAoX,EAAA/9B,IAAAk+B,EAAAl+B,IAQA+9B,EAAAjmC,SAAA,SAAA0vC,GAKA,MAJAA,GAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,GAYAzJ,EAAAsH,aAAA,SAAAmC,EAAA1b,EAAAmc,GACAA,GAAA,EACA,IAAAvyC,GAAA8C,KAAA81B,IAAA2Z,EAKA,OAJAT,GAAA,GAAA9xC,EAAAo2B,EAAA,GACA0b,EAAA,GAAA9xC,EAAAo2B,EAAA,GACA0b,EAAA,GAAA9xC,EAAAo2B,EAAA,GACA0b,EAAA,GAAAhvC,KAAA61B,IAAA4Z,GACAT,GAgBAzJ,EAAAwd,aAAA,SAAAC,EAAAv9C,GACA,GAAAgqC,GAAA,EAAAzvC,KAAA80C,KAAArvC,EAAA,IACAvI,EAAA8C,KAAA81B,IAAA2Z,EAAA,EAWA,OAVA,IAAAvyC,GACA8lD,EAAA,GAAAv9C,EAAA,GAAAvI,EACA8lD,EAAA,GAAAv9C,EAAA,GAAAvI,EACA8lD,EAAA,GAAAv9C,EAAA,GAAAvI,IAGA8lD,EAAA,KACAA,EAAA,KACAA,EAAA,MAEAvT,GAYAlK,EAAA1N,IAAA6N,EAAA7N,IAUA0N,EAAArU,SAAA,SAAA8d,EAAAruC,EAAAE,GACA,GAAAiyC,GAAAnyC,EAAA,GAAAoyC,EAAApyC,EAAA,GAAAqyC,EAAAryC,EAAA,GAAAo0C,EAAAp0C,EAAA,GACAsyC,EAAApyC,EAAA,GAAAqyC,EAAAryC,EAAA,GAAAsyC,EAAAtyC,EAAA,GAAAoiD,EAAApiD,EAAA,EAMA,OAJAmuC,GAAA,GAAA8D,EAAAmQ,EAAAlO,EAAA9B,EAAAF,EAAAI,EAAAH,EAAAE,EACAlE,EAAA,GAAA+D,EAAAkQ,EAAAlO,EAAA7B,EAAAF,EAAAC,EAAAH,EAAAK,EACAnE,EAAA,GAAAgE,EAAAiQ,EAAAlO,EAAA5B,EAAAL,EAAAI,EAAAH,EAAAE,EACAjE,EAAA,GAAA+F,EAAAkO,EAAAnQ,EAAAG,EAAAF,EAAAG,EAAAF,EAAAG,EACAnE,GAOAzJ,EAAAgK,IAAAhK,EAAArU,SAWAqU,EAAAjO,MAAAoO,EAAApO,MAUAiO,EAAAxP,QAAA,SAAAiZ,EAAAruC,EAAA8uC,GACAA,GAAA,EAEA,IAAAqD,GAAAnyC,EAAA,GAAAoyC,EAAApyC,EAAA,GAAAqyC,EAAAryC,EAAA,GAAAo0C,EAAAp0C,EAAA,GACAsyC,EAAAjzC,KAAA81B,IAAA2Z,GAAAwT,EAAAjjD,KAAA61B,IAAA4Z,EAMA,OAJAT,GAAA,GAAA8D,EAAAmQ,EAAAlO,EAAA9B,EACAjE,EAAA,GAAA+D,EAAAkQ,EAAAjQ,EAAAC,EACAjE,EAAA,GAAAgE,EAAAiQ,EAAAlQ,EAAAE,EACAjE,EAAA,GAAA+F,EAAAkO,EAAAnQ,EAAAG,EACAjE,GAWAzJ,EAAAtP,QAAA,SAAA+Y,EAAAruC,EAAA8uC,GACAA,GAAA,EAEA,IAAAqD,GAAAnyC,EAAA,GAAAoyC,EAAApyC,EAAA,GAAAqyC,EAAAryC,EAAA,GAAAo0C,EAAAp0C,EAAA,GACAuyC,EAAAlzC,KAAA81B,IAAA2Z,GAAAwT,EAAAjjD,KAAA61B,IAAA4Z,EAMA,OAJAT,GAAA,GAAA8D,EAAAmQ,EAAAjQ,EAAAE,EACAlE,EAAA,GAAA+D,EAAAkQ,EAAAlO,EAAA7B,EACAlE,EAAA,GAAAgE,EAAAiQ,EAAAnQ,EAAAI,EACAlE,EAAA,GAAA+F,EAAAkO,EAAAlQ,EAAAG,EACAlE,GAWAzJ,EAAApP,QAAA,SAAA6Y,EAAAruC,EAAA8uC,GACAA,GAAA,EAEA,IAAAqD,GAAAnyC,EAAA,GAAAoyC,EAAApyC,EAAA,GAAAqyC,EAAAryC,EAAA,GAAAo0C,EAAAp0C,EAAA,GACAwyC,EAAAnzC,KAAA81B,IAAA2Z,GAAAwT,EAAAjjD,KAAA61B,IAAA4Z,EAMA,OAJAT,GAAA,GAAA8D,EAAAmQ,EAAAlQ,EAAAI,EACAnE,EAAA,GAAA+D,EAAAkQ,EAAAnQ,EAAAK,EACAnE,EAAA,GAAAgE,EAAAiQ,EAAAlO,EAAA5B,EACAnE,EAAA,GAAA+F,EAAAkO,EAAAjQ,EAAAG,EACAnE,GAYAzJ,EAAA2d,WAAA,SAAAlU,EAAAruC,GACA,GAAA01B,GAAA11B,EAAA,GAAA0D,EAAA1D,EAAA,GAAA21B,EAAA31B,EAAA,EAMA,OAJAquC,GAAA,GAAA3Y,EACA2Y,EAAA,GAAA3qC,EACA2qC,EAAA,GAAA1Y,EACA0Y,EAAA,GAAAhvC,KAAAglB,KAAAhlB,KAAAc,IAAA,EAAAu1B,IAAAhyB,IAAAiyB,MACA0Y,GAWAzJ,EAAArN,IAAAwN,EAAAxN,IAYAqN,EAAAzN,KAAA4N,EAAA5N,KAWAyN,EAAA4d,MAAA,SAAAnU,EAAAruC,EAAAE,EAAAU,GAIA,GAGA6hD,GAAAC,EAAAC,EAAAC,EAAAC,EAHA1Q,EAAAnyC,EAAA,GAAAoyC,EAAApyC,EAAA,GAAAqyC,EAAAryC,EAAA,GAAAo0C,EAAAp0C,EAAA,GACAsyC,EAAApyC,EAAA,GAAAqyC,EAAAryC,EAAA,GAAAsyC,EAAAtyC,EAAA,GAAAoiD,EAAApiD,EAAA,EAiCA,OA5BAwiD,GAAAvQ,EAAAG,EAAAF,EAAAG,EAAAF,EAAAG,EAAA4B,EAAAkO,EAEAI,EAAA,IACAA,KACApQ,KACAC,KACAC,KACA8P,MAGA,EAAAI,EAAA,MAEAD,EAAApjD,KAAA80C,KAAAuO,GACAC,EAAAtjD,KAAA81B,IAAAstB,GACAG,EAAAvjD,KAAA81B,KAAA,EAAAv0B,GAAA6hD,GAAAE,EACAE,EAAAxjD,KAAA81B,IAAAv0B,EAAA6hD,GAAAE,IAIAC,EAAA,EAAAhiD,EACAiiD,EAAAjiD,GAGAytC,EAAA,GAAAuU,EAAAzQ,EAAA0Q,EAAAvQ,EACAjE,EAAA,GAAAuU,EAAAxQ,EAAAyQ,EAAAtQ,EACAlE,EAAA,GAAAuU,EAAAvQ,EAAAwQ,EAAArQ,EACAnE,EAAA,GAAAuU,EAAAxO,EAAAyO,EAAAP,EAEAjU,GAcAzJ,EAAAke,OAAA,WACA,GAAAC,GAAAne,EAAAhmC,SACAokD,EAAApe,EAAAhmC,QAEA,iBAAAyvC,EAAAruC,EAAAE,EAAA5E,EAAAC,EAAAqF,GAKA,MAJAgkC,GAAA4d,MAAAO,EAAA/iD,EAAAzE,EAAAqF,GACAgkC,EAAA4d,MAAAQ,EAAA9iD,EAAA5E,EAAAsF,GACAgkC,EAAA4d,MAAAnU,EAAA0U,EAAAC,EAAA,EAAApiD,GAAA,EAAAA,IAEAytC,MAWAzJ,EAAA4J,OAAA,SAAAH,EAAAruC,GACA,GAAAwwC,GAAAxwC,EAAA,GAAAywC,EAAAzwC,EAAA,GAAA0wC,EAAA1wC,EAAA,GAAA2wC,EAAA3wC,EAAA,GACAu3B,EAAAiZ,IAAAC,IAAAC,IAAAC,IACAsS,EAAA1rB,EAAA,EAAAA,EAAA,CAQA,OAJA8W,GAAA,IAAAmC,EAAAyS,EACA5U,EAAA,IAAAoC,EAAAwS,EACA5U,EAAA,IAAAqC,EAAAuS,EACA5U,EAAA,GAAAsC,EAAAsS,EACA5U,GAWAzJ,EAAAse,UAAA,SAAA7U,EAAAruC,GAKA,MAJAquC,GAAA,IAAAruC,EAAA,GACAquC,EAAA,IAAAruC,EAAA,GACAquC,EAAA,IAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,GAUAzJ,EAAA7jC,OAAAgkC,EAAAhkC,OAMA6jC,EAAAj+B,IAAAi+B,EAAA7jC,OASA6jC,EAAAqN,cAAAlN,EAAAkN,cAMArN,EAAAsN,OAAAtN,EAAAqN,cAUArN,EAAAv2B,UAAA02B,EAAA12B,UAaAu2B,EAAAud,SAAA,SAAA9T,EAAAhzC,GAGA,GACA8nD,GADAC,EAAA/nD,EAAA,GAAAA,EAAA,GAAAA,EAAA,EAGA,IAAA+nD,EAAA,EAEAD,EAAA9jD,KAAAglB,KAAA++B,EAAA,GACA/U,EAAA,MAAA8U,EACAA,EAAA,GAAAA,EACA9U,EAAA,IAAAhzC,EAAA,GAAAA,EAAA,IAAA8nD,EACA9U,EAAA,IAAAhzC,EAAA,GAAAA,EAAA,IAAA8nD,EACA9U,EAAA,IAAAhzC,EAAA,GAAAA,EAAA,IAAA8nD,MACK,CAEL,GAAAjoD,GAAA,CACAG,GAAA,GAAAA,EAAA,KACAH,EAAA,GACAG,EAAA,GAAAA,EAAA,EAAAH,OACAA,EAAA,EACA,IAAAmoD,IAAAnoD,EAAA,KACAm8B,GAAAn8B,EAAA,IAEAioD,GAAA9jD,KAAAglB,KAAAhpB,EAAA,EAAAH,KAAAG,EAAA,EAAAgoD,KAAAhoD,EAAA,EAAAg8B,KAAA,GACAgX,EAAAnzC,GAAA,GAAAioD,EACAA,EAAA,GAAAA,EACA9U,EAAA,IAAAhzC,EAAA,EAAAgoD,EAAAhsB,GAAAh8B,EAAA,EAAAg8B,EAAAgsB,IAAAF,EACA9U,EAAAgV,IAAAhoD,EAAA,EAAAgoD,EAAAnoD,GAAAG,EAAA,EAAAH,EAAAmoD,IAAAF,EACA9U,EAAAhX,IAAAh8B,EAAA,EAAAg8B,EAAAn8B,GAAAG,EAAA,EAAAH,EAAAm8B,IAAA8rB,EAGA,MAAA9U,IASAzJ,EAAAsL,IAAA,SAAAlwC,GACA,cAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAUA4kC,EAAA2L,YAAAxL,EAAAwL,YASA3L,EAAA3kC,OAAA8kC,EAAA9kC,OAEAhF,EAAAD,QAAA4pC,G1B6hfM,SAAU3pC,EAAQD,EAASH,G2BhmgBjC,GAAAkE,GAAAlE,EAAA,GAMAgqC,IAOAA,GAAAjmC,OAAA,WACA,GAAAyvC,GAAA,GAAAtvC,GAAAE,WAAA,EAGA,OAFAovC,GAAA,KACAA,EAAA,KACAA,GASAxJ,EAAA0J,MAAA,SAAAvuC,GACA,GAAAquC,GAAA,GAAAtvC,GAAAE,WAAA,EAGA,OAFAovC,GAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,GAUAxJ,EAAA6G,WAAA,SAAAhW,EAAAhyB,GACA,GAAA2qC,GAAA,GAAAtvC,GAAAE,WAAA,EAGA,OAFAovC,GAAA,GAAA3Y,EACA2Y,EAAA,GAAA3qC,EACA2qC,GAUAxJ,EAAArX,KAAA,SAAA6gB,EAAAruC,GAGA,MAFAquC,GAAA,GAAAruC,EAAA,GACAquC,EAAA,GAAAruC,EAAA,GACAquC,GAWAxJ,EAAAh+B,IAAA,SAAAwnC,EAAA3Y,EAAAhyB,GAGA,MAFA2qC,GAAA,GAAA3Y,EACA2Y,EAAA,GAAA3qC,EACA2qC,GAWAxJ,EAAA3N,IAAA,SAAAmX,EAAAruC,EAAAE,GAGA,MAFAmuC,GAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,GAWAxJ,EAAApQ,SAAA,SAAA4Z,EAAAruC,EAAAE,GAGA,MAFAmuC,GAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,GAOAxJ,EAAAuL,IAAAvL,EAAApQ,SAUAoQ,EAAAtU,SAAA,SAAA8d,EAAAruC,EAAAE,GAGA,MAFAmuC,GAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,GAOAxJ,EAAA+J,IAAA/J,EAAAtU,SAUAsU,EAAAjN,OAAA,SAAAyW,EAAAruC,EAAAE,GAGA,MAFAmuC,GAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GACAmuC,GAOAxJ,EAAA6M,IAAA7M,EAAAjN,OASAiN,EAAA8M,KAAA,SAAAtD,EAAAruC,GAGA,MAFAquC,GAAA,GAAAhvC,KAAAsyC,KAAA3xC,EAAA,IACAquC,EAAA,GAAAhvC,KAAAsyC,KAAA3xC,EAAA,IACAquC,GAUAxJ,EAAAoI,MAAA,SAAAoB,EAAAruC,GAGA,MAFAquC,GAAA,GAAAhvC,KAAA4tC,MAAAjtC,EAAA,IACAquC,EAAA,GAAAhvC,KAAA4tC,MAAAjtC,EAAA,IACAquC,GAWAxJ,EAAA7iB,IAAA,SAAAqsB,EAAAruC,EAAAE,GAGA,MAFAmuC,GAAA,GAAAhvC,KAAA2iB,IAAAhiB,EAAA,GAAAE,EAAA,IACAmuC,EAAA,GAAAhvC,KAAA2iB,IAAAhiB,EAAA,GAAAE,EAAA,IACAmuC,GAWAxJ,EAAAzkC,IAAA,SAAAiuC,EAAAruC,EAAAE,GAGA,MAFAmuC,GAAA,GAAAhvC,KAAAe,IAAAJ,EAAA,GAAAE,EAAA,IACAmuC,EAAA,GAAAhvC,KAAAe,IAAAJ,EAAA,GAAAE,EAAA,IACAmuC,GAUAxJ,EAAA+M,MAAA,SAAAvD,EAAAruC,GAGA,MAFAquC,GAAA,GAAAhvC,KAAAuyC,MAAA5xC,EAAA,IACAquC,EAAA,GAAAhvC,KAAAuyC,MAAA5xC,EAAA,IACAquC,GAWAxJ,EAAAlO,MAAA,SAAA0X,EAAAruC,EAAAE,GAGA,MAFAmuC,GAAA,GAAAruC,EAAA,GAAAE,EACAmuC,EAAA,GAAAruC,EAAA,GAAAE,EACAmuC,GAYAxJ,EAAAgN,YAAA,SAAAxD,EAAAruC,EAAAE,EAAAy2B,GAGA,MAFA0X,GAAA,GAAAruC,EAAA,GAAAE,EAAA,GAAAy2B,EACA0X,EAAA,GAAAruC,EAAA,GAAAE,EAAA,GAAAy2B,EACA0X,GAUAxJ,EAAApN,SAAA,SAAAz3B,EAAAE,GACA,GAAAw1B,GAAAx1B,EAAA,GAAAF,EAAA,GACA0D,EAAAxD,EAAA,GAAAF,EAAA,EACA,OAAAX,MAAAglB,KAAAqR,IAAAhyB,MAOAmhC,EAAAiN,KAAAjN,EAAApN,SASAoN,EAAAkN,gBAAA,SAAA/xC,EAAAE,GACA,GAAAw1B,GAAAx1B,EAAA,GAAAF,EAAA,GACA0D,EAAAxD,EAAA,GAAAF,EAAA,EACA,OAAA01B,KAAAhyB,KAOAmhC,EAAAmN,QAAAnN,EAAAkN,gBAQAlN,EAAA9jC,OAAA,SAAAf,GACA,GAAA01B,GAAA11B,EAAA,GACA0D,EAAA1D,EAAA,EACA,OAAAX,MAAAglB,KAAAqR,IAAAhyB,MAOAmhC,EAAAl+B,IAAAk+B,EAAA9jC,OAQA8jC,EAAAoN,cAAA,SAAAjyC,GACA,GAAA01B,GAAA11B,EAAA,GACA0D,EAAA1D,EAAA,EACA,OAAA01B,KAAAhyB,KAOAmhC,EAAAqN,OAAArN,EAAAoN,cASApN,EAAAtX,OAAA,SAAA8gB,EAAAruC,GAGA,MAFAquC,GAAA,IAAAruC,EAAA,GACAquC,EAAA,IAAAruC,EAAA,GACAquC,GAUAxJ,EAAAnW,QAAA,SAAA2f,EAAAruC,GAGA,MAFAquC,GAAA,KAAAruC,EAAA,GACAquC,EAAA,KAAAruC,EAAA,GACAquC,GAUAxJ,EAAAx2B,UAAA,SAAAggC,EAAAruC,GACA,GAAA01B,GAAA11B,EAAA,GACA0D,EAAA1D,EAAA,GACA2G,EAAA+uB,IAAAhyB,GAOA,OANAiD,GAAA,IAEAA,EAAA,EAAAtH,KAAAglB,KAAA1d,GACA0nC,EAAA,GAAAruC,EAAA,GAAA2G,EACA0nC,EAAA,GAAAruC,EAAA,GAAA2G,GAEA0nC,GAUAxJ,EAAAtN,IAAA,SAAAv3B,EAAAE,GACA,MAAAF,GAAA,GAAAE,EAAA,GAAAF,EAAA,GAAAE,EAAA,IAYA2kC,EAAAnQ,MAAA,SAAA2Z,EAAAruC,EAAAE,GACA,GAAAy1B,GAAA31B,EAAA,GAAAE,EAAA,GAAAF,EAAA,GAAAE,EAAA,EAGA,OAFAmuC,GAAA,GAAAA,EAAA,KACAA,EAAA,GAAA1Y,EACA0Y,GAYAxJ,EAAA1N,KAAA,SAAAkX,EAAAruC,EAAAE,EAAAU,GACA,GAAAuxC,GAAAnyC,EAAA,GACAoyC,EAAApyC,EAAA,EAGA,OAFAquC,GAAA,GAAA8D,EAAAvxC,GAAAV,EAAA,GAAAiyC,GACA9D,EAAA,GAAA+D,EAAAxxC,GAAAV,EAAA,GAAAkyC,GACA/D,GAUAxJ,EAAAvlC,OAAA,SAAA+uC,EAAA1X,GACAA,KAAA,CACA,IAAAr1B,GAAA,EAAAvC,EAAAK,SAAAC,KAAAS,EAGA,OAFAuuC,GAAA,GAAAhvC,KAAA61B,IAAA5zB,GAAAq1B,EACA0X,EAAA,GAAAhvC,KAAA81B,IAAA7zB,GAAAq1B,EACA0X,GAWAxJ,EAAAye,cAAA,SAAAjV,EAAAruC,EAAA3E,GACA,GAAAq6B,GAAA11B,EAAA,GACA0D,EAAA1D,EAAA,EAGA,OAFAquC,GAAA,GAAAhzC,EAAA,GAAAq6B,EAAAr6B,EAAA,GAAAqI,EACA2qC,EAAA,GAAAhzC,EAAA,GAAAq6B,EAAAr6B,EAAA,GAAAqI,EACA2qC,GAWAxJ,EAAA0e,eAAA,SAAAlV,EAAAruC,EAAA3E,GACA,GAAAq6B,GAAA11B,EAAA,GACA0D,EAAA1D,EAAA,EAGA,OAFAquC,GAAA,GAAAhzC,EAAA,GAAAq6B,EAAAr6B,EAAA,GAAAqI,EAAArI,EAAA,GACAgzC,EAAA,GAAAhzC,EAAA,GAAAq6B,EAAAr6B,EAAA,GAAAqI,EAAArI,EAAA,GACAgzC,GAYAxJ,EAAAuO,cAAA,SAAA/E,EAAAruC,EAAA3E,GACA,GAAAq6B,GAAA11B,EAAA,GACA0D,EAAA1D,EAAA,EAGA,OAFAquC,GAAA,GAAAhzC,EAAA,GAAAq6B,EAAAr6B,EAAA,GAAAqI,EAAArI,EAAA,GACAgzC,EAAA,GAAAhzC,EAAA,GAAAq6B,EAAAr6B,EAAA,GAAAqI,EAAArI,EAAA,GACAgzC,GAaAxJ,EAAAsO,cAAA,SAAA9E,EAAAruC,EAAA3E,GACA,GAAAq6B,GAAA11B,EAAA,GACA0D,EAAA1D,EAAA,EAGA,OAFAquC,GAAA,GAAAhzC,EAAA,GAAAq6B,EAAAr6B,EAAA,GAAAqI,EAAArI,EAAA,IACAgzC,EAAA,GAAAhzC,EAAA,GAAAq6B,EAAAr6B,EAAA,GAAAqI,EAAArI,EAAA,IACAgzC,GAeAxJ,EAAAz5B,QAAA,WACA,GAAA0oC,GAAAjP,EAAAjmC,QAEA,iBAAAoB,EAAAuO,EAAAC,EAAA8C,EAAAwoB,EAAAia,GACA,GAAA74C,GAAAC,CAeA,KAdAoT,IACAA,EAAA,GAGAC,IACAA,EAAA,GAIArT,EADAmW,EACAjS,KAAA2iB,IAAA1Q,EAAA/C,EAAAC,EAAAxO,EAAAe,QAEAf,EAAAe,OAGA7F,EAAAsT,EAAuBtT,EAAAC,EAAOD,GAAAqT,EAC9BulC,EAAA,GAAA9zC,EAAA9E,GAA0B44C,EAAA,GAAA9zC,EAAA9E,EAAA,GAC1B4+B,EAAAga,IAAAC,GACA/zC,EAAA9E,GAAA44C,EAAA,GAA0B9zC,EAAA9E,EAAA,GAAA44C,EAAA,EAG1B,OAAA9zC,OAUA6kC,EAAAqL,IAAA,SAAAlwC,GACA,cAAAA,EAAA,QAAAA,EAAA,QAUA6kC,EAAA0L,YAAA,SAAAvwC,EAAAE,GACA,MAAAF,GAAA,KAAAE,EAAA,IAAAF,EAAA,KAAAE,EAAA,IAUA2kC,EAAA5kC,OAAA,SAAAD,EAAAE,GACA,GAAAswC,GAAAxwC,EAAA,GAAAywC,EAAAzwC,EAAA,GACAixC,EAAA/wC,EAAA,GAAAgxC,EAAAhxC,EAAA,EACA,OAAAb,MAAAc,IAAAqwC,EAAAS,IAAAlyC,EAAAC,QAAAK,KAAAe,IAAA,EAAAf,KAAAc,IAAAqwC,GAAAnxC,KAAAc,IAAA8wC,KACA5xC,KAAAc,IAAAswC,EAAAS,IAAAnyC,EAAAC,QAAAK,KAAAe,IAAA,EAAAf,KAAAc,IAAAswC,GAAApxC,KAAAc,IAAA+wC,KAGAj2C,EAAAD,QAAA6pC,G3B2ngBM,SAAU5pC,EAAQD,EAASH,GAEjC,YAEAc,QAAOC,eAAeZ,EAAS,cAAgBwB,OAAO,G4BzshBtD,IAAAwoC,GAAAnqC,EAAA,GAGA4B,EAAA5B,EAAA,GAEA2oD,EAAA,WAiBI,QAAAA,GAAoBlb,EAA8Dmb,OAA9D,KAAAnb,MAAA,GAAY13B,aAAYo0B,EAAA3mC,YAAc2mC,EAAAnoC,oBAAwB,KAAA4mD,MAAA,GAA9DhkD,KAAA6oC,QAA8D7oC,KAAAgkD,UAf1EhkD,KAAAikD,MAAQ,GAAI99C,aAAYnG,KAAK6oC,MAAO7oC,KAAKgkD,QAAS,GAClDhkD,KAAAkkD,MAAQ,GAAI/9C,aAAYnG,KAAK6oC,MAAO7oC,KAAKgkD,QAAUze,EAAA3mC,YAAa,GAChEoB,KAAAmkD,MAAQ,GAAIh+C,aAAYnG,KAAK6oC,MAAO7oC,KAAKgkD,QAAsB,EAAZze,EAAA3mC,YAAe,GAClEoB,KAAAokD,MAAQ,GAAIj+C,aAAYnG,KAAK6oC,MAAO7oC,KAAKgkD,QAAsB,EAAZze,EAAA3mC,YAAe,GAElEoB,KAAAqkD,UAAY,GAAIn+C,YAAWlG,KAAK6oC,MAAO7oC,KAAKgkD,QAAUze,EAAA9mC,eAAgB,GACtEuB,KAAAskD,UAAY,GAAIp+C,YAAWlG,KAAK6oC,MAAO7oC,KAAKgkD,QAAUze,EAAA3mC,YAAc2mC,EAAA9mC,eAAgB,GACpFuB,KAAAukD,UAAY,GAAIr+C,YAAWlG,KAAK6oC,MAAO7oC,KAAKgkD,QAAsB,EAAZze,EAAA3mC,YAAgB2mC,EAAA9mC,eAAgB,GACtFuB,KAAAwkD,UAAY,GAAIt+C,YAAWlG,KAAK6oC,MAAO7oC,KAAKgkD,QAAsB,EAAZze,EAAA3mC,YAAgB2mC,EAAA9mC,eAAgB,GAEtFuB,KAAAykD,KAAO,GAAIv+C,YAAWlG,KAAK6oC,MAAO7oC,KAAKgkD,QAAUze,EAAA5mC,UAAW,GAC5DqB,KAAA0kD,KAAO,GAAIx+C,YAAWlG,KAAK6oC,MAAO7oC,KAAKgkD,QAAUze,EAAA3mC,YAAc2mC,EAAA5mC,UAAW,GAC1EqB,KAAA2kD,KAAO,GAAIz+C,YAAWlG,KAAK6oC,MAAO7oC,KAAKgkD,QAAsB,EAAZze,EAAA3mC,YAAgB2mC,EAAA5mC,UAAW,GAC5EqB,KAAA4kD,KAAO,GAAI1+C,YAAWlG,KAAK6oC,MAAO7oC,KAAKgkD,QAAsB,EAAZze,EAAA3mC,YAAgB2mC,EAAA5mC,UAAW,GA4DxF,MAvDIolD,GAAApnD,UAAAkoD,eAAA,SAAezqB,EAAc0qB,GAMzB,WANyB,KAAAA,MAAA9kD,MACzBhD,EAAAooC,KAAKsO,cAAoBoR,EAASb,MAAajkD,KAAKikD,MAAO7pB,GAKpD0qB,GAGXf,EAAApnD,UAAAooD,OAAA,SAAO9uB,EAAWhyB,EAAWujC,EAAUC,GACnCznC,KAAKikD,MAAM,GAAKhuB,EAChBj2B,KAAKikD,MAAM,GAAKhgD,EAChBjE,KAAKkkD,MAAM,GAAKjuB,EAAIuR,EACpBxnC,KAAKkkD,MAAM,GAAKjgD,EAChBjE,KAAKmkD,MAAM,GAAKluB,EAAEuR,EAClBxnC,KAAKmkD,MAAM,GAAKlgD,EAAEwjC,EAClBznC,KAAKokD,MAAM,GAAKnuB,EAChBj2B,KAAKokD,MAAM,GAAKngD,EAAEwjC,GAGtBsc,EAAApnD,UAAAyrC,MAAA,SAAMnS,EAAWhyB,EAAWujC,EAAUC,GAClCznC,KAAKykD,KAAK,GAAKxuB,EACfj2B,KAAKykD,KAAK,GAAKxgD,EACfjE,KAAK0kD,KAAK,GAAKzuB,EAAEuR,EACjBxnC,KAAK0kD,KAAK,GAAKzgD,EACfjE,KAAK2kD,KAAK,GAAK1uB,EAAEuR,EACjBxnC,KAAK2kD,KAAK,GAAK1gD,EAAEwjC,EACjBznC,KAAK4kD,KAAK,GAAK3uB,EACfj2B,KAAK4kD,KAAK,GAAK3gD,EAAEwjC,GAGrBsc,EAAApnD,UAAAurC,KAAA,SAAKhS,GACDl2B,KAAKqkD,UAAU,GAAKnuB,EACpBl2B,KAAKskD,UAAU,GAAKpuB,EACpBl2B,KAAKukD,UAAU,GAAKruB,EACpBl2B,KAAKwkD,UAAU,GAAKtuB,GAGxB6tB,EAAApnD,UAAAwrC,YAAA,SAAYrrC,GACRkD,KAAKqkD,UAAU,GAAKvnD,EACpBkD,KAAKskD,UAAU,GAAKxnD,EACpBkD,KAAKukD,UAAU,GAAKznD,EACpBkD,KAAKwkD,UAAU,GAAK1nD,GAGxBinD,EAAApnD,UAAA4jB,cAAA,SAAc0V,EAAWhyB,EAAWujC,EAAWC,EAAWvR,EAAWiU,EAAa5N,EAAYC,EAAYwoB,EAAYC,GAClHjlD,KAAK+kD,OAAO9uB,EAAEhyB,EAAEujC,EAAEC,GAClBznC,KAAKkoC,KAAKhS,GACVl2B,KAAKmoC,YAAYgC,GACjBnqC,KAAKooC,MAAM7L,EAAGC,EAAGwoB,EAAGC,IAM5BlB,IA3EaxoD,GAAAwoD,Q5BgxhBP,SAAUvoD,EAAQD,EAASH,GAEjC,Y6BhxhBA,SAAA8xB,GAAc1jB,GACV+G,EAAc/G,EAAG+F,cAMjB,KAAI,GAJEc,GAAU,GAAIlK,aAAYo/B,EAAAnmC,aAAemmC,EAAAloC,cACzCsD,EAAM4kC,EAAAnmC,aAAemmC,EAAAnoC,cAEvB8nD,EAAS,EACLzpD,EAAI,EAAGA,EAAIkF,EAAKlF,GAAK8pC,EAAAloC,aAIzBgT,EAAQ5U,GAAOypD,EACf70C,EAAQ5U,EAAE,GAAKypD,EAAS,EACxB70C,EAAQ5U,EAAE,GAAKypD,EAAS,EAExB70C,EAAQ5U,EAAE,GAAKypD,EAAS,EACxB70C,EAAQ5U,EAAE,GAAKypD,EAAS,EACxB70C,EAAQ5U,EAAE,GAAKypD,EAAS,EAExBA,GAAU3f,EAAAnoC,aAGdmsC,GAAc4b,EAAAz4C,2BACVlD,EAAI6G,EAAS7G,EAAG8G,sB7B2vhBxBpU,OAAOC,eAAeZ,EAAS,cAAgBwB,OAAO,G6BzxhBtD,IAIIwsC,GACAh5B,EALJ40C,EAAA/pD,EAAA,GACAmqC,EAAAnqC,EAAA,GAgCAouC,EAAA,WAEI,QAAAA,GAAYhgC,GACJ+/B,GACArc,EAAK1jB,GAWjB,MAPItN,QAAAC,eAAIqtC,EAAA7sC,UAAA,U7BgxhBAL,I6BhxhBJ,WACI,MAAOitC,I7BkxhBPltC,YAAY,EACZD,cAAc,I6BhxhBlBF,OAAAC,eAAIqtC,EAAA7sC,UAAA,e7BmxhBAL,I6BnxhBJ,WACI,MAAOiU,I7BqxhBPlU,YAAY,EACZD,cAAc,I6BpxhBtBotC,IAfajuC,GAAAiuC,e7B4yhBP,SAAUhuC,EAAQD,EAASH,GAEjC,YAEAc,QAAOC,eAAeZ,EAAS,cAAgBwB,OAAO,G8B/0hBtD,IAAAyoC,GAAApqC,EAAA,GAGAghD,EAAA,WAEI,QAAAA,GAAoBvU,GAAA7nC,KAAA6nC,WAChBA,EAASV,UAAYU,EAASV,WAAa,GAAI3B,GAAA+B,YAC/CvnC,KAAK87C,UAAYjU,EAASiU,UA8ClC,MA3CI5/C,QAAAC,eAAIigD,EAAAz/C,UAAA,a9B80hBAL,I8B90hBJ,WACI,MAAO0D,MAAK6nC,SAASiU,W9Bg1hBrB10C,I8B70hBJ,SAAcrK,GACViD,KAAK6nC,SAASiU,UAAY/+C,G9B+0hB1BV,YAAY,EACZD,cAAc,I8B70hBlBF,OAAAC,eAAIigD,EAAAz/C,UAAA,W9Bg1hBAL,I8Bh1hBJ,WACI,MAAO0D,MAAK6nC,SAASvxB,S9Bk1hBrBlP,I8B/0hBJ,SAAYrK,GACRiD,KAAK6nC,SAASvxB,QAAUvZ,G9Bi1hBxBV,YAAY,EACZD,cAAc,I8B/0hBlBF,OAAAC,eAAIigD,EAAAz/C,UAAA,U9Bk1hBAL,I8Bl1hBJ,WACI,MAAO0D,MAAK6nC,SAASz7B,Q9Bo1hBrB/P,YAAY,EACZD,cAAc,I8Bl1hBlBF,OAAAC,eAAIigD,EAAAz/C,UAAA,W9Bq1hBAL,I8Br1hBJ,WACI,MAAO0D,MAAK6nC,SAAS0S,S9Bu1hBrBl+C,YAAY,EACZD,cAAc,I8Br1hBlBF,OAAAC,eAAIigD,EAAAz/C,UAAA,U9Bw1hBAL,I8Bx1hBJ,WACI,MAAO0D,MAAK6nC,SAASxvB,Q9B01hBrBhc,YAAY,EACZD,cAAc,I8Bx1hBlBF,OAAAC,eAAIigD,EAAAz/C,UAAA,a9B21hBAL,I8B31hBJ,WACI,MAAO0D,MAAK6nC,SAASV,W9B61hBrB9qC,YAAY,EACZD,cAAc,I8B31hBlBF,OAAAC,eAAIigD,EAAAz/C,UAAA,S9B81hBAL,I8B91hBJ,WACI,MAAO0D,MAAK6nC,SAASkU,O9Bg2hBrB1/C,YAAY,EACZD,cAAc,I8B91hBlBF,OAAAC,eAAIigD,EAAAz/C,UAAA,a9Bi2hBAL,I8Bj2hBJ,WACI,MAAO0D,MAAK6nC,SAASmU,W9Bm2hBrB3/C,YAAY,EACZD,cAAc,I8Bj2hBlBF,OAAAC,eAAIigD,EAAAz/C,UAAA,S9Bo2hBAL,I8Bp2hBJ,WACI,MAAO0D,MAAK6nC,SAASud,O9Bs2hBrB/oD,YAAY,EACZD,cAAc,I8Br2hBtBggD,IAlDa7gD,GAAA6gD,c9Bg6hBP,SAAU5gD,EAAQD,EAASH,GAEjC,YAEAc,QAAOC,eAAeZ,EAAS,cAAgBwB,OAAO,G+Bv6hBtD,IAAAwoC,GAAAnqC,EAAA,GACA4B,EAAA5B,EAAA,GACAkN,EAAAlN,EAAA,GAEAygD,EAAA,WAaI,QAAAA,GAAoBpT,EAA4B4c,GAA5BrlD,KAAAyoC,MAZpBzoC,KAAAq8C,cAGQr8C,KAAAslD,aAqERtlD,KAAAO,EAAI,EA1DAP,KAAKulD,OAASvoD,EAAAiC,KAAK20B,MAAM52B,EAAAiC,KAAKE,SAAU,EAAGspC,EAAIj+B,OAAOU,MAAOu9B,EAAIj+B,OAAOY,OAAQ,GAAI,IAAK,GACzFpL,KAAKwlD,YAAcxoD,EAAAiC,KAAKo0B,YAAYr2B,EAAAiC,KAAKE,SAAU,EAAG,GAAI,IAAK,GAC/Da,KAAKylD,MAAQzoD,EAAAiC,KAAKs1B,OAAOv3B,EAAAiC,KAAKE,SAAUnC,EAAAqoC,KAAK4G,WAAW,GAAG,EAAE,KAAMjvC,EAAAqoC,KAAK4G,WAAW,EAAE,EAAE,IAAKjvC,EAAAqoC,KAAK4G,WAAW,EAAG,EAAG,IAElHjsC,KAAK8rC,QAAU9uC,EAAAiC,KAAKE,SACpBa,KAAK0lD,YAAc1oD,EAAAiC,KAAKE,SAExBa,KAAKkJ,YAAYm8C,GA+FzB,MA5FIxJ,GAAAl/C,UAAAuM,YAAA,SAAYG,GACRrJ,KAAK2lD,UAAYt8C,GAGrBwyC,EAAAl/C,UAAAk9C,OAAA,cAAA+L,GAAA5lD,IACIA,MAAKq8C,WAAW1wC,QAAQ,SAAC9J,GAAK,MAAAA,GAAEuK,OAAO27B,WAGvC/nC,KAAKyoC,IAAIh2B,WAAWzS,KAAK2lD,UAAUttC,OAAO3F,SAE1C1S,KAAKq8C,WAAW1wC,QAAQ,SAAC9J,GACrB+jD,EAAKC,YAAYhkD,GACjB+jD,EAAKtZ,aAAazqC,EAClB,IAAIu5B,GAAIwqB,EAAKE,aAAajkD,EAEvBu5B,IACC9yB,EAAKuK,YAAY+yC,EAAKD,UAAUttC,OAAQ+iB,GAE5C9yB,EAAKsK,wBAAwBgzC,EAAKnd,IAAKmd,EAAKD,UAAUttC,OAAQxW,EAAEuK,OAAOgE,YAEvE9H,EAAKsJ,eAAeg0C,EAAKnd,IAAK5mC,EAAEuK,OAAOgE,WAAYw1C,EAAKnd,IAAI32B,UAAWjQ,EAAEuK,OAAO25C,eAI9ElK,EAAAl/C,UAAAkpD,YAAV,SAAsBhkD,GAClB,GAAIk6C,OAAmB1zC,IAAXxG,EAAEk6C,MAAqBl6C,EAAEk6C,MAAQ/7C,KAAK2lD,UAAU5J,MACxDC,EAAYn6C,EAAEm6C,WAAah8C,KAAK2lD,UAAU3J,SAQ9C,IANGD,GAAS/7C,KAAKslD,UAAUvJ,QACvBA,EACE/7C,KAAKyoC,IAAIud,OAAOhmD,KAAKyoC,IAAIwd,YACzBjmD,KAAKyoC,IAAIyd,QAAQlmD,KAAKyoC,IAAIwd,YAC5BjmD,KAAKslD,UAAUvJ,MAAQA,GAExBC,GAAah8C,KAAKslD,UAAUtJ,UAAU,CACrC,OAAQA,GACJ,IAAK,QACDh8C,KAAKyoC,IAAIud,OAAOhmD,KAAKyoC,IAAI0d,OACzBnmD,KAAKyoC,IAAI2d,UAAUpmD,KAAKyoC,IAAI4d,UAAWrmD,KAAKyoC,IAAI6d,oBAChD,MACJ,SACItmD,KAAKyoC,IAAIyd,QAAQlmD,KAAKyoC,IAAI0d,OAGlCnmD,KAAKslD,UAAUtJ,UAAYA,IAMzBH,EAAAl/C,UAAA2vC,aAAV,SAAuBzqC,GACnB,GAAIslC,GAAYtlC,EAAEslC,UACZtlC,EAAEslC,UAAU/M,OACZmL,EAAAvmC,UAEH6C,GAAEujD,OACDpoD,EAAAiC,KAAKkwC,IAAInvC,KAAK0lD,YAAa1lD,KAAKulD,OAAQpe,GACxCnqC,EAAAiC,KAAKkwC,IAAInvC,KAAK8rC,QAAS9rC,KAAKwlD,YAAaxlD,KAAKylD,OAC9CzoD,EAAAiC,KAAKkwC,IAAInvC,KAAK8rC,QAAS9rC,KAAK8rC,QAAS9rC,KAAK0lD,cAG1C1oD,EAAAiC,KAAKkwC,IAAInvC,KAAK8rC,QAAS9rC,KAAKulD,OAAQpe,IAKlC0U,EAAAl/C,UAAAmpD,aAAV,SAAuBjkD,GAEnB7B,KAAKO,GAAG,IACR,IAEI66B,IAFIp7B,KAAKO,GAGT65B,OAAQp6B,KAAK8rC,UAGbx1B,EAAUzU,EAAEyU,SAAWtW,KAAK2lD,UAAUrvC,QACtCikC,EAAU14C,EAAE04C,SAAWv6C,KAAK2lD,UAAUpL,QACtCuB,EAAYj6C,EAAEi6C,WAAa97C,KAAK2lD,UAAU7J,SAa9C,OAXGxlC,IAAWtW,KAAKslD,UAAUhvC,UACzBtW,KAAKslD,UAAUhvC,QAAU8kB,EAAW,QAAI9kB,GAEzCikC,GAAWv6C,KAAKslD,UAAU/K,UACzBv6C,KAAKslD,UAAU/K,QAAUnf,EAAW,QAAImf,GAEzCuB,GAAa97C,KAAKslD,UAAUxJ,YAC3B97C,KAAKslD,UAAUxJ,UAAYA,EAC3B1gB,EAAc,WAAI0gB,EAAYvW,EAAA/mC,YAG3B48B,GAEfygB,IArHatgD,GAAAsgD,Y/BsgiBP,SAAUrgD,EAAQD,EAASH,GAEjC,YAEAc,QAAOC,eAAeZ,EAAS,cAAgBwB,OAAO,GACtD,IAAI4xC,GAAUvzC,EAAoB,GgCjhiBlCmrD,EAAAnrD,EAAA,GAEAmqC,EAAAnqC,EAAA,GAEA8gD,EAAA,SAAAsK,GAOI,QAAAtK,GAAYzT,EAAoCge,EAAqBC,GAArE,GAAAd,GACIY,EAAA7qD,KAAAqE,KAAMyoC,EAAKie,IAAS1mD,IhCghiBpB,OgCjhiB4C4lD,GAAAa,YALxCb,EAAAe,gBAEAf,EAAAgB,MAAQ,GACRhB,EAAAiB,KAAO,EhCmhiBJjB,EgCv7hBf,MAjGgCjX,GAAA9tC,UAAAq7C,EAAAsK,GAW5BtqD,OAAAC,eAAI+/C,EAAAv/C,UAAA,QhCghiBAL,IgChhiBJ,WACI,MAAO0D,MAAK4mD,OhCkhiBZvqD,YAAY,EACZD,cAAc,IgChhiBlB8/C,EAAAv/C,UAAAwC,OAAA,SAAOgb,EAAejP,EAAc+qB,EAAOhyB,EAAOiyB,GAS9C,WATkB,KAAAhrB,MAAQq6B,EAAAvnC,UAAM,KAAAi4B,MAAA,OAAO,KAAAhyB,MAAA,OAAO,KAAAiyB,MAAIqP,EAAApnC,OAClD6B,KAAK8mD,cAGLN,EAAA7pD,UAAMwC,OAAMxD,KAAAqE,MACTma,GACCna,KAAKm8C,MAAMhiC,EAAMjP,EAAO+qB,EAAGhyB,EAAGiyB,GAG3Bl2B,MAGXk8C,EAAAv/C,UAAAoqD,KAAA,SAAKx/C,GACDvH,KAAK6mD,KAAOt/C,GAST20C,EAAAv/C,UAAAqqD,MAAP,SAAa1lD,GACT,IAAK,GAAI7F,GAAIuE,KAAK6mD,KAAMprD,EAAIuE,KAAK6mD,KAAOvlD,EAAQ7F,IAC5CuE,KAAKmrC,UAAU1vC,EAEnBuE,MAAK6mD,MAAQvlD,GASV46C,EAAAv/C,UAAAw/C,MAAP,SAAahiC,EAAcjP,EAAc+qB,EAAOhyB,EAAOiyB,EAAWiU,OAAvC,KAAAj/B,MAAQq6B,EAAAvnC,UAAM,KAAAi4B,MAAA,OAAO,KAAAhyB,MAAA,OAAO,KAAAiyB,MAAIqP,EAAApnC,WAAO,KAAAgsC,MAAA,EAQ9D,KAAI,GAHA7B,GAAKrS,EACLsS,EAAKtkC,EAEDxI,EAAI,EAAGA,EAAI0e,EAAK7Y,OAAQ7F,IAAI,CAChC,GAAIsT,GAAS/O,KAAK2mD,aAAaxsC,EAAKk8B,WAAW56C,IAC3CwrD,EAAIjnD,KAAKknD,MAAMn4C,GACfo4C,EAAInnD,KAAKknD,MAAMn4C,EAAO,GACtBy4B,EAAIxnC,KAAKknD,MAAMn4C,EAAO,GACtB04B,EAAIznC,KAAKknD,MAAMn4C,EAAO,EAC1B/O,MAAKugB,cAAcvgB,KAAKy3B,MAAO6Q,EAAIC,EAAID,EAAGd,EAAGe,EAAGd,EAAGwf,EAAEE,EAAEF,EAAEzf,EAAE2f,EAAE1f,EAAEvR,EAAEiU,GAC9D7B,EAAGp9B,GACFq9B,GAAMd,EACNa,EAAK,GAELA,GAAId,EAIZxnC,KAAK6mD,MAAQ1sC,EAAK7Y,QAGd46C,EAAAv/C,UAAAmqD,YAAR,WACI,GAAIxqC,GAAOtc,KAAKymD,UACZW,EAAQ9qC,EAAK8qC,KACjBpnD,MAAKknD,MAAQ,GAAIhhD,YAAWkhD,EAAM9lD,OAASikC,EAAAnoC,cAG3C,KAAI,GAFAiqD,GAAO9hB,EAAAxnC,aAAeiC,KAAKymD,UAAUxwB,EAEjCx6B,EAAI,EAAGA,EAAI2rD,EAAM9lD,OAAQ7F,IAAI,CACjC,GAAIw6B,GAAKx6B,EAAI4rD,EAAQ/qC,EAAK2Z,EACtBhyB,EAAIrE,KAAK4tC,MAAM/xC,EAAI4rD,GAAQ/qC,EAAKrY,EAChCujC,EAAIlrB,EAAKgrC,OAAShrC,EAAKgrC,OAAO7rD,GAAK6gB,EAAK2Z,EACxCwR,EAAInrB,EAAKrY,EACT8K,EAAStT,EAAI8pC,EAAAnoC,aAEjB4C,MAAK2mD,aAAaS,EAAM/Q,WAAW56C,IAAMsT,EAEzC/O,KAAKknD,MAAMn4C,GAAUknB,EACrBj2B,KAAKknD,MAAMn4C,EAAO,GAAK9K,EACvBjE,KAAKknD,MAAMn4C,EAAO,GAAKy4B,EACvBxnC,KAAKknD,MAAMn4C,EAAO,GAAK04B,IAGnCyU,GAjGgCqK,EAAA/d,WAAnBjtC,GAAA2gD,chCsniBP,SAAU1gD,EAAQD,EAASH,GAEjC,YAEAc,QAAOC,eAAeZ,EAAS,cAAgBwB,OAAO,GACtD,IAAI4xC,GAAUvzC,EAAoB,GiC/niBlCmqC,EAAAnqC,EAAA,GACAmrD,EAAAnrD,EAAA,GAGAmsD,EAAA,SAAAf,GAII,QAAAe,GACI/9C,EACQg+C,EACAC,EACAC,EACAC,OADA,KAAAD,MAAA,QACA,KAAAC,MAAA,GALZ,IAAA/B,GAOIY,EAAA7qD,KAAAqE,KAAMwJ,EAAIg+C,EAASC,IAAQznD,IjC6niB3B,OiCloiBQ4lD,GAAA4B,SACA5B,EAAA6B,UACA7B,EAAA8B,UACA9B,EAAA+B,WjC+niBD/B,EiCjjiBf,MAvFgCjX,GAAA9tC,UAAA0mD,EAAAf,GAc5Be,EAAA5qD,UAAAwC,OAAA,SAAOyoD,EAAiBC,GASpB,WAToB,KAAAA,MAAQtiB,EAAApnC,OAC5B6B,KAAK8nD,iBAEFF,GACC5nD,KAAK+nD,SAASH,EAAMC,GAExBrB,EAAA7pD,UAAMwC,OAAMxD,KAAAqE,MACZA,KAAK8qC,QAAQ9qC,KAAKwnD,OAASxnD,KAAKynD,SAEzBznD,MAGXunD,EAAA5qD,UAAAqrD,QAAA,SAAQC,EAAahyB,EAAWhyB,EAAWiyB,OAAA,KAAAA,MAAIqP,EAAApnC,MAC3C,IAAI+pD,GAAMjkD,EAAIjE,KAAKwnD,OAASvxB,CAG5B,OAFAj2B,MAAKmoD,WAAWD,EAAKD,GAEdjoD,MAGXunD,EAAA5qD,UAAAorD,SAAA,SAASH,EAAgBC,OAAA,KAAAA,MAAQtiB,EAAApnC,MAC7B,KAAI,GAAI1C,GAAI,EAAGA,EAAImsD,EAAKtmD,OAAQ7F,IAC5BuE,KAAKmoD,WAAW1sD,EAAGmsD,EAAKnsD,GAAIosD,EAEhC,OAAO7nD,OAGXunD,EAAA5qD,UAAAwrD,WAAA,SAAWD,EAAaD,EAAa/xB,GACjC,OADiC,KAAAA,MAAIqP,EAAApnC,OAC3B,GAAP8pD,EAEC,WADAjoD,MAAKugB,cAAc2nC,EAAK,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAI9C,IAAIE,GAAKpoD,KAAKqoD,SACVt5C,EAASk5C,EAAO1iB,EAAa,cAE7BqE,EAAMse,EAAMloD,KAAKwnD,OAAUxnD,KAAK0nD,QAChC7d,EAAKjqC,KAAK4tC,MAAM0a,EAAMloD,KAAKwnD,QAAUxnD,KAAK2nD,SAC1C7d,EAAKF,EAAK5pC,KAAK0nD,QACf3d,EAAKF,EAAK7pC,KAAK2nD,QAEnB3nD,MAAKugB,cAAc2nC,EAAKte,EAAIC,EAAIC,EAAIC,EAAIqe,EAAGr5C,GAASq5C,EAAGr5C,EAAO,GAAIq5C,EAAGr5C,EAAO,GAAIq5C,EAAGr5C,EAAO,GAAGmnB,EAAG,IAG5FqxB,EAAA5qD,UAAAmrD,eAAR,WAII,IAAI,GAHAQ,GAAM,EACN7N,EAAU,GAAIv0C,YAAYq/B,EAAAxnC,aAAeiC,KAAK0nD,SAAYniB,EAAAxnC,aAAeiC,KAAK2nD,UAAYpiB,EAAAnoC,eAEtF6G,EAAI,EAAGA,EAAIshC,EAAAxnC,aAAckG,GAAKjE,KAAK0nD,QACvC,IAAI,GAAIzxB,GAAI,EAAGA,EAAIsP,EAAAxnC,aAAck4B,GAAKj2B,KAAK2nD,SACvClN,EAAQ6N,KAASryB,EACjBwkB,EAAQ6N,KAASrkD,EAEjBw2C,EAAQ6N,KAASryB,EAAIj2B,KAAK0nD,QAC1BjN,EAAQ6N,KAASrkD,EAAIjE,KAAK2nD,QAIlC3nD,MAAKqoD,SAAW5N,GAGZ8M,EAAA5qD,UAAA4rD,gBAAR,aAaJhB,GAvFgChB,EAAA/d,WAAnBjtC,GAAAgsD,cjC6siBP,SAAU/rD,EAAQD,EAASH,GAEjC,YAEAc,QAAOC,eAAeZ,EAAS,cAAgBwB,OAAO,GACtD,IAAI4xC,GAAUvzC,EAAoB,GkCttiBlCmqC,EAAAnqC,EAAA,GACAotD,EAAAptD,EAAA,GAGAqgD,EAAA,SAAA+K,GAEI,QAAA/K,GAAYjyC,GlCstiBR,MkCrtiBAg9C,GAAA7qD,KAAAqE,KAAMwJ,IAAGxJ,KA2BjB,MA9BoC2uC,GAAA9tC,UAAA46C,EAAA+K,GAMhCtqD,OAAAC,eAAcs/C,EAAA9+C,UAAA,elCqtiBVL,IkCrtiBJ,WACI,MAAOipC,GAAAhnC,clCutiBPlC,YAAY,EACZD,cAAc,IkCrtiBlBF,OAAAC,eAAcs/C,EAAA9+C,UAAA,YlCwtiBVL,IkCxtiBJ,WACI,OACImF,OAAQzB,KAAKyoC,IAAIrlB,WACjBlY,MAAOq6B,EAAAxnC,aACPqN,OAAQm6B,EAAAxnC,aACRwkB,IAAKviB,KAAKyoC,IAAI7gB,QACdlF,IAAK1iB,KAAKyoC,IAAI7gB,QACd5gB,IAAKhH,KAAK8sC,SACVjsB,OAAQ7gB,KAAKyoC,IAAI0E,UACjBhtC,KAAMH,KAAKyoC,IAAIp5B,gBlC2tiBnBhT,YAAY,EACZD,cAAc,IkCjtiBtBq/C,GA9BoC+M,EAAA7b,aAAvBpxC,GAAAkgD,kBlCwviBP,SAAUjgD,EAAQD,EAASH,GAEjC,YAEAc,QAAOC,eAAeZ,EAAS,cAAgBwB,OAAO,GACtD,IAAI4xC,GAAUvzC,EAAoB,GmCjwiBlCqtD,EAAArtD,EAAA,IACAmqC,EAAAnqC,EAAA,GAGAkgD,EAAA,SAAAkL,GAAA,QAAAlL,KnCmwiBQ,MAAkB,QAAXkL,GAAmBA,EAAOhjD,MAAMxD,KAAM4B,YAAc5B,KmCpsiBnE,MA/DoC2uC,GAAA9tC,UAAAy6C,EAAAkL,GACzBlL,EAAA3+C,UAAA+rD,WAAP,SAAkBC,EAAerb,GAO7B,IAAK,GANDvmB,GAAM/mB,KAAK8sC,SAEX8b,GADIhpD,KAAK4tC,MACCxtC,KAAK+sC,aACf9O,EAAQ0qB,EAAQpjB,EAAAxnC,aAAe6qD,EAC/B1qB,EAAMD,EAAQsH,EAAAxnC,aAAe6qD,EAExBntD,EAAIwiC,EAAOxiC,EAAIyiC,EAAKziC,IAAK,CAC9B,GAAIgyC,GAAOhyC,EAAI8pC,EAAAlnC,UACXqvC,EAAQ9tC,KAAK4tC,OAAO/xC,EAAIgyC,GAAQmb,EACpC7hC,GAAItrB,GAAK6xC,EAAKI,EAAQ,IAAMjyC,EAAImtD,GAGpC5oD,KAAK6oD,YAAYF,IAGdrN,EAAA3+C,UAAAg/C,cAAP,SAAqBgN,EAAet7C,GAEhC,IAAK,GADD0B,GAAS/O,KAAK+sC,YAAcxH,EAAAxnC,aAAe4qD,EACtCltD,EAAI,EAAGA,EAAI4R,EAAK/L,OAAQ7F,IAC7BuE,KAAK8sC,SAAS/9B,EAAOtT,GAAK4R,EAAK5R,IAIhC6/C,EAAA3+C,UAAAksD,YAAP,SAAmBF,GACf3oD,KAAKiuC,YAAY0a,IAkBdrN,EAAA3+C,UAAAmsD,SAAP,SAAgBH,EAAe5xC,EAAegO,GAC1C,MAAO/kB,MAAKguC,SAASj3B,EAAO4xC,EAAO5jC,IAGhCu2B,EAAA3+C,UAAAosD,SAAP,SAAgBJ,EAAe5xC,GAC3B,MAAO/W,MAAK+tC,SAASh3B,EAAO4xC,IAGzBrN,EAAA3+C,UAAA8I,MAAP,SAAakjD,EAAe1qB,EAAeC,GAEvC,IAAK,GADDh3B,GAAMg3B,EAAMD,EACPxiC,EAAI,EAAGA,EAAIyL,EAAKzL,IACrBuE,KAAKgpD,aAAaL,EAAO1qB,EAAMxiC,EAAGyiC,IAInCod,EAAA3+C,UAAAqsD,aAAP,SAAoBL,EAAeM,EAAcC,GAC7C,GAAIC,GAAOnpD,KAAK+oD,SAASJ,EAAOM,EAChCjpD,MAAK8oD,SAASH,EAAOM,EAAMjpD,KAAK+oD,SAASJ,EAAOO,IAChDlpD,KAAK8oD,SAASH,EAAOO,EAAMC,IAEnC7N,GA/DoCmN,EAAAW,YAAvB7tD,GAAA+/C,kBnCg0iBP,SAAU9/C,EAAQD,EAASH,GAEjC,YAEAc,QAAOC,eAAeZ,EAAS,cAAgBwB,OAAO,GACtD,IAAI4xC,GAAUvzC,EAAoB,GoCz0iBlCmqC,EAAAnqC,EAAA,GACAotD,EAAAptD,EAAA,GAEAguD,EAAA,SAAA5C,GAEI,QAAA4C,GAAY5/C,GpC00iBR,MoCz0iBAg9C,GAAA7qD,KAAAqE,KAAMwJ,IAAGxJ,KAoBjB,MAvBiC2uC,GAAA9tC,UAAAuoD,EAAA5C,GAM7BtqD,OAAAC,eAAcitD,EAAAzsD,UAAA,epCy0iBVL,IoCz0iBJ,WACI,MAAOipC,GAAAlnC,WpC20iBPhC,YAAY,EACZD,cAAc,IoCz0iBlBF,OAAAC,eAAcitD,EAAAzsD,UAAA,YpC40iBVL,IoC50iBJ,WACI,OACImF,OAAQzB,KAAKyoC,IAAIrlB,WACjBlY,MAAOq6B,EAAAxnC,aACPqN,OAAQm6B,EAAAxnC,aACRwkB,IAAKviB,KAAKyoC,IAAI7gB,QACdlF,IAAK1iB,KAAKyoC,IAAI7gB,QACd5gB,IAAKhH,KAAK8sC,SACVjsB,OAAQ7gB,KAAKyoC,IAAIhhB,KACjBtnB,KAAMH,KAAKyoC,IAAIp5B,gBpC+0iBnBhT,YAAY,EACZD,cAAc,IoC50iBtBgtD,GAvBiCZ,EAAA7b,aAApBpxC,GAAA6tD,epC42iBP,SAAU5tD,EAAQD,EAASH,GAEjC,YqC92iBA,SAAAigD,KACI,GAAI7wC,GAA4ByP,SAASC,eAAe,UAEpD1Q,EAAKlB,EAAKuC,WAAWL,GACrB6+C,oBAAoB,EACpBC,OAAO,EACPC,WAAW,GAKf,OADA//C,GAAGia,SAAS,EAAG,EAAGja,EAAGgB,OAAOU,MAAO1B,EAAGgB,OAAOY,QACtC5B,EAGX,QAAAuZ,GAA8BvZ,EAA2BggD,GACrD,MAAOlhD,GAAKya,cAAcvZ,GACtBxC,IAAKwiD,EACLjnC,IAAK/Y,EAAGoe,QACRlF,IAAKlZ,EAAGoe,UAIhB,QAAA6hC,GAAmCjgD,EAA2BggD,GAC1D,MAAOlhD,GAAKya,cAAcvZ,GACtBxC,IAAKwiD,EACLjnC,IAAK/Y,EAAGoe,QACRlF,IAAKlZ,EAAGoe,QACR/G,OAAQrX,EAAG2jC,UACXxpB,eAAgBna,EAAG2jC,YAQ3B,QAAA8O,GAAiCzyC,EAA2B8M,EAAQikC,EAASuB,GAEzE,IAAI,GADA8L,MACInsD,EAAI,EAAGA,EAAE,KAAOA,IACpBmsD,EAAKtjD,KAAK,EAGdyK,IAEA,IAAI26C,GAAO,GAAIC,GAAApC,WAAW/9C,EAAI,GAAI,IAAIrK,OAAOyoD,EAAM,EAEnD,OAAO,IAAI+B,GAAAvN,YACPhwC,OAAQs9C,EACRpzC,QAASA,EACTikC,QAASA,EACTuB,UAAWA,EAGXC,OAAO,IAIf,QAAAzQ,GAA6B9hC,EAA2B8M,EAASikC,EAASuB,EAAW7lB,EAAEhyB,EAAEqkC,EAAGC,EAAGf,EAAEC,GAC7F,GAAImiB,GAAK,GAAID,GAAAnhB,WAAWh/B,EAAG,EAG3B,OAFAogD,GAAGrpC,cAAc,EAAE0V,EAAEhyB,EAAEgyB,EAAEuR,EAAEvjC,EAAEwjC,EAAEa,EAAGC,EAAGD,EAAGd,EAAEe,EAAGf,EAAGmiB,EAAAxrD,MAAO,GACvDyrD,EAAGzqD,SACI,GAAIwqD,GAAAvN,YACPhwC,OAAOw9C,EACPtzC,QAASA,EACTikC,QAASA,EACTuB,UAAWA,EACXC,OAAO,IrC8yiBf7/C,OAAOC,eAAeZ,EAAS,cAAgBwB,OAAO,GqCn3iBtD,IAAA4sD,GAAAvuD,EAAA,IACAkN,EAAAlN,EAAA,EAEAG,GAAA8/C,YAcA9/C,EAAAwnB,gBAQAxnB,EAAAkuD,oBAaA,IAAI16C,GAAS,CACbxT,GAAA0gD,mBAqBA1gD,EAAA+vC,gBrC23iBM,SAAU9vC,EAAQD,EAASH,IsCt7iBjC,SAAA0I,EAAA5C,GAAe1F,EAAAD,QAAA2F,KAAuIlB,EAAA,WAAkB,GAAA8D,GAAA,WAAiB,QAAA5C,GAAAX,GAAmC,MAArB1E,GAAAs/C,YAAA56C,EAAA66C,KAAqB76C,EAAS,QAAA66B,GAAA76B,GAAc,OAAAzE,GAAA,EAAYA,EAAAD,EAAAguD,SAAAvoD,OAAoBxF,IAAAD,EAAAguD,SAAA/tD,GAAAguD,MAAAC,QAAAjuD,IAAAyE,EAAA,cAAqD7E,GAAA6E,EAAI,GAAA7E,GAAA,EAAAG,EAAAoe,SAAA8S,cAAA,MAAwClxB,GAAAiuD,MAAAE,QAAA,uEAAuFnuD,EAAAkvB,iBAAA,iBAAAxqB,GAAuCA,EAAA0pD,iBAClf7uB,IAAA1/B,EAAAG,EAAAguD,SAAAvoD,UAAyB,EAAK,IAAAs2B,IAAAsyB,aAAAC,MAAAC,MAAA7lD,EAAAqzB,EAAAr3B,EAAA,EAAAsB,EAAAX,EAAA,GAAA4C,GAAAumD,MAAA,sBAAA5iB,EAAAvmC,EAAA,GAAA4C,GAAAumD,MAAA,oBAAmH,IAAAC,KAAAJ,aAAAI,KAAAJ,YAAAK,OAAA,GAAAppD,GAAAD,EAAA,GAAA4C,GAAAumD,MAAA,oBAA2F,OAALjvB,GAAA,IAAYovB,SAAA,GAAApP,IAAAv/C,EAAA4uD,SAAAvpD,EAAAg6C,UAAA9f,EAAA4e,MAAA,WAA0DpiB,GAAAsyB,aAAAC,MAAAC,OAA4BlsB,IAAA,WAAgB39B,GAAI,IAAA1E,IAAAquD,aAAAC,MAAAC,KAAkD,IAAlB3iB,EAAAM,OAAAlsC,EAAA+7B,EAAA,KAAkB/7B,EAAA0I,EAAA,MAAA1C,EAAAkmC,OAAA,IAAAxnC,GAAA1E,EAAA0I,GAAA,KAAAA,EAAA1I,EAAA0E,EAAA,EAAAY,GAAA,CAAmD,GAAArF,GAAAouD,YAAAK,MAAyBppD,GAAA4mC,OAAAjsC,EAAA4uD,eAC3d,QAAA5uD,EAAA6uD,gBAAA,SAAmC,MAAA9uD,IAASksC,OAAA,WAAmBnQ,EAAA53B,KAAAk+B,OAAa0sB,WAAA/uD,EAAAgvD,QAAAzvB,GACiT,OADvRt3B,GAAAumD,MAAA,SAAAnpD,EAAA4C,EAAApI,GAAwB,GAAAG,GAAAivD,IAAAlzB,EAAA,EAAArzB,EAAA3E,KAAAuyC,MAAA5xC,EAAAgE,EAAAiN,OAAAu5C,kBAAA,GAAAlpD,EAAA,GAAAtB,EAAAknC,EAAA,GAAAlnC,EAAAY,EAAA,EAAAZ,EAAAqD,EAAA,EAAArD,EAAAzE,EAAA,EAAAyE,EAAA3E,EAAA,GAAA2E,EAAAhE,EAAA,GAAAgE,EAAA1D,EAAA,GAAA0D,EAAA8E,EAAA4U,SAAA8S,cAAA,SAAwJ1nB,GAAA6F,MAAArJ,EAAUwD,EAAA+F,OAAAq8B,EAAWpiC,EAAAykD,MAAAE,QAAA,wBAAyC,IAAAvpD,GAAA4E,EAAAwF,WAAA,KAC7Q,OADsSpK,GAAAk6C,KAAA,UAAAp6C,EAAA,gCAAmDE,EAAAuqD,aAAA,MAAqBvqD,EAAAwqD,UAAAvvD,EAAc+E,EAAAyqD,SAAA,IAAArpD,EAAA4lC,GAAoBhnC,EAAAwqD,UAAAnnD,EAAcrD,EAAA0qD,SAAAjqD,EAAAC,EAAAyC,GACrenD,EAAAyqD,SAAApvD,EAAAF,EAAAW,EAAAM,GAAoB4D,EAAAwqD,UAAAvvD,EAAc+E,EAAA2qD,YAAA,GAAiB3qD,EAAAyqD,SAAApvD,EAAAF,EAAAW,EAAAM,IAA2Bu+C,IAAA/1C,EAAA0iC,OAAA,SAAAN,EAAAD,GAA2B3rC,EAAA+D,KAAA2iB,IAAA1mB,EAAA4rC,GAAgB7P,EAAAh4B,KAAAe,IAAAi3B,EAAA6P,GAAgBhnC,EAAAwqD,UAAAvvD,EAAc+E,EAAA2qD,YAAA,EAAgB3qD,EAAAyqD,SAAA,IAAArpD,EAAAjG,GAAoB6E,EAAAwqD,UAAAnnD,EAAcrD,EAAA0qD,SAAA5mD,EAAAkjC,GAAA,IAAAvmC,EAAA,KAAAqD,EAAA1I,GAAA,IAAA0I,EAAAqzB,GAAA,IAAAz2B,EAAAyC,GAAkDnD,EAAA2oB,UAAA/jB,EAAAvJ,EAAAyE,EAAA3E,EAAAW,EAAAgE,EAAA1D,EAAAf,EAAAF,EAAAW,EAAAgE,EAAA1D,GAAqC4D,EAAAyqD,SAAApvD,EAAAS,EAAAgE,EAAA3E,EAAA2E,EAAA1D,GAAwB4D,EAAAwqD,UAAAvvD,EAAc+E,EAAA2qD,YAAA,GAAiB3qD,EAAAyqD,SAAApvD,EAAAS,EAAAgE,EAAA3E,EAAA2E,EAAAgE,GAAA,EAAAkjC,EAAAD,GAAA3qC,OAAsCiH,KtC87iBvX,SAAUtI,EAAQD,EAASH,IuCl8iBjC,SAAA8F,EAAAC,GAAe3F,EAAAD,QAAA4F,KAA6LnB,EAAA,WAAiB,gBAAAkB,GAAmB,QAAAC,GAAAZ,GAAc,GAAAhE,EAAAgE,GAAA,MAAAhE,GAAAgE,GAAAhF,OAA4B,IAAAsG,GAAAtF,EAAAgE,IAAY9E,EAAA8E,EAAA7E,GAAA,EAAAH,WAAqB,OAAA2F,GAAAX,GAAA5E,KAAAkG,EAAAtG,QAAAsG,IAAAtG,QAAA4F,GAAAU,EAAAnG,GAAA,EAAAmG,EAAAtG,QAA2D,GAAAgB,KAAS,OAAA4E,GAAAvF,EAAAsF,EAAAC,EAAAtF,EAAAU,EAAA4E,EAAA1F,EAAA,SAAAyF,GAAmC,MAAAA,IAASC,EAAArF,EAAA,SAAAoF,EAAA3E,EAAAgE,GAAqBY,EAAAlF,EAAAiF,EAAA3E,IAAAL,OAAAC,eAAA+E,EAAA3E,GAAqCH,cAAA,EAAAC,YAAA,EAAAC,IAAAiE,KAAsCY,EAAA5E,EAAA,SAAA2E,GAAiB,GAAA3E,GAAA2E,KAAA1E,WAAA,WAAiC,MAAA0E,GAAAmqD,SAAiB,WAAY,MAAAnqD,GAAU,OAAAC,GAAArF,EAAAS,EAAA,IAAAA,MAAsB4E,EAAAlF,EAAA,SAAAiF,EAAAC,GAAmB,MAAAjF,QAAAS,UAAAC,eAAAjB,KAAAuF,EAAAC,IAAiDA,EAAAtE,EAAA,GAAAsE,IAAArE,EAAA,MAAkB,SAAAoE,EAAAC,GAAgB,QAAA5E,GAAA2E,EAAAC,GAAgB,GAAA5E,GAAA2E,EAAA,OAAAW,EAAAX,EAAA,EAAsB,KAAAW,EAAA,MAAAtF,EAAe,IAAA4E,GAAA,kBAAAmqD,MAAA,CAA+B,GAAArvD,GAAAsE,EAAAsB,EAAW,QAAAtF,GAAA2I,OAAArD,EAAAyE,QAAAsR,IAAA,SAAA1W,GAA2C,uBAAAW,EAAA0pD,WAAArqD,EAAA,SAA4CgE,QAAAjJ,IAAA8b,KAAA,MAA0B,OAAAxb,GAAAwb,KAAA,MAAqB,QAAAxX,GAAAW,GAAc,yEAAgEoqD,KAAAE,SAAAC,mBAAAC,KAAAC,UAAAzqD,MAAA,MAAqEA,EAAA3F,QAAA,SAAA2F,GAAsB,GAAAC,KAAS,OAAAA,GAAAgb,SAAA,WAA6B,MAAAnc,MAAA4X,IAAA,SAAAzW,GAA4B,GAAAZ,GAAAhE,EAAA4E,EAAAD,EAAa,OAAAC,GAAA,aAAAA,EAAA,OAA6BZ,EAAA,IAAMA,IAAIwX,KAAA,KAAW5W,EAAA1F,EAAA,SAAAyF,EAAA3E,GAAmB,gBAAA2E,SAAA,KAAAA,EAAA,KAAsC,QAAAX,MAAYsB,EAAA,EAAKA,EAAA7B,KAAAsB,OAAcO,IAAA,CAAK,GAAA5F,GAAA+D,KAAA6B,GAAA,EAAiB,iBAAA5F,KAAAsE,EAAAtE,IAAA,GAA8B,IAAA4F,EAAA,EAAQA,EAAAX,EAAAI,OAAWO,IAAA,CAAK,GAAApG,GAAAyF,EAAAW,EAAW,iBAAApG,GAAA,IAAA8E,EAAA9E,EAAA,MAAAc,IAAAd,EAAA,GAAAA,EAAA,GAAAc,MAAAd,EAAA,OAAAA,EAAA,aAAAc,EAAA,KAAA4E,EAAAmD,KAAA7I,MAAgG0F,IAAI,SAAAD,EAAAC,EAAA5E,GAAiB,QAAAgE,GAAAW,EAAAC,GAAgB,OAAA5E,GAAA,EAAYA,EAAA2E,EAAAI,OAAW/E,IAAA,CAAK,GAAAgE,GAAAW,EAAA3E,GAAAsF,EAAA+pD,EAAArrD,EAAA0H,GAAqB,IAAApG,EAAA,CAAMA,EAAAgqD,MAAS,QAAA5vD,GAAA,EAAYA,EAAA4F,EAAAiqD,MAAAxqD,OAAiBrF,IAAA4F,EAAAiqD,MAAA7vD,GAAAsE,EAAAurD,MAAA7vD,GAA2B,MAAKA,EAAAsE,EAAAurD,MAAAxqD,OAAiBrF,IAAA4F,EAAAiqD,MAAAxnD,KAAAzI,EAAA0E,EAAAurD,MAAA7vD,GAAAkF,QAAkC,CAAK,OAAA1F,MAAAQ,EAAA,EAAiBA,EAAAsE,EAAAurD,MAAAxqD,OAAiBrF,IAAAR,EAAA6I,KAAAzI,EAAA0E,EAAAurD,MAAA7vD,GAAAkF,GAA4ByqD,GAAArrD,EAAA0H,KAASA,GAAA1H,EAAA0H,GAAA4jD,KAAA,EAAAC,MAAArwD,KAA0B,QAAAoG,GAAAX,GAAc,OAAAC,MAAA5E,KAAiBgE,EAAA,EAAKA,EAAAW,EAAAI,OAAWf,IAAA,CAAK,GAAAsB,GAAAX,EAAAX,GAAAtE,EAAA4F,EAAA,GAAApG,EAAAoG,EAAA,GAAA/E,EAAA+E,EAAA,GAAAu5B,EAAAv5B,EAAA,GAAAnG,GAA0CqwD,IAAAtwD,EAAAuwD,MAAAlvD,EAAAmvD,UAAA7wB,EAA2B7+B,GAAAN,GAAAM,EAAAN,GAAA6vD,MAAAxnD,KAAA5I,GAAAyF,EAAAmD,KAAA/H,EAAAN,IAAqCgM,GAAAhM,EAAA6vD,OAAApwD,KAAiB,MAAAyF,GAAS,QAAAlF,GAAAiF,EAAAC,GAAgB,GAAA5E,GAAAyH,EAAA9C,EAAAgrD,WAAsB,KAAA3vD,EAAA,SAAAu/B,OAAA,8GAAqI,IAAAv7B,GAAA4rD,IAAA7qD,OAAA,EAAoB,YAAAJ,EAAAkrD,SAAA7rD,IAAA8rD,YAAA9vD,EAAA+vD,aAAAnrD,EAAAZ,EAAA8rD,aAAA9vD,EAAA4+C,YAAAh6C,GAAA5E,EAAA+vD,aAAAnrD,EAAA5E,EAAAgwD,YAAAJ,EAAA7nD,KAAAnD,OAAgI,CAAK,cAAAD,EAAAkrD,SAAA,SAAAtwB,OAAA,qEAA+Gv/B,GAAA4+C,YAAAh6C,IAAkB,QAAA1F,GAAAyF,GAAcA,EAAAsrD,WAAAC,YAAAvrD,EAA4B,IAAAC,GAAAgrD,EAAA/qD,QAAAF,EAAmBC,IAAA,GAAAgrD,EAAAO,OAAAvrD,EAAA,GAAoB,QAAArE,GAAAoE,GAAc,GAAAC,GAAA8Y,SAAA8S,cAAA,QAAsC,OAAA7rB,GAAAyrD,MAAAxsD,KAAA,WAAAzE,EAAAyF,EAAAD,EAAAyrD,OAAA1wD,EAAAiF,EAAAC,KAAqD,QAAAi6B,GAAAl6B,GAAc,GAAAC,GAAA8Y,SAAA8S,cAAA,OAAqC,OAAA7rB,GAAAyrD,MAAAxsD,KAAA,WAAAe,EAAAyrD,MAAAC,IAAA,aAAAlxD,EAAAyF,EAAAD,EAAAyrD,OAAA1wD,EAAAiF,EAAAC,KAA8E,QAAAzF,GAAAwF,EAAAC,GAAgBjF,OAAAuP,KAAAtK,GAAAwK,QAAA,SAAApP,GAAmC2E,EAAA2rD,aAAAtwD,EAAA4E,EAAA5E,MAAyB,QAAAV,GAAAqF,EAAAC,GAAgB,GAAA5E,GAAAgE,EAAAsB,CAAU,IAAAV,EAAA2rD,UAAA,CAAgB,GAAA7wD,GAAA6H,GAAUvH,GAAAkrC,MAAA3qC,EAAAqE,IAAAZ,EAAA3E,EAAA8V,KAAA,KAAAnV,EAAAN,GAAA,GAAA4F,EAAAjG,EAAA8V,KAAA,KAAAnV,EAAAN,GAAA,OAA0DiF,GAAA+qD,WAAA,kBAAAc,MAAA,kBAAAA,KAAAC,iBAAA,kBAAAD,KAAAE,iBAAA,kBAAAC,OAAA,kBAAA5B,OAAA/uD,EAAA6+B,EAAAj6B,GAAAZ,EAAA1D,EAAA6U,KAAA,KAAAnV,EAAA4E,GAAAU,EAAA,WAAmNpG,EAAAc,KAAA4wD,MAAAJ,IAAAE,gBAAA1wD,EAAA4wD,SAAyC5wD,EAAAO,EAAAqE,GAAAZ,EAAAzE,EAAA4V,KAAA,KAAAnV,GAAAsF,EAAA,WAAwCpG,EAAAc,IAAO,OAAAgE,GAAAW,GAAA,SAAAC,GAAwB,GAAAA,EAAA,CAAM,GAAAA,EAAA4qD,MAAA7qD,EAAA6qD,KAAA5qD,EAAA6qD,QAAA9qD,EAAA8qD,OAAA7qD,EAAA8qD,YAAA/qD,EAAA+qD,UAAA,MAAsE1rD,GAAAW,EAAAC,OAAOU,MAAU,QAAAjG,GAAAsF,EAAAC,EAAA5E,EAAAgE,GAAoB,GAAAsB,GAAAtF,EAAA,GAAAgE,EAAAwrD,GAAiB,IAAA7qD,EAAAksD,WAAAlsD,EAAAksD,WAAApD,QAAAqD,EAAAlsD,EAAAU,OAA4C,CAAK,GAAA5F,GAAAge,SAAAqzC,eAAAzrD,GAAApG,EAAAyF,EAAAqsD,UAAgD9xD,GAAA0F,IAAAD,EAAAurD,YAAAhxD,EAAA0F,IAAA1F,EAAA6F,OAAAJ,EAAAorD,aAAArwD,EAAAR,EAAA0F,IAAAD,EAAAi6C,YAAAl/C,IAA4E,QAAAH,GAAAoF,EAAAC,GAAgB,GAAA5E,GAAA4E,EAAA4qD,IAAAxrD,EAAAY,EAAA6qD,KAAsB,IAAAzrD,GAAAW,EAAA2rD,aAAA,QAAAtsD,GAAAW,EAAAksD,WAAAlsD,EAAAksD,WAAApD,QAAAztD,MAAoE,CAAK,KAAK2E,EAAAqrD,YAAarrD,EAAAurD,YAAAvrD,EAAAqrD,WAA6BrrD,GAAAi6C,YAAAlhC,SAAAqzC,eAAA/wD,KAA2C,QAAAM,GAAAqE,EAAAC,EAAA5E,GAAkB,GAAAgE,GAAAhE,EAAAwvD,IAAAlqD,EAAAtF,EAAA0vD,UAAAhwD,MAAA,KAAAkF,EAAAqsD,uBAAA3rD,GAAgEV,EAAAqsD,uBAAAvxD,KAAAsE,EAAAqD,EAAArD,IAAAsB,IAAAtB,GAAA,uDAA4F+qD,KAAAE,SAAAC,mBAAAC,KAAAC,UAAA9pD,MAAA,MAAsE,IAAApG,GAAA,GAAAyxD,OAAA3sD,IAAoBJ,KAAA,aAAgBrD,EAAAoE,EAAAisD,IAAWjsD,GAAAisD,KAAAJ,IAAAC,gBAAAvxD,GAAAqB,GAAAiwD,IAAAE,gBAAAnwD,GAAwD,GAAA8uD,MAAQ6B,EAAA,SAAAvsD,GAAe,GAAAC,EAAM,mBAAkB,gBAAAA,MAAAD,EAAAsC,MAAAxD,KAAA4B,YAAAT,IAAkD,WAAY,MAAAqQ,SAAAyI,mBAAAyzC,MAAAl8C,OAAAm8C,OAAoD3pD,EAAA,SAAA9C,GAAgB,GAAAC,KAAS,iBAAA5E,GAAmB,gBAAA4E,EAAA5E,KAAA4E,EAAA5E,GAAA2E,EAAAvF,KAAAqE,KAAAzD,IAAA4E,EAAA5E,KAAkD,SAAA2E,GAAa,MAAA+Y,UAAA2zC,cAAA1sD,KAAiCumC,EAAA,KAAA3jC,EAAA,EAAAqoD,KAAAvoD,EAAArH,EAAA,EAAyB2E,GAAA3F,QAAA,SAAA2F,EAAAC,GAAwB,sBAAA0sD,eAAA,gBAAA5zC,UAAA,SAAA6hB,OAAA,+DAA+I36B,SAAOA,EAAAwrD,MAAA,gBAAAxrD,GAAAwrD,MAAAxrD,EAAAwrD,aAA4C,KAAAxrD,EAAA2rD,YAAA3rD,EAAA2rD,UAAAW,SAAA,KAAAtsD,EAAA+qD,aAAA/qD,EAAA+qD,WAAA,iBAAA/qD,EAAAirD,WAAAjrD,EAAAirD,SAAA,SAAiI,IAAA7vD,GAAAsF,EAAAX,EAAW,OAAAX,GAAAhE,EAAA4E,GAAA,SAAAD,GAA0B,OAAAjF,MAAAR,EAAA,EAAiBA,EAAAc,EAAA+E,OAAW7F,IAAA,CAAK,GAAAqB,GAAAP,EAAAd,GAAA2/B,EAAAwwB,EAAA9uD,EAAAmL,GAAqBmzB,GAAAywB,OAAA5vD,EAAAqI,KAAA82B,GAAmBl6B,GAAMX,EAAAsB,EAAAX,GAAAC,EAAU,QAAA1F,GAAA,EAAYA,EAAAQ,EAAAqF,OAAW7F,IAAA,CAAK,GAAA2/B,GAAAn/B,EAAAR,EAAW,QAAA2/B,EAAAywB,KAAA,CAAe,OAAAnwD,GAAA,EAAYA,EAAA0/B,EAAA0wB,MAAAxqD,OAAiB5F,IAAA0/B,EAAA0wB,MAAApwD,WAAiBkwD,GAAAxwB,EAAAnzB,OAAmB,IAAAolD,GAAA,WAAiB,GAAAnsD,KAAS,iBAAAC,EAAA5E,GAAqB,MAAA2E,GAAAC,GAAA5E,EAAA2E,EAAAwK,OAAAoiD,SAAA/1C,KAAA,WAA+C,SAAA7W,EAAAC,EAAA5E,IAAiB,SAAA4E,GAAa,GAAA5E,GAAA,mBAAAiV,eAAA,mBAAAu8C,oBAAAzD,eAAAyD,mBAAAzD,QAAwH/pD,EAAA,WAAc,GAAAW,GAAA,2BAAAC,EAAA,EAAAZ,EAAAhE,EAAAyxD,OAAgDC,OAAA1xD,EAAAyxD,OAAAzxD,EAAAyxD,MAAAC,OAAAC,MAAqCC,OAAA,SAAAjtD,GAAmB,MAAAA,aAAAW,GAAA,GAAAA,GAAAX,EAAAf,KAAAI,EAAA2tD,KAAAC,OAAAjtD,EAAAktD,SAAAltD,EAAAmtD,OAAA,UAAA9tD,EAAA2tD,KAAA/tD,KAAAe,KAAA0W,IAAArX,EAAA2tD,KAAAC,QAAAjtD,EAAAsX,QAAA,cAAwIA,QAAA,aAAqBA,QAAA,gBAA0BrY,KAAA,SAAAe,GAAkB,MAAAhF,QAAAS,UAAAwf,SAAAxgB,KAAAuF,GAAAotD,MAAA,wBAAsEC,MAAA,SAAArtD,GAAmB,MAAAA,GAAAstD,MAAAtyD,OAAAC,eAAA+E,EAAA,QAA+CnE,QAAAoE,IAAUD,EAAAstD,MAAS1f,MAAA,SAAA5tC,GAAmB,OAAAX,EAAA2tD,KAAA/tD,KAAAe,IAAuB,gBAAAC,KAAsB,QAAA5E,KAAA2E,KAAAtE,eAAAL,KAAA4E,EAAA5E,GAAAgE,EAAA2tD,KAAApf,MAAA5tC,EAAA3E,IAA8D,OAAA4E,EAAS,mBAAAD,GAAA0W,KAAA1W,EAAA0W,IAAA,SAAA1W,GAA4C,MAAAX,GAAA2tD,KAAApf,MAAA5tC,KAAyB,MAAAA,KAAUutD,WAAYC,OAAA,SAAAxtD,EAAAC,GAAqB,GAAA5E,GAAAgE,EAAA2tD,KAAApf,MAAAvuC,EAAAkuD,UAAAvtD,GAAmC,QAAAW,KAAAV,GAAA5E,EAAAsF,GAAAV,EAAAU,EAAyB,OAAAtF,IAAS+vD,aAAA,SAAAprD,EAAAC,EAAA5E,EAAAsF,GAAgCA,KAAAtB,EAAAkuD,SAAiB,IAAAxyD,GAAA4F,EAAAX,EAAW,OAAAU,UAAAN,OAAA,CAAwB/E,EAAAqF,UAAA,EAAe,QAAAnG,KAAAc,KAAAK,eAAAnB,KAAAQ,EAAAR,GAAAc,EAAAd,GAAgD,OAAAQ,GAAS,GAAAa,KAAS,QAAAs+B,KAAAn/B,GAAA,GAAAA,EAAAW,eAAAw+B,GAAA,CAAuC,GAAAA,GAAAj6B,EAAA,OAAA1F,KAAAc,KAAAK,eAAAnB,KAAAqB,EAAArB,GAAAc,EAAAd,GAAwDqB,GAAAs+B,GAAAn/B,EAAAm/B,GAAU,MAAA76B,GAAAkuD,UAAAE,IAAApuD,EAAAkuD,UAAA,SAAAttD,EAAA5E,GAAiDA,IAAAsF,EAAAX,IAAAC,GAAAD,IAAAlB,KAAAmB,GAAArE,KAA4B+E,EAAAX,GAAApE,GAAS6xD,IAAA,SAAAztD,EAAAC,EAAA5E,EAAAsF,GAAuBA,OAAQ,QAAA5F,KAAAiF,KAAAtE,eAAAX,KAAAkF,EAAAxF,KAAAuF,EAAAjF,EAAAiF,EAAAjF,GAAAM,GAAAN,GAAA,WAAAsE,EAAA2tD,KAAA/tD,KAAAe,EAAAjF,KAAA4F,EAAAtB,EAAA2tD,KAAAK,MAAArtD,EAAAjF,KAAA,UAAAsE,EAAA2tD,KAAA/tD,KAAAe,EAAAjF,KAAA4F,EAAAtB,EAAA2tD,KAAAK,MAAArtD,EAAAjF,OAAA4F,EAAAtB,EAAA2tD,KAAAK,MAAArtD,EAAAjF,MAAA,EAAAsE,EAAAkuD,UAAAE,IAAAztD,EAAAjF,GAAAkF,EAAAlF,EAAA4F,OAAAtB,EAAA2tD,KAAAK,MAAArtD,EAAAjF,MAAA,EAAAsE,EAAAkuD,UAAAE,IAAAztD,EAAAjF,GAAAkF,EAAA,KAAAU,OAAsR+sD,WAAWC,aAAA,SAAA3tD,EAAAC,GAA4B,GAAA5E,IAAOguB,SAAAppB,EAAA2tD,SAAA,mGAAwHvuD,GAAAwuD,MAAAC,IAAA,sBAAAzyD,EAAqC,QAAAsF,GAAA5F,EAAAM,EAAA0yD,UAAAh1C,SAAAi1C,iBAAA3yD,EAAAuyD,UAAArzD,EAAA,EAAkEoG,EAAA5F,EAAAR,MAAS8E,EAAA4uD,iBAAAttD,GAAA,IAAAX,EAAA3E,EAAAguB,WAAyC4kC,iBAAA,SAAAhuD,EAAAU,EAAA5F,GAAkC,OAAAR,GAAAqB,EAAAs+B,EAAAj6B,EAAgBi6B,IAAAl6B,EAAAuM,KAAA2tB,EAAAg0B,YAAwBh0B,IAAAoxB,UAAgBpxB,KAAA3/B,GAAA2/B,EAAAg0B,UAAAd,MAAAptD,KAAA,SAAAmuD,cAAAvyD,EAAAyD,EAAAkuD,UAAAhzD,IAAA0F,EAAAiuD,UAAAjuD,EAAAiuD,UAAA52C,QAAAtX,EAAA,IAAAsX,QAAA,yBAAA/c,EAAA2/B,EAAAj6B,EAAAqrD,WAAA,OAAA/+C,KAAA2tB,EAAApS,YAAAoS,EAAAg0B,UAAAh0B,EAAAg0B,UAAA52C,QAAAtX,EAAA,IAAAsX,QAAA,yBAAA/c,EAAmQ,IAAAC,GAAAyF,EAAAmuD,YAAAzzD,GAAuB8sB,QAAAxnB,EAAAouD,SAAA9zD,EAAA+zD,QAAA1yD,EAAA2yD,KAAA/zD,EAAuC,IAAA6E,EAAAwuD,MAAAC,IAAA,sBAAAnzD,MAAA4zD,OAAA5zD,EAAA2zD,QAAA,MAAA3zD,GAAA4zD,OAAA5zD,EAAA8sB,QAAA2mC,YAAAzzD,EAAA4zD,UAAAlvD,GAAAwuD,MAAAC,IAAA,WAAAnzD,EAAyI,IAAA0E,EAAAwuD,MAAAC,IAAA,mBAAAnzD,GAAAgG,GAAAtF,EAAAmzD,OAAA,CAAkD,GAAA9zD,GAAA,GAAA8zD,QAAAnvD,EAAAovD,SAA6B/zD,GAAAg0D,UAAA,SAAA1uD,GAAwBrF,EAAAg0D,gBAAA3uD,EAAAmM,KAAA9M,EAAAwuD,MAAAC,IAAA,gBAAAnzD,KAAA8sB,QAAAmnC,UAAAj0D,EAAAg0D,gBAAA5zD,KAAAN,KAAAE,EAAA8sB,SAAApoB,EAAAwuD,MAAAC,IAAA,kBAAAnzD,GAAA0E,EAAAwuD,MAAAC,IAAA,WAAAnzD,IAA8KD,EAAAm0D,YAAArE,KAAAC,WAA+B4D,SAAA1zD,EAAA0zD,SAAAE,KAAA5zD,EAAA4zD,KAAAO,gBAAA,SAAqDn0D,GAAAg0D,gBAAAtvD,EAAA0vD,UAAAp0D,EAAA4zD,KAAA5zD,EAAA2zD,QAAA3zD,EAAA0zD,UAAAhvD,EAAAwuD,MAAAC,IAAA,gBAAAnzD,KAAA8sB,QAAAmnC,UAAAj0D,EAAAg0D,gBAAA5zD,KAAAN,KAAAwF,GAAAZ,EAAAwuD,MAAAC,IAAA,kBAAAnzD,GAAA0E,EAAAwuD,MAAAC,IAAA,WAAAnzD,IAA6Mo0D,UAAA,SAAA/uD,EAAAC,EAAA5E,GAA2B,GAAAN,GAAAsE,EAAA2vD,SAAAhvD,EAAAC,EAAsB,OAAAU,GAAA8pD,UAAAprD,EAAA2tD,KAAAC,OAAAlyD,GAAAM,IAAuC2zD,SAAA,SAAAhvD,EAAAC,GAAwB,GAAA5E,GAAAgE,EAAA4vD,MAAAtuD,GAAAX,GAAAjF,EAAAkF,EAAAivD,IAA6B,IAAAn0D,EAAA,CAAM,OAAAR,KAAAQ,GAAAkF,EAAA1F,GAAAQ,EAAAR,SAAyB0F,GAAAivD,KAAclvD,EAAA,OAAAzF,KAAA0F,GAAA,GAAAA,EAAAvE,eAAAnB,IAAA0F,EAAA1F,GAAA,CAA+C,GAAAqB,GAAAqE,EAAA1F,EAAWqB,GAAA,UAAAyD,EAAA2tD,KAAA/tD,KAAArD,QAAiC,QAAAs+B,GAAA,EAAYA,EAAAt+B,EAAAwE,SAAW85B,EAAA,CAAK,GAAA1/B,GAAAoB,EAAAs+B,GAAAv/B,EAAAH,EAAA20D,OAAAz0D,IAAAF,EAAA40D,WAAAx0D,IAAAJ,EAAA60D,OAAA1zD,EAAA,EAAA+uD,EAAAlwD,EAAA2yD,KAAkE,IAAAvyD,IAAAJ,EAAA80D,QAAAC,OAAA,CAAyB,GAAAhD,GAAA/xD,EAAA80D,QAAAr0C,WAAAmyC,MAAA,cAAgD5yD,GAAA80D,QAAAE,OAAAh1D,EAAA80D,QAAAhqD,OAAAinD,EAAA,KAAyC/xD,IAAA80D,SAAA90D,CAAe,QAAAsI,GAAA,EAAAyjC,EAAA,EAAgBzjC,EAAAnC,EAAAP,OAAWmmC,GAAA5lC,EAAAmC,GAAA1C,SAAA0C,EAAA,CAAoB,GAAAF,GAAAjC,EAAAmC,EAAW,IAAAnC,EAAAP,OAAAJ,EAAAI,OAAA,KAAAJ,EAA6B,MAAA4C,YAAAvH,IAAA,CAAsBb,EAAAi1D,UAAA,CAAc,IAAAxE,GAAAzwD,EAAAk1D,KAAA9sD,GAAAF,EAAA,CAAoB,KAAAuoD,GAAArwD,GAAAkI,GAAAnC,EAAAP,OAAA,GAAyB,GAAA5F,EAAAi1D,UAAAlpB,IAAA0kB,EAAAzwD,EAAAk1D,KAAA1vD,IAAA,KAAsC,QAAAmsD,GAAAlB,EAAAp1C,OAAAnb,EAAAuwD,EAAA,GAAA7qD,OAAA,GAAAuvD,EAAA1E,EAAAp1C,MAAAo1C,EAAA,GAAA7qD,OAAAk+C,EAAAx7C,EAAAO,EAAAkjC,EAAAhnC,EAAAoB,EAAAP,OAA6Eb,EAAA++C,GAAAqR,EAAAtsD,IAASi7C,EAAAj7C,GAAA1C,EAAA29C,GAAAl+C,OAAA+rD,GAAA9oD,MAAAP,EAAAyjC,EAAAljC,EAAmC,IAAA1C,EAAAmC,YAAAzH,IAAAsF,EAAA29C,EAAA,GAAA+Q,OAAA,QAA4C3sD,GAAA47C,EAAAx7C,EAAAF,EAAA5C,EAAAqF,MAAAkhC,EAAAljC,GAAA4nD,EAAAp1C,OAAA0wB,EAAgC,GAAA0kB,EAAA,CAAMvwD,IAAAiB,EAAAsvD,EAAA,GAAA7qD,OAAmB,IAAA+rD,GAAAlB,EAAAp1C,MAAAla,EAAAsvD,IAAA,GAAA5lD,MAAA1J,GAAAg0D,EAAAxD,EAAAlB,EAAA7qD,OAAAwvD,EAAAhtD,EAAAyC,MAAA,EAAA8mD,GAAA0D,EAAAjtD,EAAAyC,MAAAsqD,GAAAG,GAAAhtD,EAAAJ,EAAiFktD,IAAAE,EAAA1sD,KAAAwsD,EAAa,IAAA7sD,GAAA,GAAA1H,GAAAd,EAAAI,EAAA0E,EAAA2vD,SAAA/D,EAAAtwD,GAAAswD,EAAAP,EAAAO,EAAArwD,EAAyCk1D,GAAA1sD,KAAAL,GAAA8sD,GAAAC,EAAA1sD,KAAAysD,GAAArxD,MAAA/C,UAAA+vD,OAAAlpD,MAAA3B,EAAAmvD,OAA6D,MAAAnvD,IAASktD,OAAQrB,OAAMj2B,IAAA,SAAAv2B,EAAAC,GAAmB,GAAA5E,GAAAgE,EAAAwuD,MAAArB,GAAkBnxD,GAAA2E,GAAA3E,EAAA2E,OAAA3E,EAAA2E,GAAAoD,KAAAnD,IAA2B6tD,IAAA,SAAA9tD,EAAAC,GAAmB,GAAA5E,GAAAgE,EAAAwuD,MAAArB,IAAAxsD,EAAqB,IAAA3E,KAAA+E,OAAA,OAAAO,GAAA5F,EAAA,EAA6B4F,EAAAtF,EAAAN,MAAS4F,EAAAV,MAAQU,EAAAtB,EAAA4vD,MAAA,SAAAjvD,EAAAC,EAAA5E,EAAAgE,EAAAsB,GAA+B7B,KAAAG,KAAAe,EAAAlB,KAAAouD,QAAAjtD,EAAAnB,KAAAquD,MAAA9xD,EAAAyD,KAAAsB,OAAA,GAAAf,GAAA,IAAAe,OAAAtB,KAAAuwD,SAAA1uD,EAAsF,IAAAA,EAAA8pD,UAAA,SAAAzqD,EAAAC,EAAA5E,GAA+B,mBAAA2E,GAAA,MAAAA,EAA+B,cAAAX,EAAA2tD,KAAA/tD,KAAAe,GAAA,MAAAA,GAAA0W,IAAA,SAAArb,GAAqD,MAAAsF,GAAA8pD,UAAApvD,EAAA4E,EAAAD,KAA0B6W,KAAA,GAAW,IAAA9b,IAAOkE,KAAAe,EAAAf,KAAAiuD,QAAAvsD,EAAA8pD,UAAAzqD,EAAAktD,QAAAjtD,EAAA5E,GAAA6qC,IAAA,OAAA6pB,SAAA,QAAA/vD,EAAAf,MAAAuI,cAAgG6mD,SAAApuD,EAAA+vD,OAAA30D,EAAsB,eAAAN,EAAAkE,OAAAlE,EAAAyM,WAAAyoD,WAAA,QAAAjwD,EAAAmtD,MAAA,CAAgE,GAAA5yD,GAAA,UAAA8E,EAAA2tD,KAAA/tD,KAAAe,EAAAmtD,OAAAntD,EAAAmtD,OAAAntD,EAAAmtD,MAAuD3uD,OAAA/C,UAAA2H,KAAAd,MAAAvH,EAAAg1D,QAAAx1D,GAAwC8E,EAAAwuD,MAAAC,IAAA,OAAA/yD,EAAsB,IAAAa,GAAAZ,OAAAuP,KAAAxP,EAAAyM,YAAAkP,IAAA,SAAA1W,GAAgD,MAAAA,GAAA,MAAAjF,EAAAyM,WAAAxH,IAAA,IAAAsX,QAAA,eAAwD,MAAOT,KAAA,IAAY,WAAA9b,EAAAmrC,IAAA,WAAAnrC,EAAAg1D,QAAAl5C,KAAA,UAAAjb,EAAA,IAAAA,EAAA,QAAAb,EAAAmyD,QAAA,KAAAnyD,EAAAmrC,IAAA,MAA6F7qC,EAAA0d,SAAA,MAAA1d,GAAAwuB,kBAAAxuB,EAAAwuB,iBAAA,mBAAA7pB,GAAiF,GAAAC,GAAAuqD,KAAA0F,MAAAlwD,EAAAmM,MAAAxL,EAAAV,EAAAouD,SAAAtzD,EAAAkF,EAAAsuD,KAAAh0D,EAAA0F,EAAA6uD,cAAkEzzD,GAAAwzD,YAAAxvD,EAAA0vD,UAAAh0D,EAAAsE,EAAAkuD,UAAA5sD,OAAApG,GAAAc,EAAA80D,UAA4D,GAAA90D,EAAAyxD,OAAAzxD,EAAAyxD,KAAsB,IAAA/xD,GAAAge,SAAAq3C,kBAAA/qD,MAAA5K,KAAAse,SAAAs3C,qBAAA,WAAAntD,KAA2F,OAAAnI,KAAAsE,EAAAovD,SAAA1zD,EAAA+K,KAAAiT,SAAA8Q,kBAAAxqB,EAAA0tD,QAAAhyD,EAAAu1D,aAAA,6BAAAv3C,SAAAw3C,WAAAjgD,OAAA4oC,sBAAA5oC,OAAA4oC,sBAAA75C,EAAAsuD,cAAAr9C,OAAAob,WAAArsB,EAAAsuD,aAAA,IAAA50C,SAAA8Q,iBAAA,mBAAAxqB,EAAAsuD,gBAAAtyD,EAAAyxD,aAA2T,KAAA9sD,KAAA3F,UAAA2F,EAAA3F,QAAAgF,OAAA,KAAAY,MAAA6sD,MAAAztD,KAAAkuD,UAAAiD,QAAiFC,QAAA,kBAAAC,OAAA,iBAAAC,QAAA,sBAAAC,MAAA,0BAAA1qB,KAAqHopB,QAAA,wGAAAH,QAAwHjpB,KAAKopB,QAAA,kBAAAH,QAAkC0B,YAAA,QAAAC,UAAA,iBAA8CC,cAAezB,QAAA,kCAAAH,QAAkD0B,YAAA,WAAsBA,YAAA,OAAAG,aAAiC1B,QAAA,YAAAH,QAA4B2B,UAAA,mBAA4BG,OAAA,qBAA4B5xD,EAAAwuD,MAAAt3B,IAAA,gBAAAv2B,GAAgC,WAAAA,EAAAf,OAAAe,EAAAwH,WAAA0pD,MAAAlxD,EAAAktD,QAAA51C,QAAA,QAA+D,QAAQjY,EAAAkuD,UAAA4D,IAAA9xD,EAAAkuD,UAAAiD,OAAAnxD,EAAAkuD,UAAA6D,KAAA/xD,EAAAkuD,UAAAiD,OAAAnxD,EAAAkuD,UAAA8D,OAAAhyD,EAAAkuD,UAAAiD,OAAAnxD,EAAAkuD,UAAA+D,IAAAjyD,EAAAkuD,UAAAiD,OAAAnxD,EAAAkuD,UAAA1C,KAAmK4F,QAAA,mBAAAc,QAAmCjC,QAAA,4BAA+BH,QAAaqC,KAAA,YAAgBroC,IAAA,+DAAAykC,SAAA,+BAAyG6D,QAAWnC,QAAA,8CAAAD,QAAA,GAAgE7zD,SAAA,yBAAAk2D,UAAA,kBAAAC,SAAA,oBAAAd,YAAA,YAAmHxxD,EAAAkuD,UAAA1C,IAAA0G,OAAApC,OAAAD,KAAA7vD,EAAA2tD,KAAApf,MAAAvuC,EAAAkuD,UAAA1C,KAAAxrD,EAAAkuD,UAAAiD,SAAAnxD,EAAAkuD,UAAAnC,aAAA,gBAAgIxC,OAAO0G,QAAA,0CAAAF,YAAA,EAAAD,OAAA9vD,EAAAkuD,UAAA1C,IAAAsC,MAAA,kBAA6G9tD,EAAAkuD,UAAAnC,aAAA,uBAAkDwG,cAActC,QAAA,uBAAAH,QAAuC6B,aAAa1B,QAAA,aAAAH,OAAA9vD,EAAAkuD,UAAAiD,OAAAtqB,IAAAipB,QAA0D0B,YAAA,wBAAAE,cAAmDzB,QAAA,MAAAH,OAAA9vD,EAAAkuD,UAAA1C,MAAsCsC,MAAA,iBAAuB9tD,EAAAkuD,UAAAiD,OAAAtqB,MAAA7mC,EAAAkuD,UAAAsE,OAA6CpB,UAAUnB,QAAA,4BAAAF,YAAA,IAAoDE,QAAA,mBAAAF,YAAA,IAAyCqC,QAAUnC,QAAA,+CAAAD,QAAA,GAAiEyC,cAAexC,QAAA,uGAAAF,YAAA,EAAAD,QAAqI0B,YAAA,YAAuBkB,QAAA,2GAAAC,QAAA,mBAAAL,SAAA,oBAAAM,OAAA,gDAAAC,SAAA,0DAAArB,YAAA,iBAAkUxxD,EAAAkuD,UAAA4E,WAAA9yD,EAAAkuD,UAAAC,OAAA,SAAoDuE,QAAA,4TAAAE,OAAA,+EAAAN,SAAA,wDAAAO,SAAA,qEAAuiB7yD,EAAAkuD,UAAAnC,aAAA,wBAAmDgH,OAAO9C,QAAA,iFAAmFF,YAAA,EAAAC,QAAA,KAA+BhwD,EAAAkuD,UAAAnC,aAAA,uBAAkDiH,mBAAmB/C,QAAA,wBAAAD,QAAA,EAAAF,QAAkDmD,eAAehD,QAAA,cAAoBH,QAAUoD,6BAA6BjD,QAAA,YAAiBnC,MAAA,eAAuB+B,KAAA7vD,EAAAkuD,UAAA4E,aAA8BV,OAAA,cAAoBpyD,EAAAkuD,UAAAiD,QAAAnxD,EAAAkuD,UAAAnC,aAAA,gBAA+D3rC,QAAQ6vC,QAAA,4CAAAF,YAAA,EAAAD,OAAA9vD,EAAAkuD,UAAA4E,WAAAhF,MAAA,yBAA6H9tD,EAAAkuD,UAAAiF,GAAAnzD,EAAAkuD,UAAA4E,WAAA9yD,EAAAkuD,UAAAkF,KAAApzD,EAAAkuD,UAAAC,OAAA,SAAqFiD,SAAA,mDAAAwB,OAAA,8DAAAF,QAAA,ghCAAupC1yD,EAAAkuD,UAAAnC,aAAA,kBAA6CsH,cAAcpD,QAAA,yGAAAF,YAAA,EAAAjC,MAAA,aAAgJntD,EAAA3F,QAAAgF,IAAc5E,KAAAwF,EAAA5E,EAAA,KAAe,SAAA2E,EAAAC,GAAe,GAAA5E,IAAM,SAAA2E,IAAa,SAAAA,GAAa,GAAAC,GAAA,WAAiB,QAAAD,KAAalB,KAAA6zD,aAAA7zD,KAAA8zD,SAAA,EAAkC,MAAA5yD,GAAAvE,UAAA86B,IAAA,SAAAv2B,EAAAC,GAAqC,MAAAnB,MAAA8zD,UAAA3yD,IAAAD,IAAAwQ,KAAAvQ,IAAAnB,KAAA6zD,UAAA7zD,KAAA8zD,SAAA5yD,EAAAlB,KAAA8zD,SAAmF5yD,EAAAvE,UAAAo3D,OAAA,SAAA7yD,SAAgClB,MAAA6zD,UAAA3yD,IAAyBA,EAAAvE,UAAAqqD,MAAA,WAA8BhnD,KAAA6zD,cAAkB3yD,EAAAvE,UAAAq3D,QAAA,SAAA9yD,GAAiC,OAAAC,KAAAnB,MAAA6zD,UAAA7zD,KAAA6zD,UAAAj3D,eAAAuE,IAAAnB,KAAA6zD,UAAA1yD,GAAAD,IAAmFA,IAAMA,GAAA+yD,MAAA9yD,GAAUD,EAAAgzD,QAAAhzD,EAAAgzD,YAAwB33D,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAA,GAAaA,IAAAizD,MAAA,WAAAjzD,IAAA8D,MAAA,WAAA9D,IAAAkzD,QAAA,aAAAlzD,IAAAob,KAAA,WAAsFpb,EAAAmzD,WAAAnzD,EAAAmzD,eAA8B93D,WAAS,SAAA2E,IAAe,SAAAC,GAAa,GAAA5E,GAAA,WAAiB,QAAA4E,UAAc,KAAAA,MAAAD,EAAAmzD,SAAAD,SAAAp0D,KAAAqjB,MAAAliB,EAAgD,MAAAA,GAAAxE,UAAA23D,SAAA,SAAApzD,GAAwClB,KAAAqjB,MAAAniB,GAAaC,EAAAxE,UAAAqI,MAAA,SAAA9D,GAA+B,OAAAC,MAAA5E,EAAA,EAAiBA,EAAAqF,UAAAN,OAAmB/E,IAAA4E,EAAA5E,EAAA,GAAAqF,UAAArF,EAAwByD,MAAAqjB,MAAA,GAAA5R,QAAAzM,MAAA9D,EAAAC,IAAiCA,EAAAxE,UAAAgV,KAAA,SAAAzQ,GAA8B,OAAAC,MAAA5E,EAAA,EAAiBA,EAAAqF,UAAAN,OAAmB/E,IAAA4E,EAAA5E,EAAA,GAAAqF,UAAArF,EAAwByD,MAAAqjB,MAAA,GAAA5R,QAAAE,KAAAzQ,EAAAC,IAAgCA,EAAAxE,UAAA2f,KAAA,SAAApb,GAA8B,OAAAC,MAAA5E,EAAA,EAAiBA,EAAAqF,UAAAN,OAAmB/E,IAAA4E,EAAA5E,EAAA,GAAAqF,UAAArF,EAAwByD,MAAAqjB,MAAA,GAAA5R,QAAA+5B,IAAAtqC,EAAAC,IAA+BA,IAAMA,GAAAozD,cAAAh4D,GAAkB2E,EAAAgzD,QAAAhzD,EAAAgzD,YAAwB33D,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAA,GAAa,GAAAC,GAAA,WAAiB,QAAAD,MAAc,MAAAA,GAAAvE,UAAA63D,cAAA,SAAAtzD,EAAAC,OAA+C,KAAAD,MAAA,YAAAC,MAAA,EAAoC,IAAA5E,KAAS,KAAI,SAAAu/B,OAAgB,MAAA56B,GAAS,GAAAA,EAAA0gC,MAAA,OAAArhC,GAAAW,EAAA0gC,MAAAjqB,MAAA,MAAA9V,EAAA,EAAA5F,EAAAsE,EAAAe,OAAwDO,EAAA5F,EAAI4F,IAAAtB,EAAAsB,GAAAysD,MAAA,2BAAA/xD,EAAA+H,KAAA/D,EAAAsB,IAAA,IAAAtB,EAAAsB,GAAAT,QAAA,aAAAb,EAAAsB,GAAAtB,EAAAsB,GAAA2W,QAAA,cAAAjc,EAAA+H,KAAA/D,EAAAsB,SAAmI,IAAAX,EAAAuzD,QAAA,OAAAl0D,GAAAW,EAAAuzD,QAAA98C,MAAA,MAAA9V,EAAA,EAAA5F,EAAAsE,EAAAe,OAAiEO,EAAA5F,EAAI4F,IAAA,GAAAtB,EAAAsB,GAAAysD,MAAA,4BAA8C,GAAA7yD,GAAA8E,EAAAsB,EAAWtB,GAAAsB,EAAA,KAAApG,GAAA,OAAA8E,EAAAsB,EAAA,GAAAA,KAAAtF,EAAA+H,KAAA7I,IAA0C,IAAAc,EAAA,OAAAO,GAAA8E,UAAA8yD,OAAAC,OAAwC73D,GAAE,CAAE,GAAAs+B,GAAAt+B,EAAAqf,WAAAzgB,EAAA0/B,EAAAw5B,UAAAx5B,EAAAh6B,QAAA,cAAAg6B,EAAAh6B,QAAA,iBAAqF7E,GAAA+H,KAAA5I,GAAAoB,IAAA63D,OAAqB,GAAAp4D,EAAA,CAAMA,EAAAkJ,OAAU,QAAA5D,GAAA,EAAYA,EAAAX,GAAA3E,EAAA+E,OAAA,EAAgBO,IAAAtF,EAAAkJ,OAAc,QAAA5D,GAAA,EAAYA,EAAAV,GAAA5E,EAAA+E,OAAA,EAAgBO,IAAAtF,EAAA6H,MAAY,MAAA7H,IAAS2E,IAAMA,GAAA2zD,WAAA1zD,GAAeD,EAAAgzD,QAAAhzD,EAAAgzD,YAAwB33D,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAA,GAAa,GAAAC,GAAA,WAAiB,QAAAD,KAAa,GAAAsQ,OAAA04C,aAAA14C,OAAA04C,YAAAE,IAAApqD,KAAA80D,YAAA90D,KAAA+0D,wBAAArjD,KAAA1R,UAAuG,CAAK,GAAAkB,GAAA,GAAAipD,KAAenqD,MAAA80D,YAAA5zD,EAAA8zD,QAAAtjD,KAAAxQ,IAAoC,MAAAA,GAAAvE,UAAAo4D,wBAAA,WAAsD,MAAA7K,aAAA+K,OAAAC,gBAAAhL,YAAAE,OAA4DluD,OAAAC,eAAA+E,EAAAvE,UAAA,OAA0CL,IAAA,WAAe,MAAA0D,MAAA80D,eAA0Bz4D,YAAA,EAAAD,cAAA,IAA+B8E,IAAOA,GAAAi0D,KAAAh0D,GAASD,EAAAgzD,QAAAhzD,EAAAgzD,YAAwB33D,UAAY,IAAAA,IAAM,SAAA2E,GAAa,QAAAC,GAAAD,EAAAC,GAAgB,GAAA5E,KAAS,QAAAgE,KAAAW,KAAAtE,eAAA2D,KAAAhE,EAAAgE,GAAAW,EAAAX,GAAgD,QAAAA,KAAAY,GAAA5E,EAAAK,eAAA2D,KAAAhE,EAAAgE,GAAAY,EAAAZ,GAAgD,OAAAhE,GAAS2E,EAAAk0D,MAAAj0D,GAAU5E,UAAY,IAAAA,IAAM,SAAA2E,GAAa,GAAAC,GAAA,WAAiB,QAAAA,MAAc,MAAAA,GAAAk0D,gBAAA,SAAAl0D,GAAqC,cAAAD,EAAAo0D,sBAAAn0D,QAAA,KAAAD,EAAAo0D,sBAAAn0D,IAA8EA,EAAAo0D,uBAAA,SAAAp0D,EAAA5E,GAAwC,OAAA4E,EAAA,CAAU,GAAAZ,GAAAP,KAAAw1D,qBAAAj5D,EAAmC,OAAAgE,IAAA,IAAc,OAAAY,EAAA,CAAU,GAAAZ,GAAAP,KAAAy1D,oBAAAl5D,EAAkC,OAAAgE,IAAA,IAAc,GAAAsB,GAAAX,EAAAo0D,sBAAAn0D,EAAiC,OAAAU,KAAA9F,KAAAoF,EAAA,IAAqBA,IAAMA,GAAAu0D,kBAAoB35D,KAAA,mBAAAgB,MAAA,IAAA44D,YAAA,sDAAmGx0D,EAAAy0D,oBAAuB75D,KAAA,qBAAAgB,MAAA,KAAA44D,YAAA,wDAAwGx0D,EAAA00D,kBAAqB95D,KAAA,mBAAAgB,MAAA,MAAA44D,YAAA,sDAAqGx0D,EAAA20D,QAAW/5D,KAAA,SAAAgB,MAAA,EAAA44D,YAAA,+DAAgGx0D,EAAA40D,OAAUh6D,KAAA,QAAAgB,MAAA,EAAA44D,YAAA,iGAAiIx0D,EAAA60D,WAAcj6D,KAAA,YAAAgB,MAAA,EAAA44D,YAAA,uHAA2Jx0D,EAAA80D,YAAel6D,KAAA,aAAAgB,MAAA,EAAA44D,YAAA,sHAA2Jx0D,EAAA2Q,WAAc/V,KAAA,YAAAgB,MAAA,EAAA44D,YAAA,mHAAuJx0D,EAAA+0D,gBAAmBn6D,KAAA,iBAAAgB,MAAA,EAAA44D,YAAA,gFAAyHx0D,EAAAg1D,cAAiBp6D,KAAA,eAAAgB,MAAA,EAAA44D,YAAA,sJAA6Lx0D,EAAAi1D,MAASr6D,KAAA,OAAAgB,MAAA,EAAA44D,YAAA,qEAAoGx0D,EAAAk1D,KAAQt6D,KAAA,MAAAgB,MAAA,EAAA44D,YAAA,oEAAkGx0D,EAAAm1D,WAAcv6D,KAAA,YAAAgB,MAAA,IAAA44D,YAAA,kGAAwIx0D,EAAAo1D,qBAAwBx6D,KAAA,sBAAAgB,MAAA,IAAA44D,YAAA,4GAA4Jx0D,EAAAklD,WAActqD,KAAA,YAAAgB,MAAA,IAAA44D,YAAA,2FAAiIx0D,EAAAmlD,qBAAwBvqD,KAAA,sBAAAgB,MAAA,IAAA44D,YAAA,qGAAqJx0D,EAAAq1D,WAAcz6D,KAAA,YAAAgB,MAAA,IAAA44D,YAAA,gGAAsIx0D,EAAAs1D,qBAAwB16D,KAAA,sBAAAgB,MAAA,IAAA44D,YAAA,0GAA0Jx0D,EAAAu1D,WAAc36D,KAAA,YAAAgB,MAAA,IAAA44D,YAAA,gGAAsIx0D,EAAAw1D,qBAAwB56D,KAAA,sBAAAgB,MAAA,IAAA44D,YAAA,0GAA0Jx0D,EAAAy1D,oBAAuB76D,KAAA,qBAAAgB,MAAA,IAAA44D,YAAA,2IAA0Lx0D,EAAA01D,gBAAmB96D,KAAA,iBAAAgB,MAAA,MAAA44D,YAAA,wFAAqIx0D,EAAA21D,0BAA6B/6D,KAAA,2BAAAgB,MAAA,MAAA44D,YAAA,kGAAyJx0D,EAAA41D,gBAAmBh7D,KAAA,iBAAAgB,MAAA,MAAA44D,YAAA,wFAAqIx0D,EAAA61D,0BAA6Bj7D,KAAA,2BAAAgB,MAAA,MAAA44D,YAAA,kGAAyJx0D,EAAA81D,UAAal7D,KAAA,WAAAgB,MAAA,MAAA44D,YAAA,uFAA8Hx0D,EAAA+1D,gBAAmBn7D,KAAA,iBAAAgB,MAAA,MAAA44D,YAAA,oHAAiKx0D,EAAAg2D,uBAA0Bp7D,KAAA,wBAAAgB,MAAA,MAAA44D,YAAA,4HAAgLx0D,EAAAi2D,gBAAmBr7D,KAAA,iBAAAgB,MAAA,MAAA44D,YAAA,iEAA8Gx0D,EAAAk2D,oBAAuBt7D,KAAA,qBAAAgB,MAAA,MAAA44D,YAAA,wFAAyIx0D,EAAAm2D,sBAAyBv7D,KAAA,uBAAAgB,MAAA,MAAA44D,YAAA,0FAA6Ix0D,EAAAo2D,eAAkBx7D,KAAA,gBAAAgB,MAAA,MAAA44D,YAAA,6EAAyHx0D,EAAAq2D,eAAkBz7D,KAAA,gBAAAgB,MAAA,MAAA44D,YAAA,6EAAyHx0D,EAAAs2D,iBAAoB17D,KAAA,kBAAAgB,MAAA,MAAA44D,YAAA,+EAA6Hx0D,EAAAu2D,iBAAoB37D,KAAA,kBAAAgB,MAAA,MAAA44D,YAAA,0EAAwHx0D,EAAAw2D,aAAgB57D,KAAA,cAAAgB,MAAA,MAAA44D,YAAA,+DAAyGx0D,EAAAy2D,sBAAyB77D,KAAA,uBAAAgB,MAAA,MAAA44D,YAAA,2DAA8Gx0D,EAAA02D,8BAAiC97D,KAAA,+BAAAgB,MAAA,MAAA44D,YAAA,mEAA8Hx0D,EAAA22D,YAAe/7D,KAAA,aAAAgB,MAAA,KAAA44D,YAAA,sFAA8Hx0D,EAAA42D,0BAA6Bh8D,KAAA,2BAAAgB,MAAA,MAAA44D,YAAA,kFAAyIx0D,EAAA62D,0BAA6Bj8D,KAAA,2BAAAgB,MAAA,MAAA44D,YAAA,4IAAmMx0D,EAAA82D,gBAAmBl8D,KAAA,iBAAAgB,MAAA,KAAA44D,YAAA,6GAAyJx0D,EAAA+2D,YAAen8D,KAAA,aAAAgB,MAAA,KAAA44D,YAAA,gGAAwIx0D,EAAAg3D,aAAgBp8D,KAAA,cAAAgB,MAAA,KAAA44D,YAAA,+FAAwIx0D,EAAAi3D,iBAAoBr8D,KAAA,kBAAAgB,MAAA,KAAA44D,YAAA,2EAAwHx0D,EAAAk3D,mBAAsBt8D,KAAA,oBAAAgB,MAAA,KAAA44D,YAAA,sEAAqHx0D,EAAAm3D,YAAev8D,KAAA,aAAAgB,MAAA,KAAA44D,YAAA,uIAA+Kx0D,EAAAo3D,qBAAwBx8D,KAAA,sBAAAgB,MAAA,KAAA44D,YAAA,2EAA4Hx0D,EAAAq3D,cAAiBz8D,KAAA,eAAAgB,MAAA,KAAA44D,YAAA,yIAAmLx0D,EAAAs3D,cAAiB18D,KAAA,eAAAgB,MAAA,KAAA44D,YAAA,8IAAwLx0D,EAAAu3D,yBAA4B38D,KAAA,0BAAAgB,MAAA,KAAA44D,YAAA,gLAAqOx0D,EAAAw3D,yBAA4B58D,KAAA,0BAAAgB,MAAA,KAAA44D,YAAA,gLAAqOx0D,EAAAy3D,aAAgB78D,KAAA,cAAAgB,MAAA,KAAA44D,YAAA,6EAAsHx0D,EAAA03D,oBAAuB98D,KAAA,qBAAAgB,MAAA,KAAA44D,YAAA,KAAqDx0D,EAAA23D,mBAAsB/8D,KAAA,oBAAAgB,MAAA,KAAA44D,YAAA,KAAoDx0D,EAAA43D,mBAAsBh9D,KAAA,oBAAAgB,MAAA,MAAA44D,YAAA,KAAqDx0D,EAAA63D,mBAAsBj9D,KAAA,oBAAAgB,MAAA,MAAA44D,YAAA,KAAqDx0D,EAAA83D,8BAAiCl9D,KAAA,+BAAAgB,MAAA,MAAA44D,YAAA,KAAgEx0D,EAAA+3D,8BAAiCn9D,KAAA,+BAAAgB,MAAA,MAAA44D,YAAA,KAAgEx0D,EAAAg4D,kBAAqBp9D,KAAA,mBAAAgB,MAAA,MAAA44D,YAAA,KAAoDx0D,EAAAi4D,yBAA4Br9D,KAAA,0BAAAgB,MAAA,MAAA44D,YAAA,KAA2Dx0D,EAAAk4D,wBAA2Bt9D,KAAA,yBAAAgB,MAAA,MAAA44D,YAAA,KAA0Dx0D,EAAAm4D,UAAav9D,KAAA,WAAAgB,MAAA,KAAA44D,YAAA,iFAAuHx0D,EAAAo4D,aAAgBx9D,KAAA,cAAAgB,MAAA,KAAA44D,YAAA,oFAA6Hx0D,EAAAq4D,mBAAsBz9D,KAAA,oBAAAgB,MAAA,KAAA44D,YAAA,KAAoDx0D,EAAAs4D,iBAAoB19D,KAAA,kBAAAgB,MAAA,KAAA44D,YAAA,KAAkDx0D,EAAA+qB,kBAAqBnwB,KAAA,mBAAAgB,MAAA,KAAA44D,YAAA,KAAmDx0D,EAAAu4D,gBAAmB39D,KAAA,iBAAAgB,MAAA,KAAA44D,YAAA,KAAiDx0D,EAAAw4D,kBAAqB59D,KAAA,mBAAAgB,MAAA,KAAA44D,YAAA,KAAmDx0D,EAAAy4D,mBAAsB79D,KAAA,oBAAAgB,MAAA,KAAA44D,YAAA,KAAoDx0D,EAAA04D,eAAkB99D,KAAA,gBAAAgB,MAAA,KAAA44D,YAAA,KAAgDx0D,EAAA24D,UAAa/9D,KAAA,WAAAgB,MAAA,KAAA44D,YAAA,KAA2Cx0D,EAAA44D,YAAeh+D,KAAA,aAAAgB,MAAA,KAAA44D,YAAA,KAA6Cx0D,EAAA64D,WAAcj+D,KAAA,YAAAgB,MAAA,KAAA44D,YAAA,KAA4Cx0D,EAAA84D,YAAel+D,KAAA,aAAAgB,MAAA,KAAA44D,YAAA,KAA6Cx0D,EAAA+4D,YAAen+D,KAAA,aAAAgB,MAAA,KAAA44D,YAAA,KAA6Cx0D,EAAAg5D,cAAiBp+D,KAAA,eAAAgB,MAAA,KAAA44D,YAAA,KAA+Cx0D,EAAAi5D,sBAAyBr+D,KAAA,uBAAAgB,MAAA,MAAA44D,YAAA,KAAwDx0D,EAAAk5D,uBAA0Bt+D,KAAA,wBAAAgB,MAAA,MAAA44D,YAAA,KAAyDx0D,EAAAm5D,oBAAuBv+D,KAAA,qBAAAgB,MAAA,MAAA44D,YAAA,KAAsDx0D,EAAAo5D,gBAAmBx+D,KAAA,iBAAAgB,MAAA,MAAA44D,YAAA,KAAkDx0D,EAAAq5D,SAAYz+D,KAAA,UAAAgB,MAAA,MAAA44D,YAAA,KAA2Cx0D,EAAAs5D,uBAA0B1+D,KAAA,wBAAAgB,MAAA,MAAA44D,YAAA,KAAyDx0D,EAAAu5D,wBAA2B3+D,KAAA,yBAAAgB,MAAA,MAAA44D,YAAA,KAA0Dx0D,EAAAw5D,4BAA+B5+D,KAAA,6BAAAgB,MAAA,MAAA44D,YAAA,KAA8Dx0D,EAAAy5D,QAAW7+D,KAAA,SAAAgB,MAAA,KAAA44D,YAAA,KAAyCx0D,EAAA05D,UAAa9+D,KAAA,WAAAgB,MAAA,KAAA44D,YAAA,KAA2Cx0D,EAAA25D,SAAY/+D,KAAA,UAAAgB,MAAA,KAAA44D,YAAA,KAA0Cx0D,EAAA45D,gCAAmCh/D,KAAA,iCAAAgB,MAAA,MAAA44D,YAAA,KAAkEx0D,EAAA65D,kCAAqCj/D,KAAA,mCAAAgB,MAAA,MAAA44D,YAAA,KAAoEx0D,EAAA85D,uBAA0Bl/D,KAAA,wBAAAgB,MAAA,MAAA44D,YAAA,KAAyDx0D,EAAAsL,aAAgB1Q,KAAA,cAAAgB,MAAA,MAAA44D,YAAA,6HAAuKx0D,EAAA+5D,aAAgBn/D,KAAA,cAAAgB,MAAA,MAAA44D,YAAA,4GAAsJx0D,EAAAqe,cAAiBzjB,KAAA,eAAAgB,MAAA,MAAA44D,YAAA,yHAAoKx0D,EAAA0L,cAAiB9Q,KAAA,eAAAgB,MAAA,MAAA44D,YAAA,gFAA2Hx0D,EAAAmP,sBAAyBvU,KAAA,uBAAAgB,MAAA,MAAA44D,YAAA,gFAAmIx0D,EAAA6O,aAAgBjU,KAAA,cAAAgB,MAAA,MAAA44D,YAAA,wDAAkGx0D,EAAAg6D,cAAiBp/D,KAAA,eAAAgB,MAAA,MAAA44D,YAAA,8FAAyIx0D,EAAAi6D,uBAA0Br/D,KAAA,wBAAAgB,MAAA,MAAA44D,YAAA,wEAA4Hx0D,EAAAk6D,6BAAgCt/D,KAAA,8BAAAgB,MAAA,MAAA44D,YAAA,KAA+Dx0D,EAAAm6D,0BAA6Bv/D,KAAA,2BAAAgB,MAAA,MAAA44D,YAAA,KAA4Dx0D,EAAAo6D,4BAA+Bx/D,KAAA,6BAAAgB,MAAA,MAAA44D,YAAA,KAA8Dx0D,EAAAq6D,0BAA6Bz/D,KAAA,2BAAAgB,MAAA,MAAA44D,YAAA,KAA4Dx0D,EAAAs6D,gCAAmC1/D,KAAA,iCAAAgB,MAAA,MAAA44D,YAAA,KAAkEx0D,EAAAu6D,6BAAgC3/D,KAAA,8BAAAgB,MAAA,MAAA44D,YAAA,KAA+Dx0D,EAAAw6D,oCAAuC5/D,KAAA,qCAAAgB,MAAA,MAAA44D,YAAA,KAAsEx0D,EAAAy6D,WAAc7/D,KAAA,YAAAgB,MAAA,KAAA44D,YAAA,2HAAkKx0D,EAAA06D,OAAU9/D,KAAA,QAAAgB,MAAA,KAAA44D,YAAA,wEAA2Gx0D,EAAA26D,MAAS//D,KAAA,OAAAgB,MAAA,KAAA44D,YAAA,uEAAyGx0D,EAAA46D,gBAAmBhgE,KAAA,iBAAAgB,MAAA,KAAA44D,YAAA,4EAAwHx0D,EAAAglD,OAAUpqD,KAAA,QAAAgB,MAAA,KAAA44D,YAAA,6HAAgKx0D,EAAA8kD,YAAelqD,KAAA,aAAAgB,MAAA,KAAA44D,YAAA,uHAA+Jx0D,EAAA66D,QAAWjgE,KAAA,SAAAgB,MAAA,KAAA44D,YAAA,+HAAmKx0D,EAAA86D,qBAAwBlgE,KAAA,sBAAAgB,MAAA,MAAA44D,YAAA,oNAAsQx0D,EAAA+6D,0BAA6BngE,KAAA,2BAAAgB,MAAA,MAAA44D,YAAA,yGAAgKx0D,EAAAg7D,iBAAoBpgE,KAAA,kBAAAgB,MAAA,MAAA44D,YAAA,wFAAsIx0D,EAAAi7D,cAAiBrgE,KAAA,eAAAgB,MAAA,KAAA44D,YAAA,2HAAqKx0D,EAAAk7D,cAAiBtgE,KAAA,eAAAgB,MAAA,KAAA44D,YAAA,2HAAqKx0D,EAAAm7D,UAAavgE,KAAA,WAAAgB,MAAA,EAAA44D,YAAA,2BAA8Dx0D,EAAAo7D,cAAiBxgE,KAAA,eAAAgB,MAAA,KAAA44D,YAAA,2BAAqEx0D,EAAAq7D,eAAkBzgE,KAAA,gBAAAgB,MAAA,KAAA44D,YAAA,2BAAsEx0D,EAAAs7D,mBAAsB1gE,KAAA,oBAAAgB,MAAA,KAAA44D,YAAA,2BAA0Ex0D,EAAAu7D,eAAkB3gE,KAAA,gBAAAgB,MAAA,KAAA44D,YAAA,2BAAsEx0D,EAAAw7D,oBAAuB5gE,KAAA,qBAAAgB,MAAA,MAAA44D,YAAA,2BAA4Ex0D,EAAAy7D,IAAO7gE,KAAA,KAAAgB,MAAA,KAAA44D,YAAA,kGAAkIx0D,EAAA07D,KAAQ9gE,KAAA,MAAAgB,MAAA,KAAA44D,YAAA,0GAA2Ix0D,EAAA27D,WAAc/gE,KAAA,YAAAgB,MAAA,KAAA44D,YAAA,6CAAoFx0D,EAAA47D,SAAYhhE,KAAA,UAAAgB,MAAA,KAAA44D,YAAA,+CAAoFx0D,EAAA67D,QAAWjhE,KAAA,SAAAgB,MAAA,KAAA44D,YAAA,kEAAsGx0D,EAAA87D,sBAAyBlhE,KAAA,uBAAAgB,MAAA,MAAA44D,YAAA,gHAAmKx0D,EAAAiO,MAASrT,KAAA,OAAAgB,MAAA,KAAA44D,YAAA,KAAuCx0D,EAAAkO,eAAkBtT,KAAA,gBAAAgB,MAAA,KAAA44D,YAAA,KAAgDx0D,EAAAmO,OAAUvT,KAAA,QAAAgB,MAAA,KAAA44D,YAAA,KAAwCx0D,EAAAoO,gBAAmBxT,KAAA,iBAAAgB,MAAA,KAAA44D,YAAA,KAAiDx0D,EAAAqO,KAAQzT,KAAA,MAAAgB,MAAA,KAAA44D,YAAA,KAAsCx0D,EAAAsO,cAAiB1T,KAAA,eAAAgB,MAAA,KAAA44D,YAAA,KAA+Cx0D,EAAAuO,OAAU3T,KAAA,QAAAgB,MAAA,KAAA44D,YAAA,KAAwCx0D,EAAA+7D,iBAAoBnhE,KAAA,kBAAAgB,MAAA,KAAA44D,YAAA,KAAkDx0D,EAAAisC,OAAUrxC,KAAA,QAAAgB,MAAA,KAAA44D,YAAA,KAAwCx0D,EAAA6rB,KAAQjxB,KAAA,MAAAgB,MAAA,KAAA44D,YAAA,KAAsCx0D,EAAAsmB,MAAS1rB,KAAA,OAAAgB,MAAA,KAAA44D,YAAA,KAAuCx0D,EAAAgsC,WAAcpxC,KAAA,YAAAgB,MAAA,KAAA44D,YAAA,KAA4Cx0D,EAAAg8D,iBAAoBphE,KAAA,kBAAAgB,MAAA,KAAA44D,YAAA,KAAkDx0D,EAAAi8D,wBAA2BrhE,KAAA,yBAAAgB,MAAA,MAAA44D,YAAA,KAA0Dx0D,EAAAk8D,wBAA2BthE,KAAA,yBAAAgB,MAAA,MAAA44D,YAAA,KAA0Dx0D,EAAAm8D,sBAAyBvhE,KAAA,uBAAAgB,MAAA,MAAA44D,YAAA,KAAwDx0D,EAAAqY,iBAAoBzd,KAAA,kBAAAgB,MAAA,MAAA44D,YAAA,uDAAqGx0D,EAAAsY,eAAkB1d,KAAA,gBAAAgB,MAAA,MAAA44D,YAAA,oDAAgGx0D,EAAAwX,gBAAmB5c,KAAA,iBAAAgB,MAAA,MAAA44D,YAAA,+KAA4Nx0D,EAAAo8D,eAAkBxhE,KAAA,gBAAAgB,MAAA,MAAA44D,YAAA,+HAA2Kx0D,EAAA2Z,aAAgB/e,KAAA,cAAAgB,MAAA,MAAA44D,YAAA,8LAAwOx0D,EAAAq8D,iBAAoBzhE,KAAA,kBAAAgB,MAAA,MAAA44D,YAAA,gIAA8Kx0D,EAAAs8D,kBAAqB1hE,KAAA,mBAAAgB,MAAA,MAAA44D,YAAA,iJAAgMx0D,EAAAgf,mBAAsBpkB,KAAA,oBAAAgB,MAAA,MAAA44D,YAAA,sFAAsIx0D,EAAA0a,iBAAoB9f,KAAA,kBAAAgB,MAAA,MAAA44D,YAAA,mFAAiIx0D,EAAAu8D,oBAAuB3hE,KAAA,qBAAAgB,MAAA,MAAA44D,YAAA,KAAsDx0D,EAAAw8D,4BAA+B5hE,KAAA,6BAAAgB,MAAA,MAAA44D,YAAA,KAA8Dx0D,EAAAy8D,qBAAwB7hE,KAAA,sBAAAgB,MAAA,MAAA44D,YAAA,KAAuDx0D,EAAA08D,kCAAqC9hE,KAAA,mCAAAgB,MAAA,MAAA44D,YAAA,KAAoEx0D,EAAA28D,gCAAmC/hE,KAAA,iCAAAgB,MAAA,MAAA44D,YAAA,KAAkEx0D,EAAA48D,yBAA4BhiE,KAAA,0BAAAgB,MAAA,MAAA44D,YAAA,yEAA+Hx0D,EAAA68D,8BAAiCjiE,KAAA,+BAAAgB,MAAA,MAAA44D,YAAA,KAAgEx0D,EAAA88D,aAAgBliE,KAAA,cAAAgB,MAAA,MAAA44D,YAAA,KAA+Cx0D,EAAA+8D,0BAA6BniE,KAAA,2BAAAgB,MAAA,MAAA44D,YAAA,KAA4Dx0D,EAAAg9D,iBAAoBpiE,KAAA,kBAAAgB,MAAA,MAAA44D,YAAA,KAAmDx0D,EAAAi9D,OAAUriE,KAAA,QAAAgB,MAAA,IAAA44D,YAAA,6HAA+Jx0D,EAAAk9D,QAAWtiE,KAAA,SAAAgB,MAAA,IAAA44D,YAAA,yJAA4Lx0D,EAAAm9D,MAASviE,KAAA,OAAAgB,MAAA,IAAA44D,YAAA,gJAAiLx0D,EAAAo9D,OAAUxiE,KAAA,QAAAgB,MAAA,IAAA44D,YAAA,gJAAkLx0D,EAAAq9D,QAAWziE,KAAA,SAAAgB,MAAA,IAAA44D,YAAA,4JAA+Lx0D,EAAAs9D,SAAY1iE,KAAA,UAAAgB,MAAA,IAAA44D,YAAA,mJAAuLx0D,EAAAu9D,QAAW3iE,KAAA,SAAAgB,MAAA,IAAA44D,YAAA,+JAAkMx0D,EAAAw9D,UAAa5iE,KAAA,WAAAgB,MAAA,IAAA44D,YAAA,mJAAwLx0D,EAAAy9D,MAAS7iE,KAAA,OAAAgB,MAAA,KAAA44D,YAAA,KAAuCx0D,EAAA09D,SAAY9iE,KAAA,UAAAgB,MAAA,KAAA44D,YAAA,KAA0Cx0D,EAAA29D,MAAS/iE,KAAA,OAAAgB,MAAA,KAAA44D,YAAA,KAAuCx0D,EAAA49D,MAAShjE,KAAA,OAAAgB,MAAA,KAAA44D,YAAA,KAAuCx0D,EAAA69D,QAAWjjE,KAAA,SAAAgB,MAAA,KAAA44D,YAAA,KAAyCx0D,EAAA89D,WAAcljE,KAAA,YAAAgB,MAAA,MAAA44D,YAAA,KAA6Cx0D,EAAA+9D,WAAcnjE,KAAA,YAAAgB,MAAA,MAAA44D,YAAA,KAA6Cx0D,EAAAymB,SAAY7rB,KAAA,UAAAgB,MAAA,KAAA44D,YAAA,KAA0Cx0D,EAAAshB,QAAW1mB,KAAA,SAAAgB,MAAA,KAAA44D,YAAA,KAAyCx0D,EAAAg+D,wBAA2BpjE,KAAA,yBAAAgB,MAAA,KAAA44D,YAAA,KAAyDx0D,EAAAi+D,uBAA0BrjE,KAAA,wBAAAgB,MAAA,KAAA44D,YAAA,KAAwDx0D,EAAAk+D,uBAA0BtjE,KAAA,wBAAAgB,MAAA,KAAA44D,YAAA,KAAwDx0D,EAAAm+D,sBAAyBvjE,KAAA,uBAAAgB,MAAA,KAAA44D,YAAA,KAAuDx0D,EAAA4kB,oBAAuBhqB,KAAA,qBAAAgB,MAAA,MAAA44D,YAAA,KAAsDx0D,EAAA2kB,oBAAuB/pB,KAAA,qBAAAgB,MAAA,MAAA44D,YAAA,KAAsDx0D,EAAA6kB,gBAAmBjqB,KAAA,iBAAAgB,MAAA,MAAA44D,YAAA,KAAkDx0D,EAAA8kB,gBAAmBlqB,KAAA,iBAAAgB,MAAA,MAAA44D,YAAA,KAAkDx0D,EAAAiiB,YAAernB,KAAA,aAAAgB,MAAA,KAAA44D,YAAA,KAA6Cx0D,EAAAo+D,SAAYxjE,KAAA,UAAAgB,MAAA,KAAA44D,YAAA,KAA0Cx0D,EAAA0jB,kBAAqB9oB,KAAA,mBAAAgB,MAAA,MAAA44D,YAAA,KAAoDx0D,EAAAq+D,0BAA6BzjE,KAAA,2BAAAgB,MAAA,MAAA44D,YAAA,KAA4Dx0D,EAAA4mB,6BAAgChsB,KAAA,8BAAAgB,MAAA,MAAA44D,YAAA,KAA+Dx0D,EAAA6mB,6BAAgCjsB,KAAA,8BAAAgB,MAAA,MAAA44D,YAAA,KAA+Dx0D,EAAA8mB,6BAAgClsB,KAAA,8BAAAgB,MAAA,MAAA44D,YAAA,KAA+Dx0D,EAAA+mB,6BAAgCnsB,KAAA,8BAAAgB,MAAA,MAAA44D,YAAA,KAA+Dx0D,EAAAgnB,6BAAgCpsB,KAAA,8BAAAgB,MAAA,MAAA44D,YAAA,KAA+Dx0D,EAAAinB,6BAAgCrsB,KAAA,8BAAAgB,MAAA,MAAA44D,YAAA,IAAgEx0D,GAAAs+D,2BAA6B1jE,KAAA,4BAAAgB,MAAA,MAAA44D,YAAA,KAA6Dx0D,EAAAuV,UAAa3a,KAAA,WAAAgB,MAAA,MAAA44D,YAAA,mBAA0Dx0D,EAAAu+D,UAAa3jE,KAAA,WAAAgB,MAAA,MAAA44D,YAAA,mBAA0Dx0D,EAAAw+D,UAAa5jE,KAAA,WAAAgB,MAAA,MAAA44D,YAAA,mBAA0Dx0D,EAAAy+D,UAAa7jE,KAAA,WAAAgB,MAAA,MAAA44D,YAAA,mBAA0Dx0D,EAAA0+D,UAAa9jE,KAAA,WAAAgB,MAAA,MAAA44D,YAAA,mBAA0Dx0D,EAAA2+D,UAAa/jE,KAAA,WAAAgB,MAAA,MAAA44D,YAAA,mBAA0Dx0D,EAAA4+D,UAAahkE,KAAA,WAAAgB,MAAA,MAAA44D,YAAA,mBAA0Dx0D,EAAA6+D,UAAajkE,KAAA,WAAAgB,MAAA,MAAA44D,YAAA,mBAA0Dx0D,EAAA8+D,UAAalkE,KAAA,WAAAgB,MAAA,MAAA44D,YAAA,mBAA0Dx0D,EAAA++D,UAAankE,KAAA,WAAAgB,MAAA,MAAA44D,YAAA,mBAA0Dx0D,EAAAg/D,WAAcpkE,KAAA,YAAAgB,MAAA,MAAA44D,YAAA,mBAA2Dx0D,EAAAi/D,WAAcrkE,KAAA,YAAAgB,MAAA,MAAA44D,YAAA,mBAA2Dx0D,EAAAk/D,WAActkE,KAAA,YAAAgB,MAAA,MAAA44D,YAAA,mBAA2Dx0D,EAAAm/D,WAAcvkE,KAAA,YAAAgB,MAAA,MAAA44D,YAAA,mBAA2Dx0D,EAAAo/D,WAAcxkE,KAAA,YAAAgB,MAAA,MAAA44D,YAAA,mBAA2Dx0D,EAAAq/D,WAAczkE,KAAA,YAAAgB,MAAA,MAAA44D,YAAA,mBAA2Dx0D,EAAAs/D,WAAc1kE,KAAA,YAAAgB,MAAA,KAAA44D,YAAA,mBAA0Dx0D,EAAAu/D,WAAc3kE,KAAA,YAAAgB,MAAA,MAAA44D,YAAA,mBAA2Dx0D,EAAAw/D,WAAc5kE,KAAA,YAAAgB,MAAA,MAAA44D,YAAA,mBAA2Dx0D,EAAAy/D,WAAc7kE,KAAA,YAAAgB,MAAA,MAAA44D,YAAA,mBAA2Dx0D,EAAA0/D,WAAc9kE,KAAA,YAAAgB,MAAA,MAAA44D,YAAA,mBAA2Dx0D,EAAA2/D,WAAc/kE,KAAA,YAAAgB,MAAA,MAAA44D,YAAA,mBAA2Dx0D,EAAA4/D,WAAchlE,KAAA,YAAAgB,MAAA,MAAA44D,YAAA,mBAA2Dx0D,EAAA6/D,WAAcjlE,KAAA,YAAAgB,MAAA,MAAA44D,YAAA,mBAA2Dx0D,EAAA8/D,WAAcllE,KAAA,YAAAgB,MAAA,MAAA44D,YAAA,mBAA2Dx0D,EAAA+/D,WAAcnlE,KAAA,YAAAgB,MAAA,MAAA44D,YAAA,mBAA2Dx0D,EAAAggE,WAAcplE,KAAA,YAAAgB,MAAA,MAAA44D,YAAA,mBAA2Dx0D,EAAAigE,WAAcrlE,KAAA,YAAAgB,MAAA,MAAA44D,YAAA,mBAA2Dx0D,EAAAkgE,WAActlE,KAAA,YAAAgB,MAAA,MAAA44D,YAAA,mBAA2Dx0D,EAAAmgE,WAAcvlE,KAAA,YAAAgB,MAAA,MAAA44D,YAAA,mBAA2Dx0D,EAAAogE,WAAcxlE,KAAA,YAAAgB,MAAA,MAAA44D,YAAA,mBAA2Dx0D,EAAAqgE,WAAczlE,KAAA,YAAAgB,MAAA,MAAA44D,YAAA,mBAA2Dx0D,EAAAsgE,gBAAmB1lE,KAAA,iBAAAgB,MAAA,MAAA44D,YAAA,oCAAiFx0D,EAAAugE,QAAW3lE,KAAA,SAAAgB,MAAA,MAAA44D,YAAA,KAA0Cx0D,EAAA0hB,eAAkB9mB,KAAA,gBAAAgB,MAAA,MAAA44D,YAAA,KAAiDx0D,EAAAwgE,iBAAoB5lE,KAAA,kBAAAgB,MAAA,MAAA44D,YAAA,KAAmDx0D,EAAAygE,YAAe7lE,KAAA,aAAAgB,MAAA,MAAA44D,YAAA,KAA8Cx0D,EAAA0gE,YAAe9lE,KAAA,aAAAgB,MAAA,MAAA44D,YAAA,KAA8Cx0D,EAAA2gE,YAAe/lE,KAAA,aAAAgB,MAAA,MAAA44D,YAAA,KAA8Cx0D,EAAA4gE,UAAahmE,KAAA,WAAAgB,MAAA,MAAA44D,YAAA,KAA4Cx0D,EAAA6gE,UAAajmE,KAAA,WAAAgB,MAAA,MAAA44D,YAAA,KAA4Cx0D,EAAA8gE,UAAalmE,KAAA,WAAAgB,MAAA,MAAA44D,YAAA,KAA4Cx0D,EAAA+gE,MAASnmE,KAAA,OAAAgB,MAAA,MAAA44D,YAAA,KAAwCx0D,EAAAghE,WAAcpmE,KAAA,YAAAgB,MAAA,MAAA44D,YAAA,KAA6Cx0D,EAAAihE,WAAcrmE,KAAA,YAAAgB,MAAA,MAAA44D,YAAA,KAA6Cx0D,EAAAkhE,WAActmE,KAAA,YAAAgB,MAAA,MAAA44D,YAAA,KAA6Cx0D,EAAAmhE,YAAevmE,KAAA,aAAAgB,MAAA,MAAA44D,YAAA,KAA8Cx0D,EAAAohE,YAAexmE,KAAA,aAAAgB,MAAA,MAAA44D,YAAA,KAA8Cx0D,EAAAqhE,YAAezmE,KAAA,aAAAgB,MAAA,MAAA44D,YAAA,KAA8Cx0D,EAAAshE,YAAe1mE,KAAA,aAAAgB,MAAA,MAAA44D,YAAA,KAA8Cx0D,EAAAuhE,cAAiB3mE,KAAA,eAAAgB,MAAA,MAAA44D,YAAA,KAAgDx0D,EAAAwhE,WAAc5mE,KAAA,YAAAgB,MAAA,MAAA44D,YAAA,KAA6Cx0D,EAAAyhE,cAAiB7mE,KAAA,eAAAgB,MAAA,MAAA44D,YAAA,KAAgDx0D,EAAA0hE,YAAe9mE,KAAA,aAAAgB,MAAA,MAAA44D,YAAA,KAA8Cx0D,EAAA2hE,SAAY/mE,KAAA,UAAAgB,MAAA,MAAA44D,YAAA,KAA2Cx0D,EAAA4hE,YAAehnE,KAAA,aAAAgB,MAAA,MAAA44D,YAAA,KAA8Cx0D,EAAA6hE,UAAajnE,KAAA,WAAAgB,MAAA,MAAA44D,YAAA,KAA4Cx0D,EAAAggB,aAAgBplB,KAAA,cAAAgB,MAAA,MAAA44D,YAAA,KAA+Cx0D,EAAAghB,cAAiBpmB,KAAA,eAAAgB,MAAA,MAAA44D,YAAA,KAAgDx0D,EAAA8hE,OAAUlnE,KAAA,QAAAgB,MAAA,MAAA44D,YAAA,KAAyCx0D,EAAA+hE,SAAYnnE,KAAA,UAAAgB,MAAA,MAAA44D,YAAA,KAA2Cx0D,EAAAgiE,QAAWpnE,KAAA,SAAAgB,MAAA,MAAA44D,YAAA,KAA0Cx0D,EAAAiiE,mBAAsBrnE,KAAA,oBAAAgB,MAAA,MAAA44D,YAAA,KAAqDx0D,EAAAkiE,eAAkBtnE,KAAA,gBAAAgB,MAAA,KAAA44D,YAAA,KAAgDx0D,EAAAmiE,gBAAmBvnE,KAAA,iBAAAgB,MAAA,MAAA44D,YAAA,KAAkDx0D,EAAAoiE,eAAkBxnE,KAAA,gBAAAgB,MAAA,MAAA44D,YAAA,KAAiDx0D,EAAAqiE,oBAAuBznE,KAAA,qBAAAgB,MAAA,MAAA44D,YAAA,KAAsDx0D,EAAAsiE,qBAAwB1nE,KAAA,sBAAAgB,MAAA,MAAA44D,YAAA,KAAuDx0D,EAAAuiE,8BAAiC3nE,KAAA,+BAAAgB,MAAA,MAAA44D,YAAA,KAAgEx0D,EAAAwiE,uBAA0B5nE,KAAA,wBAAAgB,MAAA,MAAA44D,YAAA,KAAyDx0D,EAAAyiE,yBAA4B7nE,KAAA,0BAAAgB,MAAA,MAAA44D,YAAA,KAA2Dx0D,EAAA0iE,wBAA2B9nE,KAAA,yBAAAgB,MAAA,MAAA44D,YAAA,KAA0Dx0D,EAAA2iE,yBAA4B/nE,KAAA,0BAAAgB,MAAA,MAAA44D,YAAA,KAA2Dx0D,EAAA4iE,yBAA4BhoE,KAAA,0BAAAgB,MAAA,MAAA44D,YAAA,KAA2Dx0D,EAAA6iE,2BAA8BjoE,KAAA,4BAAAgB,MAAA,MAAA44D,YAAA,KAA6Dx0D,EAAA8iE,oCAAuCloE,KAAA,qCAAAgB,MAAA,MAAA44D,YAAA,KAAsEx0D,EAAA+iE,oCAAuCnoE,KAAA,qCAAAgB,MAAA,MAAA44D,YAAA,KAAsEx0D,EAAAgjE,sCAAyCpoE,KAAA,uCAAAgB,MAAA,MAAA44D,YAAA,KAAwEx0D,EAAAijE,8CAAiDroE,KAAA,+CAAAgB,MAAA,MAAA44D,YAAA,KAAgFx0D,EAAA6gB,mBAAsBjmB,KAAA,oBAAAgB,MAAA,MAAA44D,YAAA,KAAqDx0D,EAAAkjE,kBAAqBtoE,KAAA,mBAAAgB,MAAA,MAAA44D,YAAA,KAAoDx0D,EAAAmjE,oBAAuBvoE,KAAA,qBAAAgB,MAAA,MAAA44D,YAAA,KAAsDx0D,EAAAojE,0BAA6BxoE,KAAA,2BAAAgB,MAAA,MAAA44D,YAAA,KAA4Dx0D,EAAAqjE,MAASzoE,KAAA,OAAAgB,MAAA,EAAA44D,YAAA,KAAoCx0D,EAAAsjE,sBAAyB1oE,KAAA,uBAAAgB,MAAA,MAAA44D,YAAA,KAAwDx0D,EAAAujE,mCAAsC3oE,KAAA,oCAAAgB,MAAA,MAAA44D,YAAA,KAAqEx0D,EAAAwjE,2CAA8C5oE,KAAA,4CAAAgB,MAAA,MAAA44D,YAAA,KAA6Ex0D,EAAAyjE,mCAAsC7oE,KAAA,oCAAAgB,MAAA,MAAA44D,YAAA,KAAqEx0D,EAAA0jE,yBAA4B9oE,KAAA,0BAAAgB,MAAA,MAAA44D,YAAA,KAA2Dx0D,EAAA2jE,qBAAwB/oE,KAAA,sBAAAgB,MAAA,MAAA44D,YAAA,KAAuDx0D,EAAA4jE,sBAAyBhpE,KAAA,uBAAAgB,MAAA,MAAA44D,YAAA,KAAwDx0D,EAAA6jE,uBAA0BjpE,KAAA,wBAAAgB,MAAA,MAAA44D,YAAA,KAAyDx0D,EAAA8jE,+BAAkClpE,KAAA,gCAAAgB,MAAA,KAAA44D,YAAA,KAAgEx0D,EAAAukB,qBAAwB3pB,KAAA,sBAAAgB,MAAA,MAAA44D,YAAA,KAAuDx0D,EAAAqkB,gCAAmCzpB,KAAA,iCAAAgB,MAAA,MAAA44D,YAAA,KAAkEx0D,EAAAkkB,oCAAuCtpB,KAAA,qCAAAgB,MAAA,MAAA44D,YAAA,KAAsEx0D,EAAA+jE,aAAgBnpE,KAAA,cAAAgB,MAAA,KAAA44D,YAAA,KAA8Cx0D,EAAAgkE,mBAAsBppE,KAAA,oBAAAgB,MAAA,KAAA44D,YAAA,KAAoDx0D,EAAAikE,kBAAqBrpE,KAAA,mBAAAgB,MAAA,KAAA44D,YAAA,KAAmDx0D,EAAAkkE,oBAAuBtpE,KAAA,qBAAAgB,MAAA,KAAA44D,YAAA,KAAqDx0D,EAAAmkE,iBAAoBvpE,KAAA,kBAAAgB,MAAA,KAAA44D,YAAA,KAAkDx0D,EAAAokE,gBAAmBxpE,KAAA,iBAAAgB,MAAA,KAAA44D,YAAA,KAAiDx0D,EAAAqkE,kBAAqBzpE,KAAA,mBAAAgB,MAAA,KAAA44D,YAAA,KAAmDx0D,EAAAskE,oBAAuB1pE,KAAA,qBAAAgB,MAAA,MAAA44D,YAAA,KAAsDx0D,EAAAukE,oBAAuB3pE,KAAA,qBAAAgB,MAAA,MAAA44D,YAAA,KAAsDx0D,EAAAwkE,qBAAwB5pE,KAAA,sBAAAgB,MAAA,MAAA44D,YAAA,KAAuDx0D,EAAAykE,qBAAwB7pE,KAAA,sBAAAgB,MAAA,MAAA44D,YAAA,KAAuDx0D,EAAA0kE,uBAA0B9pE,KAAA,wBAAAgB,MAAA,KAAA44D,YAAA,KAAwDx0D,EAAA2kE,sBAAyB/pE,KAAA,uBAAAgB,MAAA,MAAA44D,YAAA,KAAwDx0D,EAAA4kE,sBAAyBhqE,KAAA,uBAAAgB,MAAA,MAAA44D,YAAA,KAAwDx0D,EAAA6kE,iCAAoCjqE,KAAA,kCAAAgB,MAAA,MAAA44D,YAAA,KAAmEx0D,EAAA8kE,+BAAkClqE,KAAA,gCAAAgB,MAAA,MAAA44D,YAAA,KAAiEx0D,EAAA+kE,0BAA6BnqE,KAAA,2BAAAgB,MAAA,MAAA44D,YAAA,KAA4Dx0D,EAAAglE,0BAA6BpqE,KAAA,2BAAAgB,MAAA,MAAA44D,YAAA,KAA4Dx0D,EAAAilE,0BAA6BrqE,KAAA,2BAAAgB,MAAA,MAAA44D,YAAA,KAA4Dx0D,EAAAklE,wBAA2BtqE,KAAA,yBAAAgB,MAAA,MAAA44D,YAAA,KAA0Dx0D,EAAAmlE,iCAAoCvqE,KAAA,kCAAAgB,MAAA,MAAA44D,YAAA,KAAmEx0D,EAAAolE,oBAAuBxqE,KAAA,qBAAAgB,MAAA,MAAA44D,YAAA,KAAsDx0D,EAAAkJ,sBAAyBtO,KAAA,uBAAAgB,MAAA,MAAA44D,YAAA,KAAwDx0D,EAAAqlE,8BAAiCzqE,KAAA,+BAAAgB,MAAA,MAAA44D,YAAA,KAAgEx0D,EAAAslE,+BAAkC1qE,KAAA,gCAAAgB,MAAA,MAAA44D,YAAA,KAAiEx0D,EAAAulE,yBAA4B3qE,KAAA,0BAAAgB,MAAA,MAAA44D,YAAA,KAA2Dx0D,EAAAwlE,mBAAsB5qE,KAAA,oBAAAgB,MAAA,MAAA44D,YAAA,KAAqDx0D,EAAAylE,KAAQ7qE,KAAA,MAAAgB,MAAA,KAAA44D,YAAA,KAAsCx0D,EAAA0lE,MAAS9qE,KAAA,OAAAgB,MAAA,MAAA44D,YAAA,KAAwCx0D,EAAA2lE,OAAU/qE,KAAA,QAAAgB,MAAA,MAAA44D,YAAA,KAAyCx0D,EAAA4lE,UAAahrE,KAAA,WAAAgB,MAAA,MAAA44D,YAAA,KAA4Cx0D,EAAA+kB,YAAenqB,KAAA,aAAAgB,MAAA,MAAA44D,YAAA,KAA8Cx0D,EAAAilB,gBAAmBrqB,KAAA,iBAAAgB,MAAA,MAAA44D,YAAA,KAAkDx0D,EAAAolB,iBAAoBxqB,KAAA,kBAAAgB,MAAA,MAAA44D,YAAA,KAAmDx0D,EAAAslB,iBAAoB1qB,KAAA,kBAAAgB,MAAA,MAAA44D,YAAA,KAAmDx0D,EAAAwlB,oBAAuB5qB,KAAA,qBAAAgB,MAAA,MAAA44D,YAAA,KAAsDx0D,EAAA0lB,mBAAsB9qB,KAAA,oBAAAgB,MAAA,MAAA44D,YAAA,KAAqDx0D,EAAA6lE,sBAAyBjrE,KAAA,uBAAAgB,MAAA,MAAA44D,YAAA,KAAwDx0D,EAAA8lE,sBAAyBlrE,KAAA,uBAAAgB,MAAA,MAAA44D,YAAA,KAAwDx0D,EAAA+lE,MAASnrE,KAAA,OAAAgB,MAAA,MAAA44D,YAAA,KAAwCx0D,EAAAgmE,OAAUprE,KAAA,QAAAgB,MAAA,MAAA44D,YAAA,KAAyCx0D,EAAAimE,cAAiBrrE,KAAA,eAAAgB,MAAA,MAAA44D,YAAA,KAAgDx0D,EAAAkmE,wBAA2BtrE,KAAA,yBAAAgB,MAAA,MAAA44D,YAAA,KAA0Dx0D,EAAAmmE,SAAYvrE,KAAA,UAAAgB,MAAA,MAAA44D,YAAA,KAA2Cx0D,EAAAomE,QAAWxrE,KAAA,SAAAgB,MAAA,MAAA44D,YAAA,KAA0Cx0D,EAAAqmE,SAAYzrE,KAAA,UAAAgB,MAAA,MAAA44D,YAAA,KAA2Cx0D,EAAAsmE,QAAW1rE,KAAA,SAAAgB,MAAA,MAAA44D,YAAA,KAA0Cx0D,EAAA8pB,kBAAqBlvB,KAAA,mBAAAgB,MAAA,MAAA44D,YAAA,KAAoDx0D,EAAAumE,0BAA6B3rE,KAAA,2BAAAgB,MAAA,MAAA44D,YAAA,KAA4Dx0D,EAAAwmE,gBAAmB5rE,KAAA,iBAAAgB,MAAA,MAAA44D,YAAA,KAAkDx0D,EAAAymE,SAAY7rE,KAAA,UAAAgB,MAAA,MAAA44D,YAAA,KAA2Cx0D,EAAA0mE,UAAa9rE,KAAA,WAAAgB,MAAA,MAAA44D,YAAA,KAA4Cx0D,EAAA2mE,SAAY/rE,KAAA,UAAAgB,MAAA,MAAA44D,YAAA,KAA2Cx0D,EAAA4mE,UAAahsE,KAAA,WAAAgB,MAAA,MAAA44D,YAAA,KAA4Cx0D,EAAA6mE,SAAYjsE,KAAA,UAAAgB,MAAA,MAAA44D,YAAA,KAA2Cx0D,EAAA8mE,SAAYlsE,KAAA,UAAAgB,MAAA,MAAA44D,YAAA,KAA2Cx0D,EAAA+mE,QAAWnsE,KAAA,SAAAgB,MAAA,MAAA44D,YAAA,KAA0Cx0D,EAAAgnE,SAAYpsE,KAAA,UAAAgB,MAAA,MAAA44D,YAAA,KAA2Cx0D,EAAAinE,QAAWrsE,KAAA,SAAAgB,MAAA,MAAA44D,YAAA,KAA0Cx0D,EAAAknE,SAAYtsE,KAAA,UAAAgB,MAAA,MAAA44D,YAAA,KAA2Cx0D,EAAAmnE,QAAWvsE,KAAA,SAAAgB,MAAA,MAAA44D,YAAA,KAA0Cx0D,EAAAonE,QAAWxsE,KAAA,SAAAgB,MAAA,MAAA44D,YAAA,KAA0Cx0D,EAAAqnE,OAAUzsE,KAAA,QAAAgB,MAAA,MAAA44D,YAAA,KAAyCx0D,EAAAsnE,aAAgB1sE,KAAA,cAAAgB,MAAA,MAAA44D,YAAA,KAA+Cx0D,EAAAunE,aAAgB3sE,KAAA,cAAAgB,MAAA,MAAA44D,YAAA,KAA+Cx0D,EAAAwnE,cAAiB5sE,KAAA,eAAAgB,MAAA,MAAA44D,YAAA,KAAgDx0D,EAAAynE,IAAO7sE,KAAA,KAAAgB,MAAA,MAAA44D,YAAA,KAAsCx0D,EAAA0nE,KAAQ9sE,KAAA,MAAAgB,MAAA,MAAA44D,YAAA,KAAuCx0D,EAAA2nE,MAAS/sE,KAAA,OAAAgB,MAAA,MAAA44D,YAAA,KAAwCx0D,EAAA4nE,MAAShtE,KAAA,OAAAgB,MAAA,MAAA44D,YAAA,KAAwCx0D,EAAA6nE,OAAUjtE,KAAA,QAAAgB,MAAA,MAAA44D,YAAA,KAAyCx0D,EAAA8nE,OAAUltE,KAAA,QAAAgB,MAAA,MAAA44D,YAAA,KAAyCx0D,EAAA+nE,KAAQntE,KAAA,MAAAgB,MAAA,MAAA44D,YAAA,KAAuCx0D,EAAAgoE,MAASptE,KAAA,OAAAgB,MAAA,MAAA44D,YAAA,KAAwCx0D,EAAAioE,MAASrtE,KAAA,OAAAgB,MAAA,MAAA44D,YAAA,KAAwCx0D,EAAAkoE,OAAUttE,KAAA,QAAAgB,MAAA,MAAA44D,YAAA,KAAyCx0D,EAAAmoE,MAASvtE,KAAA,OAAAgB,MAAA,MAAA44D,YAAA,KAAwCx0D,EAAAooE,OAAUxtE,KAAA,QAAAgB,MAAA,MAAA44D,YAAA,KAAyCx0D,EAAAqoE,MAASztE,KAAA,OAAAgB,MAAA,MAAA44D,YAAA,KAAwCx0D,EAAAsoE,OAAU1tE,KAAA,QAAAgB,MAAA,MAAA44D,YAAA,KAAyCx0D,EAAAuoE,OAAU3tE,KAAA,QAAAgB,MAAA,MAAA44D,YAAA,KAAyCx0D,EAAAwoE,QAAW5tE,KAAA,SAAAgB,MAAA,MAAA44D,YAAA,KAA0Cx0D,EAAAyoE,OAAU7tE,KAAA,QAAAgB,MAAA,MAAA44D,YAAA,KAAyCx0D,EAAA0oE,QAAW9tE,KAAA,SAAAgB,MAAA,MAAA44D,YAAA,KAA0Cx0D,EAAA2oE,UAAa/tE,KAAA,WAAAgB,MAAA,MAAA44D,YAAA,KAA4Cx0D,EAAA4oE,WAAchuE,KAAA,YAAAgB,MAAA,MAAA44D,YAAA,KAA6Cx0D,EAAA6oE,YAAejuE,KAAA,aAAAgB,MAAA,MAAA44D,YAAA,KAA8Cx0D,EAAA8oE,aAAgBluE,KAAA,cAAAgB,MAAA,MAAA44D,YAAA,KAA+Cx0D,EAAA+oE,YAAenuE,KAAA,aAAAgB,MAAA,MAAA44D,YAAA,KAA8Cx0D,EAAAgpE,0BAA6BpuE,KAAA,2BAAAgB,MAAA,MAAA44D,YAAA,KAA4Dx0D,EAAAipE,0BAA6BruE,KAAA,2BAAAgB,MAAA,MAAA44D,YAAA,KAA4Dx0D,EAAAkpE,6BAAgCtuE,KAAA,8BAAAgB,MAAA,MAAA44D,YAAA,KAA+Dx0D,EAAAmpE,8BAAiCvuE,KAAA,+BAAAgB,MAAA,MAAA44D,YAAA,KAAgEx0D,EAAAopE,0BAA6BxuE,KAAA,2BAAAgB,MAAA,MAAA44D,YAAA,KAA4Dx0D,EAAAqpE,gCAAmCzuE,KAAA,iCAAAgB,MAAA,MAAA44D,YAAA,KAAkEx0D,EAAAspE,mBAAsB1uE,KAAA,oBAAAgB,MAAA,MAAA44D,YAAA,KAAqDx0D,EAAAupE,YAAe3uE,KAAA,aAAAgB,MAAA,KAAA44D,YAAA,KAA6Cx0D,EAAA8rB,IAAOlxB,KAAA,KAAAgB,MAAA,MAAA44D,YAAA,KAAsCx0D,EAAAwpE,YAAe5uE,KAAA,aAAAgB,MAAA,MAAA44D,YAAA,KAA8Cx0D,EAAAypE,oBAAuB7uE,KAAA,qBAAAgB,MAAA,MAAA44D,YAAA,KAAsDx0D,EAAA0pE,eAAkB9uE,KAAA,gBAAAgB,MAAA,MAAA44D,YAAA,KAAiDx0D,EAAA2pE,cAAiB/uE,KAAA,eAAAgB,MAAA,MAAA44D,YAAA,KAAgDx0D,EAAA4pE,wBAA2BhvE,KAAA,yBAAAgB,MAAA,MAAA44D,YAAA,IAA2Dx0D,GAAA6pE,oBAAsBjvE,KAAA,qBAAAgB,MAAA,MAAA44D,YAAA,KAAsDx0D,EAAA8pE,iCAAoClvE,KAAA,kCAAAgB,MAAA,MAAA44D,YAAA,KAAmEx0D,EAAA+pE,kBAAqBnvE,KAAA,mBAAAgB,MAAA,MAAA44D,YAAA,KAAoDx0D,EAAAgqE,cAAiBpvE,KAAA,eAAAgB,MAAA,MAAA44D,YAAA,KAAgDx0D,EAAAiqE,cAAiBrvE,KAAA,eAAAgB,MAAA,MAAA44D,YAAA,KAAgDx0D,EAAAkqE,cAAiBtvE,KAAA,eAAAgB,MAAA,MAAA44D,YAAA,KAAgDx0D,EAAAmqE,cAAiBvvE,KAAA,eAAAgB,MAAA,MAAA44D,YAAA,KAAgDx0D,EAAAoqE,cAAiBxvE,KAAA,eAAAgB,MAAA,MAAA44D,YAAA,KAAgDx0D,EAAAqqE,cAAiBzvE,KAAA,eAAAgB,MAAA,MAAA44D,YAAA,KAAgDx0D,EAAAsqE,cAAiB1vE,KAAA,eAAAgB,MAAA,MAAA44D,YAAA,KAAgDx0D,EAAAuqE,cAAiB3vE,KAAA,eAAAgB,MAAA,MAAA44D,YAAA,KAAgDx0D,EAAAwqE,cAAiB5vE,KAAA,eAAAgB,MAAA,MAAA44D,YAAA,KAAgDx0D,EAAAyqE,cAAiB7vE,KAAA,eAAAgB,MAAA,MAAA44D,YAAA,KAAgDx0D,EAAA0qE,eAAkB9vE,KAAA,gBAAAgB,MAAA,MAAA44D,YAAA,KAAiDx0D,EAAA2qE,eAAkB/vE,KAAA,gBAAAgB,MAAA,MAAA44D,YAAA,KAAiDx0D,EAAA4qE,eAAkBhwE,KAAA,gBAAAgB,MAAA,MAAA44D,YAAA,KAAiDx0D,EAAA6qE,eAAkBjwE,KAAA,gBAAAgB,MAAA,MAAA44D,YAAA,KAAiDx0D,EAAA8qE,eAAkBlwE,KAAA,gBAAAgB,MAAA,MAAA44D,YAAA,KAAiDx0D,EAAA+qE,eAAkBnwE,KAAA,gBAAAgB,MAAA,MAAA44D,YAAA,KAAiDx0D,EAAAgrE,uBAA0BpwE,KAAA,wBAAAgB,MAAA,MAAA44D,YAAA,KAAyDx0D,EAAAirE,mBAAsBrwE,KAAA,oBAAAgB,MAAA,MAAA44D,YAAA,KAAqDx0D,EAAAkrE,mBAAsBtwE,KAAA,oBAAAgB,MAAA,MAAA44D,YAAA,KAAqDx0D,EAAAmrE,mBAAsBvwE,KAAA,oBAAAgB,MAAA,MAAA44D,YAAA,KAAqDx0D,EAAAorE,mBAAsBxwE,KAAA,oBAAAgB,MAAA,MAAA44D,YAAA,KAAqDx0D,EAAAqrE,mBAAsBzwE,KAAA,oBAAAgB,MAAA,MAAA44D,YAAA,KAAqDx0D,EAAAsrE,mBAAsB1wE,KAAA,oBAAAgB,MAAA,MAAA44D,YAAA,KAAqDx0D,EAAAurE,mBAAsB3wE,KAAA,oBAAAgB,MAAA,MAAA44D,YAAA,KAAqDx0D,EAAAwrE,mBAAsB5wE,KAAA,oBAAAgB,MAAA,MAAA44D,YAAA,KAAqDx0D,EAAAyrE,mBAAsB7wE,KAAA,oBAAAgB,MAAA,MAAA44D,YAAA,KAAqDx0D,EAAA0rE,oBAAuB9wE,KAAA,qBAAAgB,MAAA,MAAA44D,YAAA,KAAsDx0D,EAAA2rE,oBAAuB/wE,KAAA,qBAAAgB,MAAA,MAAA44D,YAAA,KAAsDx0D,EAAA4rE,oBAAuBhxE,KAAA,qBAAAgB,MAAA,MAAA44D,YAAA,KAAsDx0D,EAAA6rE,oBAAuBjxE,KAAA,qBAAAgB,MAAA,MAAA44D,YAAA,KAAsDx0D,EAAA8rE,oBAAuBlxE,KAAA,qBAAAgB,MAAA,MAAA44D,YAAA,KAAsDx0D,EAAA+rE,oBAAuBnxE,KAAA,qBAAAgB,MAAA,MAAA44D,YAAA,KAAsDx0D,EAAAgsE,YAAepxE,KAAA,aAAAgB,MAAA,MAAA44D,YAAA,KAA8Cx0D,EAAAisE,mBAAsBrxE,KAAA,oBAAAgB,MAAA,MAAA44D,YAAA,KAAqDx0D,EAAAksE,kBAAqBtxE,KAAA,mBAAAgB,MAAA,MAAA44D,YAAA,KAAoDx0D,EAAAmsE,yBAA4BvxE,KAAA,0BAAAgB,MAAA,MAAA44D,YAAA,KAA2Dx0D,EAAAosE,qBAAwBxxE,KAAA,sBAAAgB,MAAA,MAAA44D,YAAA,KAAuDx0D,EAAAqsE,gBAAmBzxE,KAAA,iBAAAgB,MAAA,MAAA44D,YAAA,KAAkDx0D,EAAAssE,gBAAmB1xE,KAAA,iBAAAgB,MAAA,MAAA44D,YAAA,KAAkDx0D,EAAAusE,kBAAqB3xE,KAAA,mBAAAgB,MAAA,MAAA44D,YAAA,KAAoDx0D,EAAAwsE,sBAAyB5xE,KAAA,uBAAAgB,MAAA,MAAA44D,YAAA,KAAwDx0D,EAAAysE,yBAA4B7xE,KAAA,0BAAAgB,MAAA,MAAA44D,YAAA,KAA2Dx0D,EAAA0sE,yBAA4B9xE,KAAA,0BAAAgB,MAAA,MAAA44D,YAAA,KAA2Dx0D,EAAA2sE,2BAA8B/xE,KAAA,4BAAAgB,MAAA,MAAA44D,YAAA,KAA6Dx0D,EAAA4sE,+BAAkChyE,KAAA,gCAAAgB,MAAA,MAAA44D,YAAA,KAAiEx0D,EAAA6sE,aAAgBjyE,KAAA,cAAAgB,MAAA,MAAA44D,YAAA,KAA+Cx0D,EAAA8sE,iBAAoBlyE,KAAA,kBAAAgB,MAAA,MAAA44D,YAAA,KAAmDx0D,EAAA+sE,mBAAsBnyE,KAAA,oBAAAgB,MAAA,MAAA44D,YAAA,KAAqDx0D,EAAAgtE,qBAAwBpyE,KAAA,sBAAAgB,MAAA,MAAA44D,YAAA,KAAuDx0D,EAAAitE,2BAA8BryE,KAAA,4BAAAgB,MAAA,MAAA44D,YAAA,KAA6Dx0D,EAAAktE,6BAAgCtyE,KAAA,8BAAAgB,MAAA,MAAA44D,YAAA,KAA+Dx0D,EAAAmtE,kBAAqBvyE,KAAA,mBAAAgB,MAAA,MAAA44D,YAAA,KAAoDx0D,EAAAotE,mBAAsBxyE,KAAA,oBAAAgB,MAAA,MAAA44D,YAAA,KAAqDx0D,EAAAqtE,0BAA6BzyE,KAAA,2BAAAgB,MAAA,MAAA44D,YAAA,KAA4Dx0D,EAAAstE,2BAA8B1yE,KAAA,4BAAAgB,MAAA,MAAA44D,YAAA,KAA6Dx0D,EAAAutE,cAAiB3yE,KAAA,eAAAgB,MAAA,MAAA44D,YAAA,KAAgDx0D,EAAAwtE,cAAiB5yE,KAAA,eAAAgB,MAAA,MAAA44D,YAAA,KAAgDx0D,EAAAytE,cAAiB7yE,KAAA,eAAAgB,MAAA,MAAA44D,YAAA,KAAgDx0D,EAAA0tE,cAAiB9yE,KAAA,eAAAgB,MAAA,MAAA44D,YAAA,KAAgDx0D,EAAA2tE,cAAiB/yE,KAAA,eAAAgB,MAAA,MAAA44D,YAAA,KAAgDx0D,EAAA4tE,cAAiBhzE,KAAA,eAAAgB,MAAA,MAAA44D,YAAA,KAAgDx0D,EAAA6tE,mBAAsBjzE,KAAA,oBAAAgB,MAAA,MAAA44D,YAAA,KAAqDx0D,EAAA8tE,mBAAsBlzE,KAAA,oBAAAgB,MAAA,MAAA44D,YAAA,KAAqDx0D,EAAA+tE,mBAAsBnzE,KAAA,oBAAAgB,MAAA,MAAA44D,YAAA,KAAqDx0D,EAAAguE,qBAAwBpzE,KAAA,sBAAAgB,MAAA,MAAA44D,YAAA,KAAuDx0D,EAAAiuE,mBAAsBrzE,KAAA,oBAAAgB,MAAA,MAAA44D,YAAA,KAAqDx0D,EAAAkuE,6BAAgCtzE,KAAA,8BAAAgB,MAAA,MAAA44D,YAAA,KAA+Dx0D,EAAAmuE,6BAAgCvzE,KAAA,8BAAAgB,MAAA,MAAA44D,YAAA,KAA+Dx0D,EAAAouE,gCAAmCxzE,KAAA,iCAAAgB,MAAA,MAAA44D,YAAA,KAAkEx0D,EAAAquE,4CAA+CzzE,KAAA,6CAAAgB,MAAA,MAAA44D,YAAA,KAA8Ex0D,EAAAqb,6BAAgCzgB,KAAA,8BAAAgB,MAAA,MAAA44D,YAAA,KAA+Dx0D,EAAAsuE,iCAAoC1zE,KAAA,kCAAAgB,MAAA,MAAA44D,YAAA,KAAmEx0D,EAAAuuE,gCAAmC3zE,KAAA,iCAAAgB,MAAA,MAAA44D,YAAA,KAAkEx0D,EAAAwuE,uCAA0C5zE,KAAA,wCAAAgB,MAAA,MAAA44D,YAAA,KAAyEx0D,EAAAyuE,+CAAkD7zE,KAAA,gDAAAgB,MAAA,MAAA44D,YAAA,KAAiFx0D,EAAA0uE,yCAA4C9zE,KAAA,0CAAAgB,MAAA,MAAA44D,YAAA,KAA2Ex0D,EAAA2uE,qBAAwB/zE,KAAA,sBAAAgB,MAAA,MAAA44D,YAAA,KAAuDx0D,EAAAwZ,kBAAqB5e,KAAA,mBAAAgB,MAAA,MAAA44D,YAAA,KAAoDx0D,EAAA2b,2BAA8B/gB,KAAA,4BAAAgB,MAAA,MAAA44D,YAAA,KAA6Dx0D,EAAA4uE,mCAAsCh0E,KAAA,oCAAAgB,MAAA,MAAA44D,YAAA,KAAqEx0D,EAAAic,oBAAuBrhB,KAAA,qBAAAgB,MAAA,MAAA44D,YAAA,KAAsDx0D,EAAA6uE,2BAA8Bj0E,KAAA,4BAAAgB,MAAA,MAAA44D,YAAA,KAA6Dx0D,EAAA8uE,2BAA8Bl0E,KAAA,4BAAAgB,MAAA,MAAA44D,YAAA,KAA6Dx0D,EAAA+uE,4BAA+Bn0E,KAAA,6BAAAgB,MAAA,MAAA44D,YAAA,KAA8Dx0D,EAAAgvE,uCAA0Cp0E,KAAA,wCAAAgB,MAAA,MAAA44D,YAAA,KAAyEx0D,EAAAivE,uCAA0Cr0E,KAAA,wCAAAgB,MAAA,MAAA44D,YAAA,KAAyEx0D,EAAAkvE,iCAAoCt0E,KAAA,kCAAAgB,MAAA,MAAA44D,YAAA,KAAmEx0D,EAAAmvE,mCAAsCv0E,KAAA,oCAAAgB,MAAA,MAAA44D,YAAA,KAAqEx0D,EAAAovE,kCAAqCx0E,KAAA,mCAAAgB,MAAA,MAAA44D,YAAA,KAAoEx0D,EAAAqvE,mCAAsCz0E,KAAA,oCAAAgB,MAAA,MAAA44D,YAAA,KAAqEx0D,EAAAsvE,mCAAsC10E,KAAA,oCAAAgB,MAAA,MAAA44D,YAAA,KAAqEx0D,EAAAuvE,qCAAwC30E,KAAA,sCAAAgB,MAAA,MAAA44D,YAAA,KAAuEx0D,EAAAwvE,qBAAwB50E,KAAA,sBAAAgB,MAAA,MAAA44D,YAAA,KAAuDx0D,EAAAyvE,kBAAqB70E,KAAA,mBAAAgB,MAAA,MAAA44D,YAAA,KAAoDx0D,EAAA0vE,0BAA6B90E,KAAA,2BAAAgB,MAAA,MAAA44D,YAAA,KAA4Dx0D,EAAA2vE,kBAAqB/0E,KAAA,mBAAAgB,MAAA,MAAA44D,YAAA,KAAoDx0D,EAAA4vE,kBAAqBh1E,KAAA,mBAAAgB,MAAA,MAAA44D,YAAA,KAAoDx0D,EAAA6vE,0BAA6Bj1E,KAAA,2BAAAgB,MAAA,MAAA44D,YAAA,KAA4Dx0D,EAAA8vE,sBAAyBl1E,KAAA,uBAAAgB,MAAA,MAAA44D,YAAA,KAAwDx0D,EAAA+vE,sCAAyCn1E,KAAA,uCAAAgB,MAAA,MAAA44D,YAAA,KAAwEx0D,EAAAgwE,oCAAuCp1E,KAAA,qCAAAgB,MAAA,MAAA44D,YAAA,KAAsEx0D,EAAA0d,gBAAmB9iB,KAAA,iBAAAgB,MAAA,MAAA44D,YAAA,KAAkDx0D,EAAAiwE,wBAA2Br1E,KAAA,yBAAAgB,MAAA,MAAA44D,YAAA,KAA0Dx0D,EAAAkwE,sBAAyBt1E,KAAA,uBAAAgB,MAAA,MAAA44D,YAAA,KAAwDx0D,EAAAmwE,qBAAwBv1E,KAAA,sBAAAgB,MAAA,MAAA44D,YAAA,KAAuDx0D,EAAAowE,2BAA8Bx1E,KAAA,4BAAAgB,MAAA,MAAA44D,YAAA,KAA6Dx0D,EAAAqwE,6BAAgCz1E,KAAA,8BAAAgB,MAAA,MAAA44D,YAAA,KAA+Dx0D,EAAAswE,6BAAgC11E,KAAA,8BAAAgB,MAAA,MAAA44D,YAAA,KAA+Dx0D,EAAAuwE,6BAAgC31E,KAAA,8BAAAgB,MAAA,MAAA44D,YAAA,KAA+Dx0D,EAAAwwE,wBAA2B51E,KAAA,yBAAAgB,MAAA,MAAA44D,YAAA,KAA0Dx0D,EAAAywE,wCAA2C71E,KAAA,yCAAAgB,MAAA,MAAA44D,YAAA,KAA0Ex0D,EAAA0wE,0CAA6C91E,KAAA,2CAAAgB,MAAA,MAAA44D,YAAA,KAA4Ex0D,EAAA2wE,iCAAoC/1E,KAAA,kCAAAgB,MAAA,MAAA44D,YAAA,KAAmEx0D,EAAA0c,uBAA0B9hB,KAAA,wBAAAgB,MAAA,MAAA44D,YAAA,KAAyDx0D,EAAA4wE,cAAiBh2E,KAAA,eAAAgB,MAAA,MAAA44D,YAAA,KAAgDx0D,EAAA6wE,cAAiBj2E,KAAA,eAAAgB,MAAA,MAAA44D,YAAA,KAAgDx0D,EAAA8wE,qBAAwBl2E,KAAA,sBAAAgB,MAAA,MAAA44D,YAAA,KAAuDx0D,EAAA+wE,gBAAmBn2E,KAAA,iBAAAgB,MAAA,MAAA44D,YAAA,KAAkDx0D,EAAAgxE,sBAAyBp2E,KAAA,uBAAAgB,MAAA,MAAA44D,YAAA,KAAwDx0D,EAAAixE,uBAA0Br2E,KAAA,wBAAAgB,MAAA,MAAA44D,YAAA,KAAyDx0D,EAAAkxE,sBAAyBt2E,KAAA,uBAAAgB,MAAA,MAAA44D,YAAA,KAAwDx0D,EAAAmxE,uBAA0Bv2E,KAAA,wBAAAgB,MAAA,MAAA44D,YAAA,KAAyDx0D,EAAAkd,yBAA4BtiB,KAAA,0BAAAgB,MAAA,MAAA44D,YAAA,KAA2Dx0D,EAAAoxE,+BAAkCx2E,KAAA,gCAAAgB,MAAA,MAAA44D,YAAA,KAAiEx0D,EAAAmd,sCAAyCviB,KAAA,uCAAAgB,MAAA,MAAA44D,YAAA,KAAwEx0D,EAAA+c,2CAA8CniB,KAAA,4CAAAgB,MAAA,MAAA44D,YAAA,KAA6Ex0D,EAAAid,6CAAgDriB,KAAA,8CAAAgB,MAAA,MAAA44D,YAAA,KAA+Ex0D,EAAAqxE,aAAgBz2E,KAAA,cAAAgB,MAAA,MAAA44D,YAAA,KAA+Cx0D,EAAAsxE,gBAAmB12E,KAAA,iBAAAgB,MAAA,MAAA44D,YAAA,KAAkDx0D,EAAAuxE,aAAgB32E,KAAA,cAAAgB,MAAA,MAAA44D,YAAA,KAA+Cx0D,EAAAwxE,YAAe52E,KAAA,aAAAgB,MAAA,MAAA44D,YAAA,KAA8Cx0D,EAAAyxE,YAAe72E,KAAA,aAAAgB,MAAA,MAAA44D,YAAA,KAA8Cx0D,EAAA0xE,4BAA+B92E,KAAA,6BAAAgB,MAAA,MAAA44D,YAAA,KAA8Dx0D,EAAA2xE,YAAe/2E,KAAA,aAAAgB,MAAA,MAAA44D,YAAA,KAA8Cx0D,EAAA4xE,UAAah3E,KAAA,WAAAgB,MAAA,MAAA44D,YAAA,KAA4Cx0D,EAAA6xE,kBAAqBj3E,KAAA,mBAAAgB,MAAA,MAAA44D,YAAA,KAAoDx0D,EAAA8xE,iBAAoBl3E,KAAA,kBAAAgB,MAAA,MAAA44D,YAAA,KAAmDx0D,EAAA+xE,qBAAwBn3E,KAAA,sBAAAgB,MAAA,MAAA44D,YAAA,KAAuDx0D,EAAAgyE,aAAgBp3E,KAAA,cAAAgB,MAAA,MAAA44D,YAAA,KAA+Cx0D,EAAAiyE,yBAA4Br3E,KAAA,0BAAAgB,MAAA,EAAA44D,YAAA,KAAuDx0D,EAAAkyE,OAAUt3E,KAAA,QAAAgB,MAAA,KAAA44D,YAAA,KAAwCx0D,EAAAmyE,OAAUv3E,KAAA,QAAAgB,MAAA,KAAA44D,YAAA,KAAwCx0D,EAAAoyE,SAAYx3E,KAAA,UAAAgB,MAAA,KAAA44D,YAAA,KAA0Cx0D,EAAAqyE,KAAQz3E,KAAA,MAAAgB,MAAA,MAAA44D,YAAA,KAAuCx0D,EAAAsyE,KAAQ13E,KAAA,MAAAgB,MAAA,MAAA44D,YAAA,KAAuCx0D,EAAAuyE,mBAAsB33E,KAAA,oBAAAgB,MAAA,MAAA44D,YAAA,KAAqDx0D,EAAAwyE,aAAgB53E,KAAA,cAAAgB,MAAA,MAAA44D,YAAA,KAA+Cx0D,EAAAyyE,aAAgB73E,KAAA,cAAAgB,MAAA,MAAA44D,YAAA,KAA+Cx0D,EAAA0yE,aAAgB93E,KAAA,cAAAgB,MAAA,MAAA44D,YAAA,KAA+Cx0D,EAAA2yE,aAAgB/3E,KAAA,cAAAgB,MAAA,MAAA44D,YAAA,KAA+Cx0D,EAAA4yE,cAAiBh4E,KAAA,eAAAgB,MAAA,MAAA44D,YAAA,KAAgDx0D,EAAA6yE,cAAiBj4E,KAAA,eAAAgB,MAAA,MAAA44D,YAAA,KAAgDx0D,EAAA8yE,oBAAuBl4E,KAAA,qBAAAgB,MAAA,MAAA44D,YAAA,KAAsDx0D,EAAA+yE,mBAAsBn4E,KAAA,oBAAAgB,MAAA,MAAA44D,YAAA,KAAqDx0D,EAAAgzE,eAAkBp4E,KAAA,gBAAAgB,MAAA,WAAA44D,YAAA,KAAsDx0D,EAAAizE,iBAAoBr4E,KAAA,kBAAAgB,OAAA,EAAA44D,YAAA,KAAgDx0D,EAAAkzE,+BAAkCt4E,KAAA,gCAAAgB,MAAA,MAAA44D,YAAA,KAAiEx0D,EAAAmzE,mCAAsCv4E,KAAA,oCAAAgB,MAAA,MAAA44D,YAAA,gEAAA4e,cAAA,0BAAwKpzE,EAAAqzE,uBAA0Bz4E,KAAA,wBAAAgB,MAAA,MAAA44D,YAAA,0EAAA4e,cAAA,0BAAsKpzE,EAAAszE,yBAA4B14E,KAAA,0BAAAgB,MAAA,MAAA44D,YAAA,4EAAA4e,cAAA,6BAA6KpzE,EAAAuzE,gCAAmC34E,KAAA,iCAAAgB,MAAA,MAAA44D,YAAA,4CAAA4e,cAAA,kCAAyJpzE,EAAAwzE,4BAA+B54E,KAAA,6BAAAgB,MAAA,MAAA44D,YAAA,8EAAA4e,cAAA,kCAAuLpzE,EAAAyzE,8BAAiC74E,KAAA,+BAAAgB,MAAA,MAAA44D,YAAA,kDAAA4e,cAAA,iCAA4JpzE,EAAA0zE,+BAAkC94E,KAAA,gCAAAgB,MAAA,MAAA44D,YAAA,mFAAA4e,cAAA,iCAA8LpzE,EAAA2zE,+BAAkC/4E,KAAA,gCAAAgB,MAAA,MAAA44D,YAAA,iHAAA4e,cAAA,iCAA4NpzE,EAAA4zE,+BAAkCh5E,KAAA,gCAAAgB,MAAA,MAAA44D,YAAA,iKAAA4e,cAAA,iCAA4QpzE,EAAA6zE,oBAAuBj5E,KAAA,qBAAAgB,MAAA,MAAA44D,YAAA,iDAAA4e,cAAA,gCAAgJpzE,EAAA8zE,2BAA8Bl5E,KAAA,4BAAAgB,MAAA,MAAA44D,YAAA,+CAAA4e,cAAA,gCAAqJpzE,EAAA+zE,qBAAwBn5E,KAAA,sBAAAgB,MAAA,MAAA44D,YAAA,2DAAA4e,cAAA,gCAA2JpzE,EAAAg0E,4BAA+Bp5E,KAAA,6BAAAgB,MAAA,MAAA44D,YAAA,yDAAA4e,cAAA,gCAAgKpzE,EAAAi0E,sBAAyBr5E,KAAA,uBAAAgB,MAAA,MAAA44D,YAAA,8CAAA4e,cAAA,gCAA+IpzE,EAAAk0E,2BAA8Bt5E,KAAA,4BAAAgB,MAAA,MAAA44D,YAAA,iHAAA4e,cAAA,gCAAuNpzE,EAAAm0E,uBAA0Bv5E,KAAA,wBAAAgB,MAAA,MAAA44D,YAAA,+CAAA4e,cAAA,gCAAiJpzE,EAAAo0E,kCAAqCx5E,KAAA,mCAAAgB,MAAA,MAAA44D,YAAA,oHAAA4e,cAAA,gCAAiOpzE,EAAAq0E,0CAA6Cz5E,KAAA,2CAAAgB,MAAA,MAAA44D,YAAA,qIAAA4e,cAAA,gCAA0PpzE,EAAAs0E,2CAA8C15E,KAAA,4CAAAgB,MAAA,MAAA44D,YAAA,sIAAA4e,cAAA,gCAA4PpzE,EAAAu0E,iCAAoC35E,KAAA,kCAAAgB,MAAA,MAAA44D,YAAA,gEAAA4e,cAAA,kCAA8KpzE,EAAAw0E,kCAAqC55E,KAAA,mCAAAgB,MAAA,MAAA44D,YAAA,iEAAA4e,cAAA,kCAAgLpzE,EAAAy0E,iCAAoC75E,KAAA,kCAAAgB,MAAA,MAAA44D,YAAA,gEAAA4e,cAAA,kCAA8KpzE,EAAA00E,kCAAqC95E,KAAA,mCAAAgB,MAAA,MAAA44D,YAAA,8DAAA4e,cAAA,kCAA6KpzE,EAAA20E,2BAA8B/5E,KAAA,4BAAAgB,MAAA,MAAA44D,YAAA,oDAAA4e,cAAA,iCAA2JpzE,EAAA40E,0BAA6Bh6E,KAAA,2BAAAgB,MAAA,MAAA44D,YAAA,iDAAA4e,cAAA,gCAAsJpzE,EAAA60E,0CAA6Cj6E,KAAA,2CAAAgB,MAAA,MAAA44D,YAAA,oGAAA4e,cAAA,gCAAyNpzE,EAAA80E,8CAAiDl6E,KAAA,+CAAAgB,MAAA,MAAA44D,YAAA,2GAAA4e,cAAA,gCAAoOpzE,EAAA+0E,yBAA4Bn6E,KAAA,0BAAAgB,MAAA,MAAA44D,YAAA,uDAAA4e,cAAA,uBAAkJpzE,EAAAg1E,gBAAmBp6E,KAAA,iBAAAgB,MAAA,MAAA44D,YAAA,qCAAA4e,cAAA,0BAA0HpzE,EAAAi1E,2CAA8Cr6E,KAAA,4CAAAgB,MAAA,MAAA44D,YAAA,IAAA4e,cAAA,4BAAsHpzE,EAAAk1E,yBAA4Bt6E,KAAA,0BAAAgB,MAAA,MAAA44D,YAAA,IAAA4e,cAAA,4BAAoGpzE,EAAAm1E,SAAYv6E,KAAA,UAAAgB,MAAA,MAAA44D,YAAA,8EAAA4e,cAAA,oBAAsJpzE,EAAAo1E,SAAYx6E,KAAA,UAAAgB,MAAA,MAAA44D,YAAA,8EAAA4e,cAAA,oBAAsJpzE,EAAAq1E,UAAaz6E,KAAA,WAAAgB,MAAA,MAAA44D,YAAA,kEAAA4e,cAAA,YAAmIpzE,EAAAs1E,gBAAmB16E,KAAA,iBAAAgB,MAAA,MAAA44D,YAAA,oDAAA4e,cAAA,YAA2HpzE,EAAAu1E,kBAAqB36E,KAAA,mBAAAgB,MAAA,MAAA44D,YAAA,wCAAA4e,cAAA,YAAiHpzE,EAAAw1E,2CAA8C56E,KAAA,4CAAAgB,MAAA,MAAA44D,YAAA,0CAAA4e,cAAA,YAA4IpzE,EAAAy1E,qCAAwC76E,KAAA,sCAAAgB,MAAA,MAAA44D,YAAA,gHAAA4e,cAAA,4BAA4NpzE,EAAA01E,yBAA4B96E,KAAA,0BAAAgB,MAAA,MAAA44D,YAAA,qCAAA4e,cAAA,sBAA+HpzE,EAAA21E,yBAA4B/6E,KAAA,0BAAAgB,MAAA,MAAA44D,YAAA,qCAAA4e,cAAA,qBAAgIpzE,GAAA41E,yBAA2Bh7E,KAAA,0BAAAgB,MAAA,MAAA44D,YAAA,qCAAA4e,cAAA,sBAA+HpzE,EAAA61E,yBAA4Bj7E,KAAA,0BAAAgB,MAAA,MAAA44D,YAAA,qCAAA4e,cAAA,sBAA+HpzE,EAAA81E,yBAA4Bl7E,KAAA,0BAAAgB,MAAA,MAAA44D,YAAA,qCAAA4e,cAAA,sBAA+HpzE,EAAA+1E,yBAA4Bn7E,KAAA,0BAAAgB,MAAA,MAAA44D,YAAA,qCAAA4e,cAAA,sBAA+HpzE,EAAAg2E,yBAA4Bp7E,KAAA,0BAAAgB,MAAA,MAAA44D,YAAA,qCAAA4e,cAAA,sBAA+HpzE,EAAAi2E,yBAA4Br7E,KAAA,0BAAAgB,MAAA,MAAA44D,YAAA,qCAAA4e,cAAA,sBAA+HpzE,EAAAk2E,yBAA4Bt7E,KAAA,0BAAAgB,MAAA,MAAA44D,YAAA,qCAAA4e,cAAA,sBAA+HpzE,EAAAm2E,yBAA4Bv7E,KAAA,0BAAAgB,MAAA,MAAA44D,YAAA,qCAAA4e,cAAA,sBAA+HpzE,EAAAo2E,0BAA6Bx7E,KAAA,2BAAAgB,MAAA,MAAA44D,YAAA,qCAAA4e,cAAA,sBAAgIpzE,EAAAq2E,0BAA6Bz7E,KAAA,2BAAAgB,MAAA,MAAA44D,YAAA,qCAAA4e,cAAA,sBAAgIpzE,EAAAs2E,0BAA6B17E,KAAA,2BAAAgB,MAAA,MAAA44D,YAAA,qCAAA4e,cAAA,sBAAgIpzE,EAAAu2E,0BAA6B37E,KAAA,2BAAAgB,MAAA,MAAA44D,YAAA,qCAAA4e,cAAA,sBAAgIpzE,EAAAw2E,0BAA6B57E,KAAA,2BAAAgB,MAAA,MAAA44D,YAAA,qCAAA4e,cAAA,sBAAgIpzE,EAAAy2E,0BAA6B77E,KAAA,2BAAAgB,MAAA,MAAA44D,YAAA,qCAAA4e,cAAA,sBAAgIpzE,EAAA02E,oBAAuB97E,KAAA,qBAAAgB,MAAA,MAAA44D,YAAA,cAAA4e,cAAA,sBAAmGpzE,EAAA22E,oBAAuB/7E,KAAA,qBAAAgB,MAAA,MAAA44D,YAAA,cAAA4e,cAAA,sBAAmGpzE,EAAA42E,oBAAuBh8E,KAAA,qBAAAgB,MAAA,MAAA44D,YAAA,cAAA4e,cAAA,sBAAmGpzE,EAAA62E,oBAAuBj8E,KAAA,qBAAAgB,MAAA,MAAA44D,YAAA,cAAA4e,cAAA,sBAAmGpzE,EAAA82E,oBAAuBl8E,KAAA,qBAAAgB,MAAA,MAAA44D,YAAA,cAAA4e,cAAA,sBAAmGpzE,EAAA+2E,oBAAuBn8E,KAAA,qBAAAgB,MAAA,MAAA44D,YAAA,cAAA4e,cAAA,sBAAmGpzE,EAAAg3E,oBAAuBp8E,KAAA,qBAAAgB,MAAA,MAAA44D,YAAA,cAAA4e,cAAA,sBAAmGpzE,EAAAi3E,oBAAuBr8E,KAAA,qBAAAgB,MAAA,MAAA44D,YAAA,cAAA4e,cAAA,sBAAmGpzE,EAAAk3E,oBAAuBt8E,KAAA,qBAAAgB,MAAA,MAAA44D,YAAA,cAAA4e,cAAA,sBAAmGpzE,EAAAm3E,oBAAuBv8E,KAAA,qBAAAgB,MAAA,MAAA44D,YAAA,cAAA4e,cAAA,sBAAmGpzE,EAAAo3E,qBAAwBx8E,KAAA,sBAAAgB,MAAA,MAAA44D,YAAA,cAAA4e,cAAA,sBAAoGpzE,EAAAq3E,qBAAwBz8E,KAAA,sBAAAgB,MAAA,MAAA44D,YAAA,cAAA4e,cAAA,sBAAoGpzE,EAAAs3E,qBAAwB18E,KAAA,sBAAAgB,MAAA,MAAA44D,YAAA,cAAA4e,cAAA,sBAAoGpzE,EAAAu3E,qBAAwB38E,KAAA,sBAAAgB,MAAA,MAAA44D,YAAA,cAAA4e,cAAA,sBAAoGpzE,EAAAw3E,qBAAwB58E,KAAA,sBAAAgB,MAAA,MAAA44D,YAAA,cAAA4e,cAAA,sBAAoGpzE,EAAAy3E,qBAAwB78E,KAAA,sBAAAgB,MAAA,MAAA44D,YAAA,cAAA4e,cAAA,sBAAoGpzE,EAAA03E,6BAAgC98E,KAAA,8BAAAgB,MAAA,MAAA44D,YAAA,wDAAA4e,cAAA,sBAAsJpzE,EAAA23E,wBAA2B/8E,KAAA,yBAAAgB,MAAA,MAAA44D,YAAA,iCAAA4e,cAAA,sBAA0HpzE,EAAAmJ,0BAA6BvO,KAAA,2BAAAgB,MAAA,MAAA44D,YAAA,uCAAA4e,cAAA,4BAAwIpzE,EAAA43E,wBAA2Bh9E,KAAA,yBAAAgB,MAAA,MAAA44D,YAAA,yEAAA4e,cAAA,4BAAwKpzE,EAAA63E,mBAAsBj9E,KAAA,oBAAAgB,MAAA,MAAA44D,YAAA,8BAAA4e,cAAA,4BAAwHpzE,EAAA83E,kBAAqBl9E,KAAA,mBAAAgB,MAAA,MAAA44D,YAAA,oBAAA4e,cAAA,4BAA6GpzE,EAAA+3E,4BAA+Bn9E,KAAA,6BAAAgB,MAAA,MAAA44D,YAAA,mEAAA4e,cAAA,4BAAsKpzE,EAAAg4E,kBAAqBp9E,KAAA,mBAAAgB,MAAA,MAAA44D,YAAA,iCAAA4e,cAAA,4BAA0HpzE,EAAAi4E,eAAkBr9E,KAAA,gBAAAgB,MAAA,MAAA44D,YAAA,oBAAA4e,cAAA,4BAA0GpzE,EAAAk4E,kBAAqBt9E,KAAA,mBAAAgB,MAAA,MAAA44D,YAAA,gFAAA4e,cAAA,4BAAyKpzE,EAAAq0D,sBAAyB8jB,SAAA,WAAAlzB,UAAA,OAAAmzB,kBAAA,OAAAC,WAAA,OAAAC,kCAAA,OAAAC,cAAA,OAAA1yD,cAAA,OAAAhV,WAAA,SAAAD,aAAA,SAAA4nE,oBAAA,SAAAC,YAAA,SAAAC,sBAAA,SAAAC,kBAAA,UAAyT34E,EAAAs0D,qBAAwBrP,UAAA,MAAAmzB,kBAAA,MAAAvnE,WAAA,QAAAD,aAAA,QAAA4nE,oBAAA,QAAAC,YAAA,QAAAC,sBAAA,QAAAC,kBAAA,SAAwL54E,EAAA64E,eAAA54E,GAAoB5E,UAAY,IAAAA,IAAM,SAAA2E,GAAaA,EAAA84E,wBAAyB,WAAY,OAAA74E,KAAAD,GAAA64E,eAAA,GAAA74E,EAAA64E,eAAAn9E,eAAAuE,GAAA,CAAqE,GAAA5E,GAAA2E,EAAA64E,eAAA54E,EAA0BD,GAAA84E,qBAAAz9E,EAAAR,MAAAQ,OAAqCA,UAAY,IAAAA,IAAM,SAAA2E,GAAaA,EAAAo0D,yBAA0B,WAAY,OAAAn0D,KAAAD,GAAA64E,eAAA,GAAA74E,EAAA64E,eAAAn9E,eAAAuE,GAAA,CAAqE,GAAA5E,GAAA2E,EAAA64E,eAAA54E,EAA0BD,GAAAo0D,sBAAA/4D,EAAAQ,OAAAR,OAAuCA,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAA,GAAa,QAAAC,GAAAD,GAAc,gBAAAC,GAAmBA,EAAArF,GAAAoF,GAAQ,QAAA3E,GAAA2E,GAAc,MAAAA,GAAApF,GAAY,QAAAyE,GAAAW,GAAc,gBAAAC,GAAmBA,EAAAtE,GAAAqE,GAAQ,QAAAW,GAAAX,GAAc,MAAAA,GAAArE,GAAY,QAAAZ,GAAAiF,GAAc,gBAAAC,GAAmBA,EAAAyqD,GAAA1qD,GAAQ,QAAAzF,GAAAyF,GAAc,MAAAA,GAAA0qD,GAAY,QAAA9uD,GAAAqE,GAAc,gBAAA5E,GAAmBA,EAAA2E,EAAA+4E,eAAA94E,EAAA5E,EAAA2E,EAAAg5E,eAAA1oE,OAAArQ,IAAA,MAAyD,QAAAi6B,GAAAj6B,GAAc,MAAAA,GAAAD,EAAA+4E,eAA0B,QAAAv+E,GAAAyF,GAAc,MAAAA,GAAAD,EAAAg5E,eAA0B,QAAAr+E,GAAAqF,GAAc,gBAAAC,GAAmBA,EAAAssD,GAAAvsD,GAAQ,QAAAtF,GAAAsF,GAAc,MAAAA,GAAAusD,GAAY,GAAA3xD,GAAA,eAAsBoF,GAAAi5E,QAAAh5E,EAAAD,EAAAk5E,eAAA79E,CAA+B,IAAAM,GAAA,aAAoBqE,GAAAk2C,MAAA72C,EAAAW,EAAAm5E,aAAAx4E,CAA2B,IAAA+pD,GAAA,uBAA8B1qD,GAAAo5E,SAAAr+E,EAAAiF,EAAAq5E,gBAAA9+E,EAAAyF,EAAA+4E,cAAA,gBAAA/4E,EAAAg5E,cAAA,gBAAAh5E,EAAAs5E,YAAA19E,EAAAoE,EAAAu5E,mBAAAr/C,EAAAl6B,EAAAw5E,mBAAAh/E,CAA+J,IAAA+xD,GAAA,uBAA8BvsD,GAAAy5E,SAAA9+E,EAAAqF,EAAA05E,gBAAAh/E,GAAiCsF,EAAA25E,aAAA35E,EAAA25E,iBAAkCt+E,UAAY,IAAAA,IAAM,SAAA2E,GAAa,GAAAC,GAAA,WAAiB,QAAAA,MAAc,MAAAA,GAAA25E,uBAAA,SAAA35E,EAAA5E,EAAAgE,GAAgD,MAAAY,MAAAD,EAAA64E,eAAA1qE,cAAAtS,SAAAR,KAAA2E,EAAA64E,eAAAtyD,KAAA1qB,SAAAmE,EAAA64E,eAAA/sD,IAAAjwB,OAAAR,IAAA2E,EAAA64E,eAAAtyD,KAAA1qB,OAAAwD,IAAAW,EAAA64E,eAAA/sD,IAAAjwB,OAAAwD,IAAAW,EAAA64E,eAAAtyD,KAAA1qB,OAAAwD,IAAAW,EAAA64E,eAAAvS,QAAAzqE,OAAAwD,IAAAW,EAAA64E,eAAAzS,QAAAvqE,OAAAwD,IAAAW,EAAA64E,eAAAtS,OAAA1qE,OAAAwD,IAAAW,EAAA64E,eAAAxS,OAAAxqE,OAAAwD,IAAAW,EAAA64E,eAAApS,eAAA5qE,OAAAoE,IAAAD,EAAA64E,eAAA1qE,cAAAtS,OAAAoE,IAAAD,EAAA64E,eAAA3c,uBAAArgE,OAAAoE,IAAAD,EAAA64E,eAAA1c,uBAAAtgE,OAAAoE,IAAAD,EAAA64E,eAAAzc,qBAAAvgE,OAAAoE,IAAAD,EAAA64E,eAAArP,WAAA3tE,OAAAoE,IAAAD,EAAA64E,eAAA5D,eAAAp5E,OAAAoE,IAAAD,EAAA64E,eAAArqE,MAAA3S,QAAysBoE,EAAA45E,WAAA,SAAA55E,EAAA5E,EAAAgE,EAAAsB,EAAA5F,EAAAR,GAAoC0F,EAAAm4E,UAAa,IAAAx8E,GAAAs+B,EAAAv5B,EAAA5F,EAAA,CAAc,IAAAR,IAAAyF,EAAA64E,eAAA1qE,cAAAtS,MAAAD,EAAA,GAAAoJ,YAAAk1B,IAAA3/B,EAAAyF,EAAA64E,eAAArqE,MAAA3S,MAAAD,EAAA,GAAA2C,cAAA27B,IAAAj6B,EAAA45E,WAAAx+E,EAAAgE,EAAAsB,EAAA5F,EAAAkF,EAAAsmB,KAAAhsB,EAAAqB,IAAAqE,EAAAm4E,WAAA,CAAuK,GAAA79E,IAAAyF,EAAA64E,eAAA1qE,cAAAtS,MAAA,MAAAD,EAAqD,QAAApB,GAAA,GAAAwK,YAAArE,EAAA5F,EAAA,GAAAJ,EAAA,EAAoCA,EAAAI,EAAIJ,IAAA,OAAAD,GAAA,EAAgBA,EAAAiG,EAAIjG,IAAAF,EAAAG,EAAAgG,EAAA,IAAAjG,EAAA,OAAAgE,KAAA2iB,IAAA3iB,KAAAe,IAAA7D,EAAAjB,EAAAgG,EAAA,IAAAjG,EAAA,SAAAF,EAAAG,EAAAgG,EAAA,IAAAjG,EAAA,OAAAgE,KAAA2iB,IAAA3iB,KAAAe,IAAA7D,EAAAjB,EAAAgG,EAAA,IAAAjG,EAAA,SAAAF,EAAAG,EAAAgG,EAAA,IAAAjG,EAAA,OAAAgE,KAAA2iB,IAAA3iB,KAAAe,IAAA7D,EAAAjB,EAAAgG,EAAA,IAAAjG,EAAA,SAAAF,EAAAG,EAAAgG,EAAA,IAAAjG,EAAA,OAAAgE,KAAA2iB,IAAA3iB,KAAAe,IAAA7D,EAAAjB,EAAAgG,EAAA,IAAAjG,EAAA,QAA4O,OAAAF,KAAUyF,IAAMD,GAAA85E,iBAAA75E,GAAqB5E,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAA,GAAa,GAAAC,GAAA,WAAiB,QAAAD,GAAAC,EAAA5E,GAAgByD,KAAAqZ,QAAAlY,EAAAnB,KAAAi7E,OAAA1+E,EAAAyD,KAAAk7E,YAAA/5E,EAAA+5E,aAAA1pE,OAAAxR,KAAAm7E,UAAA,EAAAn7E,KAAAo7E,WAAA,EAAAp7E,KAAAq7E,mBAAA,EAAAr7E,KAAAs7E,aAAA,GAAAn6E,GAAAo6E,iBAAAv7E,KAAAw7E,WAAA,GAAAr6E,GAAAo6E,iBAAAv7E,KAAA2qB,QAAA,GAAAxpB,GAAAo6E,iBAAAv7E,KAAA85C,KAAA,GAAA95C,MAAAqZ,QAAAoiE,gBAAAz7E,KAAA07E,2BAAA17E,KAAA27E,4BAAA,EAAA37E,KAAA47E,6BAAA,CAAuY,QAAAr7E,GAAA,EAAYA,EAAAW,EAAA26E,cAAkBt7E,IAAAP,KAAA07E,wBAAAn7E,GAAA,CAAsCP,MAAAktB,OAAY,MAAAhsB,GAAAvE,UAAAm/E,cAAA,WAA4C97E,KAAAq7E,mBAAA,GAA0Bn6E,EAAAvE,UAAAo/E,iBAAA,SAAA76E,GAA0ClB,KAAAo7E,WAAAl6E,GAAkBA,EAAAvE,UAAAq/E,OAAA,WAA+B,OAAA76E,GAAA,EAAA5E,EAAA,EAAgBA,EAAA2E,EAAA26E,cAAkBt/E,IAAA4E,GAAAnB,KAAA07E,wBAAAn/E,EAAuC,YAAA4E,EAAA,MAAAA,GAAqBD,EAAAvE,UAAAuwB,KAAA,WAA6B,OAAA/rB,GAAA,EAAA5E,EAAA2E,EAAA+6E,+BAA+C96E,EAAA5E,EAAA+E,OAAWH,IAAA,CAAK,GAAAZ,GAAAhE,EAAA4E,EAAWnB,MAAAk8E,yBAAA37E,GAAiC,OAAAsB,GAAA,EAAA5F,EAAAiF,EAAAi7E,kBAAkCt6E,EAAA5F,EAAAqF,OAAWO,IAAA,CAAK,GAAAtB,GAAAtE,EAAA4F,EAAW7B,MAAAo8E,YAAA77E,KAAqBW,EAAAvE,UAAAu/E,yBAAA,SAAAh7E,GAAkD,GAAAC,GAAAnB,KAAAzD,EAAAyD,KAAAk7E,YAAAh6E,GAAAX,EAAAP,KAAAk7E,WAAoD36E,GAAAW,GAAA,WAAgB,GAAAW,GAAAD,UAAA,GAAA3F,EAAAkF,EAAAk7E,YAAAl7E,EAAAU,EAAA,WAAkDtB,EAAAW,GAAAW,IAAU,OAAAtF,GAAAiH,MAAArC,EAAA+5E,aAAAj/E,MAAmCiF,EAAAvE,UAAAy/E,YAAA,SAAAj7E,GAAqC,GAAA5E,GAAAyD,KAAAO,EAAAP,KAAAk7E,YAAA/5E,GAAAU,EAAA,eAAAV,EAAAlF,EAAA+D,KAAAk7E,WAAuEj/E,GAAAkF,GAAA,WAAgB,GAAA1F,GAAAmG,UAAA,GAAA9E,EAAA8E,UAAA,EAAkC,OAAAV,GAAAo7E,qBAAAl7E,QAAAtE,IAAA,IAAArB,EAAAc,EAAA8/E,YAAA9/E,EAAAd,EAAAoG,EAAA,WAA+E5F,EAAAkF,GAAA1F,IAAQ,OAAA8E,EAAAiD,MAAAjH,EAAA2+E,aAAAz/E,EAAAqB,MAAsCoE,EAAAvE,UAAA0/E,YAAA,SAAAl7E,EAAA5E,EAAAgE,GAAyC,gBAAAA,MAAA,iBAAuC,GAAAsB,GAAAV,EAAA24C,KAAAsQ,GAAiB,IAAAjpD,EAAAg6E,YAAAh6E,EAAAg6E,UAAAh6E,EAAAi6E,WAAAj6E,EAAAk6E,mBAAAl6E,EAAAi6E,aAAAj6E,EAAAg6E,UAAA,CAA2Fh6E,EAAAm6E,aAAAtnB,QAAA7yD,EAA0B,KAAI5E,EAAAiH,MAAArC,EAAA+5E,YAAAt5E,WAAiC,MAAAV,GAASC,EAAAwpB,QAAAqpC,QAAA9yD,GAAqBC,EAAAw6E,6BAAAx6E,EAAAw6E,4BAAA,GAAAz6E,EAAA26E,cAAA16E,EAAAu6E,wBAAAv6E,EAAAw6E,6BAAA95E,EAAAV,EAAAy6E,6BAAAz6E,EAAAq6E,WAAAxnB,QAAA7yD,KAAAk6E,mBAAA,MAAyN96E,OAAYY,GAAAy6E,6BAAA/5E,IAAkCX,IAAMC,GAAA86E,gCAAA,qIAAA96E,EAAAg7E,mBAAA,4BAAAh7E,EAAAm7E,sBAAA,kBAAAn7E,EAAA06E,cAAA,GAAA36E,EAAAq7E,QAAAp7E,GAAiSD,EAAAs7E,QAAAt7E,EAAAs7E,YAAwBjgF,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAA,GAAa,GAAAC,GAAA,WAAiB,QAAAD,KAAAC,GAAgBnB,KAAAqZ,QAAAnY,EAAAlB,KAAAi7E,OAAA95E,EAAAnB,KAAAy8E,mBAAA,GAAAv7E,GAAAq6E,iBAAAv7E,KAAAwK,OAAAtJ,EAAAsJ,OAAAxK,KAAAktB,OAA6G,MAAAhsB,GAAAvE,UAAAuwB,KAAA,WAAmC,GAAAhsB,GAAAlB,KAAAmB,EAAA,WAAwB,GAAAA,GAAAD,EAAAw7E,gBAAAl5E,MAAAxD,KAAA4B,UAA8C,IAAAA,UAAAN,OAAA,UAAAM,UAAA,SAAAT,EAAoD,IAAAA,EAAA,CAAM,GAAA5E,GAAAmD,MAAA/C,UAAA4J,MAAA5K,KAAAiG,WAAArB,EAAA,WAAAhE,EAAA,4BAAAA,EAAA,GAAAsF,EAAAtB,EAAA,GAAoGW,GAAAu7E,mBAAAzoB,SAA8BrpD,QAAAxJ,EAAAw7E,eAAA96E,IAA6B,MAAAV,GAAUnB,MAAAwK,QAAAxK,KAAA08E,gBAAA18E,KAAAwK,OAAAK,WAAA7K,KAAAwK,OAAAK,WAAA1J,IAAAnB,KAAA08E,gBAAAE,kBAAAjgF,UAAAkO,WAAA+xE,kBAAAjgF,UAAAkO,WAAA1J,IAA0LD,IAAMA,GAAA27E,UAAA17E,GAAcD,EAAAs7E,QAAAt7E,EAAAs7E,YAAwBjgF,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAC,GAAa,GAAA5E,GAAA,WAAiB,QAAA4E,GAAAD,EAAAC,EAAA5E,GAAkByD,KAAAqZ,QAAAnY,EAAAlB,KAAA85C,KAAA34C,EAAAnB,KAAAi7E,OAAA1+E,EAAAyD,KAAA88E,UAAA,EAAA98E,KAAA2K,QAAAzJ,EAAAyJ,QAAA3K,KAAA+8E,QAAA77E,EAAA67E,QAAA/8E,KAAAg9E,WAAA,EAAAh9E,KAAAi9E,iBAAA,EAAAj9E,KAAAk9E,UAAAh8E,EAAAg8E,UAAAl9E,KAAAm9E,oBAAsMxyE,QAAA3K,KAAA2K,QAAAgyE,eAAA38E,KAAA+8E,QAAAK,cAAAp9E,KAAAq9E,sBAAA3rE,KAAA1R,MAAAs9E,eAAAt9E,KAAAs9E,eAAA5rE,KAAA1R,MAAAu9E,eAAiKv9E,KAAAw9E,gBAAqBx9E,KAAAy9E,SAAA,GAAAz9E,MAAAk9E,UAAAQ,cAAgDP,mBAAAn9E,KAAAm9E,mBAAAQ,eAAA39E,KAAAk9E,UAAAU,gBAAwFrhF,GAAAyD,KAAA69E,YAAA,GAAA79E,MAAAk9E,UAAAY,iBAAyDX,mBAAAn9E,KAAAm9E,mBAAAY,kBAAA/9E,KAAAk9E,UAAAc,kBAAAvC,gBAAAz7E,KAAAk9E,UAAAe,UAAsI1hF,GAAAyD,KAAAk+E,eAAA,GAAAl+E,MAAAk9E,UAAAiB,oBAA+DhB,mBAAAn9E,KAAAm9E,mBAAAiB,qBAAAp+E,KAAAk9E,UAAAmB,sBAAoG9hF,GAAAyD,KAAA26E,SAAA,GAAA36E,MAAAk9E,UAAAoB,qBAA0DnB,mBAAAn9E,KAAAm9E,mBAAAoB,kBAAAv+E,KAAAk9E,UAAAsB,mBAA8FjiF,GAAAyD,KAAAy+E,oBAAAv9E,EAAAw9E,cAAA1+E,KAAA2+E,MAAwD,MAAAx9E,GAAAxE,UAAAgiF,IAAA,WAAkC3+E,KAAA4+E,WAAA5+E,KAAA2K,QAA8B,IAAAzJ,GAAAlB,KAAAm9E,mBAAAI,UAAyC,QAAAp8E,KAAAD,KAAAtE,eAAAuE,IAAAnB,KAAA4+E,WAAA19E,EAAAC,KAA0DA,EAAAxE,UAAAkiF,MAAA,WAA8B,OAAA39E,KAAAlB,MAAAw9E,aAAAx9E,KAAAw9E,aAAA5gF,eAAAsE,IAAAlB,KAAAw9E,aAAAt8E,GAAA29E,SAAiG19E,EAAAxE,UAAAmiF,aAAA,WAAqC,GAAA59E,GAAAlB,KAAA85C,KAAAsQ,GAAoBpqD,MAAAqZ,QAAAqlE,cAAA1+E,KAAA2+E,MAAA3+E,KAAAg9E,WAAA,EAAAh9E,KAAA88E,UAAA,EAAA98E,KAAA++E,gBAA8Fv0E,OAAAxK,KAAAg/E,cAAAr0E,QAAA3K,KAAAi/E,eAAAC,YAAAC,aAA8EC,YAAYC,UAAAn+E,EAAAo+E,wBAAA,EAAAC,sBAAA,EAAAC,QAAA,EAAAC,YAAAC,eAAmGn1B,WAAWvqD,KAAAy9E,SAAAqB,aAAA9+E,KAAA++E,gBAAA/+E,KAAA69E,YAAAiB,eAAA9+E,KAAA++E,eAAAO,wBAAAt/E,KAAA85C,KAAAsQ,KAA2IjpD,EAAAxE,UAAAgjF,YAAA,WAAoC,GAAAz+E,GAAAlB,KAAA85C,KAAAsQ,GAAoB,OAAApqD,MAAAqZ,QAAAqlE,cAAA1+E,KAAA6+E,QAAA7+E,KAAAg9E,WAAA,EAAAh9E,KAAAy9E,SAAAkC,YAAA3/E,KAAA++E,gBAAA/+E,KAAA69E,YAAA8B,cAAA3/E,KAAA++E,eAAAQ,sBAAAr+E,EAAAlB,KAAA++E,eAAAS,QAAAx/E,KAAA85C,KAAAsQ,IAAApqD,KAAA69E,YAAA+B,0BAAA5/E,KAAA++E,gBAAA/+E,KAAA26E,SAAAkF,eAAA7/E,KAAA++E,gBAAA/+E,KAAA++E,gBAA2W59E,EAAAxE,UAAAmjF,YAAA,WAAoC,MAAA9/E,MAAAi9E,iBAAAj9E,KAAAg9E,WAA4C77E,EAAAxE,UAAAojF,wBAAA,WAAgD,MAAA//E,MAAA88E,aAAwB37E,EAAAxE,UAAAqjF,UAAA,SAAA9+E,EAAAC,GAAqC,GAAAnB,KAAAi9E,kBAAAj9E,KAAAk+E,eAAA+B,gBAAA9+E,GAAAnB,KAAA69E,YAAAqC,cAAA/+E,GAAAnB,KAAA8/E,eAAA,CAAwH,GAAAvjF,GAAA2E,EAAAi/E,cAAAh/E,EAAAnB,KAAA+/E,0BAAwD//E,MAAAy9E,SAAA2C,aAAA7jF,GAAAyD,KAAA++E,eAAAG,SAAA56E,KAAA/H,KAAAijF,QAAAx/E,KAAA85C,KAAAsQ,MAA4FjpD,EAAAxE,UAAAiiF,WAAA,SAAA19E,GAAoC,OAAA3E,KAAA2E,GAAA,KAAAC,EAAAk/E,iBAAAj/E,QAAA7E,GAAA,IAAsD,GAAAgE,GAAA,gBAAAW,GAAA3E,EAA4BgE,IAAAP,KAAAsgF,YAAA/jF,EAAA2E,GAAyB,MAAAA,GAASlB,KAAAi7E,OAAAj2E,MAAA,oBAAAzI,GAAAyD,KAAAi7E,OAAAj2E,MAAA9D,KAA+DC,EAAAxE,UAAA8hF,kBAAA,WAA0C,GAAAv9E,GAAA,GAAAlB,MAAAk9E,UAAAqD,eAAAvgF,KAAAm9E,mBAAAn9E,KAAAi7E,QAAA95E,EAAAD,EAAAs/E,eAAiG,QAAAjkF,KAAA4E,KAAAvE,eAAAL,KAAAyD,KAAAm9E,mBAAAI,WAAAhhF,GAAA4E,EAAA5E,GAAiF,IAAAgE,GAAA,GAAAP,MAAAk9E,UAAAuD,iBAAAzgF,KAAAm9E,mBAAAn9E,KAAAi7E,QAAAp5E,EAAA,GAAA7B,MAAAk9E,UAAAwD,uBAAA1gF,KAAAm9E,mBAAAn9E,KAAAi7E,OAAgKj7E,MAAAi/E,gBAAqBlC,QAAA/8E,KAAA+8E,QAAA4D,kBAAA3gF,KAAA2K,QAAAi2E,uBAAAC,aAAAtgF,EAAAugF,eAAAvD,WAAAr8E,EAAA4/E,eAAAC,mBAAAl/E,EAAAi/E,gBAAyK9gF,KAAAg/E,eAAqB9zE,MAAAlL,KAAA2K,QAAAH,OAAAU,MAAAE,OAAApL,KAAA2K,QAAAH,OAAAY,OAAAD,YAAAnL,KAAA2K,QAAAH,OAAAW,YAAAE,aAAArL,KAAA2K,QAAAH,OAAAa,aAAA21E,aAAAC,oBAAAC,UAAA,KAA2M//E,EAAAxE,UAAA2jF,YAAA,SAAAn/E,EAAA5E,GAAuC,IAAAyD,KAAAw9E,aAAAr8E,GAAA,CAA0B,GAAAZ,GAAAW,EAAAk0D,MAAAp1D,KAAAm9E,oBAAuCgE,iBAAAhgF,EAAAigF,2BAAA7kF,EAAAguB,SAAAvqB,KAAAggF,UAAAtuE,KAAA1R,MAAAqhF,iBAAArhF,KAAAk9E,UAAAoE,iBAAAC,eAAAvhF,KAAAk9E,UAAAsE,eAAAC,mBAAAzhF,KAAAk9E,UAAAwE,oBAAwO1hF,MAAAw9E,aAAAr8E,GAAA,GAAAnB,MAAAk9E,UAAAyE,eAAAphF,EAAAP,KAAA85C,KAAA95C,KAAAi7E,QAAgFj7E,KAAAw9E,aAAAr8E,GAAAw9E,OAA2Bx9E,EAAAxE,UAAA0gF,sBAAA,SAAAn8E,GAA+ClB,KAAAi9E,gBAAA/7E,GAAuBC,EAAAxE,UAAA2gF,eAAA,SAAAp8E,GAAwC,MAAAlB,MAAAk+E,eAAAZ,eAAAp8E,IAA6CC,IAAM5E,GAAA8jF,kBAAA,qDAAAl/E,EAAAygF,WAAArlF,GAAwF2E,EAAAs7E,QAAAt7E,EAAAs7E,YAAwBjgF,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAC,GAAa,GAAA5E,GAAA,WAAiB,QAAA4E,GAAAD,EAAAC,EAAA5E,GAAkByD,KAAA85C,KAAA34C,EAAAnB,KAAAi7E,OAAA1+E,EAAAyD,KAAA6hF,WAAA,GAAA3gF,GAAAqgF,eAAAvhF,KAAAmhF,iBAAAjgF,EAAAigF,iBAAAnhF,KAAAohF,2BAAAlgF,EAAAkgF,2BAAAphF,KAAA8hF,aAAA9hF,KAAAohF,2BAAAphF,KAAAmhF,kBAAAnhF,KAAAuqB,SAAArpB,EAAAqpB,SAAAvqB,KAAA+hF,gBAA4Rp3E,QAAAzJ,EAAAyJ,QAAAgyE,eAAAz7E,EAAAy7E,eAAAY,WAAAr8E,EAAAq8E,WAAAH,cAAAl8E,EAAAk8E,cAAA+D,iBAAAjgF,EAAAigF,kBAA4InhF,KAAAgiF,mBAAA9gF,EAAAmgF,kBAAArhF,KAAAiiF,YAAA/gF,EAAAugF,oBAAoF,MAAAtgF,GAAAxE,UAAAgiF,IAAA,WAAkC3+E,KAAAohF,2BAAAphF,KAAAmhF,kBAAAnhF,KAAAkiF,mBAA8E/gF,EAAAxE,UAAAkiF,MAAA,WAA8B7+E,KAAAohF,2BAAAphF,KAAAmhF,kBAAAnhF,KAAA8hF,cAAyE3gF,EAAAxE,UAAAwjF,cAAA,SAAAj/E,EAAAC,GAAyC,MAAAnB,MAAAm6E,QAAAgG,cAAAj/E,EAAAC,IAAuCA,EAAAxE,UAAAqlF,mBAAA,SAAAzlF,GAA4C,IAAA4E,EAAAghF,2BAAA,CAAkChhF,EAAAghF,6BAAgC,QAAA5hF,KAAAhE,GAAA,GAAAA,EAAAK,eAAA2D,GAAA,CAAuC,GAAAsB,GAAAtF,EAAAgE,GAAAtE,EAAAiF,EAAA25E,WAAAT,eAAAv4E,EAA4C5F,KAAAkF,EAAAghF,2BAAAlmF,GAAA4F,MAAyCV,EAAAxE,UAAAslF,YAAA,SAAA/gF,GAAqCC,EAAAghF,2BAAAniF,KAAAmhF,kBAAAnhF,KAAAm6E,QAAA,GAAAh5E,GAAAghF,2BAAAniF,KAAAmhF,kBAAAnhF,KAAA+hF,eAAA/hF,KAAA6hF,WAAA7hF,KAAAi7E,QAAAj7E,KAAAm6E,QAAA,GAAAj5E,GAAAlB,KAAA+hF,eAAA/hF,KAAA6hF,WAAA7hF,KAAAi7E,QAAAj7E,KAAAkiF,kBAAAliF,KAAAoiF,UAAmRjhF,EAAAxE,UAAAylF,OAAA,WAA+B,GAAAlhF,GAAAlB,IAAW,mBAAkB,GAAAmB,GAAAD,EAAA44C,KAAAsQ,IAAA7tD,EAAA2E,EAAA4gF,aAAAt+E,MAAAtC,EAAAkgF,2BAAAx/E,WAAArB,EAAAW,EAAA44C,KAAAsQ,IAAAvoD,GAAgG9F,KAAAmF,EAAAigF,iBAAAv/E,oBAAAyB,OAAA9G,EAAA8iF,UAAAl+E,EAAAq+E,QAAAj/E,EAA4E,OAAAW,GAAAqpB,SAAArpB,EAAAW,GAAAtF,IAA0B4E,IAAMA,GAAAkhF,WAAA9lF,GAAe2E,EAAAs7E,QAAAt7E,EAAAs7E,YAAwBjgF,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAC,GAAa,GAAA5E,GAAA,WAAiB,QAAA4E,GAAAD,EAAAC,EAAA5E,GAAkByD,KAAAqZ,QAAAnY,EAAAlB,KAAA6hF,WAAA1gF,EAAAnB,KAAAi7E,OAAA1+E,EAAAyD,KAAAmhF,iBAAAjgF,EAAAigF,iBAAwF,MAAAhgF,GAAAxE,UAAAwjF,cAAA,SAAAj/E,EAAAC,GAA+C,GAAA5E,GAAAyD,KAAA6hF,WAAArtB,cAAA,KAAAj0D,EAAAP,KAAA2rD,UAAAzqD,EAAAU,UAAAV,EAAAmC,QAAAxB,GAAmFoG,GAAA9G,EAAAk+E,UAAAn+E,EAAAm+E,UAAAiD,eAAAphF,EAAAs+E,gBAAA,EAAAzjF,KAAAmF,EAAAnF,KAAAwmF,iBAAArhF,EAAAU,UAAAyB,OAAAnC,EAAAmC,OAAAw+E,WAAAtlF,EAAAimF,OAAA,EAAAroE,KAAA5Z,EAAqJP,MAAAyiF,iBAAA5gF,EAAyB,QAAA5F,GAAA,EAAYA,EAAA4F,EAAA0gF,iBAAAjhF,OAA4BrF,IAAA,CAAK,GAAAR,GAAAoG,EAAA0gF,iBAAAtmF,EAA4BR,MAAA6F,QAAA7F,EAAA6F,OAAA,KAAAO,EAAA0gF,iBAAAtmF,GAAA,iBAAAR,EAAA6F,QAA4E,GAAAO,EAAA0gF,iBAAA,CAAuB,OAAAzlF,MAAAb,EAAA,EAAiBA,EAAA4F,EAAA0gF,iBAAAjhF,OAA4BrF,IAAA,CAAK,GAAAm/B,GAAAv5B,EAAA0gF,iBAAAtmF,OAA4B,KAAAm/B,EAAAt+B,EAAAwH,SAAA,WAAA82B,EAAAt+B,EAAAwH,KAAA,MAAAxH,EAAAwH,KAAAonD,KAAA0F,MAAA1F,KAAAC,UAAAvwB,KAAsFv5B,EAAA0gF,iBAAAzlF,EAAqB,MAAA+E,GAAAwB,SAAAxB,EAAAwB,OAAAqoD,KAAA0F,MAAA1F,KAAAC,UAAA9pD,EAAAwB,UAAAxB,GAAmEV,EAAAxE,UAAA8lF,iBAAA,SAAAvhF,KAA2CC,EAAAxE,UAAAgvD,UAAA,SAAAzqD,EAAAC,GAAqC,GAAA5E,GAAAyD,KAAAqZ,QAAA8nE,gBAAoC,OAAAjgF,MAAAI,OAAA,IAAA/E,GAAA,KAAAyD,KAAA0iF,cAAAxhF,GAAA6W,KAAA,OAAA5W,IAAA5E,GAAA,OAAAyD,KAAA2iF,gBAAAxhF,IAAA5E,GAA0G4E,EAAAxE,UAAA+lF,cAAA,SAAAxhF,GAAuC,OAAAC,MAAA5E,EAAA,EAAiBA,EAAA2E,EAAAI,OAAW/E,IAAA,CAAK,GAAAgE,GAAAW,EAAA3E,GAAAsF,EAAA7B,KAAA4iF,eAAAriF,EAAoCY,GAAAmD,KAAAzC,GAAU,MAAAV,IAASA,EAAAxE,UAAAgmF,gBAAA,SAAAzhF,GAAyC,GAAAA,EAAA,MAAAlB,MAAA4iF,eAAA1hF,IAAmCC,EAAAxE,UAAAimF,eAAA,SAAAzhF,GAAwC,UAAAA,EAAA,YAAyB,aAAAA,EAAA,iBAAgC,IAAA5E,GAAA2E,EAAA2hF,aAAAC,kBAAA3hF,EAA0C,OAAA5E,KAAAwmF,YAAA,gBAAA5hF,IAAAD,EAAA64E,eAAA1kB,gBAAAl0D,GAAAD,EAAA64E,eAAAxkB,uBAAAp0D,EAAAnB,KAAAmhF,kBAAA,gBAAAhgF,iBAAA6hF,kBAAA7hF,EAAA6F,IAAA7F,YAAAgQ,aAAA,OAAAhQ,EAAAme,WAAA,OAAAne,EAAAG,OAAA,OAAAH,EAAAG,OAAA,OAAAH,GAA+RA,IAAMA,GAAA8hF,YAAA1mF,GAAgB2E,EAAAgiF,WAAAhiF,EAAAgiF,eAA8B3mF,UAAY,IAAAA,GAAAgE,EAAAP,WAAAa,WAAA,WAAyC,GAAAK,GAAAhF,OAAA4J,iBAA8BC,uBAAarG,QAAA,SAAAwB,EAAAC,GAAgCD,EAAA6E,UAAA5E,IAAc,SAAAD,EAAAC,GAAgB,OAAA5E,KAAA4E,KAAAvE,eAAAL,KAAA2E,EAAA3E,GAAA4E,EAAA5E,IAAiD,iBAAA4E,EAAA5E,GAAqB,QAAAgE,KAAaP,KAAAe,YAAAI,EAAmBD,EAAAC,EAAA5E,GAAA4E,EAAAxE,UAAA,OAAAJ,EAAAL,OAAAiD,OAAA5C,IAAAgE,EAAA5D,UAAAJ,EAAAI,UAAA,GAAA4D,SAAiF,SAAAW,IAAa,SAAAA,GAAa,GAAAC,IAAA,aAAA5E,EAAA,SAAA2E,GAAkC,QAAA3E,KAAAgE,EAAAsB,GAAkB,GAAA5F,GAAAiF,EAAAvF,KAAAqE,KAAAzD,EAAAgE,EAAAsB,IAAA7B,IAA+B,OAAA/D,GAAAknF,aAAAhiF,EAAAC,QAAAnF,EAAAklF,mBAAA,EAAAllF,EAAyD,MAAAsE,GAAAhE,EAAA2E,GAAA3E,EAAAI,UAAA8lF,iBAAA,SAAAvhF,GAAuDlB,KAAAmjF,eAAAjiF,EAAAshF,OAAA,KAAiCjmF,GAAG2E,EAAA+hF,YAAgB/hF,GAAAkiF,eAAA7mF,GAAmB2E,EAAAgiF,WAAAhiF,EAAAgiF,eAA8B3mF,UAAY,IAAAA,GAAAsF,EAAA7B,WAAAuB,YAAA,SAAAL,EAAAC,EAAA5E,EAAAgE,GAAiD,GAAAsB,GAAA5F,EAAA2F,UAAAN,OAAA7F,EAAAQ,EAAA,EAAAkF,EAAA,OAAAZ,IAAArE,OAAA4F,yBAAAX,EAAA5E,GAAAgE,CAAmF,oBAAAwB,UAAA,kBAAAA,SAAAC,SAAAvG,EAAAsG,QAAAC,SAAAd,EAAAC,EAAA5E,EAAAgE,OAA6F,QAAAzD,GAAAoE,EAAAI,OAAA,EAA0BxE,GAAA,EAAKA,KAAA+E,EAAAX,EAAApE,MAAArB,GAAAQ,EAAA,EAAA4F,EAAApG,GAAAQ,EAAA,EAAA4F,EAAAV,EAAA5E,EAAAd,GAAAoG,EAAAV,EAAA5E,KAAAd,EAAoD,OAAAQ,GAAA,GAAAR,GAAAS,OAAAC,eAAAgF,EAAA5E,EAAAd,OAA+C,SAAAyF,IAAa,SAAAC,GAAa,GAAA5E,GAAA,SAAA4E,GAAkB,QAAA5E,KAAa,cAAA4E,KAAAqC,MAAAxD,KAAA4B,YAAA5B,KAA+C,MAAAO,GAAAhE,EAAA4E,GAAA5E,EAAAI,UAAA+lF,cAAA,SAAAvhF,GAAoD,GAAA5E,KAAS,QAAA4E,EAAA,GAAAD,EAAA64E,eAAArkB,iBAAA34D,SAAAmE,EAAA64E,eAAArkB,iBAAA34D,OAAAR,EAAA+H,KAAApD,EAAA64E,eAAArkB,iBAAA35D,OAAAoF,EAAA,GAAAD,EAAA64E,eAAAnkB,mBAAA74D,SAAAmE,EAAA64E,eAAAnkB,mBAAA74D,OAAAR,EAAA+H,KAAApD,EAAA64E,eAAAnkB,mBAAA75D,OAAAoF,EAAA,GAAAD,EAAA64E,eAAAlkB,iBAAA94D,SAAAmE,EAAA64E,eAAAlkB,iBAAA94D,OAAAR,EAAA+H,KAAApD,EAAA64E,eAAAlkB,iBAAA95D,MAAAQ,GAAyaA,GAAG4E,EAAA8hF,YAAgB1mF,GAAAsF,GAAAX,EAAA25E,WAAAV,QAAA,UAAA59E,GAAA4E,EAAAkiF,MAAA9mF,GAAiD2E,EAAAgiF,WAAAhiF,EAAAgiF,eAA8B3mF,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAC,GAAa,GAAA5E,GAAA,SAAA4E,GAAkB,QAAA5E,KAAa,cAAA4E,KAAAqC,MAAAxD,KAAA4B,YAAA5B,KAA+C,MAAAO,GAAAhE,EAAA4E,GAAA5E,EAAAI,UAAA+lF,cAAA,SAAAvhF,GAAoD,GAAA5E,MAAAgE,EAAAP,KAAAqZ,QAAA1O,QAAAya,aAAAlkB,EAAA64E,eAAA/I,yBAAAj0E,OAAA8E,EAAA7B,KAAAqZ,QAAAikE,eAAA/8E,EAA+HhE,GAAA+H,KAAA,cAAAtE,KAAA4iF,eAAA/gF,GAA6C,IAAA5F,GAAA+D,KAAAqZ,QAAA1O,QAAAya,aAAAlkB,EAAA64E,eAAAlJ,yBAAA9zE,OAAAtB,EAAAuE,KAAAqZ,QAAAikE,eAAArhF,EAA0HM,GAAA+H,KAAA,aAAAtE,KAAA4iF,eAAAnnF,GAA4C,QAAAqB,GAAA,EAAYA,EAAA,EAAIA,IAAAP,EAAA+H,KAAAnD,EAAArE,GAAiB,QAAAqE,EAAA,GAAAD,EAAA64E,eAAArkB,iBAAA34D,SAAAmE,EAAA64E,eAAArkB,iBAAA34D,OAAAR,EAAA+H,KAAApD,EAAA64E,eAAArkB,iBAAA35D,OAAAoF,EAAA,GAAAD,EAAA64E,eAAAnkB,mBAAA74D,SAAAmE,EAAA64E,eAAAnkB,mBAAA74D,OAAAR,EAAA+H,KAAApD,EAAA64E,eAAAnkB,mBAAA75D,OAAAoF,EAAA,GAAAD,EAAA64E,eAAAlkB,iBAAA94D,SAAAmE,EAAA64E,eAAAlkB,iBAAA94D,OAAAR,EAAA+H,KAAApD,EAAA64E,eAAAlkB,iBAAA95D,MAAAQ,EAAA+H,KAAApD,EAAA64E,eAAAxkB,uBAAAp0D,EAAA,uBAAA5E,GAAifA,GAAG4E,EAAA8hF,YAAgB1mF,GAAAsF,GAAAX,EAAA25E,WAAAV,QAAA,oBAAA59E,GAAA4E,EAAAmiF,gBAAA/mF,GAAqE2E,EAAAgiF,WAAAhiF,EAAAgiF,eAA8B3mF,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAC,GAAa,GAAA5E,GAAA,SAAA4E,GAAkB,QAAA5E,KAAa,cAAA4E,KAAAqC,MAAAxD,KAAA4B,YAAA5B,KAA+C,MAAAO,GAAAhE,EAAA4E,GAAA5E,EAAAI,UAAA+lF,cAAA,SAAAvhF,GAAoD,GAAA5E,KAAS,OAAAA,GAAA+H,KAAAnD,EAAA,IAAA5E,EAAA+H,KAAAnD,EAAA,IAAA5E,EAAA+H,KAAApD,EAAA64E,eAAAxkB,uBAAAp0D,EAAA,2BAAA5E,EAAA+H,KAAAnD,EAAA,IAAA5E,EAAA+H,KAAAnD,EAAA,IAAA5E,EAAA+H,KAAAnD,EAAA,IAAA5E,GAAsJA,GAAG4E,EAAA8hF,YAAgB1mF,GAAAsF,GAAAX,EAAA25E,WAAAV,QAAA,wBAAA59E,GAAA4E,EAAAoiF,oBAAAhnF,GAA6E2E,EAAAgiF,WAAAhiF,EAAAgiF,eAA8B3mF,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAC,GAAa,GAAA5E,GAAA,SAAA2E,GAAkB,QAAAC,KAAa,cAAAD,KAAAsC,MAAAxD,KAAA4B,YAAA5B,KAA+C,MAAAO,GAAAY,EAAAD,GAAAC,EAAAxE,UAAAgmF,gBAAA,SAAAzhF,GAAsD,GAAAA,EAAA,eAAAA,EAAAnF,KAAA,WAAAmF,EAAAyF,KAAA,WAAAzF,EAAAf,MAA+DgB,GAAGA,EAAA8hF,YAAgB1mF,GAAAsF,GAAAX,EAAA25E,WAAAV,QAAA,oBAAA59E,GAAA4E,EAAAqiF,gBAAAjnF,GAAqE2E,EAAAgiF,WAAAhiF,EAAAgiF,eAA8B3mF,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAC,GAAa,GAAA5E,GAAA,SAAA2E,GAAkB,QAAAC,KAAa,cAAAD,KAAAsC,MAAAxD,KAAA4B,YAAA5B,KAA+C,MAAAO,GAAAY,EAAAD,GAAAC,EAAAxE,UAAAgmF,gBAAA,SAAAzhF,GAAsD,GAAAA,EAAA,eAAAA,EAAAnF,KAAA,WAAAmF,EAAAyF,KAAA,WAAAzF,EAAAf,MAA+DgB,GAAGA,EAAA8hF,YAAgB1mF,GAAAsF,GAAAX,EAAA25E,WAAAV,QAAA,qBAAA59E,GAAA4E,EAAAsiF,iBAAAlnF,GAAuE2E,EAAAgiF,WAAAhiF,EAAAgiF,eAA8B3mF,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAC,GAAa,GAAA5E,GAAA,SAAA2E,GAAkB,QAAAC,KAAa,cAAAD,KAAAsC,MAAAxD,KAAA4B,YAAA5B,KAA+C,MAAAO,GAAAY,EAAAD,GAAAC,EAAAxE,UAAAgmF,gBAAA,SAAAzhF,GAAsD,GAAAA,EAAA,eAAAA,EAAAnF,KAAA,WAAAmF,EAAAyF,KAAA,WAAAzF,EAAAf,MAA+DgB,GAAGA,EAAA8hF,YAAgB1mF,GAAAsF,GAAAX,EAAA25E,WAAAV,QAAA,gCAAA59E,GAAA4E,EAAAuiF,4BAAAnnF,GAA6F2E,EAAAgiF,WAAAhiF,EAAAgiF,eAA8B3mF,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAC,GAAa,GAAA5E,GAAA,SAAA2E,GAAkB,QAAAC,KAAa,cAAAD,KAAAsC,MAAAxD,KAAA4B,YAAA5B,KAA+C,MAAAO,GAAAY,EAAAD,GAAAC,EAAAxE,UAAAgmF,gBAAA,SAAAzhF,GAAsD,MAAAA,GAAA,gBAAwBC,GAAGA,EAAA8hF,YAAgB1mF,GAAAsF,GAAAX,EAAA25E,WAAAV,QAAA,iBAAA59E,GAAA4E,EAAAwiF,aAAApnF,GAA+D2E,EAAAgiF,WAAAhiF,EAAAgiF,eAA8B3mF,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAC,GAAa,GAAA5E,GAAA,SAAA2E,GAAkB,QAAAC,KAAa,cAAAD,KAAAsC,MAAAxD,KAAA4B,YAAA5B,KAA+C,MAAAO,GAAAY,EAAAD,GAAAC,EAAAxE,UAAAgmF,gBAAA,SAAAzhF,GAAsD,GAAAA,EAAA,cAAAA,EAAA0iF,SAAA,UAAA1iF,EAAA2iF,SAAA,gBAAA3iF,EAAA4iF,WAA+E3iF,GAAGA,EAAA8hF,YAAgB1mF,GAAAsF,GAAAX,EAAA25E,WAAAV,QAAA,6BAAA59E,GAAA4E,EAAA4iF,yBAAAxnF,GAAuF2E,EAAAgiF,WAAAhiF,EAAAgiF,eAA8B3mF,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAC,GAAa,GAAA5E,GAAA,SAAA4E,GAAkB,QAAA5E,KAAa,cAAA4E,KAAAqC,MAAAxD,KAAA4B,YAAA5B,KAA+C,MAAAO,GAAAhE,EAAA4E,GAAA5E,EAAAI,UAAAgmF,gBAAA,SAAAxhF,GAAsD,IAAAA,EAAA,YAAmB,IAAA5E,GAAA2E,EAAA2hF,aAAAC,kBAAA3hF,EAA0C,OAAA5E,KAAAwmF,YAAA5hF,GAAyB5E,GAAG4E,EAAA8hF,YAAgB1mF,GAAAsF,GAAAX,EAAA25E,WAAAV,QAAA,iBAAA59E,GAAA4E,EAAA6iF,aAAAznF,GAA+D2E,EAAAgiF,WAAAhiF,EAAAgiF,eAA8B3mF,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAC,GAAa,GAAA5E,GAAA,SAAA4E,GAAkB,QAAA5E,KAAa,cAAA4E,KAAAqC,MAAAxD,KAAA4B,YAAA5B,KAA+C,MAAAO,GAAAhE,EAAA4E,GAAA5E,EAAAI,UAAA+lF,cAAA,SAAAvhF,GAAoD,GAAA5E,KAAS,OAAAA,GAAA+H,KAAApD,EAAA64E,eAAAxkB,uBAAAp0D,EAAA,kBAAA5E,EAAA+H,KAAAnD,EAAA,IAAA5E,EAAA+H,KAAAnD,EAAA,IAAA5E,GAAsGA,GAAG4E,EAAA8hF,YAAgB1mF,GAAAsF,GAAAX,EAAA25E,WAAAV,QAAA,eAAA59E,GAAA4E,EAAA8iF,WAAA1nF,GAA2D2E,EAAAgiF,WAAAhiF,EAAAgiF,eAA8B3mF,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAC,GAAa,GAAA5E,GAAA,SAAA4E,GAAkB,QAAA5E,KAAa,cAAA4E,KAAAqC,MAAAxD,KAAA4B,YAAA5B,KAA+C,MAAAO,GAAAhE,EAAA4E,GAAA5E,EAAAI,UAAA+lF,cAAA,SAAAvhF,GAAoD,GAAA5E,KAAS,OAAAA,GAAA+H,KAAApD,EAAA64E,eAAAxkB,uBAAAp0D,EAAA,2BAAA5E,EAAA+H,KAAAnD,EAAA,IAAA5E,EAAA+H,KAAAnD,EAAA,IAAA5E,EAAA+H,KAAAnD,EAAA,IAAA5E,GAA4HA,GAAG4E,EAAA8hF,YAAgB1mF,GAAAsF,GAAAX,EAAA25E,WAAAV,QAAA,wBAAA59E,GAAA4E,EAAA+iF,oBAAA3nF,GAA6E2E,EAAAgiF,WAAAhiF,EAAAgiF,eAA8B3mF,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAC,GAAa,GAAA5E,GAAA,SAAA4E,GAAkB,QAAA5E,KAAa,cAAA4E,KAAAqC,MAAAxD,KAAA4B,YAAA5B,KAA+C,MAAAO,GAAAhE,EAAA4E,GAAA5E,EAAAI,UAAA+lF,cAAA,SAAAvhF,GAAoD,OAAA5E,MAAAgE,EAAA,EAAiBA,EAAAY,EAAAG,OAAWf,IAAAhE,EAAA+H,KAAApD,EAAA64E,eAAAxkB,uBAAAp0D,EAAAZ,GAAA,eAAwE,OAAAhE,IAASA,GAAG4E,EAAA8hF,YAAgB1mF,GAAAsF,GAAAX,EAAA25E,WAAAV,QAAA,gBAAA59E,GAAA4E,EAAAgjF,YAAA5nF,GAA6D2E,EAAAgiF,WAAAhiF,EAAAgiF,eAA8B3mF,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAC,GAAa,GAAA5E,GAAA,SAAA4E,GAAkB,QAAA5E,KAAa,cAAA4E,KAAAqC,MAAAxD,KAAA4B,YAAA5B,KAA+C,MAAAO,GAAAhE,EAAA4E,GAAA5E,EAAAI,UAAA+lF,cAAA,SAAAvhF,GAAoD,GAAA5E,KAAS,OAAAA,GAAA+H,KAAApD,EAAA64E,eAAAxkB,uBAAAp0D,EAAA,oBAAA5E,EAAA+H,KAAAnD,EAAA,IAAA5E,EAAA+H,KAAApD,EAAA64E,eAAAxkB,uBAAAp0D,EAAA,oBAAA5E,EAAA+H,KAAAnD,EAAA,IAAA5E,GAA6KA,GAAG4E,EAAA8hF,YAAgB1mF,GAAAsF,GAAAX,EAAA25E,WAAAV,QAAA,iBAAA59E,GAAA4E,EAAAijF,aAAA7nF,GAA+D2E,EAAAgiF,WAAAhiF,EAAAgiF,eAA8B3mF,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAC,GAAa,GAAA5E,GAAA,SAAA4E,GAAkB,QAAA5E,KAAa,cAAA4E,KAAAqC,MAAAxD,KAAA4B,YAAA5B,KAA+C,MAAAO,GAAAhE,EAAA4E,GAAA5E,EAAAI,UAAA+lF,cAAA,SAAAvhF,GAAoD,GAAA5E,KAAS,OAAAA,GAAA+H,KAAApD,EAAA64E,eAAAxkB,uBAAAp0D,EAAA,6BAAA5E,EAAA+H,KAAAnD,EAAA,IAAA5E,EAAA+H,KAAApD,EAAA64E,eAAAxkB,uBAAAp0D,EAAA,6BAAA5E,EAAA+H,KAAAnD,EAAA,IAAA5E,EAAA+H,KAAAnD,EAAA,IAAA5E,GAA4MA,GAAG4E,EAAA8hF,YAAgB1mF,GAAAsF,GAAAX,EAAA25E,WAAAV,QAAA,0BAAA59E,GAAA4E,EAAAkjF,sBAAA9nF,GAAiF2E,EAAAgiF,WAAAhiF,EAAAgiF,eAA8B3mF,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAC,GAAa,GAAA5E,GAAA,SAAA4E,GAAkB,QAAA5E,KAAa,cAAA4E,KAAAqC,MAAAxD,KAAA4B,YAAA5B,KAA+C,MAAAO,GAAAhE,EAAA4E,GAAA5E,EAAAI,UAAA+lF,cAAA,SAAAvhF,GAAoD,GAAA5E,KAAS,OAAAA,GAAA+H,KAAApD,EAAA64E,eAAAxkB,uBAAAp0D,EAAA,kCAAA5E,EAAA+H,KAAAnD,EAAA,IAAA5E,EAAA+H,KAAApD,EAAA64E,eAAAxkB,uBAAAp0D,EAAA,kCAAA5E,EAAA+H,KAAAnD,EAAA,IAAA5E,EAAA+H,KAAAnD,EAAA,IAAA5E,GAAsNA,GAAG4E,EAAA8hF,YAAgB1mF,GAAAsF,GAAAX,EAAA25E,WAAAV,QAAA,+BAAA59E,GAAA4E,EAAAmjF,2BAAA/nF,GAA2F2E,EAAAgiF,WAAAhiF,EAAAgiF,eAA8B3mF,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAC,GAAa,GAAA5E,GAAA,SAAA4E,GAAkB,QAAA5E,KAAa,cAAA4E,KAAAqC,MAAAxD,KAAA4B,YAAA5B,KAA+C,MAAAO,GAAAhE,EAAA4E,GAAA5E,EAAAI,UAAA+lF,cAAA,SAAAvhF,GAAoD,GAAA5E,KAAS,OAAAA,GAAA+H,KAAApD,EAAA64E,eAAAxkB,uBAAAp0D,EAAA,yBAAA5E,EAAA+H,KAAAnD,EAAA,IAAA5E,EAAA+H,KAAAnD,EAAA,IAAA5E,EAAA+H,KAAAnD,EAAA,IAAA5E,EAAA+H,KAAApD,EAAA64E,eAAAxkB,uBAAAp0D,EAAA,yBAAA5E,EAAA+H,KAAAnD,EAAA,IAAA5E,GAAiNA,GAAG4E,EAAA8hF,YAAgB1mF,GAAAsF,GAAAX,EAAA25E,WAAAV,QAAA,sBAAA59E,GAAA4E,EAAAojF,kBAAAhoF,GAAyE2E,EAAAgiF,WAAAhiF,EAAAgiF,eAA8B3mF,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAC,GAAa,GAAA5E,GAAA,SAAA2E,GAAkB,QAAAC,KAAa,cAAAD,KAAAsC,MAAAxD,KAAA4B,YAAA5B,KAA+C,MAAAO,GAAAY,EAAAD,GAAAC,EAAAxE,UAAA+lF,cAAA,SAAAxhF,GAAoD,OAAAC,MAAA5E,EAAA,EAAiBA,EAAA,EAAIA,IAAA4E,EAAAmD,KAAApD,EAAA3E,GAAAioF,QAAA,GAA4B,OAAArjF,IAASA,GAAGA,EAAA8hF,YAAgB1mF,GAAAsF,GAAAX,EAAA25E,WAAAV,QAAA,YAAA59E,GAAA4E,EAAAsjF,QAAAloF,GAAqD2E,EAAAgiF,WAAAhiF,EAAAgiF,eAA8B3mF,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAC,GAAa,GAAA5E,GAAA,SAAA2E,GAAkB,QAAAC,KAAa,cAAAD,KAAAsC,MAAAxD,KAAA4B,YAAA5B,KAA+C,MAAAO,GAAAY,EAAAD,GAAAC,EAAAxE,UAAA+lF,cAAA,SAAAxhF,GAAoD,OAAAC,MAAA5E,EAAA,EAAiBA,EAAA,EAAIA,IAAA4E,EAAAmD,KAAApD,EAAA3E,GAAAioF,QAAA,GAA4B,OAAArjF,IAASA,GAAGA,EAAA8hF,YAAgB1mF,GAAAsF,GAAAX,EAAA25E,WAAAV,QAAA,aAAA59E,GAAA4E,EAAAujF,SAAAnoF,GAAuD2E,EAAAgiF,WAAAhiF,EAAAgiF,eAA8B3mF,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAC,GAAa,GAAA5E,GAAA,WAAiB,QAAA4E,GAAAD,EAAA3E,GAAgByD,KAAAqZ,QAAAnY,EAAAlB,KAAAi7E,OAAA1+E,EAAAyD,KAAA2kF,WAAAzjF,EAAAyjF,WAAA3kF,KAAA4kF,mBAAA5kF,KAAA6kF,wBAAA7kF,KAAA8kF,mBAAA9kF,KAAA+kF,wBAAA/kF,KAAAglF,mBAAAhlF,KAAAilF,wBAAAjlF,KAAAq/E,UAAAr/E,KAAAqZ,QAAAygC,KAAAsQ,IAAApqD,KAAAklF,mBAAqRllF,KAAAmlF,YAAA,EAAAnlF,KAAA0/E,YAAA,EAAA1/E,KAAAg9E,WAAA,EAAA77E,EAAAikF,6BAAwF,MAAAjkF,GAAAkkF,yBAAA,WAA6C,IAAArlF,KAAAolF,0BAAA,CAAoCplF,KAAAolF,2BAAAjkF,KAAoCA,EAAAD,EAAA64E,eAAAnR,GAAA7rE,OAAA,EAAAoE,EAAAD,EAAA64E,eAAAjR,KAAA/rE,OAAA,EAAAoE,EAAAD,EAAA64E,eAAAhR,KAAAhsE,OAAA,EAAAoE,EAAAD,EAAA64E,eAAA5Q,KAAApsE,OAAA,EAAAoE,EAAAD,EAAA64E,eAAAlR,IAAA9rE,OAAA,EAAAoE,EAAAD,EAAA64E,eAAA/Q,MAAAjsE,OAAA,EAAAoE,EAAAD,EAAA64E,eAAA9Q,MAAAlsE,OAAA,EAAAoE,EAAAD,EAAA64E,eAAA3sC,MAAArwC,OAAA,EAAAoE,EAAAD,EAAA64E,eAAA/sD,IAAAjwB,OAAA,EAAAoE,EAAAD,EAAA64E,eAAAtyD,KAAA1qB,OAAA,EAAAoE,EAAAD,EAAA64E,eAAA5sC,UAAApwC,OAAA,EAAAoE,EAAAD,EAAA64E,eAAA5c,gBAAApgE,OAAA,EAAAoE,EAAAD,EAAA64E,eAAA7c,gBAAAngE,OAAA,EAAAoE,EAAAD,EAAA64E,eAAAxW,cAAAxmE,OAAA,EAAAoE,EAAAD,EAAA64E,eAAAvD,SAAAz5E,OAAA,EAAAoE,EAAAD,EAAA64E,eAAAtD,eAAA15E,OAAA,EAAAoE,EAAAD,EAAA64E,eAAAlT,KAAA9pE,OAAA,EAAAoE,EAAAD,EAAA64E,eAAA5S,MAAApqE,OAAA,EAAAoE,EAAAD,EAAA64E,eAAA5W,OAAApmE,OAAA,EAAAoE,EAAAD,EAAA64E,eAAApS,eAAA5qE,OAAA,EAAAoE,EAAAD,EAAA64E,eAAAnS,QAAA7qE,OAAA,EAAAoE,EAAAD,EAAA64E,eAAAtS,OAAA1qE,OAAA,EAAAoE,EAAAD,EAAA64E,eAAAxS,OAAAxqE,OAAA,GAAAoE,EAAAD,EAAA64E,eAAA7R,OAAAnrE,OAAA,EAAAoE,EAAAD,EAAA64E,eAAAjT,MAAA/pE,OAAA,EAAAoE,EAAAD,EAAA64E,eAAA7W,QAAAnmE,OAAA,EAAAoE,EAAAD,EAAA64E,eAAAvS,QAAAzqE,OAAA,EAAAoE,EAAAD,EAAA64E,eAAAzS,QAAAvqE,OAAA,GAAAoE,EAAAD,EAAA64E,eAAA9R,QAAAlrE,OAAA,EAAAoE,EAAAD,EAAA64E,eAAA/E,mBAAAj4E,OAAA,EAAAoE,EAAAD,EAAA64E,eAAA9E,0BAAAl4E,OAAA,EAAAoE,EAAAD,EAAA64E,eAAA7E,oBAAAn4E,OAAA,EAAAoE,EAAAD,EAAA64E,eAAA5E,2BAAAp4E,OAAA,EAAAoE,EAAAD,EAAA64E,eAAA3E,qBAAAr4E,OAAA,EAAAoE,EAAAD,EAAA64E,eAAA1E,0BAAAt4E,OAAA,EAAAoE,EAAAD,EAAA64E,eAAAzE,sBAAAv4E,OAAA,EAAAoE,EAAAD,EAAA64E,eAAAxE,iCAAAx4E,OAAA,EAAAoE,EAAAD,EAAA64E,eAAAvE,yCAAAz4E,OAAA,EAAAoE,EAAAD,EAAA64E,eAAAtE,0CAAA14E,OAAA,EAAAoE,EAAokD,IAAAA,KAAOA,EAAAxE,UAAA2oF,kBAAA,SAAApkF,GAA2C,OAAAC,GAAA,EAAA5E,EAAAyD,KAAA4kF,mBAAsCzjF,EAAA5E,EAAA+E,OAAWH,IAAA,CAAK,GAAAZ,GAAAhE,EAAA4E,EAAWD,GAAAX,GAAAW,EAAAX,OAAAW,EAAAX,GAAA+D,KAAAtE,KAAAulF,yBAAA7zE,KAAA1R,OAAkE,OAAA6B,GAAA,EAAA5F,EAAA+D,KAAA8kF,mBAAsCjjF,EAAA5F,EAAAqF,OAAWO,IAAA,CAAK,GAAAtB,GAAAtE,EAAA4F,EAAWX,GAAAX,GAAAW,EAAAX,OAAAW,EAAAX,GAAA+D,KAAAtE,KAAAwlF,yBAAA9zE,KAAA1R,OAAkE,OAAAvE,GAAA,EAAAqB,EAAAkD,KAAAglF,mBAAsCvpF,EAAAqB,EAAAwE,OAAW7F,IAAA,CAAK,GAAA8E,GAAAzD,EAAArB,EAAWyF,GAAAX,GAAAW,EAAAX,OAAAW,EAAAX,GAAA+D,KAAAtE,KAAAylF,yBAAA/zE,KAAA1R,SAAmEmB,EAAAxE,UAAAmiF,aAAA,WAAqC9+E,KAAA0/E,YAAA,EAAA1/E,KAAAg9E,WAAA,GAAqC77E,EAAAxE,UAAAgjF,YAAA,WAAoC3/E,KAAA0/E,YAAA,EAAA1/E,KAAAg9E,WAAA,GAAqC77E,EAAAxE,UAAAijF,0BAAA,SAAA1+E,GAAmDA,EAAAw+E,YAAA1/E,KAAA2kF,YAAA3kF,KAAA0/E,YAAAx+E,EAAAqpD,OAAAvqD,KAAA2kF,YAAA3kF,KAAAklF,iBAA+F/jF,EAAAxE,UAAAwC,OAAA,SAAA+B,KAAiCC,EAAAxE,UAAA4oF,yBAAA,SAAArkF,GAAkDlB,KAAAqZ,QAAA+jE,eAAA,GAAAp9E,KAAAb,OAAA+B,GAAAlB,KAAAqZ,QAAA+jE,eAAA,IAA6Ej8E,EAAAxE,UAAA6oF,yBAAA,SAAArkF,GAAkD,GAAAA,GAAA,IAAAA,EAAAS,UAAAN,OAAA,CAA8BtB,KAAAqZ,QAAA+jE,eAAA,EAA+B,IAAA7gF,GAAA4E,EAAAS,UAAA,GAAArB,EAAAP,KAAA0lF,iBAAAnpF,EAAgD,KAAAgE,EAAA,WAAAP,MAAAqZ,QAAA+jE,eAAA,EAAiD,KAAAl8E,EAAA2hF,aAAAC,kBAAAviF,GAAA,WAAAP,MAAAqZ,QAAA+jE,eAAA,EAAmF,IAAAv7E,GAAA7B,KAAA2lF,iBAAAppF,GAAAN,EAAA+D,KAAA+nC,OAAA5mC,EAAAU,EAAAtB,EAAoDP,MAAA4lF,iBAAA3pF,GAAA+D,KAAAqZ,QAAA+jE,eAAA,KAAyDj8E,EAAAxE,UAAA8oF,yBAAA,SAAAvkF,GAAkD,GAAAA,KAAAU,aAAAV,EAAAU,UAAAN,OAAA,IAA4C,GAAAH,GAAAD,EAAAU,UAAA,EAAqB,IAAAT,EAAA,CAAMnB,KAAAqZ,QAAA+jE,eAAA,EAA+B,IAAA7gF,GAAAyD,KAAA6lF,OAAA1kF,EAAqBnB,MAAA4lF,kBAAArpF,GAAAyD,KAAAqZ,QAAA+jE,eAAA,MAA2Dj8E,EAAAxE,UAAAipF,iBAAA,SAAA1kF,GAA0ClB,KAAAmlF,aAAAjkF,EAAAlB,KAAAg9E,YAAAh9E,KAAA0/E,aAAAx+E,EAA0D,IAAAC,GAAAnB,KAAAqZ,QAAAygC,KAAAsQ,IAAApqD,KAAAq/E,UAAA9iF,EAAAqD,KAAAuyC,MAAAhxC,EAAA,IAA+DnB,MAAAklF,gBAAA3oF,GAAAyD,KAAAmlF,aAAyChkF,EAAAxE,UAAAgpF,iBAAA,SAAAxkF,GAA0C,GAAA5E,GAAA2E,EAAAo0D,sBAAAn0D,EAAiC,OAAA5E,KAAAR,KAAAoF,EAAA,IAAqBA,EAAAxE,UAAAmpF,6BAAA,SAAA5kF,GAAsD,MAAAC,GAAAikF,0BAAAlkF,IAAA,GAAyCC,IAAMA,GAAA4kF,aAAAxpF,GAAiB2E,EAAA8kF,YAAA9kF,EAAA8kF,gBAAgCzpF,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAC,GAAa,GAAA5E,GAAA,SAAA4E,GAAkB,QAAA5E,KAAa,cAAA4E,KAAAqC,MAAAxD,KAAA4B,YAAA5B,KAA+C,MAAAO,GAAAhE,EAAA4E,GAAA5E,EAAAI,UAAAkoF,sBAAA,WAA2D,yBAAwBtoF,EAAAI,UAAAooF,sBAAA,WAA8C,4DAA2DxoF,EAAAI,UAAAsoF,sBAAA,WAA8C,yBAAwB1oF,EAAAI,UAAA+oF,iBAAA,SAAAvkF,GAA0C,GAAA5E,GAAAyD,KAAAqZ,QAAA1O,OAA2B,OAAAxJ,KAAAD,EAAA64E,eAAA32D,WAAArmB,MAAAR,EAAA6oB,aAAAlkB,EAAA64E,eAAAzf,mBAAAv9D,OAAAoE,IAAAD,EAAA64E,eAAAhyD,4BAAAhrB,OAAAoE,IAAAD,EAAA64E,eAAA9xD,4BAAAlrB,OAAAoE,IAAAD,EAAA64E,eAAA5xD,4BAAAprB,OAAAoE,IAAAD,EAAA64E,eAAA/xD,4BAAAjrB,OAAAoE,IAAAD,EAAA64E,eAAA7xD,4BAAAnrB,OAAAoE,IAAAD,EAAA64E,eAAA3xD,4BAAArrB,MAAAR,EAAA6oB,aAAAlkB,EAAA64E,eAAAva,yBAAAziE,WAAA,IAA6fR,EAAAI,UAAAkpF,OAAA,SAAA1kF,GAAgC,GAAA5E,GAAA4E,EAAA8kF,2BAAoC,OAAA1pF,KAAAkF,SAAAP,EAAA64E,eAAA9uD,iBAAAlvB,MAAAQ,EAAAkF,SAAAP,EAAA64E,eAAA7zD,WAAAnqB,KAAA,EAAAQ,EAAA+E,OAAA,GAAqH/E,EAAAI,UAAAorC,OAAA,SAAA7mC,EAAAC,EAAA5E,GAAoC,GAAA2E,EAAAU,UAAAN,QAAA,OAAAJ,EAAAU,UAAA,WAAsD,IAAArB,GAAAP,KAAAkmF,cAAAhlF,EAAAC,EAAA5E,EAAgC,KAAAgE,EAAA,QAAe,IAAAsB,GAAAtF,EAAA0pF,4BAAA1pF,EAAA0pF,4BAAA3kF,OAAA,EAAArF,EAAA,eAAAkF,EAAA,GAAkG,OAAAZ,GAAAe,OAAAf,EAAA2K,MAAA3K,EAAA6K,OAAAnP,EAAA+D,KAAA8lF,6BAAAvlF,EAAAojB,gBAAApnB,EAAA0pF,4BAAA1lF,IAAAe,OAAAO,GAAkItF,EAAAI,UAAAupF,cAAA,SAAAhlF,EAAAC,EAAA5E,GAA2C,qBAAA2E,EAAAnF,KAAAiE,KAAAmmF,wBAAAjlF,EAAAC,EAAA5E,GAAA,yBAAA2E,EAAAnF,KAAAiE,KAAAomF,kCAAAllF,EAAAC,EAAA5E,GAAA,iBAAA2E,EAAAnF,KAAAiE,KAAAqmF,0BAAAnlF,EAAAC,EAAA5E,OAAA,IAAmNA,EAAAI,UAAA0pF,0BAAA,SAAAnlF,EAAAC,EAAA5E,GAAuD,GAAAgE,EAAM,YAAAW,EAAAU,UAAAN,SAAAf,GAAmCkB,OAAAN,EAAAwiB,eAAAziB,EAAAU,UAAA,GAAAsJ,MAAAhK,EAAAU,UAAA,GAAAwJ,OAAAlK,EAAAU,UAAA,GAAAN,OAAA,IAA2Ff,GAAIhE,EAAAI,UAAAypF,kCAAA,SAAAllF,EAAAC,EAAA5E,GAA+D,OAAA2E,EAAAU,UAAA,IAAuB,GAAArB,EAAM,OAAAW,GAAAU,UAAAN,QAAA,IAAAf,GAAkCkB,OAAAN,EAAAwiB,eAAAziB,EAAAU,UAAA,GAAAsJ,MAAAhK,EAAAU,UAAA,GAAAwJ,OAAAlK,EAAAU,UAAA,GAAAN,OAAA,IAA2Ff,IAAKhE,EAAAI,UAAAwpF,wBAAA,SAAAjlF,EAAAC,EAAA5E,GAAqD,OAAA2E,EAAAU,UAAA,IAAuB,GAAArB,EAAM,OAAAW,GAAAU,UAAAN,QAAA,EAAAf,GAAgCkB,OAAAN,EAAAwiB,eAAAziB,EAAAU,UAAA,GAAAsJ,MAAAhK,EAAAU,UAAA,GAAAwJ,OAAAlK,EAAAU,UAAA,GAAAif,OAAA3f,EAAAU,UAAA,GAAAzB,KAAAe,EAAAU,UAAA,GAAAN,OAAA,GAAqI,IAAAJ,EAAAU,UAAAN,SAAAf,GAA6BkB,OAAAN,EAAAwiB,eAAAziB,EAAAU,UAAA,GAAAsJ,MAAAhK,EAAAU,UAAA,GAAAsJ,MAAAE,OAAAlK,EAAAU,UAAA,GAAAwJ,OAAAyV,OAAA3f,EAAAU,UAAA,GAAAzB,KAAAe,EAAAU,UAAA,GAAAN,OAAA,IAAkJf,IAAKhE,GAAG4E,EAAA4kF,aAAiBxpF,GAAAsF,GAAAX,EAAA25E,WAAAP,SAAA,cAAA/9E,GAAA4E,EAAAmlF,kBAAA/pF,GAAkE2E,EAAA8kF,YAAA9kF,EAAA8kF,gBAAgCzpF,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAC,GAAa,GAAA5E,GAAA,SAAA4E,GAAkB,QAAA5E,KAAa,cAAA4E,KAAAqC,MAAAxD,KAAA4B,YAAA5B,KAA+C,MAAAO,GAAAhE,EAAA4E,GAAA5E,EAAAI,UAAAkoF,sBAAA,WAA2D,yBAAwBtoF,EAAAI,UAAAooF,sBAAA,WAA8C,4DAA2DxoF,EAAAI,UAAAsoF,sBAAA,WAA8C,yBAAwB1oF,EAAAI,UAAA+oF,iBAAA,SAAAvkF,GAA0C,GAAA5E,GAAAyD,KAAAqZ,QAAA1O,OAA2B,OAAAxJ,KAAAD,EAAA64E,eAAA9uD,iBAAAluB,MAAAR,EAAA6oB,aAAAlkB,EAAA64E,eAAArS,yBAAA3qE,OAAAoE,IAAAD,EAAA64E,eAAA7zD,WAAAnpB,MAAAR,EAAA6oB,aAAAlkB,EAAA64E,eAAAtU,mBAAA1oE,WAAA,IAA0NR,EAAAI,UAAAkpF,OAAA,SAAA1kF,GAAgC,GAAA5E,GAAA4E,EAAA8kF,2BAAoC,OAAA1pF,KAAAkF,SAAAP,EAAA64E,eAAA9uD,iBAAAlvB,MAAAQ,EAAAkF,SAAAP,EAAA64E,eAAA7zD,WAAAnqB,KAAA,EAAAQ,EAAA+E,OAAA,GAAqH/E,EAAAI,UAAAorC,OAAA,SAAA7mC,EAAAC,EAAA5E,GAAoC,GAAA2E,EAAAU,UAAAN,QAAA,OAAAJ,EAAAU,UAAA,WAAsD,IAAArB,GAAAP,KAAAkmF,cAAAhlF,EAAAC,EAAA5E,EAAgC,KAAAgE,EAAA,QAAe,IAAAsB,GAAAtF,EAAA0pF,4BAAA1pF,EAAA0pF,4BAAA3kF,OAAA,CAA2E,OAAAf,GAAAe,OAAAf,EAAA2K,MAAA3K,EAAA6K,OAAA7K,EAAAipB,MAAAxpB,KAAA8lF,6BAAAvlF,EAAAojB,gBAAApjB,IAAAhE,EAAA0pF,4BAAA1lF,KAAAe,OAAAO,GAA6ItF,EAAAI,UAAAupF,cAAA,SAAAhlF,EAAAC,EAAA5E,GAA2C,qBAAA2E,EAAAnF,KAAAiE,KAAAumF,wBAAArlF,EAAAC,EAAA5E,GAAA,yBAAA2E,EAAAnF,KAAAiE,KAAAwmF,kCAAAtlF,EAAAC,EAAA5E,GAAA,iBAAA2E,EAAAnF,KAAAiE,KAAAymF,0BAAAvlF,EAAAC,EAAA5E,OAAA,IAAmNA,EAAAI,UAAA8pF,0BAAA,SAAAvlF,EAAAC,EAAA5E,GAAuD,GAAAgE,EAAM,YAAAW,EAAAU,UAAAN,SAAAf,GAAmCkB,OAAAN,EAAAwiB,eAAAziB,EAAAU,UAAA,GAAAsJ,MAAAhK,EAAAU,UAAA,GAAAwJ,OAAAlK,EAAAU,UAAA,GAAA4nB,MAAAtoB,EAAAU,UAAA,GAAAN,OAAA,IAAgHf,GAAIhE,EAAAI,UAAA6pF,kCAAA,SAAAtlF,EAAAC,EAAA5E,GAA+D,OAAA2E,EAAAU,UAAA,IAAuB,GAAArB,EAAM,OAAAW,GAAAU,UAAAN,QAAA,IAAAf,GAAkCkB,OAAAN,EAAAwiB,eAAAziB,EAAAU,UAAA,GAAAsJ,MAAAhK,EAAAU,UAAA,GAAAwJ,OAAAlK,EAAAU,UAAA,GAAA4nB,MAAAtoB,EAAAU,UAAA,GAAAN,OAAA,IAAgHf,IAAKhE,EAAAI,UAAA4pF,wBAAA,SAAArlF,EAAAC,EAAA5E,GAAqD,OAAA2E,EAAAU,UAAA,IAAuB,GAAArB,EAAM,OAAAW,GAAAU,UAAAN,QAAA,IAAAf,GAAkCkB,OAAAN,EAAAwiB,eAAAziB,EAAAU,UAAA,GAAAsJ,MAAAhK,EAAAU,UAAA,GAAAwJ,OAAAlK,EAAAU,UAAA,GAAA4nB,MAAAtoB,EAAAU,UAAA,GAAAif,OAAA3f,EAAAU,UAAA,GAAAzB,KAAAe,EAAAU,UAAA,GAAAN,OAAA,IAA0Jf,IAAKhE,GAAG4E,EAAA4kF,aAAiBxpF,GAAAsF,GAAAX,EAAA25E,WAAAP,SAAA,cAAA/9E,GAAA4E,EAAAulF,kBAAAnqF,GAAkE2E,EAAA8kF,YAAA9kF,EAAA8kF,gBAAgCzpF,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAC,GAAa,GAAA5E,GAAA,SAAA4E,GAAkB,QAAA5E,KAAa,cAAA4E,KAAAqC,MAAAxD,KAAA4B,YAAA5B,KAA+C,MAAAO,GAAAhE,EAAA4E,GAAA5E,EAAAI,UAAAkoF,sBAAA,WAA2D,wBAAuBtoF,EAAAI,UAAAooF,sBAAA,WAA8C,sBAAqBxoF,EAAAI,UAAAsoF,sBAAA,WAA8C,wBAAuB1oF,EAAAI,UAAA+oF,iBAAA,SAAAvkF,GAA0C,GAAA5E,GAAAyD,KAAAqZ,QAAA1O,OAA2B,OAAAxJ,KAAAD,EAAA64E,eAAAltE,aAAA9P,MAAAR,EAAA6oB,aAAAlkB,EAAA64E,eAAAniB,qBAAA76D,OAAAoE,IAAAD,EAAA64E,eAAAzpE,qBAAAvT,MAAAR,EAAA6oB,aAAAlkB,EAAA64E,eAAAliB,6BAAA96D,OAAAoE,IAAAD,EAAA64E,eAAAzL,iBAAAvxE,MAAAR,EAAA6oB,aAAAlkB,EAAA64E,eAAAvL,yBAAAzxE,OAAAoE,IAAAD,EAAA64E,eAAAxL,kBAAAxxE,MAAAR,EAAA6oB,aAAAlkB,EAAA64E,eAAAtL,0BAAA1xE,OAAAoE,IAAAD,EAAA64E,eAAAj9D,0BAAA/f,MAAAR,EAAA6oB,aAAAlkB,EAAA64E,eAAAhK,kCAAAhzE,OAAAoE,IAAAD,EAAA64E,eAAAl7D,eAAA9hB,MAAAR,EAAA6oB,aAAAlkB,EAAA64E,eAAA3I,uBAAAr0E,OAAAoE,IAAAD,EAAA64E,eAAA7L,kBAAAnxE,MAAAR,EAAA6oB,aAAAlkB,EAAA64E,eAAA3L,0BAAArxE,OAAAoE,IAAAD,EAAA64E,eAAA5L,oBAAApxE,MAAAR,EAAA6oB,aAAAlkB,EAAA64E,eAAA1L,4BAAAtxE,WAAA,IAAs4BR,EAAAI,UAAAkpF,OAAA,SAAA3kF,GAAgC,GAAAC,GAAAD,EAAA+kF,2BAAoC,OAAA9kF,KAAAG,OAAA,GAAoB/E,EAAAI,UAAAorC,OAAA,SAAA7mC,EAAAC,EAAA5E,GAAoC,GAAAgE,GAAAP,KAAAkmF,cAAA/kF,EAAAD,EAA8B,KAAAX,EAAA,QAAe,IAAAsB,GAAAtF,EAAA0pF,4BAAA1pF,EAAA0pF,4BAAA3kF,OAAA,CAA2E,OAAA/E,GAAA0pF,4BAAA1lF,IAAAe,OAAAO,GAAkDtF,EAAAI,UAAAupF,cAAA,SAAAhlF,EAAAC,GAAyC,GAAA5E,GAAAyD,KAAA2mF,UAAAxlF,EAAwB,OAAAA,GAAAS,UAAAN,QAAA,GAA8BG,OAAAP,EAAAI,OAAA/E,EAAAqqF,MAAAzlF,EAAAS,UAAA,GAAAmN,OAAA5N,EAAAS,UAAA,GAAAilF,aAAA1lF,EAAAS,UAAA,GAAAT,EAAAS,UAAA,GAAAN,QAAA,GAAkH,IAAAH,EAAAS,UAAAN,QAAyBG,OAAAP,EAAAI,OAAA/E,EAAAqqF,MAAAzlF,EAAAS,UAAA,QAAuC,IAAQrF,EAAAI,UAAAgqF,UAAA,SAAAzlF,GAAmC,GAAAC,IAAA,CAAS,YAAAD,EAAAU,UAAAN,SAAAH,EAAAD,EAAAU,UAAA,IAAAT,GAAA,IAAAA,EAAA,gBAAAD,GAAAU,UAAA,GAAAV,EAAAU,UAAA,GAAAV,EAAAU,UAAA,GAAAV,EAAAU,UAAA,GAAAwK,OAAAlL,EAAAU,UAAA,GAAAwK,OAAAkT,WAAApe,EAAAU,UAAA,GAAA0d,YAAApe,EAAAU,UAAA,GAAAN,QAAA,KAAAH,GAAyO5E,GAAG4E,EAAA4kF,aAAiBxpF,GAAAsF,GAAAX,EAAA25E,WAAAP,SAAA,WAAA/9E,GAAA4E,EAAA2lF,eAAAvqF,GAA4D2E,EAAA8kF,YAAA9kF,EAAA8kF,gBAAgCzpF,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAC,GAAa,GAAA5E,GAAA,SAAA4E,GAAkB,QAAA5E,KAAa,cAAA4E,KAAAqC,MAAAxD,KAAA4B,YAAA5B,KAA+C,MAAAO,GAAAhE,EAAA4E,GAAA5E,EAAAI,UAAAkoF,sBAAA,WAA2D,8BAA6BtoF,EAAAI,UAAAooF,sBAAA,WAA8C,+BAA8BxoF,EAAAI,UAAAsoF,sBAAA,WAA8C,8BAA6B1oF,EAAAI,UAAA+oF,iBAAA,SAAAvkF,GAA0C,GAAA5E,GAAAyD,KAAAqZ,QAAA1O,OAA2B,IAAAxJ,IAAAD,EAAA64E,eAAA53D,aAAAplB,MAAA,MAAAR,GAAA6oB,aAAAlkB,EAAA64E,eAAAhV,qBAAAhoE,QAA8GR,EAAAI,UAAAkpF,OAAA,SAAA3kF,GAAgC,GAAAC,GAAAD,EAAA+kF,2BAAoC,OAAA9kF,KAAAG,OAAA,GAAoB/E,EAAAI,UAAAorC,OAAA,SAAA7mC,EAAAC,EAAA5E,GAAoC,GAAAgE,GAAAP,KAAAkmF,cAAAhlF,EAAAC,EAA8B,KAAAZ,EAAA,QAAe,IAAAsB,GAAAtF,EAAA0pF,4BAAA1pF,EAAA0pF,4BAAA3kF,OAAA,CAA2E,OAAAf,GAAAe,OAAAf,EAAA2K,MAAA3K,EAAA6K,OAAApL,KAAA8lF,6BAAAvlF,EAAAojB,gBAAApnB,EAAA0pF,4BAAA1lF,IAAAe,OAAAO,GAAgItF,EAAAI,UAAAupF,cAAA,SAAAhlF,EAAAC,GAAyC,OAAOM,OAAAN,EAAAwiB,eAAAziB,EAAAU,UAAA,GAAAsJ,MAAAhK,EAAAU,UAAA,GAAAwJ,OAAAlK,EAAAU,UAAA,GAAAN,OAAA,IAA4F/E,GAAG4E,EAAA4kF,aAAiBxpF,GAAAsF,GAAAX,EAAA25E,WAAAP,SAAA,iBAAA/9E,GAAA4E,EAAA4lF,qBAAAxqF,GAAwE2E,EAAA8kF,YAAA9kF,EAAA8kF,gBAAgCzpF,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAC,GAAa,GAAA5E,GAAA,WAAiB,QAAA4E,GAAAD,EAAAC,GAAgBnB,KAAAqZ,QAAAnY,EAAAlB,KAAAi7E,OAAA95E,EAAAnB,KAAAgnF,aAA8ChnF,KAAAinF,wBAA6BjnF,KAAAknF,sBAA2BlnF,KAAAm9E,mBAAAj8E,EAAAi8E,mBAAAn9E,KAAA85C,KAAA,GAAA54C,GAAAu6E,gBAAAz7E,KAAAmnF,yBAAAnnF,KAAAonF,gBAAiI,MAAAjmF,GAAAxE,UAAAujF,cAAA,SAAAh/E,GAA6C,GAAAC,GAAAnB,KAAAknF,mBAAAhmF,EAAAnF,KAAsC,IAAAoF,EAAA,OAAA5E,GAAA,EAAAgE,EAAAY,EAAqB5E,EAAAgE,EAAAe,OAAW/E,IAAA,CAAK,GAAAsF,GAAAtB,EAAAhE,EAAWsF,GAAAX,KAAMC,EAAAxE,UAAAmiF,aAAA,WAAqC,OAAA59E,KAAAlB,MAAAgnF,UAAA,GAAAhnF,KAAAgnF,UAAApqF,eAAAsE,GAAA,CAAiE,GAAAC,GAAAnB,KAAAgnF,UAAA9lF,EAAwBC,GAAA29E,iBAAkB39E,EAAAxE,UAAAgjF,YAAA,WAAoC,OAAAz+E,KAAAlB,MAAAgnF,UAAA,GAAAhnF,KAAAgnF,UAAApqF,eAAAsE,GAAA,CAAiE,GAAAC,GAAAnB,KAAAgnF,UAAA9lF,EAAwBC,GAAAw+E,gBAAiBx+E,EAAAxE,UAAAijF,0BAAA,SAAA1+E,GAAmD,OAAAC,KAAAnB,MAAAgnF,UAAA,GAAAhnF,KAAAgnF,UAAApqF,eAAAuE,GAAA,CAAiE,GAAA5E,GAAAyD,KAAAgnF,UAAA7lF,EAAwB5E,GAAAqjF,0BAAA1+E,KAAgCC,EAAAxE,UAAAwqF,uBAAA,WAA+C,OAAAhmF,KAAAnB,MAAAqZ,QAAA0kE,kBAAA,GAAA/9E,KAAAqZ,QAAA0kE,kBAAAnhF,eAAAuE,GAAA,CAAiG,GAAA5E,GAAAyD,KAAAqZ,QAAA0kE,kBAAA58E,GAAAZ,EAAAW,EAAA25E,WAAAN,gBAAAh+E,EAA0EgE,KAAAP,KAAAinF,qBAAA1mF,GAAAhE,KAAqC4E,EAAAxE,UAAAyqF,cAAA,WAAsC,OAAAjmF,KAAAnB,MAAAinF,qBAAA,GAAAjnF,KAAAinF,qBAAArqF,eAAAuE,GAAA,CAAuF,GAAA5E,GAAA2E,EAAAk0D,OAAeuvB,WAAAxjF,EAAA24C,KAAA95C,KAAA85C,MAA4B95C,KAAAm9E,oBAAA58E,EAAA,GAAAP,MAAAinF,qBAAA9lF,GAAA5E,EAAAyD,KAAAi7E,OAA4Ej7E,MAAAgnF,UAAA7lF,GAAAZ,IAAA+kF,kBAAAtlF,KAAAknF,sBAAkE/lF,IAAMA,GAAAkmF,YAAA9qF,GAAgB2E,EAAAs7E,QAAAt7E,EAAAs7E,YAAwBjgF,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAC,GAAa,GAAA5E,GAAA,WAAiB,QAAA4E,GAAAD,EAAAC,GAAgBnB,KAAAqZ,QAAAnY,EAAAlB,KAAAi7E,OAAA95E,EAAAnB,KAAAsnF,iBAAkDtnF,KAAAunF,8BAAmCvnF,KAAAwnF,qBAA0BxnF,KAAAm9E,mBAAAj8E,EAAAi8E,mBAAAn9E,KAAAynF,6BAAAznF,KAAA0nF,oBAAyG,MAAAvmF,GAAAxE,UAAAmiF,aAAA,SAAA59E,GAA4C,OAAAC,KAAAnB,MAAAsnF,cAAA,GAAAtnF,KAAAsnF,cAAA1qF,eAAAuE,GAAA,CAAyE,GAAA5E,GAAAyD,KAAAsnF,cAAAnmF,GAAAZ,EAAAhE,EAAAuiF,cAA+CviF,GAAAorF,4BAAAzmF,EAAAi+E,UAAAh+E,GAAAZ,KAAiDY,EAAAxE,UAAAgjF,YAAA,SAAAz+E,GAAqC,OAAAC,KAAAnB,MAAAsnF,cAAA,GAAAtnF,KAAAsnF,cAAA1qF,eAAAuE,GAAA,CAAyE,GAAA5E,GAAAyD,KAAAsnF,cAAAnmF,GAAAZ,EAAAhE,EAAAojF,aAA8CpjF,GAAAorF,4BAAAzmF,EAAAk+E,SAAAj+E,GAAAZ,KAAgDY,EAAAxE,UAAAyjF,aAAA,SAAAl/E,GAAsC,GAAAC,GAAAnB,KAAAunF,2BAAArmF,EAAAnF,KAA8C,IAAAoF,EAAA,OAAA5E,GAAA,EAAAgE,EAAAY,EAAqB5E,EAAAgE,EAAAe,OAAW/E,IAAA,CAAK,GAAAsF,GAAAtB,EAAAhE,EAAWsF,GAAAX,KAAMC,EAAAxE,UAAA8qF,2BAAA,WAAmD,OAAAtmF,KAAAnB,MAAAqZ,QAAAskE,eAAA,GAAA39E,KAAAqZ,QAAAskE,eAAA/gF,eAAAuE,GAAA,CAA2F,GAAA5E,GAAAyD,KAAAqZ,QAAAskE,eAAAx8E,GAAAZ,EAAAW,EAAA25E,WAAAR,aAAA99E,EAAoEgE,KAAAP,KAAAwnF,kBAAAjnF,GAAAhE,KAAkC4E,EAAAxE,UAAA+qF,kBAAA,WAA0C,OAAAvmF,KAAAnB,MAAAwnF,kBAAA,GAAAxnF,KAAAwnF,kBAAA5qF,eAAAuE,GAAA,CAAiF,GAAA5E,GAAA2E,EAAAk0D,OAAewyB,UAAAzmF,GAAYnB,KAAAm9E,oBAAA58E,EAAA,GAAAP,MAAAwnF,kBAAArmF,GAAA5E,EAAAyD,KAAAi7E,OAAyEj7E,MAAAsnF,cAAAnmF,GAAAZ,IAAA+kF,kBAAAtlF,KAAAunF,8BAA8EpmF,IAAMA,GAAA0mF,SAAAtrF,GAAa2E,EAAAs7E,QAAAt7E,EAAAs7E,YAAwBjgF,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAC,GAAa,GAAA5E,GAAA,WAAiB,QAAA4E,GAAAD,EAAAC,GAAgBnB,KAAAqZ,QAAAnY,EAAAlB,KAAAi7E,OAAA95E,EAAAnB,KAAA8nF,2BAA4D9nF,KAAA+nF,gBAAqB/nF,KAAAm9E,mBAAAj8E,EAAAi8E,mBAAAn9E,KAAAgoF,4BAAAhoF,KAAAioF,mBAAuG,MAAA9mF,GAAAxE,UAAAsjF,gBAAA,SAAA/+E,GAA+C,OAAAC,KAAAnB,MAAA+nF,aAAA,GAAA/nF,KAAA+nF,aAAAnrF,eAAAuE,GAAA,CAAuE,OAAA5E,GAAAyD,KAAA+nF,aAAA5mF,GAAAZ,EAAA,EAAmCA,EAAAW,EAAAU,UAAAN,OAAqBf,IAAA,CAAK,GAAAsB,GAAAX,EAAAU,UAAArB,EAAqB,IAAAhE,EAAA+gF,eAAAz7E,GAAA,MAA6B,GAAAtF,EAAA+gF,eAAAp8E,EAAAmC,QAAA,QAAqClC,EAAAxE,UAAA2gF,eAAA,SAAAp8E,GAAwC,OAAAC,KAAAnB,MAAA+nF,aAAA,GAAA/nF,KAAA+nF,aAAAnrF,eAAAuE,GAAA,CAAuE,GAAA5E,GAAAyD,KAAA+nF,aAAA5mF,GAAAZ,EAAAhE,EAAA+gF,eAAAp8E,EAAiD,IAAAX,EAAA,MAAAA,KAAeY,EAAAxE,UAAAqrF,0BAAA,WAAkD,OAAA7mF,KAAAnB,MAAAqZ,QAAA+kE,qBAAA,GAAAp+E,KAAAqZ,QAAA+kE,qBAAAxhF,eAAAuE,GAAA,CAAuG,GAAA5E,GAAAyD,KAAAqZ,QAAA+kE,qBAAAj9E,GAAAZ,EAAAW,EAAA25E,WAAAJ,mBAAAl+E,GAAAsF,EAAAX,EAAA25E,WAAAH,mBAAAn+E,EAAqHgE,IAAAsB,IAAA7B,KAAA8nF,wBAAAvnF,IAAwCotB,KAAApxB,EAAA4D,KAAA0B,MAAiBV,EAAAxE,UAAAsrF,iBAAA,WAAyC,OAAA9mF,KAAAnB,MAAA8nF,wBAAA,GAAA9nF,KAAA8nF,wBAAAlrF,eAAAuE,GAAA,CAA6F,GAAA5E,GAAA2E,EAAAk0D,OAAe8yB,SAAA/mF,EAAAhB,KAAAH,KAAA8nF,wBAAA3mF,GAAAhB,MAAqDH,KAAAm9E,oBAAA58E,EAAA,GAAAP,MAAA8nF,wBAAA3mF,GAAAwsB,KAAApxB,EAAAyD,KAAAi7E,OAAoFj7E,MAAA+nF,aAAA5mF,GAAAZ,IAAwBY,IAAMA,GAAAgnF,eAAA5rF,GAAmB2E,EAAAs7E,QAAAt7E,EAAAs7E,YAAwBjgF,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAC,GAAaA,EAAAinF,cAAA,2HAA4I,IAAA7rF,GAAA,WAAiB,QAAA4E,GAAAD,EAAAC,GAAgBnB,KAAAqZ,QAAAnY,EAAAlB,KAAAi7E,OAAA95E,EAAAnB,KAAA2K,QAAAzJ,EAAAyJ,QAAA3K,KAAA28E,eAAAz7E,EAAAy7E,eAAA38E,KAAAu9E,WAAAr8E,EAAAq8E,WAAAv9E,KAAAo9E,cAAAl8E,EAAAk8E,cAAAp9E,KAAA4nF,UAAA1mF,EAAA0mF,UAAA5nF,KAAAqoF,gBAAAroF,KAAAsoF,qBAAAtoF,KAAAuoF,sBAAAvoF,KAAAwoF,2BAAAxoF,KAAAyoF,oBAAAzoF,KAAA0oF,yBAAqV,MAAAxsF,QAAAC,eAAAgF,EAAAxE,UAAA,6BAAsEL,IAAA,WAAe,UAASD,YAAA,EAAAD,cAAA,IAA+B+E,EAAAxE,UAAAmiF,aAAA,SAAA59E,GAAuC,gBAAAA,OAAA,GAAAlB,KAAA2oF,2BAAyDznF,GAAAlB,KAAA2nF,4BAAA3nF,KAAA4oF,gBAAyD5oF,KAAA6oF,gCAAA7oF,KAAA8oF,6BAAA9oF,KAAA4oF,gBAA4F5oF,KAAA+oF,eAAoB5nF,EAAAxE,UAAAgjF,YAAA,WAAoC,MAAA3/E,MAAA2nF,2BAAA3nF,KAAA6oF,+BAAA7oF,KAAAgpF,YAAA,IAAAhpF,KAAA4oF,cAAkHznF,EAAAxE,UAAA2oF,kBAAA,SAAApkF,GAA2C,OAAAC,KAAAnB,MAAAuoF,sBAAA,GAAAvoF,KAAAuoF,sBAAA3rF,eAAAuE,GAAA,OAAA5E,GAAA,EAAAgE,EAAAP,KAAAuoF,sBAAApnF,GAAoI5E,EAAAgE,EAAAe,OAAW/E,IAAA,CAAK,GAAAsF,GAAAtB,EAAAhE,EAAW2E,GAAAW,GAAAX,EAAAW,OAAAX,EAAAW,GAAAyC,KAAAtE,KAAAipF,gBAAAv3E,KAAA1R,OAAyD,OAAA/D,GAAA,EAAAR,EAAAuE,KAAAqoF,gBAAmCpsF,EAAAR,EAAA6F,OAAWrF,IAAA,CAAK,GAAAa,GAAArB,EAAAQ,EAAWiF,GAAApE,GAAAoE,EAAApE,OAAAoE,EAAApE,GAAAwH,KAAAtE,KAAAkpF,iBAAAx3E,KAAA1R,SAA2DmB,EAAAxE,UAAAmkF,aAAA,WAAqC,MAAA9gF,MAAA4oF,cAAyBznF,EAAAxE,UAAA2rF,mBAAA,WAA2C,UAASnnF,EAAAxE,UAAA6rF,yBAAA,WAAiD,UAASrnF,EAAAxE,UAAAmsF,2BAAA,WAAmD9oF,KAAA4oF,eAAA5oF,KAAA+oF,cAAA/oF,KAAA4oF,eAA0DznF,EAAAxE,UAAAssF,gBAAA,SAAA/nF,GAAyC,OAAAC,GAAAnB,KAAAyoF,oBAAAvnF,EAAAnF,MAAAQ,EAAA,EAAAgE,EAAAY,EAAmD5E,EAAAgE,EAAAe,OAAW/E,IAAA,CAAK,GAAAsF,GAAAtB,EAAAhE,EAAW,KAAAyD,KAAAmpF,qBAAAjoF,EAAAW,GAAA,MAA0C7B,MAAA2oF,wBAAA9mF,GAAA7B,KAAA2oF,wBAAA9mF,OAAA7B,KAAA2oF,wBAAA9mF,GAAAyC,KAAApD,KAA6GC,EAAAxE,UAAAwsF,qBAAA,SAAAjoF,EAAAC,GAAgD,UAASA,EAAAxE,UAAAusF,iBAAA,SAAAhoF,GAA0ClB,KAAAopF,sBAAAloF,KAAAlB,KAAA6oF,+BAAA7oF,KAAAgpF,QAAA9nF,GAAAlB,KAAAqpF,kBAAAnoF,EAAAlB,KAAA4nF,WAAA5nF,KAAA4oF,aAAA5oF,KAAA8+E,cAAA,KAAsK39E,EAAAxE,UAAAysF,sBAAA,SAAAloF,GAA+C,UAASC,EAAAxE,UAAAqsF,QAAA,SAAA9nF,GAAiC,OAAAC,KAAAnB,MAAA2oF,wBAAA,GAAA3oF,KAAA2oF,wBAAA/rF,eAAAuE,GAAA,CAA6F,GAAA5E,GAAAyD,KAAA2oF,wBAAAxnF,GAAAZ,EAAAhE,EAAA+E,OAAA,CAAmD,IAAAf,GAAA,KAAAW,EAAA,CAAc,OAAAW,GAAA,EAAYA,EAAAtB,EAAIsB,IAAA,CAAK,GAAA5F,GAAAM,EAAAsF,EAAW5F,GAAAqtF,iBAAApoF,EAAA+G,GAAAjI,KAAAupF,2BAAAttF,EAAA,IAA8D,GAAAR,GAAAuE,KAAAwpF,2BAAAroF,EAAAD,EAAAqhF,kBAAAzlF,EAAAP,EAAAgE,EAAmEzD,GAAAwsF,iBAAApoF,EAAA+G,GAAAjI,KAAAypF,gBAAAzpF,KAAA4oF,aAAAznF,GAAAnB,KAAA+oF,cAAA5nF,IAAAnB,KAAAupF,2BAAAzsF,EAAA,IAAArB,EAAAuE,KAAAupF,2BAAAzsF,EAAA,IAAAkD,KAAAupF,2BAAAzsF,EAAA,QAA6M,QAAA+E,GAAA,EAAiBA,EAAAtF,EAAA+E,OAAWO,IAAA,CAAK,GAAA/E,GAAAP,EAAAsF,EAAW7B,MAAAupF,2BAAAzsF,EAAA,OAAwCqE,EAAAxE,UAAA0sF,gBAAA,WAAwC,OAAAnoF,IAAA,iFAAAC,EAAA,EAAA5E,EAAA2E,EAAoGC,EAAA5E,EAAA+E,OAAWH,IAAA,CAAK,GAAAZ,GAAAhE,EAAA4E,EAAWnB,MAAA4oF,aAAAroF,MAAwB,OAAAsB,KAAA7B,MAAA2oF,wBAAA,GAAA3oF,KAAA2oF,wBAAA/rF,eAAAiF,GAAA,OAAA5F,GAAA+D,KAAA2oF,wBAAA9mF,GAAApG,EAAA,EAAAqB,EAAAb,EAA8IR,EAAAqB,EAAAwE,OAAW7F,IAAA,CAAK,GAAA2/B,GAAAt+B,EAAArB,EAAW,QAAA2/B,EAAAonD,QAAiB,QAAAxiF,KAAA4oF,aAAAc,iBAAAplF,KAAA82B,EAAAnzB,GAAsD,MAAM,SAAAjI,KAAA4oF,aAAAe,mBAAArlF,KAAA82B,EAAAnzB,GAAwD,MAAM,SAAAjI,KAAA4oF,aAAAgB,oBAAAtlF,KAAA82B,EAAAnzB,GAAyD,MAAM,SAAAjI,KAAA4oF,aAAAiB,gBAAAvlF,KAAA82B,EAAAnzB,KAAsD,OAAAvM,GAAA,EAAAG,EAAAqF,EAAgBxF,EAAAG,EAAAyF,OAAW5F,IAAA,CAAK,GAAA6E,GAAA1E,EAAAH,EAAWsE,MAAA4oF,aAAAroF,GAAAe,cAAAtB,MAAA4oF,aAAAroF,KAA0DY,EAAAxE,UAAA4sF,2BAAA,SAAAroF,EAAAC,GAAsD,MAAAD,GAAAshF,OAAArhF,IAAAD,EAAAshF,OAAArhF,GAAA,IAAmCA,EAAAxE,UAAA8sF,gBAAA,SAAAvoF,EAAAC,GAA2C,SAAAD,UAAAC,GAAA,QAA+B,IAAAD,IAAAC,EAAA,QAAkB,IAAAA,IAAAD,EAAA,QAAkB,aAAAA,GAAA,OAAAA,EAAA,QAAiC,IAAAA,EAAAI,QAAAH,EAAAG,QAAA,gBAAAJ,GAAA,CAA2C,GAAAA,EAAAI,SAAAH,EAAAG,OAAA,QAAgC,QAAA/E,GAAA,EAAYA,EAAA2E,EAAAI,OAAW/E,IAAA,GAAA2E,EAAA3E,KAAA4E,EAAA5E,GAAA,QAA4B,UAAS,MAAA2E,KAAAC,GAAaA,EAAAxE,UAAAmtF,cAAA,SAAA5oF,EAAAC,GAAyC,UAASA,EAAAxE,UAAAotF,eAAA,SAAA5oF,GAAwC,GAAAA,EAAA,OAAY6oF,qBAAA9oF,EAAA2hF,aAAAC,kBAAA3hF,IAAAnB,KAAAqZ,QAAAikE,eAAAn8E,GAAA8kF,4BAAA9kF,EAAA8kF,4BAAAgE,mBAAA9oF,EAAA8oF,qBAA4L9oF,EAAAxE,UAAAksF,6BAAA,WAAqD7oF,KAAAo9E,eAAA,GAAAp9E,KAAAkqF,kBAAAlqF,KAAAo9E,eAAA,IAAqEj8E,EAAAxE,UAAA6sF,2BAAA,SAAAtoF,EAAAC,GAAsDnB,KAAAo9E,eAAA,EAAuB,IAAA7gF,GAAAyD,KAAA8pF,cAAA5oF,EAAAC,EAA8B,OAAAnB,MAAAo9E,eAAA,GAAA7gF,GAAgC4E,EAAAxE,UAAA+rF,uBAAA,WAA+C,GAAAxnF,KAAS,QAAAC,KAAAnB,MAAAuoF,sBAAA,GAAAvoF,KAAAuoF,sBAAA3rF,eAAAuE,GAAA,OAAA5E,GAAA,EAAAgE,EAAAP,KAAAuoF,sBAAApnF,GAAoI5E,EAAAgE,EAAAe,OAAW/E,IAAA,CAAK,GAAAsF,GAAAtB,EAAAhE,EAAW2E,GAAAW,GAAAX,EAAAW,OAAAX,EAAAW,GAAAyC,KAAAnD,GAA2B,MAAAD,IAASC,IAAMA,GAAAgpF,UAAA5tF,GAAc2E,EAAAkpF,SAAAlpF,EAAAkpF,aAA0B7tF,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAC,GAAa,GAAA5E,GAAA,SAAA4E,GAAkB,QAAA5E,KAAa,cAAA4E,KAAAqC,MAAAxD,KAAA4B,YAAA5B,KAA+C,MAAAO,GAAAhE,EAAA4E,GAAA5E,EAAAI,UAAA0tF,oBAAA,WAAyD,UAAS9tF,EAAAI,UAAA2tF,oBAAA,WAA4C,UAAS/tF,EAAAI,UAAA6rF,yBAAA,WAAiDxoF,KAAAuqF,cAAAvqF,KAAAuqF,WAAAjmF,KAAAtE,KAAAqqF,uBAAArqF,KAAA28E,eAAA,GAAA38E,KAAAuqF,WAAAjmF,KAAAtE,KAAAsqF,sBAA4I,QAAAppF,MAAYC,EAAA,EAAKA,GAAAnB,KAAA28E,kBAAAx7E,EAAAnB,KAAAuqF,WAAAjpF,QAAoDH,IAAA,GAAAnB,KAAAuqF,WAAAppF,EAAA,UAAA5E,GAAA,EAAAgE,EAAAP,KAAAuqF,WAAAppF,EAAA,GAA+D5E,EAAAgE,EAAAe,OAAW/E,IAAA,CAAK,GAAAsF,GAAAtB,EAAAhE,EAAW,IAAAsF,EAAA2oF,eAAA,OAAAvuF,GAAA,EAAAR,EAAAoG,EAAA2oF,eAAmDvuF,EAAAR,EAAA6F,OAAWrF,IAAA,CAAK,GAAAa,GAAArB,EAAAQ,EAAWiF,GAAAW,EAAA4oF,SAAA1uF,MAAAmF,EAAAW,EAAA4oF,SAAA1uF,UAAAmF,EAAAW,EAAA4oF,SAAA1uF,MAAAuI,KAAAxH,IAAsE,MAAAoE,IAAS3E,EAAAI,UAAAutF,gBAAA,WAAwC,OAAA/oF,GAAA,EAAYA,GAAAnB,KAAA28E,kBAAAx7E,EAAAnB,KAAAuqF,WAAAjpF,QAAoDH,IAAA,OAAA5E,GAAA,EAAAgE,EAAAP,KAAAuqF,WAAAppF,EAAA,GAAuC5E,EAAAgE,EAAAe,OAAW/E,IAAA,CAAK,GAAAsF,GAAAtB,EAAAhE,GAAAN,EAAA+D,KAAA0qF,yBAAA7oF,GAAApG,EAAAyF,EAAA2hF,aAAAC,kBAAA7mF,EAAoF,IAAAR,EAAAuE,KAAA4oF,aAAA/mF,EAAA4oF,SAAA1uF,MAAAN,MAA0C,CAAK,GAAAqB,GAAAkD,KAAA2qF,wBAAA1uF,EAAA4F,EAAwC7B,MAAA4oF,aAAA/mF,EAAA4oF,SAAA1uF,MAAAe,KAAuCP,EAAAI,UAAA+tF,yBAAA,SAAAxpF,GAAkD,MAAAA,GAAAupF,SAAAlW,gBAAAv0E,KAAAu9E,WAAAr8E,EAAAupF,SAAAlW,eAAA,aAAArzE,EAAAupF,SAAAlW,cAAA,kBAAAv0E,KAAA2K,QAAAya,aAAAlkB,EAAAupF,SAAA1tF,QAAgLR,EAAAI,UAAAguF,wBAAA,SAAAxpF,EAAA5E,GAAmD,UAAA4E,EAAA,YAAyB,aAAAA,EAAA,iBAAgC,SAAA5E,EAAAquF,WAAA,MAAAzpF,KAAAgb,SAAA,GAAAhb,EAAA,mCAAA6a,OAAA7a,EAAAG,QAAAH,CAAoG,oBAAAA,IAAAD,EAAA64E,eAAA1kB,gBAAAl0D,GAAA,CAA4D,QAAA5E,EAAAquF,WAAA,CAAsB,GAAArqF,GAAAhE,EAAAiuF,eAAAjuF,EAAAiuF,eAAA,SAAkD,OAAArpF,GAAAD,EAAA64E,eAAAxkB,uBAAAp0D,EAAAZ,GAAsD,MAAAY,GAAS,GAAAA,EAAAG,QAAA,gBAAAH,GAAA,CAAiC,OAAAU,MAAA5F,EAAA,EAAiBA,EAAAkF,EAAAG,OAAWrF,IAAA4F,EAAAyC,KAAAnD,EAAAlF,GAAiB,OAAA4F,GAAS,MAAAV,IAAS5E,GAAG4E,EAAAgpF,UAAchpF,GAAA0pF,eAAAtuF,GAAmB2E,EAAAkpF,SAAAlpF,EAAAkpF,aAA0B7tF,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAC,IAAa,SAAA5E,GAAa,GAAAsF,GAAA,SAAAV,GAAkB,QAAA5E,GAAA2E,EAAA3E,GAAgB,GAAAgE,GAAAY,EAAAxF,KAAAqE,KAAAkB,EAAA3E,IAAAyD,IAA6B,OAAAO,GAAAqoF,aAAAroF,EAAAu+E,eAAAv+E,EAAyC,MAAAA,GAAAhE,EAAA4E,GAAA5E,EAAAI,UAAA0tF,oBAAA,WAAyD,QAAQI,SAAAvpF,EAAA64E,eAAAlf,WAAqC4vB,SAAAvpF,EAAA64E,eAAAnf,SAAmC6vB,SAAAvpF,EAAA64E,eAAAjf,UAAoC2vB,SAAAvpF,EAAA64E,eAAA7b,2BAAqDusB,SAAAvpF,EAAA64E,eAAAvf,UAAoCiwB,SAAAvpF,EAAA64E,eAAAxf,iBAA2CkwB,SAAAvpF,EAAA64E,eAAAjgB,WAAqC2wB,SAAAvpF,EAAA64E,eAAAhgB,aAAuC0wB,SAAAvpF,EAAA64E,eAAA/f,YAAsCywB,SAAAvpF,EAAA64E,eAAA9f,aAAuCwwB,SAAAvpF,EAAA64E,eAAA7f,aAAuCuwB,SAAAvpF,EAAA64E,eAAA5f,eAAyCswB,SAAAvpF,EAAA64E,eAAAlgB,gBAA0C4wB,SAAAvpF,EAAA64E,eAAAjiB,aAAuC2yB,SAAAvpF,EAAA64E,eAAA/hB,2BAAqDyyB,SAAAvpF,EAAA64E,eAAAhiB,2BAAqD0yB,SAAAvpF,EAAA64E,eAAA/e,iCAAA4vB,WAAA,KAA2EH,SAAAvpF,EAAA64E,eAAAhf,+BAAA6vB,WAAA,KAAyEH,SAAAvpF,EAAA64E,eAAAlc,mCAA6D4sB,SAAAvpF,EAAA64E,eAAAta,4BAAsDgrB,SAAAvpF,EAAA64E,eAAA/b,+BAAyDysB,SAAAvpF,EAAA64E,eAAA/U,wBAAkDylB,SAAAvpF,EAAA64E,eAAAhc,0BAAoD0sB,SAAAvpF,EAAA64E,eAAApgB,mBAA6C8wB,SAAAvpF,EAAA64E,eAAAnc,sBAAgD6sB,SAAAvpF,EAAA64E,eAAArc,qBAA+C+sB,SAAAvpF,EAAA64E,eAAAjc,iCAA2D2sB,SAAAvpF,EAAA64E,eAAApc,6BAAuD8sB,SAAAvpF,EAAA64E,eAAAngB,oBAA8C6wB,SAAAvpF,EAAA64E,eAAArF,iCAA2D+V,SAAAvpF,EAAA64E,eAAAlB,8BAAwD4R,SAAAvpF,EAAA64E,eAAAjB,0BAAmDv8E,EAAAI,UAAA2tF,oBAAA,WAA4C,QAAQG,SAAAvpF,EAAA64E,eAAAnU,sBAAgD6kB,SAAAvpF,EAAA64E,eAAA7T,2BAAqDukB,SAAAvpF,EAAA64E,eAAA1F,gCAA0DoW,SAAAvpF,EAAA64E,eAAA5N,wBAAkDse,SAAAvpF,EAAA64E,eAAAlI,2CAAqE4Y,SAAAvpF,EAAA64E,eAAAtI,8BAAwDgZ,SAAAvpF,EAAA64E,eAAAnI,yCAAmE6Y,SAAAvpF,EAAA64E,eAAA7O,mBAA6Cuf,SAAAvpF,EAAA64E,eAAApT,oBAA8C8jB,SAAAvpF,EAAA64E,eAAAjU,uBAAiD2kB,SAAAvpF,EAAA64E,eAAAlU,wBAAkD4kB,SAAAvpF,EAAA64E,eAAAtT,gCAA0DgkB,SAAAvpF,EAAA64E,eAAAvI,8BAAwDiZ,SAAAvpF,EAAA64E,eAAA/T,kCAA4DykB,SAAAvpF,EAAA64E,eAAA3T,2BAAqDqkB,SAAAvpF,EAAA64E,eAAA/L,cAAwCyc,SAAAvpF,EAAA64E,eAAArT,0BAAoD+jB,SAAAvpF,EAAA64E,eAAAhU,uBAAiD0kB,SAAAvpF,EAAA64E,eAAAnK,gDAA0E6a,SAAAvpF,EAAA64E,eAAAlK,0CAAoE4a,SAAAvpF,EAAA64E,eAAAvK,6CAAuEib,SAAAvpF,EAAA64E,eAAApI,yBAAmD8Y,SAAAvpF,EAAA64E,eAAArI,8BAAwD+Y,SAAAvpF,EAAA64E,eAAA1T,yBAAmDokB,SAAAvpF,EAAA64E,eAAAvT,+BAAyDikB,SAAAvpF,EAAA64E,eAAAxI,4BAAsDkZ,SAAAvpF,EAAA64E,eAAA9T,gCAA0DwkB,SAAAvpF,EAAA64E,eAAA5T,4BAAqD5pE,GAAG4E,EAAA0pF,eAAmBtuF,GAAAuuF,aAAAjpF,GAAiBV,EAAA4pF,cAAA5pF,EAAA4pF,kBAAoC7pF,EAAAkpF,SAAAlpF,EAAAkpF,aAA0B7tF,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAC,IAAa,SAAA5E,GAAa,GAAAsF,GAAA,SAAAV,GAAkB,QAAA5E,GAAA2E,EAAA3E,GAAgB,GAAAgE,GAAAY,EAAAxF,KAAAqE,KAAAkB,EAAA3E,IAAAyD,IAA6B,OAAAO,GAAAqoF,aAAAroF,EAAAu+E,eAAAv+E,EAAyC,MAAAA,GAAAhE,EAAA4E,GAAA5E,EAAAI,UAAA0tF,oBAAA,WAAyD,QAAQI,SAAAvpF,EAAA64E,eAAApf,8BAAuDp+D,EAAAI,UAAAguF,wBAAA,SAAAxpF,EAAA5E,GAAmD,OAAAgE,MAAAsB,EAAA,EAAA5F,EAAAkF,EAAqBU,EAAA5F,EAAAqF,OAAWO,IAAA,CAAK,GAAApG,GAAAQ,EAAA4F,EAAWtB,GAAA+D,KAAApD,EAAA64E,eAAAxkB,uBAAA95D,EAAA,iBAAkE,MAAA8E,IAAShE,GAAG4E,EAAA0pF,eAAmBtuF,GAAAyuF,mBAAAnpF,GAAuBV,EAAA4pF,cAAA5pF,EAAA4pF,kBAAoC7pF,EAAAkpF,SAAAlpF,EAAAkpF,aAA0B7tF,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAA,IAAa,SAAAC,GAAa,GAAA5E,GAAA,SAAA2E,GAAkB,QAAAC,KAAA5E,GAAgB,GAAAgE,GAAAW,EAAAvF,KAAAqE,KAAAmB,EAAA5E,IAAAyD,IAA6B,OAAAO,GAAA0qF,uBAAgClvF,KAAA,yBAAA45D,YAAA,KAA+C55D,KAAA,mBAAA45D,YAAA,KAAyC55D,KAAA,yBAAA45D,YAAA,KAA+C55D,KAAA,8BAAA45D,YAAA,KAAoD55D,KAAA,2BAAA45D,YAAA,KAAiD55D,KAAA,iBAAA45D,YAAA,KAAuC55D,KAAA,WAAA45D,YAAA,KAAiC55D,KAAA,yBAAA45D,YAAA,KAA+C55D,KAAA,iCAAA45D,YAAA,KAAuD55D,KAAA,yBAAA45D,YAAA,KAA+C55D,KAAA,2BAAA45D,YAAA,KAAiD55D,KAAA,oBAAA45D,YAAA,KAA0C55D,KAAA,2BAAA45D,YAAA,KAAiD55D,KAAA,yBAAA45D,YAAA,KAA+C55D,KAAA,gCAAA45D,YAAA,KAAsD55D,KAAA,0BAAA45D,YAAA,KAAgD55D,KAAA,2BAAA45D,YAAA,KAAiD55D,KAAA,gCAAA45D,YAAA,KAAsD55D,KAAA,+BAAA45D,YAAA,KAAqD55D,KAAA,+BAAA45D,YAAA,KAAqD55D,KAAA,gCAAA45D,YAAA,KAAsD55D,KAAA,gCAAA45D,YAAA,KAAsD55D,KAAA,sBAAA45D,YAAA,KAA4C55D,KAAA,qBAAA45D,YAAA,MAAyCp1D,EAAAqoF,aAAAroF,EAAAu+E,eAAAv+E,EAAqC,MAAAA,GAAAY,EAAAD,GAAAC,EAAAxE,UAAA6jF,cAAA,WAAmD,MAAAxgF,MAAAu9E,YAAuBp8E,EAAAxE,UAAAutF,gBAAA,WAAwC,OAAAhpF,GAAA,EAAYA,GAAAlB,KAAA28E,kBAAAz7E,EAAAlB,KAAAirF,oBAAA3pF,QAA6DJ,IAAA,OAAAC,GAAA,EAAA5E,EAAAyD,KAAAirF,oBAAA/pF,EAAA,GAAgDC,EAAA5E,EAAA+E,OAAWH,IAAA,CAAK,GAAAZ,GAAAhE,EAAA4E,GAAAU,EAAA7B,KAAA2K,QAAAf,aAAArJ,EAAAxE,KAA+C8F,IAAA7B,KAAA4oF,aAAAroF,EAAAxE,OAAA,EAAAiE,KAAAu9E,WAAAh9E,EAAAxE,MAAA8F,GAAA7B,KAAA4oF,aAAAroF,EAAAxE,OAAA,IAAyFoF,GAAGD,EAAAipF,UAAchpF,GAAA+pF,WAAA3uF,GAAe2E,EAAA6pF,cAAA7pF,EAAA6pF,kBAAoC7pF,EAAAkpF,SAAAlpF,EAAAkpF,aAA0B7tF,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAC,GAAa,GAAA5E,GAAA,SAAA4E,GAAkB,QAAA5E,KAAa,cAAA4E,KAAAqC,MAAAxD,KAAA4B,YAAA5B,KAA+C,MAAAO,GAAAhE,EAAA4E,GAAA5E,EAAAI,UAAA0tF,oBAAA,WAAyD,QAAQI,SAAAvpF,EAAA64E,eAAArgB,eAAA8wB,gBAAA,iBAA0EC,SAAAvpF,EAAA64E,eAAA7tD,iBAAAs+D,gBAAA,iBAA4EC,SAAAvpF,EAAA64E,eAAA10D,mCAAAulE,WAAA,GAAAJ,gBAAA,iBAA4GC,SAAAvpF,EAAA64E,eAAAr0D,oBAAA8kE,gBAAA,iBAA+EC,SAAAvpF,EAAA64E,eAAAv0D,+BAAAglE,gBAAA,kBAA0FjuF,EAAAI,UAAA2tF,oBAAA,WAA4C,QAAQG,SAAAvpF,EAAA64E,eAAAzU,gBAAAklB,gBAAA,iBAA2EC,SAAAvpF,EAAA64E,eAAAvU,iBAAAglB,gBAAA,iBAA4EC,SAAAvpF,EAAA64E,eAAAxU,eAAAilB,gBAAA,iBAA0EC,SAAAvpF,EAAA64E,eAAApU,oBAAA6kB,gBAAA,iBAA+EC,SAAAvpF,EAAA64E,eAAA1U,mBAAAmlB,gBAAA,iBAA8EC,SAAAvpF,EAAA64E,eAAA3U,iBAAAolB,gBAAA,iBAA4EC,SAAAvpF,EAAA64E,eAAArU,mBAAA8kB,gBAAA,kBAA8EjuF,EAAAI,UAAA2rF,mBAAA,WAA2C,mDAAkD/rF,EAAAI,UAAAwsF,qBAAA,SAAAhoF,EAAA5E,GAAgD,MAAA2E,GAAA84E,qBAAAz9E,GAAAQ,QAAAoE,EAAAohF,iBAAA,IAA+DhmF,GAAG4E,EAAA0pF,eAAmBtuF,GAAAsF,GAAAX,EAAA25E,WAAAzjC,MAAA,mBAAA76C,GAAA4E,EAAAgqF,eAAA5uF,GAAiE2E,EAAAkpF,SAAAlpF,EAAAkpF,aAA0B7tF,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAC,GAAa,GAAA5E,GAAA,SAAAA,GAAkB,QAAAsF,KAAa,cAAAtF,KAAAiH,MAAAxD,KAAA4B,YAAA5B,KAA+C,MAAAO,GAAAsB,EAAAtF,GAAAsF,EAAAlF,UAAA0tF,oBAAA,WAAyD,QAAQI,SAAAvpF,EAAA64E,eAAA5zB,MAAAqkC,gBAAA,sBAAsEC,SAAAvpF,EAAA64E,eAAApiB,YAAA6yB,gBAAA,gBAAsEC,SAAAvpF,EAAA64E,eAAAtiB,gBAAAmzB,WAAA,GAAAJ,gBAAA,mCAA2GC,SAAAvpF,EAAA64E,eAAAxiB,cAAAqzB,WAAA,GAAAJ,gBAAA,mCAAyGC,SAAAvpF,EAAA64E,eAAAziB,qBAAAszB,WAAA,GAAAJ,gBAAA,2CAAwHC,SAAAvpF,EAAA64E,eAAA1iB,mBAAAuzB,WAAA,GAAAJ,gBAAA,2CAAsHC,SAAAvpF,EAAA64E,eAAAriB,gBAAAkzB,WAAA,GAAAJ,gBAAA,mCAA2GC,SAAAvpF,EAAA64E,eAAAviB,cAAAozB,WAAA,GAAAJ,gBAAA,oCAAyG3oF,EAAAlF,UAAAwsF,qBAAA,SAAAhoF,EAAA5E,GAAgD,iBAAA4E,EAAApF,MAAA,YAAAoF,EAAApF,MAAAoF,EAAAohF,iBAAA,KAAArhF,EAAA64E,eAAA5zB,MAAAppD,OAAkG8E,EAAAlF,UAAA2rF,mBAAA,WAA2C,MAAAnnF,GAAAinF,cAAsBvmF,EAAAlF,UAAAmtF,cAAA,SAAA3oF,EAAA5E,GAAyC,MAAAyD,MAAA2K,QAAAygF,UAAAlqF,EAAA64E,eAAA5zB,MAAAppD,QAA4D8E,GAAGV,EAAA0pF,eAAmBtuF,GAAAsF,GAAAX,EAAA25E,WAAAzjC,MAAA,eAAA76C,GAAA4E,EAAAkqF,WAAA9uF,GAAyD2E,EAAAkpF,SAAAlpF,EAAAkpF,aAA0B7tF,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAC,GAAa,GAAA5E,GAAA,SAAA4E,GAAkB,QAAA5E,KAAa,cAAA4E,KAAAqC,MAAAxD,KAAA4B,YAAA5B,KAA+C,MAAAO,GAAAhE,EAAA4E,GAAA5E,EAAAI,UAAA0tF,oBAAA,WAAyD,QAAQI,SAAAvpF,EAAA64E,eAAAvgB,kBAAAgxB,gBAAA,gBAA4EC,SAAAvpF,EAAA64E,eAAA1hB,kBAAAmyB,gBAAA,gBAA4EC,SAAAvpF,EAAA64E,eAAAxhB,oBAAAiyB,gBAAA,mBAAgFjuF,EAAAI,UAAA2rF,mBAAA,WAA2C,iBAAgB/rF,EAAAI,UAAAmtF,cAAA,SAAA3oF,EAAA5E,GAAyC,OAAA4E,GAAU,IAAAD,GAAA64E,eAAAvgB,kBAAAz9D,KAAA,MAAAmF,GAAA64E,eAAAlkB,iBAAA94D,SAAAR,EAAA,GAAA2E,EAAA64E,eAAAlkB,iBAAA94D,MAA6I,KAAAmE,GAAA64E,eAAA1hB,kBAAAt8D,KAAA,MAAAmF,GAAA64E,eAAArkB,iBAAA34D,SAAAR,EAAA,GAAA2E,EAAA64E,eAAArkB,iBAAA34D,MAA6I,KAAAmE,GAAA64E,eAAAxhB,oBAAAx8D,KAAA,MAAAmF,GAAA64E,eAAAnkB,mBAAA74D,SAAAR,EAAA,GAAA2E,EAAA64E,eAAAnkB,mBAAA74D,OAAmJ,UAASR,GAAG4E,EAAA0pF,eAAmBtuF,GAAAsF,GAAAX,EAAA25E,WAAAzjC,MAAA,eAAA76C,GAAA4E,EAAAmqF,WAAA/uF,GAAyD2E,EAAAkpF,SAAAlpF,EAAAkpF,aAA0B7tF,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAC,GAAa,GAAA5E,GAAA,SAAAA,GAAkB,QAAAsF,KAAa,cAAAtF,KAAAiH,MAAAxD,KAAA4B,YAAA5B,KAA+C,MAAAO,GAAAsB,EAAAtF,GAAAsF,EAAAlF,UAAA0tF,oBAAA,WAAyD,QAAQI,SAAAvpF,EAAA64E,eAAAtgB,gBAAA+wB,gBAAA,gBAAyE3oF,EAAAlF,UAAA2rF,mBAAA,WAA2C,MAAAnnF,GAAAinF,cAAsBvmF,GAAGV,EAAA0pF,eAAmBtuF,GAAAsF,GAAAX,EAAA25E,WAAAzjC,MAAA,eAAA76C,GAAA4E,EAAAoqF,WAAAhvF,GAAyD2E,EAAAkpF,SAAAlpF,EAAAkpF,aAA0B7tF,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAC,GAAa,GAAA5E,GAAA,SAAAA,GAAkB,QAAAsF,KAAa,cAAAtF,KAAAiH,MAAAxD,KAAA4B,YAAA5B,KAA+C,MAAAO,GAAAsB,EAAAtF,GAAAsF,EAAAlF,UAAA0tF,oBAAA,WAAyD,QAAQI,SAAAvpF,EAAA64E,eAAAtf,sBAAA+vB,gBAAA,oBAAoFC,SAAAvpF,EAAA64E,eAAArf,uBAAA8vB,gBAAA,qBAAqF3oF,EAAAlF,UAAA2tF,oBAAA,WAA4C,QAAQG,SAAAvpF,EAAA64E,eAAA5d,gBAAAquB,gBAAA,sBAAgFC,SAAAvpF,EAAA64E,eAAA7d,yBAAAsuB,gBAAA,uBAAyF3oF,EAAAlF,UAAAwsF,qBAAA,SAAAhoF,EAAA5E,GAAgD,iBAAA4E,EAAApF,MAAA,YAAAoF,EAAApF,OAAAoF,EAAAohF,iBAAA,KAAArhF,EAAA64E,eAAA5d,gBAAAp/D,MAAAR,IAAA2E,EAAA64E,eAAA5d,gBAAApgE,KAAAoF,EAAAohF,iBAAA,KAAArhF,EAAA64E,eAAA7d,yBAAAn/D,OAAAR,IAAA2E,EAAA64E,eAAA7d,yBAAAngE,OAAoR8F,EAAAlF,UAAA2rF,mBAAA,WAA2C,MAAAnnF,GAAAinF,cAAsBvmF,EAAAlF,UAAAmtF,cAAA,SAAA3oF,EAAA5E,GAAyC,WAAAyD,KAAA28E,gBAAA38E,KAAA2K,QAAAygF,UAAAlqF,EAAA64E,eAAA5d,gBAAAp/D,QAA+F8E,GAAGV,EAAA0pF,eAAmBtuF,GAAAsF,GAAAX,EAAA25E,WAAAzjC,MAAA,kBAAA76C,GAAA4E,EAAAqqF,cAAAjvF,GAA+D2E,EAAAkpF,SAAAlpF,EAAAkpF,aAA0B7tF,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAC,GAAa,GAAA5E,GAAA,SAAAA,GAAkB,QAAAsF,KAAa,cAAAtF,KAAAiH,MAAAxD,KAAA4B,YAAA5B,KAA+C,MAAAO,GAAAsB,EAAAtF,GAAAsF,EAAAlF,UAAA0tF,oBAAA,WAAyD,QAAQI,SAAAvpF,EAAA64E,eAAAne,UAAA4uB,gBAAA,sBAA0EC,SAAAvpF,EAAA64E,eAAA9hB,eAAA2yB,WAAA,GAAAJ,gBAAA,eAAqF3oF,EAAAlF,UAAA2rF,mBAAA,WAA2C,MAAAnnF,GAAAinF,cAAsBvmF,EAAAlF,UAAAwsF,qBAAA,SAAAhoF,EAAA5E,GAAgD,iBAAA4E,EAAApF,MAAA,YAAAoF,EAAApF,MAAAoF,EAAAohF,iBAAA,KAAArhF,EAAA64E,eAAAne,UAAA7+D,OAAsG8E,EAAAlF,UAAAmtF,cAAA,SAAA3oF,EAAA5E,GAAyC,MAAAyD,MAAA2K,QAAAygF,UAAAlqF,EAAA64E,eAAAne,UAAA7+D,QAAgE8E,GAAGV,EAAA0pF,eAAmBtuF,GAAAsF,GAAAX,EAAA25E,WAAAzjC,MAAA,cAAA76C,GAAA4E,EAAAsqF,UAAAlvF,GAAuD2E,EAAAkpF,SAAAlpF,EAAAkpF,aAA0B7tF,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAC,GAAa,GAAA5E,GAAA,SAAAA,GAAkB,QAAAsF,KAAa,cAAAtF,KAAAiH,MAAAxD,KAAA4B,YAAA5B,KAA+C,MAAAO,GAAAsB,EAAAtF,GAAAsF,EAAAlF,UAAA0tF,oBAAA,WAAyD,QAAQI,SAAAvpF,EAAA64E,eAAA9zB,WAAAukC,gBAAA,sBAA2EC,SAAAvpF,EAAA64E,eAAAzhB,WAAAsyB,WAAA,GAAAJ,gBAAA,eAAkFC,SAAAvpF,EAAA64E,eAAA5hB,YAAAqyB,gBAAA,eAAqEC,SAAAvpF,EAAA64E,eAAA3hB,gBAAAoyB,gBAAA,iBAA0E3oF,EAAAlF,UAAA2rF,mBAAA,WAA2C,MAAAnnF,GAAAinF,cAAsBvmF,EAAAlF,UAAAwsF,qBAAA,SAAAhoF,EAAA5E,GAAgD,iBAAA4E,EAAApF,MAAA,YAAAoF,EAAApF,MAAAoF,EAAAohF,iBAAA,KAAArhF,EAAA64E,eAAA9zB,WAAAlpD,OAAuG8E,EAAAlF,UAAAmtF,cAAA,SAAA3oF,EAAA5E,GAAyC,MAAAyD,MAAA2K,QAAAygF,UAAAlqF,EAAA64E,eAAA9zB,WAAAlpD,QAAiE8E,GAAGV,EAAA0pF,eAAmBtuF,GAAAsF,GAAAX,EAAA25E,WAAAzjC,MAAA,eAAA76C,GAAA4E,EAAAuqF,WAAAnvF,GAAyD2E,EAAAkpF,SAAAlpF,EAAAkpF,aAA0B7tF,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAC,GAAa,GAAA5E,GAAA,SAAAA,GAAkB,QAAAsF,KAAa,cAAAtF,KAAAiH,MAAAxD,KAAA4B,YAAA5B,KAA+C,MAAAO,GAAAsB,EAAAtF,GAAAsF,EAAAlF,UAAA0tF,oBAAA,WAAyD,QAAQI,SAAAvpF,EAAA64E,eAAA/d,OAAAwuB,gBAAA,sBAAuEC,SAAAvpF,EAAA64E,eAAAzgB,SAAAkxB,gBAAA,cAAiEC,SAAAvpF,EAAA64E,eAAA7hB,WAAA0yB,WAAA,GAAAJ,gBAAA,eAAkFC,SAAAvpF,EAAA64E,eAAAnD,oCAAA4T,gBAAA,WAAwF3oF,EAAAlF,UAAA2tF,oBAAA,WAA4C,QAAQG,SAAAvpF,EAAA64E,eAAAxT,mBAAAikB,gBAAA,sBAAmFC,SAAAvpF,EAAA64E,eAAAzT,gCAAAkkB,gBAAA,WAAoF3oF,EAAAlF,UAAAwsF,qBAAA,SAAAhoF,EAAA5E,GAAgD,iBAAA4E,EAAApF,MAAA,YAAAoF,EAAApF,KAAAoF,EAAAohF,iBAAA,KAAArhF,EAAA64E,eAAA/d,OAAAj/D,MAAAR,IAAA2E,EAAA64E,eAAA/d,OAAAjgE,KAAAoF,EAAAohF,iBAAA,KAAArhF,EAAA64E,eAAAxT,mBAAAxpE,OAAAR,IAAA2E,EAAA64E,eAAAxT,mBAAAxqE,KAAA,SAAAoF,EAAApF,OAAAoF,EAAAohF,iBAAA,KAAArhF,EAAA64E,eAAAnD,oCAAA75E,MAAAR,IAAA2E,EAAA64E,eAAAnD,oCAAA76E,KAAAoF,EAAAohF,iBAAA,KAAArhF,EAAA64E,eAAAzT,gCAAAvpE,OAAAR,IAAA2E,EAAA64E,eAAAzT,gCAAAvqE,OAAiiB8F,EAAAlF,UAAA2rF,mBAAA,WAA2C,MAAAnnF,GAAAinF,cAAsBvmF,EAAAlF,UAAAmtF,cAAA,SAAA3oF,EAAA5E,GAAyC,OAAA4E,GAAU,IAAAD,GAAA64E,eAAA/d,OAAAjgE,KAAA,MAAAiE,MAAA2K,QAAAygF,UAAAlqF,EAAA64E,eAAA/d,OAAAj/D,MAA+F,KAAAmE,GAAA64E,eAAAxT,mBAAAxqE,KAAA,MAAAiE,MAAA2K,QAAAygF,UAAAlqF,EAAA64E,eAAAxT,mBAAAxpE,OAAuH,UAAS8E,GAAGV,EAAA0pF,eAAmBtuF,GAAAsF,GAAAX,EAAA25E,WAAAzjC,MAAA,cAAA76C,GAAA4E,EAAAwqF,UAAApvF,GAAuD2E,EAAAkpF,SAAAlpF,EAAAkpF,aAA0B7tF,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAC,GAAa,GAAA5E,GAAA,SAAA4E,GAAkB,QAAA5E,KAAa,cAAA4E,KAAAqC,MAAAxD,KAAA4B,YAAA5B,KAA+C,MAAAO,GAAAhE,EAAA4E,GAAA5E,EAAAI,UAAA0tF,oBAAA,WAAyD,QAAQI,SAAAvpF,EAAA64E,eAAA9c,qBAAAutB,gBAAA,WAAyEjuF,EAAAI,UAAA2rF,mBAAA,WAA2C,0BAAyB/rF,GAAG4E,EAAA0pF,eAAmBtuF,GAAAsF,GAAAX,EAAA25E,WAAAzjC,MAAA,oBAAA76C,GAAA4E,EAAAyqF,gBAAArvF,GAAmE2E,EAAAkpF,SAAAlpF,EAAAkpF,aAA0B7tF,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAC,GAAa,GAAA5E,GAAA,SAAAA,GAAkB,QAAAsF,KAAa,cAAAtF,KAAAiH,MAAAxD,KAAA4B,YAAA5B,KAA+C,MAAAO,GAAAsB,EAAAtF,GAAAsF,EAAAlF,UAAA0tF,oBAAA,WAAyD,QAAQI,SAAAvpF,EAAA64E,eAAA9d,oBAAAuuB,gBAAA,sBAAoFC,SAAAvpF,EAAA64E,eAAA1f,sBAAAmwB,gBAAA,mBAAmFC,SAAAvpF,EAAA64E,eAAA3f,qBAAAowB,gBAAA,oBAAkF3oF,EAAAlF,UAAAwsF,qBAAA,SAAAhoF,EAAA5E,GAAgD,iBAAA4E,EAAApF,MAAA,YAAAoF,EAAApF,MAAAoF,EAAAohF,iBAAA,KAAArhF,EAAA64E,eAAA9d,oBAAAl/D,OAAgH8E,EAAAlF,UAAA2rF,mBAAA,WAA2C,MAAAnnF,GAAAinF,cAAsBvmF,EAAAlF,UAAAmtF,cAAA,SAAA3oF,EAAA5E,GAAyC,MAAAyD,MAAA2K,QAAAygF,UAAAlqF,EAAA64E,eAAA9d,oBAAAl/D,QAA0E8E,GAAGV,EAAA0pF,eAAmBtuF,GAAAsF,GAAAX,EAAA25E,WAAAzjC,MAAA,uBAAA76C,GAAA4E,EAAA0qF,mBAAAtvF,GAAyE2E,EAAAkpF,SAAAlpF,EAAAkpF,aAA0B7tF,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAC,GAAa,GAAA5E,GAAA,SAAAA,GAAkB,QAAAsF,KAAa,cAAAtF,KAAAiH,MAAAxD,KAAA4B,YAAA5B,KAA+C,MAAAO,GAAAsB,EAAAtF,GAAAsF,EAAAlF,UAAA0tF,oBAAA,WAAyD,QAAQI,SAAAvpF,EAAA64E,eAAA3d,aAAAouB,gBAAA,sBAA6EC,SAAAvpF,EAAA64E,eAAAxgB,YAAAixB,gBAAA,cAAmE3oF,EAAAlF,UAAAwsF,qBAAA,SAAAhoF,EAAA5E,GAAgD,iBAAA4E,EAAApF,MAAA,YAAAoF,EAAApF,MAAAoF,EAAAohF,iBAAA,KAAArhF,EAAA64E,eAAA3d,aAAAr/D,OAAyG8E,EAAAlF,UAAA2rF,mBAAA,WAA2C,MAAAnnF,GAAAinF,cAAsBvmF,EAAAlF,UAAAmtF,cAAA,SAAA3oF,EAAA5E,GAAyC,MAAAyD,MAAA2K,QAAAygF,UAAAlqF,EAAA64E,eAAA3d,aAAAr/D,QAAmE8E,GAAGV,EAAA0pF,eAAmBtuF,GAAAsF,GAAAX,EAAA25E,WAAAzjC,MAAA,iBAAA76C,GAAA4E,EAAA2qF,aAAAvvF,GAA6D2E,EAAAkpF,SAAAlpF,EAAAkpF,aAA0B7tF,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAC,GAAa,GAAA5E,GAAAN,EAAA,SAAAM,GAAoB,QAAAsF,KAAa,cAAAtF,KAAAiH,MAAAxD,KAAA4B,YAAA5B,KAA+C,MAAAO,GAAAsB,EAAAtF,GAAAsF,EAAAlF,UAAA0tF,oBAAA,WAAyD,QAAQI,SAAAvpF,EAAA64E,eAAA1d,aAAAmuB,gBAAA,sBAA6EC,SAAAvpF,EAAA64E,eAAA/gB,kBAAA4xB,WAAA,GAAAJ,gBAAA,mCAA6GC,SAAAvpF,EAAA64E,eAAAhhB,kBAAA6xB,WAAA,GAAAJ,gBAAA,uCAAiHC,SAAAvpF,EAAA64E,eAAA9gB,6BAAA2xB,WAAA,GAAAJ,gBAAA,mCAAwHC,SAAAvpF,EAAA64E,eAAA7gB,6BAAA0xB,WAAA,GAAAJ,gBAAA,mCAAwHC,SAAAvpF,EAAA64E,eAAA5gB,iBAAAqxB,gBAAA,uCAAkGC,SAAAvpF,EAAA64E,eAAA3gB,wBAAAwxB,WAAA,GAAAJ,gBAAA,uCAAuHC,SAAAvpF,EAAA64E,eAAA1gB,uBAAAuxB,WAAA,GAAAJ,gBAAA,uCAAsHC,SAAAvpF,EAAA64E,eAAAthB,aAAAmyB,WAAA,GAAAJ,gBAAA,mCAAwGC,SAAAvpF,EAAA64E,eAAAvhB,aAAAoyB,WAAA,GAAAJ,gBAAA,uCAA4GC,SAAAvpF,EAAA64E,eAAArhB,wBAAAkyB,WAAA,GAAAJ,gBAAA,mCAAmHC,SAAAvpF,EAAA64E,eAAAphB,wBAAAiyB,WAAA,GAAAJ,gBAAA,mCAAmHC,SAAAvpF,EAAA64E,eAAAnhB,YAAA4xB,gBAAA,uCAA6FC,SAAAvpF,EAAA64E,eAAAlhB,mBAAA+xB,WAAA,GAAAJ,gBAAA,uCAAkHC,SAAAvpF,EAAA64E,eAAAjhB,kBAAA8xB,WAAA,GAAAJ,gBAAA,wCAAiH3oF,EAAAlF,UAAAwsF,qBAAA,SAAAhoF,EAAA5E,GAAgD,iBAAA4E,EAAApF,MAAA,YAAAoF,EAAApF,KAAAoF,EAAAohF,iBAAA,KAAArhF,EAAA64E,eAAA1d,aAAAt/D,MAAA,cAAAoE,EAAApF,MAAA,sBAAAoF,EAAApF,KAAAE,EAAA8vF,gBAAA3qF,QAAAD,EAAAohF,iBAAA,sBAAAphF,EAAApF,MAAA,wBAAAoF,EAAApF,KAAAE,EAAA+vF,kBAAA5qF,QAAAD,EAAAohF,iBAAA,sBAAAphF,EAAApF,MAAA,wBAAAoF,EAAApF,MAAAE,EAAAgwF,kBAAA7qF,QAAAD,EAAAohF,iBAAA,OAAua1gF,EAAAlF,UAAA2rF,mBAAA,WAA2C,MAAAnnF,GAAAinF,cAAsBvmF,EAAAlF,UAAAmtF,cAAA,SAAA3oF,EAAA5E,GAAyC,MAAAyD,MAAA2K,QAAAygF,UAAAlqF,EAAA64E,eAAA1d,aAAAt/D,QAAmE8E,GAAGV,EAAA0pF,eAAmBtuF,GAAAwvF,iBAAA7qF,EAAA64E,eAAA/gB,kBAAAj8D,MAAAmE,EAAA64E,eAAA9gB,6BAAAl8D,MAAAmE,EAAA64E,eAAA7gB,6BAAAn8D,MAAAmE,EAAA64E,eAAAthB,aAAA17D,MAAAmE,EAAA64E,eAAArhB,wBAAA37D,MAAAmE,EAAA64E,eAAAphB,wBAAA57D,OAAAR,EAAAyvF,mBAAA9qF,EAAA64E,eAAAhhB,kBAAAh8D,MAAAmE,EAAA64E,eAAA5gB,iBAAAp8D,MAAAmE,EAAA64E,eAAA3gB,wBAAAr8D,MAAAmE,EAAA64E,eAAAvhB,aAAAz7D,MAAAmE,EAAA64E,eAAAnhB,YAAA77D,MAAAmE,EAAA64E,eAAAlhB,mBAAA97D,OAAAR,EAAA0vF,mBAAA/qF,EAAA64E,eAAA1gB,uBAAAt8D,MAAAmE,EAAA64E,eAAAjhB,kBAAA/7D,OAAAR,EAAAN,EAAA4F,GAAAX,EAAA25E,WAAAzjC,MAAA,iBAAA76C,GAAA4E,EAAA+qF,aAAA3vF,CAA0tB,IAAAN,IAAMiF,EAAAkpF,SAAAlpF,EAAAkpF,aAA0B7tF,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAC,GAAa,GAAA5E,GAAAN,EAAA,SAAAM,GAAoB,QAAAsF,GAAAX,EAAAC,GAAgB,GAAAZ,GAAAhE,EAAAZ,KAAAqE,KAAAkB,EAAAC,IAAAnB,IAA6B,OAAAO,GAAA4rF,mBAAAjrF,EAAAyJ,QAAA0W,oBAAA9gB,EAAA6rF,cAAAnyE,SAAA8S,cAAA,UAAAxsB,EAAA8rF,iBAAA9rF,EAAA6rF,cAAAvhF,WAAA,MAAAtK,EAAA+rF,cAAAryE,SAAA8S,cAAA,UAAAxsB,EAAAgsF,iBAAAhsF,EAAA+rF,cAAAzhF,WAAA,MAAAtK,EAAAgsF,iBAAAC,uBAAA,EAAAjsF,EAAAgsF,iBAAAE,0BAAA,EAAAlsF,EAAAgsF,iBAAAG,wBAAA,EAAAnsF,EAAAgsF,iBAAAI,6BAAA,EAAApsF,EAAAgsF,iBAAAK,yBAAA,EAAArsF,EAA8e,MAAAA,GAAAsB,EAAAtF,GAAAsF,EAAAlF,UAAA2rF,mBAAA,WAAwD,iFAAApjF,OAAA/D,EAAAinF,eAAwGvmF,EAAAlF,UAAAutF,gBAAA,WAAwC,GAAA/oF,GAAAnB,KAAA2K,OAAmB3K,MAAA4oF,aAAAiE,cAAiC,IAAAtwF,GAAAyD,KAAA2K,QAAAya,aAAAlkB,EAAA64E,eAAAjV,oBAAA/nE,MAA4E,KAAAR,EAAA,MAAAyD,MAAA4oF,aAAAkE,YAAA,SAAA9sF,MAAA+sF,WAAA5rF,EAAA,8BAAAA,EAAAogB,mBAAApgB,EAAAqgB,oBAAA,IAAAtgB,EAAA64E,eAAA1qE,cAAAtS,MAA0L,IAAAwD,GAAAY,EAAAikB,aAAAjkB,EAAAm4D,UAAAz3D,EAAAtB,EAAA,GAAAtE,EAAAsE,EAAA,GAAA9E,EAAA8E,EAAA,GAAAzD,EAAAyD,EAAA,EAA6DP,MAAA4oF,aAAAkE,YAAA9sF,KAAA+pF,eAAAxtF,EAAqD,IAAA6+B,GAAAp7B,KAAA2K,QAAAqiF,uBAAA9rF,EAAA64E,eAAA54D,YAAApkB,MAA8E,IAAAiD,KAAA4oF,aAAAqE,kBAAA/rF,EAAAo0D,sBAAAl6B,GAAAr/B,KAAAq/B,IAAAl6B,EAAA64E,eAAAtV,qBAAA1nE,MAAwH,GAAAiD,KAAAu9E,WAAAr8E,EAAA64E,eAAAjB,uBAAAvE,eAAA,OAAA74E,GAAAsE,KAAA2K,QAAAya,aAAAlkB,EAAA64E,eAAAjB,uBAAA/7E,OAAAlB,EAAA,EAAiKA,EAAAH,EAAIG,IAAAmE,KAAAktF,qCAAAltF,KAAA2K,QAAApO,EAAA2E,EAAA84E,qBAAA,mBAAAn+E,EAAA,UAAAgG,EAAA5F,EAAAR,EAAAqB,OAA4H,IAAAkD,KAAA28E,eAAA,SAAA/gF,GAAAoE,KAAA2K,QAAAjP,EAAAE,EAAAwpB,aAAAlkB,EAAA64E,eAAA7O,iBAAAnuE,OAAAlB,EAAA,EAAmHA,EAAAH,EAAIG,IAAAmE,KAAAktF,qCAAAltF,KAAA2K,QAAApO,EAAA2E,EAAA84E,qBAAA,mBAAAn+E,GAAAgG,EAAA5F,EAAAR,EAAAqB,OAAmHkD,MAAAktF,qCAAAltF,KAAA2K,QAAApO,EAAA2E,EAAA84E,qBAAAh4D,kBAAAngB,EAAA5F,EAAAR,EAAAqB,IAAiH+E,EAAAlF,UAAAuwF,qCAAA,SAAA/rF,EAAA5E,EAAAgE,EAAAsB,EAAA5F,EAAAR,EAAAqB,GAA0E,GAAAs+B,GAAAl6B,EAAA64E,eAAA54D,YAAApkB,MAAArB,EAAAsE,KAAA2K,QAAA8uE,kCAAAr+C,EAAA76B,EAAAxD,MAAAmE,EAAA64E,eAAA9V,mCAAAlnE,MAA+J,IAAArB,IAAAwF,EAAA64E,eAAAvV,KAAAznE,MAAA,CAAoC,GAAAlB,GAAAmE,KAAA2K,QAAA8uE,kCAAAr+C,EAAA76B,EAAAxD,MAAAmE,EAAA64E,eAAA7V,mCAAAnnE,MAA0H,IAAAlB,EAAA,CAAM,GAAAD,GAAAoE,KAAA28E,eAAA,EAAA38E,KAAA2K,QAAA8uE,kCAAAr+C,EAAA76B,EAAAxD,MAAAmE,EAAA64E,eAAA3J,sCAAArzE,OAAAmE,EAAA64E,eAAA1qE,cAAAtS,KAAwL,IAAArB,IAAAwF,EAAA64E,eAAA53D,aAAAplB,MAAA,CAA4C,GAAAoE,EAAAmgB,gBAAApgB,EAAA64E,eAAA54D,YAAApkB,MAAAiD,KAAAmsF,oBAAAhrF,EAAA8hB,wBAAA/hB,EAAA64E,eAAA54D,YAAApkB,MAAAmE,EAAA64E,eAAA/3D,kBAAAjlB,MAAAmE,EAAA64E,eAAA53D,aAAAplB,MAAAlB,KAAAoqF,4BAAA,CAA6P,GAAAnqF,GAAAD,EAAAoqF,2BAAoC,IAAAxqF,EAAAK,EAAAoP,MAAApO,EAAAhB,EAAAsP,QAAAlK,EAAA85E,iBAAAF,uBAAAl/E,EAAAsF,EAAA64E,eAAAtyD,KAAA1qB,MAAAjB,EAAA6nB,gBAAA,OAA0H3jB,KAAA+sF,WAAA5rF,EAAAZ,EAAAxE,KAAA8F,EAAA5F,EAAAR,EAAAqB,EAAA,IAAAlB,GAAAuF,EAAAmgB,gBAAApgB,EAAA64E,eAAA54D,YAAApkB,MAAAR,OAAgG,IAAAb,IAAAwF,EAAA64E,eAAAxa,QAAAxiE,MAAA,CAA4C,GAAAF,GAAA,CAAQmD,MAAA28E,eAAA,IAAA9/E,EAAAmD,KAAA2K,QAAA8uE,kCAAAr+C,EAAA76B,EAAAxD,MAAAmE,EAAA64E,eAAA7I,qCAAAn0E,OAAiJ,IAAA6uD,GAAA5rD,KAAA2K,QAAA8uE,kCAAAr+C,EAAA76B,EAAAxD,MAAAmE,EAAA64E,eAAA5V,qCAAApnE,OAAA0wD,EAAAztD,KAAA2K,QAAA8uE,kCAAAr+C,EAAA76B,EAAAxD,MAAAmE,EAAA64E,eAAA3V,6CAAArnE,OAAAiH,GAAAypD,EAAA,EAAAvsD,EAAAo0D,sBAAA7H,GAAA1xD,KAAAmF,EAAA64E,eAAA32D,WAAArnB,KAAAH,EAAuU,IAAAC,EAAAoqF,4BAAA,CAAkC,GAAAnqF,GAAAD,EAAAoqF,2BAAoC,IAAAxqF,EAAAK,EAAAoP,MAAApO,EAAAhB,EAAAsP,OAAApH,EAAAlI,EAAAqE,MAAAe,EAAA85E,iBAAAF,uBAAAh/E,EAAAqE,KAAArE,EAAA+kB,OAAA/kB,EAAA6nB,gBAAA,OAAqHxiB,EAAAmgB,gBAAApgB,EAAA64E,eAAA54D,YAAApkB,MAAAiD,KAAAmsF,oBAAA,IAAAtvF,EAAAsE,EAAA+hB,qBAAAhiB,EAAA64E,eAAA54D,YAAApkB,MAAAmE,EAAA64E,eAAA/3D,kBAAAjlB,MAAA0wD,GAAAvsD,EAAA64E,eAAA32D,WAAArmB,MAAAlB,EAAA+vD,GAAAzqD,EAAAgsF,wBAAAjsF,EAAA64E,eAAA54D,YAAApkB,MAAAmE,EAAA64E,eAAA/3D,kBAAAjlB,MAAAlB,EAAA+vD,EAAA/uD,EAA8U,IAAA4qC,GAAAznC,KAAA2K,QAAAqiF,uBAAA9rF,EAAA64E,eAAA54D,YAAApkB,MAA8E0qC,KAAAvmC,EAAA64E,eAAAtV,qBAAA1nE,OAAAiD,KAAA+sF,WAAA5rF,EAAAZ,EAAAxE,KAAA8F,EAAA5F,EAAAR,EAAAqB,EAAA2wD,EAAA5wD,EAAAmH,GAAA7C,EAAAmgB,gBAAApgB,EAAA64E,eAAA54D,YAAApkB,MAAAR,OAAoJsF,EAAAlF,UAAAowF,WAAA,SAAA5rF,EAAA5E,EAAAgE,EAAAsB,EAAApG,EAAAqB,EAAAs+B,EAAA1/B,EAAAG,GAAoD,GAAAD,IAAOwxF,eAAA7wF,EAAAyK,IAAA,KAAAqmF,mBAAAjyD,EAAAl6B,EAAAo0D,sBAAAl6B,GAAAr/B,KAAA,KAAAuxF,aAAA5xF,EAAoG,KAAI,GAAAI,GAAAoF,EAAA85E,iBAAAD,WAAA55E,EAAAZ,EAAAsB,EAAApG,EAAAqB,EAAAjB,EAAiD,IAAAC,EAAA,CAAMkE,KAAAosF,cAAAlhF,MAAAzP,EAAAuE,KAAAosF,cAAAhhF,OAAAtO,CAAuD,IAAAD,GAAAmD,KAAAqsF,iBAAAkB,gBAAA9xF,EAAAqB,EAAiDD,GAAAwQ,KAAAjG,IAAAtL,GAAAkE,KAAAqsF,iBAAAmB,aAAA3wF,EAAA,IAAwD,IAAA+uD,GAAAnwD,EAAAqB,CAAU8uD,GAAA,GAAA5rD,KAAAssF,cAAAphF,MAAAjP,EAAAwxF,gBAAA7hC,EAAA5rD,KAAAssF,cAAAlhF,OAAAnP,EAAAwxF,iBAAA7hC,EAAA,GAAA5rD,KAAAssF,cAAAphF,MAAAjP,EAAAwxF,gBAAAztF,KAAAssF,cAAAlhF,OAAAnP,EAAAwxF,gBAAA7hC,IAAA5rD,KAAAssF,cAAAphF,MAAAjP,EAAAwxF,gBAAAztF,KAAAssF,cAAAlhF,OAAAnP,EAAAwxF,iBAAAztF,KAAAssF,cAAAphF,MAAAtL,KAAAe,IAAAX,KAAAssF,cAAAphF,MAAA,GAAAlL,KAAAssF,cAAAlhF,OAAAxL,KAAAe,IAAAX,KAAAssF,cAAAlhF,OAAA,GAAApL,KAAAusF,iBAAAmB,yBAAA,OAAA1tF,KAAAusF,iBAAAr1D,MAAA,MAAAl3B,KAAAusF,iBAAAp3D,UAAA,GAAAn1B,KAAAssF,cAAAlhF,QAAApL,KAAAusF,iBAAAnjE,UAAAppB,KAAAosF,cAAA,IAAA3wF,EAAAqB,EAAA,IAAAkD,KAAAssF,cAAAphF,MAAAlL,KAAAssF,cAAAlhF,QAAApL,KAAAusF,iBAAAoB,aAAA,aAAA3tF,KAAAusF,iBAAAmB,yBAAA,cAAA9xF,EAAAoL,IAAAhH,KAAAssF,cAAAsB,aAAizB,MAAA1sF,IAAUlB,KAAA4oF,aAAAiE,YAAAvoF,KAAA1I,IAAsCiG,EAAAlF,UAAAqsF,QAAA,SAAA9nF,KAAkCW,GAAGV,EAAAgpF,UAAc5tF,GAAAkxF,gBAAA,IAAAlxF,EAAAN,EAAA4F,GAAAX,EAAA25E,WAAAzjC,MAAA,gBAAA76C,GAAA4E,EAAA0sF,YAAAtxF,CAAmF,IAAAN,IAAMiF,EAAAkpF,SAAAlpF,EAAAkpF,aAA0B7tF,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAC,GAAa,GAAA5E,GAAAN,EAAA,SAAAM,GAAoB,QAAAsF,GAAAX,EAAAX,GAAgB,GAAAsB,GAAAtF,EAAAZ,KAAAqE,KAAAkB,EAAAX,IAAAP,IAA6B,OAAA6B,GAAAisF,0BAAA,GAAA3sF,GAAA4sF,0BAAA7sF,EAAAX,GAAAsB,EAAAmsF,sBAAA,GAAA7sF,GAAA8sF,sBAAA/sF,EAAAX,GAAAsB,EAAmI,MAAAtB,GAAAsB,EAAAtF,GAAAL,OAAAC,eAAA0F,EAAAlF,UAAA,6BAA6EL,IAAA,WAAe,UAASD,YAAA,EAAAD,cAAA,IAA+ByF,EAAAlF,UAAA2rF,mBAAA,WAA4C,MAAAnnF,GAAAinF,cAAsBvmF,EAAAlF,UAAA6rF,yBAAA,WAAiD,UAAS3mF,EAAAlF,UAAAutF,gBAAA,WAAwC,GAAA/oF,GAAAnB,KAAA2K,QAAAya,aAAAlkB,EAAA64E,eAAA5b,gBAAAphE,MAAwE,IAAAoE,EAAA,CAAMnB,KAAA4oF,aAAAsF,YAAAluF,KAAAmuF,6BAAAnuF,KAAA4oF,aAAAwF,eAAiG17E,QAAA1S,KAAA+pF,eAAA5oF,GAAAo8D,cAAAv9D,KAAA2K,QAAAkQ,oBAAA1Z,EAAAD,EAAA64E,eAAAxc,cAAAxgE,OAAA+d,YAAA9a,KAAA2K,QAAAkQ,oBAAA1Z,EAAAD,EAAA64E,eAAAj/D,YAAA/d,OAAAygE,gBAAAx9D,KAAA2K,QAAAkQ,oBAAA1Z,EAAAD,EAAA64E,eAAAvc,gBAAAzgE,OAAqS,IAAAR,GAAAyD,KAAA2K,QAAA0jF,mBAAAltF,EAAyCnB,MAAA4oF,aAAAjvE,UAA6B,QAAApZ,GAAA,EAAAsB,EAAAtF,EAAgBgE,EAAAsB,EAAAP,OAAWf,IAAA,CAAK,GAAA9E,GAAAoG,EAAAtB,GAAAzD,EAAAkD,KAAAsuF,sBAAA7yF,EAA2CuE,MAAA4oF,aAAAjvE,QAAArV,KAAAxH,GAAkC,GAAAs+B,GAAAp7B,KAAA2K,QAAAkQ,oBAAA1Z,EAAAD,EAAA64E,eAAA55D,kBAAApjB,MAAmFiD,MAAA4oF,aAAAlgF,aAAgC,QAAAhN,GAAA,EAAYA,EAAA0/B,EAAI1/B,IAAA,CAAK,GAAAG,GAAAmE,KAAAuuF,yBAAAptF,EAAAzF,EAAyCsE,MAAA4oF,aAAAlgF,WAAApE,KAAAzI,GAAqC,GAAAD,GAAAoE,KAAA2K,QAAAkQ,oBAAA1Z,EAAAD,EAAA64E,eAAAl+D,gBAAA9e,MAAiFiD,MAAA4oF,aAAA91E,WAA8B,QAAAhX,MAAAJ,EAAA,EAAiBA,EAAAE,EAAIF,IAAA,CAAKI,EAAAwI,KAAA5I,EAAU,IAAAmB,GAAAmD,KAAAwuF,uBAAArtF,EAAAzF,EAAuCsE,MAAA4oF,aAAA91E,SAAAxO,KAAAzH,GAAmC,GAAAmD,KAAA28E,eAAA,GAA0B38E,KAAAyuF,iCAAAttF,EAAArF,EAAAkE,KAAA4oF,aAAA91E,SAAsE,IAAA84C,GAAA5rD,KAAA2K,QAAAkQ,oBAAA1Z,EAAAD,EAAA64E,eAAAl8D,sBAAA9gB,MAAuFiD,MAAA4oF,aAAA8F,gBAAmC,QAAAhzF,GAAA,EAAYA,EAAAkwD,EAAIlwD,IAAA,CAAK,GAAA+xD,GAAAztD,KAAA2uF,4BAAAxtF,EAAAzF,EAA4CsE,MAAA4oF,aAAA8F,cAAApqF,KAAAmpD,GAAwC,GAAAztD,KAAA2K,QAAAya,aAAAlkB,EAAA64E,eAAA9J,0BAAAlzE,OAAA,CAAgF,GAAAiH,GAAAhE,KAAA2K,QAAAkQ,oBAAA1Z,EAAAD,EAAA64E,eAAAxK,+BAAAxyE,MAAgGiD,MAAA4oF,aAAAluE,sBAAA1a,KAAA2lF,iBAAA3hF,GAAAhE,KAAA4oF,aAAAgG,qBAAyG,QAAAnnD,GAAAznC,KAAA2K,QAAAkQ,oBAAA1Z,EAAAD,EAAA64E,eAAAv9D,4BAAAzf,OAAArB,EAAA,EAAqGA,EAAA+rC,EAAI/rC,IAAA,CAAK,GAAAoI,GAAA9D,KAAA6uF,iCAAA1tF,EAAAzF,EAAiDsE,MAAA4oF,aAAAgG,mBAAAtqF,KAAAR,KAA+C,OAAApI,GAAA,EAAYA,EAAAI,EAAAwF,OAAW5F,IAAA,CAAK,GAAAmB,GAAAmD,KAAA4oF,aAAA91E,SAAApX,EAAoC,WAAAmB,EAAAE,WAAA,KAAAF,EAAAE,MAAA,CAAqC,GAAAovD,GAAAlwD,EAAA6yF,aAAAjyF,EAAAkyF,UAAkC,IAAA5iC,EAAA,GAAAtvD,EAAAE,MAAAuE,OAAA,CAAwBzE,EAAAiM,WAAc,QAAAlF,GAAA,EAAYA,EAAA/G,EAAAE,MAAAuE,OAAiBsC,IAAA/G,EAAAiM,SAAAxE,KAAAtE,KAAAgvF,uBAAAnyF,EAAAE,MAAA6G,GAAAuoD,QAA+DtvD,GAAAyZ,QAAAtW,KAAAgvF,uBAAAnyF,EAAAE,MAAAovD,SAAsDtvD,GAAAkyF,aAAqBltF,EAAAlF,UAAAwxF,2BAAA,WAAmD,GAAAhtF,GAAAnB,KAAA2K,QAAAya,aAAAlkB,EAAA64E,eAAAjV,oBAAA/nE,MAA4E,KAAAoE,EAAA,WAAkB,IAAA5E,KAAS,IAAAA,EAAA2xF,YAAAluF,KAAA+pF,eAAA5oF,GAAAnB,KAAAktF,qCAAAhsF,EAAA64E,eAAA1V,iBAAAtnE,SAAAR,EAAA0yF,gBAAAjvF,KAAAktF,qCAAAhsF,EAAA64E,eAAA1V,iBAAAtnE,QAAAiD,KAAAktF,qCAAAhsF,EAAA64E,eAAAzV,mBAAAvnE,SAAAR,EAAA2yF,kBAAAlvF,KAAAktF,qCAAAhsF,EAAA64E,eAAAzV,mBAAAvnE,QAAAiD,KAAAu9E,WAAAr8E,EAAA64E,eAAAjB,uBAAAvE,eAAA,CAA4eh4E,EAAA4yF,mBAAsB,QAAA5uF,GAAAP,KAAA2K,QAAAya,aAAAlkB,EAAA64E,eAAAjB,uBAAA/7E,OAAA8E,EAAA,EAAuFA,EAAAtB,EAAIsB,IAAA,CAAK,GAAA5F,GAAA+D,KAAAktF,qCAAAhsF,EAAA84E,qBAAA,mBAAAn4E,EAAA,UAAA9E,MAA6Gd,IAAAM,EAAA4yF,iBAAA7qF,KAAArI,QAA+B,IAAA+D,KAAA28E,eAAA,GAA+B,GAAAlhF,GAAAuE,KAAA2K,OAAmBpO,GAAA4yF,mBAAsB,QAAA5uF,GAAA9E,EAAA2pB,aAAAlkB,EAAA64E,eAAA7O,iBAAAnuE,OAAA8E,EAAA,EAAsEA,EAAAtB,EAAIsB,IAAA,CAAK,GAAA5F,GAAA+D,KAAAktF,qCAAAhsF,EAAA84E,qBAAA,mBAAAn4E,GAAA9E,MAAoGd,IAAAM,EAAA4yF,iBAAA7qF,KAAArI,QAA+B,CAAK,GAAAA,GAAA+D,KAAAktF,qCAAAhsF,EAAA84E,qBAAAh4D,kBAAAjlB,MAAgGd,KAAAM,EAAA4yF,kBAAAlzF,IAA4B,MAAAM,IAASsF,EAAAlF,UAAAuwF,qCAAA,SAAA/rF,GAA8D,GAAA5E,GAAA2E,EAAA64E,eAAA54D,YAAApkB,MAAAwD,EAAAP,KAAA2K,QAAA8uE,kCAAAl9E,EAAA4E,EAAAD,EAAA64E,eAAA9V,mCAAAlnE,MAAyJ,IAAAwD,IAAAW,EAAA64E,eAAAvV,KAAAznE,MAAA,CAAoC,GAAA8E,MAAQ5F,EAAA+D,KAAA2K,QAAA8uE,kCAAAl9E,EAAA4E,EAAAD,EAAA64E,eAAA7V,mCAAAnnE,MAAiH,IAAAwD,IAAAW,EAAA64E,eAAA53D,aAAAplB,OAA4C,GAAA8E,EAAA1B,KAAA,eAAA0B,EAAAuK,OAAApM,KAAA+pF,eAAA9tF,KAAA,CAA4D,GAAAR,GAAAQ,EAAAgqF,2BAAoCxqF,OAAAkoB,iBAAA9hB,EAAA8hB,eAAA3jB,KAAA2lF,iBAAAlqF,EAAAkoB,iBAAA9hB,EAAAqJ,MAAAzP,EAAAyP,MAAArJ,EAAAuJ,OAAA3P,EAAA2P,aAAqH,IAAA7K,IAAAW,EAAA64E,eAAAxa,QAAAxiE,MAAA,CAA4C8E,EAAA1B,KAAA,UAAA0B,EAAAyU,QAAAtW,KAAA+pF,eAAA9tF,GAAA4F,EAAAutF,aAAApvF,KAAA2K,QAAA8uE,kCAAAl9E,EAAA4E,EAAAD,EAAA64E,eAAA5V,qCAAApnE,MAAiL,IAAAD,GAAAkD,KAAA2K,QAAA8uE,kCAAAl9E,EAAA4E,EAAAD,EAAA64E,eAAA3V,6CAAArnE,MAA8H8E,GAAAwrF,mBAAArtF,KAAA2lF,iBAAA7oF,GAAAkD,KAAA8tF,0BAAAuB,mBAAAxtF,EAAA5F,GAAqG,MAAA+D,MAAAu9E,WAAA+R,WAAAztF,EAAA0tF,SAAAvvF,KAAA2lF,iBAAA3lF,KAAA2K,QAAA8uE,kCAAAl9E,EAAA4E,EAAAD,EAAA64E,eAAApD,0CAAA55E,SAAAiD,KAAA28E,eAAA,IAAA96E,EAAA2tF,UAAAxvF,KAAA2K,QAAA8uE,kCAAAl9E,EAAA4E,EAAAD,EAAA64E,eAAAvJ,kCAAAzzE,OAAA8E,EAAA4tF,SAAAzvF,KAAA2K,QAAA8uE,kCAAAl9E,EAAA4E,EAAAD,EAAA64E,eAAAxJ,iCAAAxzE,OAAA8E,EAAA0tF,SAAAvvF,KAAA2lF,iBAAA3lF,KAAA2K,QAAA8uE,kCAAAl9E,EAAA4E,EAAAD,EAAA64E,eAAA5J,sCAAApzE,QAAA8E,EAAA6tF,cAAA1vF,KAAA2lF,iBAAA3lF,KAAA2K,QAAA8uE,kCAAAl9E,EAAA4E,EAAAD,EAAA64E,eAAA3J,sCAAArzE,QAAA8E,EAAA8tF,UAAA3vF,KAAA2K,QAAA8uE,kCAAAl9E,EAAA4E,EAAAD,EAAA64E,eAAAtJ,kCAAA1zE,OAAA8E,EAAA+tF,UAAA5vF,KAAA2K,QAAA8uE,kCAAAl9E,EAAA4E,EAAAD,EAAA64E,eAAAzJ,kCAAAvzE,OAAA8E,EAAAguF,QAAA7vF,KAAA2K,QAAA8uE,kCAAAl9E,EAAA4E,EAAAD,EAAA64E,eAAA1J,gCAAAtzE,OAAA8E,EAAAiuF,YAAA9vF,KAAA2K,QAAA8uE,kCAAAl9E,EAAA4E,EAAAD,EAAA64E,eAAArJ,oCAAA3zE,OAAAwD,IAAAW,EAAA64E,eAAAxa,QAAAxiE,QAAA8E,EAAAyrF,aAAAttF,KAAA2K,QAAA8uE,kCAAAl9E,EAAA4E,EAAAD,EAAA64E,eAAA7I,qCAAAn0E,SAAA8E,IAA03CA,EAAAlF,UAAA2xF,sBAAA,SAAAntF,GAA+C,OAAOkX,OAAArY,KAAA+pF,eAAA5oF,GAAAwX,eAAA3Y,KAAA2K,QAAA+N,mBAAAvX,EAAAD,EAAA64E,eAAAphE,eAAA5b,OAAAwgE,cAAAv9D,KAAA2K,QAAA+N,mBAAAvX,EAAAD,EAAA64E,eAAAxc,cAAAxgE,OAAAkhE,YAAAj+D,KAAA2lF,iBAAA3lF,KAAA2K,QAAA+N,mBAAAvX,EAAAD,EAAA64E,eAAA9b,YAAAlhE,QAAAyJ,OAAAxG,KAAA2K,QAAAolF,gBAAA5uF,KAA6VU,EAAAlF,UAAA4xF,yBAAA,SAAAptF,EAAA5E,GAAoD,GAAAgE,GAAAP,KAAA2K,QAAAyV,gBAAAjf,EAAA5E,GAAAsF,EAAA7B,KAAA2K,QAAA0V,kBAAAlf,EAAAZ,EAAAxE,KAAmF,SAAA8F,EAAA,OAAiB9F,KAAAwE,EAAAxE,KAAA4K,KAAApG,EAAAoG,KAAAxG,KAAAH,KAAA2lF,iBAAAplF,EAAAJ,MAAAgT,UAAA,EAAwE,IAAAlX,GAAA+D,KAAA2K,QAAAqlF,gBAAAnuF,EAAAX,EAAA64E,eAAA3e,sBAAAr+D,OAAAtB,EAAAuE,KAAA2K,QAAAqlF,gBAAAnuF,EAAAX,EAAA64E,eAAApe,mCAAA5+D,OAAAD,GAAkLf,KAAAwE,EAAAxE,KAAA4K,KAAApG,EAAAoG,KAAAxG,KAAAH,KAAA2lF,iBAAAplF,EAAAJ,MAAAgT,SAAAtR,EAAAouF,cAAAjwF,KAAA2K,QAAAulF,sBAAAruF,EAAAX,EAAA64E,eAAAre,4BAAA3+D,OAAAozF,cAAAnwF,KAAA+pF,eAAAtuF,GAAA20F,QAAApwF,KAAA2K,QAAAqlF,gBAAAnuF,EAAAX,EAAA64E,eAAA1e,4BAAAt+D,OAAAszF,UAAArwF,KAAA2K,QAAAqlF,gBAAAnuF,EAAAX,EAAA64E,eAAAze,yBAAAv+D,OAAA+R,OAAA9O,KAAA2K,QAAAqlF,gBAAAnuF,EAAAX,EAAA64E,eAAAxe,2BAAAx+D,OAAAyR,UAAAxO,KAAA2lF,iBAAA3lF,KAAA2K,QAAAqlF,gBAAAnuF,EAAAX,EAAA64E,eAAAve,yBAAAz+D,QAAAuzF,WAAAtwF,KAAA2K,QAAAqlF,gBAAAnuF,EAAAX,EAAA64E,eAAAte,+BAAA1+D,OAAAwzF,aAAA7wF,MAAA/C,UAAA4J,MAAA5K,KAAAM,GAA8tB,OAAA+D,MAAAu9E,WAAAr8E,EAAA64E,eAAAzF,kCAAAC,eAAAz3E,EAAA0zF,QAAAxwF,KAAA2K,QAAAqlF,gBAAAnuF,EAAAX,EAAA64E,eAAAzF,kCAAAv3E,OAAAiD,KAAA28E,eAAA,IAAA7/E,EAAA2zF,QAAAzwF,KAAA2K,QAAAqlF,gBAAAnuF,EAAAX,EAAA64E,eAAA1K,4BAAAtyE,OAAAD,EAAA0zF,QAAAxwF,KAAA2K,QAAAqlF,gBAAAnuF,EAAAX,EAAA64E,eAAAzK,4BAAAvyE,QAAAiD,KAAA0wF,uBAAA5zF,EAAArB,GAAAqB,GAAkb+E,EAAAlF,UAAA6xF,uBAAA,SAAAttF,EAAAC,GAAkD,GAAA5E,GAAAyD,KAAA2K,QAAAoR,iBAAA7a,EAAAC,GAAAZ,EAAAP,KAAA2K,QAAAuR,mBAAAhb,EAAA3E,EAAAR,KAAqF,IAAAwE,EAAA,CAAM,GAAAsB,GAAA7B,KAAA2K,QAAAgmF,WAAAzvF,EAAAX,EAAmCsB,GAAAP,SAAAO,EAAAnC,MAAA/C,UAAA4J,MAAA5K,KAAAkG,GAA4C,IAAA5F,IAAOF,KAAAQ,EAAAR,KAAA4K,KAAApK,EAAAoK,KAAAxG,KAAAH,KAAA2lF,iBAAAppF,EAAA4D,MAAA4uF,UAAAxyF,EAAA4D,KAAAgT,SAAAnT,KAAA+pF,eAAAxpF,GAAAxD,MAAA8E,EAAqH,OAAA5F,GAAS,GAAAA,IAAOF,KAAAQ,EAAAR,KAAA4K,KAAApK,EAAAoK,KAAAxG,KAAAH,KAAA2lF,iBAAAppF,EAAA4D,MAAA4uF,UAAAxyF,EAAA4D,KAA6E,OAAAlE,IAAS4F,EAAAlF,UAAAqyF,uBAAA,SAAA7tF,EAAA5E,GAAkD,GAAAgE,GAAAP,KAAA2K,QAAAya,aAAAlkB,EAAA64E,eAAAtY,eAAA1kE,MAAuEiD,MAAA2K,QAAA8L,cAAAvV,EAAA64E,eAAArjE,SAAA3Z,MAAAoE,EAA8D,IAAAU,IAAO+uF,UAAA5wF,KAAA2lF,iBAAA3lF,KAAA2K,QAAAkmF,gBAAAt0F,EAAAQ,MAAAmE,EAAA64E,eAAAh0D,mBAAAhpB,QAAA+zF,UAAA9wF,KAAA2lF,iBAAA3lF,KAAA2K,QAAAkmF,gBAAAt0F,EAAAQ,MAAAmE,EAAA64E,eAAAj0D,mBAAA/oB,QAAA4lB,MAAA3iB,KAAA2lF,iBAAA3lF,KAAA2K,QAAAkmF,gBAAAt0F,EAAAQ,MAAAmE,EAAA64E,eAAA/zD,eAAAjpB,QAAA+lB,MAAA9iB,KAAA2lF,iBAAA3lF,KAAA2K,QAAAkmF,gBAAAt0F,EAAAQ,MAAAmE,EAAA64E,eAAA9zD,eAAAlpB,QAAqb,IAAAiD,KAAAu9E,WAAAr8E,EAAA64E,eAAApF,2BAAAJ,iBAAA1yE,EAAAkvF,WAAA/wF,KAAA2K,QAAAkmF,gBAAAt0F,EAAAQ,MAAAmE,EAAA64E,eAAApF,2BAAA53E,QAAAiD,KAAA28E,eAAA,GAA6M96E,EAAA6kB,UAAA1mB,KAAA2K,QAAAkmF,gBAAAt0F,EAAAQ,MAAAmE,EAAA64E,eAAApzD,mBAAA5pB,OAAA8E,EAAAmvF,UAAAhxF,KAAA2K,QAAAkmF,gBAAAt0F,EAAAQ,MAAAmE,EAAA64E,eAAA5P,yBAAAptE,OAAA8E,EAAAovF,gBAAAjxF,KAAA2K,QAAAkmF,gBAAAt0F,EAAAQ,MAAAmE,EAAA64E,eAAA3P,yBAAArtE,OAAA8E,EAAA+kB,SAAA5mB,KAAA2K,QAAAkmF,gBAAAt0F,EAAAQ,MAAAmE,EAAA64E,eAAA3P,yBAAArtE,MAAuY,IAAAd,GAAA+D,KAAA2K,QAAAya,aAAAlkB,EAAA64E,eAAA9L,gBAAAlxE,MAAwE,IAAAd,EAAA,CAAM4F,EAAA0U,QAAAvW,KAAA+pF,eAAA9tF,EAAiC,IAAAR,GAAAuE,KAAA2K,OAAmB9I,GAAAqvF,cAAAz1F,EAAA01F,oBAAAl1F,EAAAiF,EAAA64E,eAAA3P,yBAAArtE,OAAA8E,EAAAuvF,cAAA31F,EAAA01F,oBAAAl1F,EAAAiF,EAAA64E,eAAA3P,yBAAArtE,OAAA8E,EAAAwvF,mBAAArxF,KAAA2lF,iBAAAlqF,EAAA01F,oBAAAl1F,EAAAiF,EAAA64E,eAAA9S,qBAAAlqE,QAAA8E,EAAAyvF,mBAAAtxF,KAAA2lF,iBAAAlqF,EAAA01F,oBAAAl1F,EAAAiF,EAAA64E,eAAA/S,qBAAAjqE,QAAA8E,EAAA0vF,aAAAvxF,KAAA2lF,iBAAAlqF,EAAA01F,oBAAAl1F,EAAAiF,EAAA64E,eAAA/zD,eAAAjpB,QAAA8E,EAAA2vF,aAAAxxF,KAAA2lF,iBAAAlqF,EAAA01F,oBAAAl1F,EAAAiF,EAAA64E,eAAA9zD,eAAAlpB,QAAA8E,EAAA4vF,aAAAzxF,KAAA2lF,iBAAAlqF,EAAA01F,oBAAAl1F,EAAAiF,EAAA64E,eAAA3P,yBAAArtE,QAAA8E,EAAA6vF,iBAAA1xF,KAAA2lF,iBAAAlqF,EAAA01F,oBAAAl1F,EAAAiF,EAAA64E,eAAAh0D,mBAAAhpB,QAAA8E,EAAA8vF,iBAAA3xF,KAAA2lF,iBAAAlqF,EAAA01F,oBAAAl1F,EAAAiF,EAAA64E,eAAAj0D,mBAAA/oB,YAAu6B8E,GAAA2kB,OAAAxmB,KAAA2K,QAAAkmF,gBAAAt0F,EAAAQ,MAAAmE,EAAA64E,eAAA3P,yBAAArtE,OAAA8E,EAAAykB,OAAAtmB,KAAA2K,QAAAkmF,gBAAAt0F,EAAAQ,MAAAmE,EAAA64E,eAAA3P,yBAAArtE,OAAA8E,EAAA+vF,YAAA5xF,KAAA2lF,iBAAA3lF,KAAA2K,QAAAkmF,gBAAAt0F,EAAAQ,MAAAmE,EAAA64E,eAAA9S,qBAAAlqE,QAAA8E,EAAAgwF,YAAA7xF,KAAA2lF,iBAAA3lF,KAAA2K,QAAAkmF,gBAAAt0F,EAAAQ,MAAAmE,EAAA64E,eAAA/S,qBAAAjqE,QAAA8E,EAAAwkB,MAAArmB,KAAA2lF,iBAAA3lF,KAAA2K,QAAAkmF,gBAAAt0F,EAAAQ,MAAAmE,EAAA64E,eAAA3P,yBAAArtE,QAAsiB,GAAAD,GAAAkD,KAAA8xF,kBAAAv1F,EAAgC,OAAAO,IAAAkD,KAAA8tF,0BAAAuB,mBAAAxtF,EAAA/E,EAAAP,GAAAyD,KAAA2K,QAAA8L,cAAAlW,GAAAsB,GAAmGA,EAAAlF,UAAAm1F,kBAAA,SAAA3wF,GAA2C,MAAAA,KAAAD,EAAA64E,eAAA32D,WAAApjB,KAAA2K,QAAAya,aAAAlkB,EAAA64E,eAAAzf,mBAAAv9D,OAAAoE,IAAAD,EAAA64E,eAAAl1D,iBAAA7kB,KAAA2K,QAAAya,aAAAlkB,EAAA64E,eAAAva,yBAAAziE,OAAAoE,IAAAD,EAAA64E,eAAA7zD,WAAAlmB,KAAA2K,QAAAya,aAAAlkB,EAAA64E,eAAAtU,mBAAA1oE,OAAAoE,IAAAD,EAAA64E,eAAA9uD,iBAAAjrB,KAAA2K,QAAAya,aAAAlkB,EAAA64E,eAAArS,yBAAA3qE,WAAA,IAA0b8E,EAAAlF,UAAA8xF,iCAAA,SAAAttF,EAAA5E,EAAAgE,GAA8D,OAAAsB,GAAA7B,KAAA2K,QAAA1O,EAAA4F,EAAA6b,kBAAAvc,EAAA5E,EAAA2E,EAAA64E,eAAAhI,aAAAh1E,OAAAtB,EAAAoG,EAAA6b,kBAAAvc,EAAA5E,EAAA2E,EAAA64E,eAAA/H,aAAAj1E,OAAAD,EAAA+E,EAAA6b,kBAAAvc,EAAA5E,EAAA2E,EAAA64E,eAAA9H,oBAAAl1E,OAAAq+B,EAAAv5B,EAAA6b,kBAAAvc,EAAA5E,EAAA2E,EAAA64E,eAAA7H,eAAAn1E,OAAArB,EAAAmG,EAAA6b,kBAAAvc,EAAA5E,EAAA2E,EAAA64E,eAAA5H,qBAAAp1E,OAAAlB,EAAAgG,EAAA6b,kBAAAvc,EAAA5E,EAAA2E,EAAA64E,eAAA3H,sBAAAr1E,OAAAnB,EAAAiG,EAAA6b,kBAAAvc,EAAA5E,EAAA2E,EAAA64E,eAAA1H,qBAAAt1E,OAAAjB,EAAA,EAAsfA,EAAAS,EAAA+E,OAAWxF,IAAA,CAAK,GAAAe,GAAA0D,EAAAzE,EAAWe,GAAAsD,KAAAH,KAAA2lF,iBAAA1pF,EAAAH,IAAAe,EAAA8J,KAAAlL,EAAAK,GAAAe,EAAAk1F,YAAAj1F,EAAAhB,GAAAe,EAAAk1F,aAAA,IAAAl1F,EAAA8hB,UAAA9c,EAAAic,0BAAA3c,EAAAtE,EAAAk1F,cAAAl1F,EAAAkS,OAAAqsB,EAAAt/B,GAAAe,EAAAm1F,YAAAt2F,EAAAI,GAAAe,EAAAo1F,aAAAp2F,EAAAC,GAAAe,EAAAq1F,SAAAt2F,EAAAE,GAAAe,EAAAk1F,aAAA,IAAAl1F,EAAAE,MAAAiD,KAAAguF,sBAAAmE,YAAAr1F,EAAAhB,GAAAe,EAAAkS,OAAAlS,EAAA8J,KAAA1K,EAAAH,OAAmT+F,EAAAlF,UAAAkyF,iCAAA,SAAA1tF,EAAA5E,GAA4D,GAAAgE,GAAAP,KAAA2K,QAAA9I,EAAAtB,EAAAmc,4BAAAvb,EAAA5E,GAAAN,EAAAsE,EAAA6xF,oBAAAlxF,EAAA64E,eAAAhK,kCAAAhzE,MAAAR,GAAAd,GAA+IM,KAAA8F,EAAA9F,KAAA4K,KAAA9E,EAAA8E,KAAAxG,KAAAH,KAAA2lF,iBAAA9jF,EAAA1B,MAAAiM,OAAApM,KAAA+pF,eAAA9tF,GAAAo2F,WAAA9xF,EAAA6xF,oBAAAlxF,EAAA64E,eAAArK,+BAAA3yE,MAAAR,GAAA+1F,YAAA/xF,EAAA6xF,oBAAAlxF,EAAA64E,eAAAtK,gCAAA1yE,MAAAR,GAAgR,OAAAyD,MAAA0wF,uBAAAj1F,EAAAQ,GAAAR,GAA0CoG,EAAAlF,UAAAgyF,4BAAA,SAAAxtF,EAAA5E,GAAuD,GAAAgE,GAAAP,KAAA2K,QAAA9I,EAAAtB,EAAA0d,+BAAA9c,EAAA5E,EAAA2E,EAAA64E,eAAAzH,sBAAAv1E,OAAAd,EAAAsE,EAAA6xF,oBAAAlxF,EAAA64E,eAAA3I,uBAAAr0E,MAAA8E,GAAApG,GAAoLM,KAAAwE,EAAAud,0BAAA3c,EAAA5E,GAAAg2F,aAAA1wF,EAAA8E,KAAApG,EAAA0d,+BAAA9c,EAAA5E,EAAA2E,EAAA64E,eAAA17D,wBAAAthB,OAAAy1F,mBAAAjyF,EAAA0d,+BAAA9c,EAAA5E,EAAA2E,EAAA64E,eAAAxH,8BAAAx1E,OAAAmoD,OAAA3kD,EAAA0d,+BAAA9c,EAAA5E,EAAA2E,EAAA64E,eAAA77D,0CAAAnhB,OAAA01F,SAAAlyF,EAAA0d,+BAAA9c,EAAA5E,EAAA2E,EAAA64E,eAAA37D,4CAAArhB,OAAAqP,OAAApM,KAAA+pF,eAAA9tF,GAA4f,OAAA+D,MAAA0wF,uBAAAj1F,EAAAQ,GAAAR,GAA0CoG,EAAAlF,UAAA+zF,uBAAA,SAAAxvF,EAAAC,GAAkD,GAAAA,EAAA,CAAM,GAAA5E,GAAA4E,EAAA8kF,2BAAoC1pF,OAAAqqF,QAAA1lF,EAAAwxF,YAAA1yF,KAAA2lF,iBAAAppF,EAAAqqF,QAAA1lF,EAAAyxF,aAAAp2F,EAAA+E,OAAA/E,EAAAwS,SAAA7N,EAAA0xF,aAAAr2F,EAAAwS,QAAAxS,EAAAsqF,eAAA3lF,EAAA2xF,mBAAAt2F,EAAAsqF,iBAAgLhlF,EAAAlF,UAAAgpF,iBAAA,SAAAxkF,GAA0C,GAAA5E,GAAA2E,EAAAo0D,sBAAAn0D,EAAiC,OAAA5E,KAAAR,KAAAoF,GAAkBU,GAAGV,EAAAgpF,UAAc5tF,GAAAuyF,cAAArzF,KAAoBA,EAAAyF,EAAA64E,eAAAtX,WAAA1lE,OAAAmE,EAAA64E,eAAA32D,WAAA3nB,EAAAyF,EAAA64E,eAAArX,aAAA3lE,OAAAmE,EAAA64E,eAAAl1D,iBAAAppB,EAAAyF,EAAA64E,eAAA5M,WAAApwE,OAAAmE,EAAA64E,eAAA7zD,WAAAzqB,EAAAyF,EAAA64E,eAAA3M,kBAAArwE,OAAAmE,EAAA64E,eAAA32D,WAAA3nB,EAAAyF,EAAA64E,eAAA1M,iBAAAtwE,OAAAmE,EAAA64E,eAAA9uD,iBAAAxvB,EAAAyF,EAAA64E,eAAAzM,wBAAAvwE,OAAAmE,EAAA64E,eAAA9uD,iBAAAxvB,EAAAyF,EAAA64E,eAAAxM,oBAAAxwE,OAAAmE,EAAA64E,eAAAl1D,iBAAAppB,EAAAyF,EAAA64E,eAAAvM,eAAAzwE,OAAAmE,EAAA64E,eAAA32D,WAAA3nB,EAAAyF,EAAA64E,eAAAtM,eAAA1wE,OAAAmE,EAAA64E,eAAA7zD,WAAAzqB,EAAAyF,EAAA64E,eAAArM,iBAAA3wE,OAAAmE,EAAA64E,eAAAl1D,iBAAAppB,EAAAyF,EAAA64E,eAAApM,qBAAA5wE,OAAAmE,EAAA64E,eAAA9uD,iBAAAxvB,EAAAyF,EAAA64E,eAAAnM,wBAAA7wE,OAAAmE,EAAA64E,eAAA32D,WAAA3nB,EAAAyF,EAAA64E,eAAAlM,wBAAA9wE,OAAAmE,EAAA64E,eAAA7zD,WAAAzqB,EAAAyF,EAAA64E,eAAAjM,0BAAA/wE,OAAAmE,EAAA64E,eAAAl1D,iBAAAppB,EAAAyF,EAAA64E,eAAAhM,8BAAAhxE,OAAAmE,EAAA64E,eAAA9uD,iBAAAxvB,GAAAc,EAAAN,EAAA4F,GAAAX,EAAA25E,WAAAzjC,MAAA,aAAA76C,GAAA4E,EAAA2xF,cAAAv2F,CAAwrC,IAAAN,GAAAR,GAAQyF,EAAAkpF,SAAAlpF,EAAAkpF,aAA0B7tF,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAC,GAAa,GAAA5E,GAAA,WAAiB,QAAAA,GAAA2E,EAAAC,GAAgBnB,KAAAi7E,OAAA95E,EAAAnB,KAAA2K,QAAAzJ,EAAAyJ,QAAA3K,KAAAmsF,mBAAAjrF,EAAAyJ,QAAA0W,oBAAArhB,KAAAosF,cAAAnyE,SAAA8S,cAAA,UAAA/sB,KAAAqsF,iBAAArsF,KAAAosF,cAAAvhF,WAAA,MAAA7K,KAAAssF,cAAAryE,SAAA8S,cAAA,UAAA/sB,KAAAusF,iBAAAvsF,KAAAssF,cAAAzhF,WAAA,MAAA7K,KAAAusF,iBAAAC,uBAAA,EAAAxsF,KAAAusF,iBAAAE,0BAAA,EAAAzsF,KAAAusF,iBAAAG,wBAAA,EAAA1sF,KAAAusF,iBAAAI,6BAAA,EAAA3sF,KAAAusF,iBAAAK,yBAAA,EAA8iB,MAAArwF,GAAAI,UAAA0yF,mBAAA,SAAAnuF,EAAAC,EAAA5E,GAAsD,YAAAA,MAAA,MAAA4E,EAAA,CAA2B,GAAAZ,GAAAY,EAAA8kF,2BAAoC1lF,OAAAJ,OAAAe,EAAAf,KAAAH,KAAA2lF,iBAAAplF,EAAAJ,OAAAI,EAAAsgB,SAAA3f,EAAA2f,OAAA7gB,KAAA2lF,iBAAAplF,EAAAsgB,SAAAtgB,EAAAojB,iBAAAziB,EAAAyiB,eAAA3jB,KAAA2lF,iBAAAplF,EAAAojB,iBAAAziB,EAAAgK,MAAA3K,EAAA2K,MAAAhK,EAAAkK,OAAA7K,EAAA6K,OAAA7K,EAAAipB,QAAAtoB,EAAAsoB,MAAAjpB,EAAAipB,OAAAjtB,IAAA2E,EAAA6xF,OAAA/yF,KAAAgzF,sBAAAz2F,EAAA4E,EAAAZ,OAAoShE,EAAAI,UAAAq2F,sBAAA,SAAA7xF,EAAAZ,EAAAsB,GAAmD,IAAI,GAAA5F,GAAA+D,KAAA2K,QAAAlP,IAAwB,KAAAyF,EAAA85E,iBAAAF,uBAAAj5E,EAAA1B,KAAA0B,EAAAgf,OAAAhf,EAAA8hB,gBAAA,MAAAloB,EAAyF,IAAAqB,GAAAkD,KAAA2K,QAAAya,aAAAlkB,EAAA64E,eAAAjV,oBAAA/nE,MAA4Ed,GAAAqlB,gBAAApgB,EAAA64E,eAAA54D,YAAApkB,MAAAiD,KAAAmsF,mBAA8E,KAAI,GAAA/wD,GAAAv5B,EAAAqJ,MAAAxP,EAAAmG,EAAAuJ,MAAyB,IAAAjK,IAAAD,EAAA64E,eAAA7zD,YAAArkB,EAAA2nB,MAAA,OAAA3tB,GAAAI,EAAAL,EAAA,EAA4DA,EAAAiG,EAAA2nB,MAAU5tB,MAAA,GAAAA,EAAAiG,EAAA2nB,MAAA,IAAA3tB,EAAAsxF,wBAAAjsF,EAAA64E,eAAA54D,YAAApkB,MAAAmE,EAAA64E,eAAA/3D,kBAAAjlB,MAAAwD,EAAA,EAAA3E,GAAAH,EAAA,YAAAG,GAAAoE,KAAA+sF,WAAA9wF,EAAA,IAAAm/B,EAAA1/B,EAAAmG,EAAA1B,WAAwL,IAAAgB,IAAAD,EAAA64E,eAAA9uD,kBAAAppB,EAAA2nB,MAAA,OAAA3tB,GAAAI,EAAAL,EAAA,EAAuEA,EAAAiG,EAAA2nB,MAAU5tB,MAAA,GAAAA,EAAAiG,EAAA2nB,MAAA,IAAA3tB,EAAAsxF,wBAAAjsF,EAAA64E,eAAA54D,YAAApkB,MAAAmE,EAAA64E,eAAA/3D,kBAAAjlB,MAAAwD,EAAA,EAAA3E,GAAAH,EAAA,SAAAG,GAAAoE,KAAA+sF,WAAA9wF,EAAA,IAAAm/B,EAAA1/B,EAAAmG,EAAA1B,WAAqL,IAAAgB,IAAAD,EAAA64E,eAAAl1D,iBAAA,OAAA/oB,GAAA,EAAAe,EAAAN,EAAA02F,aAA2En3F,EAAAe,EAAAyE,OAAWxF,IAAA,CAAK,GAAA8vD,GAAA/uD,EAAAf,EAAWG,GAAAinB,qBAAAhiB,EAAA64E,eAAA54D,YAAApkB,MAAAmE,EAAA64E,eAAA/3D,kBAAAjlB,MAAA6uD,EAAA7uD,MAAAwD,EAAA,GAAA9E,EAAAmwD,EAAA7vD,MAAAiE,KAAA+sF,WAAA9wF,EAAA,IAAAm/B,EAAA1/B,EAAAmG,EAAA1B,UAA4JlE,GAAAinB,qBAAAhiB,EAAA64E,eAAA54D,YAAApkB,MAAAmE,EAAA64E,eAAA/3D,kBAAAjlB,MAAAmE,EAAA64E,eAAA32D,WAAArmB,MAAAwD,EAAA,GAAA9E,EAAAyF,EAAA64E,eAAA32D,WAAArnB,MAAAiE,KAAA+sF,WAAA9wF,EAAA,IAAAm/B,EAAA1/B,EAAAmG,EAAA1B,MAAqN,MAAAe,IAAU,MAAAjF,GAAAqlB,gBAAApgB,EAAA64E,eAAA54D,YAAApkB,MAAAD,GAAArB,EAAiE,MAAAyF,MAAW3E,EAAAI,UAAAowF,WAAA,SAAAxwF,EAAAgE,EAAAsB,EAAA5F,EAAAR,EAAAqB,GAA8C,IAAI,GAAAkD,KAAA2K,QAAAqiF,uBAAA9rF,EAAA64E,eAAA54D,YAAApkB,SAAAmE,EAAA64E,eAAAtV,qBAAA1nE,MAAA,MAAgID,MAAAoE,EAAA64E,eAAA1qE,cAAAtS,KAA0C,IAAAq+B,GAAAl6B,EAAA85E,iBAAAD,WAAAx+E,EAAAgE,EAAAsB,EAAA5F,EAAAR,EAAAqB,EAAiD,KAAAs+B,EAAA,MAAap7B,MAAAosF,cAAAlhF,MAAAjP,EAAA+D,KAAAosF,cAAAhhF,OAAA3P,CAAuD,IAAAC,GAAAsE,KAAAqsF,iBAAAkB,gBAAAtxF,EAAAR,EAAiDC,GAAA2R,KAAAjG,IAAAg0B,GAAAp7B,KAAAqsF,iBAAAmB,aAAA9xF,EAAA,IAAwD,IAAAG,GAAAI,EAAAR,CAA61B,OAAn1BI,GAAA,GAAAmE,KAAAssF,cAAAphF,MAAA/J,EAAA0sF,YAAAJ,gBAAA5xF,EAAAmE,KAAAssF,cAAAlhF,OAAAjK,EAAA0sF,YAAAJ,iBAAA5xF,EAAA,GAAAmE,KAAAssF,cAAAphF,MAAA/J,EAAA0sF,YAAAJ,gBAAAztF,KAAAssF,cAAAlhF,OAAAjK,EAAA0sF,YAAAJ,gBAAA5xF,IAAAmE,KAAAssF,cAAAphF,MAAA/J,EAAA0sF,YAAAJ,gBAAAztF,KAAAssF,cAAAlhF,OAAAjK,EAAA0sF,YAAAJ,iBAAAztF,KAAAssF,cAAAphF,MAAAtL,KAAAe,IAAAX,KAAAssF,cAAAphF,MAAA,GAAAlL,KAAAssF,cAAAlhF,OAAAxL,KAAAe,IAAAX,KAAAssF,cAAAlhF,OAAA,GAAApL,KAAAusF,iBAAAmB,yBAAA,OAAA1tF,KAAAusF,iBAAAr1D,MAAA,MAAAl3B,KAAAusF,iBAAAp3D,UAAA,GAAAn1B,KAAAssF,cAAAlhF,QAAApL,KAAAusF,iBAAAnjE,UAAAppB,KAAAosF,cAAA,IAAAnwF,EAAAR,EAAA,IAAAuE,KAAAssF,cAAAphF,MAAAlL,KAAAssF,cAAAlhF,QAAApL,KAAAusF,iBAAAoB,aAAA,aAAA3tF,KAAAusF,iBAAAmB,yBAAA,cAAm1B1tF,KAAAssF,cAAAsB,YAAsC,MAAA1sF,MAAW3E,EAAAI,UAAAgpF,iBAAA,SAAAxkF,GAA0C,GAAA5E,GAAA2E,EAAAo0D,sBAAAn0D,EAAiC,OAAA5E,KAAAR,KAAAoF,EAAA,IAAqB5E,IAAMA,GAAAkxF,gBAAA,GAAAlxF,EAAA02F,cAAA/xF,EAAA64E,eAAAhyD,4BAAA7mB,EAAA64E,eAAA9xD,4BAAA/mB,EAAA64E,eAAA5xD,4BAAAjnB,EAAA64E,eAAA/xD,4BAAA9mB,EAAA64E,eAAA7xD,4BAAAhnB,EAAA64E,eAAA3xD,6BAAAjnB,EAAA4sF,0BAAAxxF,GAAkV2E,EAAAkpF,SAAAlpF,EAAAkpF,aAA0B7tF,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAC,GAAa,GAAA5E,GAAA,WAAiB,QAAA4E,GAAAD,EAAAC,GAAgBnB,KAAAi7E,OAAA95E,EAAAnB,KAAA2K,QAAAzJ,EAAAyJ,QAAqC,MAAAxJ,GAAAxE,UAAAw1F,YAAA,SAAA51F,EAAAgE,EAAAsB,EAAA5F,GAAiD,GAAAR,GAAA0F,EAAA+xF,SAAAj3F,EAAoB,IAAAR,EAAA,CAAM,GAAAqB,GAAA,GAAArB,GAAA03F,gBAAAtxF,EAAApG,EAAA23F,kBAAAh4D,EAAAp7B,KAAA2K,QAAAjP,EAAA0/B,EAAAg3D,oBAAAlxF,EAAA64E,eAAA3I,uBAAAr0E,MAAAR,EAA0I,IAAAb,EAAA,CAAM,GAAAG,GAAAu/B,EAAAhW,aAAAlkB,EAAA64E,eAAA3I,uBAAAr0E,MAAoE,KAAIq+B,EAAA7uB,WAAArL,EAAA64E,eAAAl7D,eAAA9hB,MAAArB,GAAA0/B,EAAAi4D,iBAAAnyF,EAAA64E,eAAAl7D,eAAA9hB,MAAAwD,EAAAzD,GAAoH,MAAAoE,GAAS,OAAOrF,GAAAu/B,EAAA7uB,WAAArL,EAAA64E,eAAAl7D,eAAA9hB,MAAAlB,GAAyD,MAAA6D,OAAA/C,UAAA4J,MAAA5K,KAAAmB,KAAsCqE,IAAM5E,GAAA22F,UAAA3yF,KAAgBA,EAAAW,EAAA64E,eAAA7X,KAAAnlE,QAAiCo2F,gBAAAjtF,WAAAktF,iBAAA,GAA8C7yF,EAAAW,EAAA64E,eAAA5X,UAAAplE,QAAsCo2F,gBAAAjtF,WAAAktF,iBAAA,GAA8C7yF,EAAAW,EAAA64E,eAAA3X,UAAArlE,QAAsCo2F,gBAAAjtF,WAAAktF,iBAAA,GAA8C7yF,EAAAW,EAAA64E,eAAA1X,UAAAtlE,QAAsCo2F,gBAAAjtF,WAAAktF,iBAAA,GAA8C7yF,EAAAW,EAAA64E,eAAAvqE,IAAAzS,QAAgCo2F,gBAAA/sF,WAAAgtF,iBAAA,GAA8C7yF,EAAAW,EAAA64E,eAAAhY,SAAAhlE,QAAqCo2F,gBAAA/sF,WAAAgtF,iBAAA,GAA8C7yF,EAAAW,EAAA64E,eAAA/X,SAAAjlE,QAAqCo2F,gBAAA/sF,WAAAgtF,iBAAA,GAA8C7yF,EAAAW,EAAA64E,eAAA9X,SAAAllE,QAAqCo2F,gBAAA/sF,WAAAgtF,iBAAA,GAA8C7yF,EAAAW,EAAA64E,eAAAtqE,aAAA1S,QAAyCo2F,gBAAApiF,YAAAqiF,iBAAA,GAA+C7yF,EAAAW,EAAA64E,eAAA/K,kBAAAjyE,QAA8Co2F,gBAAApiF,YAAAqiF,iBAAA,GAA+C7yF,EAAAW,EAAA64E,eAAA9K,kBAAAlyE,QAA8Co2F,gBAAApiF,YAAAqiF,iBAAA,GAA+C7yF,EAAAW,EAAA64E,eAAA7K,kBAAAnyE,QAA8Co2F,gBAAApiF,YAAAqiF,iBAAA,GAA+C7yF,EAAAW,EAAA64E,eAAArqE,MAAA3S,QAAkCo2F,gBAAA1zF,aAAA2zF,iBAAA,GAAgD7yF,EAAAW,EAAA64E,eAAAnY,WAAA7kE,QAAuCo2F,gBAAA1zF,aAAA2zF,iBAAA,GAAgD7yF,EAAAW,EAAA64E,eAAAlY,WAAA9kE,QAAuCo2F,gBAAA1zF,aAAA2zF,iBAAA,GAAgD7yF,EAAAW,EAAA64E,eAAAjY,WAAA/kE,QAAuCo2F,gBAAA1zF,aAAA2zF,iBAAA,GAAgD7yF,EAAAW,EAAA64E,eAAAzX,WAAAvlE,QAAuCo2F,gBAAA1zF,aAAA2zF,iBAAA,GAAgD7yF,EAAAW,EAAA64E,eAAArL,aAAA3xE,QAAyCo2F,gBAAA1zF,aAAA2zF,iBAAA,GAAgD7yF,EAAAW,EAAA64E,eAAApL,aAAA5xE,QAAyCo2F,gBAAA1zF,aAAA2zF,iBAAA,GAAgD7yF,EAAAW,EAAA64E,eAAAxX,WAAAxlE,QAAuCo2F,gBAAA1zF,aAAA2zF,iBAAA,GAAgD7yF,EAAAW,EAAA64E,eAAAnL,aAAA7xE,QAAyCo2F,gBAAA1zF,aAAA2zF,iBAAA,GAAgD7yF,EAAAW,EAAA64E,eAAAlL,aAAA9xE,QAAyCo2F,gBAAA1zF,aAAA2zF,iBAAA,IAAiD7yF,EAAAW,EAAA64E,eAAAvX,WAAAzlE,QAAuCo2F,gBAAA1zF,aAAA2zF,iBAAA,IAAiD7yF,EAAAW,EAAA64E,eAAAjL,aAAA/xE,QAAyCo2F,gBAAA1zF,aAAA2zF,iBAAA,GAAgD7yF,EAAAW,EAAA64E,eAAAhL,aAAAhyE,QAAyCo2F,gBAAA1zF,aAAA2zF,iBAAA,IAAiD7yF,EAAAW,EAAA64E,eAAAtX,WAAA1lE,QAAuCo2F,gBAAAjtF,WAAAktF,iBAAA,GAA8C7yF,EAAAW,EAAA64E,eAAArX,aAAA3lE,QAAyCo2F,gBAAAjtF,WAAAktF,iBAAA,GAA8C7yF,GAAAY,EAAA8sF,sBAAA1xF,CAA8B,IAAAgE,IAAMW,EAAAkpF,SAAAlpF,EAAAkpF,aAA0B7tF,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAA,GAAa,QAAAC,GAAAD,GAAc,MAAAA,GAAAW,GAAY,QAAAtF,GAAA2E,EAAAC,GAAgBA,EAAA4hF,YAAAxiF,EAAAY,GAAAD,EAAAW,GAAAV,EAA0B,QAAAZ,GAAAW,GAAc,MAAAA,KAAAgnF,SAAA,UAAAhnF,EAAA+G,GAAA,oBAAuD,GAAApG,GAAA,sBAA6BX,GAAA4hF,kBAAA3hF,EAAAD,EAAAoyF,qBAAA/2F,EAAA2E,EAAAqyF,wBAAAhzF,GAA2EW,EAAA2hF,eAAA3hF,EAAA2hF,mBAAsCtmF,WAAS,SAAA2E,IAAe,SAAAA,GAAa,GAAAC,GAAA,WAAiB,QAAAA,GAAAD,EAAAC,GAAgBnB,KAAAqZ,QAAAnY,EAAAlB,KAAAkoF,SAAAhnF,EAAAgnF,SAAAloF,KAAAG,KAAAe,EAAAf,KAAAH,KAAAiI,GAAA,EAAmE,MAAA9G,GAAAxE,UAAA2gF,eAAA,SAAAn8E,GAA8C,GAAAnB,KAAAG,KAAA,CAAc,GAAA5D,EAAM,KAAA4E,EAAA,MAAA5E,EAAe,IAAAA,EAAA2E,EAAA4hF,kBAAA3hF,GAAA,MAAA5E,EAAqC,IAAA4E,YAAAnB,MAAAG,KAAA,CAA2B,GAAAI,GAAAP,KAAAwzF,WAAuB,OAAAj3F,IAAU2rF,SAAAloF,KAAAkoF,SAAAjgF,GAAA1H,GAA4BW,EAAAoyF,qBAAAnyF,EAAA5E,KAA+B,MAAAA,KAAU4E,EAAAxE,UAAA62F,UAAA,WAAkC,MAAAxzF,MAAAiI,MAAiB9G,IAAMD,GAAAuyF,gBAAAtyF,GAAoBD,EAAA2hF,eAAA3hF,EAAA2hF,mBAAsCtmF,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAC,GAAa,GAAA5E,GAAA,SAAA2E,GAAkB,QAAAC,KAAa,cAAAD,KAAAsC,MAAAxD,KAAA4B,YAAA5B,KAA+C,MAAAO,GAAAY,EAAAD,GAAAC,GAAgBA,EAAAsyF,gBAAoBl3F,GAAAsF,GAAAX,EAAA25E,WAAAL,YAAA,gBAAAj+E,GAAA4E,EAAAuyF,OAAAn3F,CAA4D,IAAAN,GAAA,SAAAiF,GAAkB,QAAAC,KAAa,cAAAD,KAAAsC,MAAAxD,KAAA4B,YAAA5B,KAA+C,MAAAO,GAAAY,EAAAD,GAAAC,GAAgBA,EAAAsyF,gBAAoBx3F,GAAA4F,GAAAX,EAAA25E,WAAAL,YAAA,qBAAAv+E,GAAAkF,EAAA2rF,YAAA7wF,CAAsE,IAAAR,GAAA,SAAAyF,GAAkB,QAAAC,KAAa,cAAAD,KAAAsC,MAAAxD,KAAA4B,YAAA5B,KAA+C,MAAAO,GAAAY,EAAAD,GAAAC,GAAgBA,EAAAsyF,gBAAoBh4F,GAAAoG,GAAAX,EAAA25E,WAAAL,YAAA,iBAAA/+E,GAAA0F,EAAAwyF,QAAAl4F,CAA8D,IAAAqB,GAAA,SAAAoE,GAAkB,QAAAC,KAAa,cAAAD,KAAAsC,MAAAxD,KAAA4B,YAAA5B,KAA+C,MAAAO,GAAAY,EAAAD,GAAAC,GAAgBA,EAAAsyF,gBAAoB32F,GAAA+E,GAAAX,EAAA25E,WAAAL,YAAA,eAAA19E,GAAAqE,EAAAyyF,MAAA92F,CAA0D,IAAAs+B,GAAA,SAAAl6B,GAAkB,QAAAC,KAAa,cAAAD,KAAAsC,MAAAxD,KAAA4B,YAAA5B,KAA+C,MAAAO,GAAAY,EAAAD,GAAAC,GAAgBA,EAAAsyF,gBAAoBr4D,GAAAv5B,GAAAX,EAAA25E,WAAAL,YAAA,sBAAAp/C,GAAAj6B,EAAA0yF,aAAAz4D,CAAwE,IAAA1/B,GAAA,SAAAwF,GAAkB,QAAAC,KAAa,cAAAD,KAAAsC,MAAAxD,KAAA4B,YAAA5B,KAA+C,MAAAO,GAAAY,EAAAD,GAAAC,GAAgBA,EAAAsyF,gBAAoB/3F,GAAAmG,GAAAX,EAAA25E,WAAAL,YAAA,iBAAA9+E,GAAAyF,EAAA2yF,QAAAp4F,CAA8D,IAAAG,GAAA,SAAAqF,GAAkB,QAAAC,KAAa,cAAAD,KAAAsC,MAAAxD,KAAA4B,YAAA5B,KAA+C,MAAAO,GAAAY,EAAAD,GAAAC,GAAgBA,EAAAsyF,gBAAoB53F,GAAAgG,GAAAX,EAAA25E,WAAAL,YAAA,gBAAA3+E,GAAAsF,EAAA4yF,OAAAl4F,CAA4D,IAAAD,GAAA,SAAAsF,GAAkB,QAAAC,KAAa,cAAAD,KAAAsC,MAAAxD,KAAA4B,YAAA5B,KAA+C,MAAAO,GAAAY,EAAAD,GAAAC,GAAgBA,EAAAsyF,gBAAoB73F,GAAAiG,GAAAX,EAAA25E,WAAAL,YAAA,cAAA5+E,GAAAuF,EAAA6yF,KAAAp4F,CAAwD,IAAAE,GAAA,SAAAoF,GAAkB,QAAAC,KAAa,cAAAD,KAAAsC,MAAAxD,KAAA4B,YAAA5B,KAA+C,MAAAO,GAAAY,EAAAD,GAAAC,GAAgBA,EAAAsyF,gBAAoB33F,GAAA+F,GAAAX,EAAA25E,WAAAL,YAAA,iBAAA1+E,GAAAqF,EAAA8yF,QAAAn4F,CAA8D,IAAAe,GAAA,SAAAqE,GAAkB,QAAAC,KAAa,cAAAD,KAAAsC,MAAAxD,KAAA4B,YAAA5B,KAA+C,MAAAO,GAAAY,EAAAD,GAAAC,GAAgBA,EAAAsyF,gBAAoB52F,GAAAgF,GAAAX,EAAA25E,WAAAL,YAAA,2BAAA39E,GAAAsE,EAAA+yF,kBAAAr3F,CAAkF,IAAA+uD,GAAA,SAAA1qD,GAAkB,QAAAC,KAAa,cAAAD,KAAAsC,MAAAxD,KAAA4B,YAAA5B,KAA+C,MAAAO,GAAAY,EAAAD,GAAAC,GAAgBA,EAAAsyF,gBAAoB7nC,GAAA/pD,GAAAX,EAAA25E,WAAAL,YAAA,yBAAA5uB,GAAAzqD,EAAAgzF,gBAAAvoC,CAA8E,IAAA6B,GAAA,SAAAvsD,GAAkB,QAAAC,KAAa,cAAAD,KAAAsC,MAAAxD,KAAA4B,YAAA5B,KAA+C,MAAAO,GAAAY,EAAAD,GAAAC,GAAgBA,EAAAsyF,gBAAoBhmC,GAAA5rD,GAAAX,EAAA25E,WAAAL,YAAA,2BAAA/sB,GAAAtsD,EAAAizF,kBAAA3mC,GAAkFvsD,EAAA2hF,eAAA3hF,EAAA2hF,mBAAsCtmF,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAA,GAAa,GAAAC,GAAA,WAAiB,QAAAD,KAAAC,GAAgBnB,KAAAqZ,QAAAnY,EAAAlB,KAAAi7E,OAAA95E,EAAAnB,KAAAq0F,aAAAnzF,EAAAmzF,aAA8D,MAAAnzF,GAAAvE,UAAA23F,eAAA,SAAApzF,GAA8CA,EAAAu+E,SAAAv+E,EAAAu+E,YAA0B,IAAAt+E,GAAAnB,KAAAu0F,YAAArzF,EAA0BA,GAAAu+E,SAAAn7E,KAAAnD,IAAmBD,EAAAvE,UAAA43F,YAAA,SAAArzF,GAAqC,GAAAC,IAAOkzF,aAAAr0F,KAAAq0F,aAAgC,OAAAr0F,MAAAw0F,iBAAAtzF,EAAAC,MAAoCD,IAAMA,GAAAuzF,aAAAtzF,GAAiBD,EAAAwzF,YAAAxzF,EAAAwzF,gBAAgCn4F,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAC,GAAa,GAAA5E,GAAA,WAAiB,QAAA4E,GAAAD,EAAAC,GAAgBnB,KAAAqZ,QAAAnY,EAAAlB,KAAAi7E,OAAA95E,EAAAnB,KAAA20F,aAA8C30F,KAAA40F,wBAA6B50F,KAAAm9E,mBAAAj8E,EAAAi8E,mBAAAn9E,KAAA60F,yBAAA70F,KAAA80F,gBAAiG,MAAA3zF,GAAAxE,UAAAkjF,eAAA,SAAA3+E,GAA8C,OAAAC,KAAAnB,MAAA20F,UAAA,GAAA30F,KAAA20F,UAAA/3F,eAAAuE,GAAA,CAAiE,GAAA5E,GAAAyD,KAAA20F,UAAAxzF,EAAwB5E,GAAA+3F,eAAApzF,KAAqBC,EAAAxE,UAAAk4F,uBAAA,WAA+C,OAAA1zF,KAAAnB,MAAAqZ,QAAAklE,kBAAA,GAAAv+E,KAAAqZ,QAAAklE,kBAAA3hF,eAAAuE,GAAA,CAAiG,GAAA5E,GAAAyD,KAAAqZ,QAAAklE,kBAAAp9E,GAAAZ,EAAAW,EAAA25E,WAAAD,gBAAAr+E,EAA0EgE,KAAAP,KAAA40F,qBAAAr0F,GAAAhE,KAAqC4E,EAAAxE,UAAAm4F,cAAA,WAAsC,OAAA3zF,KAAAnB,MAAA40F,qBAAA,GAAA50F,KAAA40F,qBAAAh4F,eAAAuE,GAAA,CAAuF,GAAA5E,GAAA2E,EAAAk0D,OAAei/B,aAAAlzF,GAAenB,KAAAm9E,oBAAA58E,EAAA,GAAAP,MAAA40F,qBAAAzzF,GAAA5E,EAAAyD,KAAAi7E,OAA4Ej7E,MAAA20F,UAAAxzF,GAAAZ,IAAqBY,IAAMA,GAAA4zF,gBAAAx4F,GAAoB2E,EAAAwzF,YAAAxzF,EAAAwzF,gBAAgCn4F,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAC,GAAa,GAAA5E,GAAAN,EAAA,SAAAiF,GAAoB,QAAAC,KAAa,cAAAD,KAAAsC,MAAAxD,KAAA4B,YAAA5B,KAA+C,MAAAO,GAAAY,EAAAD,GAAAC,EAAAxE,UAAA63F,iBAAA,SAAAtzF,EAAAC,GAAyD,GAAAD,EAAAg+E,SAAA,CAAe/9E,EAAA6zF,MAAA9zF,EAAAg+E,SAAA59E,OAAAH,EAAAwH,KAAA,EAAAxH,EAAA6lD,MAAA,CAA6C,QAAAzqD,GAAA,EAAAgE,EAAAW,EAAAg+E,SAAyB3iF,EAAAgE,EAAAe,OAAW/E,IAAA,CAAK,GAAAsF,GAAAtB,EAAAhE,EAAW,WAAAsF,EAAA9F,KAAAoF,EAAA6lD,QAAA/qD,EAAAmsF,aAAAhnF,QAAAS,EAAA9F,OAAA,GAAAoF,EAAAwH,UAAyExH,GAAGA,EAAAszF,aAAiBl4F,GAAA6rF,cAAA,4HAAA7rF,EAAAN,EAAA4F,GAAAX,EAAA25E,WAAAF,SAAA,oBAAAp+E,GAAA4E,EAAA8zF,wBAAA14F,CAA4N,IAAAN,IAAMiF,EAAAwzF,YAAAxzF,EAAAwzF,gBAAgCn4F,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAC,GAAa,GAAA5E,GAAA,SAAA2E,GAAkB,QAAAC,KAAa,cAAAD,KAAAsC,MAAAxD,KAAA4B,YAAA5B,KAA+C,MAAAO,GAAAY,EAAAD,GAAAC,EAAAxE,UAAA63F,iBAAA,SAAAtzF,EAAAC,GAAyD,GAAAD,EAAAg+E,SAAA,CAAe,OAAA3iF,MAAYgE,EAAA,EAAAsB,EAAAX,EAAAg+E,SAAkB3+E,EAAAsB,EAAAP,OAAWf,IAAA,CAAK,GAAAtE,GAAA4F,EAAAtB,EAAWhE,GAAAN,EAAAF,MAAAQ,EAAAN,EAAAF,OAAA,EAAAQ,EAAAN,EAAAF,QAAmC,GAAAN,GAAAS,OAAAuP,KAAAlP,GAAAqb,IAAA,SAAA1W,GAAqC,OAAAA,EAAA3E,EAAA2E,KAAiBzF,GAAAgtB,KAAA,SAAAvnB,EAAAC,GAAqB,GAAA5E,GAAA4E,EAAA,GAAAD,EAAA,EAAgB,YAAA3E,EAAA2E,EAAA,GAAAg0F,cAAA/zF,EAAA,IAAA5E,GAA0C,QAAAO,GAAA,EAAAs+B,EAAA3/B,EAAgBqB,EAAAs+B,EAAA95B,OAAWxE,IAAA,CAAK,GAAApB,GAAA0/B,EAAAt+B,EAAWqE,GAAAzF,EAAA,IAAAA,EAAA,MAAeyF,GAAGA,EAAAszF,aAAiBl4F,GAAAsF,GAAAX,EAAA25E,WAAAF,SAAA,aAAAp+E,GAAA4E,EAAAg0F,iBAAA54F,GAAgE2E,EAAAwzF,YAAAxzF,EAAAwzF,gBAAgCn4F,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAC,GAAa,GAAA5E,GAAA,SAAA2E,GAAkB,QAAAC,KAAa,cAAAD,KAAAsC,MAAAxD,KAAA4B,YAAA5B,KAA+C,MAAAO,GAAAY,EAAAD,GAAAC,EAAAxE,UAAA63F,iBAAA,SAAAtzF,EAAAC,GAAyD,GAAAD,EAAAg+E,SAAA,CAAe,OAAA3iF,GAAA,EAAAgE,EAAA,EAAAsB,EAAAX,EAAAg+E,SAA6B3+E,EAAAsB,EAAAP,OAAWf,IAAA,CAAK,GAAAtE,GAAA4F,EAAAtB,EAAW,gBAAAtE,EAAAF,MAAAE,EAAAsmF,iBAAAjhF,QAAA,EAAA/E,GAAAN,EAAAsmF,iBAAA,2BAAAtmF,EAAAF,MAAAE,EAAAsmF,iBAAAjhF,QAAA,EAAA/E,GAAAN,EAAAsmF,iBAAA,oBAAAtmF,EAAAF,MAAAE,EAAAsmF,iBAAAjhF,QAAA,EAAA/E,GAAAN,EAAAsmF,iBAAA,6BAAAtmF,EAAAF,MAAAE,EAAAsmF,iBAAAjhF,QAAA,EAAA/E,GAAAN,EAAAsmF,iBAAA,kCAAAtmF,EAAAF,MAAAE,EAAAsmF,iBAAAjhF,QAAA,EAAA/E,GAAAN,EAAAsmF,iBAAA,yBAAAtmF,EAAAF,MAAAE,EAAAsmF,iBAAAjhF,QAAA,IAAA/E,GAAAN,EAAAsmF,iBAAA,IAA8fphF,EAAAi0F,qBAAA74F,IAA0B4E,GAAGA,EAAAszF,aAAiBl4F,GAAAsF,GAAAX,EAAA25E,WAAAF,SAAA,eAAAp+E,GAAA4E,EAAAk0F,mBAAA94F,GAAoE2E,EAAAwzF,YAAAxzF,EAAAwzF,gBAAgCn4F,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAA,GAAa,GAAAC,GAAA,WAAiB,QAAAD,MAAc,MAAAA,GAAAo0F,eAAA,SAAAp0F,GAAoC,OAAAC,GAAAD,EAAAq0F,wBAAAh5F,EAAA2E,EAAAs0F,cAAsDj5F,KAAA8O,eAAA9O,EAAAk5F,cAAmCl5F,IAAAi5F,aAAmB,IAAAj1F,GAAAhE,EAAAg5F,uBAAgCp0F,GAAA6yB,IAAAzzB,EAAAyzB,IAAA9yB,EAAAo0F,gBAAA,GAAAn0F,EAAA4yB,OAAAxzB,EAAAwzB,QAAA7yB,EAAAo0F,gBAAA,IAAyEp0F,IAAMA,GAAAw0F,qBAAAv0F,GAAyBD,EAAAy0F,mBAAAz0F,EAAAy0F,uBAA8Cp5F,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAA,GAAa,GAAAC,GAAA,WAAiB,QAAAD,KAAAC,GAAgBnB,KAAAu7E,iBAAAr6E,EAAAlB,KAAAi7E,OAAA95E,EAAAnB,KAAA41F,0BAAA37E,SAAA8S,cAAA,OAAmG,MAAA7rB,GAAAvE,UAAAk5F,eAAA,SAAA30F,GAA8C,GAAAC,GAAA8Y,SAAA8S,cAAA,MAAoC,OAAA5rB,GAAA2uD,UAAA5uD,EAAAC,EAAA20F,mBAAyC50F,EAAAvE,UAAAo5F,aAAA,SAAA70F,GAAsC,OAAAC,GAAAnB,KAAAzD,KAAAgE,EAAA,EAAwBA,EAAAqB,UAAAN,OAAmBf,IAAAhE,EAAAgE,EAAA,GAAAqB,UAAArB,EAAwB,IAAAsB,GAAAX,EAAA80F,IAAA/5F,EAAA,EAAiB,OAAAM,GAAAoP,QAAA,SAAAzK,EAAA3E,GAA+B,GAAAgE,GAAAsB,EAAAtF,EAAWmD,OAAAqO,QAAA7M,SAAA6W,KAAA,KAAAxX,KAAAe,OAAA,SAAAf,IAAAe,OAAA,GAAAf,IAAAgG,MAAA,MAAArF,EAAAC,EAAA80F,WAAA/0F,GAAAjF,GAAAsE,EAAAtE,GAAAiF,IAAgHjF,GAAA4F,IAAAP,OAAA,IAAmBJ,EAAAvE,UAAAs5F,WAAA,SAAA/0F,GAAoC,cAAAA,OAAA,KAAAA,GAAA,IAAAA,EAAAI,OAAAJ,GAAAlB,KAAA41F,0BAAAM,UAAAh1F,EAAAlB,KAAA41F,0BAAA9lC,YAAkI5uD,IAAMA,GAAAi1F,yBAAAh1F,CAA6B,IAAA5E,GAAA,SAAA2E,GAAkB,QAAAC,KAAA5E,GAAgB,GAAAgE,GAAAW,EAAAvF,KAAAqE,KAAAmB,EAAA5E,IAAAyD,IAA6B,OAAAO,GAAA61F,UAAkB71F,EAAG,MAAAA,GAAAY,EAAAD,GAAAC,EAAAxE,UAAAouB,iBAAA,SAAA7pB,EAAAC,EAAA5E,GAA2D,gBAAAA,MAAA,MAAAyD,KAAAo2F,OAAAl1F,GAAAlB,KAAAo2F,OAAAl1F,GAAAu2B,IAAAt2B,EAAA5E,IAAA,GAAsE4E,EAAAxE,UAAA+tB,oBAAA,SAAAxpB,EAAAC,GAA+CnB,KAAAo2F,OAAAl1F,IAAAlB,KAAAo2F,OAAAl1F,GAAA6yD,OAAA5yD,IAAyCA,EAAAxE,UAAA05F,0BAAA,SAAAn1F,EAAAC,EAAA5E,GAAuD,GAAAgE,GAAAP,KAAA61F,eAAA30F,EAA6B,OAAAlB,MAAAs2F,aAAA/1F,EAAAY,EAAA5E,GAAAgE,GAAkCY,EAAAxE,UAAA25F,aAAA,SAAAp1F,EAAAC,EAAA5E,GAA0C2E,EAAAq1F,aAAA,gBAAAv2F,KAAAw2F,YAAAt1F,EAAAC,EAAA5E,EAAuD,QAAAgE,GAAAW,EAAAguD,iBAAA,iBAAArtD,EAAA,EAAkDA,EAAAtB,EAAAe,OAAWO,IAAA,CAAK,GAAA5F,GAAAsE,EAAAsB,EAAW7B,MAAAw2F,YAAAv6F,EAAAkF,EAAA5E,KAAyB4E,EAAAxE,UAAA65F,YAAA,SAAAt1F,EAAAC,EAAA5E,GAAyC,GAAAgE,GAAAW,EAAAq1F,aAAA,eAAA10F,EAAAX,EAAAq1F,aAAA,0BAAgF,KAAA10F,EAAAP,SAAAO,EAAA,QAA0B,IAAA5F,GAAA,SAAAiF,EAAAq1F,aAAA,aAA4Cv2F,MAAAy2F,YAAAl2F,GAAAP,KAAA02F,iBAAAx1F,EAAAW,EAAAtB,EAAAY,EAAA5E,EAAAN,IAAuDkF,EAAAxE,UAAA+5F,iBAAA,SAAAx1F,EAAAC,EAAA5E,EAAAgE,EAAAsB,EAAA5F,EAAAR,OAAsD,KAAAQ,OAAA,YAAAR,OAAA,EAAsC,IAAAqB,GAAAkD,IAAWvE,GAAAyF,EAAA6pB,iBAAA5pB,EAAA,SAAAD,GAAmCA,EAAAy1F,kBAAAz1F,EAAA+oD,iBAAAntD,EAAA85F,aAAAr6F,EAAAyD,KAAAO,EAAAsB,IAAkE5F,GAAAiF,EAAA6pB,iBAAA5pB,EAAA,WAAoCrE,EAAA85F,aAAAr6F,EAAAyD,KAAAO,EAAAsB,IAA2B5F,IAAIkF,EAAAxE,UAAA85F,YAAA,SAAAv1F,GAAqC,IAAAlB,KAAAo2F,OAAAl1F,GAAA,CAAoB,GAAAC,GAAA,GAAAnB,MAAAu7E,gBAAgCv7E,MAAAo2F,OAAAl1F,GAAAC,EAAiB,MAAAnB,MAAAo2F,OAAAl1F,IAAsBC,EAAAxE,UAAAi6F,aAAA,SAAA11F,EAAAC,EAAA5E,EAAAgE,GAA4CP,KAAAo2F,OAAAl1F,GAAA8yD,SAAwB6iC,OAAA11F,EAAA21F,QAAAv2F,EAAA62C,MAAA76C,KAA6B4E,GAAGA,EAAID,GAAA61F,cAAAx6F,GAAkB2E,EAAAy0F,mBAAAz0F,EAAAy0F,uBAA8Cp5F,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAA,GAAa,GAAAC,GAAA,WAAiB,QAAAD,KAAAC,EAAA5E,GAAkByD,KAAAi7E,OAAA1+E,EAAAyD,KAAAg3F,YAAA91F,EAAAlB,KAAAi3F,WAAA91F,EAAmD,MAAAD,GAAAvE,UAAAu6F,QAAA,SAAAh2F,GAAuC,GAAAC,GAAAnB,KAAAi3F,WAAAE,qBAAA56F,GAAA,CAAgD,QAAAgE,KAAAY,GAAA,GAAAA,EAAAvE,eAAA2D,GAAA,CAAuC,GAAAsB,GAAAV,EAAAZ,GAAAtE,EAAA+D,KAAAi3F,WAAAG,iBAAAv1F,GAAApG,EAAAuE,KAAAi3F,WAAAI,qBAAAx1F,GAAA/E,EAAAkD,KAAAi3F,WAAAK,QAAAz1F,EAAwHpG,GAAAo+C,OAAA/8C,EAAA+E,EAAA5F,GAAAM,GAAA,EAAqB,GAAAA,EAAA,CAAM,GAAA6+B,GAAAp7B,KAAAi3F,WAAAG,iBAAAl2F,EAA0ClB,MAAAu3F,mBAAAv3F,KAAAg3F,YAAA/4F,OAAAC,UAAAgD,EAAAk6B,KAAgEl6B,EAAAvE,UAAA66F,gBAAA,SAAAt2F,EAAAC,GAA2C,GAAAA,EAAA,OAAA5E,GAAAyD,KAAAi3F,WAAAQ,eAAAv2F,GAAAX,EAAA,EAAAsB,EAAA,EAAyDA,EAAAtF,EAAA+E,OAAWO,IAAA,CAAK,GAAA5F,GAAAM,EAAAsF,GAAApG,EAAAuE,KAAAi3F,WAAAG,iBAAAn7F,EAAiD+D,MAAAu3F,mBAAAp2F,EAAAZ,EAAAtE,EAAAR,GAAA,KAAAA,GAAA8E,MAA8CW,EAAAvE,UAAA46F,mBAAA,SAAAr2F,EAAAC,EAAA5E,EAAAgE,GAAkD,GAAAsB,GAAA7B,KAAAi3F,WAAAI,qBAAA96F,GAAAN,EAAA4F,EAAA01F,mBAAAr2F,EAAAC,EAAAZ,EAA4EP,MAAAw3F,gBAAAj7F,EAAAN,IAA0BiF,IAAMA,GAAAw2F,WAAAv2F,GAAeD,EAAAy0F,mBAAAz0F,EAAAy0F,uBAA8Cp5F,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAA,GAAa,GAAAC,GAAA,WAAiB,QAAAA,KAAA5E,GAAgByD,KAAAi7E,OAAA1+E,EAAAyD,KAAAi3F,WAAA,GAAA/1F,GAAAy2F,WAAAp7F,GAAAyD,KAAA43F,WAAA,GAAA12F,GAAAw2F,WAAAv2F,EAAAnB,KAAAi3F,WAAA16F,GAAAyD,KAAA63F,YAAA,EAAA73F,KAAA83F,aAAA,EAA+I,MAAA32F,GAAAxE,UAAAo7F,aAAA,SAAA52F,EAAA5E,EAAAgE,OAAgD,KAAAA,OAAA,EAAmB,IAAAsB,GAAA,GAAAX,GAAA82F,kBAAAz7F,EAAAyD,KAAAi7E,QAAAh/E,EAAA+D,KAAAi3F,WAAAx/D,IAAAt2B,EAAAU,EAAwE,OAAA7B,MAAA83F,YAAA77F,EAAA+D,KAAAi4F,aAAA13F,GAAAtE,GAAiDkF,EAAAxE,UAAAu7F,cAAA,SAAAh3F,EAAAC,EAAA5E,EAAAgE,OAA6C,KAAAA,OAAA,EAAmB,IAAAsB,GAAA7B,KAAAm4F,iBAAAj3F,EAAAC,EAAAlD,OAAAC,UAAA3B,EAAoD,OAAAyD,MAAAi4F,aAAA13F,GAAAsB,GAA8BV,EAAAxE,UAAAw7F,iBAAA,SAAAh3F,EAAA5E,EAAAgE,EAAAsB,EAAA5F,OAAkD,KAAAA,OAAA,EAAmB,IAAAR,GAAA,GAAAyF,GAAA82F,kBAAAn2F,EAAA7B,KAAAi7E,QAAAn+E,EAAAkD,KAAAi3F,WAAAmB,cAAAj3F,EAAAZ,EAAAhE,EAAAd,EAAsF,OAAAuE,MAAAi4F,aAAAh8F,GAAAa,GAA8BqE,EAAAxE,UAAA07F,YAAA,SAAAn3F,EAAAC,EAAA5E,OAAyC,KAAAA,OAAA,GAAAyD,KAAAi3F,WAAAlvD,OAAA7mC,EAAAC,GAAAnB,KAAAi4F,aAAA17F,IAAoE4E,EAAAxE,UAAA27F,YAAA,SAAAp3F,EAAAC,OAAuC,KAAAA,OAAA,GAAAnB,KAAAi3F,WAAAljC,OAAA7yD,GAAAlB,KAAAi4F,aAAA92F,IAAkEA,EAAAxE,UAAA47F,qBAAA,SAAAr3F,EAAAC,OAAgD,KAAAA,OAAA,GAAAnB,KAAAi3F,WAAAuB,eAAAt3F,GAAAlB,KAAAi4F,aAAA92F,IAA0EA,EAAAxE,UAAA87F,SAAA,SAAAv3F,GAAkC,MAAAlB,MAAAi3F,WAAAK,QAAAp2F,IAAkCC,EAAAxE,UAAA+7F,gBAAA,SAAAx3F,GAAyC,MAAAlB,MAAAy4F,SAAAv3F,IAAwBC,EAAAxE,UAAAg8F,iBAAA,SAAAz3F,GAA0C,GAAAC,GAAAnB,IAAW,OAAAA,MAAAi3F,WAAAQ,eAAAv2F,GAAA0W,IAAA,SAAArb,GAAyD,MAAA4E,GAAA81F,WAAAK,QAAAp2F,MAAiCC,EAAAxE,UAAAi8F,wBAAA,SAAA13F,GAAiD,MAAAlB,MAAA24F,iBAAAz3F,IAAgCC,EAAAxE,UAAAk8F,YAAA,SAAA33F,GAAqC,MAAAlB,MAAAi3F,WAAA4B,YAAA33F,IAAsCC,EAAAxE,UAAAm8F,uBAAA,SAAA53F,EAAAC,GAAkD,OAAA5E,GAAAyD,KAAAi3F,WAAAQ,eAAAv2F,GAAAX,EAAA,EAAAsB,EAAAtF,EAAoDgE,EAAAsB,EAAAP,OAAWf,IAAA,CAAK,GAAAtE,GAAA4F,EAAAtB,GAAA9E,EAAAuE,KAAA04F,gBAAAz8F,EAAqCkF,GAAA1F,GAAAuE,KAAAq4F,YAAAp8F,EAAAR,KAA4B0F,EAAAxE,UAAAo8F,8BAAA,SAAA73F,EAAAC,GAAyDnB,KAAA84F,uBAAA53F,EAAAC,IAAiCA,EAAAxE,UAAAs7F,aAAA,SAAA/2F,GAAsClB,KAAA63F,aAAA73F,KAAA63F,YAAA,EAAA32F,EAAAlB,KAAAk3F,UAAAtqE,WAAA5sB,KAAAk3F,QAAAxlF,KAAA1R,MAAAmB,EAAA63F,6BAAuH73F,EAAAxE,UAAAu6F,QAAA,WAAgCl3F,KAAA63F,YAAA,EAAA73F,KAAA43F,WAAAV,QAAAl3F,KAAA83F,aAAA93F,KAAAi3F,WAAAgC,0BAAsG93F,IAAMA,GAAA63F,0BAAA,IAAA93F,EAAAg4F,IAAA/3F,GAAwCD,EAAAy0F,mBAAAz0F,EAAAy0F,uBAA8Cp5F,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAA,GAAa,GAAAC,GAAA,WAAiB,QAAAD,KAAAC,GAAgBnB,KAAAi7E,OAAA95E,EAAAnB,KAAAm5F,UAAAj4F,EAA+B,MAAAA,GAAAvE,UAAAk9C,OAAA,SAAA34C,EAAAC,EAAA5E,GAA0C,OAAAA,EAAA,YAAAA,MAAAyD,MAAAo5F,kBAAAp5F,KAAAq5F,QAAAr5F,KAAAm5F,UAAAt/C,OAAA34C,EAAAC,KAA4FD,EAAAvE,UAAA46F,mBAAA,SAAAr2F,EAAAC,EAAA5E,GAAgD,QAAAA,EAAA,MAAAyD,MAAAo5F,aAAA,IAAwC,IAAA74F,GAAAP,KAAAs5F,8BAA0C,QAAA/8F,EAAA,MAAAgE,EAAkB,IAAAsB,GAAA7B,KAAAq5F,QAAAp9F,EAAA4F,EAAA00F,aAAA,qBAAA10F,IAAA+rD,cAAA,sBAAkG,IAAA3xD,GAAAsE,EAAA,OAAA9E,GAAA8E,EAAAspD,SAA6BpuD,EAAA6F,OAAA,GAAWrF,EAAAk/C,YAAA1/C,EAAA,GAAqB,IAAAuE,KAAAs5F,+BAAAr9F,EAAAkF,GAAAD,EAAA2oD,SAAAvoD,OAAAJ,EAAAi6C,YAAAt5C,GAAA7B,KAAAu5F,sBAAA,KAAAh9F,IAAAyD,KAAAu5F,qBAAAxlC,OAAA/zD,KAAAu5F,qBAAAxlC,SAAA/zD,KAAAu5F,qBAAA/sC,YAAAxsD,KAAAu5F,qBAAA/sC,WAAAC,YAAAzsD,KAAAu5F,2BAA0S,CAAK,GAAAz8F,GAAAoE,EAAA2oD,SAAA1oD,EAAoBD,GAAAorD,aAAAzqD,EAAA/E,GAAA,KAAAP,GAAA2E,EAAAurD,YAAA3vD,GAA6C,MAAAkD,MAAAu5F,qBAAAv5F,KAAAq5F,QAAAp9F,GAAgDiF,EAAAvE,UAAAy8F,WAAA,WAAmCp5F,KAAAq5F,SAAAr5F,KAAAq5F,QAAA7D,gBAAAx1F,KAAAq5F,QAAAtlC,OAAA/zD,KAAAq5F,QAAAtlC,SAAA/zD,KAAAq5F,QAAA7sC,YAAAxsD,KAAAq5F,QAAA7sC,WAAAC,YAAAzsD,KAAAq5F,UAAAr5F,KAAAu5F,sBAAAv5F,KAAAu5F,qBAAA/D,gBAAAx1F,KAAAu5F,qBAAAxlC,OAAA/zD,KAAAu5F,qBAAAxlC,SAAA/zD,KAAAu5F,qBAAA/sC,YAAAxsD,KAAAu5F,qBAAA/sC,WAAAC,YAAAzsD,KAAAu5F,wBAA6Zr4F,IAAMC,GAAAq4F,YAAA,EAAAt4F,EAAA82F,kBAAA72F,GAAsCD,EAAAy0F,mBAAAz0F,EAAAy0F,uBAA8Cp5F,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAA,GAAa,GAAAC,GAAA,WAAiB,QAAAD,MAAclB,KAAAi7E,OAAA/5E,EAAAlB,KAAA89C,SAA2B99C,KAAAw5F,YAAA,EAAAx5F,KAAAy5F,oBAA6C,MAAAv4F,GAAAvE,UAAAy6F,iBAAA,SAAAl2F,GAAgD,MAAAlB,MAAA89C,MAAA58C,GAAAw4F,eAAmCx4F,EAAAvE,UAAA26F,QAAA,SAAAp2F,GAAiC,MAAAlB,MAAA89C,MAAA58C,GAAAmM,MAA0BnM,EAAAvE,UAAA06F,qBAAA,SAAAn2F,GAA8C,MAAAlB,MAAA89C,MAAA58C,GAAAy4F,mBAAuCz4F,EAAAvE,UAAAi9F,YAAA,SAAA14F,GAAqC,MAAAlB,MAAA89C,MAAA58C,GAAAgwD,OAAAlxD,KAAA89C,MAAA58C,GAAAgwD,OAAAjpD,IAAA,GAAuD/G,EAAAvE,UAAA86F,eAAA,SAAAv2F,GAAwC,OAAAC,MAAA5E,EAAA,EAAAgE,EAAAP,KAAA89C,MAAA58C,GAAA2oD,SAA0CttD,EAAAgE,EAAAe,OAAW/E,IAAA,CAAK,GAAAsF,GAAAtB,EAAAhE,EAAW4E,GAAAmD,KAAAzC,EAAAoG,IAAa,MAAA9G,IAASD,EAAAvE,UAAAk8F,YAAA,SAAA33F,GAAqC,MAAAlB,MAAA89C,MAAA58C,GAAA2oD,SAAAvoD,OAAA,GAAuCJ,EAAAvE,UAAA86B,IAAA,SAAAv2B,EAAAC,GAA+B,GAAA5E,GAAAyD,KAAA65F,UAAsB,OAAA75F,MAAAy5F,iBAAAl9F,KAAAyD,KAAA89C,MAAAvhD,IAAiD8Q,KAAAnM,EAAA+G,GAAA1L,EAAA20D,OAAA,KAAArH,YAAA8vC,kBAAAx4F,EAAAu4F,cAAA,IAAyEn9F,GAAG2E,EAAAvE,UAAAorC,OAAA,SAAA7mC,EAAAC,GAAkC,GAAA5E,GAAAyD,KAAA89C,MAAA58C,EAAoBlB,MAAAy5F,iBAAAv4F,KAAAlB,KAAA89C,MAAA58C,IAA0CmM,KAAAlM,EAAA8G,GAAA/G,EAAAgwD,OAAA30D,EAAA20D,OAAArH,SAAAttD,EAAAstD,SAAA8vC,kBAAAp9F,EAAAo9F,kBAAAD,cAAA,KAAwGx4F,EAAAvE,UAAAm9F,SAAA,SAAA54F,EAAAC,EAAA5E,GAAsC,GAAAgE,GAAAP,KAAA89C,MAAA58C,GAAAW,EAAA7B,KAAAy3B,IAAAt2B,EAAA5E,EAAoCyD,MAAAy5F,iBAAA53F,IAA2B,IAAA5F,GAAA+D,KAAA89C,MAAAj8C,EAAoB,OAAA5F,GAAAi1D,OAAA3wD,IAAAspD,SAAAvlD,KAAArI,GAAA4F,GAAuCX,EAAAvE,UAAAy7F,cAAA,SAAAl3F,EAAAC,EAAA5E,EAAAgE,GAA6C,GAAAsB,GAAA7B,KAAA89C,MAAA58C,GAAAjF,EAAA+D,KAAAy3B,IAAAl7B,EAAAgE,EAAoCP,MAAAy5F,iBAAAx9F,IAA2B,IAAAR,GAAAuE,KAAA89C,MAAA7hD,EAAoB,OAAAR,GAAAy1D,OAAArvD,EAAAV,GAAAU,EAAAgoD,SAAAvoD,OAAAO,EAAAgoD,SAAAvlD,KAAA7I,GAAA0F,GAAA,EAAAU,EAAAgoD,SAAA6C,OAAAvrD,EAAA,EAAA1F,GAAAoG,EAAAgoD,SAAAkwC,QAAAt+F,GAAAQ,GAAgHiF,EAAAvE,UAAAq9F,gBAAA,SAAA94F,EAAAC,GAA2C,OAAA5E,GAAAyD,KAAA89C,MAAA58C,GAAAX,EAAAhE,EAAAstD,SAAAvoD,OAAA,EAA8Cf,GAAA,EAAKA,IAAK,GAAAhE,EAAAstD,SAAAtpD,GAAA0H,KAAA9G,EAAA,CAAyBnB,KAAAi6F,cAAA/4F,EAAAX,EAAwB,SAAQW,EAAAvE,UAAAs9F,cAAA,SAAA/4F,EAAAC,GAAyC,GAAA5E,GAAAgE,EAAAP,KAAA89C,MAAA58C,EAAsBC,GAAAZ,EAAAspD,SAAAvoD,OAAA,GAAA/E,EAAAgE,EAAAspD,SAAAtpD,EAAAspD,SAAAvoD,OAAA,GAAAf,EAAAspD,SAAAtpD,EAAAspD,SAAAvoD,OAAA,GAAA4vD,OAAA,KAAA3wD,EAAAspD,SAAA6C,OAAAnsD,EAAAspD,SAAAvoD,OAAA,MAAAH,GAAA,GAAA5E,EAAAgE,EAAAspD,SAAA1oD,GAAAZ,EAAAspD,SAAA1oD,GAAA+vD,OAAA,KAAA3wD,EAAAspD,SAAA6C,OAAAvrD,EAAA,KAAA5E,EAAAgE,EAAAspD,SAAA,GAAAtpD,EAAAspD,SAAA,GAAAqH,OAAA,KAAA3wD,EAAAspD,SAAA6C,OAAA,MAAAnwD,EAAA20D,OAAA,KAAAlxD,KAAA+zD,OAAAx3D,EAAA0L,KAA0T/G,EAAAvE,UAAAo3D,OAAA,SAAA7yD,GAAgC,GAAAC,GAAAnB,KAAA89C,MAAA58C,EAAoBC,GAAA+vD,QAAalxD,KAAA89C,MAAA38C,EAAA+vD,OAAAjpD,IAAwBjI,KAAAg6F,gBAAA74F,EAAA+vD,OAAAjpD,GAAA/G,KAAoClB,KAAAw4F,eAAAt3F,GAAAlB,KAAA89C,MAAA58C,GAAAw4F,cAAA,GAAA15F,KAAAy5F,iBAAAv4F,OAAsFA,EAAAvE,UAAA67F,eAAA,SAAAt3F,GAAwC,OAAAC,GAAAnB,KAAA89C,MAAA58C,GAAwBC,EAAA0oD,SAAAvoD,QAAkBtB,KAAA+zD,OAAA5yD,EAAA0oD,SAAA,GAAA5hD,KAA+B/G,EAAAvE,UAAAw6F,mBAAA,WAA2C,MAAAn3F,MAAAy5F,kBAA6Bv4F,EAAAvE,UAAAs8F,uBAAA,WAA+C,OAAA/3F,KAAAlB,MAAAy5F,iBAAAz5F,KAAAy5F,iBAAAv4F,KAAA,KAAAlB,KAAA89C,MAAA58C,GAAAw4F,oBAAA15F,MAAA89C,MAAA58C,GAAAlB,KAAA89C,MAAA58C,GAAAw4F,cAAA,EAAmJ15F,MAAAy5F,qBAAyBv4F,EAAAvE,UAAAk9F,SAAA,WAAiC,QAAA75F,KAAAw5F,aAAyBt4F,IAAMA,GAAAy2F,WAAAx2F,GAAeD,EAAAy0F,mBAAAz0F,EAAAy0F,uBAA8Cp5F,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAC,GAAa,GAAA5E,GAAA,SAAA4E,GAAkB,QAAA5E,KAAa,cAAA4E,KAAAqC,MAAAxD,KAAA4B,YAAA5B,KAA+C,MAAAO,GAAAhE,EAAA4E,GAAA5E,EAAAI,UAAAk9C,OAAA,SAAA14C,EAAA5E,GAA+C,GAAAgE,IAAAsB,GAAA,0QAAAA,EAAAm0F,KAAA,0QAAAh2F,KAAA+1F,aAAAl0F,EAAAV,EAAA,YAAAA,EAAA+4F,WAAA,YAAA/4F,EAAAg5F,WAAAj5F,EAAAmzD,SAAArvD,MAAA,WAAA7D,EAAAi5F,SAAqpB,OAAAp6F,MAAAq2F,0BAAA91F,EAAAY,EAAA5E,EAA6C,IAAAsF,IAAMtF,GAAG4E,EAAA41F,cAAkB51F,GAAAk5F,qBAAA99F,GAAyB2E,EAAAy0F,mBAAAz0F,EAAAy0F,uBAA8Cp5F,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAA,GAAa,GAAAC,GAAA,SAAAD,GAAkB,QAAAC,KAAA5E,GAAgB,GAAAgE,GAAAW,EAAAvF,KAAAqE,KAAAmB,EAAA5E,IAAAyD,IAA6B,OAAAO,GAAA+5F,mBAAA/5F,EAAAk2F,YAAA,sBAAAl2F,EAAAg6F,gBAAAh6F,EAAAk2F,YAAA,mBAAAl2F,EAAAi6F,iBAAAj6F,EAAAk2F,YAAA,oBAAAl2F,EAAAk6F,yBAAAl6F,EAAAk2F,YAAA,4BAAAl2F,EAA+O,MAAAA,GAAAY,EAAAD,GAAAC,EAAAxE,UAAAk9C,OAAA,SAAA34C,EAAAC,GAA+C,GAAA5E,IAAAgE,GAAA,qLAAAA,EAAAy1F,KAAA,qLAAAh2F,KAAA+1F,aAAAx1F,EAAAW,EAAA,oOAAsnB,OAAAlB,MAAAq2F,0BAAA95F,EAAA2E,EAAAC,EAA6C,IAAAZ,IAAMY,GAAGD,EAAA61F,cAAkB71F,GAAAw5F,4BAAAv5F,GAAgCD,EAAAy0F,mBAAAz0F,EAAAy0F,uBAA8Cp5F,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAA,GAAa,GAAAC,GAAA,SAAAD,GAAkB,QAAAC,KAAA5E,GAAgB,GAAAgE,GAAAW,EAAAvF,KAAAqE,KAAAmB,EAAA5E,IAAAyD,IAA6B,OAAAO,GAAAo6F,kBAAAp6F,EAAAk2F,YAAA,qBAAAl2F,EAAgE,MAAAA,GAAAY,EAAAD,GAAAC,EAAAxE,UAAAk9C,OAAA,SAAA34C,EAAAC,GAA+C,GAAA5E,IAAAgE,GAAA,iPAAAA,EAAAy1F,KAAA,iPAAAh2F,KAAA+1F,aAAAx1F,EAAAW,EAAA05F,yBAAA15F,EAAA05F,yBAAA3yF,GAAA,KAAA/G,EAAA05F,yBAAA1vF,MAAA,IAAAhK,EAAA05F,yBAAAxvF,OAAA,uBAAAlK,EAAA25F,SAAA,mCAA6rB,kCAAuD,OAAA76F,MAAAq2F,0BAAA95F,EAAA2E,EAAAC,EAA6C,IAAAZ,IAAMY,GAAGD,EAAA61F,cAAkB71F,GAAA45F,oBAAA35F,GAAwBD,EAAAy0F,mBAAAz0F,EAAAy0F,uBAA8Cp5F,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAA,GAAa,GAAAC,GAAA,SAAAD,GAAkB,QAAAC,KAAA5E,GAAgB,GAAAgE,GAAAW,EAAAvF,KAAAqE,KAAAmB,EAAA5E,IAAAyD,IAA6B,OAAAO,GAAAw6F,iBAAAx6F,EAAAk2F,YAAA,oBAAAl2F,EAA8D,MAAAA,GAAAY,EAAAD,GAAAC,EAAAxE,UAAAk9C,OAAA,SAAA34C,EAAAC,GAA+C,GAAA5E,GAAA0d,SAAA8S,cAAA,MAAAxsB,EAAA0Z,SAAA8S,cAAA,OAAoE,OAAAxsB,GAAA21F,UAAA,OAAAh1F,EAAA+G,GAAA,YAAA/G,EAAAgK,MAAA,IAAAhK,EAAAkK,OAAA7O,EAAA4+C,YAAA56C,GAAAP,KAAA02F,iBAAAn6F,EAAA,2BAAA2E,EAAAC,GAAA5E,GAA2I4E,GAAGD,EAAA61F,cAAkB71F,GAAA85F,wBAAA75F,GAA4BD,EAAAy0F,mBAAAz0F,EAAAy0F,uBAA8Cp5F,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAA,GAAa,GAAAC,GAAA,SAAAD,GAAkB,QAAAC,KAAa,cAAAD,KAAAsC,MAAAxD,KAAA4B,YAAA5B,KAA+C,MAAAO,GAAAY,EAAAD,GAAAC,EAAAxE,UAAAk9C,OAAA,SAAA34C,EAAAC,GAA+C,GAAA5E,GAAA0d,SAAA8S,cAAA,OAAqC,OAAAxwB,GAAA6yD,UAAA,sBAAA7yD,EAAA25F,UAAAh1F,EAAAsjF,QAAA,UAAAjoF,GAA2E4E,GAAGD,EAAA61F,cAAkB71F,GAAA+5F,oBAAA95F,GAAwBD,EAAAy0F,mBAAAz0F,EAAAy0F,uBAA8Cp5F,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAC,GAAa,GAAA5E,GAAA,WAAiB,QAAAA,GAAAgE,EAAAsB,GAAgB,GAAA5F,GAAA+D,IAAWA,MAAAqZ,QAAA9Y,EAAAP,KAAAi7E,OAAAp5E,EAAA7B,KAAAk7F,gBAAA36F,EAAA26F,iBAAAjhF,SAAAvW,KAAA1D,KAAAm7F,IAAA,GAAAh6F,GAAA+3F,IAAAl5F,KAAAk7F,gBAAAr5F,GAAA7B,KAAAo7F,kBAAA,EAAAp7F,KAAA+6F,iBAAA,GAAAx6F,GAAAg7E,iBAAAv7E,KAAAs6F,mBAAA,GAAA/5F,GAAAg7E,iBAAAv7E,KAAAw6F,iBAAA,GAAAj6F,GAAAg7E,iBAAAv7E,KAAAu6F,gBAAA,GAAAh6F,GAAAg7E,iBAAAv7E,KAAAy6F,yBAAA,GAAAl6F,GAAAg7E,iBAAAv7E,KAAAq7F,qBAAA,GAAAl6F,GAAAk5F,qBAAA95F,EAAAg7E,iBAAA15E,GAAA7B,KAAAs7F,oBAAA,GAAAn6F,GAAA25F,oBAAAv6F,EAAAg7E,iBAAA15E,GAAA7B,KAAAu7F,wBAAA,GAAAp6F,GAAA65F,wBAAAh7F,KAAAqZ,QAAAkiE,iBAAAv7E,KAAAi7E,QAAAj7E,KAAAw7F,iBAAA,GAAAr6F,GAAAu5F,4BAAAn6F,EAAAg7E,iBAAA15E,GAAA7B,KAAAy7F,oBAAA,GAAAt6F,GAAA85F,oBAAA16F,EAAAg7E,iBAAA15E,GAAA7B,KAAA83F,YAAA93F,KAAAm7F,IAAApD,cAA0zB2D,SAAA,EAAAvB,SAAAj5F,EAAAmzD,SAAA/3C,KAAA89E,QAAA79F,EAAAo/F,qBAAAzB,YAAAl6F,KAAAqZ,QAAAuiF,SAAoG57F,KAAAq7F,sBAAAr7F,KAAA67F,kBAAA77F,KAAAm7F,IAAAjD,cAAAl4F,KAAA83F,aAA4F8C,yBAAA,KAAAC,UAAA,GAA0C76F,KAAAs7F,qBAAAt7F,KAAA87F,eAAA97F,KAAAm7F,IAAAjD,cAAAl4F,KAAA83F,aAAA,EAAA93F,KAAAw7F,kBAAAx7F,KAAA+7F,WAAA/7F,KAAAm7F,IAAAjD,cAAAl4F,KAAA83F,YAAA,EAAA93F,KAAAy7F,qBAAAz7F,KAAAw7F,iBAAAlB,mBAAA7iE,IAAA,WAA6P,GAAAt2B,GAAAlF,EAAA+/F,8BAAuC76F,IAAAlF,EAAAggG,mBAAA/6F,EAAAmzD,SAAA/3C,KAAA/f,EAAA2/F,oBAAA,GAAAtvE,WAAA,WAAuF3wB,EAAAq+F,mBAAAtmC,QAAA7yD,IAAgC,OAAMnB,KAAAw7F,iBAAAhB,iBAAA/iE,IAAA,WAAwDx7B,EAAAu+F,iBAAAxmC,QAAA/3D,EAAA+/F,gCAAA//F,EAAAk/F,IAAA9C,YAAAp8F,EAAA6/F,gBAAA,KAAoG97F,KAAAw7F,iBAAAjB,gBAAA9iE,IAAA,WAAuDx7B,EAAAs+F,gBAAAvmC,QAAA/3D,EAAA+/F,gCAAA//F,EAAAk/F,IAAA9C,YAAAp8F,EAAA6/F,gBAAA,KAAmG97F,KAAAw7F,iBAAAf,yBAAAhjE,IAAA,WAAgEx7B,EAAAw+F,yBAAAzmC,QAAA/3D,EAAA+/F,kCAAqEh8F,KAAAs7F,oBAAAX,kBAAAljE,IAAA,SAAAt2B,GAA6DlF,EAAAk/F,IAAA9C,YAAAp8F,EAAA4/F,mBAAuCjB,yBAAA,KAAAC,UAAA15F,EAAAi2C,MAAAyjD,WAAyD5+F,EAAAggG,mBAAA/6F,EAAAmzD,SAAA/3C,KAAA/f,EAAAo/F,sBAAA1/F,EAAA8+F,iBAAA/mC,QAAA,MAAA/3D,EAAAm/F,kBAAAn/F,EAAAkgG,oBAAAh7F,EAAAi2C,MAAAyjD,SAAA5+F,EAAAmgG,mBAAAngG,EAAAogG,qBAAqMr8F,KAAAu7F,wBAAAR,iBAAAtjE,IAAA,SAAAt2B,GAAgElF,EAAAk/F,IAAA9C,YAAAp8F,EAAA4/F,mBAAuCjB,yBAAAz5F,EAAAi2C,MAAAyjD,UAAA,IAA6C5+F,EAAA8+F,iBAAA/mC,QAAA7yD,EAAAi2C,OAAAn7C,EAAAggG,mBAAA/6F,EAAAmzD,SAAA/3C,KAAA/f,EAAA+/F,iBAAArgG,EAAAmgG,qBAAqH,MAAA7/F,GAAAI,UAAAq/F,6BAAA,WAA2D,MAAAh8F,MAAAm7F,IAAAzC,gBAAA14F,KAAA67F,mBAAAjB,0BAAiFr+F,EAAAI,UAAAw/F,kBAAA,WAA0C,GAAAn8F,KAAAo7F,kBAAA,EAAAnhF,SAAAvW,KAAA,CAA2C,GAAAxC,GAAA+Y,SAAAvW,KAAAwrD,iBAAA,SAA+ClvD,MAAAu8F,mBAAAr7F,KAA4B3E,EAAAI,UAAA4/F,mBAAA,SAAAr7F,GAA4ClB,KAAAw8F,sCAAAt7F,EAAA,SAAAA,GAAyD,OAAO+G,GAAA/G,EAAA+G,GAAAiD,MAAAhK,EAAAgK,MAAAE,OAAAlK,EAAAkK,OAAAqxF,IAAAv7F,MAA+C3E,EAAAI,UAAA+/F,8BAAA,SAAAx7F,GAAuDlB,KAAAw8F,sCAAAt7F,EAAA,SAAAA,GAAyD,OAAO+G,GAAA/G,EAAA+G,GAAAiD,MAAAhK,EAAAgK,MAAAE,OAAAlK,EAAAkK,OAAAqxF,IAAAv7F,EAAAu7F,QAAmDlgG,EAAAI,UAAAotD,QAAA,WAAgC/pD,KAAA28F,2BAAA,IAAmCpgG,EAAAI,UAAAigG,KAAA,WAA6B58F,KAAA28F,2BAAA,IAAmCpgG,EAAAI,UAAAkgG,gBAAA,SAAA17F,GAAyCA,EAAAnB,KAAAi8F,mBAAA/6F,EAAAmzD,SAAArvD,MAAA7D,GAAAnB,KAAAi8F,mBAAA/6F,EAAAmzD,SAAA/3C,KAAA/f,EAAA+/F,kBAAyG//F,EAAAI,UAAAmgG,OAAA,SAAA57F,GAAgClB,KAAAm7F,IAAA9C,YAAAr4F,KAAA+7F,WAAA76F,IAAwC3E,EAAAI,UAAA6/F,sCAAA,SAAAr7F,EAAAZ,GAAiEP,KAAAm7F,IAAA5C,qBAAAv4F,KAAA67F,kBAAsD,QAAAh6F,MAAA5F,EAAA,EAAiBA,EAAAkF,EAAAG,OAAWrF,IAAA,CAAK,GAAAR,GAAA0F,EAAAlF,GAAAa,EAAAyD,EAAA9E,EAAkBoG,GAAAyC,KAAAxH,GAAAkD,KAAAm7F,IAAAjD,cAAAl4F,KAAA67F,kBAAA/+F,EAAAkD,KAAAu7F,yBAAwF,GAAAngE,GAAAv5B,EAAAP,OAAA5F,EAAAsE,KAAAm7F,IAAAzC,gBAAA14F,KAAA67F,mBAAAhgG,EAAAH,EAAAm/F,QAA+E,KAAAh/F,EAAA,OAAAu/B,EAAA,CAAgB,GAAAx/B,GAAAiG,EAAA,EAAW7B,MAAAm7F,IAAA9C,YAAAr4F,KAAA67F,mBAA6CjB,yBAAAh/F,EAAAi/F,SAAAh/F,IAAsCmE,KAAAi8F,mBAAA/6F,EAAAmzD,SAAA/3C,KAAA/f,EAAA+/F,iBAAAt8F,KAAA+6F,iBAAA/mC,QAAAp4D,OAA8FoE,MAAAi8F,mBAAA/6F,EAAAmzD,SAAA/3C,KAAA/f,EAAAo/F,sBAAA37F,KAAA+6F,iBAAA/mC,QAAA,OAAyGz3D,EAAAI,UAAA0/F,iBAAA,WAAyC,GAAAn7F,GAAAlB,KAAAm7F,IAAAzC,gBAAA14F,KAAA83F,YAAiD93F,MAAAm7F,IAAA9C,YAAAr4F,KAAA83F,aAAuC4D,QAAAx6F,EAAAw6F,QAAAvB,SAAAj5F,EAAAi5F,SAAAC,QAAAl5F,EAAAk5F,QAAAF,YAAA,KAAwE39F,EAAAI,UAAAy/F,iBAAA,WAAyC,GAAAl7F,GAAAlB,KAAAm7F,IAAAzC,gBAAA14F,KAAA83F,YAAiD93F,MAAAm7F,IAAA9C,YAAAr4F,KAAA83F,aAAuC4D,QAAAx6F,EAAAw6F,QAAAvB,SAAAj5F,EAAAi5F,SAAAC,QAAAl5F,EAAAk5F,QAAAF,YAAAl6F,KAAAqZ,QAAAuiF,WAA2Fr/F,EAAAI,UAAAs/F,mBAAA,SAAA/6F,EAAAC,EAAA5E,OAAgD,KAAAA,OAAA,EAAmB,IAAAgE,GAAAP,KAAAm7F,IAAAzC,gBAAA14F,KAAA83F,YAAiD93F,MAAAm7F,IAAA9C,YAAAr4F,KAAA83F,aAAuC4D,QAAAn7F,EAAAm7F,QAAAvB,SAAAj5F,EAAAk5F,QAAAj5F,EAAA+4F,YAAAl6F,KAAAqZ,QAAAuiF,SAAwEr/F,IAAIA,EAAAI,UAAAggG,0BAAA,SAAAz7F,GAAmD,GAAAC,GAAAnB,KAAAm7F,IAAAzC,gBAAA14F,KAAA83F,YAAiD93F,MAAAm7F,IAAA9C,YAAAr4F,KAAA83F,aAAuC4D,QAAAx6F,EAAAi5F,SAAAh5F,EAAAg5F,SAAAC,QAAAj5F,EAAAi5F,QAAAF,WAAA/4F,EAAA+4F,cAA0E39F,IAAMA,GAAAo/F,qBAAA,6CAAAp/F,EAAA+/F,gBAAA,wFAAA//F,EAAA2/F,mBAAA,2DAAA/6F,EAAA47F,YAAAxgG,GAA8Q2E,EAAAy0F,mBAAAz0F,EAAAy0F,uBAA8Cp5F,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAA,GAAa,GAAAC,GAAA,SAAAD,GAAkB,QAAAC,KAAA5E,GAAgB,GAAAgE,GAAAW,EAAAvF,KAAAqE,KAAAmB,EAAA5E,IAAAyD,IAA6B,OAAAO,GAAAy8F,gBAAA,GAAAz8F,GAAAg7E,iBAAAh7E,EAAkD,MAAAA,GAAAY,EAAAD,GAAAC,EAAAxE,UAAAk9C,OAAA,SAAA34C,EAAAC,GAA+C,GAAA5E,GAAAyD,KAAAO,GAAA9E,GAAA,6RAAAA,EAAAu6F,KAAA,6RAAAh2F,KAAA+1F,aAAAt6F,EAAAyF,EAAA,cAAAW,EAAA7B,KAAAq2F,0BAAA91F,EAAAW,EAAAC,GAAAlF,EAAA4F,EAAA+rD,cAAA,mBAAosB,OAAA3xD,GAAA8uB,iBAAA,qBAAA7pB,GAAkD,MAAA3E,GAAA0gG,KAAA/7F,IAAA,IAAoB,GAAAjF,EAAA8uB,iBAAA,oBAAA7pB,GAA+C,MAAA3E,GAAA0gG,KAAA/7F,IAAA,IAAoB,GAAAjF,EAAA8uB,iBAAA,gBAAA7pB,GAA2C3E,EAAA2gG,KAAAh8F,KAAU,GAAAW,CAAO,IAAApG,IAAM0F,EAAAxE,UAAAsgG,KAAA,SAAA/7F,GAA8BA,EAAAy1F,kBAAAz1F,EAAA+oD,kBAAuC9oD,EAAAxE,UAAAugG,KAAA,SAAAh8F,GAA8BA,EAAAy1F,kBAAAz1F,EAAA+oD,iBAAAjqD,KAAAm9F,UAAAj8F,IAAyDC,EAAAxE,UAAAwgG,UAAA,SAAAj8F,GAAmC,GAAAC,GAAAnB,KAAAzD,EAAA,IAAkB,IAAA2E,KAAAk8F,cAAAl8F,EAAAk8F,aAAAC,QAAA9gG,EAAA2E,EAAAk8F,aAAAC,OAAAn8F,KAAAO,QAAAP,EAAAO,OAAA47F,QAAA9gG,EAAA2E,EAAAO,OAAA47F,OAAA9gG,KAAA+E,OAAA,SAAAf,GAAA,EAA+IA,EAAAhE,EAAA+E,OAAWf,KAAA,SAAAW,GAAiB,GAAAX,GAAAhE,EAAA2E,GAAAnF,KAAAszD,cAAAxtD,EAAAtB,EAAAoX,MAAA,KAAAvT,KAA6D,IAAV7H,EAAA2E,GAAAf,KAAU,SAAA0B,EAAA,CAAe,GAAA5F,GAAAM,EAAA2E,GAAAzF,EAAA,GAAA6hG,WAA4B7hG,GAAA8hG,QAAA,SAAAr8F,GAAsBC,EAAA85E,OAAAj2E,MAAA,6BAAA/I,EAAAF,KAAAmF,IAAsDzF,EAAA+hG,OAAA,SAAAt8F,GAAsB,IAAI,GAAA3E,GAAAmvD,KAAA0F,MAAAlwD,EAAAO,OAAA4B,OAAkClC,GAAA67F,gBAAAhpC,QAAAz3D,GAA6B,MAAA2E,GAASC,EAAA85E,OAAAj2E,MAAA,6BAAA/I,EAAAF,KAAAmF,KAAuDzF,EAAAgiG,WAAAxhG,KAAkBsE,IAAIY,GAAGD,EAAA61F,cAAkB71F,GAAAw8F,qBAAAv8F,GAAyBD,EAAAy0F,mBAAAz0F,EAAAy0F,uBAA8Cp5F,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAA,GAAa,GAAAC,GAAA,SAAAD,GAAkB,QAAAC,KAAA5E,GAAgB,GAAAgE,GAAAW,EAAAvF,KAAAqE,KAAAmB,EAAA5E,IAAAyD,IAA6B,OAAAO,GAAAo9F,kBAAAp9F,EAAAk2F,YAAA,qBAAAl2F,EAAAq9F,gBAAAr9F,EAAAk2F,YAAA,mBAAAl2F,EAAmH,MAAAA,GAAAY,EAAAD,GAAAC,EAAAxE,UAAAk9C,OAAA,SAAA34C,EAAAC,GAA+C,GAAA5E,GAAA0d,SAAA8S,cAAA,KAAmC,IAAA7rB,EAAAmR,SAAA9V,EAAA6yD,UAAA,UAAAluD,EAAA28F,QAAAze,SAAAyO,YAAAhB,YAAA,OAAAtsF,GAAA,EAAAsB,EAAAX,EAAA28F,QAAAze,SAAAyO,YAAAhB,YAAwItsF,EAAAsB,EAAAP,OAAWf,IAAA,CAAK,GAAAtE,GAAA4F,EAAAtB,GAAA9E,EAAAwe,SAAA8S,cAAA,MAA2CtxB,GAAAuL,IAAA82F,UAAA7hG,EAAA+K,KAAAzK,EAAA4+C,YAAA1/C,OAAwC,CAAK,GAAAqB,GAAAmd,SAAA8S,cAAA,OAAqCjwB,GAAAo5F,UAAAh1F,EAAA28F,QAAAze,SAAAyO,YAAAZ,kBAAA1wF,EAAA4+C,YAAAr+C,GAA8E,GAAAs+B,GAAAnhB,SAAA8S,cAAA,OAAqCqO,GAAA86D,UAAA,GAAA/rC,MAAAjpD,EAAA28F,QAAAxe,WAAA0e,eAAApmF,MAAA,QAAApb,EAAA4+C,YAAA/f,EAAwF,IAAA1/B,GAAAue,SAAA8S,cAAA,IAAkC,OAAArxB,GAAAyxD,KAAA,IAAAzxD,EAAA0zD,UAAA,sBAAApvD,KAAA02F,iBAAAh7F,EAAA,0BAAAwF,EAAAC,GAAA,MAAAi6B,EAAA+f,YAAAz/C,GAAAsE,KAAA02F,iBAAAn6F,EAAA,4BAAA2E,EAAAC,GAAA5E,GAA6L4E,GAAGD,EAAA61F,cAAkB71F,GAAA88F,yBAAA78F,GAA6BD,EAAAy0F,mBAAAz0F,EAAAy0F,uBAA8Cp5F,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAA,GAAa,GAAAC,GAAA,SAAAD,GAAkB,QAAAC,KAAa,cAAAD,KAAAsC,MAAAxD,KAAA4B,YAAA5B,KAA+C,MAAAO,GAAAY,EAAAD,GAAAC,EAAAxE,UAAAk9C,OAAA,SAAA34C,EAAAC,GAA+C,GAAA5E,IAAAgE,GAAA,gIAAAA,EAAAy1F,KAAA,gIAAAh2F,KAAA+1F,aAAAx1F,GAAuS,OAAAP,MAAAq2F,0BAAA95F,EAAA2E,EAAAC,EAA6C,IAAAZ,IAAMY,GAAGD,EAAA61F,cAAkB71F,GAAA+8F,yBAAA98F,GAA6BD,EAAAy0F,mBAAAz0F,EAAAy0F,uBAA8Cp5F,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAA,GAAa,GAAAC,GAAA,SAAAA,GAAkB,QAAA5E,GAAA2E,EAAA3E,GAAgB,GAAAgE,GAAAY,EAAAxF,KAAAqE,KAAAkB,EAAA3E,IAAAyD,IAA6B,OAAAO,GAAA29F,sBAAA39F,EAAAk2F,YAAA,yBAAAl2F,EAAwE,MAAAA,GAAAhE,EAAA4E,GAAA5E,EAAAI,UAAAk9C,OAAA,SAAA14C,EAAA5E,GAA+C,GAAAgE,GAAA0Z,SAAA8S,cAAA,KAAmC,IAAA5rB,EAAAkR,SAAA9R,EAAA6uD,UAAA,SAAAxiC,WAAA,WAAyD1rB,EAAAw0F,qBAAAJ,eAAA/0F,IAAyC,IAAAY,EAAA0sF,YAAAhB,YAAA,OAAAhrF,GAAA,EAAA5F,EAAAkF,EAAA0sF,YAAAhB,YAAuEhrF,EAAA5F,EAAAqF,OAAWO,IAAA,CAAK,GAAApG,GAAAQ,EAAA4F,EAAW,IAAApG,EAAAuL,IAAA,CAAU,GAAAlK,GAAAmd,SAAA8S,cAAA,MAAoC,IAAAjwB,EAAAkK,IAAA82F,UAAAriG,EAAAuL,KAAAzG,EAAA46C,YAAAr+C,GAAAqE,EAAA0sF,YAAAhB,YAAAvrF,OAAA,GAA+E,GAAA85B,GAAAnhB,SAAA8S,cAAA,OAAqCqO,GAAA86D,UAAAz6F,EAAA2xF,eAAA7sF,EAAA46C,YAAA/f,GAA8C,GAAA3/B,EAAA6xF,aAAA,CAAmB,GAAA5xF,GAAAue,SAAA8S,cAAA,OAAqCrxB,GAAAw6F,UAAA,UAAAz6F,EAAA6xF,aAAA/sF,EAAA46C,YAAAz/C,GAAsD,GAAAD,EAAA4xF,mBAAA,CAAyB,GAAAxxF,GAAAoe,SAAA8S,cAAA,OAAqClxB,GAAAq6F,UAAAz6F,EAAA4xF,mBAAA9sF,EAAA46C,YAAAt/C,SAAoD,CAAK,GAAAD,GAAAqe,SAAA8S,cAAA,OAAqCnxB,GAAAs6F,UAAA/0F,EAAA0sF,YAAAZ,kBAAA1sF,EAAA46C,YAAAv/C,GAA6D,GAAAE,GAAAme,SAAA8S,cAAA,OAAqC,OAAAjxB,GAAAo6F,UAAA/0F,EAAA0sF,YAAAf,YAAA,iBAAA3rF,EAAA0sF,YAAAf,YAAA9C,qBAAA/hF,GAAA,sBAAA1H,EAAA46C,YAAAr/C,GAAAkE,KAAA02F,iBAAAn2F,EAAA,gCAAAY,EAAA5E,GAAAgE,GAAsNhE,GAAG2E,EAAA61F,cAAkB71F,GAAAi9F,6BAAAh9F,GAAiCD,EAAAy0F,mBAAAz0F,EAAAy0F,uBAA8Cp5F,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAA,GAAa,GAAAC,GAAA,SAAAD,GAAkB,QAAAC,KAAa,cAAAD,KAAAsC,MAAAxD,KAAA4B,YAAA5B,KAA+C,MAAAO,GAAAY,EAAAD,GAAAC,EAAAxE,UAAAk9C,OAAA,SAAA34C,EAAAC,GAA+C,GAAA5E,IAAAgE,GAAA,4HAAAA,EAAAy1F,KAAA,4HAAAh2F,KAAA+1F,aAAAx1F,GAA+R,OAAAP,MAAAq2F,0BAAA95F,EAAA2E,EAAAC,EAA6C,IAAAZ,IAAMY,GAAGD,EAAA61F,cAAkB71F,GAAAk9F,qBAAAj9F,GAAyBD,EAAAy0F,mBAAAz0F,EAAAy0F,uBAA8Cp5F,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAA,GAAa,GAAAC,GAAA,SAAAA,GAAkB,QAAA5E,GAAA2E,EAAA3E,GAAgB,GAAAgE,GAAAY,EAAAxF,KAAAqE,KAAAkB,EAAA3E,IAAAyD,IAA6B,OAAAO,GAAA89F,kBAAA99F,EAAAk2F,YAAA,qBAAAl2F,EAAgE,MAAAA,GAAAhE,EAAA4E,GAAA5E,EAAAI,UAAAk9C,OAAA,SAAA14C,EAAA5E,GAA+C,GAAAgE,GAAA0Z,SAAA8S,cAAA,MAAAlrB,EAAA,SAA+C,QAAAV,EAAA08F,QAAArb,QAAyB,QAAA3gF,EAAA,YAAuB,MAAM,SAAAA,EAAA,QAAmB,MAAM,SAAAA,EAAA,UAAqB,MAAM,SAAAA,EAAA,WAAsB,MAAM,SAAAA,EAAA,QAAkBV,EAAA08F,QAAAhQ,cAAAttF,EAAA6uD,UAAA,aAAAjuD,EAAAkR,SAAA9R,EAAA6uD,UAAA,UAAAxiC,WAAA,WAAwG1rB,EAAAw0F,qBAAAJ,eAAA/0F,IAAyC,GAAK,IAAAtE,GAAAge,SAAA8S,cAAA,QAAAtxB,EAAA0F,EAAA08F,QAAA1jF,IAAsD,OAAA1e,KAAA+c,QAAArX,EAAA08F,QAAA9hG,KAAA,iBAAA8F,EAAA,eAAAV,EAAA08F,QAAA9hG,KAAA,WAAAE,EAAA6zD,UAAAr0D,EAAA8E,EAAA46C,YAAAl/C,GAAA+D,KAAA02F,iBAAAn2F,EAAA,4BAAAY,EAAA5E,GAAAgE,GAAwLhE,GAAG2E,EAAA61F,cAAkB71F,GAAAo9F,yBAAAn9F,GAA6BD,EAAAy0F,mBAAAz0F,EAAAy0F,uBAA8Cp5F,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAA,GAAa,GAAAC,GAAA,SAAAD,GAAkB,QAAAC,KAAa,cAAAD,KAAAsC,MAAAxD,KAAA4B,YAAA5B,KAA+C,MAAAO,GAAAY,EAAAD,GAAAC,EAAAxE,UAAAk9C,OAAA,SAAA34C,EAAAC,GAA+C,GAAA5E,IAAAgE,GAAA,mGAAAA,EAAAy1F,KAAA,mGAAAh2F,KAAA+1F,aAAAx1F,GAA6O,OAAAP,MAAAq2F,0BAAA95F,EAAA2E,EAAAC,EAA6C,IAAAZ,IAAMY,GAAGD,EAAA61F,cAAkB71F,GAAAq9F,uBAAAp9F,GAA2BD,EAAAy0F,mBAAAz0F,EAAAy0F,uBAA8Cp5F,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAA,GAAa,GAAAC,GAAA,WAAiB,QAAAD,MAAc,MAAAA,GAAAs9F,WAAA,SAAAr9F,GAAgC,GAAA5E,GAAA2E,EAAAu9F,gBAAAt9F,EAA2B,IAAA5E,EAAA,MAAA2E,GAAAw9F,cAAAniG,CAA8B,IAAAgE,GAAAW,EAAAy9F,eAAAx9F,EAA0B,OAAAZ,GAAAW,EAAA09F,aAAAr+F,EAAAW,EAAA09F,aAAAz9F,GAA2CD,IAAMC,GAAAu9F,cAAA,2EAAAv9F,EAAAy9F,aAAA,0EAAAz9F,EAAAs9F,iBAAuMI,WAAA,aAAAC,uBAAA,yBAAA/hF,eAAA,iBAAAF,gBAAA,kBAAAjG,YAAA,cAAAuG,sBAAA,wBAAAhT,gBAAA,kBAAA40F,gBAAA,kBAAAC,cAAA,cAAAC,cAAA,cAAAC,eAAA,cAAAC,cAAA,cAAAC,eAAA,iBAAAC,qBAAA,uBAAAC,wBAAA,0BAAAC,kBAAA,oBAAAC,kBAAA,oBAAAC,YAAA,cAAAt4E,cAAA,gBAAAlK,wBAAA,0BAAApT,kBAAA,oBAAA61F,YAAA,cAAAC,cAAA,gBAAAC,WAAA,aAAAC,wBAAA,0BAAA91F,kBAAA,oBAAA4vE,oBAAA,sBAAAC,YAAA,cAAAC,sBAAA,wBAAAC,kBAAA,oBAAAgmB,SAAA,WAAAC,qBAAA,uBAAAC,UAAA,YAAA7S,wBAAA,0BAAArvE,0BAAA,4BAAAG,+BAAA,iCAAAP,kBAAA,oBAAA21E,iBAAA,mBAAA4M,oBAAA,sBAAA7N,oBAAA,sBAAA8N,2BAAA,6BAAAC,SAAA,WAAAC,kBAAA,oBAAAjP,oBAAA,sBAAAkP,iBAAA,mBAAA3jF,4BAAA,8BAAA4jF,qBAAA,uBAAAC,kBAAA,oBAAAC,sBAAA,wBAAAC,yBAAA,2BAAAC,QAAA,UAAAC,UAAA,YAAAC,OAAA,SAAAC,oBAAA,sBAAA52F,cAAA,gBAAA62F,uBAAA,yBAAAtnB,WAAA,aAAAunB,+BAAA,iCAAAC,wBAAA,0BAAA95E,kBAAA,mBAAA+5E,kBAAA,mBAAAt3E,WAAA,aAAApY,aAAA,eAAA2vF,aAAA,eAAAh3E,cAAA,gBAAA9Q,0BAAA,4BAAA5E,WAAA,UAAA2sF,WAAA,UAAAC,WAAA,UAAAC,WAAA,UAAA/tF,WAAA,UAAAE,WAAA,UAAAE,WAAA,UAAAE,WAAA,UAAAI,WAAA,UAAAE,WAAA,UAAAE,WAAA,UAAAE,WAAA,UAAAI,YAAA,UAAAE,YAAA,UAAAE,YAAA,UAAAE,YAAA,UAAA8J,oBAAA,sBAAA5J,iBAAA,gBAAAQ,mBAAA,gBAAAI,mBAAA,gBAAAN,mBAAA,gBAAAJ,iBAAA,gBAAAc,mBAAA,gBAAAN,mBAAA,gBAAAI,mBAAA,gBAAAV,iBAAA,gBAAAgsF,oBAAA,sBAAAC,gBAAA,gBAAAC,iBAAA,gBAAAC,iBAAA,gBAAAC,kBAAA,gBAAAtqF,qBAAA,uBAAAuqF,SAAA,YAAozGxgG,EAAAw9F,gBAAmBvrF,UAAA,UAAAE,WAAA,UAAAQ,UAAA,UAAAE,WAAA,UAAA4tF,UAAA,UAAApuF,WAAA,UAAAquF,UAAA,UAAA3tF,WAAA,UAAA4tF,UAAA,UAAAC,UAAA,UAAA3tF,WAAA,UAAA4tF,UAAA,UAAApuF,WAAA,UAAAquF,UAAA,UAAA3tF,WAAA,UAAAY,iBAAA,gBAAAE,iBAAA,gBAAAE,iBAAA,gBAAA4sF,eAAA,eAAAC,eAAA,eAAAC,eAAA,eAAAC,eAAA,eAAAC,gBAAA,eAAAC,gBAAA,eAAAC,gBAAA,eAAAC,gBAAA,gBAA0oBvhG,EAAAwhG,qBAAAvhG,GAA0BD,EAAAy0F,mBAAAz0F,EAAAy0F,uBAA8Cp5F,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAA,GAAa,GAAAC,GAAA,SAAAD,GAAkB,QAAAC,KAAa,cAAAD,KAAAsC,MAAAxD,KAAA4B,YAAA5B,KAA+C,MAAAO,GAAAY,EAAAD,GAAAC,EAAAxE,UAAAk9C,OAAA,SAAA34C,EAAAC,GAA+C,GAAA5E,IAAAgE,GAAA,iGAAAA,EAAAy1F,KAAA,iGAAAh2F,KAAA+1F,aAAAx1F,GAAyO,OAAAP,MAAAq2F,0BAAA95F,EAAA2E,EAAAC,EAA6C,IAAAZ,IAAMY,GAAGD,EAAA61F,cAAkB71F,GAAAyhG,qBAAAxhG,GAAyBD,EAAAy0F,mBAAAz0F,EAAAy0F,uBAA8Cp5F,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAA,GAAa,GAAAC,GAAA,SAAAD,GAAkB,QAAAC,KAAa,cAAAD,KAAAsC,MAAAxD,KAAA4B,YAAA5B,KAA+C,MAAAO,GAAAY,EAAAD,GAAAC,EAAAxE,UAAAk9C,OAAA,SAAA34C,EAAAC,GAA+C,GAAA5E,IAAAgE,GAAA,0LAAAA,EAAAy1F,KAAA,0LAAAh2F,KAAA+1F,aAAAx1F,EAAAW,IAAAsX,QAAA,kBAAAoqF,OAAA,IAAmc,OAAA5iG,MAAAq2F,0BAAA95F,EAAA2E,EAAAC,EAA6C,IAAAZ,IAAMY,GAAGD,EAAA61F,cAAkB71F,GAAA2hG,mBAAA1hG,GAAuBD,EAAAy0F,mBAAAz0F,EAAAy0F,uBAA8Cp5F,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAA,GAAa,GAAAC,GAAA,SAAAD,GAAkB,QAAAC,KAAa,cAAAD,KAAAsC,MAAAxD,KAAA4B,YAAA5B,KAA+C,MAAAO,GAAAY,EAAAD,GAAAC,EAAAxE,UAAAk9C,OAAA,SAAA34C,EAAAC,GAA+C,GAAA5E,IAAAgE,GAAA,wHAAAA,EAAAy1F,KAAA,wHAAAh2F,KAAA+1F,aAAAx1F,EAAAW,EAAAQ,IAAAR,EAAAnE,OAAqS,OAAAiD,MAAAq2F,0BAAA95F,EAAA2E,EAAAC,EAA6C,IAAAZ,IAAMY,GAAGD,EAAA61F,cAAkB71F,GAAA4hG,kBAAA3hG,GAAsBD,EAAAy0F,mBAAAz0F,EAAAy0F,uBAA8Cp5F,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAA,GAAa,GAAAC,GAAA,SAAAD,GAAkB,QAAAC,KAAa,cAAAD,KAAAsC,MAAAxD,KAAA4B,YAAA5B,KAA+C,MAAAO,GAAAY,EAAAD,GAAAC,EAAAxE,UAAAk9C,OAAA,SAAA34C,EAAAC,GAA+C,GAAA5E,IAAAgE,GAAA,wHAAAA,EAAAy1F,KAAA,wHAAAh2F,KAAA+1F,aAAAx1F,EAAAW,EAAAnE,MAAAmE,EAAAQ,KAAqS,OAAA1B,MAAAq2F,0BAAA95F,EAAA2E,EAAAC,EAA6C,IAAAZ,IAAMY,GAAGD,EAAA61F,cAAkB71F,GAAA6hG,uBAAA5hG,GAA2BD,EAAAy0F,mBAAAz0F,EAAAy0F,uBAA8Cp5F,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAA,GAAa,GAAAC,GAAA,SAAAD,GAAkB,QAAAC,KAAA5E,GAAgB,GAAAgE,GAAAW,EAAAvF,KAAAqE,KAAAmB,EAAA5E,IAAAyD,IAA6B,OAAAO,GAAAyiG,oBAAAziG,EAAAk2F,YAAA,uBAAAl2F,EAAoE,MAAAA,GAAAY,EAAAD,GAAAC,EAAAxE,UAAAk9C,OAAA,SAAA34C,EAAAC,GAA+C,GAAA5E,IAAAgE,GAAA,0KAAAA,EAAAy1F,KAAA,0KAAAh2F,KAAA+1F,aAAAx1F,EAAAW,EAAAQ,KAAiY,OAAA1B,MAAAq2F,0BAAA95F,EAAA2E,EAAAC,EAA6C,IAAAZ,IAAMY,GAAGD,EAAA61F,cAAkB71F,GAAA+hG,wBAAA9hG,GAA4BD,EAAAy0F,mBAAAz0F,EAAAy0F,uBAA8Cp5F,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAA,GAAa,GAAAC,GAAA,SAAAD,GAAkB,QAAAC,KAAa,cAAAD,KAAAsC,MAAAxD,KAAA4B,YAAA5B,KAA+C,MAAAO,GAAAY,EAAAD,GAAAC,EAAAxE,UAAAk9C,OAAA,SAAA34C,EAAAC,GAA+C,GAAA5E,IAAAgE,GAAA,iQAAAA,EAAAy1F,KAAA,iQAAAh2F,KAAA+1F,aAAAx1F,EAAAW,EAAAQ,IAAAR,EAAAnE,MAAAmE,EAAAgiG,MAA8jB,OAAAljG,MAAAq2F,0BAAA95F,EAAA2E,EAAAC,EAA6C,IAAAZ,IAAMY,GAAGD,EAAA61F,cAAkB71F,GAAAiiG,sBAAAhiG,GAA0BD,EAAAy0F,mBAAAz0F,EAAAy0F,uBAA8Cp5F,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAA,GAAa,GAAAC,GAAA,SAAAD,GAAkB,QAAAC,KAAa,cAAAD,KAAAsC,MAAAxD,KAAA4B,YAAA5B,KAA+C,MAAAO,GAAAY,EAAAD,GAAAC,EAAAxE,UAAAk9C,OAAA,SAAA34C,EAAAC,GAA+C,GAAA5E,GAAA0d,SAAA8S,cAAA,MAAoC,IAAAxwB,EAAA6yD,UAAA,+BAAAluD,EAAA2rF,YAAA,OAAAtsF,GAAA,EAAAsB,EAAAX,EAAA2rF,YAAwFtsF,EAAAsB,EAAAP,OAAWf,IAAA,CAAK,GAAAtE,GAAA4F,EAAAtB,EAAW,IAAAtE,EAAA+K,IAAA,CAAU,GAAAvL,GAAAwe,SAAA8S,cAAA,MAAoC,IAAAtxB,EAAAuL,IAAA82F,UAAA7hG,EAAA+K,KAAAzK,EAAA4+C,YAAA1/C,GAAAyF,EAAA2rF,YAAAvrF,OAAA,GAAmE,GAAAxE,GAAAmd,SAAA8S,cAAA,OAAqCjwB,GAAAo5F,UAAAj6F,EAAAmxF,eAAA7wF,EAAA4+C,YAAAr+C,SAAgD,CAAK,GAAAs+B,GAAAnhB,SAAA8S,cAAA,OAAqCqO,GAAA86D,UAAAh1F,EAAA+rF,kBAAA1wF,EAAA4+C,YAAA/f,GAAiD,GAAA1/B,GAAAue,SAAA8S,cAAA,OAAqC,OAAArxB,GAAAw6F,UAAAh1F,EAAA4rF,YAAA5rF,EAAA4rF,YAAA9C,qBAAAjH,YAAA,sBAAAxmF,EAAA4+C,YAAAz/C,GAAAa,GAAyH4E,GAAGD,EAAA61F,cAAkB71F,GAAAkiG,6BAAAjiG,GAAiCD,EAAAy0F,mBAAAz0F,EAAAy0F,uBAA8Cp5F,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAA,GAAa,GAAAC,GAAA,SAAAD,GAAkB,QAAAC,KAAA5E,GAAgB,GAAAgE,GAAAW,EAAAvF,KAAAqE,KAAAmB,EAAA5E,IAAAyD,IAA6B,OAAAO,GAAA8iG,kBAAA9iG,EAAAk2F,YAAA,qBAAAl2F,EAAA+iG,kBAAA/iG,EAAAk2F,YAAA,qBAAAl2F,EAAAgjG,qBAAAhjG,EAAAk2F,YAAA,wBAAAl2F,EAAAijG,mBAAAjjG,EAAAk2F,YAAA,sBAAAl2F,EAAAkjG,kBAAAljG,EAAAk2F,YAAA,qBAAAl2F,EAAAmjG,eAAAnjG,EAAAk2F,YAAA,kBAAAl2F,EAAAojG,oBAAApjG,EAAAk2F,YAAA,uBAAAl2F,EAAAqjG,oBAAArjG,EAAAk2F,YAAA,uBAAAl2F,EAA2c,MAAAA,GAAAY,EAAAD,GAAAC,EAAAxE,UAAAk9C,OAAA,SAAA34C,EAAAC,GAA+C,GAAA5E,IAAAd,GAAA,mrCAAAA,EAAAu6F,KAAA,mrCAAAh2F,KAAA+1F,aAAAt6F,EAAAyF,EAAA2iG,WAAA,IAAA3iG,EAAAshF,OAAA,iBAAAthF,EAAAshF,OAAA,iBAAAthF,EAAAshF,OAAA,iBAAAthF,EAAAshF,OAAA,YAAAthF,EAAA4iG,aAAA,OAAA5iG,EAAA4iG,aAAA,YAAA5iG,EAAAshF,OAAA,cAAAjiF,EAAAP,KAAAq2F,0BAAA95F,EAAA2E,EAAAC,GAAAU,EAAAtB,EAAAqtD,cAAA,uBAAA3xD,EAAAsE,EAAA2uD,iBAAA,+BAA6sF,OAAArtD,GAAAkpB,iBAAA,iBAAA7pB,GAA8C,YAAAW,EAAA00F,aAAA,SAAoC10F,EAAAgrD,aAAA,eAA+B,QAAA1rD,GAAA,EAAYA,EAAAlF,EAAAqF,OAAWH,IAAAlF,EAAAkF,GAAA2oD,MAAAC,QAAA,OAAA9tD,EAAAkF,GAAA2oD,MAAAi6C,WAAA,aAA6D,CAAKliG,EAAAgrD,aAAA,cAA8B,QAAA1rD,GAAA,EAAYA,EAAAlF,EAAAqF,OAAWH,IAAAlF,EAAAkF,GAAA2oD,MAAAC,QAAA,QAAA9tD,EAAAkF,GAAA2oD,MAAAi6C,WAAA,aAAgExjG,CAAI,IAAA9E,IAAM0F,GAAGD,EAAA61F,cAAkB71F,GAAA8iG,wBAAA7iG,GAA4BD,EAAAy0F,mBAAAz0F,EAAAy0F,uBAA8Cp5F,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAA,GAAa,GAAAC,GAAA,SAAAD,GAAkB,QAAAC,KAAA5E,GAAgB,MAAA2E,GAAAvF,KAAAqE,KAAAmB,EAAA5E,IAAAyD,KAA8B,MAAAO,GAAAY,EAAAD,GAAAC,EAAAxE,UAAAk9C,OAAA,SAAA34C,EAAAC,GAA+C,MAAAnB,MAAAq2F,0BAAA,0EAAAn1F,EAAAC,IAAqHA,GAAGD,EAAA61F,cAAkB71F,GAAA+iG,2BAAA9iG,GAA+BD,EAAAy0F,mBAAAz0F,EAAAy0F,uBAA8Cp5F,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAA,GAAa,GAAAC,GAAA,SAAAD,GAAkB,QAAAC,KAAA5E,GAAgB,MAAA2E,GAAAvF,KAAAqE,KAAAmB,EAAA5E,IAAAyD,KAA8B,MAAAO,GAAAY,EAAAD,GAAAC,EAAAxE,UAAAk9C,OAAA,SAAA34C,EAAAC,GAA+C,GAAA5E,IAAAgE,GAAA,sEAAAA,EAAAy1F,KAAA,sEAAAh2F,KAAA+1F,aAAAx1F,EAAAW,EAAA,oEAAwP,OAAAlB,MAAAq2F,0BAAA95F,EAAA2E,EAAAC,EAA6C,IAAAZ,IAAMY,GAAGD,EAAA61F,cAAkB71F,GAAAgjG,2BAAA/iG,GAA+BD,EAAAy0F,mBAAAz0F,EAAAy0F,uBAA8Cp5F,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAA,GAAa,GAAAC,GAAA,SAAAD,GAAkB,QAAAC,KAAA5E,GAAgB,MAAA2E,GAAAvF,KAAAqE,KAAAmB,EAAA5E,IAAAyD,KAA8B,MAAAO,GAAAY,EAAAD,GAAAC,EAAAxE,UAAAk9C,OAAA,SAAA34C,EAAAC,GAA+C,GAAA5E,IAAAgE,GAAA,oGAAAA,EAAAy1F,KAAA,oGAAAh2F,KAAA+1F,aAAAx1F,EAAAW,EAAA,aAA6P,OAAAlB,MAAAq2F,0BAAA95F,EAAA2E,EAAAC,EAA6C,IAAAZ,IAAMY,GAAGD,EAAA61F,cAAkB71F,GAAAijG,oBAAAhjG,GAAwBD,EAAAy0F,mBAAAz0F,EAAAy0F,uBAA8Cp5F,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAA,GAAa,GAAAC,GAAA,SAAAD,GAAkB,QAAAC,KAAa,cAAAD,KAAAsC,MAAAxD,KAAA4B,YAAA5B,KAA+C,MAAAO,GAAAY,EAAAD,GAAAC,EAAAxE,UAAAk9C,OAAA,SAAA34C,EAAAC,GAA+C,GAAA5E,GAAA2E,EAAAsF,OAAAxG,KAAAokG,aAAApkG,KAAAqkG,UAAAnjG,EAAAsF,SAAA,GAAAjG,GAAAtE,GAAA,6MAAAA,EAAA+5F,KAAA,6MAAAh2F,KAAA+1F,aAAA95F,EAAAiF,EAAAy0D,YAAAp5D,IAAAsF,EAAA7B,KAAAq2F,0BAAA91F,EAAAiY,QAAA,cAAAtX,EAAAC,EAAykB,OAAA6sD,OAAAmB,iBAAAttD,EAAA+rD,cAAA,QAAA/rD,CAAwD,IAAA5F,IAAMkF,EAAAxE,UAAA2nG,YAAA,SAAApjG,EAAAC,OAAuC,KAAAA,OAAA,EAAmB,QAAA5E,GAAA2E,EAAAE,QAAA,IAAsBD,GAAAZ,EAAAW,EAAA8a,OAAAzf,EAAA,GAAAob,MAAA,IAAA9V,EAAA,EAAA5F,EAAAM,EAAAd,EAAA,EAAAqB,EAAA,EAAAs+B,EAAA76B,EAAmDzD,EAAAs+B,EAAA95B,OAAWxE,IAAA,CAAK,GAAApB,GAAA0/B,EAAAt+B,EAAW,IAAAb,IAAA,MAASP,GAAAmG,IAAA,MAAanG,GAAAmG,IAAA,IAAAA,EAAA,CAAkBpG,EAAAQ,CAAI,QAAO,MAAAM,IAAA,OAAAd,EAAAuE,KAAAskG,YAAApjG,EAAA3E,EAAA,IAA4CgoG,eAAAhoG,EAAAioG,cAAA/oG,IAAkC0F,EAAAxE,UAAA0nG,UAAA,SAAAnjG,EAAAC,OAAqC,KAAAA,MAAA,GAAAD,IAAA0hG,MAA6B,QAAArmG,GAAAyD,KAAAskG,YAAApjG,GAAAX,EAAAhE,EAAAgoG,eAAA1iG,EAAAtF,EAAAioG,cAAAvoG,EAAA,GAAAR,EAAA,EAA4EA,EAAA0F,EAAI1F,IAAAQ,GAAA,MAAc,SAAAsE,EAAA,MAAAW,GAAAjF,EAAAiF,MAAAsX,QAAA,oBAAqC,OAAoBtX,IAAAsX,QAAA,mCAAAtX,GAAuD,UAAAA,EAAA0hG,OAAA,MAAuB1hG,IAAAsX,QAAA,sBAAAtX,GAAuC,MAAAA,GAAA0hG,OAAA,MAAoB1hG,IAAAsX,QAAA,kBAAAtX,IAAAsX,QAAA,WAAAvc,GAAAiF,IAAAsX,QAAA,YAAAtX,IAAAsX,QAAA,WAA0G,IAAA1b,GAAAoE,EAAA8a,OAAA,EAAAzb,GAAA66B,EAAAl6B,EAAA8a,OAAAna,EAAA,EAAAX,EAAAI,QAAA5F,EAAAwF,EAAA8a,OAAAzb,EAAA,EAAAsB,EAAAtB,EAAA,GAAAqiG,OAAA/mG,EAAAmE,KAAAqkG,UAAA3oG,EAAAyF,EAAA,EAAkG,QAAAnB,KAAAqkG,UAAAvnG,EAAAqE,GAAA,OAA8BtF,EAAA,KAAAI,EAAA,MAAe+D,KAAAqkG,UAAAjpE,EAAAj6B,IAAAqX,QAAA,cAA4C,MAAQrX,EAAAxE,UAAAynG,aAAA,SAAAljG,GAAsC,OAAAC,GAAA,EAAA5E,EAAA2E,EAAAyW,MAAA,MAAApX,EAAA,EAAgCA,EAAAhE,EAAA+E,OAAWf,IAAA,CAAK,GAAAsB,GAAAtF,EAAAgE,IAAW,IAAAsB,EAAAT,QAAA,WAAAD,KAAA,IAAAU,EAAAT,QAAA,UAAAD,GAA2D,QAAAlF,GAAA,GAAAR,EAAA,EAAiBA,EAAA0F,EAAI1F,IAAAQ,GAAA,MAAcM,GAAAgE,GAAAtE,EAAA4F,GAAA,IAAAA,EAAAT,QAAA,aAAAS,EAAAT,QAAA,UAAAD,IAA6D,MAAA5E,GAAAwb,KAAA,OAAoB5W,GAAGD,EAAA61F,cAAkB71F,GAAAujG,oBAAAtjG,GAAwBD,EAAAy0F,mBAAAz0F,EAAAy0F,uBAA8Cp5F,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAA,GAAa,GAAAC,GAAA,WAAiB,QAAAA,KAAA5E,GAAgB,GAAAgE,GAAAP,IAAWA,MAAAqZ,QAAAlY,EAAAnB,KAAAi7E,OAAA1+E,EAAAyD,KAAAk7F,gBAAA/5F,EAAA+5F,iBAAAjhF,SAAAvW,KAAA1D,KAAAm7F,IAAA,GAAAj6F,GAAAg4F,IAAAl5F,KAAAk7F,gBAAA3+F,GAAAyD,KAAA6jG,WAAA,GAAA7jG,KAAA0kG,kBAAA,EAAA1kG,KAAA07F,SAAA,EAAA17F,KAAA8jG,aAAA,EAAA9jG,KAAA2kG,oBAAA,EAAA3kG,KAAA4kG,sBAAA,EAAA5kG,KAAA6kG,uBAAA,EAAA7kG,KAAA8kG,uBAAA,EAAA9kG,KAAA+kG,sBAAA,EAAA/kG,KAAAglG,wBAAA,EAAAhlG,KAAAilG,mBAAA,EAAAjlG,KAAAklG,qBAAA,GAAAhkG,GAAAw8F,qBAAAv8F,EAAAo6E,iBAAAh/E,GAAAyD,KAAAmlG,yBAAA,GAAAjkG,GAAA88F,yBAAA78F,EAAAo6E,iBAAAh/E,GAAAyD,KAAAolG,yBAAA,GAAAlkG,GAAA+8F,yBAAA98F,EAAAo6E,iBAAAh/E,GAAAyD,KAAAqlG,6BAAA,GAAAnkG,GAAAi9F,6BAAAh9F,EAAAo6E,iBAAAh/E,GAAAyD,KAAAslG,qBAAA,GAAApkG,GAAAk9F,qBAAAj9F,EAAAo6E,iBAAAh/E,GAAAyD,KAAAulG,yBAAA,GAAArkG,GAAAo9F,yBAAAn9F,EAAAo6E,iBAAAh/E,GAAAyD,KAAAwlG,uBAAA,GAAAtkG,GAAAq9F,uBAAAp9F,EAAAo6E,iBAAAh/E,GAAAyD,KAAAylG,qBAAA,GAAAvkG,GAAAyhG,qBAAAxhG,EAAAo6E,iBAAAh/E,GAAAyD,KAAA0lG,mBAAA,GAAAxkG,GAAA2hG,mBAAA1hG,EAAAo6E,iBAAAh/E,GAAAyD,KAAA2lG,kBAAA,GAAAzkG,GAAA4hG,kBAAA3hG,EAAAo6E,iBAAAh/E,GAAAyD,KAAA4lG,uBAAA,GAAA1kG,GAAA6hG,uBAAA5hG,EAAAo6E,iBAAAh/E,GAAAyD,KAAA6lG,wBAAA,GAAA3kG,GAAA+hG,wBAAA9hG,EAAAo6E,iBAAAh/E,GAAAyD,KAAA8lG,sBAAA,GAAA5kG,GAAAiiG,sBAAAhiG,EAAAo6E,iBAAAh/E,GAAAyD,KAAA+lG,6BAAA,GAAA7kG,GAAAkiG,6BAAAjiG,EAAAo6E,iBAAAh/E,GAAAyD,KAAAgmG,wBAAA,GAAA9kG,GAAA8iG,wBAAA7iG,EAAAo6E,iBAAAh/E,GAAAyD,KAAAimG,2BAAA,GAAA/kG,GAAA+iG,2BAAA9iG,EAAAo6E,iBAAAh/E,GAAAyD,KAAAkmG,oBAAA,GAAAhlG,GAAAijG,oBAAAhjG,EAAAo6E,iBAAAh/E,GAAAyD,KAAAmmG,oBAAA,GAAAjlG,GAAAujG,oBAAAtjG,EAAAo6E,iBAAAh/E,GAAAyD,KAAAomG,2BAAA,GAAAllG,GAAAgjG,2BAAA/iG,EAAAo6E,iBAAAh/E,GAAAyD,KAAA83F,YAAA93F,KAAAm7F,IAAApD,aAAA,KAAA/3F,KAAAkmG,qBAAAlmG,KAAAqmG,YAAArmG,KAAAm7F,IAAAjD,cAAAl4F,KAAA83F,YAAA,KAAA93F,KAAAgmG,yBAAAhmG,KAAAsmG,eAAAtmG,KAAAm7F,IAAAjD,cAAAl4F,KAAA83F,YAAA,KAAA93F,KAAAimG,4BAAAjmG,KAAAumG,mBAAAvmG,KAAAm7F,IAAAjD,cAAAl4F,KAAA83F,aAAA,EAAA93F,KAAAklG,sBAAAllG,KAAAwmG,oBAAAxmG,KAAAklG,qBAAAlI,gBAAAvlE,IAAA,SAAAv2B,GAAszEX,EAAAkmG,WAAAvlG,KAAgBlB,KAAAmlG,yBAAAxH,kBAAAlmE,IAAA,SAAAv2B,GAAkEX,EAAAmmG,cAAAxlG,EAAA41F,WAA2B92F,KAAAmlG,yBAAAvH,gBAAAnmE,IAAA,SAAAv2B,GAAgEX,EAAAomG,YAAAzlG,EAAAk2C,MAAAymD,WAA+B79F,KAAAulG,yBAAAlH,kBAAA5mE,IAAA,SAAAv2B,GAAkEX,EAAAqmG,cAAA1lG,EAAA41F,WAA2B92F,KAAAqlG,6BAAAnH,sBAAAzmE,IAAA,SAAAv2B,GAA0EX,EAAAsmG,kBAAA3lG,EAAA41F,WAA+B92F,KAAA6lG,wBAAA7C,oBAAAvrE,IAAA,SAAAv2B,GAAmEX,EAAA46F,IAAA5C,qBAAAh4F,EAAA+lG,gBAA6C/lG,EAAA46F,IAAAjD,cAAA33F,EAAA+lG,gBAAsC3wC,YAAA,4BAAAnvD,OAAAtF,EAAAk2C,MAAAr6C,OAA6DwD,EAAA4lG,uBAAwBnmG,KAAA8mG,kBAAyB,MAAA3lG,GAAAxE,UAAAgqG,YAAA,SAAAzlG,GAA2C,GAAAC,GAAA8Y,SAAA8S,cAAA,KAAAxwB,EAAAmvD,KAAAC,UAAAzqD,EAAA,QAAAX,EAAA,GAAA2sD,OAAA3wD,IAA6E4D,KAAA,iBAAoB0B,EAAA2P,OAAAu7C,IAAAC,gBAAAzsD,EAAkCY,GAAA0rD,aAAA,OAAAhrD,GAAAV,EAAA0rD,aAAA,yBAAA1C,MAAAjpD,EAAAm+E,WAAA0e,eAAApmF,MAAA,iBAAAxW,EAAA4lG,SAAoI5lG,EAAAxE,UAAA+pG,cAAA,SAAAxlG,GAAuClB,KAAA0kG,kBAAA,EAAA1kG,KAAA6kG,sBAAA3jG,EAAAlB,KAAAgnG,yBAAmF7lG,EAAAxE,UAAAiqG,cAAA,SAAA1lG,GAAuClB,KAAA8kG,sBAAA5jG,EAAAlB,KAAA+kG,qBAAA/kG,KAAAinG,wBAAAjnG,KAAAknG,6BAAqH/lG,EAAAxE,UAAAkqG,kBAAA,SAAA3lG,GAA2ClB,KAAA+kG,qBAAA7jG,EAAAlB,KAAA8kG,sBAAA9kG,KAAAknG,4BAAAlnG,KAAAinG,yBAAqH9lG,EAAAxE,UAAAotD,QAAA,WAAgC/pD,KAAA07F,SAAA,EAAA17F,KAAA8mG,mBAAuC3lG,EAAAxE,UAAAigG,KAAA,WAA6B58F,KAAA07F,SAAA,EAAA17F,KAAA8mG,mBAAuC3lG,EAAAxE,UAAA8pG,WAAA,SAAAvlG,GAAoC,GAAAC,GAAAnB,KAAAm7F,IAAAhD,iBAAAn4F,KAAAumG,oBAAyD1I,QAAA38F,EAAAmR,QAAA,GAAoB,EAAArS,KAAAmlG,yBAAkC,OAAAnlG,MAAA0mG,cAAAvlG,MAA+BA,EAAAxE,UAAA6pG,kBAAA,WAA0C,GAAAtlG,GAAAlB,IAAWA,MAAAm7F,IAAA9C,YAAAr4F,KAAAqmG,aAAuC7jB,OAAA,EAAAqhB,WAAA7jG,KAAA6jG,WAAAC,aAAA,IAAmD9jG,KAAAgmG,wBAAAtC,eAAAjsE,IAAA,SAAAt2B,GAA8DD,EAAA07F,SAAS58F,KAAAgmG,wBAAA3C,kBAAA5rE,IAAA,SAAAt2B,GAAiED,EAAAimG,oBAAoBnnG,KAAAgmG,wBAAA1C,kBAAA7rE,IAAA,SAAAt2B,GAAiED,EAAA8lG,0BAA0BhnG,KAAAgmG,wBAAAzC,qBAAA9rE,IAAA,SAAAt2B,GAAoED,EAAAkmG,uBAAuBpnG,KAAAgmG,wBAAAxC,mBAAA/rE,IAAA,SAAAt2B,GAAkED,EAAAmmG,qBAAqBrnG,KAAAgmG,wBAAAvC,kBAAAhsE,IAAA,SAAAt2B,GAAiED,EAAAomG,oBAAoBtnG,KAAAgmG,wBAAArC,oBAAAlsE,IAAA,SAAAt2B,GAAmED,EAAAqmG,OAAApmG,EAAA01F,OAAA95F,SAAyBiD,KAAAgmG,wBAAApC,oBAAAnsE,IAAA,SAAAt2B,GAAmED,EAAAi6F,IAAA9C,YAAAn3F,EAAAmlG,aAAiC7jB,OAAArhF,EAAAi2C,MAAAorC,OAAAqhB,WAAA,GAAAC,aAAA3iG,EAAAi2C,MAAA0sD,eAAsE5iG,EAAAqmG,OAAA,OAAiBpmG,EAAAxE,UAAA6qG,uBAAA,SAAAtmG,GAAgD,GAAAC,GAAAnB,KAAAm7F,IAAAzC,gBAAA14F,KAAA6kG,sBAA2D,OAAA7kG,MAAA8jG,aAAA3iG,EAAA08F,QAAA3e,SAAA59E,OAAAtB,KAAAm7F,IAAA5C,qBAAAv4F,KAAAsmG,gBAAAtmG,KAAAm7F,IAAA9C,YAAAr4F,KAAAqmG,aAA6I7jB,OAAAthF,EAAA2iG,WAAA7jG,KAAA6jG,WAAAC,aAAA9jG,KAAA8jG,eAAmE9jG,KAAAm7F,IAAAzC,gBAAA14F,KAAAumG,qBAAAvmG,KAAAm7F,IAAA9C,YAAAr4F,KAAAumG,oBAAA,GAAAplG,EAAA08F,SAAgH18F,EAAAxE,UAAAwqG,gBAAA,WAAwCnnG,KAAAm7F,IAAA9C,YAAAr4F,KAAAqmG,aAAuC7jB,OAAA,EAAAqhB,WAAA7jG,KAAA6jG,WAAAC,aAAA9jG,KAAA8jG,eAAmE9jG,KAAAm7F,IAAA9C,YAAAr4F,KAAAumG,oBAAA,IAAmDplG,EAAAxE,UAAAyqG,mBAAA,WAA2C,GAAAlmG,GAAAlB,KAAAwnG,uBAAA,IAAArmG,EAAAnB,KAAAm7F,IAAAjD,cAAAl4F,KAAAsmG,gBAAA,EAAAtmG,KAAAomG,4BAAA7pG,EAAAyD,KAAAm7F,IAAAjD,cAAAl4F,KAAAsmG,gBAAA,EAAAtmG,KAAAomG,4BAAA7lG,EAAAP,KAAAm7F,IAAAjD,cAAA/2F,EAAA,KAAAnB,KAAAylG,qBAAmQzlG,MAAAynG,iBAAAlnG,EAAA,SAAAW,EAAAsJ,QAAAxK,KAAAynG,iBAAAlnG,EAAA,UAAAW,EAAAyJ,QAAwF,QAAA9I,GAAA7B,KAAAm7F,IAAAjD,cAAA37F,EAAA,KAAAyD,KAAAylG,sBAAAxpG,EAAA,EAAAR,EAAAyF,EAAAu+E,SAAoFxjF,EAAAR,EAAA6F,OAAWrF,IAAA,CAAK,GAAAa,GAAArB,EAAAQ,EAAW+D,MAAAynG,iBAAA5lG,EAAA/E,EAAAu3F,aAAAv3F,GAA0CkD,KAAAynG,iBAAA5lG,EAAA,uBAAAX,EAAAw+E,aAAA1/E,KAAAynG,iBAAA5lG,EAAA,wDAAAX,EAAAqpD,SAAwJppD,EAAAxE,UAAA+qG,YAAA,SAAAxmG,EAAAC,GAAuCA,EAAA0sF,aAAA7tF,KAAAm7F,IAAAjD,cAAAh3F,EAAAC,EAAA0sF,YAAA7tF,KAAA+lG,6BAAyF,QAAAxpG,KAAA4E,GAAA,mBAAA5E,GAAA,iBAAAA,EAAA,CAAyD,GAAAgE,GAAAY,EAAA5E,EAAW,eAAAA,EAAAyD,KAAAm7F,IAAAjD,cAAAh3F,GAA0CQ,IAAAnF,EAAAQ,MAAAwD,GAAcP,KAAA6lG,6BAA+B,eAAAtpG,EAAA,OAAAsF,KAAAtB,KAAA3D,eAAAiF,IAAAtB,EAAAsB,IAAA7B,KAAAm7F,IAAAjD,cAAAh3F,GAAyFQ,IAAAG,EAAA9E,MAAAwD,EAAAsB,IAAiB7B,KAAA4lG,4BAA8B,CAAK,GAAA3pG,GAAA+D,KAAA2nG,gBAAAzmG,EAAA3E,EAAAgE,EAAkC,WAAAtE,OAAA,KAAAA,EAAA,QAAiC,IAAA+D,KAAA4nG,SAAArrG,IAAAyD,KAAA4nG,SAAArnG,GAAA,QAA+CP,MAAAm7F,IAAAjD,cAAAh3F,GAA0BQ,IAAAnF,EAAAQ,MAAAd,GAAc+D,KAAA2lG,mBAAyBplG,KAAA0pF,oBAAAjqF,KAAAynG,iBAAAvmG,EAAA,WAAAX,EAAA0pF,sBAAmF9oF,EAAAxE,UAAAgrG,gBAAA,SAAAzmG,EAAAC,EAAA5E,GAA6C,UAAAA,EAAA,YAAyB,aAAAA,EAAA,iBAAgC,oBAAAA,GAAA,MAAAqD,MAAA4tC,MAAAjxC,SAAAioF,QAAA,GAAAjoF,EAAAioF,QAAA,EAAyE,oBAAAjoF,GAAA,MAAAA,EAA+B,qBAAAA,GAAA,MAAAA,GAAA,cAA+C,QAAAA,EAAA+E,OAAA,mBAAoC,IAAA/E,EAAA+E,OAAA,CAAa,OAAAf,MAAAsB,EAAA,EAAiBA,EAAAtF,EAAA+E,OAAWO,IAAA,CAAK,GAAA5F,GAAA+D,KAAA2nG,gBAAAzmG,EAAAC,EAAA,IAAAU,EAAA2iF,QAAA,OAAAjoF,EAAAsF,GAA0D,QAAA5F,GAAAsE,EAAA+D,KAAArI,GAAoB,WAAAsE,EAAAe,OAAA,KAAAf,EAAAwX,KAAA,MAAsC,MAAAxb,GAAA2mG,MAAAljG,KAAAm7F,IAAAjD,cAAAh3F,GAAyCQ,IAAAP,EAAApE,MAAAR,EAAAR,KAAAmnG,KAAA3mG,EAAA2mG,MAA+BljG,KAAA8lG,uBAAA,MAAAvpG,EAAAytF,qBAAAztF,EAAAytF,qBAAAjH,YAAAxmF,EAAAwmF,YAAAxmF,EAAAwmF,aAAA,gBAAAxmF,IAAAyD,KAAAynG,iBAAAvmG,EAAAC,EAAA5E,GAAA,OAAiL4E,EAAAxE,UAAA8qG,iBAAA,SAAAvmG,EAAAC,EAAA5E,GAA8C,GAAAA,EAAA,CAAM,GAAAgE,GAAAP,KAAAm7F,IAAAjD,cAAAh3F,EAAAC,EAAAnB,KAAA0lG,mBAA0D1lG,MAAA0nG,YAAAnnG,EAAAhE,GAAAyD,KAAAm7F,IAAAtC,YAAAt4F,IAAAP,KAAAm7F,IAAA7C,YAAA/3F,KAAwEY,EAAAxE,UAAA0qG,iBAAA,WAAyC,GAAAnmG,GAAAlB,KAAAwnG,uBAAA,IAAArmG,EAAAnB,KAAAm7F,IAAAjD,cAAAl4F,KAAAsmG,eAAA,KAAAtmG,KAAAylG,qBAAmHzlG,MAAA0nG,YAAAvmG,EAAAD,EAAAi+E,YAAgCh+E,EAAAxE,UAAA2qG,gBAAA,WAAwC,GAAApmG,GAAAlB,KAAAwnG,uBAAA,IAAArmG,EAAAnB,KAAAm7F,IAAAjD,cAAAl4F,KAAAsmG,eAAA,KAAAtmG,KAAAylG,qBAAmHzlG,MAAA0nG,YAAAvmG,EAAAD,EAAAk+E,WAA+Bj+E,EAAAxE,UAAAqqG,sBAAA,WAA8C,GAAA9lG,GAAAlB,KAAAwnG,uBAAA,GAAsCxnG,MAAAm7F,IAAApC,8BAAA/4F,KAAAumG,mBAAA,SAAArlG,GAA2E,MAAAA,GAAAmR,QAAA,EAAAnR,IAAqBlB,KAAAm7F,IAAA9C,YAAAr4F,KAAA6kG,uBAAmDhH,QAAA38F,EAAAmR,QAAA,IAAoBrS,KAAA6nG,mBAAA3mG,GAAAlB,KAAA2kG,mBAAA3kG,KAAAm7F,IAAAjD,cAAAl4F,KAAAsmG,eAAA,KAAAtmG,KAAAslG,sBAAAtlG,KAAA4kG,qBAAA5kG,KAAAm7F,IAAAjD,cAAAl4F,KAAAsmG,eAAA,KAAAtmG,KAAAwlG,wBAAAxlG,KAAA8nG,eAAA5mG,IAA8PC,EAAAxE,UAAAsqG,sBAAA,WAA8C,QAAAjnG,KAAAm7F,IAAAzC,gBAAA14F,KAAAqmG,aAAA7jB,OAAA,QAAmE,IAAArhF,GAAAnB,KAAAm7F,IAAAzC,gBAAA14F,KAAA8kG,uBAAAvoG,EAAA4E,EAAA08F,OAAuE79F,MAAA0kG,iBAAAnoG,EAAA0L,GAAAjI,KAAAm7F,IAAApC,8BAAA/4F,KAAA2kG,mBAAA,SAAAzjG,GAAsG,MAAAA,GAAAmR,QAAA,EAAAnR,IAAqBlB,KAAAm7F,IAAA9C,YAAAr4F,KAAA8kG,uBAAmDjH,QAAAthG,EAAAwrG,cAAA5mG,EAAA4mG,cAAA11F,QAAA,IAAkDrS,KAAAm7F,IAAA5C,qBAAAv4F,KAAA4kG,qBAA2D,IAAArkG,GAAAP,KAAAm7F,IAAAzC,gBAAAv3F,EAAA4mG,cAAgD/nG,MAAAm7F,IAAAjD,cAAAl4F,KAAA4kG,qBAAArkG,EAAAstF,YAAA7tF,KAAA+lG,6BAAkG,IAAAlkG,GAAA,SAAgB,QAAAtF,EAAAimF,QAAiB,QAAA3gF,EAAA,YAAuB,MAAM,SAAAA,EAAA,QAAmB,MAAM,SAAAA,EAAA,UAAqB,MAAM,SAAAA,EAAA,WAAsB,MAAM,SAAAA,EAAA,QAAkB,GAAA5F,GAAAiF,EAAAwhG,qBAAAlE,WAAAjiG,EAAAR,KAAgDQ,GAAA8G,OAAArD,KAAAynG,iBAAAznG,KAAA4kG,qBAAA,UAAmE7oG,MAAMmnG,KAAAjnG,EAAAF,KAAAQ,EAAAR,MAAmBisG,SAAAzrG,EAAA+lF,eAAA/lF,EAAA8iF,UAAAh8E,OAAA9G,EAAA8G,OAAAm/E,OAAA3gF,IAAgE7B,KAAAynG,iBAAAznG,KAAA4kG,qBAAA,UAA4D7oG,MAAMmnG,KAAAjnG,EAAAF,KAAAQ,EAAAR,MAAmBisG,SAAAzrG,EAAA+lF,eAAA/lF,EAAA8iF,UAAAmD,OAAA3gF,GAAkD,QAAApG,KAAAc,GAAA,gBAAAd,GAAA,WAAAA,GAAA,gBAAAc,GAAAd,IAAAuE,KAAAynG,iBAAAznG,KAAA4kG,qBAAAnpG,EAAAc,EAAAd,GAA+H,OAAA0F,GAAA4mG,eAAuB5mG,EAAAxE,UAAAuqG,0BAAA,WAAkD,QAAAlnG,KAAAm7F,IAAAzC,gBAAA14F,KAAAqmG,aAAA7jB,OAAA,WAAsE,IAAAthF,GAAAlB,KAAAm7F,IAAAzC,gBAAA14F,KAAA+kG,qBAA0D,OAAA7jG,GAAA+mG,iBAAAhqG,OAAAiqG,UAAAloG,KAAAqnG,mBAAAnmG,EAAA+mG,iBAAAhqG,OAAAC,WAAA8B,KAAAsnG,kBAAAtnG,KAAAm7F,IAAApC,8BAAA/4F,KAAAglG,uBAAA,SAAA9jG,GAA8M,MAAAA,GAAAmR,QAAA,EAAAnR,IAAqBA,EAAAmR,QAAA,EAAArS,KAAAm7F,IAAA9C,YAAAr4F,KAAA+kG,qBAAA7jG,KAAA+mG,gBAAiF9mG,EAAAxE,UAAAkrG,mBAAA,SAAA3mG,GAA4ClB,KAAAglG,uBAAAhlG,KAAAm7F,IAAAjD,cAAAl4F,KAAAsmG,eAAA,KAAAtmG,KAAAolG,0BAAAplG,KAAAm7F,IAAA5C,qBAAAv4F,KAAAglG,wBAAAhlG,KAAAilG,kBAAAjlG,KAAAm7F,IAAAjD,cAAAl4F,KAAAglG,wBAAiPnX,YAAA3sF,EAAAi+E,UAAA0O,YAAA/zC,KAAA54C,EAAAm+E,UAAA4oB,eAAAhqG,OAAAiqG,UAAA71F,QAAA,GAA+FrS,KAAAqlG,+BAAoClkG,EAAAxE,UAAAmrG,eAAA,SAAA5mG,GAAwClB,KAAAm7F,IAAA5C,qBAAAv4F,KAAA2kG,mBAAuD,QAAAxjG,GAAAnB,KAAAilG,kBAAA1oG,GAAA,EAAAgE,EAAA,EAA0CA,EAAAW,EAAAg+E,SAAA59E,OAAoBf,IAAA,CAAK,GAAAsB,GAAAX,EAAAg+E,SAAA3+E,EAAoB,KAAAP,KAAA4nG,SAAA/lG,EAAA9F,OAAA8F,EAAAoG,KAAAjI,KAAA0kG,iBAAA,CAAyD,GAAAzoG,GAAA+D,KAAAm7F,IAAAjD,cAAAl4F,KAAA2kG,oBAAsD9G,QAAAh8F,EAAAwQ,QAAA,GAAoBrS,KAAAulG,yBAAgC,IAAA1jG,EAAAgsF,YAAA1sF,EAAAnB,KAAAm7F,IAAAjD,cAAAl4F,KAAAglG,wBAAuEnX,YAAAhsF,EAAAgsF,YAAA/zC,KAAAj4C,EAAA29E,QAAAyoB,eAAAhsG,EAAAoW,QAAA,GAAoErS,KAAAqlG,8BAAA9oG,GAAA,MAAyC,KAAAA,EAAA,CAAY,GAAAd,GAAAuE,KAAAm7F,IAAAzC,gBAAA14F,KAAAilG,kBAAuDxpG,GAAAwsG,eAAAhsG,EAAA+D,KAAAm7F,IAAA9C,YAAAr4F,KAAAilG,kBAAAxpG,GAAAc,GAAA,EAAuEyD,KAAAm7F,IAAA9C,YAAAp8F,GAAwB4hG,QAAAh8F,EAAAwQ,QAAA,EAAA01F,cAAA5mG,MAAoC,IAAAnB,KAAA0kG,kBAAA,IAAAnkG,GAAAP,KAAA0kG,mBAAA7iG,EAAAoG,MAAAjI,KAAA8kG,sBAAA7oG,EAAA+D,KAAAinG,wBAAAjnG,KAAA+kG,qBAAA5jG,EAAAnB,KAAAknG,gCAAgM/lG,EAAAxE,UAAAmqG,gBAAA,WAAwC9mG,KAAAm7F,IAAA9C,YAAAr4F,KAAA83F,YAAA93F,KAAA07F,UAAoDv6F,EAAAxE,UAAAirG,SAAA,SAAA1mG,GAAkC,MAAAA,IAAA,MAAAlB,KAAA6jG,YAAA7jG,KAAA6jG,WAAAviG,OAAA,QAAAJ,EAAAE,QAAApB,KAAA6jG,cAA4F1iG,EAAAxE,UAAA4qG,OAAA,SAAArmG,GAAgC,OAAAlB,KAAA6jG,WAAA3iG,EAAAlB,KAAAm7F,IAAAzC,gBAAA14F,KAAAqmG,aAAA7jB,QAA4E,eAAAxiF,KAAAgnG,uBAA4C,MAAM,SAAAhnG,KAAAsnG,iBAA+B,MAAM,SAAAtnG,KAAAonG,oBAAkC,MAAM,SAAApnG,KAAAqnG,mBAAgCrnG,KAAA6jG,WAAA,IAAmB1iG,IAAMD,GAAAinG,WAAAhnG,GAAeD,EAAAy0F,mBAAAz0F,EAAAy0F,uBAA8Cp5F,UAAY,IAAAA,IAAM,SAAA2E,IAAa,SAAAC,GAAaA,EAAAinG,kBAAoB/pB,qBAAAn9E,EAAA2hF,aAAA7E,kBAAA98E,EAAA8kF,UAAA1E,iBAAApgF,EAAAgiF,SAAAtF,eAAA18E,EAAAkpF,OAAA5L,kBAAAt9E,EAAAwzF,UAAAlT,eAAAtgF,EAAAgzD,MAAAW,WAAAwzC,WAAAnnG,EAAAgzD,MAAAK,cAAA+zC,UAAApnG,EAAAgzD,MAAAD,MAAAgqB,SAAA/8E,EAAAgzD,MAAAiB,KAAAozC,cAAArnG,EAAAs7E,MAAAK,UAAA8E,eAAAzgF,EAAAs7E,MAAA6F,WAAAmmB,eAAAtnG,EAAAs7E,MAAAoF,WAAA9D,gBAAA58E,EAAAs7E,MAAA6K,YAAA3J,aAAAx8E,EAAAs7E,MAAAqL,SAAA4gB,YAAAvnG,EAAAs7E,MAAAD,QAAA4B,mBAAAj9E,EAAAs7E,MAAA2L,eAAA7J,oBAAAp9E,EAAAwzF,UAAAK,gBAAAxU,eAAAr/E,EAAAkpF,OAAAW,YAAAG,WAAAzK,iBAAAv/E,EAAAkpF,OAAAW,YAAAD,aAAApK,uBAAAx/E,EAAAkpF,OAAAW,YAAAC,mBAAAtJ,mBAAAxgF,EAAAgiF,SAAAE,eAAAslB,uBAAAxnG,EAAAy0F,iBAAAoH,YAAA4L,sBAAAznG,EAAAy0F,iBAAAwS,aAA01BjnG,EAAA0nG,oBAAA1nG,EAAA0nG,wBAAgDrsG,UAAY,IAAAA,IAAM,SAAA2E,GAAa,GAAAC,GAAA,WAAiB,QAAAA,UAAc,KAAAA,UAAiBnB,KAAAqZ,QAAAlY,EAAAnB,KAAA6oG,gBAAA,EAAA7oG,KAAAk9E,UAAA/7E,EAAA+7E,WAAAh8E,EAAA0nG,kBAAAR,iBAAApoG,KAAA8oG,kBAAA,EAAA9oG,KAAA+oG,MAAA,EAAA/oG,KAAAgpG,YAAAhpG,KAAAi7E,OAAA,GAAAj7E,MAAAk9E,UAAAmrB,WAAAroG,KAAA85C,KAAA,GAAA95C,MAAAk9E,UAAAe,SAAAj+E,KAAAipG,QAAA,GAAAjpG,MAAAk9E,UAAAurB,aAA6RltB,iBAAAv7E,KAAAk9E,UAAAorB,UAAA7sB,gBAAAz7E,KAAAk9E,UAAAe,UAAkFj+E,KAAAi7E,QAAAj7E,KAAAkpG,iBAAA,GAAAlpG,MAAAk9E,UAAAorB,UAAAtoG,KAAAmpG,UAAA,GAAAnpG,MAAAk9E,UAAAorB,UAAAtoG,KAAA2qB,QAAA,GAAA3qB,MAAAk9E,UAAAorB,UAAAtoG,KAAAipG,QAAA3tB,aAAA7jD,IAAAz3B,KAAAs7E,aAAAt7E,WAAAipG,QAAAztB,WAAA/jD,IAAAz3B,KAAAw7E,WAAAx7E,WAAAipG,QAAAt+E,QAAA8M,IAAAz3B,KAAAopG,gBAAAppG,MAAmT,MAAAmB,GAAAkoG,2BAAA,SAAAnoG,GAAgD,MAAAlB,MAAAspG,6BAAApoG,IAAAlB,KAAAupG,wBAAAroG,EAAA,UAAAlB,KAAAupG,wBAAAroG,EAAA,uBAAAlB,KAAAupG,wBAAAroG,EAAA,WAAAlB,KAAAupG,wBAAAroG,EAAA,wBAA4OC,EAAAmoG,6BAAA,SAAApoG,GAA4C,GAAAC,GAAAD,EAAAq1F,aAAA,yBAA+C,IAAAp1F,EAAA,MAAAnB,MAAAupG,wBAAAroG,EAAAC,IAA8CA,EAAAooG,wBAAA,SAAAroG,EAAAC,GAAyC,GAAA5E,EAAM,KAAIA,EAAA2E,EAAA2J,WAAA1J,GAAkB,MAAAD,IAAU,MAAA3E,IAAS4E,EAAAxE,UAAA88C,UAAA,WAAkC,GAAAv4C,GAAAlB,IAAWA,MAAAwpG,cAAAxpG,KAAAypG,eAAAzpG,KAAAwpG,YAAAhP,iBAAA/iE,IAAAz3B,KAAA0pG,MAAA1pG,WAAAwpG,YAAAjP,gBAAA9iE,IAAAz3B,KAAA2pG,KAAA3pG,WAAAwpG,YAAA/O,yBAAAhjE,IAAAz3B,KAAA87E,cAAA97E,WAAAwpG,YAAAlP,mBAAA7iE,IAAA,SAAAt2B,GAA8QA,GAAAD,EAAAorF,cAAAnrF,EAAAs7F,MAA0Bz8F,MAAAs8C,YAAA,WAA8Bp7C,EAAAsoG,YAAA1M,OAAA57F,EAAA86E,WAAiC,KAAAh8E,KAAAwpG,YAAArN,oBAAAn8F,KAAAwpG,YAAAz/C,WAAA/pD,KAAA4pG,aAAA5pG,KAAA6pG,cAAA7pG,KAAAmpG,UAAA1xE,IAAA,SAAAt2B,GAA2ID,EAAA0oG,WAAA7/C,UAAA7oD,EAAA0oG,WAAAnD,WAAAtlG,OAAqDA,EAAAxE,UAAAktG,YAAA,WAAoC,MAAA7pG,MAAA4pG,aAAA5pG,KAAA4pG,WAAA,GAAA5pG,MAAAk9E,UAAAyrB,uBAAmFptB,iBAAAv7E,KAAAk9E,UAAAorB,WAA0CtoG,KAAAi7E,SAAAj7E,KAAA4pG,YAA+BzoG,EAAAxE,UAAA8sG,aAAA,WAAqC,MAAAzpG,MAAAwpG,cAAAxpG,KAAAwpG,YAAA,GAAAxpG,MAAAk9E,UAAAwrB,wBAAsFntB,iBAAAv7E,KAAAk9E,UAAAorB,WAA0CtoG,KAAAi7E,SAAAj7E,KAAAwpG,aAAgCroG,EAAAxE,UAAA+sG,MAAA,WAA8B1pG,KAAAipG,QAAAltB,iBAAA,IAAiC56E,EAAAxE,UAAAgtG,KAAA,WAA6B3pG,KAAAipG,QAAAltB,iBAAA,IAAiC56E,EAAAxE,UAAAm/E,cAAA,WAAsC97E,KAAAipG,QAAAntB,iBAA6B36E,EAAAxE,UAAAmtG,oBAAA,SAAA5oG,GAA6ClB,KAAAipG,QAAAltB,iBAAA76E,IAAiCC,EAAAxE,UAAAq/E,OAAA,WAA+B,MAAAh8E,MAAAipG,QAAAjtB,UAA6B76E,EAAAxE,UAAA+8C,YAAA,WAAoC,GAAA15C,KAAA+pG,UAAA,WAAA/pG,MAAAopG,gBAAA,yBAA6EppG,MAAA+pG,UAAA,GAAA/pG,MAAAk9E,UAAAqrB,eAAiDhtB,iBAAAv7E,KAAAk9E,UAAAorB,WAA0CtoG,KAAAi7E,QAAAj7E,KAAA+pG,UAAAttB,mBAAAhlD,IAAAz3B,KAAA4+E,WAAA5+E,OAA0EmB,EAAAxE,UAAAqtG,UAAA,SAAA9oG,GAAmC,GAAAlB,KAAA+pG,UAAA,WAAA/pG,MAAAopG,gBAAA,yBAA6EppG,MAAA+pG,UAAA,GAAA/pG,MAAAk9E,UAAAqrB,eAAiDhtB,iBAAAv7E,KAAAk9E,UAAAorB,UAAA99F,OAAAtJ,GAAmDlB,KAAAi7E,QAAAj7E,KAAA+pG,UAAAttB,mBAAAhlD,IAAAz3B,KAAA4+E,WAAA5+E,OAA0EmB,EAAAxE,UAAAstG,qBAAA,WAA6C,MAAAjqG,MAAAiqG,wBAAmC9oG,EAAAxE,UAAA2vF,cAAA,SAAAprF,GAAuC,GAAA3E,GAAAyD,KAAAkqG,+BAAAhpG,EAA6C,IAAA3E,EAAAyD,KAAAmqG,kBAAA5tG,OAA+B,CAAK,GAAAgE,GAAAY,EAAAkoG,2BAAAnoG,EAAsCX,GAAAP,KAAAoqG,eAAA7pG,GAAAP,KAAAi7E,OAAAj2E,MAAA,sDAAgG7D,EAAAxE,UAAAytG,eAAA,SAAAlpG,GAAwC,GAAAC,GAAAnB,KAAAkqG,+BAAAhpG,EAAAsJ,OAAoDrJ,OAAAD,EAAAkxF,oBAAA,GAAApyF,MAAAk9E,UAAAsrB,gBAA+D79F,QAAAzJ,EAAA67E,QAAA,EAAA2B,cAAA,EAAAxB,UAAAl9E,KAAAk9E,WAA6Dl9E,KAAA85C,KAAA95C,KAAAi7E,QAAA,GAAAj7E,MAAAk9E,UAAAsrB,gBAA2D79F,QAAAzJ,EAAA67E,QAAA,EAAA2B,cAAA,EAAAxB,UAAAl9E,KAAAk9E,WAA6Dl9E,KAAA85C,KAAA95C,KAAAi7E,QAAAj7E,KAAAgpG,SAAA1kG,MAA4CkG,OAAArJ,EAAAwJ,QAAAH,OAAA6/F,WAAAlpG,KAAqCA,GAAAnB,KAAAmqG,kBAAAhpG,IAAgCA,EAAAxE,UAAAwtG,kBAAA,SAAAjpG,GAA2C,GAAAC,GAAAnB,IAAWA,MAAAsqG,iBAAAtqG,KAAAopG,gBAAA,iCAAAppG,KAAA+oG,MAAA,EAAA/oG,KAAAsqG,iBAAAppG,EAAAlB,KAAA69F,UAAA79F,KAAA6oG,eAAAj8E,WAAA,WAA0KzrB,EAAAmpG,kBAAAnpG,EAAA4nG,MAAA,EAAA5nG,EAAAioG,gBAAA,+DAAAjoG,EAAAioG,gBAAA,qFAAqN,OAAOjoG,EAAAxE,UAAAkhG,QAAA,SAAA38F,OAAiC,KAAAA,MAAA,GAAAlB,KAAA8oG,kBAAA5nG,EAAAlB,KAAA87E,iBAAgE36E,EAAAxE,UAAAiiF,WAAA,SAAA19E,GAAoC,GAAAC,GAAAnB,KAAAkqG,+BAAAhpG,EAAAyJ,QAAAH,OAA4DrJ,OAAA,GAAAnB,MAAAk9E,UAAAsrB,gBAAyC79F,QAAAzJ,EAAAyJ,QAAAoyE,QAAA77E,EAAAy7E,eAAA+B,cAAA,EAAAxB,UAAAl9E,KAAAk9E,WAAoFl9E,KAAA85C,KAAA95C,KAAAi7E,QAAAj7E,KAAAgpG,SAAA1kG,MAA4CkG,OAAArJ,EAAAwJ,QAAAH,OAAA6/F,WAAAlpG,KAAqCA,EAAAw9E,OAAWx9E,EAAAxE,UAAAutG,+BAAA,SAAAhpG,GAAwD,OAAAC,GAAA,EAAA5E,EAAAyD,KAAAgpG,SAA4B7nG,EAAA5E,EAAA+E,OAAWH,IAAA,CAAK,GAAAZ,GAAAhE,EAAA4E,EAAW,IAAAZ,EAAAiK,SAAAtJ,EAAA,MAAAX,GAAA8pG,aAAqClpG,EAAAxE,UAAA2+E,aAAA,WAAqCt7E,KAAA8oG,kBAAA,GAAA9oG,KAAAsqG,mBAAAtqG,KAAAkpG,iBAAAl1C,YAAA,IAAAh0D,KAAAsqG,iBAAAxrB,gBAAA9+E,KAAA8oG,qBAAA9oG,KAAAsqG,qBAAA,IAAqLnpG,EAAAxE,UAAA6+E,WAAA,WAAmC,GAAAx7E,KAAAsqG,kBAAA,IAAAtqG,KAAA8oG,kBAAA,CAAsD,GAAA5nG,GAAAlB,KAAAsqG,iBAAA3qB,aAA0Cz+E,GAAAg+E,SAAA59E,OAAA,GAAAtB,KAAA6oG,gBAAA,GAAA0B,aAAAvqG,KAAA6oG,gBAAA7oG,KAAAwqG,eAAAtpG,KAAAlB,KAAA+oG,QAAA/oG,KAAA69F,QAAA,MAAuI18F,EAAAxE,UAAA6tG,eAAA,SAAAtpG,GAAwClB,KAAAwpG,aAAAxpG,KAAAwpG,YAAA3M,gBAAA,MAAA78F,KAAAmpG,UAAAn1C,QAAA9yD,IAAmFC,EAAAxE,UAAAysG,gBAAA,SAAAloG,GAAyC,GAAAlB,KAAAi7E,OAAAj2E,MAAA9D,GAAAlB,KAAA6oG,gBAAA,GAAA0B,aAAAvqG,KAAA6oG,iBAAA7oG,KAAAsqG,iBAAA,KAAAppG,EAAiHlB,MAAAsqG,qBAAA,GAAAtqG,KAAA8oG,kBAAA,EAAA9oG,KAAA+oG,MAAA,EAAA/oG,KAAAwpG,aAAAxpG,KAAAwpG,YAAA3M,gBAAA37F,GAAAlB,KAAA2qB,QAAAqpC,QAAA9yD,IAAiJC,IAAMD,GAAAs4C,QAAAr4C,GAAY5E,WAAS2E,EAAA3F,QAAAgB,GAAe,SAAA2E,EAAAC,EAAA5E,GAAiB,GAAAgE,GAAAhE,EAAA,EAAW,iBAAAgE,SAAAW,EAAAzF,EAAA8E,EAAA,MAAqChE,EAAA,GAAAgE,GAAQ2rD,WAAA,SAAoB3rD,EAAAkqG,SAAAvpG,EAAA3F,QAAAgF,EAAAkqG,SAA+B,SAAAvpG,EAAAC,EAAA5E,GAAiB,GAAAgE,GAAAhE,EAAA,EAAW,iBAAAgE,SAAAW,EAAAzF,EAAA8E,EAAA,MAAqChE,EAAA,GAAAgE,GAAQ2rD,WAAA,SAAoB3rD,EAAAkqG,SAAAvpG,EAAA3F,QAAAgF,EAAAkqG,SAA+B,SAAAvpG,EAAAC,EAAA5E,GAAiB4E,EAAAD,EAAA3F,QAAAgB,EAAA,WAAA4E,EAAAmD,MAAApD,EAAAzF,EAAA,ovCAAuxC,MAAO,SAAAyF,EAAAC,EAAA5E,GAAiB4E,EAAAD,EAAA3F,QAAAgB,EAAA,WAAA4E,EAAAmD,MAAApD,EAAAzF,EAAA,2EAA8G,KAAA0F,EAAAmD,MAAApD,EAAAzF,EAAA,sifAAujf,MAAO,SAAAyF,EAAAC,GAAeD,EAAA3F,QAAA,SAAA2F,GAAsB,GAAAC,GAAA,mBAAAqQ,gBAAA2B,QAAkD,KAAAhS,EAAA,SAAA26B,OAAA,mCAA0D,KAAA56B,GAAA,gBAAAA,GAAA,MAAAA,EAAmC,IAAA3E,GAAA4E,EAAAupG,SAAA,KAAAvpG,EAAAwpG,KAAApqG,EAAAhE,EAAA4E,EAAAypG,SAAApyF,QAAA,gBAAqE,OAAAtX,GAAAsX,QAAA,+DAAAtX,EAAAC,GAAqF,GAAAU,GAAAV,EAAAyhG,OAAApqF,QAAA,oBAAAtX,EAAAC,GAAgD,MAAAA,KAASqX,QAAA,oBAAAtX,EAAAC,GAAmC,MAAAA,IAAW,mDAAAsM,KAAA5L,GAAA,MAAAX,EAAmE,IAAAjF,EAAM,OAAAA,GAAA,IAAA4F,EAAAT,QAAA,MAAAS,EAAA,IAAAA,EAAAT,QAAA,KAAA7E,EAAAsF,EAAAtB,EAAAsB,EAAA2W,QAAA,mBAAAkzC,KAAAC,UAAA1vD,GAAA,QAA8G,SAAAiF,EAAAC,GAAe,GAAA5E,EAAMA,GAAA,WAAa,MAAAyD,QAAe,KAAIzD,KAAAsuG,SAAA,qBAAAC,MAAA,QAAiD,MAAA5pG,GAAS,gBAAAsQ,UAAAjV,EAAAiV,QAAoCtQ,EAAA3F,QAAAgB,GAAY,SAAA2E,EAAAC,EAAA5E,GAAiBA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAA2E,EAAA3F,QAAAgB,EAAA,SvCw8iBtguQ,SAAUf,EAAQD,EAASH,GAEjC,YwC18iBA,SAAAogD,GAA+BuvD,GAE3B,IAAK,GADC1+F,GAAQ,GAAInG,YAAW6kG,EAAazpG,QACjC7F,EAAI,EAAGA,EAAIsvG,EAAazpG,OAAQ7F,IACrC4Q,EAAM5Q,GAAKsvG,EAAa10D,WAAW56C,EAEvC,OAAO4Q,GAAMD,OxCu8iBjBlQ,OAAOC,eAAeZ,EAAS,cAAgBwB,OAAO,IwC58iBtDxB,EAAAigD,kBxCy9iBM,SAAUhgD,EAAQD,EAASH,GAEjC,YAEAc,QAAOC,eAAeZ,EAAS,cAAgBwB,OAAO,GyC79iBtD,IAAAiuG,GAAA5vG,EAAA,IACAmqC,EAAAnqC,EAAA,IAIAmgD,EAAA,WAOI,QAAAA,GAAoBluC,GAAArN,KAAAqN,OAChBrN,KAAKirG,UAAY,GAAIC,UAAS79F,GAC9BrN,KAAKmrG,WAAa,GAAIjlG,YAAWmH,EAAM,EAAGk4B,EAAAuP,aAC1C90C,KAAKorG,QAwJb,MArJIlvG,QAAAC,eAAIo/C,EAAA5+C,UAAA,UzCs9iBAL,IyCt9iBJ,WACI,MAAO0D,MAAKqrG,SzCw9iBZhvG,YAAY,EACZD,cAAc,IyCt9iBlBF,OAAAC,eAAIo/C,EAAA5+C,UAAA,WzCy9iBAL,IyCz9iBJ,WACI,MAAO0D,MAAKsrG,UzC29iBZjvG,YAAY,EACZD,cAAc,IyCz9iBlBF,OAAAC,eAAIo/C,EAAA5+C,UAAA,azC49iBAL,IyC59iBJ,WACI,MAAO0D,MAAK6oC,OzC89iBZxsC,YAAY,EACZD,cAAc,IyC59iBlBF,OAAAC,eAAIo/C,EAAA5+C,UAAA,wBzC+9iBAL,IyC/9iBJ,WACI,OAAQ0D,KAAKqrG,QAAQE,WACjB,IAAKhmE,GAAAsP,UAAU22D,UACf,IAAKjmE,GAAAsP,UAAU42D,QACX,MAAO,EACX,KAAKlmE,GAAAsP,UAAU62D,eACX,MAAO,EACX,KAAKnmE,GAAAsP,UAAU82D,UACX,MAAO,EACX,SACI,KAAM,6BzCk+iBdtvG,YAAY,EACZD,cAAc,IyC/9iBlBm/C,EAAA5+C,UAAA++C,gBAAA,WASI,IAAK,GARClU,GAAIxnC,KAAKqrG,QAAQngG,MACjBu8B,EAAIznC,KAAKqrG,QAAQjgG,OACjBvP,EAAImE,KAAK4rG,qBACX1hE,EAAQ1C,EAAIC,EAAK5rC,EAEjBgwG,EAAU7rG,KAAK8rG,UAAUC,aACzB1+F,EAAO,GAAInH,YAAWgkC,GAEjBjmC,EAAI,EAAGA,EAAIwjC,EAAGxjC,IACnB,IAAK,GAAIgyB,GAAI,EAAGA,EAAIuR,EAAGvR,IAInB,IAAK,GAHD+1E,GAAa/nG,GAAKujC,EAAE3rC,EAAE,GAAKo6B,EAAEp6B,EAAE,EAC/BowG,EAAYhoG,GAAKujC,EAAE3rC,GAAKo6B,EAAEp6B,EAErBJ,EAAI,EAAGA,EAAII,EAAGJ,IACnB4R,EAAK4+F,EAASxwG,GAAKowG,EAAQG,EAAUvwG,EAKjD,OAAO4R,IAGXkuC,EAAA5+C,UAAAi/C,sBAAA,SAAsBj1C,GASlB,IAAK,GAHD0G,GAAO,GAAInH,YAJL,EAIgBS,GACtBklG,EAAU7rG,KAAKsrG,SAASj+F,KAEnB5R,EAAI,EAAGA,EAAIuE,KAAKsrG,SAAS7sE,OAAQhjC,IAAK,CAC3C,GAAIywG,GANK,EAMczwG,EACnBsT,EATE,EASWtT,CACjB4R,GAAK0B,GAAU88F,EAAQK,GACvB7+F,EAAK0B,EAAO,GAAK88F,EAAQK,EAAU,GACnC7+F,EAAK0B,EAAO,GAAK88F,EAAQK,EAAU,GACnC7+F,EAAK0B,EAAO,GAAK,IAGrB,MAAO1B,IAGHkuC,EAAA5+C,UAAAyuG,MAAR,WACIprG,KAAKmsG,kBACLnsG,KAAKosG,eAGC7wD,EAAA5+C,UAAAwvG,gBAAV,WACI,GAAIE,GAAMrsG,KAAKmrG,UACf,IAAe,KAAVkB,EAAI,IACI,IAAVA,EAAI,IACM,IAAVA,EAAI,IACM,IAAVA,EAAI,IACM,IAAVA,EAAI,IACM,IAAVA,EAAI,IACM,IAAVA,EAAI,IACM,IAAVA,EAAI,GACH,KAAM,qBAGJ9wD,EAAA5+C,UAAAyvG,YAAV,WAEI,IADA,GAAIr9F,GAASw2B,EAAAuP,YACP/lC,EAAS/O,KAAKirG,UAAU3rF,YAAW,CACrC,GAAI9X,GAAQxH,KAAKssG,WAAWv9F,EAC5B,IAAGvH,EAAM,CACL,OAAQA,EAAMrH,MACV,IAAKolC,GAAAqP,UAAU23D,OACXvsG,KAAKqrG,QAAuB7jG,CAC5B,MACJ,KAAK+9B,GAAAqP,UAAU43D,QACXxsG,KAAKsrG,SAAyB9jG,CAC9B,MACJ,KAAK+9B,GAAAqP,UAAU63D,KACXzsG,KAAK6oC,MAAmBrhC,EAMhCuH,GAAUvH,EAAMklG,eAKlBnxD,EAAA5+C,UAAA2vG,WAAV,SAAqBv9F,GACjB,GAAI0zC,GAAOziD,KAAKirG,UAEZ3pG,EAASmhD,EAAKkqD,UAAU59F,GAAQ,EACpCA,IAAQ,CAER,IAAI5O,GAAkBsiD,EAAKkqD,UAAU59F,GAAQ,EAC7CA,IAAQ,CAER,IAAI1B,GAAO,GAAInH,YAAWlG,KAAKirG,UAAU7+F,OAAQ2C,EAAQzN,EACzDyN,IAAQzN,CAER,IAAIi0C,GAAMkN,EAAKkqD,UAAU59F,GAAQ,EAEjC,QADA0C,QAAQ+5B,IAAIxrC,KAAK4sG,eAAezsG,IACxBA,GACJ,IAAKolC,GAAAqP,UAAU23D,OACX,MAAO,IAAIvB,GAAA6B,YAAYvrG,EAAQnB,EAAMkN,EAAMkoC,EAC/C,KAAKhQ,GAAAqP,UAAU43D,QACX,MAAO,IAAIxB,GAAA8B,aAAaxrG,EAAQnB,EAAMkN,EAAMkoC,EAChD,KAAKhQ,GAAAqP,UAAU63D,KACX,MAAO,IAAIzB,GAAA+B,UAAUzrG,EAAQnB,EAAMkN,EAAMkoC,EAC7C,KAAKhQ,GAAAqP,UAAUo4D,IACX,MAAO,IAAIhC,GAAAiC,SAAS3rG,EAAQnB,EAAMkN,EAAMkoC,EAC5C,SAEI,MAAO,IAAIy1D,GAAAkC,SAAS5rG,EAAQnB,EAAMkN,EAAMkoC,KAI5CgG,EAAA5+C,UAAAiwG,eAAR,SAAuB3kG,GACnB,OACKA,IAAO,GAAM,IACbA,IAAO,GAAM,IACbA,IAAO,EAAK,IACN,IAAP,GACFklG,OAAO,SAACtwG,EAAEhB,EAAEJ,GAAM,MAAAoB,GAAIg5C,OAAOC,aAAaj6C,IAAI,KAExD0/C,IAlKahgD,GAAAggD,azCwnjBP,SAAU//C,EAAQD,EAASH,GAEjC,YAEAc,QAAOC,eAAeZ,EAAS,cAAgBwB,OAAO,GACtD,IAAI4xC,GAAUvzC,EAAoB,G0ClojBlCmqC,EAAAnqC,EAAA,IACAgyG,EAAAhyG,EAAA,IAEA8xG,EAAA,WACI,QAAAA,GAAoBG,EAAyBC,EAA4BzkE,EAA2B0kE,GAChG,GADgBvtG,KAAAqtG,UAAyBrtG,KAAAstG,QAA4BttG,KAAA6oC,QAA2B7oC,KAAAutG,OAC7FF,GAAWxkE,EAAMvnC,OAChB,KAAM,iBAsBlB,MAnBIpF,QAAAC,eAAI+wG,EAAAvwG,UAAA,c1CsojBAL,I0CtojBJ,WACI,MAAO0D,MAAKqtG,S1CwojBZhxG,YAAY,EACZD,cAAc,I0CtojBlBF,OAAAC,eAAI+wG,EAAAvwG,UAAA,e1CyojBAL,I0CzojBJ,WACI,MAAO0D,MAAKqtG,QAAU9nE,EAAAwP,cAAgBxP,EAAAyP,YAAczP,EAAA0P,Y1C2ojBpD54C,YAAY,EACZD,cAAc,I0CzojBlBF,OAAAC,eAAI+wG,EAAAvwG,UAAA,Q1C4ojBAL,I0C5ojBJ,WACI,MAAO0D,MAAKstG,O1C8ojBZjxG,YAAY,EACZD,cAAc,I0C5ojBlBF,OAAAC,eAAI+wG,EAAAvwG,UAAA,O1C+ojBAL,I0C/ojBJ,WACI,MAAO0D,MAAKutG,M1CipjBZlxG,YAAY,EACZD,cAAc,I0C/ojBlBF,OAAAC,eAAI+wG,EAAAvwG,UAAA,Q1CkpjBAL,I0ClpjBJ,WACI,MAAO0D,MAAK6oC,O1CopjBZxsC,YAAY,EACZD,cAAc,I0CnpjBtB8wG,IAzBa3xG,GAAA2xG,UA2Bb,IAAAL,GAAA,SAAArmD,GAUI,QAAAqmD,GAAYvrG,EAAgBnB,EAAiBkN,EAAkBkoC,GAA/D,GAAAqQ,GACIY,EAAA7qD,KAAAqE,KAAMsB,EAAQnB,EAAMkN,EAAMkoC,IAAIv1C,IAC9B,IAAGG,GAAQolC,EAAAqP,UAAU23D,OACjB,KAAM,oB1CgpjBV,O0C9ojBA3mD,GAAKwlD,Q1C8ojBExlD,E0C7mjBf,MAhDiCjX,GAAA9tC,UAAAgsG,EAAArmD,GAkBrBqmD,EAAAlwG,UAAAyuG,MAAR,WACI,GAAI3oD,GAAO,GAAIyoD,UAASlrG,KAAK6oC,MAAMz8B,OAAQpM,KAAK6oC,MAAMuC,WAAYprC,KAAK6oC,MAAMvpB,WAC7Etf,MAAKwnD,OAAS/E,EAAKkqD,UAAU,GAAG,GAChC3sG,KAAKynD,QAAUhF,EAAKkqD,UAAU,GAAG,GACjC3sG,KAAKwtG,UAAsB/qD,EAAKgrD,SAAS,GACzCztG,KAAK0tG,WAAwBjrD,EAAKgrD,SAAS,GAC3CztG,KAAK2tG,mBAAqBlrD,EAAKgrD,SAAS,IACxCztG,KAAK4tG,cAAgBnrD,EAAKgrD,SAAS,IACnCztG,KAAK6tG,WAAkC,GAArBprD,EAAKgrD,SAAS,KAGpCvxG,OAAAC,eAAI0wG,EAAAlwG,UAAA,S1C6ojBAL,I0C7ojBJ,WACI,MAAO0D,MAAKwnD,Q1C+ojBZnrD,YAAY,EACZD,cAAc,I0C7ojBlBF,OAAAC,eAAI0wG,EAAAlwG,UAAA,U1CgpjBAL,I0ChpjBJ,WACI,MAAO0D,MAAKynD,S1CkpjBZprD,YAAY,EACZD,cAAc,I0ChpjBlBF,OAAAC,eAAI0wG,EAAAlwG,UAAA,Y1CmpjBAL,I0CnpjBJ,WACI,MAAO0D,MAAKwtG,W1CqpjBZnxG,YAAY,EACZD,cAAc,I0CnpjBlBF,OAAAC,eAAI0wG,EAAAlwG,UAAA,a1CspjBAL,I0CtpjBJ,WACI,MAAO0D,MAAK0tG,Y1CwpjBZrxG,YAAY,EACZD,cAAc,I0CtpjBlBF,OAAAC,eAAI0wG,EAAAlwG,UAAA,c1CypjBAL,I0CzpjBJ,WACI,MAAO0D,MAAK6tG,Y1C2pjBZxxG,YAAY,EACZD,cAAc,I0C1pjBtBywG,GAhDiCK,EAApB3xG,GAAAsxG,aAkDb,IAAAC,GAAA,SAAAtmD,GACI,QAAAsmD,GAAYxrG,EAAgBnB,EAAiBkN,EAAkBkoC,GAA/D,GAAAqQ,GACIY,EAAA7qD,KAAAqE,KAAMsB,EAAQnB,EAAMkN,EAAMkoC,IAAIv1C,IAC9B,IAAGG,GAAQolC,EAAAqP,UAAU43D,QACjB,KAAM,qBAEV,IAAGn/F,EAAK/L,OAAO,GAAK,EAChB,KAAM,wB1C8pjBV,OAAOskD,G0CppjBf,MAjBkCjX,GAAA9tC,UAAAisG,EAAAtmD,GAU9BtqD,OAAAC,eAAI2wG,EAAAnwG,UAAA,U1C8pjBAL,I0C9pjBJ,WACI,MAAO0D,MAAK6oC,MAAMvnC,OAAS,G1CgqjB3BjF,YAAY,EACZD,cAAc,I0C9pjBlB0wG,EAAAnwG,UAAAmxG,SAAA,SAAS7lG,GACL,MAAO,IAAI/B,YAAWlG,KAAK6oC,MAAMz8B,OAAQpM,KAAK6oC,MAAMuC,WAAkB,EAALnjC,EAAQ,IAEjF6kG,GAjBkCI,EAArB3xG,GAAAuxG,cAmBb,IAAAC,GAAA,SAAAvmD,GACI,QAAAumD,GAAYzrG,EAAgBnB,EAAiBkN,EAAkBkoC,GAA/D,GAAAqQ,GACIY,EAAA7qD,KAAAqE,KAAMsB,EAAQnB,EAAMkN,EAAMkoC,IAAIv1C,IAC9B,IAAGG,GAAQolC,EAAAqP,UAAU63D,KACjB,KAAM,kB1CmqjBV,OAAO7mD,G0C7pjBf,MAV+BjX,GAAA9tC,UAAAksG,EAAAvmD,GAO3BumD,EAAApwG,UAAAovG,WAAA,WACI,MAAOqB,GAAKW,QAAQ/tG,KAAK6oC,QAEjCkkE,GAV+BG,EAAlB3xG,GAAAwxG,WAYb,IAAAE,GAAA,SAAAzmD,GACI,QAAAymD,GAAY3rG,EAAgBnB,EAAiBkN,EAAkBkoC,GAA/D,GAAAqQ,GACIY,EAAA7qD,KAAAqE,KAAMsB,EAAQnB,EAAMkN,EAAMkoC,IAAIv1C,IAC9B,IAAGG,GAAQolC,EAAAqP,UAAUo4D,IACjB,KAAM,iB1CqqjBV,OAAOpnD,G0CnqjBf,MAN8BjX,GAAA9tC,UAAAosG,EAAAzmD,GAM9BymD,GAN8BC,EAAjB3xG,GAAA0xG,Y1CkrjBP,SAAUzxG,EAAQD,EAASH,GAEjC,Y2ChyjBA,IAAA4K,GAAA5K,EAAA,GAAA4K,OAEAgoG,EAAA5yG,EAAA,IACA2yG,EAAA3yG,EAAA,IACA6yG,EAAA7yG,EAAA,IAEAgyG,IAEApnG,GAAAonG,EAAAY,EAAAD,EAAAE,GAEAzyG,EAAAD,QAAA6xG,G3CyyjBM,SAAU5xG,EAAQD,EAASH,GAEjC,Y4CjsjBA,SAAA8yG,GAAA70F,GACA,KAAArZ,eAAAkuG,IAAA,UAAAA,GAAA70F,EAEArZ,MAAAqZ,QAAApQ,EAAAjD,QACAqd,MAAAk1B,EACA41D,OAAAn1D,EACAo1D,UAAA,MACAC,WAAA,GACAC,SAAA,EACAC,SAAA31D,EACA41D,GAAA,IACGn1F,MAEH,IAAAH,GAAAlZ,KAAAqZ,OAEAH,GAAA88E,KAAA98E,EAAAm1F,WAAA,EACAn1F,EAAAm1F,YAAAn1F,EAAAm1F,WAGAn1F,EAAAu1F,MAAAv1F,EAAAm1F,WAAA,GAAAn1F,EAAAm1F,WAAA,KACAn1F,EAAAm1F,YAAA,IAGAruG,KAAAmrB,IAAA,EACAnrB,KAAA6qB,IAAA,GACA7qB,KAAA0uG,OAAA,EACA1uG,KAAAsH,UAEAtH,KAAA2uG,KAAA,GAAAh4D,GACA32C,KAAA2uG,KAAAz3D,UAAA,CAEA,IAAAsrC,GAAAosB,EAAAC,aACA7uG,KAAA2uG,KACAz1F,EAAAmK,MACAnK,EAAAi1F,OACAj1F,EAAAm1F,WACAn1F,EAAAo1F,SACAp1F,EAAAq1F,SAGA,IAAA/rB,IAAA3qC,EACA,SAAA/b,OAAAjR,EAAA23D,GAOA,IAJAtpE,EAAA41F,QACAF,EAAAG,iBAAA/uG,KAAA2uG,KAAAz1F,EAAA41F,QAGA51F,EAAA81F,WAAA,CACA,GAAAC,EAaA,IATAA,EAFA,gBAAA/1F,GAAA81F,WAEAE,EAAAl5D,WAAA98B,EAAA81F,YACK,yBAAA7yF,EAAAxgB,KAAAud,EAAA81F,YACL,GAAA9oG,YAAAgT,EAAA81F,YAEA91F,EAAA81F,YAGAxsB,EAAAosB,EAAAO,qBAAAnvG,KAAA2uG,KAAAM,MAEAp3D,EACA,SAAA/b,OAAAjR,EAAA23D,GAGAxiF,MAAAovG,WAAA,GAyKA,QAAApB,GAAAp3D,EAAAv9B,GACA,GAAAg2F,GAAA,GAAAnB,GAAA70F,EAKA,IAHAg2F,EAAA/qG,KAAAsyC,GAAA,GAGAy4D,EAAAlkF,IAAqB,KAAAkkF,GAAAxkF,OAAAwkF,EAAAlkF,IAErB,OAAAkkF,GAAAhsG,OAYA,QAAAisG,GAAA14D,EAAAv9B,GAGA,MAFAA,SACAA,EAAA28E,KAAA,EACAgY,EAAAp3D,EAAAv9B,GAYA,QAAAo1F,GAAA73D,EAAAv9B,GAGA,MAFAA,SACAA,EAAAo1F,MAAA,EACAT,EAAAp3D,EAAAv9B,GArYA,GAAAu1F,GAAAxzG,EAAA,IACA6N,EAAA7N,EAAA,GACA8zG,EAAA9zG,EAAA,IACAyvB,EAAAzvB,EAAA,GACAu7C,EAAAv7C,EAAA,IAEA+gB,EAAAjgB,OAAAS,UAAAwf,SAQA07B,EAAA,EAIAU,GAAA,EAEAK,EAAA,EAEAI,EAAA,CAiMAk1D,GAAAvxG,UAAA2H,KAAA,SAAA+I,EAAAkiG,GACA,GAEA/sB,GAAAgtB,EAFAb,EAAA3uG,KAAA2uG,KACAP,EAAApuG,KAAAqZ,QAAA+0F,SAGA,IAAApuG,KAAA0uG,MAAmB,QAEnBc,GAAAD,WAAA,IAAAA,EAlNA,EADA,EAsNA,gBAAAliG,GAEAshG,EAAA/3D,MAAAs4D,EAAAl5D,WAAA3oC,GACG,yBAAA8O,EAAAxgB,KAAA0R,GACHshG,EAAA/3D,MAAA,GAAA1wC,YAAAmH,GAEAshG,EAAA/3D,MAAAvpC,EAGAshG,EAAA93D,QAAA,EACA83D,EAAA73D,SAAA63D,EAAA/3D,MAAAt1C,MAEA,IAQA,GAPA,IAAAqtG,EAAAz3D,YACAy3D,EAAA33D,OAAA,GAAA/tC,GAAArB,KAAAwmG,GACAO,EAAA13D,SAAA,EACA03D,EAAAz3D,UAAAk3D,GAlOA,KAoOA5rB,EAAAosB,EAAAZ,QAAAW,EAAAa,KAEAhtB,IAAA3qC,EAGA,MAFA73C,MAAAyvG,MAAAjtB,GACAxiF,KAAA0uG,OAAA,GACA,CAEA,KAAAC,EAAAz3D,YAAA,IAAAy3D,EAAA73D,UA9OA,IA8OA04D,GA1OA,IA0OAA,KACA,WAAAxvG,KAAAqZ,QAAAm1F,GACAxuG,KAAA0vG,OAAAR,EAAAx5D,cAAAzsC,EAAAxC,UAAAkoG,EAAA33D,OAAA23D,EAAA13D,YAEAj3C,KAAA0vG,OAAAzmG,EAAAxC,UAAAkoG,EAAA33D,OAAA23D,EAAA13D,mBAGG03D,EAAA73D,SAAA,OAAA63D,EAAAz3D,YAlPH,IAkPGsrC,EAGH,OAxPA,KAwPAgtB,GACAhtB,EAAAosB,EAAAe,WAAA3vG,KAAA2uG,MACA3uG,KAAAyvG,MAAAjtB,GACAxiF,KAAA0uG,OAAA,EACAlsB,IAAA3qC,GAxPA,IA4PA23D,IACAxvG,KAAAyvG,MAAA53D,GACA82D,EAAAz3D,UAAA,GACA,IAgBAg3D,EAAAvxG,UAAA+yG,OAAA,SAAAloG,GACAxH,KAAAsH,OAAAhD,KAAAkD,IAcA0mG,EAAAvxG,UAAA8yG,MAAA,SAAAjtB,GAEAA,IAAA3qC,IACA,WAAA73C,KAAAqZ,QAAAm1F,GACAxuG,KAAAqD,OAAArD,KAAAsH,OAAAyQ,KAAA,IAEA/X,KAAAqD,OAAA4F,EAAA5B,cAAArH,KAAAsH,SAGAtH,KAAAsH,UACAtH,KAAAmrB,IAAAq3D,EACAxiF,KAAA6qB,IAAA7qB,KAAA2uG,KAAA9jF,KAgFAtvB,EAAA2yG,UACA3yG,EAAAyyG,UACAzyG,EAAA+zG,aACA/zG,EAAAkzG,Q5C8zjBM,SAAUjzG,EAAQD,EAASH,GAEjC,Y6CnlkBA,SAAA+vB,GAAAwjF,EAAAiB,GAEA,MADAjB,GAAA9jF,MAAA+kF,GACAA,EAGA,QAAAC,GAAA/rG,GACA,uBAGA,QAAAgsG,GAAAppG,GAA0C,IAAtB,GAAAQ,GAAAR,EAAApF,SAAsB4F,GAAA,GAAqBR,EAAAQ,GAAA,EAS/D,QAAA6oG,GAAApB,GACA,GAAA7xG,GAAA6xG,EAAAv3D,MAGAlwC,EAAApK,EAAAkzG,OACA9oG,GAAAynG,EAAAz3D,YACAhwC,EAAAynG,EAAAz3D,WAEA,IAAAhwC,IAEA+B,EAAAnC,SAAA6nG,EAAA33D,OAAAl6C,EAAAmzG,YAAAnzG,EAAAozG,YAAAhpG,EAAAynG,EAAA13D,UACA03D,EAAA13D,UAAA/vC,EACApK,EAAAozG,aAAAhpG,EACAynG,EAAAx3D,WAAAjwC,EACAynG,EAAAz3D,WAAAhwC,EACApK,EAAAkzG,SAAA9oG,EACA,IAAApK,EAAAkzG,UACAlzG,EAAAozG,YAAA,IAKA,QAAAC,GAAArzG,EAAAszG,GACAC,EAAAC,gBAAAxzG,IAAAyzG,aAAA,EAAAzzG,EAAAyzG,aAAA,EAAAzzG,EAAA0zG,SAAA1zG,EAAAyzG,YAAAH,GACAtzG,EAAAyzG,YAAAzzG,EAAA0zG,SACAT,EAAAjzG,EAAA6xG,MAIA,QAAA8B,GAAA3zG,EAAA2D,GACA3D,EAAAmzG,YAAAnzG,EAAAkzG,WAAAvvG,EASA,QAAAiwG,GAAA5zG,EAAA2D,GAGA3D,EAAAmzG,YAAAnzG,EAAAkzG,WAAAvvG,IAAA,MACA3D,EAAAmzG,YAAAnzG,EAAAkzG,WAAA,IAAAvvG,EAWA,QAAAkwG,GAAAhC,EAAAjoG,EAAAu3B,EAAAt3B,GACA,GAAAO,GAAAynG,EAAA73D,QAGA,OADA5vC,GAAAP,IAAmBO,EAAAP,GACnB,IAAAO,EAAkB,GAElBynG,EAAA73D,UAAA5vC,EAGA+B,EAAAnC,SAAAJ,EAAAioG,EAAA/3D,MAAA+3D,EAAA93D,QAAA3vC,EAAA+2B,GACA,IAAA0wE,EAAAv3D,MAAAx0B,KACA+rF,EAAAx5D,MAAAD,EAAAy5D,EAAAx5D,MAAAzuC,EAAAQ,EAAA+2B,GAGA,IAAA0wE,EAAAv3D,MAAAx0B,OACA+rF,EAAAx5D,MAAAG,EAAAq5D,EAAAx5D,MAAAzuC,EAAAQ,EAAA+2B,IAGA0wE,EAAA93D,SAAA3vC,EACAynG,EAAA53D,UAAA7vC,EAEAA,GAaA,QAAA0pG,GAAA9zG,EAAA+zG,GACA,GAEAviD,GACApnD,EAHA4pG,EAAAh0G,EAAAi0G,iBACAC,EAAAl0G,EAAA0zG,SAGAS,EAAAn0G,EAAAo0G,YACAC,EAAAr0G,EAAAq0G,WACAC,EAAAt0G,EAAA0zG,SAAA1zG,EAAAu0G,OAAAC,GACAx0G,EAAA0zG,UAAA1zG,EAAAu0G,OAAAC,IAAA,EAEAC,EAAAz0G,EAAA0U,OAEAggG,EAAA10G,EAAA20G,OACAC,EAAA50G,EAAA40G,KAMAC,EAAA70G,EAAA0zG,SAAAoB,GACAC,EAAAN,EAAAP,EAAAC,EAAA,GACAa,EAAAP,EAAAP,EAAAC,EAQAn0G,GAAAo0G,aAAAp0G,EAAAi1G,aACAjB,IAAA,GAKAK,EAAAr0G,EAAAk1G,YAAiCb,EAAAr0G,EAAAk1G,UAIjC,IAaA,GAXA1jD,EAAAuiD,EAWAU,EAAAjjD,EAAA2iD,KAAAa,GACAP,EAAAjjD,EAAA2iD,EAAA,KAAAY,GACAN,EAAAjjD,KAAAijD,EAAAP,IACAO,IAAAjjD,KAAAijD,EAAAP,EAAA,GAHA,CAaAA,GAAA,EACA1iD,GAMA,WAEKijD,IAAAP,KAAAO,IAAAjjD,IAAAijD,IAAAP,KAAAO,IAAAjjD,IACLijD,IAAAP,KAAAO,IAAAjjD,IAAAijD,IAAAP,KAAAO,IAAAjjD,IACAijD,IAAAP,KAAAO,IAAAjjD,IAAAijD,IAAAP,KAAAO,IAAAjjD,IACAijD,IAAAP,KAAAO,IAAAjjD,IAAAijD,IAAAP,KAAAO,IAAAjjD,IACA0iD,EAAAW,EAOA,IAHAzqG,EAAA0qG,IAAAD,EAAAX,GACAA,EAAAW,EAAAC,GAEA1qG,EAAA+pG,EAAA,CAGA,GAFAn0G,EAAAm1G,YAAApB,EACAI,EAAA/pG,EACAA,GAAAiqG,EACA,KAEAU,GAAAN,EAAAP,EAAAC,EAAA,GACAa,EAAAP,EAAAP,EAAAC,YAEGJ,EAAAa,EAAAb,EAAAW,IAAAJ,GAAA,KAAAN,EAEH,OAAAG,IAAAn0G,EAAAk1G,UACAf,EAEAn0G,EAAAk1G,UAcA,QAAAE,GAAAp1G,GACA,GACAD,GAAAN,EAAAX,EAAAu2G,EAAA1hE,EADA2hE,EAAAt1G,EAAAu0G,MAKA,IAqBA,GApBAc,EAAAr1G,EAAAu1G,YAAAv1G,EAAAk1G,UAAAl1G,EAAA0zG,SAoBA1zG,EAAA0zG,UAAA4B,KAAAd,IAAA,CAEAroG,EAAAnC,SAAAhK,EAAA0U,OAAA1U,EAAA0U,OAAA4gG,IAAA,GACAt1G,EAAAm1G,aAAAG,EACAt1G,EAAA0zG,UAAA4B,EAEAt1G,EAAAyzG,aAAA6B,EASA71G,EAAAO,EAAAw1G,UACAz1G,EAAAN,CACA,IACAX,EAAAkB,EAAAy1G,OAAA11G,GACAC,EAAAy1G,KAAA11G,GAAAjB,GAAAw2G,EAAAx2G,EAAAw2G,EAAA,UACO71G,EAEPA,GAAA61G,EACAv1G,EAAAN,CACA,IACAX,EAAAkB,EAAA40G,OAAA70G,GACAC,EAAA40G,KAAA70G,GAAAjB,GAAAw2G,EAAAx2G,EAAAw2G,EAAA,UAIO71G,EAEP41G,IAAAC,EAEA,OAAAt1G,EAAA6xG,KAAA73D,SACA,KAmBA,IAJAv6C,EAAAo0G,EAAA7zG,EAAA6xG,KAAA7xG,EAAA0U,OAAA1U,EAAA0zG,SAAA1zG,EAAAk1G,UAAAG,GACAr1G,EAAAk1G,WAAAz1G,EAGAO,EAAAk1G,UAAAl1G,EAAA01G,QAAAC,GASA,IARAhiE,EAAA3zC,EAAA0zG,SAAA1zG,EAAA01G,OACA11G,EAAA41G,MAAA51G,EAAA0U,OAAAi/B,GAGA3zC,EAAA41G,OAAA51G,EAAA41G,OAAA51G,EAAA61G,WAAA71G,EAAA0U,OAAAi/B,EAAA,IAAA3zC,EAAA81G,UAIA91G,EAAA01G,SAEA11G,EAAA41G,OAAA51G,EAAA41G,OAAA51G,EAAA61G,WAAA71G,EAAA0U,OAAAi/B,EAAAgiE,GAAA,IAAA31G,EAAA81G,UAEA91G,EAAA40G,KAAAjhE,EAAA3zC,EAAA20G,QAAA30G,EAAAy1G,KAAAz1G,EAAA41G,OACA51G,EAAAy1G,KAAAz1G,EAAA41G,OAAAjiE,EACAA,IACA3zC,EAAA01G,WACA11G,EAAAk1G,UAAAl1G,EAAA01G,OAAAC,cASG31G,EAAAk1G,UAAAV,IAAA,IAAAx0G,EAAA6xG,KAAA73D,UAiDH,QAAA+7D,GAAA/1G,EAAAg2G,GAIA,GAAAC,GAAA,KAOA,KALAA,EAAAj2G,EAAAk2G,iBAAA,IACAD,EAAAj2G,EAAAk2G,iBAAA,KAIS,CAET,GAAAl2G,EAAAk1G,WAAA,GAUA,GADAE,EAAAp1G,GACA,IAAAA,EAAAk1G,WAAAc,IAAAx7D,EACA,MAAA27D,GAGA,QAAAn2G,EAAAk1G,UACA,MAOAl1G,EAAA0zG,UAAA1zG,EAAAk1G,UACAl1G,EAAAk1G,UAAA,CAGA,IAAAkB,GAAAp2G,EAAAyzG,YAAAwC,CAEA,SAAAj2G,EAAA0zG,UAAA1zG,EAAA0zG,UAAA0C,KAEAp2G,EAAAk1G,UAAAl1G,EAAA0zG,SAAA0C,EACAp2G,EAAA0zG,SAAA0C,EAEA/C,EAAArzG,GAAA,GACA,IAAAA,EAAA6xG,KAAAz3D,WACA,MAAA+7D,GASA,IAAAn2G,EAAA0zG,SAAA1zG,EAAAyzG,aAAAzzG,EAAAu0G,OAAAC,KAEAnB,EAAArzG,GAAA,GACA,IAAAA,EAAA6xG,KAAAz3D,WACA,MAAA+7D,IAQA,MAFAn2G,GAAA01G,OAAA,EAEAM,IAAAp7D,GAEAy4D,EAAArzG,GAAA,GACA,IAAAA,EAAA6xG,KAAAz3D,UACAi8D,GAGAC,KAGAt2G,EAAA0zG,SAAA1zG,EAAAyzG,cAEAJ,EAAArzG,GAAA,GACAA,EAAA6xG,KAAAz3D,WACA+7D,IAeA,QAAAI,GAAAv2G,EAAAg2G,GAIA,IAHA,GAAAQ,GACAC,IAES,CAMT,GAAAz2G,EAAAk1G,UAAAV,GAAA,CAEA,GADAY,EAAAp1G,GACAA,EAAAk1G,UAAAV,IAAAwB,IAAAx7D,EACA,MAAA27D,GAEA,QAAAn2G,EAAAk1G,UACA,MA2BA,GApBAsB,EAAA,EACAx2G,EAAAk1G,WAAAS,KAEA31G,EAAA41G,OAAA51G,EAAA41G,OAAA51G,EAAA61G,WAAA71G,EAAA0U,OAAA1U,EAAA0zG,SAAAiC,GAAA,IAAA31G,EAAA81G,UACAU,EAAAx2G,EAAA40G,KAAA50G,EAAA0zG,SAAA1zG,EAAA20G,QAAA30G,EAAAy1G,KAAAz1G,EAAA41G,OACA51G,EAAAy1G,KAAAz1G,EAAA41G,OAAA51G,EAAA0zG,UAOA,IAAA8C,GAAAx2G,EAAA0zG,SAAA8C,GAAAx2G,EAAAu0G,OAAAC,KAKAx0G,EAAA02G,aAAA5C,EAAA9zG,EAAAw2G,IAGAx2G,EAAA02G,cAAAf,GAYA,GAPAc,EAAAlD,EAAAoD,UAAA32G,IAAA0zG,SAAA1zG,EAAAm1G,YAAAn1G,EAAA02G,aAAAf,IAEA31G,EAAAk1G,WAAAl1G,EAAA02G,aAKA12G,EAAA02G,cAAA12G,EAAA42G,gBAAA52G,EAAAk1G,WAAAS,GAAA,CACA31G,EAAA02G,cACA,IACA12G,EAAA0zG,WAEA1zG,EAAA41G,OAAA51G,EAAA41G,OAAA51G,EAAA61G,WAAA71G,EAAA0U,OAAA1U,EAAA0zG,SAAAiC,GAAA,IAAA31G,EAAA81G,UACAU,EAAAx2G,EAAA40G,KAAA50G,EAAA0zG,SAAA1zG,EAAA20G,QAAA30G,EAAAy1G,KAAAz1G,EAAA41G,OACA51G,EAAAy1G,KAAAz1G,EAAA41G,OAAA51G,EAAA0zG,eAKS,KAAA1zG,EAAA02G,aACT12G,GAAA0zG,eAGA1zG,GAAA0zG,UAAA1zG,EAAA02G,aACA12G,EAAA02G,aAAA,EACA12G,EAAA41G,MAAA51G,EAAA0U,OAAA1U,EAAA0zG,UAEA1zG,EAAA41G,OAAA51G,EAAA41G,OAAA51G,EAAA61G,WAAA71G,EAAA0U,OAAA1U,EAAA0zG,SAAA,IAAA1zG,EAAA81G,cAaAW,GAAAlD,EAAAoD,UAAA32G,EAAA,EAAAA,EAAA0U,OAAA1U,EAAA0zG,WAEA1zG,EAAAk1G,YACAl1G,EAAA0zG,UAEA,IAAA+C,IAEApD,EAAArzG,GAAA,GACA,IAAAA,EAAA6xG,KAAAz3D,WACA,MAAA+7D,IAMA,MADAn2G,GAAA01G,OAAA11G,EAAA0zG,SAAAiC,GAAA,EAAA31G,EAAA0zG,SAAAiC,GAAA,EACAK,IAAAp7D,GAEAy4D,EAAArzG,GAAA,GACA,IAAAA,EAAA6xG,KAAAz3D,UACAi8D,GAGAC,IAEAt2G,EAAA62G,WAEAxD,EAAArzG,GAAA,GACA,IAAAA,EAAA6xG,KAAAz3D,WACA+7D,GAIAW,GAQA,QAAAC,GAAA/2G,EAAAg2G,GAOA,IANA,GAAAQ,GACAC,EAEAO,IAGS,CAMT,GAAAh3G,EAAAk1G,UAAAV,GAAA,CAEA,GADAY,EAAAp1G,GACAA,EAAAk1G,UAAAV,IAAAwB,IAAAx7D,EACA,MAAA27D,GAEA,QAAAn2G,EAAAk1G,UAA8B,MA0C9B,GApCAsB,EAAA,EACAx2G,EAAAk1G,WAAAS,KAEA31G,EAAA41G,OAAA51G,EAAA41G,OAAA51G,EAAA61G,WAAA71G,EAAA0U,OAAA1U,EAAA0zG,SAAAiC,GAAA,IAAA31G,EAAA81G,UACAU,EAAAx2G,EAAA40G,KAAA50G,EAAA0zG,SAAA1zG,EAAA20G,QAAA30G,EAAAy1G,KAAAz1G,EAAA41G,OACA51G,EAAAy1G,KAAAz1G,EAAA41G,OAAA51G,EAAA0zG,UAMA1zG,EAAAo0G,YAAAp0G,EAAA02G,aACA12G,EAAAi3G,WAAAj3G,EAAAm1G,YACAn1G,EAAA02G,aAAAf,GAAA,EAEA,IAAAa,GAAAx2G,EAAAo0G,YAAAp0G,EAAA42G,gBACA52G,EAAA0zG,SAAA8C,GAAAx2G,EAAAu0G,OAAAC,KAKAx0G,EAAA02G,aAAA5C,EAAA9zG,EAAAw2G,GAGAx2G,EAAA02G,cAAA,IACA12G,EAAAyxG,WAAA/1D,GAAA17C,EAAA02G,eAAAf,IAAA31G,EAAA0zG,SAAA1zG,EAAAm1G,YAAA,QAKAn1G,EAAA02G,aAAAf,GAAA,IAMA31G,EAAAo0G,aAAAuB,IAAA31G,EAAA02G,cAAA12G,EAAAo0G,YAAA,CACA4C,EAAAh3G,EAAA0zG,SAAA1zG,EAAAk1G,UAAAS,GAOAc,EAAAlD,EAAAoD,UAAA32G,IAAA0zG,SAAA,EAAA1zG,EAAAi3G,WAAAj3G,EAAAo0G,YAAAuB,IAMA31G,EAAAk1G,WAAAl1G,EAAAo0G,YAAA,EACAp0G,EAAAo0G,aAAA,CACA,MACAp0G,EAAA0zG,UAAAsD,IAEAh3G,EAAA41G,OAAA51G,EAAA41G,OAAA51G,EAAA61G,WAAA71G,EAAA0U,OAAA1U,EAAA0zG,SAAAiC,GAAA,IAAA31G,EAAA81G,UACAU,EAAAx2G,EAAA40G,KAAA50G,EAAA0zG,SAAA1zG,EAAA20G,QAAA30G,EAAAy1G,KAAAz1G,EAAA41G,OACA51G,EAAAy1G,KAAAz1G,EAAA41G,OAAA51G,EAAA0zG,gBAGO,KAAA1zG,EAAAo0G,YAKP,IAJAp0G,EAAAk3G,gBAAA,EACAl3G,EAAA02G,aAAAf,GAAA,EACA31G,EAAA0zG,WAEA+C,IAEApD,EAAArzG,GAAA,GACA,IAAAA,EAAA6xG,KAAAz3D,WACA,MAAA+7D,QAKK,IAAAn2G,EAAAk3G,iBAgBL,GATAT,EAAAlD,EAAAoD,UAAA32G,EAAA,EAAAA,EAAA0U,OAAA1U,EAAA0zG,SAAA,IAEA+C,GAEApD,EAAArzG,GAAA,GAGAA,EAAA0zG,WACA1zG,EAAAk1G,YACA,IAAAl1G,EAAA6xG,KAAAz3D,UACA,MAAA+7D,QAMAn2G,GAAAk3G,gBAAA,EACAl3G,EAAA0zG,WACA1zG,EAAAk1G,YAYA,MARAl1G,GAAAk3G,kBAGAT,EAAAlD,EAAAoD,UAAA32G,EAAA,EAAAA,EAAA0U,OAAA1U,EAAA0zG,SAAA,IAEA1zG,EAAAk3G,gBAAA,GAEAl3G,EAAA01G,OAAA11G,EAAA0zG,SAAAiC,GAAA,EAAA31G,EAAA0zG,SAAAiC,GAAA,EACAK,IAAAp7D,GAEAy4D,EAAArzG,GAAA,GACA,IAAAA,EAAA6xG,KAAAz3D,UACAi8D,GAGAC,IAEAt2G,EAAA62G,WAEAxD,EAAArzG,GAAA,GACA,IAAAA,EAAA6xG,KAAAz3D,WACA+7D,GAKAW,GASA,QAAAK,GAAAn3G,EAAAg2G,GAOA,IANA,GAAAS,GACA7B,EACAV,EAAAW,EAEAJ,EAAAz0G,EAAA0U,SAES,CAKT,GAAA1U,EAAAk1G,WAAAJ,GAAA,CAEA,GADAM,EAAAp1G,GACAA,EAAAk1G,WAAAJ,IAAAkB,IAAAx7D,EACA,MAAA27D,GAEA,QAAAn2G,EAAAk1G,UAA8B,MAK9B,GADAl1G,EAAA02G,aAAA,EACA12G,EAAAk1G,WAAAS,IAAA31G,EAAA0zG,SAAA,IACAQ,EAAAl0G,EAAA0zG,SAAA,GACAkB,EAAAH,EAAAP,MACAO,IAAAP,IAAAU,IAAAH,IAAAP,IAAAU,IAAAH,IAAAP,IAAA,CACAW,EAAA70G,EAAA0zG,SAAAoB,EACA,WAESF,IAAAH,IAAAP,IAAAU,IAAAH,IAAAP,IACTU,IAAAH,IAAAP,IAAAU,IAAAH,IAAAP,IACAU,IAAAH,IAAAP,IAAAU,IAAAH,IAAAP,IACAU,IAAAH,IAAAP,IAAAU,IAAAH,IAAAP,IACAA,EAAAW,EACA70G,GAAA02G,aAAA5B,IAAAD,EAAAX,GACAl0G,EAAA02G,aAAA12G,EAAAk1G,YACAl1G,EAAA02G,aAAA12G,EAAAk1G,WAyBA,GAlBAl1G,EAAA02G,cAAAf,IAIAc,EAAAlD,EAAAoD,UAAA32G,EAAA,EAAAA,EAAA02G,aAAAf,IAEA31G,EAAAk1G,WAAAl1G,EAAA02G,aACA12G,EAAA0zG,UAAA1zG,EAAA02G,aACA12G,EAAA02G,aAAA,IAKAD,EAAAlD,EAAAoD,UAAA32G,EAAA,EAAAA,EAAA0U,OAAA1U,EAAA0zG,WAEA1zG,EAAAk1G,YACAl1G,EAAA0zG,YAEA+C,IAEApD,EAAArzG,GAAA,GACA,IAAAA,EAAA6xG,KAAAz3D,WACA,MAAA+7D,IAMA,MADAn2G,GAAA01G,OAAA,EACAM,IAAAp7D,GAEAy4D,EAAArzG,GAAA,GACA,IAAAA,EAAA6xG,KAAAz3D,UACAi8D,GAGAC,IAEAt2G,EAAA62G,WAEAxD,EAAArzG,GAAA,GACA,IAAAA,EAAA6xG,KAAAz3D,WACA+7D,GAIAW,GAOA,QAAAM,GAAAp3G,EAAAg2G,GAGA,IAFA,GAAAS,KAES,CAET,OAAAz2G,EAAAk1G,YACAE,EAAAp1G,GACA,IAAAA,EAAAk1G,WAAA,CACA,GAAAc,IAAAx7D,EACA,MAAA27D,GAEA,OAWA,GANAn2G,EAAA02G,aAAA,EAGAD,EAAAlD,EAAAoD,UAAA32G,EAAA,EAAAA,EAAA0U,OAAA1U,EAAA0zG,WACA1zG,EAAAk1G,YACAl1G,EAAA0zG,WACA+C,IAEApD,EAAArzG,GAAA,GACA,IAAAA,EAAA6xG,KAAAz3D,WACA,MAAA+7D,IAMA,MADAn2G,GAAA01G,OAAA,EACAM,IAAAp7D,GAEAy4D,EAAArzG,GAAA,GACA,IAAAA,EAAA6xG,KAAAz3D,UACAi8D,GAGAC,IAEAt2G,EAAA62G,WAEAxD,EAAArzG,GAAA,GACA,IAAAA,EAAA6xG,KAAAz3D,WACA+7D,GAIAW,GAQA,QAAAO,GAAAC,EAAAC,EAAAC,EAAAC,EAAAjnE,GACAttC,KAAAo0G,cACAp0G,KAAAq0G,WACAr0G,KAAAs0G,cACAt0G,KAAAu0G,YACAv0G,KAAAstC,OAwBA,QAAAknE,GAAA13G,GACAA,EAAAu1G,YAAA,EAAAv1G,EAAAu0G,OAGAvB,EAAAhzG,EAAAy1G,MAIAz1G,EAAA42G,eAAAe,EAAA33G,EAAAumB,OAAAgxF,SACAv3G,EAAAi1G,WAAA0C,EAAA33G,EAAAumB,OAAA+wF,YACAt3G,EAAAq0G,WAAAsD,EAAA33G,EAAAumB,OAAAixF,YACAx3G,EAAAi0G,iBAAA0D,EAAA33G,EAAAumB,OAAAkxF,UAEAz3G,EAAA0zG,SAAA,EACA1zG,EAAAyzG,YAAA,EACAzzG,EAAAk1G,UAAA,EACAl1G,EAAA01G,OAAA,EACA11G,EAAA02G,aAAA12G,EAAAo0G,YAAAuB,GAAA,EACA31G,EAAAk3G,gBAAA,EACAl3G,EAAA41G,MAAA,EAIA,QAAAgC,KACA10G,KAAA2uG,KAAA,KACA3uG,KAAAwiF,OAAA,EACAxiF,KAAAiwG,YAAA,KACAjwG,KAAAgzG,iBAAA,EACAhzG,KAAAkwG,YAAA,EACAlwG,KAAAgwG,QAAA,EACAhwG,KAAA4iB,KAAA,EACA5iB,KAAA20G,OAAA,KACA30G,KAAA40G,QAAA,EACA50G,KAAAmuG,OAAAn1D,EACAh5C,KAAA60G,YAAA,EAEA70G,KAAAqxG,OAAA,EACArxG,KAAA80G,OAAA,EACA90G,KAAAyxG,OAAA,EAEAzxG,KAAAwR,OAAA,KAQAxR,KAAAqyG,YAAA,EAKAryG,KAAA0xG,KAAA,KAMA1xG,KAAAuyG,KAAA,KAEAvyG,KAAA0yG,MAAA,EACA1yG,KAAAsyG,UAAA,EACAtyG,KAAA+0G,UAAA,EACA/0G,KAAA4yG,UAAA,EAEA5yG,KAAA2yG,WAAA,EAOA3yG,KAAAuwG,YAAA,EAKAvwG,KAAAwzG,aAAA,EACAxzG,KAAA+zG,WAAA,EACA/zG,KAAAg0G,gBAAA,EACAh0G,KAAAwwG,SAAA,EACAxwG,KAAAiyG,YAAA,EACAjyG,KAAAgyG,UAAA,EAEAhyG,KAAAkxG,YAAA,EAKAlxG,KAAA+wG,iBAAA,EAMA/wG,KAAA0zG,eAAA,EAYA1zG,KAAAqjB,MAAA,EACArjB,KAAAuuG,SAAA,EAEAvuG,KAAA+xG,WAAA,EAGA/xG,KAAAmxG,WAAA,EAYAnxG,KAAAg1G,UAAA,GAAA/rG,GAAApB,MAAA,EAAAotG,IACAj1G,KAAAk1G,UAAA,GAAAjsG,GAAApB,MAAA,KAAAstG,GAAA,IACAn1G,KAAAo1G,QAAA,GAAAnsG,GAAApB,MAAA,KAAAwtG,GAAA,IACAvF,EAAA9vG,KAAAg1G,WACAlF,EAAA9vG,KAAAk1G,WACApF,EAAA9vG,KAAAo1G,SAEAp1G,KAAAs1G,OAAA,KACAt1G,KAAAu1G,OAAA,KACAv1G,KAAAw1G,QAAA,KAGAx1G,KAAAy1G,SAAA,GAAAxsG,GAAApB,MAAA6tG,GAAA,GAIA11G,KAAA21G,KAAA,GAAA1sG,GAAApB,MAAA,EAAA+tG,GAAA,GACA9F,EAAA9vG,KAAA21G,MAEA31G,KAAA61G,SAAA,EACA71G,KAAA81G,SAAA,EAKA91G,KAAAwpB,MAAA,GAAAvgB,GAAApB,MAAA,EAAA+tG,GAAA,GACA9F,EAAA9vG,KAAAwpB,OAIAxpB,KAAA+1G,MAAA,EAEA/1G,KAAAg2G,YAAA,EAoBAh2G,KAAA2zG,SAAA,EAEA3zG,KAAAi2G,MAAA,EAMAj2G,KAAAk2G,QAAA,EACAl2G,KAAAm2G,WAAA,EACAn2G,KAAAo2G,QAAA,EACAp2G,KAAAwyG,OAAA,EAGAxyG,KAAAq2G,OAAA,EAIAr2G,KAAAs2G,SAAA,EAgBA,QAAAC,GAAA5H,GACA,GAAA7xG,EAEA,OAAA6xG,MAAAv3D,OAIAu3D,EAAA53D,SAAA43D,EAAAx3D,UAAA,EACAw3D,EAAAt3D,UAAA0B,EAEAj8C,EAAA6xG,EAAAv3D,MACAt6C,EAAAkzG,QAAA,EACAlzG,EAAAozG,YAAA,EAEApzG,EAAA8lB,KAAA,IACA9lB,EAAA8lB,MAAA9lB,EAAA8lB,MAGA9lB,EAAA0lF,OAAA1lF,EAAA8lB,KAAA4zF,GAAAC,GACA9H,EAAAx5D,MAAA,IAAAr4C,EAAA8lB,KACA,EAEA,EACA9lB,EAAA+3G,WAAAv9D,EACA+4D,EAAAqG,SAAA55G,GACA+6C,GArBA1sB,EAAAwjF,EAAA12D,GAyBA,QAAA0+D,GAAAhI,GACA,GAAAiI,GAAAL,EAAA5H,EAIA,OAHAiI,KAAA/+D,GACA28D,EAAA7F,EAAAv3D,OAEAw/D,EAIA,QAAA7H,GAAAJ,EAAA4D,GACA,MAAA5D,MAAAv3D,MACA,IAAAu3D,EAAAv3D,MAAAx0B,KAA8Bq1B,GAC9B02D,EAAAv3D,MAAAu9D,OAAApC,EACA16D,GAH6BI,EAO7B,QAAA42D,GAAAF,EAAAtrF,EAAA8qF,EAAAE,EAAAC,EAAAC,GACA,IAAAI,EACA,MAAA12D,EAEA,IAAAr1B,GAAA,CAiBA,IAfAS,IAAAk1B,IACAl1B,EAAA,GAGAgrF,EAAA,GACAzrF,EAAA,EACAyrF,MAGAA,EAAA,KACAzrF,EAAA,EACAyrF,GAAA,IAIAC,EAAA,GAAAA,EAAAuI,GAAA1I,IAAAn1D,GACAq1D,EAAA,GAAAA,EAAA,IAAAhrF,EAAA,GAAAA,EAAA,GACAkrF,EAAA,GAAAA,EAAA51D,EACA,MAAAxtB,GAAAwjF,EAAA12D,EAIA,KAAAo2D,IACAA,EAAA,EAIA,IAAAvxG,GAAA,GAAA43G,EA0CA,OAxCA/F,GAAAv3D,MAAAt6C,EACAA,EAAA6xG,OAEA7xG,EAAA8lB,OACA9lB,EAAA63G,OAAA,KACA73G,EAAAg4G,OAAAzG,EACAvxG,EAAAu0G,OAAA,GAAAv0G,EAAAg4G,OACAh4G,EAAA20G,OAAA30G,EAAAu0G,OAAA,EAEAv0G,EAAAi4G,UAAAzG,EAAA,EACAxxG,EAAAw1G,UAAA,GAAAx1G,EAAAi4G,UACAj4G,EAAA81G,UAAA91G,EAAAw1G,UAAA,EACAx1G,EAAA61G,eAAA71G,EAAAi4G,UAAAtC,GAAA,GAAAA,IAEA31G,EAAA0U,OAAA,GAAAvI,GAAArB,KAAA,EAAA9K,EAAAu0G,QACAv0G,EAAAy1G,KAAA,GAAAtpG,GAAApB,MAAA/K,EAAAw1G,WACAx1G,EAAA40G,KAAA,GAAAzoG,GAAApB,MAAA/K,EAAAu0G,QAKAv0G,EAAAk5G,YAAA,GAAA1H,EAAA,EAEAxxG,EAAAk2G,iBAAA,EAAAl2G,EAAAk5G,YAIAl5G,EAAAmzG,YAAA,GAAAhnG,GAAArB,KAAA9K,EAAAk2G,kBAIAl2G,EAAAm5G,MAAA,EAAAn5G,EAAAk5G,YAGAl5G,EAAAi5G,MAAA,EAAAj5G,EAAAk5G,YAEAl5G,EAAAumB,QACAvmB,EAAAyxG,WACAzxG,EAAAqxG,SAEAwI,EAAAhI,GAGA,QAAAmI,GAAAnI,EAAAtrF,GACA,MAAAwrF,GAAAF,EAAAtrF,EAAA21B,EAAA+9D,GAAAC,GAAAp+D,GAIA,QAAAo1D,GAAAW,EAAAmE,GACA,GAAAmE,GAAAn6G,EACAo6G,EAAAC,CAEA,KAAAxI,MAAAv3D,OACA07D,EAAAn7D,GAAAm7D,EAAA,EACA,MAAAnE,GAAAxjF,EAAAwjF,EAAA12D,IAKA,IAFAn7C,EAAA6xG,EAAAv3D,OAEAu3D,EAAA33D,SACA23D,EAAA/3D,OAAA,IAAA+3D,EAAA73D,UACAh6C,EAAA0lF,SAAA40B,IAAAtE,IAAAp7D,EACA,MAAAvsB,GAAAwjF,EAAA,IAAAA,EAAAz3D,UAAAiB,EAAAF,EAQA,IALAn7C,EAAA6xG,OACAsI,EAAAn6G,EAAA+3G,WACA/3G,EAAA+3G,WAAA/B,EAGAh2G,EAAA0lF,SAAAg0B,GAEA,OAAA15G,EAAA8lB,KACA+rF,EAAAx5D,MAAA,EACAs7D,EAAA3zG,EAAA,IACA2zG,EAAA3zG,EAAA,KACA2zG,EAAA3zG,EAAA,GACAA,EAAA63G,QAaAlE,EAAA3zG,KAAA63G,OAAAx6F,KAAA,MACArd,EAAA63G,OAAA0C,KAAA,MACAv6G,EAAA63G,OAAAh3E,MAAA,MACA7gC,EAAA63G,OAAA54G,KAAA,MACAe,EAAA63G,OAAAhjD,QAAA,OAEA8+C,EAAA3zG,EAAA,IAAAA,EAAA63G,OAAA76D,MACA22D,EAAA3zG,IAAA63G,OAAA76D,MAAA,OACA22D,EAAA3zG,IAAA63G,OAAA76D,MAAA,QACA22D,EAAA3zG,IAAA63G,OAAA76D,MAAA,QACA22D,EAAA3zG,EAAA,IAAAA,EAAAumB,MAAA,EACAvmB,EAAAyxG,UAAA91D,GAAA37C,EAAAumB,MAAA,EACA,KACAotF,EAAA3zG,EAAA,IAAAA,EAAA63G,OAAA2C,IACAx6G,EAAA63G,OAAAh3E,OAAA7gC,EAAA63G,OAAAh3E,MAAAr8B,SACAmvG,EAAA3zG,EAAA,IAAAA,EAAA63G,OAAAh3E,MAAAr8B,QACAmvG,EAAA3zG,IAAA63G,OAAAh3E,MAAAr8B,QAAA,QAEAxE,EAAA63G,OAAA0C,OACA1I,EAAAx5D,MAAAG,EAAAq5D,EAAAx5D,MAAAr4C,EAAAmzG,YAAAnzG,EAAAkzG,QAAA,IAEAlzG,EAAA83G,QAAA,EACA93G,EAAA0lF,OAAA+0B,KAlCA9G,EAAA3zG,EAAA,GACA2zG,EAAA3zG,EAAA,GACA2zG,EAAA3zG,EAAA,GACA2zG,EAAA3zG,EAAA,GACA2zG,EAAA3zG,EAAA,GACA2zG,EAAA3zG,EAAA,IAAAA,EAAAumB,MAAA,EACAvmB,EAAAyxG,UAAA91D,GAAA37C,EAAAumB,MAAA,EACA,KACAotF,EAAA3zG,EAAA06G,IACA16G,EAAA0lF,OAAAi0B,QA6BA,CACA,GAAA3H,GAAA91D,GAAAl8C,EAAAg4G,OAAA,SACA2C,GAAA,CAGAA,GADA36G,EAAAyxG,UAAA91D,GAAA37C,EAAAumB,MAAA,EACA,EACOvmB,EAAAumB,MAAA,EACP,EACO,IAAAvmB,EAAAumB,MACP,EAEA,EAEAyrF,GAAA2I,GAAA,EACA,IAAA36G,EAAA0zG,WAA6B1B,GAAA4I,IAC7B5I,GAAA,GAAAA,EAAA,GAEAhyG,EAAA0lF,OAAAi0B,GACA/F,EAAA5zG,EAAAgyG,GAGA,IAAAhyG,EAAA0zG,WACAE,EAAA5zG,EAAA6xG,EAAAx5D,QAAA,IACAu7D,EAAA5zG,EAAA,MAAA6xG,EAAAx5D,QAEAw5D,EAAAx5D,MAAA,EAKA,GAAAr4C,EAAA0lF,SAAA+0B,GACA,GAAAz6G,EAAA63G,OAAAh3E,MAAA,CAGA,IAFAu5E,EAAAp6G,EAAAkzG,QAEAlzG,EAAA83G,SAAA,MAAA93G,EAAA63G,OAAAh3E,MAAAr8B,UACAxE,EAAAkzG,UAAAlzG,EAAAk2G,mBACAl2G,EAAA63G,OAAA0C,MAAAv6G,EAAAkzG,QAAAkH,IACAvI,EAAAx5D,MAAAG,EAAAq5D,EAAAx5D,MAAAr4C,EAAAmzG,YAAAnzG,EAAAkzG,QAAAkH,MAEAnH,EAAApB,GACAuI,EAAAp6G,EAAAkzG,QACAlzG,EAAAkzG,UAAAlzG,EAAAk2G,oBAIAvC,EAAA3zG,EAAA,IAAAA,EAAA63G,OAAAh3E,MAAA7gC,EAAA83G,UACA93G,EAAA83G,SAEA93G,GAAA63G,OAAA0C,MAAAv6G,EAAAkzG,QAAAkH,IACAvI,EAAAx5D,MAAAG,EAAAq5D,EAAAx5D,MAAAr4C,EAAAmzG,YAAAnzG,EAAAkzG,QAAAkH,MAEAp6G,EAAA83G,UAAA93G,EAAA63G,OAAAh3E,MAAAr8B,SACAxE,EAAA83G,QAAA,EACA93G,EAAA0lF,OAAAm1B,QAIA76G,GAAA0lF,OAAAm1B,EAGA,IAAA76G,EAAA0lF,SAAAm1B,GACA,GAAA76G,EAAA63G,OAAA54G,KAAA,CACAm7G,EAAAp6G,EAAAkzG,OAGA,IACA,GAAAlzG,EAAAkzG,UAAAlzG,EAAAk2G,mBACAl2G,EAAA63G,OAAA0C,MAAAv6G,EAAAkzG,QAAAkH,IACAvI,EAAAx5D,MAAAG,EAAAq5D,EAAAx5D,MAAAr4C,EAAAmzG,YAAAnzG,EAAAkzG,QAAAkH,MAEAnH,EAAApB,GACAuI,EAAAp6G,EAAAkzG,QACAlzG,EAAAkzG,UAAAlzG,EAAAk2G,kBAAA,CACAmE,EAAA,CACA,OAKAA,EADAr6G,EAAA83G,QAAA93G,EAAA63G,OAAA54G,KAAAuF,OACA,IAAAxE,EAAA63G,OAAA54G,KAAAs6C,WAAAv5C,EAAA83G,WAEA,EAEAnE,EAAA3zG,EAAAq6G,SACO,IAAAA,EAEPr6G,GAAA63G,OAAA0C,MAAAv6G,EAAAkzG,QAAAkH,IACAvI,EAAAx5D,MAAAG,EAAAq5D,EAAAx5D,MAAAr4C,EAAAmzG,YAAAnzG,EAAAkzG,QAAAkH,MAEA,IAAAC,IACAr6G,EAAA83G,QAAA,EACA93G,EAAA0lF,OAAAo1B,QAIA96G,GAAA0lF,OAAAo1B,EAGA,IAAA96G,EAAA0lF,SAAAo1B,GACA,GAAA96G,EAAA63G,OAAAhjD,QAAA,CACAulD,EAAAp6G,EAAAkzG,OAGA,IACA,GAAAlzG,EAAAkzG,UAAAlzG,EAAAk2G,mBACAl2G,EAAA63G,OAAA0C,MAAAv6G,EAAAkzG,QAAAkH,IACAvI,EAAAx5D,MAAAG,EAAAq5D,EAAAx5D,MAAAr4C,EAAAmzG,YAAAnzG,EAAAkzG,QAAAkH,MAEAnH,EAAApB,GACAuI,EAAAp6G,EAAAkzG,QACAlzG,EAAAkzG,UAAAlzG,EAAAk2G,kBAAA,CACAmE,EAAA,CACA,OAKAA,EADAr6G,EAAA83G,QAAA93G,EAAA63G,OAAAhjD,QAAArwD,OACA,IAAAxE,EAAA63G,OAAAhjD,QAAAtb,WAAAv5C,EAAA83G,WAEA,EAEAnE,EAAA3zG,EAAAq6G,SACO,IAAAA,EAEPr6G,GAAA63G,OAAA0C,MAAAv6G,EAAAkzG,QAAAkH,IACAvI,EAAAx5D,MAAAG,EAAAq5D,EAAAx5D,MAAAr4C,EAAAmzG,YAAAnzG,EAAAkzG,QAAAkH,MAEA,IAAAC,IACAr6G,EAAA0lF,OAAAq1B,QAIA/6G,GAAA0lF,OAAAq1B,EAsBA,IAnBA/6G,EAAA0lF,SAAAq1B,KACA/6G,EAAA63G,OAAA0C,MACAv6G,EAAAkzG,QAAA,EAAAlzG,EAAAk2G,kBACAjD,EAAApB,GAEA7xG,EAAAkzG,QAAA,GAAAlzG,EAAAk2G,mBACAvC,EAAA3zG,EAAA,IAAA6xG,EAAAx5D,OACAs7D,EAAA3zG,EAAA6xG,EAAAx5D,OAAA,OACAw5D,EAAAx5D,MAAA,EACAr4C,EAAA0lF,OAAAi0B,KAIA35G,EAAA0lF,OAAAi0B,IAMA,IAAA35G,EAAAkzG,SAEA,GADAD,EAAApB,GACA,IAAAA,EAAAz3D,UAQA,MADAp6C,GAAA+3G,YAAA,EACAh9D,MAOG,QAAA82D,EAAA73D,UAAA+4D,EAAAiD,IAAAjD,EAAAoH,IACHnE,IAAAp7D,EACA,MAAAvsB,GAAAwjF,EAAAx2D,EAIA,IAAAr7C,EAAA0lF,SAAA40B,IAAA,IAAAzI,EAAA73D,SACA,MAAA3rB,GAAAwjF,EAAAx2D,EAKA,QAAAw2D,EAAA73D,UAAA,IAAAh6C,EAAAk1G,WACAc,IAAAx7D,GAAAx6C,EAAA0lF,SAAA40B,GAAA,CACA,GAAAU,GAAAh7G,EAAAyxG,WAAA91D,EAAAy7D,EAAAp3G,EAAAg2G,GACAh2G,EAAAyxG,WAAA71D,EAAAu7D,EAAAn3G,EAAAg2G,GACA2B,EAAA33G,EAAAumB,OAAAiqB,KAAAxwC,EAAAg2G,EAKA,IAHAgF,IAAA3E,IAAA2E,IAAA1E,KACAt2G,EAAA0lF,OAAA40B,IAEAU,IAAA7E,IAAA6E,IAAA3E,GAKA,MAJA,KAAAxE,EAAAz3D,YACAp6C,EAAA+3G,YAAA,GAGAh9D,CASA,IAAAigE,IAAAlE,KACAd,IAAAv7D,EACA84D,EAAA0H,UAAAj7G,GAEAg2G,IAAAn7D,IAEA04D,EAAA2H,iBAAAl7G,EAAA,QAIAg2G,IAAAr7D,IAEAq4D,EAAAhzG,EAAAy1G,MAEA,IAAAz1G,EAAAk1G,YACAl1G,EAAA0zG,SAAA,EACA1zG,EAAAyzG,YAAA,EACAzzG,EAAA01G,OAAA,KAIAzC,EAAApB,GACA,IAAAA,EAAAz3D,WAEA,MADAp6C,GAAA+3G,YAAA,EACAh9D,EAOA,MAAAi7D,KAAAp7D,EAA2BG,EAC3B/6C,EAAA8lB,MAAA,EAAoBk1B,GAGpB,IAAAh7C,EAAA8lB,MACA6tF,EAAA3zG,EAAA,IAAA6xG,EAAAx5D,OACAs7D,EAAA3zG,EAAA6xG,EAAAx5D,OAAA,OACAs7D,EAAA3zG,EAAA6xG,EAAAx5D,OAAA,QACAs7D,EAAA3zG,EAAA6xG,EAAAx5D,OAAA,QACAs7D,EAAA3zG,EAAA,IAAA6xG,EAAA53D,UACA05D,EAAA3zG,EAAA6xG,EAAA53D,UAAA,OACA05D,EAAA3zG,EAAA6xG,EAAA53D,UAAA,QACA05D,EAAA3zG,EAAA6xG,EAAA53D,UAAA,UAIA25D,EAAA5zG,EAAA6xG,EAAAx5D,QAAA,IACAu7D,EAAA5zG,EAAA,MAAA6xG,EAAAx5D,QAGA46D,EAAApB,GAIA7xG,EAAA8lB,KAAA,IAAmB9lB,EAAA8lB,MAAA9lB,EAAA8lB,MAEnB,IAAA9lB,EAAAkzG,QAAAn4D,EAAAC,GAGA,QAAA63D,GAAAhB,GACA,GAAAnsB,EAEA,OAAAmsB,MAAAv3D,OAIAorC,EAAAmsB,EAAAv3D,MAAAorC,UACAg0B,IACAh0B,IAAA+0B,IACA/0B,IAAAm1B,IACAn1B,IAAAo1B,IACAp1B,IAAAq1B,IACAr1B,IAAAi0B,IACAj0B,IAAA40B,GAEAjsF,EAAAwjF,EAAA12D,IAGA02D,EAAAv3D,MAAA,KAEAorC,IAAAi0B,GAAAtrF,EAAAwjF,EAAAz2D,GAAAL,GAjBAI,EAyBA,QAAAk3D,GAAAR,EAAAK,GACA,GAEAlyG,GACA2zC,EAAAl0C,EACAqmB,EACAq1F,EACA/0G,EACA0zC,EACAshE,EARAC,EAAAnJ,EAAA1tG,MAUA,KAAAqtG,MAAAv3D,MACA,MAAAa,EAMA,IAHAn7C,EAAA6xG,EAAAv3D,MAGA,KAFAx0B,EAAA9lB,EAAA8lB,OAEA,IAAAA,GAAA9lB,EAAA0lF,SAAAg0B,IAAA15G,EAAAk1G,UACA,MAAA/5D,EAmCA,KA/BA,IAAAr1B,IAEA+rF,EAAAx5D,MAAAD,EAAAy5D,EAAAx5D,MAAA65D,EAAAmJ,EAAA,IAGAr7G,EAAA8lB,KAAA,EAGAu1F,GAAAr7G,EAAAu0G,SACA,IAAAzuF,IAEAktF,EAAAhzG,EAAAy1G,MACAz1G,EAAA0zG,SAAA,EACA1zG,EAAAyzG,YAAA,EACAzzG,EAAA01G,OAAA,GAIA0F,EAAA,GAAAjvG,GAAArB,KAAA9K,EAAAu0G,QACApoG,EAAAnC,SAAAoxG,EAAAlJ,EAAAmJ,EAAAr7G,EAAAu0G,OAAAv0G,EAAAu0G,OAAA,GACArC,EAAAkJ,EACAC,EAAAr7G,EAAAu0G,QAGA4G,EAAAtJ,EAAA73D,SACA5zC,EAAAyrG,EAAA93D,QACAD,EAAA+3D,EAAA/3D,MACA+3D,EAAA73D,SAAAqhE,EACAxJ,EAAA93D,QAAA,EACA83D,EAAA/3D,MAAAo4D,EACAkD,EAAAp1G,GACAA,EAAAk1G,WAAAS,IAAA,CACAhiE,EAAA3zC,EAAA0zG,SACAj0G,EAAAO,EAAAk1G,WAAAS,GAAA,EACA,IAEA31G,EAAA41G,OAAA51G,EAAA41G,OAAA51G,EAAA61G,WAAA71G,EAAA0U,OAAAi/B,EAAAgiE,GAAA,IAAA31G,EAAA81G,UAEA91G,EAAA40G,KAAAjhE,EAAA3zC,EAAA20G,QAAA30G,EAAAy1G,KAAAz1G,EAAA41G,OAEA51G,EAAAy1G,KAAAz1G,EAAA41G,OAAAjiE,EACAA,YACKl0C,EACLO,GAAA0zG,SAAA//D,EACA3zC,EAAAk1G,UAAAS,GAAA,EACAP,EAAAp1G,GAYA,MAVAA,GAAA0zG,UAAA1zG,EAAAk1G,UACAl1G,EAAAyzG,YAAAzzG,EAAA0zG,SACA1zG,EAAA01G,OAAA11G,EAAAk1G,UACAl1G,EAAAk1G,UAAA,EACAl1G,EAAA02G,aAAA12G,EAAAo0G,YAAAuB,GAAA,EACA31G,EAAAk3G,gBAAA,EACArF,EAAA93D,QAAA3zC,EACAyrG,EAAA/3D,QACA+3D,EAAA73D,SAAAmhE,EACAn7G,EAAA8lB,OACAi1B,EAvyDA,GAkgCA48D,GAlgCAxrG,EAAA7N,EAAA,GACAi1G,EAAAj1G,EAAA,IACA85C,EAAA95C,EAAA,IACAk6C,EAAAl6C,EAAA,IACAyvB,EAAAzvB,EAAA,GAOAk8C,EAAA,EACAC,EAAA,EAEAE,EAAA,EACAC,EAAA,EACAC,EAAA,EAOAE,EAAA,EACAC,EAAA,EAGAG,GAAA,EACAC,GAAA,EAEAC,GAAA,EAQAI,GAAA,EAGAC,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,EAMAG,EAAA,EAIAC,EAAA,EAKA69D,EAAA,EAEAE,GAAA,GAEAC,GAAA,EAOApB,GAAAwC,IAEAjD,GAAA,GAEAE,GAAA,GAEAJ,GAAA,EAAAW,GAAA,EAEAF,GAAA,GAGAjD,GAAA,EACAb,GAAA,IACAN,GAAAM,GAAAa,GAAA,EAEAiF,GAAA,GAEAlB,GAAA,GACAe,GAAA,GACAI,GAAA,GACAC,GAAA,GACAC,GAAA,IACApB,GAAA,IACAW,GAAA,IAEAnE,GAAA,EACAW,GAAA,EACAT,GAAA,EACAC,GAAA,EAEAoE,GAAA,CA+5BA/C,IAEA,GAAAN,GAAA,QAAAtB,GACA,GAAAsB,GAAA,QAAAd,GACA,GAAAc,GAAA,SAAAd,GACA,GAAAc,GAAA,UAAAd,GAEA,GAAAc,GAAA,UAAAN,GACA,GAAAM,GAAA,WAAAN,GACA,GAAAM,GAAA,aAAAN,GACA,GAAAM,GAAA,aAAAN,GACA,GAAAM,GAAA,gBAAAN,GACA,GAAAM,GAAA,gBAAAN,IA2xBAt4G,EAAAu7G,cACAv7G,EAAAszG,eACAtzG,EAAAo7G,eACAp7G,EAAAg7G,mBACAh7G,EAAAwzG,mBACAxzG,EAAAyyG,UACAzyG,EAAAo0G,aACAp0G,EAAA4zG,uBACA5zG,EAAA88G,YAAA,sC7C8tkBM,SAAU78G,EAAQD,EAASH,GAEjC,Y8C9/nBA,SAAA00G,GAAAppG,GAA0C,IAAtB,GAAAQ,GAAAR,EAAApF,SAAsB4F,GAAA,GAAqBR,EAAAQ,GAAA,EA2H/D,QAAAoxG,GAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAEA34G,KAAAu4G,cACAv4G,KAAAw4G,aACAx4G,KAAAy4G,aACAz4G,KAAA04G,QACA14G,KAAA24G,aAGA34G,KAAA44G,UAAAL,KAAAj3G,OASA,QAAAu3G,GAAAC,EAAAC,GACA/4G,KAAA84G,WACA94G,KAAAg5G,SAAA,EACAh5G,KAAA+4G,YAKA,QAAAE,GAAA5mE,GACA,MAAAA,GAAA,IAAA6mE,GAAA7mE,GAAA6mE,GAAA,KAAA7mE,IAAA,IAQA,QAAA8mE,GAAAr8G,EAAA0qC,GAGA1qC,EAAAmzG,YAAAnzG,EAAAkzG,WAAA,MACAlzG,EAAAmzG,YAAAnzG,EAAAkzG,WAAAxoE,IAAA,MAQA,QAAA4xE,GAAAt8G,EAAAC,EAAAuE,GACAxE,EAAAw5G,SAAA+C,EAAA/3G,GACAxE,EAAAu5G,QAAAt5G,GAAAD,EAAAw5G,SAAA,MACA6C,EAAAr8G,IAAAu5G,QACAv5G,EAAAu5G,OAAAt5G,GAAAs8G,EAAAv8G,EAAAw5G,SACAx5G,EAAAw5G,UAAAh1G,EAAA+3G,IAEAv8G,EAAAu5G,QAAAt5G,GAAAD,EAAAw5G,SAAA,MACAx5G,EAAAw5G,UAAAh1G,GAKA,QAAAg4G,GAAAx8G,EAAAjB,EAAA09G,GACAH,EAAAt8G,EAAAy8G,EAAA,EAAA19G,GAAA09G,EAAA,EAAA19G,EAAA,IASA,QAAA29G,GAAA/pD,EAAAvoD,GACA,GAAA8jC,GAAA,CACA,IACAA,GAAA,EAAAykB,EACAA,KAAA,EACAzkB,IAAA,UACG9jC,EAAA,EACH,OAAA8jC,KAAA,EAOA,QAAAyuE,GAAA38G,GACA,KAAAA,EAAAw5G,UACA6C,EAAAr8G,IAAAu5G,QACAv5G,EAAAu5G,OAAA,EACAv5G,EAAAw5G,SAAA,GAEGx5G,EAAAw5G,UAAA,IACHx5G,EAAAmzG,YAAAnzG,EAAAkzG,WAAA,IAAAlzG,EAAAu5G,OACAv5G,EAAAu5G,SAAA,EACAv5G,EAAAw5G,UAAA,GAeA,QAAAoD,GAAA58G,EAAA6E,GAIA,GAOA8lC,GACAlrC,EAAAX,EACA+9G,EACAC,EACA91G,EAXAy1G,EAAA53G,EAAAm3G,SACAE,EAAAr3G,EAAAq3G,SACAa,EAAAl4G,EAAAo3G,UAAAR,YACAK,EAAAj3G,EAAAo3G,UAAAH,UACAj7E,EAAAh8B,EAAAo3G,UAAAP,WACAj1E,EAAA5hC,EAAAo3G,UAAAN,WACAE,EAAAh3G,EAAAo3G,UAAAJ,WAMAmB,EAAA,CAEA,KAAAH,EAAA,EAAgBA,GAAAjE,EAAkBiE,IAClC78G,EAAA24G,SAAAkE,GAAA,CAQA,KAFAJ,EAAA,EAAAz8G,EAAA64G,KAAA74G,EAAAg5G,UAAA,KAEAruE,EAAA3qC,EAAAg5G,SAAA,EAA0BruE,EAAAwtE,EAAextE,IACzClrC,EAAAO,EAAA64G,KAAAluE,GACAkyE,EAAAJ,EAAA,EAAAA,EAAA,EAAAh9G,EAAA,QACAo9G,EAAAhB,IACAgB,EAAAhB,EACAmB,KAEAP,EAAA,EAAAh9G,EAAA,GAAAo9G,EAGAp9G,EAAAy8G,IAEAl8G,EAAA24G,SAAAkE,KACAC,EAAA,EACAr9G,GAAAgnC,IACAq2E,EAAAj8E,EAAAphC,EAAAgnC,IAEAz/B,EAAAy1G,EAAA,EAAAh9G,GACAO,EAAAo5G,SAAApyG,GAAA61G,EAAAC,GACAhB,IACA97G,EAAAq5G,YAAAryG,GAAA+1G,EAAA,EAAAt9G,EAAA,GAAAq9G,IAGA,QAAAE,EAAA,CAMA,GAEA,IADAH,EAAAhB,EAAA,EACA,IAAA77G,EAAA24G,SAAAkE,IAAoCA,GACpC78G,GAAA24G,SAAAkE,KACA78G,EAAA24G,SAAAkE,EAAA,MACA78G,EAAA24G,SAAAkD,KAIAmB,GAAA,QACGA,EAAA,EAOH,KAAAH,EAAAhB,EAAyB,IAAAgB,EAAYA,IAErC,IADAp9G,EAAAO,EAAA24G,SAAAkE,GACA,IAAAp9G,IACAX,EAAAkB,EAAA64G,OAAAluE,IACAuxE,IACAO,EAAA,EAAA39G,EAAA,KAAA+9G,IAEA78G,EAAAo5G,UAAAyD,EAAAJ,EAAA,EAAA39G,EAAA,IAAA29G,EAAA,EAAA39G,GACA29G,EAAA,EAAA39G,EAAA,GAAA+9G,GAEAp9G,MAcA,QAAAw9G,GAAAR,EAAAP,EAAAvD,GAKA,GAEAkE,GACAp9G,EAHAy9G,EAAA,GAAAt6G,OAAAg2G,EAAA,GACAjmD,EAAA,CAOA,KAAAkqD,EAAA,EAAgBA,GAAAjE,EAAkBiE,IAClCK,EAAAL,GAAAlqD,IAAAgmD,EAAAkE,EAAA,KASA,KAAAp9G,EAAA,EAAaA,GAAAy8G,EAAgBz8G,IAAA,CAC7B,GAAA2K,GAAAqyG,EAAA,EAAAh9G,EAAA,EACA,KAAA2K,IAEAqyG,EAAA,EAAAh9G,GAAAi9G,EAAAQ,EAAA9yG,UAWA,QAAA+yG,KACA,GAAA19G,GACAo9G,EACAr4G,EACAmuD,EACApd,EACAojE,EAAA,GAAA/1G,OAAAg2G,EAAA,EAiBA,KADAp0G,EAAA,EACAmuD,EAAA,EAAgBA,EAAAyqD,EAAA,EAAyBzqD,IAEzC,IADA0qD,GAAA1qD,GAAAnuD,EACA/E,EAAA,EAAeA,EAAA,GAAA69G,EAAA3qD,GAA8BlzD,IAC7C89G,GAAA/4G,KAAAmuD,CAYA,KAJA4qD,GAAA/4G,EAAA,GAAAmuD,EAGApd,EAAA,EACAod,EAAA,EAAgBA,EAAA,GAAWA,IAE3B,IADA6qD,GAAA7qD,GAAApd,EACA91C,EAAA,EAAeA,EAAA,GAAAg+G,GAAA9qD,GAA8BlzD,IAC7C28G,GAAA7mE,KAAAod,CAKA,KADApd,IAAA,EACQod,EAAA0lD,EAAgB1lD,IAExB,IADA6qD,GAAA7qD,GAAApd,GAAA,EACA91C,EAAA,EAAeA,EAAA,GAAAg+G,GAAA9qD,GAAA,EAAoClzD,IACnD28G,GAAA,IAAA7mE,KAAAod,CAMA,KAAAkqD,EAAA,EAAgBA,GAAAjE,EAAkBiE,IAClClE,EAAAkE,GAAA,CAIA,KADAp9G,EAAA,EACAA,GAAA,KACAi+G,GAAA,EAAAj+G,EAAA,KACAA,IACAk5G,EAAA,IAEA,MAAAl5G,GAAA,KACAi+G,GAAA,EAAAj+G,EAAA,KACAA,IACAk5G,EAAA,IAEA,MAAAl5G,GAAA,KACAi+G,GAAA,EAAAj+G,EAAA,KACAA,IACAk5G,EAAA,IAEA,MAAAl5G,GAAA,KACAi+G,GAAA,EAAAj+G,EAAA,KACAA,IACAk5G,EAAA,IASA,KAHAsE,EAAAS,GAAA5E,EAAA,EAAAH,GAGAl5G,EAAA,EAAaA,EAAA44G,EAAa54G,IAC1Bk+G,GAAA,EAAAl+G,EAAA,KACAk+G,GAAA,EAAAl+G,GAAAi9G,EAAAj9G,EAAA,EAIAm+G,IAAA,GAAApC,GAAAkC,GAAAJ,EAAAhC,EAAA,EAAAxC,EAAAF,GACAiF,GAAA,GAAArC,GAAAmC,GAAAF,GAAA,EAAApF,EAAAO,GACAkF,GAAA,GAAAtC,GAAA,GAAA54G,OAAA,GAAAm7G,GAAA,EAAAxF,EAAAyF,GASA,QAAAC,GAAAj+G,GACA,GAAAP,EAGA,KAAAA,EAAA,EAAaA,EAAAq5G,EAAar5G,IAAQO,EAAAk4G,UAAA,EAAAz4G,GAAA,CAClC,KAAAA,EAAA,EAAaA,EAAA44G,EAAa54G,IAAQO,EAAAo4G,UAAA,EAAA34G,GAAA,CAClC,KAAAA,EAAA,EAAaA,EAAA84G,EAAc94G,IAAOO,EAAAs4G,QAAA,EAAA74G,GAAA,CAElCO,GAAAk4G,UAAA,EAAAgG,GAAA,EACAl+G,EAAAo5G,QAAAp5G,EAAAq5G,WAAA,EACAr5G,EAAA62G,SAAA72G,EAAAs5G,QAAA,EAOA,QAAA6E,GAAAn+G,GAEAA,EAAAw5G,SAAA,EACA6C,EAAAr8G,IAAAu5G,QACGv5G,EAAAw5G,SAAA,IAEHx5G,EAAAmzG,YAAAnzG,EAAAkzG,WAAAlzG,EAAAu5G,QAEAv5G,EAAAu5G,OAAA,EACAv5G,EAAAw5G,SAAA,EAOA,QAAA4E,GAAAp+G,EAAA4J,EAAAQ,EAAA4nG,GAMAmM,EAAAn+G,GAEAgyG,IACAqK,EAAAr8G,EAAAoK,GACAiyG,EAAAr8G,GAAAoK,IAKA+B,EAAAnC,SAAAhK,EAAAmzG,YAAAnzG,EAAA0U,OAAA9K,EAAAQ,EAAApK,EAAAkzG,SACAlzG,EAAAkzG,SAAA9oG,EAOA,QAAAi0G,GAAA5B,EAAAh9G,EAAAX,EAAA4tB,GACA,GAAA4xF,GAAA,EAAA7+G,EACA8+G,EAAA,EAAAz/G,CACA,OAAA29G,GAAA6B,GAAA7B,EAAA8B,IACA9B,EAAA6B,KAAA7B,EAAA8B,IAAA7xF,EAAAjtB,IAAAitB,EAAA5tB,GASA,QAAA0/G,GAAAx+G,EAAAy8G,EAAA3hF,GAOA,IAFA,GAAAh0B,GAAA9G,EAAA64G,KAAA/9E,GACAgsB,EAAAhsB,GAAA,EACAgsB,GAAA9mD,EAAA+4G,WAEAjyD,EAAA9mD,EAAA+4G,UACAsF,EAAA5B,EAAAz8G,EAAA64G,KAAA/xD,EAAA,GAAA9mD,EAAA64G,KAAA/xD,GAAA9mD,EAAA0sB,QACAo6B,KAGAu3D,EAAA5B,EAAA31G,EAAA9G,EAAA64G,KAAA/xD,GAAA9mD,EAAA0sB,SAGA1sB,EAAA64G,KAAA/9E,GAAA96B,EAAA64G,KAAA/xD,GACAhsB,EAAAgsB,EAGAA,IAAA,CAEA9mD,GAAA64G,KAAA/9E,GAAAh0B,EAUA,QAAA23G,GAAAz+G,EAAA0+G,EAAAC,GAKA,GAAAppE,GACAqpE,EAEAjsD,EACA9xB,EAFAg+E,EAAA,CAIA,QAAA7+G,EAAA62G,SACA,GACAthE,EAAAv1C,EAAAmzG,YAAAnzG,EAAAm5G,MAAA,EAAA0F,IAAA,EAAA7+G,EAAAmzG,YAAAnzG,EAAAm5G,MAAA,EAAA0F,EAAA,GACAD,EAAA5+G,EAAAmzG,YAAAnzG,EAAAi5G,MAAA4F,GACAA,IAEA,IAAAtpE,EACAinE,EAAAx8G,EAAA4+G,EAAAF,IAIA/rD,EAAA4qD,GAAAqB,GACApC,EAAAx8G,EAAA2yD,EAAA2oD,EAAA,EAAAoD,GACA79E,EAAAy8E,EAAA3qD,GACA,IAAA9xB,IACA+9E,GAAAvB,GAAA1qD,GACA2pD,EAAAt8G,EAAA4+G,EAAA/9E,IAEA0U,IACAod,EAAAwpD,EAAA5mE,GAGAinE,EAAAx8G,EAAA2yD,EAAAgsD,GAEA,KADA99E,EAAA48E,GAAA9qD,MAEApd,GAAAioE,GAAA7qD,GACA2pD,EAAAt8G,EAAAu1C,EAAA1U,WAQKg+E,EAAA7+G,EAAA62G,SAGL2F,GAAAx8G,EAAAk+G,EAAAQ,GAYA,QAAAI,GAAA9+G,EAAA6E,GAIA,GAIApF,GAAAX,EAEAigH,EANAtC,EAAA53G,EAAAm3G,SACAe,EAAAl4G,EAAAo3G,UAAAR,YACAK,EAAAj3G,EAAAo3G,UAAAH,UACAF,EAAA/2G,EAAAo3G,UAAAL,MAEAM,GAAA,CAUA,KAHAl8G,EAAA+4G,SAAA,EACA/4G,EAAAg5G,SAAAb,EAEA14G,EAAA,EAAaA,EAAAm8G,EAAWn8G,IACxB,IAAAg9G,EAAA,EAAAh9G,IACAO,EAAA64G,OAAA74G,EAAA+4G,UAAAmD,EAAAz8G,EACAO,EAAA0sB,MAAAjtB,GAAA,GAGAg9G,EAAA,EAAAh9G,EAAA,IASA,MAAAO,EAAA+4G,SAAA,GACAgG,EAAA/+G,EAAA64G,OAAA74G,EAAA+4G,UAAAmD,EAAA,IAAAA,EAAA,EACAO,EAAA,EAAAsC,GAAA,EACA/+G,EAAA0sB,MAAAqyF,GAAA,EACA/+G,EAAAo5G,UAEA0C,IACA97G,EAAAq5G,YAAA0D,EAAA,EAAAgC,EAAA,GASA,KALAl6G,EAAAq3G,WAKAz8G,EAAAO,EAAA+4G,UAAA,EAAuCt5G,GAAA,EAAQA,IAAO++G,EAAAx+G,EAAAy8G,EAAAh9G,EAKtDs/G,GAAAnD,CACA,IAGAn8G,EAAAO,EAAA64G,KAAA,GACA74G,EAAA64G,KAAA,GAAA74G,EAAA64G,KAAA74G,EAAA+4G,YACAyF,EAAAx+G,EAAAy8G,EAAA,GAGA39G,EAAAkB,EAAA64G,KAAA,GAEA74G,EAAA64G,OAAA74G,EAAAg5G,UAAAv5G,EACAO,EAAA64G,OAAA74G,EAAAg5G,UAAAl6G,EAGA29G,EAAA,EAAAsC,GAAAtC,EAAA,EAAAh9G,GAAAg9G,EAAA,EAAA39G,GACAkB,EAAA0sB,MAAAqyF,IAAA/+G,EAAA0sB,MAAAjtB,IAAAO,EAAA0sB,MAAA5tB,GAAAkB,EAAA0sB,MAAAjtB,GAAAO,EAAA0sB,MAAA5tB,IAAA,EACA29G,EAAA,EAAAh9G,EAAA,GAAAg9G,EAAA,EAAA39G,EAAA,GAAAigH,EAGA/+G,EAAA64G,KAAA,GAAAkG,IACAP,EAAAx+G,EAAAy8G,EAAA,SAEGz8G,EAAA+4G,UAAA,EAEH/4G,GAAA64G,OAAA74G,EAAAg5G,UAAAh5G,EAAA64G,KAAA,GAKA+D,EAAA58G,EAAA6E,GAGAo4G,EAAAR,EAAAP,EAAAl8G,EAAA24G,UAQA,QAAAqG,GAAAh/G,EAAAy8G,EAAAP,GAKA,GAAAz8G,GAEAw/G,EADAC,GAAA,EAGAC,EAAA1C,EAAA,GAEA1nG,EAAA,EACAqqG,EAAA,EACAC,EAAA,CAQA,KANA,IAAAF,IACAC,EAAA,IACAC,EAAA,GAEA5C,EAAA,GAAAP,EAAA,YAEAz8G,EAAA,EAAaA,GAAAy8G,EAAez8G,IAC5Bw/G,EAAAE,EACAA,EAAA1C,EAAA,GAAAh9G,EAAA,QAEAsV,EAAAqqG,GAAAH,IAAAE,IAGKpqG,EAAAsqG,EACLr/G,EAAAs4G,QAAA,EAAA2G,IAAAlqG,EAEK,IAAAkqG,GAELA,IAAAC,GAA+Bl/G,EAAAs4G,QAAA,EAAA2G,KAC/Bj/G,EAAAs4G,QAAA,EAAAgH,MAEKvqG,GAAA,GACL/U,EAAAs4G,QAAA,EAAAiH,KAGAv/G,EAAAs4G,QAAA,EAAAkH,KAGAzqG,EAAA,EACAmqG,EAAAD,EAEA,IAAAE,GACAC,EAAA,IACAC,EAAA,GAEKJ,IAAAE,GACLC,EAAA,EACAC,EAAA,IAGAD,EAAA,EACAC,EAAA,IAUA,QAAAI,GAAAz/G,EAAAy8G,EAAAP,GAKA,GAAAz8G,GAEAw/G,EADAC,GAAA,EAGAC,EAAA1C,EAAA,GAEA1nG,EAAA,EACAqqG,EAAA,EACAC,EAAA,CAQA,KALA,IAAAF,IACAC,EAAA,IACAC,EAAA,GAGA5/G,EAAA,EAAaA,GAAAy8G,EAAez8G,IAI5B,GAHAw/G,EAAAE,EACAA,EAAA1C,EAAA,GAAAh9G,EAAA,UAEAsV,EAAAqqG,GAAAH,IAAAE,GAAA,CAGK,GAAApqG,EAAAsqG,EACL,GAAU7C,EAAAx8G,EAAAi/G,EAAAj/G,EAAAs4G,eAAmC,KAAAvjG,OAExC,KAAAkqG,GACLA,IAAAC,IACA1C,EAAAx8G,EAAAi/G,EAAAj/G,EAAAs4G,SACAvjG,KAGAynG,EAAAx8G,EAAAs/G,EAAAt/G,EAAAs4G,SACAgE,EAAAt8G,EAAA+U,EAAA,MAEKA,GAAA,IACLynG,EAAAx8G,EAAAu/G,EAAAv/G,EAAAs4G,SACAgE,EAAAt8G,EAAA+U,EAAA,OAGAynG,EAAAx8G,EAAAw/G,EAAAx/G,EAAAs4G,SACAgE,EAAAt8G,EAAA+U,EAAA,MAGAA,GAAA,EACAmqG,EAAAD,EACA,IAAAE,GACAC,EAAA,IACAC,EAAA,GAEKJ,IAAAE,GACLC,EAAA,EACAC,EAAA,IAGAD,EAAA,EACAC,EAAA,IAUA,QAAAK,GAAA1/G,GACA,GAAA2/G,EAgBA,KAbAX,EAAAh/G,IAAAk4G,UAAAl4G,EAAAw4G,OAAA0D,UACA8C,EAAAh/G,IAAAo4G,UAAAp4G,EAAAy4G,OAAAyD,UAGA4C,EAAA9+G,IAAA04G,SASAiH,EAAApH,EAAA,EAAkCoH,GAAA,GAClC,IAAA3/G,EAAAs4G,QAAA,EAAAsH,GAAAD,GAAA,GADoDA,KAUpD,MAJA3/G,GAAAo5G,SAAA,GAAAuG,EAAA,SAIAA,EASA,QAAAE,GAAA7/G,EAAA8/G,EAAAC,EAAAC,GAIA,GAAAjN,EASA,KAHAuJ,EAAAt8G,EAAA8/G,EAAA,OACAxD,EAAAt8G,EAAA+/G,EAAA,KACAzD,EAAAt8G,EAAAggH,EAAA,KACAjN,EAAA,EAAgBA,EAAAiN,EAAgBjN,IAEhCuJ,EAAAt8G,IAAAs4G,QAAA,EAAAsH,GAAA7M,GAAA,KAIA0M,GAAAz/G,IAAAk4G,UAAA4H,EAAA,GAGAL,EAAAz/G,IAAAo4G,UAAA2H,EAAA,GAkBA,QAAAE,GAAAjgH,GAKA,GACAP,GADAygH,EAAA,UAIA,KAAAzgH,EAAA,EAAaA,GAAA,GAASA,IAAAygH,KAAA,EACtB,KAAAA,GAAA,IAAAlgH,EAAAk4G,UAAA,EAAAz4G,GACA,MAAAs8C,EAKA,QAAA/7C,EAAAk4G,UAAA,SAAAl4G,EAAAk4G,UAAA,KACA,IAAAl4G,EAAAk4G,UAAA,IACA,MAAAl8D,EAEA,KAAAv8C,EAAA,GAAcA,EAAA67G,EAAc77G,IAC5B,OAAAO,EAAAk4G,UAAA,EAAAz4G,GACA,MAAAu8C,EAOA,OAAAD,GASA,QAAA69D,GAAA55G,GAGAmgH,KACAhD,IACAgD,IAAA,GAGAngH,EAAAw4G,OAAA,GAAAuD,GAAA/7G,EAAAk4G,UAAA0F,IACA59G,EAAAy4G,OAAA,GAAAsD,GAAA/7G,EAAAo4G,UAAAyF,IACA79G,EAAA04G,QAAA,GAAAqD,GAAA/7G,EAAAs4G,QAAAwF,IAEA99G,EAAAu5G,OAAA,EACAv5G,EAAAw5G,SAAA,EAGAyE,EAAAj+G,GAOA,QAAAk7G,GAAAl7G,EAAA4J,EAAAw2G,EAAA9M,GAMAgJ,EAAAt8G,GAAAqgH,GAAA,IAAA/M,EAAA,QACA8K,EAAAp+G,EAAA4J,EAAAw2G,GAAA,GAQA,QAAAnF,GAAAj7G,GACAs8G,EAAAt8G,EAAAsgH,GAAA,KACA9D,EAAAx8G,EAAAk+G,EAAAR,IACAf,EAAA38G,GAQA,QAAAwzG,GAAAxzG,EAAA4J,EAAAw2G,EAAA9M,GAMA,GAAAiN,GAAAC,EACAb,EAAA,CAGA3/G,GAAAumB,MAAA,GAGAvmB,EAAA6xG,KAAAt3D,YAAA0B,IACAj8C,EAAA6xG,KAAAt3D,UAAA0lE,EAAAjgH,IAIA8+G,EAAA9+G,IAAAw4G,QAIAsG,EAAA9+G,IAAAy4G,QAUAkH,EAAAD,EAAA1/G,GAGAugH,EAAAvgH,EAAAo5G,QAAA,SACAoH,EAAAxgH,EAAAq5G,WAAA,UAMAkH,IAAkCA,EAAAC,IAIlCD,EAAAC,EAAAJ,EAAA,EAGAA,EAAA,GAAAG,IAAA,IAAA32G,EASAsxG,EAAAl7G,EAAA4J,EAAAw2G,EAAA9M,GAEGtzG,EAAAyxG,WAAA51D,GAAA2kE,IAAAD,GAEHjE,EAAAt8G,GAAAsgH,GAAA,IAAAhN,EAAA,QACAmL,EAAAz+G,EAAA09G,GAAAC,MAGArB,EAAAt8G,GAAAygH,GAAA,IAAAnN,EAAA,QACAuM,EAAA7/G,IAAAw4G,OAAA0D,SAAA,EAAAl8G,EAAAy4G,OAAAyD,SAAA,EAAAyD,EAAA,GACAlB,EAAAz+G,IAAAk4G,UAAAl4G,EAAAo4G,YAMA6F,EAAAj+G,GAEAszG,GACA6K,EAAAn+G,GAUA,QAAA22G,GAAA32G,EAAAu1C,EAAAqpE,GAmDA,MA5CA5+G,GAAAmzG,YAAAnzG,EAAAm5G,MAAA,EAAAn5G,EAAA62G,UAAAthE,IAAA,MACAv1C,EAAAmzG,YAAAnzG,EAAAm5G,MAAA,EAAAn5G,EAAA62G,SAAA,OAAAthE,EAEAv1C,EAAAmzG,YAAAnzG,EAAAi5G,MAAAj5G,EAAA62G,UAAA,IAAA+H,EACA5+G,EAAA62G,WAEA,IAAAthE,EAEAv1C,EAAAk4G,UAAA,EAAA0G,MAEA5+G,EAAAs5G,UAEA/jE,IAKAv1C,EAAAk4G,UAAA,GAAAqF,GAAAqB,GAAAtD,EAAA,MACAt7G,EAAAo4G,UAAA,EAAA+D,EAAA5mE,OA0BAv1C,EAAA62G,WAAA72G,EAAAk5G,YAAA,EAnqCA,GAAA/sG,GAAA7N,EAAA,GASAu9C,EAAA,EAIAE,EAAA,EACAC,EAAA,EAEAC,EAAA,EASAokE,EAAA,EACAC,EAAA,EACAG,EAAA,EAYArD,EAAA,GAGA9B,EAAA,IAGAxC,EAAAwC,EAAA,EAAA8B,EAGA/E,EAAA,GAGAE,EAAA,GAGAJ,EAAA,EAAAW,EAAA,EAGAF,EAAA,GAGA2D,EAAA,GAQAyB,EAAA,EAGAE,EAAA,IAGAoB,EAAA,GAGAC,EAAA,GAGAC,EAAA,GAIAlC,GACA,2DAEAG,IACA,qEAEAM,IACA,uCAEA6B,IACA,gDAgBAlC,GAAA,GAAA96G,OAAA,GAAAk2G,EAAA,GACA9F,GAAA0K,GAOA,IAAAC,IAAA,GAAA/6G,OAAA,EAAAy1G,EACArF,GAAA2K,GAKA,IAAAvB,IAAA,GAAAx5G,OAjBA,IAkBAowG,GAAAoJ,GAMA,IAAAmB,IAAA,GAAA36G,OAAAkyG,IACA9B,GAAAuK,GAGA,IAAAF,IAAA,GAAAz6G,OAAAw6G,EACApK,GAAAqK,GAGA,IAAAG,IAAA,GAAA56G,OAAAy1G,EACArF,GAAAwK,GAiBA,IAAAI,IACAC,GACAC,GAo0BAqC,IAAA,CAuMA1hH,GAAAm7G,WACAn7G,EAAAy8G,mBACAz8G,EAAA+0G,kBACA/0G,EAAAk4G,YACAl4G,EAAAw8G,a9C8ioBM,SAAUv8G,EAAQD,EAASH,GAEjC,Y+CvpqBA,SAAAoiH,GAAAnkG,GACA,KAAArZ,eAAAw9G,IAAA,UAAAA,GAAAnkG,EAEArZ,MAAAqZ,QAAApQ,EAAAjD,QACAooG,UAAA,MACAC,WAAA,EACAG,GAAA,IACGn1F,MAEH,IAAAH,GAAAlZ,KAAAqZ,OAIAH,GAAA88E,KAAA98E,EAAAm1F,YAAA,GAAAn1F,EAAAm1F,WAAA,KACAn1F,EAAAm1F,YAAAn1F,EAAAm1F,WACA,IAAAn1F,EAAAm1F,aAA+Bn1F,EAAAm1F,YAAA,OAI/Bn1F,EAAAm1F,YAAA,GAAAn1F,EAAAm1F,WAAA,KACAh1F,KAAAg1F,aACAn1F,EAAAm1F,YAAA,IAKAn1F,EAAAm1F,WAAA,IAAAn1F,EAAAm1F,WAAA,IAGA,OAAAn1F,EAAAm1F,cACAn1F,EAAAm1F,YAAA,IAIAruG,KAAAmrB,IAAA,EACAnrB,KAAA6qB,IAAA,GACA7qB,KAAA0uG,OAAA,EACA1uG,KAAAsH,UAEAtH,KAAA2uG,KAAA,GAAAh4D,GACA32C,KAAA2uG,KAAAz3D,UAAA,CAEA,IAAAsrC,GAAAi7B,EAAAC,aACA19G,KAAA2uG,KACAz1F,EAAAm1F,WAGA,IAAA7rB,IAAA3mF,EAAAg8C,KACA,SAAA/b,OAAAjR,EAAA23D,GAGAxiF,MAAA8uG,OAAA,GAAA6O,GAEAF,EAAAG,iBAAA59G,KAAA2uG,KAAA3uG,KAAA8uG,QAwOA,QAAAf,GAAAn3D,EAAAv9B,GACA,GAAAwkG,GAAA,GAAAL,GAAAnkG,EAKA,IAHAwkG,EAAAv5G,KAAAsyC,GAAA,GAGAinE,EAAA1yF,IAAqB,KAAA0yF,GAAAhzF,OAAAgzF,EAAA1yF,IAErB,OAAA0yF,GAAAx6G,OAYA,QAAAy6G,GAAAlnE,EAAAv9B,GAGA,MAFAA,SACAA,EAAA28E,KAAA,EACA+X,EAAAn3D,EAAAv9B,GA7YA,GAAAokG,GAAAriH,EAAA,IACA6N,EAAA7N,EAAA,GACA8zG,EAAA9zG,EAAA,IACAS,EAAAT,EAAA,IACAyvB,EAAAzvB,EAAA,GACAu7C,EAAAv7C,EAAA,IACAuiH,EAAAviH,EAAA,IAEA+gB,EAAAjgB,OAAAS,UAAAwf,QAqKAqhG,GAAA7gH,UAAA2H,KAAA,SAAA+I,EAAAkiG,GACA,GAGA/sB,GAAAgtB,EACAuO,EAAAC,EAAAC,EACAhP,EALAN,EAAA3uG,KAAA2uG,KACAP,EAAApuG,KAAAqZ,QAAA+0F,UACAY,EAAAhvG,KAAAqZ,QAAA21F,WAOAkP,GAAA,CAEA,IAAAl+G,KAAA0uG,MAAmB,QACnBc,GAAAD,WAAA,IAAAA,EAAA1zG,EAAA67C,SAAA77C,EAAAy7C,WAGA,gBAAAjqC,GAEAshG,EAAA/3D,MAAAs4D,EAAA54D,cAAAjpC,GACG,yBAAA8O,EAAAxgB,KAAA0R,GACHshG,EAAA/3D,MAAA,GAAA1wC,YAAAmH,GAEAshG,EAAA/3D,MAAAvpC,EAGAshG,EAAA93D,QAAA,EACA83D,EAAA73D,SAAA63D,EAAA/3D,MAAAt1C,MAEA,IA4BA,GA3BA,IAAAqtG,EAAAz3D,YACAy3D,EAAA33D,OAAA,GAAA/tC,GAAArB,KAAAwmG,GACAO,EAAA13D,SAAA,EACA03D,EAAAz3D,UAAAk3D,GAGA5rB,EAAAi7B,EAAA1P,QAAAY,EAAA9yG,EAAAy7C,YAEAkrC,IAAA3mF,EAAAk8C,aAAAi3D,IAGAC,EADA,gBAAAD,GACAE,EAAAl5D,WAAAg5D,GACO,yBAAA7yF,EAAAxgB,KAAAqzG,GACP,GAAA9oG,YAAA8oG,GAEAA,EAGAxsB,EAAAi7B,EAAAU,qBAAAn+G,KAAA2uG,KAAAM,IAIAzsB,IAAA3mF,EAAAs8C,cAAA,IAAA+lE,IACA17B,EAAA3mF,EAAAg8C,KACAqmE,GAAA,GAGA17B,IAAA3mF,EAAAi8C,cAAA0qC,IAAA3mF,EAAAg8C,KAGA,MAFA73C,MAAAyvG,MAAAjtB,GACAxiF,KAAA0uG,OAAA,GACA,CAGAC,GAAA13D,WACA,IAAA03D,EAAAz3D,WAAAsrC,IAAA3mF,EAAAi8C,eAAA,IAAA62D,EAAA73D,UAAA04D,IAAA3zG,EAAA67C,UAAA83D,IAAA3zG,EAAA27C,gBAEA,WAAAx3C,KAAAqZ,QAAAm1F,IAEAuP,EAAA7O,EAAAx4D,WAAAi4D,EAAA33D,OAAA23D,EAAA13D,UAEA+mE,EAAArP,EAAA13D,SAAA8mE,EACAE,EAAA/O,EAAA34D,WAAAo4D,EAAA33D,OAAA+mE,GAGApP,EAAA13D,SAAA+mE,EACArP,EAAAz3D,UAAAk3D,EAAA4P,EACAA,GAAqB/0G,EAAAnC,SAAA6nG,EAAA33D,OAAA23D,EAAA33D,OAAA+mE,EAAAC,EAAA,GAErBh+G,KAAA0vG,OAAAuO,IAGAj+G,KAAA0vG,OAAAzmG,EAAAxC,UAAAkoG,EAAA33D,OAAA23D,EAAA13D,aAYA,IAAA03D,EAAA73D,UAAA,IAAA63D,EAAAz3D,YACAgnE,GAAA,UAGGvP,EAAA73D,SAAA,OAAA63D,EAAAz3D,YAAAsrC,IAAA3mF,EAAAi8C,aAOH,OALA0qC,KAAA3mF,EAAAi8C,eACA03D,EAAA3zG,EAAA67C,UAIA83D,IAAA3zG,EAAA67C,UACA8qC,EAAAi7B,EAAAW,WAAAp+G,KAAA2uG,MACA3uG,KAAAyvG,MAAAjtB,GACAxiF,KAAA0uG,OAAA,EACAlsB,IAAA3mF,EAAAg8C,MAIA23D,IAAA3zG,EAAA27C,eACAx3C,KAAAyvG,MAAA5zG,EAAAg8C,MACA82D,EAAAz3D,UAAA,GACA,IAgBAsmE,EAAA7gH,UAAA+yG,OAAA,SAAAloG,GACAxH,KAAAsH,OAAAhD,KAAAkD,IAcAg2G,EAAA7gH,UAAA8yG,MAAA,SAAAjtB,GAEAA,IAAA3mF,EAAAg8C,OACA,WAAA73C,KAAAqZ,QAAAm1F,GAGAxuG,KAAAqD,OAAArD,KAAAsH,OAAAyQ,KAAA,IAEA/X,KAAAqD,OAAA4F,EAAA5B,cAAArH,KAAAsH,SAGAtH,KAAAsH,UACAtH,KAAAmrB,IAAAq3D,EACAxiF,KAAA6qB,IAAA7qB,KAAA2uG,KAAA9jF,KAgFAtvB,EAAAiiH,UACAjiH,EAAAwyG,UACAxyG,EAAAuiH,aACAviH,EAAA8iH,OAAAtQ,G/CyvqBM,SAAUvyG,EAAQD,EAASH,GAEjC,YgD5irBA,SAAAkjH,GAAAj5G,GACA,OAAAA,IAAA,SACAA,IAAA,WACA,MAAAA,IAAA,KACA,IAAAA,IAAA,IAIA,QAAAk5G,KACAv+G,KAAAuvG,KAAA,EACAvvG,KAAAowG,MAAA,EACApwG,KAAA4iB,KAAA,EACA5iB,KAAAw+G,UAAA,EACAx+G,KAAAy+G,MAAA,EACAz+G,KAAA0+G,KAAA,EACA1+G,KAAA2+G,MAAA,EACA3+G,KAAAg1F,MAAA,EAEAh1F,KAAAuyG,KAAA,KAGAvyG,KAAA4+G,MAAA,EACA5+G,KAAA6+G,MAAA,EACA7+G,KAAA8+G,MAAA,EACA9+G,KAAA++G,MAAA,EACA/+G,KAAAwR,OAAA,KAGAxR,KAAAg/G,KAAA,EACAh/G,KAAA25G,KAAA,EAGA35G,KAAAsB,OAAA,EACAtB,KAAA+O,OAAA,EAGA/O,KAAA29B,MAAA,EAGA39B,KAAAi/G,QAAA,KACAj/G,KAAAk/G,SAAA,KACAl/G,KAAAm/G,QAAA,EACAn/G,KAAAo/G,SAAA,EAGAp/G,KAAAq/G,MAAA,EACAr/G,KAAAs/G,KAAA,EACAt/G,KAAAu/G,MAAA,EACAv/G,KAAAw/G,KAAA,EACAx/G,KAAAkD,KAAA,KAEAlD,KAAAy/G,KAAA,GAAAx2G,GAAApB,MAAA,KACA7H,KAAA0/G,KAAA,GAAAz2G,GAAApB,MAAA,KAOA7H,KAAA2/G,OAAA,KACA3/G,KAAA4/G,QAAA,KACA5/G,KAAA6/G,KAAA,EACA7/G,KAAA8/G,KAAA,EACA9/G,KAAA+/G,IAAA,EAGA,QAAAC,GAAArR,GACA,GAAAv3D,EAEA,OAAAu3D,MAAAv3D,OACAA,EAAAu3D,EAAAv3D,MACAu3D,EAAA53D,SAAA43D,EAAAx3D,UAAAC,EAAA49C,MAAA,EACA2Z,EAAA9jF,IAAA,GACAusB,EAAAx0B,OACA+rF,EAAAx5D,MAAA,EAAAiC,EAAAx0B,MAEAw0B,EAAAm4D,KAAA0Q,EACA7oE,EAAAg5D,KAAA,EACAh5D,EAAAonE,SAAA,EACApnE,EAAAsnE,KAAA,MACAtnE,EAAAm7D,KAAA,KACAn7D,EAAA4nE,KAAA,EACA5nE,EAAAuiE,KAAA,EAEAviE,EAAA6nE,QAAA7nE,EAAAuoE,OAAA,GAAA12G,GAAAnB,MAAAo4G,IACA9oE,EAAA8nE,SAAA9nE,EAAAwoE,QAAA,GAAA32G,GAAAnB,MAAAq4G,IAEA/oE,EAAAyoE,KAAA,EACAzoE,EAAA0oE,MAAA,EAEAjoE,GArB6BI,EAwB7B,QAAAmoE,GAAAzR,GACA,GAAAv3D,EAEA,OAAAu3D,MAAAv3D,OACAA,EAAAu3D,EAAAv3D,MACAA,EAAAynE,MAAA,EACAznE,EAAA0nE,MAAA,EACA1nE,EAAA2nE,MAAA,EACAiB,EAAArR,IAL6B12D,EAS7B,QAAAooE,GAAA1R,EAAAN,GACA,GAAAzrF,GACAw0B,CAGA,OAAAu3D,MAAAv3D,OACAA,EAAAu3D,EAAAv3D,MAGAi3D,EAAA,GACAzrF,EAAA,EACAyrF,OAGAzrF,EAAA,GAAAyrF,GAAA,GACAA,EAAA,KACAA,GAAA,KAKAA,MAAA,GAAAA,EAAA,IACAp2D,GAEA,OAAAb,EAAA5lC,QAAA4lC,EAAAwnE,QAAAvQ,IACAj3D,EAAA5lC,OAAA,MAIA4lC,EAAAx0B,OACAw0B,EAAAwnE,MAAAvQ,EACA+R,EAAAzR,KA1B6B12D,EA6B7B,QAAAylE,GAAA/O,EAAAN,GACA,GAAAuI,GACAx/D,CAEA,OAAAu3D,IAGAv3D,EAAA,GAAAmnE,GAIA5P,EAAAv3D,QACAA,EAAA5lC,OAAA,KACAolG,EAAAyJ,EAAA1R,EAAAN,GACAuI,IAAA/+D,IACA82D,EAAAv3D,MAAA,MAEAw/D,GAbc3+D,EAgBd,QAAAqoE,GAAA3R,GACA,MAAA+O,GAAA/O,EAAA4R,IAkBA,QAAAC,GAAAppE,GAEA,GAAAqpE,GAAA,CACA,GAAAC,EAOA,KALAC,EAAA,GAAA13G,GAAAnB,MAAA,KACA84G,EAAA,GAAA33G,GAAAnB,MAAA,IAGA44G,EAAA,EACAA,EAAA,KAAuBtpE,EAAAqoE,KAAAiB,KAAA,CACvB,MAAAA,EAAA,KAAuBtpE,EAAAqoE,KAAAiB,KAAA,CACvB,MAAAA,EAAA,KAAuBtpE,EAAAqoE,KAAAiB,KAAA,CACvB,MAAAA,EAAA,KAAuBtpE,EAAAqoE,KAAAiB,KAAA,CAMvB,KAJAG,EAAAC,EAAA1pE,EAAAqoE,KAAA,MAAAkB,EAAA,EAAAvpE,EAAAsoE,MAAuE/F,KAAA,IAGvE+G,EAAA,EACAA,EAAA,IAAsBtpE,EAAAqoE,KAAAiB,KAAA,CAEtBG,GAAAE,EAAA3pE,EAAAqoE,KAAA,KAAAmB,EAAA,EAAAxpE,EAAAsoE,MAAuE/F,KAAA,IAGvE8G,IAAA,EAGArpE,EAAA6nE,QAAA0B,EACAvpE,EAAA+nE,QAAA,EACA/nE,EAAA8nE,SAAA0B,EACAxpE,EAAAgoE,SAAA,EAkBA,QAAA4B,GAAArS,EAAA3nG,EAAAk3B,EAAAnQ,GACA,GAAAskB,GACA+E,EAAAu3D,EAAAv3D,KAqCA,OAlCA,QAAAA,EAAA5lC,SACA4lC,EAAAynE,MAAA,GAAAznE,EAAAwnE,MACAxnE,EAAA2nE,MAAA,EACA3nE,EAAA0nE,MAAA,EAEA1nE,EAAA5lC,OAAA,GAAAvI,GAAArB,KAAAwvC,EAAAynE,QAIA9wF,GAAAqpB,EAAAynE,OACA51G,EAAAnC,SAAAswC,EAAA5lC,OAAAxK,EAAAk3B,EAAAkZ,EAAAynE,MAAAznE,EAAAynE,MAAA,GACAznE,EAAA2nE,MAAA,EACA3nE,EAAA0nE,MAAA1nE,EAAAynE,QAGAxsE,EAAA+E,EAAAynE,MAAAznE,EAAA2nE,MACA1sE,EAAAtkB,IACAskB,EAAAtkB,GAGA9kB,EAAAnC,SAAAswC,EAAA5lC,OAAAxK,EAAAk3B,EAAAnQ,EAAAskB,EAAA+E,EAAA2nE,OACAhxF,GAAAskB,EACAtkB,GAEA9kB,EAAAnC,SAAAswC,EAAA5lC,OAAAxK,EAAAk3B,EAAAnQ,IAAA,GACAqpB,EAAA2nE,MAAAhxF,EACAqpB,EAAA0nE,MAAA1nE,EAAAynE,QAGAznE,EAAA2nE,OAAA1sE,EACA+E,EAAA2nE,QAAA3nE,EAAAynE,QAAwCznE,EAAA2nE,MAAA,GACxC3nE,EAAA0nE,MAAA1nE,EAAAynE,QAAsCznE,EAAA0nE,OAAAzsE,KAGtC,EAGA,QAAA07D,GAAAY,EAAAmE,GACA,GAAA17D,GACAR,EAAAI,EACA9zC,EACA+9G,EACAzB,EAAA3rF,EACAmrF,EACArF,EACAuH,EAAAC,EACApzF,EACAqzF,EACAC,GAEAC,GAAAC,GAAAC,GAEAC,GAAAC,GAAAC,GACAz6G,GACA0vG,GAEAgL,GAEArlH,GATAslH,GAAA,EAMAC,GAAA,GAAA74G,GAAArB,KAAA,GAKAm6G,IACA,+CAGA,KAAApT,MAAAv3D,QAAAu3D,EAAA33D,SACA23D,EAAA/3D,OAAA,IAAA+3D,EAAA73D,SACA,MAAAmB,EAGAb,GAAAu3D,EAAAv3D,MACAA,EAAAm4D,OAAAyS,IAA4B5qE,EAAAm4D,KAAA0S,GAI5BhB,EAAAtS,EAAA13D,SACAD,EAAA23D,EAAA33D,OACAnjB,EAAA86E,EAAAz3D,UACAh0C,EAAAyrG,EAAA93D,QACAD,EAAA+3D,EAAA/3D,MACA4oE,EAAA7Q,EAAA73D,SACAkoE,EAAA5nE,EAAA4nE,KACArF,EAAAviE,EAAAuiE,KAGAuH,EAAA1B,EACA2B,EAAAttF,EACA+iF,GAAA/+D,CAEAqqE,GACA,OACA,OAAA9qE,EAAAm4D,MACA,IAAA0Q,GACA,OAAA7oE,EAAAx0B,KAAA,CACAw0B,EAAAm4D,KAAA0S,CACA,OAGA,KAAAtI,EAAA,KACA,OAAA6F,EAAyB,KAAA0C,EACzB1C,KACAR,GAAApoE,EAAA1zC,MAAAy2G,EACAA,GAAA,EAGA,KAAAviE,EAAAx0B,MAAA,QAAAo8F,EAAA,CACA5nE,EAAAunE,MAAA,EAEAmD,GAAA,OAAA9C,EACA8C,GAAA,GAAA9C,IAAA,MACA5nE,EAAAunE,MAAArpE,EAAA8B,EAAAunE,MAAAmD,GAAA,KAIA9C,EAAA,EACArF,EAAA,EAEAviE,EAAAm4D,KAAA4S,CACA,OAMA,GAJA/qE,EAAAqnE,MAAA,EACArnE,EAAAm7D,OACAn7D,EAAAm7D,KAAAjvG,MAAA,KAEA,EAAA8zC,EAAAx0B,UACA,IAAAo8F,IAAA,IAAAA,GAAA,QACArQ,EAAA9jF,IAAA,yBACAusB,EAAAm4D,KAAA6S,EACA,OAEA,OAAApD,KAAAhmE,EAAA,CACA21D,EAAA9jF,IAAA,6BACAusB,EAAAm4D,KAAA6S,EACA,OAOA,GAJApD,KAAA,EACArF,GAAA,EAEAzyG,GAAA,MAAA83G,GACA,IAAA5nE,EAAAwnE,MACAxnE,EAAAwnE,MAAA13G,OAEA,IAAAA,GAAAkwC,EAAAwnE,MAAA,CACAjQ,EAAA9jF,IAAA,sBACAusB,EAAAm4D,KAAA6S,EACA,OAEAhrE,EAAAsnE,KAAA,GAAAx3G,GAEAynG,EAAAx5D,MAAAiC,EAAAunE,MAAA,EACAvnE,EAAAm4D,KAAA,IAAAyP,EAAAqD,EAAAL,EAEAhD,EAAA,EACArF,EAAA,CAEA,MACA,KAAAwI,GAEA,KAAAxI,EAAA,KACA,OAAA6F,EAAyB,KAAA0C,EACzB1C,KACAR,GAAApoE,EAAA1zC,MAAAy2G,EACAA,GAAA,EAIA,GADAviE,EAAAqnE,MAAAO,GACA,IAAA5nE,EAAAqnE,SAAAzlE,EAAA,CACA21D,EAAA9jF,IAAA,6BACAusB,EAAAm4D,KAAA6S,EACA,OAEA,SAAAhrE,EAAAqnE,MAAA,CACA9P,EAAA9jF,IAAA,2BACAusB,EAAAm4D,KAAA6S,EACA,OAEAhrE,EAAAm7D,OACAn7D,EAAAm7D,KAAAp4F,KAAA6kG,GAAA,KAEA,IAAA5nE,EAAAqnE,QAEAqD,GAAA,OAAA9C,EACA8C,GAAA,GAAA9C,IAAA,MACA5nE,EAAAunE,MAAArpE,EAAA8B,EAAAunE,MAAAmD,GAAA,MAIA9C,EAAA,EACArF,EAAA,EAEAviE,EAAAm4D,KAAA+S,CAEA,KAAAA,GAEA,KAAA3I,EAAA,KACA,OAAA6F,EAAyB,KAAA0C,EACzB1C,KACAR,GAAApoE,EAAA1zC,MAAAy2G,EACAA,GAAA,EAGAviE,EAAAm7D,OACAn7D,EAAAm7D,KAAAz4D,KAAAklE,GAEA,IAAA5nE,EAAAqnE,QAEAqD,GAAA,OAAA9C,EACA8C,GAAA,GAAA9C,IAAA,MACA8C,GAAA,GAAA9C,IAAA,OACA8C,GAAA,GAAA9C,IAAA,OACA5nE,EAAAunE,MAAArpE,EAAA8B,EAAAunE,MAAAmD,GAAA,MAIA9C,EAAA,EACArF,EAAA,EAEAviE,EAAAm4D,KAAAgT,CAEA,KAAAA,GAEA,KAAA5I,EAAA,KACA,OAAA6F,EAAyB,KAAA0C,EACzB1C,KACAR,GAAApoE,EAAA1zC,MAAAy2G,EACAA,GAAA,EAGAviE,EAAAm7D,OACAn7D,EAAAm7D,KAAAiQ,OAAA,IAAAxD,EACA5nE,EAAAm7D,KAAA+E,GAAA0H,GAAA,GAEA,IAAA5nE,EAAAqnE,QAEAqD,GAAA,OAAA9C,EACA8C,GAAA,GAAA9C,IAAA,MACA5nE,EAAAunE,MAAArpE,EAAA8B,EAAAunE,MAAAmD,GAAA,MAIA9C,EAAA,EACArF,EAAA,EAEAviE,EAAAm4D,KAAAkT,CAEA,KAAAA,GACA,QAAArrE,EAAAqnE,MAAA,CAEA,KAAA9E,EAAA,KACA,OAAA6F,EAA2B,KAAA0C,EAC3B1C,KACAR,GAAApoE,EAAA1zC,MAAAy2G,EACAA,GAAA,EAGAviE,EAAA91C,OAAA09G,EACA5nE,EAAAm7D,OACAn7D,EAAAm7D,KAAAmQ,UAAA1D,GAEA,IAAA5nE,EAAAqnE,QAEAqD,GAAA,OAAA9C,EACA8C,GAAA,GAAA9C,IAAA,MACA5nE,EAAAunE,MAAArpE,EAAA8B,EAAAunE,MAAAmD,GAAA,MAIA9C,EAAA,EACArF,EAAA,MAGAviE,GAAAm7D,OACAn7D,EAAAm7D,KAAA50E,MAAA,KAEAyZ,GAAAm4D,KAAAoT,CAEA,KAAAA,GACA,QAAAvrE,EAAAqnE,QACA1wF,EAAAqpB,EAAA91C,OACAysB,EAAAyxF,IAA0BzxF,EAAAyxF,GAC1BzxF,IACAqpB,EAAAm7D,OACArrG,GAAAkwC,EAAAm7D,KAAAmQ,UAAAtrE,EAAA91C,OACA81C,EAAAm7D,KAAA50E,QAEAyZ,EAAAm7D,KAAA50E,MAAA,GAAAj+B,OAAA03C,EAAAm7D,KAAAmQ,YAEAz5G,EAAAnC,SACAswC,EAAAm7D,KAAA50E,MACAiZ,EACA1zC,EAGA6qB,EAEA7mB,KAMA,IAAAkwC,EAAAqnE,QACArnE,EAAAunE,MAAArpE,EAAA8B,EAAAunE,MAAA/nE,EAAA7oB,EAAA7qB,IAEAs8G,GAAAzxF,EACA7qB,GAAA6qB,EACAqpB,EAAA91C,QAAAysB,GAEAqpB,EAAA91C,QAA2B,KAAA4gH,EAE3B9qE,GAAA91C,OAAA,EACA81C,EAAAm4D,KAAAqT,CAEA,KAAAA,GACA,QAAAxrE,EAAAqnE,MAAA,CACA,OAAAe,EAAyB,KAAA0C,EACzBn0F,GAAA,CACA,IAEA7mB,GAAA0vC,EAAA1zC,EAAA6qB,KAEAqpB,EAAAm7D,MAAArrG,IACAkwC,EAAA91C,OAAA,QACA81C,EAAAm7D,KAAAx2G,MAAA85C,OAAAC,aAAA5uC,WAESA,IAAA6mB,EAAAyxF,EAOT,IALA,IAAApoE,EAAAqnE,QACArnE,EAAAunE,MAAArpE,EAAA8B,EAAAunE,MAAA/nE,EAAA7oB,EAAA7qB,IAEAs8G,GAAAzxF,EACA7qB,GAAA6qB,EACA7mB,GAAkB,KAAAg7G,OAElB9qE,GAAAm7D,OACAn7D,EAAAm7D,KAAAx2G,KAAA,KAEAq7C,GAAA91C,OAAA,EACA81C,EAAAm4D,KAAAsT,CAEA,KAAAA,GACA,QAAAzrE,EAAAqnE,MAAA,CACA,OAAAe,EAAyB,KAAA0C,EACzBn0F,GAAA,CACA,IACA7mB,GAAA0vC,EAAA1zC,EAAA6qB,KAEAqpB,EAAAm7D,MAAArrG,IACAkwC,EAAA91C,OAAA,QACA81C,EAAAm7D,KAAA5gD,SAAA9b,OAAAC,aAAA5uC,WAESA,IAAA6mB,EAAAyxF,EAMT,IALA,IAAApoE,EAAAqnE,QACArnE,EAAAunE,MAAArpE,EAAA8B,EAAAunE,MAAA/nE,EAAA7oB,EAAA7qB,IAEAs8G,GAAAzxF,EACA7qB,GAAA6qB,EACA7mB,GAAkB,KAAAg7G,OAElB9qE,GAAAm7D,OACAn7D,EAAAm7D,KAAA5gD,QAAA,KAEAva,GAAAm4D,KAAAuT,CAEA,KAAAA,GACA,OAAA1rE,EAAAqnE,MAAA,CAEA,KAAA9E,EAAA,KACA,OAAA6F,EAA2B,KAAA0C,EAC3B1C,KACAR,GAAApoE,EAAA1zC,MAAAy2G,EACAA,GAAA,EAGA,GAAAqF,KAAA,MAAA5nE,EAAAunE,OAAA,CACAhQ,EAAA9jF,IAAA,sBACAusB,EAAAm4D,KAAA6S,EACA,OAGApD,EAAA,EACArF,EAAA,EAGAviE,EAAAm7D,OACAn7D,EAAAm7D,KAAA8E,KAAAjgE,EAAAqnE,OAAA,IACArnE,EAAAm7D,KAAAjvG,MAAA,GAEAqrG,EAAAx5D,MAAAiC,EAAAunE,MAAA,EACAvnE,EAAAm4D,KAAAyS,CACA,MACA,KAAAK,GAEA,KAAA1I,EAAA,KACA,OAAA6F,EAAyB,KAAA0C,EACzB1C,KACAR,GAAApoE,EAAA1zC,MAAAy2G,EACAA,GAAA,EAGAhL,EAAAx5D,MAAAiC,EAAAunE,MAAAL,EAAAU,GAEAA,EAAA,EACArF,EAAA,EAEAviE,EAAAm4D,KAAAwT,CAEA,KAAAA,GACA,OAAA3rE,EAAAonE,SASA,MAPA7P,GAAA13D,SAAAgqE,EACAtS,EAAAz3D,UAAArjB,EACA86E,EAAA93D,QAAA3zC,EACAyrG,EAAA73D,SAAA0oE,EACApoE,EAAA4nE,OACA5nE,EAAAuiE,OAEA5hE,CAEA42D,GAAAx5D,MAAAiC,EAAAunE,MAAA,EACAvnE,EAAAm4D,KAAAyS,CAEA,KAAAA,GACA,GAAAlP,IAAAn7D,GAAAm7D,IAAAl7D,EAAmD,KAAAsqE,EAEnD,KAAAD,GACA,GAAA7qE,EAAAg5D,KAAA,CAEA4O,KAAA,EAAArF,EACAA,GAAA,EAAAA,EAEAviE,EAAAm4D,KAAAyT,EACA,OAGA,KAAArJ,EAAA,IACA,OAAA6F,EAAyB,KAAA0C,EACzB1C,KACAR,GAAApoE,EAAA1zC,MAAAy2G,EACAA,GAAA,EASA,OANAviE,EAAAg5D,KAAA,EAAA4O,EAEAA,KAAA,EACArF,GAAA,EAGA,EAAAqF,GACA,OAGA5nE,EAAAm4D,KAAA0T,CACA,MACA,QAKA,GAJAzC,EAAAppE,GAGAA,EAAAm4D,KAAA2T,GACApQ,IAAAl7D,EAAA,CAEAonE,KAAA,EACArF,GAAA,CAEA,MAAAuI,GAEA,KACA,QAGA9qE,EAAAm4D,KAAA4T,CACA,MACA,QACAxU,EAAA9jF,IAAA,qBACAusB,EAAAm4D,KAAA6S,GAGApD,KAAA,EACArF,GAAA,CAEA,MACA,KAAAsJ,GAMA,IAJAjE,KAAA,EAAArF,EACAA,GAAA,EAAAA,EAGAA,EAAA,KACA,OAAA6F,EAAyB,KAAA0C,EACzB1C,KACAR,GAAApoE,EAAA1zC,MAAAy2G,EACAA,GAAA,EAGA,UAAAqF,SAAA,WACArQ,EAAA9jF,IAAA,+BACAusB,EAAAm4D,KAAA6S,EACA,OAUA,GARAhrE,EAAA91C,OAAA,MAAA09G,EAIAA,EAAA,EACArF,EAAA,EAEAviE,EAAAm4D,KAAA6T,EACAtQ,IAAAl7D,EAA8B,KAAAsqE,EAE9B,KAAAkB,GACAhsE,EAAAm4D,KAAA8T,CAEA,KAAAA,GAEA,GADAt1F,EAAAqpB,EAAA91C,OACA,CAGA,GAFAysB,EAAAyxF,IAA0BzxF,EAAAyxF,GAC1BzxF,EAAA8F,IAA0B9F,EAAA8F,GAC1B,IAAA9F,EAAyB,KAAAm0F,EAEzBj5G,GAAAnC,SAAAkwC,EAAAJ,EAAA1zC,EAAA6qB,EAAAkzF,GAEAzB,GAAAzxF,EACA7qB,GAAA6qB,EACA8F,GAAA9F,EACAkzF,GAAAlzF,EACAqpB,EAAA91C,QAAAysB,CACA,OAGAqpB,EAAAm4D,KAAAyS,CACA,MACA,KAAAmB,GAEA,KAAAxJ,EAAA,KACA,OAAA6F,EAAyB,KAAA0C,EACzB1C,KACAR,GAAApoE,EAAA1zC,MAAAy2G,EACAA,GAAA,EAmBA,GAhBAviE,EAAAkoE,KAAA,QAAAN,GAEAA,KAAA,EACArF,GAAA,EAEAviE,EAAAmoE,MAAA,MAAAP,GAEAA,KAAA,EACArF,GAAA,EAEAviE,EAAAioE,MAAA,MAAAL,GAEAA,KAAA,EACArF,GAAA,EAGAviE,EAAAkoE,KAAA,KAAAloE,EAAAmoE,MAAA,IACA5Q,EAAA9jF,IAAA,sCACAusB,EAAAm4D,KAAA6S,EACA,OAIAhrE,EAAAooE,KAAA,EACApoE,EAAAm4D,KAAA+T,EAEA,KAAAA,IACA,KAAAlsE,EAAAooE,KAAApoE,EAAAioE,OAAA,CAEA,KAAA1F,EAAA,IACA,OAAA6F,EAA2B,KAAA0C,EAC3B1C,KACAR,GAAApoE,EAAA1zC,MAAAy2G,EACAA,GAAA,EAGAviE,EAAAqoE,KAAAsC,GAAA3qE,EAAAooE,SAAA,EAAAR,EAEAA,KAAA,EACArF,GAAA,EAGA,KAAAviE,EAAAooE,KAAA,IACApoE,EAAAqoE,KAAAsC,GAAA3qE,EAAAooE,SAAA,CAaA,IAPApoE,EAAA6nE,QAAA7nE,EAAAuoE,OACAvoE,EAAA+nE,QAAA,EAEAyC,IAAcjI,KAAAviE,EAAA+nE,SACdvI,GAAAiK,EAAA0C,EAAAnsE,EAAAqoE,KAAA,KAAAroE,EAAA6nE,QAAA,EAAA7nE,EAAAsoE,KAAAkC,IACAxqE,EAAA+nE,QAAAyC,GAAAjI,KAEA/C,GAAA,CACAjI,EAAA9jF,IAAA,2BACAusB,EAAAm4D,KAAA6S,EACA,OAGAhrE,EAAAooE,KAAA,EACApoE,EAAAm4D,KAAAiU,EAEA,KAAAA,IACA,KAAApsE,EAAAooE,KAAApoE,EAAAkoE,KAAAloE,EAAAmoE,OAAA,CACA,KACAsC,GAAAzqE,EAAA6nE,QAAAD,GAAA,GAAA5nE,EAAA+nE,SAAA,GACAmC,GAAAO,KAAA,GACAN,GAAAM,KAAA,OACAL,GAAA,MAAAK,KAEA,IAAAlI,IANe,CAQf,OAAA6F,EAA2B,KAAA0C,EAC3B1C,KACAR,GAAApoE,EAAA1zC,MAAAy2G,EACAA,GAAA,EAGA,GAAA6H,GAAA,GAEAxC,KAAAsC,GACA3H,GAAA2H,GAEAlqE,EAAAqoE,KAAAroE,EAAAooE,QAAAgC,OAEA,CACA,QAAAA,GAAA,CAGA,IADAjlH,GAAA+kH,GAAA,EACA3H,EAAAp9G,IAAA,CACA,OAAAijH,EAA+B,KAAA0C,EAC/B1C,KACAR,GAAApoE,EAAA1zC,MAAAy2G,EACAA,GAAA,EAOA,GAHAqF,KAAAsC,GACA3H,GAAA2H,GAEA,IAAAlqE,EAAAooE,KAAA,CACA7Q,EAAA9jF,IAAA,4BACAusB,EAAAm4D,KAAA6S,EACA,OAEAl7G,GAAAkwC,EAAAqoE,KAAAroE,EAAAooE,KAAA,GACAzxF,EAAA,KAAAixF,GAEAA,KAAA,EACArF,GAAA,MAGA,SAAA6H,GAAA,CAGA,IADAjlH,GAAA+kH,GAAA,EACA3H,EAAAp9G,IAAA,CACA,OAAAijH,EAA+B,KAAA0C,EAC/B1C,KACAR,GAAApoE,EAAA1zC,MAAAy2G,EACAA,GAAA,EAIAqF,KAAAsC,GACA3H,GAAA2H,GAEAp6G,GAAA,EACA6mB,EAAA,KAAAixF,GAEAA,KAAA,EACArF,GAAA,MAGA,CAGA,IADAp9G,GAAA+kH,GAAA,EACA3H,EAAAp9G,IAAA,CACA,OAAAijH,EAA+B,KAAA0C,EAC/B1C,KACAR,GAAApoE,EAAA1zC,MAAAy2G,EACAA,GAAA,EAIAqF,KAAAsC,GACA3H,GAAA2H,GAEAp6G,GAAA,EACA6mB,EAAA,QAAAixF,GAEAA,KAAA,EACArF,GAAA,EAGA,GAAAviE,EAAAooE,KAAAzxF,EAAAqpB,EAAAkoE,KAAAloE,EAAAmoE,MAAA,CACA5Q,EAAA9jF,IAAA,4BACAusB,EAAAm4D,KAAA6S,EACA,OAEA,KAAAr0F,KACAqpB,EAAAqoE,KAAAroE,EAAAooE,QAAAt4G,IAMA,GAAAkwC,EAAAm4D,OAAA6S,GAA+B,KAG/B,QAAAhrE,EAAAqoE,KAAA,MACA9Q,EAAA9jF,IAAA,uCACAusB,EAAAm4D,KAAA6S,EACA,OAeA,GATAhrE,EAAA+nE,QAAA,EAEAyC,IAAcjI,KAAAviE,EAAA+nE,SACdvI,GAAAiK,EAAAC,EAAA1pE,EAAAqoE,KAAA,EAAAroE,EAAAkoE,KAAAloE,EAAA6nE,QAAA,EAAA7nE,EAAAsoE,KAAAkC,IAGAxqE,EAAA+nE,QAAAyC,GAAAjI,KAGA/C,GAAA,CACAjI,EAAA9jF,IAAA,8BACAusB,EAAAm4D,KAAA6S,EACA,OAcA,GAXAhrE,EAAAgoE,SAAA,EAGAhoE,EAAA8nE,SAAA9nE,EAAAwoE,QACAgC,IAAcjI,KAAAviE,EAAAgoE,UACdxI,GAAAiK,EAAAE,EAAA3pE,EAAAqoE,KAAAroE,EAAAkoE,KAAAloE,EAAAmoE,MAAAnoE,EAAA8nE,SAAA,EAAA9nE,EAAAsoE,KAAAkC,IAGAxqE,EAAAgoE,SAAAwC,GAAAjI,KAGA/C,GAAA,CACAjI,EAAA9jF,IAAA,wBACAusB,EAAAm4D,KAAA6S,EACA,OAIA,GADAhrE,EAAAm4D,KAAA2T,GACApQ,IAAAl7D,EAA8B,KAAAsqE,EAE9B,KAAAgB,IACA9rE,EAAAm4D,KAAAkU,EAEA,KAAAA,IACA,GAAAjE,GAAA,GAAA3rF,GAAA,KAEA86E,EAAA13D,SAAAgqE,EACAtS,EAAAz3D,UAAArjB,EACA86E,EAAA93D,QAAA3zC,EACAyrG,EAAA73D,SAAA0oE,EACApoE,EAAA4nE,OACA5nE,EAAAuiE,OAEA+J,EAAA/U,EAAAwS,GAEAF,EAAAtS,EAAA13D,SACAD,EAAA23D,EAAA33D,OACAnjB,EAAA86E,EAAAz3D,UACAh0C,EAAAyrG,EAAA93D,QACAD,EAAA+3D,EAAA/3D,MACA4oE,EAAA7Q,EAAA73D,SACAkoE,EAAA5nE,EAAA4nE,KACArF,EAAAviE,EAAAuiE,KAGAviE,EAAAm4D,OAAAyS,IACA5qE,EAAA0oE,MAAA,EAEA,OAGA,IADA1oE,EAAA0oE,KAAA,EAEA+B,GAAAzqE,EAAA6nE,QAAAD,GAAA,GAAA5nE,EAAA+nE,SAAA,GACAmC,GAAAO,KAAA,GACAN,GAAAM,KAAA,OACAL,GAAA,MAAAK,KAEAP,IAAA3H,IANa,CAQb,OAAA6F,EAAyB,KAAA0C,EACzB1C,KACAR,GAAApoE,EAAA1zC,MAAAy2G,EACAA,GAAA,EAGA,GAAA4H,IAAA,QAAAA,IAAA,CAIA,IAHAE,GAAAH,GACAI,GAAAH,GACAI,GAAAH,GAEAK,GAAAzqE,EAAA6nE,QAAA0C,KACA3C,GAAA,GAAAyC,GAAAC,IAAA,IAAAD,KACAH,GAAAO,KAAA,GACAN,GAAAM,KAAA,OACAL,GAAA,MAAAK,KAEAJ,GAAAH,IAAA3H,IAPe,CASf,OAAA6F,EAA2B,KAAA0C,EAC3B1C,KACAR,GAAApoE,EAAA1zC,MAAAy2G,EACAA,GAAA,EAIAqF,KAAAyC,GACA9H,GAAA8H,GAEArqE,EAAA0oE,MAAA2B,GAQA,GALAzC,KAAAsC,GACA3H,GAAA2H,GAEAlqE,EAAA0oE,MAAAwB,GACAlqE,EAAA91C,OAAAkgH,GACA,IAAAD,GAAA,CAIAnqE,EAAAm4D,KAAAoU,EACA,OAEA,MAAApC,GAAA,CAEAnqE,EAAA0oE,MAAA,EACA1oE,EAAAm4D,KAAAyS,CACA,OAEA,MAAAT,GAAA,CACA5S,EAAA9jF,IAAA,8BACAusB,EAAAm4D,KAAA6S,EACA,OAEAhrE,EAAAzZ,MAAA,GAAA4jF,GACAnqE,EAAAm4D,KAAAqU,EAEA,KAAAA,IACA,GAAAxsE,EAAAzZ,MAAA,CAGA,IADAphC,GAAA66C,EAAAzZ,MACAg8E,EAAAp9G,IAAA,CACA,OAAAijH,EAA2B,KAAA0C,EAC3B1C,KACAR,GAAApoE,EAAA1zC,MAAAy2G,EACAA,GAAA,EAGAviE,EAAA91C,QAAA09G,GAAA,GAAA5nE,EAAAzZ,OAAA,EAEAqhF,KAAA5nE,EAAAzZ,MACAg8E,GAAAviE,EAAAzZ,MAEAyZ,EAAA0oE,MAAA1oE,EAAAzZ,MAGAyZ,EAAA2oE,IAAA3oE,EAAA91C,OACA81C,EAAAm4D,KAAAsU,EAEA,KAAAA,IACA,KACAhC,GAAAzqE,EAAA8nE,SAAAF,GAAA,GAAA5nE,EAAAgoE,UAAA,GACAkC,GAAAO,KAAA,GACAN,GAAAM,KAAA,OACAL,GAAA,MAAAK,KAEA,IAAAlI,IANa,CAQb,OAAA6F,EAAyB,KAAA0C,EACzB1C,KACAR,GAAApoE,EAAA1zC,MAAAy2G,EACAA,GAAA,EAGA,WAAA4H,IAAA,CAIA,IAHAE,GAAAH,GACAI,GAAAH,GACAI,GAAAH,GAEAK,GAAAzqE,EAAA8nE,SAAAyC,KACA3C,GAAA,GAAAyC,GAAAC,IAAA,IAAAD,KACAH,GAAAO,KAAA,GACAN,GAAAM,KAAA,OACAL,GAAA,MAAAK,KAEAJ,GAAAH,IAAA3H,IAPe,CASf,OAAA6F,EAA2B,KAAA0C,EAC3B1C,KACAR,GAAApoE,EAAA1zC,MAAAy2G,EACAA,GAAA,EAIAqF,KAAAyC,GACA9H,GAAA8H,GAEArqE,EAAA0oE,MAAA2B,GAOA,GAJAzC,KAAAsC,GACA3H,GAAA2H,GAEAlqE,EAAA0oE,MAAAwB,GACA,GAAAC,GAAA,CACA5S,EAAA9jF,IAAA,wBACAusB,EAAAm4D,KAAA6S,EACA,OAEAhrE,EAAAroC,OAAAyyG,GACApqE,EAAAzZ,MAAA,MACAyZ,EAAAm4D,KAAAuU,EAEA,KAAAA,IACA,GAAA1sE,EAAAzZ,MAAA,CAGA,IADAphC,GAAA66C,EAAAzZ,MACAg8E,EAAAp9G,IAAA,CACA,OAAAijH,EAA2B,KAAA0C,EAC3B1C,KACAR,GAAApoE,EAAA1zC,MAAAy2G,EACAA,GAAA,EAGAviE,EAAAroC,QAAAiwG,GAAA,GAAA5nE,EAAAzZ,OAAA,EAEAqhF,KAAA5nE,EAAAzZ,MACAg8E,GAAAviE,EAAAzZ,MAEAyZ,EAAA0oE,MAAA1oE,EAAAzZ,MAGA,GAAAyZ,EAAAroC,OAAAqoC,EAAAsnE,KAAA,CACA/P,EAAA9jF,IAAA,gCACAusB,EAAAm4D,KAAA6S,EACA,OAIAhrE,EAAAm4D,KAAAwU,EAEA,KAAAA,IACA,OAAAlwF,EAAuB,KAAAquF,EAEvB,IADAn0F,EAAAozF,EAAAttF,EACAujB,EAAAroC,OAAAgf,EAAA,CAEA,IADAA,EAAAqpB,EAAAroC,OAAAgf,GACAqpB,EAAA0nE,OACA1nE,EAAAyoE,KAAA,CACAlR,EAAA9jF,IAAA,gCACAusB,EAAAm4D,KAAA6S,EACA,OAkBAr0F,EAAAqpB,EAAA2nE,OACAhxF,GAAAqpB,EAAA2nE,MACAqC,EAAAhqE,EAAAynE,MAAA9wF,GAGAqzF,EAAAhqE,EAAA2nE,MAAAhxF,EAEAA,EAAAqpB,EAAA91C,SAAkCysB,EAAAqpB,EAAA91C,QAClC+/G,GAAAjqE,EAAA5lC,WAGA6vG,IAAArqE,EACAoqE,EAAAH,EAAA7pE,EAAAroC,OACAgf,EAAAqpB,EAAA91C,MAEAysB,GAAA8F,IAAwB9F,EAAA8F,GACxBA,GAAA9F,EACAqpB,EAAA91C,QAAAysB,CACA,IACAipB,EAAAiqE,KAAAI,GAAAD,aACOrzF,EACP,KAAAqpB,EAAA91C,SAA+B81C,EAAAm4D,KAAAkU,GAC/B,MACA,KAAAE,IACA,OAAA9vF,EAAuB,KAAAquF,EACvBlrE,GAAAiqE,KAAA7pE,EAAA91C,OACAuyB,IACAujB,EAAAm4D,KAAAkU,EACA,MACA,KAAAT,IACA,GAAA5rE,EAAAx0B,KAAA,CAEA,KAAA+2F,EAAA,KACA,OAAA6F,EAA2B,KAAA0C,EAC3B1C,KAEAR,GAAApoE,EAAA1zC,MAAAy2G,EACAA,GAAA,EAcA,GAXAwH,GAAAttF,EACA86E,EAAAx3D,WAAAgqE,EACA/pE,EAAA49C,OAAAmsB,EACAA,IACAxS,EAAAx5D,MAAAiC,EAAAunE,MAEAvnE,EAAAqnE,MAAAnpE,EAAA8B,EAAAunE,MAAA3nE,EAAAmqE,EAAAF,EAAAE,GAAAjsE,EAAAkC,EAAAunE,MAAA3nE,EAAAmqE,EAAAF,EAAAE,IAGAA,EAAAttF,GAEAujB,EAAAqnE,MAAAO,EAAAV,EAAAU,MAAA5nE,EAAAunE,MAAA,CACAhQ,EAAA9jF,IAAA,uBACAusB,EAAAm4D,KAAA6S,EACA,OAGApD,EAAA,EACArF,EAAA,EAIAviE,EAAAm4D,KAAAyU,EAEA,KAAAA,IACA,GAAA5sE,EAAAx0B,MAAAw0B,EAAAqnE,MAAA,CAEA,KAAA9E,EAAA,KACA,OAAA6F,EAA2B,KAAA0C,EAC3B1C,KACAR,GAAApoE,EAAA1zC,MAAAy2G,EACAA,GAAA,EAGA,GAAAqF,KAAA,WAAA5nE,EAAA49C,OAAA,CACA2Z,EAAA9jF,IAAA,yBACAusB,EAAAm4D,KAAA6S,EACA,OAGApD,EAAA,EACArF,EAAA,EAIAviE,EAAAm4D,KAAA0U,EAEA,KAAAA,IACArN,GAAA9+D,CACA,MAAAoqE,EACA,KAAAE,IACAxL,GAAA1+D,CACA,MAAAgqE,EACA,KAAAgC,IACA,MAAAC,EACA,KAAAC,IAEA,QACA,MAAAnsE,GAsBA,MARA02D,GAAA13D,SAAAgqE,EACAtS,EAAAz3D,UAAArjB,EACA86E,EAAA93D,QAAA3zC,EACAyrG,EAAA73D,SAAA0oE,EACApoE,EAAA4nE,OACA5nE,EAAAuiE,QAGAviE,EAAAynE,OAAAsC,IAAAxS,EAAAz3D,WAAAE,EAAAm4D,KAAA6S,KACAhrE,EAAAm4D,KAAAyT,IAAAlQ,IAAAp7D,KACAspE,EAAArS,IAAA33D,OAAA23D,EAAA13D,SAAAkqE,EAAAxS,EAAAz3D,YACAE,EAAAm4D,KAAA2U,GACAC,IAGAjD,GAAAvS,EAAA73D,SACAqqE,GAAAxS,EAAAz3D,UACAy3D,EAAA53D,UAAAmqE,EACAvS,EAAAx3D,WAAAgqE,EACA/pE,EAAA49C,OAAAmsB,EACA/pE,EAAAx0B,MAAAu+F,IACAxS,EAAAx5D,MAAAiC,EAAAunE,MACAvnE,EAAAqnE,MAAAnpE,EAAA8B,EAAAunE,MAAA3nE,EAAAmqE,EAAAxS,EAAA13D,SAAAkqE,GAAAjsE,EAAAkC,EAAAunE,MAAA3nE,EAAAmqE,EAAAxS,EAAA13D,SAAAkqE,IAEAxS,EAAAt3D,UAAAD,EAAAuiE,MAAAviE,EAAAg5D,KAAA,OACAh5D,EAAAm4D,OAAAyS,EAAA,QACA5qE,EAAAm4D,OAAA2T,IAAA9rE,EAAAm4D,OAAA6T,EAAA,QACA,IAAAlC,GAAA,IAAAC,GAAArO,IAAAp7D,IAAAk/D,KAAA/+D,IACA++D,GAAAz+D,GAEAy+D,IAGA,QAAAwH,GAAAzP,GAEA,IAAAA,MAAAv3D,MACA,MAAAa,EAGA,IAAAb,GAAAu3D,EAAAv3D,KAKA,OAJAA,GAAA5lC,SACA4lC,EAAA5lC,OAAA,MAEAm9F,EAAAv3D,MAAA,KACAS,EAGA,QAAA+lE,GAAAjP,EAAA4D,GACA,GAAAn7D,EAGA,OAAAu3D,MAAAv3D,OACAA,EAAAu3D,EAAAv3D,MACA,MAAAA,EAAAx0B,MAA+Bq1B,GAG/Bb,EAAAm7D,OACAA,EAAAjvG,MAAA,EACAu0C,IAP6BI,EAU7B,QAAAkmE,GAAAxP,EAAAK,GACA,GAEA53D,GACAitE,EAHAlM,EAAAnJ,EAAA1tG,MAOA,OAAAqtG,MAAAv3D,OACAA,EAAAu3D,EAAAv3D,MAEA,IAAAA,EAAAx0B,MAAAw0B,EAAAm4D,OAAAwT,EACA9qE,EAIAb,EAAAm4D,OAAAwT,IACAsB,EAAA,GAEAA,EAAAnvE,EAAAmvE,EAAArV,EAAAmJ,EAAA,MACA/gE,EAAAunE,OACAzmE,EAKA8oE,EAAArS,EAAAK,EAAAmJ,MAEA/gE,EAAAm4D,KAAA2U,GACAC,IAEA/sE,EAAAonE,SAAA,EAEA3mE,IAzB6DI,EA/8C7D,GA2QA0oE,GAAAC,EA3QA33G,EAAA7N,EAAA,GACA85C,EAAA95C,EAAA,IACAk6C,EAAAl6C,EAAA,IACAsoH,EAAAtoH,EAAA,IACAylH,EAAAzlH,EAAA,IAEAmoH,EAAA,EACAzC,EAAA,EACAC,EAAA,EAWArpE,EAAA,EACAC,EAAA,EACAC,EAAA,EAMAC,EAAA,EACAC,EAAA,EACAC,EAAA,EAEAE,GAAA,EACAC,GAAA,EACAisE,GAAA,EACAhsE,GAAA,EAIAa,EAAA,EAOAinE,EAAA,EACAkC,EAAA,EACAG,EAAA,EACAC,EAAA,EACAE,EAAA,EACAE,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,EACAT,EAAA,GACAU,EAAA,GACAf,EAAA,GACAC,EAAA,GACAgB,EAAA,GACAG,EAAA,GACAC,EAAA,GACAF,EAAA,GACAG,GAAA,GACAE,GAAA,GACAN,GAAA,GACAO,GAAA,GACAG,GAAA,GACAC,GAAA,GACAC,GAAA,GACAC,GAAA,GACAJ,GAAA,GACAX,GAAA,GACAgB,GAAA,GACAC,GAAA,GACA7B,GAAA,GACA8B,GAAA,GACAE,GAAA,GAMAlE,GAAA,IACAC,GAAA,IAKAI,GAFA,GAmLAE,IAAA,CAkuCAllH,GAAA6kH,eACA7kH,EAAA8kH,gBACA9kH,EAAAykH,mBACAzkH,EAAA+kH,cACA/kH,EAAAmiH,eACAniH,EAAAwyG,UACAxyG,EAAA6iH,aACA7iH,EAAAqiH,mBACAriH,EAAA4iH,uBACA5iH,EAAA+oH,YAAA,sChD4qrBM,SAAU9oH,EAAQD,EAASH,GAEjC,YiD3nuBAI,GAAAD,QAAA,SAAAozG,EAAA1wE,GACA,GAAAmZ,GACA8pE,EACA9Q,EACA+Q,EACAjK,EACAh5E,EAEAwgF,EAEAG,EACAC,EACAC,EAEAwF,EACAvF,EACArF,EACA6K,EACAC,EACAC,EACAC,EACA9C,EACAh+G,EAEAqD,EACAmrC,EACA+uE,EACAC,EAGAzqE,EAAAI,CAGAI,GAAAu3D,EAAAv3D,MAEA8pE,EAAAvS,EAAA93D,QACAD,EAAA+3D,EAAA/3D,MACAw5D,EAAA8Q,GAAAvS,EAAA73D,SAAA,GACAqqE,EAAAxS,EAAA13D,SACAD,EAAA23D,EAAA33D,OACAkgE,EAAAiK,GAAAljF,EAAA0wE,EAAAz3D,WACAhZ,EAAAijF,GAAAxS,EAAAz3D,UAAA,KAEAwnE,EAAAtnE,EAAAsnE,KAEAG,EAAAznE,EAAAynE,MACAC,EAAA1nE,EAAA0nE,MACAC,EAAA3nE,EAAA2nE,MACAwF,EAAAntE,EAAA5lC,OACAwtG,EAAA5nE,EAAA4nE,KACArF,EAAAviE,EAAAuiE,KACA6K,EAAAptE,EAAA6nE,QACAwF,EAAArtE,EAAA8nE,SACAwF,GAAA,GAAAttE,EAAA+nE,SAAA,EACAwF,GAAA,GAAAvtE,EAAAgoE,UAAA,CAMAprF,GACA,GACA2lF,EAAA,KACAqF,GAAApoE,EAAAsqE,MAAAvH,EACAA,GAAA,EACAqF,GAAApoE,EAAAsqE,MAAAvH,EACAA,GAAA,GAGAkI,EAAA2C,EAAAxF,EAAA0F,EAEAE,GACA,OAAW,CAKX,GAJA/gH,EAAAg+G,IAAA,GACA7C,KAAAn7G,EACA81G,GAAA91G,EAEA,KADAA,EAAAg+G,IAAA,QAKA7qE,EAAAmqE,KAAA,MAAAU,MAEA,SAAAh+G,GAwKA,WAAAA,GAAA,CACAg+G,EAAA2C,GAAA,MAAA3C,IAAA7C,GAAA,GAAAn7G,GAAA,GACA,SAAA+gH,GAEA,MAAA/gH,EAAA,CAEAuzC,EAAAm4D,KAtSA,EAuSA,MAAAv7E,GAGA26E,EAAA9jF,IAAA,8BACAusB,EAAAm4D,KA5SA,EA6SA,MAAAv7E,GAnLA9sB,EAAA,MAAA26G,EACAh+G,GAAA,GACAA,IACA81G,EAAA91G,IACAm7G,GAAApoE,EAAAsqE,MAAAvH,EACAA,GAAA,GAEAzyG,GAAA83G,GAAA,GAAAn7G,GAAA,EACAm7G,KAAAn7G,EACA81G,GAAA91G,GAGA81G,EAAA,KACAqF,GAAApoE,EAAAsqE,MAAAvH,EACAA,GAAA,EACAqF,GAAApoE,EAAAsqE,MAAAvH,EACAA,GAAA,GAEAkI,EAAA4C,EAAAzF,EAAA2F,EAEAE,GACA,OAAe,CAMf,GALAhhH,EAAAg+G,IAAA,GACA7C,KAAAn7G,EACA81G,GAAA91G,IAGA,IAFAA,EAAAg+G,IAAA,SAiIA,WAAAh+G,GAAA,CACAg+G,EAAA4C,GAAA,MAAA5C,IAAA7C,GAAA,GAAAn7G,GAAA,GACA,SAAAghH,GAGAlW,EAAA9jF,IAAA,wBACAusB,EAAAm4D,KA1RA,EA2RA,MAAAv7E,GAzHA,GAZAqe,EAAA,MAAAwvE,EACAh+G,GAAA,GACA81G,EAAA91G,IACAm7G,GAAApoE,EAAAsqE,MAAAvH,GACAA,GAAA,GACA91G,IACAm7G,GAAApoE,EAAAsqE,MAAAvH,EACAA,GAAA,KAGAtnE,GAAA2sE,GAAA,GAAAn7G,GAAA,GAEA66G,EAAA,CACA/P,EAAA9jF,IAAA,gCACAusB,EAAAm4D,KApKA,EAqKA,MAAAv7E,GAOA,GAJAgrF,KAAAn7G,EACA81G,GAAA91G,EAEAA,EAAAs9G,EAAAjK,EACA7kE,EAAAxuC,EAAA,CAEA,IADAA,EAAAwuC,EAAAxuC,GACAi7G,GACA1nE,EAAAyoE,KAAA,CACAlR,EAAA9jF,IAAA,gCACAusB,EAAAm4D,KAjLA,EAkLA,MAAAv7E,GA2BA,GAFAotF,EAAA,EACAC,EAAAkD,EACA,IAAAxF,GAEA,GADAqC,GAAAvC,EAAAh7G,EACAA,EAAAqD,EAAA,CACAA,GAAArD,CACA,IACAmzC,EAAAmqE,KAAAoD,EAAAnD,aACmBv9G,EACnBu9G,GAAAD,EAAA9uE,EACAgvE,EAAArqE,OAGA,IAAA+nE,EAAAl7G,GAGA,GAFAu9G,GAAAvC,EAAAE,EAAAl7G,GACAA,GAAAk7G,GACA73G,EAAA,CACAA,GAAArD,CACA,IACAmzC,EAAAmqE,KAAAoD,EAAAnD,aACmBv9G,EAEnB,IADAu9G,EAAA,EACArC,EAAA73G,EAAA,CACArD,EAAAk7G,EACA73G,GAAArD,CACA,IACAmzC,EAAAmqE,KAAAoD,EAAAnD,aACqBv9G,EACrBu9G,GAAAD,EAAA9uE,EACAgvE,EAAArqE,QAMA,IADAoqE,GAAArC,EAAAl7G,EACAA,EAAAqD,EAAA,CACAA,GAAArD,CACA,IACAmzC,EAAAmqE,KAAAoD,EAAAnD,aACmBv9G,EACnBu9G,GAAAD,EAAA9uE,EACAgvE,EAAArqE,EAGA,KAAA9vC,EAAA,GACA8vC,EAAAmqE,KAAAE,EAAAD,KACApqE,EAAAmqE,KAAAE,EAAAD,KACApqE,EAAAmqE,KAAAE,EAAAD,KACAl6G,GAAA,CAEAA,KACA8vC,EAAAmqE,KAAAE,EAAAD,KACAl6G,EAAA,IACA8vC,EAAAmqE,KAAAE,EAAAD,WAIA,CACAA,EAAAD,EAAA9uE,CACA,IACA2E,EAAAmqE,KAAAnqE,EAAAoqE,KACApqE,EAAAmqE,KAAAnqE,EAAAoqE,KACApqE,EAAAmqE,KAAAnqE,EAAAoqE,KACAl6G,GAAA,QACeA,EAAA,EACfA,KACA8vC,EAAAmqE,KAAAnqE,EAAAoqE,KACAl6G,EAAA,IACA8vC,EAAAmqE,KAAAnqE,EAAAoqE,OAeA,OAkBA,aAEGF,EAAA9Q,GAAA+Q,EAAAjjF,EAGHh3B,GAAAyyG,GAAA,EACAuH,GAAAh6G,EACAyyG,GAAAzyG,GAAA,EACA83G,IAAA,GAAArF,GAAA,EAGAhL,EAAA93D,QAAAqqE,EACAvS,EAAA13D,SAAAkqE,EACAxS,EAAA73D,SAAAoqE,EAAA9Q,IAAA8Q,EAAA,KAAAA,EAAA9Q,GACAzB,EAAAz3D,UAAAiqE,EAAAjjF,IAAAijF,EAAA,SAAAA,EAAAjjF,GACAkZ,EAAA4nE,OACA5nE,EAAAuiE,SjD+ruBM,SAAUn+G,EAAQD,EAASH,GAEjC,YkDlgvBA,IAAA6N,GAAA7N,EAAA,GAWA0pH,GACA,yCACA,kDAGAC,GACA,gDACA,8CAGAC,GACA,2CACA,8CACA,4BAGAC,GACA,gDACA,8BACA,kBAGAzpH,GAAAD,QAAA,SAAA4E,EAAAs/G,EAAAyF,EAAAC,EAAA1vE,EAAA2vE,EAAA1F,EAAAkC,GAEA,GAYAyD,GACAC,EACAC,EACAC,EACAtiH,EAIAg7B,EAMAojF,EAAAC,EAAAC,EA1BA7H,EAAAiI,EAAAjI,KAGAzyG,EAAA,EACAw5G,EAAA,EACAn+F,EAAA,EAAA5hB,EAAA,EACAoH,EAAA,EACA09G,EAAA,EACAvoB,EAAA,EACArpE,EAAA,EACAtV,EAAA,EACAmnG,EAAA,EAMAniF,EAAA,KACAoiF,EAAA,EAGA9zG,EAAA,GAAA5I,GAAApB,MAAA+9G,IACAC,EAAA,GAAA58G,GAAApB,MAAA+9G,IACAjoF,EAAA,KACAmoF,EAAA,CAoCA,KAAA5+G,EAAA,EAAeA,GA7Ff,GA6F+BA,IAC/B2K,EAAA3K,GAAA,CAEA,KAAAw5G,EAAA,EAAeA,EAAAyE,EAAazE,IAC5B7uG,EAAA4tG,EAAAyF,EAAAxE,KAKA,KADA34G,EAAA4xG,EACAh5G,EAtGA,GAsGqBA,GAAA,GACrB,IAAAkR,EAAAlR,GAD+BA,KAM/B,GAHAoH,EAAApH,IACAoH,EAAApH,GAEA,IAAAA,EAaA,MATA80C,GAAA2vE,KAAA,SAMA3vE,EAAA2vE,KAAA,SAEAxD,EAAAjI,KAAA,EACA,CAEA,KAAAp3F,EAAA,EAAeA,EAAA5hB,GACf,IAAAkR,EAAA0Q,GAD0BA,KAS1B,IANAxa,EAAAwa,IACAxa,EAAAwa,GAIAsR,EAAA,EACA3sB,EAAA,EAAeA,GApIf,GAoI+BA,IAG/B,GAFA2sB,IAAA,GACAA,GAAAhiB,EAAA3K,IACA,EACA,QAGA,IAAA2sB,EAAA,IAtIA,IAsIA1zB,GAAA,IAAAQ,GACA,QAKA,KADAklH,EAAA,KACA3+G,EAAA,EAAeA,EAjJf,GAiJ8BA,IAC9B2+G,EAAA3+G,EAAA,GAAA2+G,EAAA3+G,GAAA2K,EAAA3K,EAIA,KAAAw5G,EAAA,EAAeA,EAAAyE,EAAazE,IAC5B,IAAAjB,EAAAyF,EAAAxE,KACAhB,EAAAmG,EAAApG,EAAAyF,EAAAxE,SAmEA,IAtNA,IAyLAvgH,GACAojC,EAAA5F,EAAA+hF,EACAxhF,EAAA,IA1LA,IA4LG/9B,GACHojC,EAAAuhF,EACAa,GAAA,IACAhoF,EAAAonF,EACAe,GAAA,IACA5nF,EAAA,MAGAqF,EAAAyhF,EACArnF,EAAAsnF,EACA/mF,GAAA,GAIAwnF,EAAA,EACAhF,EAAA,EACAx5G,EAAAqb,EACArf,EAAAkiH,EACAK,EAAA19G,EACAm1F,EAAA,EACAqoB,GAAA,EACAhnG,EAAA,GAAAxW,EACAy9G,EAAAjnG,EAAA,EAlNA,IAqNApe,GAAAoe,EA1NA,KAMA,IAqNApe,GAAAoe,EA1NA,IA2NA,QAIA,QAAS,CAET+iG,EAAAp6G,EAAAg2F,EACAwiB,EAAAgB,GAAAxiF,GACAqjF,EAAA,EACAC,EAAA9B,EAAAgB,IAEAhB,EAAAgB,GAAAxiF,GACAqjF,EAAA5jF,EAAAmoF,EAAApG,EAAAgB,IACAc,EAAAj+E,EAAAoiF,EAAAjG,EAAAgB,MAGAa,EAAA,GACAC,EAAA,GAIA6D,EAAA,GAAAn+G,EAAAg2F,EACAooB,EAAA,GAAAG,EACAljG,EAAA+iG,CACA,IACAA,GAAAD,EACA5vE,EAAAvyC,GAAAwiH,GAAAxoB,GAAAooB,GAAAhE,GAAA,GAAAC,GAAA,GAAAC,EAAA,QACK,IAAA8D,EAIL,KADAD,EAAA,GAAAn+G,EAAA,EACAw+G,EAAAL,GACAA,IAAA,CAWA,IATA,IAAAA,GACAK,GAAAL,EAAA,EACAK,GAAAL,GAEAK,EAAA,EAIAhF,IACA,KAAA7uG,EAAA3K,GAAA,CACA,GAAAA,IAAAvG,EAAwB,KACxBuG,GAAAu4G,EAAAyF,EAAAxF,EAAAgB,IAIA,GAAAx5G,EAAAa,IAAA29G,EAAAF,KAAAD,EAAA,CAYA,IAVA,IAAAroB,IACAA,EAAAn1F,GAIA7E,GAAAqf,EAGAkjG,EAAAv+G,EAAAg2F,EACArpE,EAAA,GAAA4xF,EACAA,EAAAvoB,EAAAv8F,MACAkzB,GAAAhiB,EAAA4zG,EAAAvoB,KACA,IACAuoB,IACA5xF,IAAA,CAKA,IADAtV,GAAA,GAAAknG,EA5RA,IA6RAtlH,GAAAoe,EAlSA,KAMA,IA6RApe,GAAAoe,EAlSA,IAmSA,QAIAgnG,GAAAG,EAAAF,EAIA/vE,EAAA8vE,GAAAx9G,GAAA,GAAA09G,GAAA,GAAAviH,EAAAkiH,EAAA,GAiBA,MAVA,KAAAM,IAIAjwE,EAAAvyC,EAAAwiH,GAAAx+G,EAAAg2F,GAAA,aAKA0kB,EAAAjI,KAAA5xG,EACA,IlD8hvBM,SAAUvM,EAAQD,EAASH,GAEjC,YmDh2vBA,SAAAuiH,KAEA39G,KAAAma,KAAA,EAEAna,KAAA85C,KAAA,EAEA95C,KAAAwiH,OAAA,EAEAxiH,KAAAs3G,GAAA,EAEAt3G,KAAA29B,MAAA,KAEA39B,KAAA0iH,UAAA,EAWA1iH,KAAAjE,KAAA,GAIAiE,KAAA2xD,QAAA,GAIA3xD,KAAAq3G,KAAA,EAEAr3G,KAAAsD,MAAA,EAGA9H,EAAAD,QAAAoiH,GnD23vBM,SAAUniH,EAAQD,GoDp7vBxBC,EAAAD,QAAA,4lBpD07vBM,SAAUC,EAAQD,GqD17vBxBC,EAAAD,QAAA,2pBrDg8vBM,SAAUC,EAAQD,GsDh8vBxBC,EAAAD,QAAA,inKtDs8vBM,SAAUC,EAAQD,GuDt8vBxBC,EAAAD,QAAA,oyMvD48vBM,SAAUC,EAAQD,GwD58vBxBC,EAAAD,SACA06B,EAAA,GACAhyB,EAAA,GACAmjD,MAAA,gGACAE,QACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA","file":"./dist/bundle.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 20);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar gl_matrix_1 = __webpack_require__(5);\r\nexports.FLOAT_SIZE = 4;\r\nexports.SHORT_SIZE = 2;\r\nexports.BYTE_SIZE = 1;\r\nexports.VERTICES_QUAD = 4;\r\nexports.INDICES_QUAD = 6;\r\nexports.COMP_POS = 2;\r\nexports.COMP_Z_INDEX = 1;\r\nexports.COMP_SIZE_Z_INDEX = 1;\r\nexports.COMP_SIZE_POS = 2;\r\nexports.COMP_PAL_PAL_SHIFT = 1;\r\nexports.COMP_SIZE_PAL_SHIFT = 1;\r\nexports.COMP_UV = 2;\r\nexports.COMP_SIZE_UV = 1;\r\nexports.UV_TILE = 16;\r\nexports.TEXTURE_SIZE = 256;\r\nexports.HUGE = Number.MAX_VALUE;\r\nexports.MIN_Z = 1;\r\nexports.MAX_Z = 255;\r\nexports.COMP_RGBA = 4;\r\nexports.COMP_RGB = 3;\r\nexports.COMP_INDEXED = 1;\r\nexports.PAL_OFFSET = 1 / 256;\r\nexports.OFFSET_Z_INDEX = exports.COMP_POS * exports.COMP_SIZE_POS;\r\nexports.OFFSET_PAL_SHIFT = exports.OFFSET_Z_INDEX + exports.COMP_SIZE_Z_INDEX;\r\nexports.OFFSET_UV = exports.OFFSET_PAL_SHIFT + exports.COMP_SIZE_PAL_SHIFT;\r\nexports.VERTEX_SIZE = exports.COMP_POS * exports.COMP_SIZE_POS + exports.COMP_UV * exports.COMP_SIZE_UV + exports.COMP_SIZE_Z_INDEX + exports.COMP_SIZE_PAL_SHIFT;\r\nexports.VERTEX_SIZE_SHORT = exports.VERTEX_SIZE >> 1;\r\nexports.QUAD_SIZE = exports.VERTEX_SIZE * exports.VERTICES_QUAD;\r\nexports.QUAD_SIZE_SHORT = exports.VERTEX_SIZE_SHORT * exports.VERTICES_QUAD;\r\nexports.MAT4_IDENT = gl_matrix_1.mat4.identity(gl_matrix_1.mat4.create());\r\nexports.MAX_VERTICES = (2 << 15);\r\nexports.MAX_QUADS = exports.MAX_VERTICES / exports.VERTICES_QUAD;\r\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports) {\n\n/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\n/**\n * @class Common utilities\n * @name glMatrix\n */\nvar glMatrix = {};\n\n// Configuration Constants\nglMatrix.EPSILON = 0.000001;\nglMatrix.ARRAY_TYPE = (typeof Float32Array !== 'undefined') ? Float32Array : Array;\nglMatrix.RANDOM = Math.random;\nglMatrix.ENABLE_SIMD = false;\n\n// Capability detection\nglMatrix.SIMD_AVAILABLE = (glMatrix.ARRAY_TYPE === Float32Array) && ('SIMD' in this);\nglMatrix.USE_SIMD = glMatrix.ENABLE_SIMD && glMatrix.SIMD_AVAILABLE;\n\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Type} type Array type, such as Float32Array or Array\n */\nglMatrix.setMatrixArrayType = function(type) {\n    glMatrix.ARRAY_TYPE = type;\n}\n\nvar degree = Math.PI / 180;\n\n/**\n* Convert Degree To Radian\n*\n* @param {Number} Angle in Degrees\n*/\nglMatrix.toRadian = function(a){\n     return a * degree;\n}\n\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less \n * than or equal to 1.0, and a relative tolerance is used for larger values)\n * \n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\nglMatrix.equals = function(a, b) {\n\treturn Math.abs(a - b) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a), Math.abs(b));\n}\n\nmodule.exports = glMatrix;\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony export (immutable) */ __webpack_exports__[\"__extends\"] = __extends;\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__assign\", function() { return __assign; });\n/* harmony export (immutable) */ __webpack_exports__[\"__rest\"] = __rest;\n/* harmony export (immutable) */ __webpack_exports__[\"__decorate\"] = __decorate;\n/* harmony export (immutable) */ __webpack_exports__[\"__param\"] = __param;\n/* harmony export (immutable) */ __webpack_exports__[\"__metadata\"] = __metadata;\n/* harmony export (immutable) */ __webpack_exports__[\"__awaiter\"] = __awaiter;\n/* harmony export (immutable) */ __webpack_exports__[\"__generator\"] = __generator;\n/* harmony export (immutable) */ __webpack_exports__[\"__exportStar\"] = __exportStar;\n/* harmony export (immutable) */ __webpack_exports__[\"__values\"] = __values;\n/* harmony export (immutable) */ __webpack_exports__[\"__read\"] = __read;\n/* harmony export (immutable) */ __webpack_exports__[\"__spread\"] = __spread;\n/* harmony export (immutable) */ __webpack_exports__[\"__await\"] = __await;\n/* harmony export (immutable) */ __webpack_exports__[\"__asyncGenerator\"] = __asyncGenerator;\n/* harmony export (immutable) */ __webpack_exports__[\"__asyncDelegator\"] = __asyncDelegator;\n/* harmony export (immutable) */ __webpack_exports__[\"__asyncValues\"] = __asyncValues;\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nvar __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nfunction __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nfunction __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nfunction __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nfunction __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nfunction __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nfunction __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nfunction __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nfunction __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nfunction __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nfunction __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nfunction __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nfunction __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n\nvar TYPED_OK =  (typeof Uint8Array !== 'undefined') &&\n                (typeof Uint16Array !== 'undefined') &&\n                (typeof Int32Array !== 'undefined');\n\n\nexports.assign = function (obj /*from1, from2, from3, ...*/) {\n  var sources = Array.prototype.slice.call(arguments, 1);\n  while (sources.length) {\n    var source = sources.shift();\n    if (!source) { continue; }\n\n    if (typeof source !== 'object') {\n      throw new TypeError(source + 'must be non-object');\n    }\n\n    for (var p in source) {\n      if (source.hasOwnProperty(p)) {\n        obj[p] = source[p];\n      }\n    }\n  }\n\n  return obj;\n};\n\n\n// reduce buffer size, avoiding mem copy\nexports.shrinkBuf = function (buf, size) {\n  if (buf.length === size) { return buf; }\n  if (buf.subarray) { return buf.subarray(0, size); }\n  buf.length = size;\n  return buf;\n};\n\n\nvar fnTyped = {\n  arraySet: function (dest, src, src_offs, len, dest_offs) {\n    if (src.subarray && dest.subarray) {\n      dest.set(src.subarray(src_offs, src_offs + len), dest_offs);\n      return;\n    }\n    // Fallback to ordinary array\n    for (var i = 0; i < len; i++) {\n      dest[dest_offs + i] = src[src_offs + i];\n    }\n  },\n  // Join array of chunks to single array.\n  flattenChunks: function (chunks) {\n    var i, l, len, pos, chunk, result;\n\n    // calculate data length\n    len = 0;\n    for (i = 0, l = chunks.length; i < l; i++) {\n      len += chunks[i].length;\n    }\n\n    // join chunks\n    result = new Uint8Array(len);\n    pos = 0;\n    for (i = 0, l = chunks.length; i < l; i++) {\n      chunk = chunks[i];\n      result.set(chunk, pos);\n      pos += chunk.length;\n    }\n\n    return result;\n  }\n};\n\nvar fnUntyped = {\n  arraySet: function (dest, src, src_offs, len, dest_offs) {\n    for (var i = 0; i < len; i++) {\n      dest[dest_offs + i] = src[src_offs + i];\n    }\n  },\n  // Join array of chunks to single array.\n  flattenChunks: function (chunks) {\n    return [].concat.apply([], chunks);\n  }\n};\n\n\n// Enable/Disable typed arrays use, for testing\n//\nexports.setTyped = function (on) {\n  if (on) {\n    exports.Buf8  = Uint8Array;\n    exports.Buf16 = Uint16Array;\n    exports.Buf32 = Int32Array;\n    exports.assign(exports, fnTyped);\n  } else {\n    exports.Buf8  = Array;\n    exports.Buf16 = Array;\n    exports.Buf32 = Array;\n    exports.assign(exports, fnUntyped);\n  }\n};\n\nexports.setTyped(TYPED_OK);\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/*!\n * @license twgl.js 3.4.0 Copyright (c) 2015, Gregg Tavares All Rights Reserved.\n * Available via the MIT license.\n * see: http://github.com/greggman/twgl.js for details\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"twgl\"] = factory();\n\telse\n\t\troot[\"twgl\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1), __webpack_require__(10), __webpack_require__(11), __webpack_require__(12)], __WEBPACK_AMD_DEFINE_RESULT__ = function (twgl, m4, v3, primitives) {\n\n\t  \"use strict\";\n\n\t  twgl.m4 = m4;\n\t  twgl.v3 = v3;\n\t  twgl.primitives = primitives;\n\t  return twgl;\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n\t/*\n\t * Copyright 2015, Gregg Tavares.\n\t * All rights reserved.\n\t *\n\t * Redistribution and use in source and binary forms, with or without\n\t * modification, are permitted provided that the following conditions are\n\t * met:\n\t *\n\t *     * Redistributions of source code must retain the above copyright\n\t * notice, this list of conditions and the following disclaimer.\n\t *     * Redistributions in binary form must reproduce the above\n\t * copyright notice, this list of conditions and the following disclaimer\n\t * in the documentation and/or other materials provided with the\n\t * distribution.\n\t *     * Neither the name of Gregg Tavares. nor the names of his\n\t * contributors may be used to endorse or promote products derived from\n\t * this software without specific prior written permission.\n\t *\n\t * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\t * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n\t * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n\t * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n\t * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n\t * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n\t * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n\t * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n\t * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\t * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n\t * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\t */\n\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(2), __webpack_require__(5), __webpack_require__(7), __webpack_require__(6), __webpack_require__(8), __webpack_require__(3), __webpack_require__(9), __webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function (attributes, draw, framebuffers, programs, textures, typedArrays, vertexArrays, utils) {\n\t  \"use strict\";\n\n\t  /**\n\t   * The main TWGL module.\n\t   *\n\t   * For most use cases you shouldn't need anything outside this module.\n\t   * Exceptions between the stuff added to twgl-full (v3, m4, primitives)\n\t   *\n\t   * @module twgl\n\t   * @borrows module:twgl/attributes.setAttribInfoBufferFromArray as setAttribInfoBufferFromArray\n\t   * @borrows module:twgl/attributes.createBufferInfoFromArrays as createBufferInfoFromArrays\n\t   * @borrows module:twgl/attributes.createVertexArrayInfo as createVertexArrayInfo\n\t   * @borrows module:twgl/draw.drawBufferInfo as drawBufferInfo\n\t   * @borrows module:twgl/draw.drawObjectList as drawObjectList\n\t   * @borrows module:twgl/framebuffers.createFramebufferInfo as createFramebufferInfo\n\t   * @borrows module:twgl/framebuffers.resizeFramebufferInfo as resizeFramebufferInfo\n\t   * @borrows module:twgl/framebuffers.bindFramebufferInfo as bindFramebufferInfo\n\t   * @borrows module:twgl/programs.createProgramInfo as createProgramInfo\n\t   * @borrows module:twgl/programs.createUniformBlockInfo as createUniformBlockInfo\n\t   * @borrows module:twgl/programs.bindUniformBlock as bindUniformBlock\n\t   * @borrows module:twgl/programs.setUniformBlock as setUniformBlock\n\t   * @borrows module:twgl/programs.setBlockUniforms as setBlockUniforms\n\t   * @borrows module:twgl/programs.setUniforms as setUniforms\n\t   * @borrows module:twgl/programs.setBuffersAndAttributes as setBuffersAndAttributes\n\t   * @borrows module:twgl/textures.setTextureFromArray as setTextureFromArray\n\t   * @borrows module:twgl/textures.createTexture as createTexture\n\t   * @borrows module:twgl/textures.resizeTexture as resizeTexture\n\t   * @borrows module:twgl/textures.createTextures as createTextures\n\t   */\n\n\t  // make sure we don't see a global gl\n\n\t  var gl = undefined; // eslint-disable-line\n\t  var defaults = {\n\t    enableVertexArrayObjects: true\n\t  };\n\n\t  /**\n\t   * Various default settings for twgl.\n\t   *\n\t   * Note: You can call this any number of times. Example:\n\t   *\n\t   *     twgl.setDefaults({ textureColor: [1, 0, 0, 1] });\n\t   *     twgl.setDefaults({ attribPrefix: 'a_' });\n\t   *\n\t   * is equivalent to\n\t   *\n\t   *     twgl.setDefaults({\n\t   *       textureColor: [1, 0, 0, 1],\n\t   *       attribPrefix: 'a_',\n\t   *     });\n\t   *\n\t   * @typedef {Object} Defaults\n\t   * @property {string} attribPrefix The prefix to stick on attributes\n\t   *\n\t   *   When writing shaders I prefer to name attributes with `a_`, uniforms with `u_` and varyings with `v_`\n\t   *   as it makes it clear where they came from. But, when building geometry I prefer using unprefixed names.\n\t   *\n\t   *   In otherwords I'll create arrays of geometry like this\n\t   *\n\t   *       var arrays = {\n\t   *         position: ...\n\t   *         normal: ...\n\t   *         texcoord: ...\n\t   *       };\n\t   *\n\t   *   But need those mapped to attributes and my attributes start with `a_`.\n\t   *\n\t   *   Default: `\"\"`\n\t   *\n\t   * @property {number[]} textureColor Array of 4 values in the range 0 to 1\n\t   *\n\t   *   The default texture color is used when loading textures from\n\t   *   urls. Because the URL will be loaded async we'd like to be\n\t   *   able to use the texture immediately. By putting a 1x1 pixel\n\t   *   color in the texture we can start using the texture before\n\t   *   the URL has loaded.\n\t   *\n\t   *   Default: `[0.5, 0.75, 1, 1]`\n\t   *\n\t   * @property {string} crossOrigin\n\t   *\n\t   *   If not undefined sets the crossOrigin attribute on images\n\t   *   that twgl creates when downloading images for textures.\n\t   *\n\t   *   Also see {@link module:twgl.TextureOptions}.\n\t   *\n\t   * @property {bool} enableVertexArrayObjects\n\t   *\n\t   *   If true then in WebGL 1.0 will attempt to get the `OES_vertex_array_object` extension.\n\t   *   If successful it will copy create/bind/delete/isVertexArrayOES from the extension to\n\t   *   the WebGLRenderingContext removing the OES at the end which is the standard entry point\n\t   *   for WebGL 2.\n\t   *\n\t   *   Note: According to webglstats.com 90% of devices support `OES_vertex_array_object`.\n\t   *   In fact AFAICT all devices support them it's just Microsoft Edge does not.\n\t   *   If you just want to count on support I suggest using [this polyfill](https://github.com/KhronosGroup/WebGL/blob/master/sdk/demos/google/resources/OESVertexArrayObject.js)\n\t   *   or ignoring devices that don't support them.\n\t   *\n\t   *   Default: `true`\n\t   *\n\t   * @memberOf module:twgl\n\t   */\n\n\t  /**\n\t   * Sets various defaults for twgl.\n\t   *\n\t   * In the interest of terseness which is kind of the point\n\t   * of twgl I've integrated a few of the older functions here\n\t   *\n\t   * @param {module:twgl.Defaults} newDefaults The default settings.\n\t   * @memberOf module:twgl\n\t   */\n\t  function setDefaults(newDefaults) {\n\t    utils.copyExistingProperties(newDefaults, defaults);\n\t    attributes.setDefaults_(newDefaults); // eslint-disable-line\n\t    textures.setDefaults_(newDefaults); // eslint-disable-line\n\t  }\n\n\t  /**\n\t   * Adds Vertex Array Objects to WebGL 1 GL contexts if available\n\t   * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n\t   */\n\t  function addVertexArrayObjectSupport(gl) {\n\t    if (!gl || !defaults.enableVertexArrayObjects) {\n\t      return;\n\t    }\n\t    if (utils.isWebGL1(gl)) {\n\t      var ext = gl.getExtension(\"OES_vertex_array_object\");\n\t      if (ext) {\n\t        gl.createVertexArray = function () {\n\t          return ext.createVertexArrayOES();\n\t        };\n\t        gl.deleteVertexArray = function (v) {\n\t          ext.deleteVertexArrayOES(v);\n\t        };\n\t        gl.isVertexArray = function (v) {\n\t          return ext.isVertexArrayOES(v);\n\t        };\n\t        gl.bindVertexArray = function (v) {\n\t          ext.bindVertexArrayOES(v);\n\t        };\n\t        gl.VERTEX_ARRAY_BINDING = ext.VERTEX_ARRAY_BINDING_OES;\n\t      }\n\t    }\n\t  }\n\n\t  /**\n\t   * Creates a webgl context.\n\t   * @param {HTMLCanvasElement} canvas The canvas tag to get\n\t   *     context from. If one is not passed in one will be\n\t   *     created.\n\t   * @return {WebGLRenderingContext} The created context.\n\t   */\n\t  function create3DContext(canvas, opt_attribs) {\n\t    var names = [\"webgl\", \"experimental-webgl\"];\n\t    var context = null;\n\t    for (var ii = 0; ii < names.length; ++ii) {\n\t      context = canvas.getContext(names[ii], opt_attribs);\n\t      if (context) {\n\t        break;\n\t      }\n\t    }\n\t    return context;\n\t  }\n\n\t  /**\n\t   * Gets a WebGL1 context.\n\t   *\n\t   * Note: Will attempt to enable Vertex Array Objects\n\t   * and add WebGL2 entry points. (unless you first set defaults with\n\t   * `twgl.setDefaults({enableVertexArrayObjects: false})`;\n\t   *\n\t   * @param {HTMLCanvasElement} canvas a canvas element.\n\t   * @param {WebGLContextCreationAttirbutes} [opt_attribs] optional webgl context creation attributes\n\t   * @memberOf module:twgl\n\t   */\n\t  function getWebGLContext(canvas, opt_attribs) {\n\t    var gl = create3DContext(canvas, opt_attribs);\n\t    addVertexArrayObjectSupport(gl);\n\t    return gl;\n\t  }\n\n\t  /**\n\t   * Creates a webgl context.\n\t   *\n\t   * Will return a WebGL2 context if possible.\n\t   *\n\t   * You can check if it's WebGL2 with\n\t   *\n\t   *     twgl.isWebGL2(gl);\n\t   *\n\t   * @param {HTMLCanvasElement} canvas The canvas tag to get\n\t   *     context from. If one is not passed in one will be\n\t   *     created.\n\t   * @return {WebGLRenderingContext} The created context.\n\t   */\n\t  function createContext(canvas, opt_attribs) {\n\t    var names = [\"webgl2\", \"webgl\", \"experimental-webgl\"];\n\t    var context = null;\n\t    for (var ii = 0; ii < names.length; ++ii) {\n\t      context = canvas.getContext(names[ii], opt_attribs);\n\t      if (context) {\n\t        break;\n\t      }\n\t    }\n\t    return context;\n\t  }\n\n\t  /**\n\t   * Gets a WebGL context.  Will create a WebGL2 context if possible.\n\t   *\n\t   * You can check if it's WebGL2 with\n\t   *\n\t   *    function isWebGL2(gl) {\n\t   *      return gl.getParameter(gl.VERSION).indexOf(\"WebGL 2.0 \") == 0;\n\t   *    }\n\t   *\n\t   * Note: For a WebGL1 context will attempt to enable Vertex Array Objects\n\t   * and add WebGL2 entry points. (unless you first set defaults with\n\t   * `twgl.setDefaults({enableVertexArrayObjects: false})`;\n\t   *\n\t   * @param {HTMLCanvasElement} canvas a canvas element.\n\t   * @param {WebGLContextCreationAttirbutes} [opt_attribs] optional webgl context creation attributes\n\t   * @return {WebGLRenderingContext} The created context.\n\t   * @memberOf module:twgl\n\t   */\n\t  function getContext(canvas, opt_attribs) {\n\t    var gl = createContext(canvas, opt_attribs);\n\t    addVertexArrayObjectSupport(gl);\n\t    return gl;\n\t  }\n\n\t  /**\n\t   * Resize a canvas to match the size it's displayed.\n\t   * @param {HTMLCanvasElement} canvas The canvas to resize.\n\t   * @param {number} [multiplier] So you can pass in `window.devicePixelRatio` if you want to.\n\t   * @return {boolean} true if the canvas was resized.\n\t   * @memberOf module:twgl\n\t   */\n\t  function resizeCanvasToDisplaySize(canvas, multiplier) {\n\t    multiplier = multiplier || 1;\n\t    multiplier = Math.max(1, multiplier);\n\t    var width = canvas.clientWidth * multiplier | 0;\n\t    var height = canvas.clientHeight * multiplier | 0;\n\t    if (canvas.width !== width || canvas.height !== height) {\n\t      canvas.width = width;\n\t      canvas.height = height;\n\t      return true;\n\t    }\n\t    return false;\n\t  }\n\n\t  // Using quotes prevents Uglify from changing the names.\n\t  // No speed diff AFAICT.\n\t  var api = {\n\t    \"getContext\": getContext,\n\t    \"getWebGLContext\": getWebGLContext,\n\t    \"isWebGL1\": utils.isWebGL1,\n\t    \"isWebGL2\": utils.isWebGL2,\n\t    \"resizeCanvasToDisplaySize\": resizeCanvasToDisplaySize,\n\t    \"setDefaults\": setDefaults\n\t  };\n\n\t  function notPrivate(name) {\n\t    return name[name.length - 1] !== '_';\n\t  }\n\n\t  function copyPublicProperties(src, dst) {\n\t    Object.keys(src).filter(notPrivate).forEach(function (key) {\n\t      dst[key] = src[key];\n\t    });\n\t    return dst;\n\t  }\n\n\t  var apis = {\n\t    attributes: attributes,\n\t    draw: draw,\n\t    framebuffers: framebuffers,\n\t    programs: programs,\n\t    textures: textures,\n\t    typedArrays: typedArrays,\n\t    vertexArrays: vertexArrays\n\t  };\n\t  Object.keys(apis).forEach(function (name) {\n\t    var srcApi = apis[name];\n\t    copyPublicProperties(srcApi, api);\n\t    api[name] = copyPublicProperties(srcApi, {});\n\t  });\n\n\t  return api;\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n\t/*\n\t * Copyright 2015, Gregg Tavares.\n\t * All rights reserved.\n\t *\n\t * Redistribution and use in source and binary forms, with or without\n\t * modification, are permitted provided that the following conditions are\n\t * met:\n\t *\n\t *     * Redistributions of source code must retain the above copyright\n\t * notice, this list of conditions and the following disclaimer.\n\t *     * Redistributions in binary form must reproduce the above\n\t * copyright notice, this list of conditions and the following disclaimer\n\t * in the documentation and/or other materials provided with the\n\t * distribution.\n\t *     * Neither the name of Gregg Tavares. nor the names of his\n\t * contributors may be used to endorse or promote products derived from\n\t * this software without specific prior written permission.\n\t *\n\t * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\t * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n\t * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n\t * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n\t * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n\t * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n\t * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n\t * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n\t * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\t * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n\t * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\t */\n\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function (typedArrays, utils) {\n\t  \"use strict\";\n\n\t  /**\n\t   * Low level attribute and buffer related functions\n\t   *\n\t   * You should generally not need to use these functions. They are provided\n\t   * for those cases where you're doing something out of the ordinary\n\t   * and you need lower level access.\n\t   *\n\t   * For backward compatibily they are available at both `twgl.attributes` and `twgl`\n\t   * itself\n\t   *\n\t   * See {@link module:twgl} for core functions\n\t   *\n\t   * @module twgl/attributes\n\t   */\n\n\t  // make sure we don't see a global gl\n\n\t  var gl = undefined; // eslint-disable-line\n\t  var defaults = {\n\t    attribPrefix: \"\"\n\t  };\n\n\t  /**\n\t   * Sets the default attrib prefix\n\t   *\n\t   * When writing shaders I prefer to name attributes with `a_`, uniforms with `u_` and varyings with `v_`\n\t   * as it makes it clear where they came from. But, when building geometry I prefer using unprefixed names.\n\t   *\n\t   * In otherwords I'll create arrays of geometry like this\n\t   *\n\t   *     var arrays = {\n\t   *       position: ...\n\t   *       normal: ...\n\t   *       texcoord: ...\n\t   *     };\n\t   *\n\t   * But need those mapped to attributes and my attributes start with `a_`.\n\t   *\n\t   * @deprecated see {@link module:twgl.setDefaults}\n\t   * @param {string} prefix prefix for attribs\n\t   * @memberOf module:twgl/attributes\n\t   */\n\t  function setAttributePrefix(prefix) {\n\t    defaults.attribPrefix = prefix;\n\t  }\n\n\t  function setDefaults(newDefaults) {\n\t    utils.copyExistingProperties(newDefaults, defaults);\n\t  }\n\n\t  function setBufferFromTypedArray(gl, type, buffer, array, drawType) {\n\t    gl.bindBuffer(type, buffer);\n\t    gl.bufferData(type, array, drawType || gl.STATIC_DRAW);\n\t  }\n\n\t  /**\n\t   * Given typed array creates a WebGLBuffer and copies the typed array\n\t   * into it.\n\t   *\n\t   * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n\t   * @param {ArrayBuffer|ArrayBufferView|WebGLBuffer} typedArray the typed array. Note: If a WebGLBuffer is passed in it will just be returned. No action will be taken\n\t   * @param {number} [type] the GL bind type for the buffer. Default = `gl.ARRAY_BUFFER`.\n\t   * @param {number} [drawType] the GL draw type for the buffer. Default = 'gl.STATIC_DRAW`.\n\t   * @return {WebGLBuffer} the created WebGLBuffer\n\t   * @memberOf module:twgl/attributes\n\t   */\n\t  function createBufferFromTypedArray(gl, typedArray, type, drawType) {\n\t    if (typedArray instanceof WebGLBuffer) {\n\t      return typedArray;\n\t    }\n\t    type = type || gl.ARRAY_BUFFER;\n\t    var buffer = gl.createBuffer();\n\t    setBufferFromTypedArray(gl, type, buffer, typedArray, drawType);\n\t    return buffer;\n\t  }\n\n\t  function isIndices(name) {\n\t    return name === \"indices\";\n\t  }\n\n\t  // This is really just a guess. Though I can't really imagine using\n\t  // anything else? Maybe for some compression?\n\t  function getNormalizationForTypedArray(typedArray) {\n\t    if (typedArray instanceof Int8Array) {\n\t      return true;\n\t    } // eslint-disable-line\n\t    if (typedArray instanceof Uint8Array) {\n\t      return true;\n\t    } // eslint-disable-line\n\t    return false;\n\t  }\n\n\t  // This is really just a guess. Though I can't really imagine using\n\t  // anything else? Maybe for some compression?\n\t  function getNormalizationForTypedArrayType(typedArrayType) {\n\t    if (typedArrayType === Int8Array) {\n\t      return true;\n\t    } // eslint-disable-line\n\t    if (typedArrayType === Uint8Array) {\n\t      return true;\n\t    } // eslint-disable-line\n\t    return false;\n\t  }\n\n\t  function getArray(array) {\n\t    return array.length ? array : array.data;\n\t  }\n\n\t  var texcoordRE = /coord|texture/i;\n\t  var colorRE = /color|colour/i;\n\n\t  function guessNumComponentsFromName(name, length) {\n\t    var numComponents;\n\t    if (texcoordRE.test(name)) {\n\t      numComponents = 2;\n\t    } else if (colorRE.test(name)) {\n\t      numComponents = 4;\n\t    } else {\n\t      numComponents = 3; // position, normals, indices ...\n\t    }\n\n\t    if (length % numComponents > 0) {\n\t      throw \"Can not guess numComponents for attribute '\" + name + \"'. Tried \" + numComponents + \" but \" + length + \" values is not evenly divisible by \" + numComponents + \". You should specify it.\";\n\t    }\n\n\t    return numComponents;\n\t  }\n\n\t  function getNumComponents(array, arrayName) {\n\t    return array.numComponents || array.size || guessNumComponentsFromName(arrayName, getArray(array).length);\n\t  }\n\n\t  function makeTypedArray(array, name) {\n\t    if (typedArrays.isArrayBuffer(array)) {\n\t      return array;\n\t    }\n\n\t    if (typedArrays.isArrayBuffer(array.data)) {\n\t      return array.data;\n\t    }\n\n\t    if (Array.isArray(array)) {\n\t      array = {\n\t        data: array\n\t      };\n\t    }\n\n\t    var Type = array.type;\n\t    if (!Type) {\n\t      if (isIndices(name)) {\n\t        Type = Uint16Array;\n\t      } else {\n\t        Type = Float32Array;\n\t      }\n\t    }\n\t    return new Type(array.data);\n\t  }\n\n\t  /**\n\t   * The info for an attribute. This is effectively just the arguments to `gl.vertexAttribPointer` plus the WebGLBuffer\n\t   * for the attribute.\n\t   *\n\t   * @typedef {Object} AttribInfo\n\t   * @property {number} [numComponents] the number of components for this attribute.\n\t   * @property {number} [size] synonym for `numComponents`.\n\t   * @property {number} [type] the type of the attribute (eg. `gl.FLOAT`, `gl.UNSIGNED_BYTE`, etc...) Default = `gl.FLOAT`\n\t   * @property {boolean} [normalize] whether or not to normalize the data. Default = false\n\t   * @property {number} [offset] offset into buffer in bytes. Default = 0\n\t   * @property {number} [stride] the stride in bytes per element. Default = 0\n\t   * @property {WebGLBuffer} buffer the buffer that contains the data for this attribute\n\t   * @property {number} [drawType] the draw type passed to gl.bufferData. Default = gl.STATIC_DRAW\n\t   * @memberOf module:twgl\n\t   */\n\n\t  /**\n\t   * Use this type of array spec when TWGL can't guess the type or number of compoments of an array\n\t   * @typedef {Object} FullArraySpec\n\t   * @property {(number|number[]|ArrayBuffer)} data The data of the array. A number alone becomes the number of elements of type.\n\t   * @property {number} [numComponents] number of components for `vertexAttribPointer`. Default is based on the name of the array.\n\t   *    If `coord` is in the name assumes `numComponents = 2`.\n\t   *    If `color` is in the name assumes `numComponents = 4`.\n\t   *    otherwise assumes `numComponents = 3`\n\t   * @property {constructor} type The type. This is only used if `data` is a JavaScript array. It is the constructor for the typedarray. (eg. `Uint8Array`).\n\t   * For example if you want colors in a `Uint8Array` you might have a `FullArraySpec` like `{ type: Uint8Array, data: [255,0,255,255, ...], }`.\n\t   * @property {number} [size] synonym for `numComponents`.\n\t   * @property {boolean} [normalize] normalize for `vertexAttribPointer`. Default is true if type is `Int8Array` or `Uint8Array` otherwise false.\n\t   * @property {number} [stride] stride for `vertexAttribPointer`. Default = 0\n\t   * @property {number} [offset] offset for `vertexAttribPointer`. Default = 0\n\t   * @property {string} [attrib] name of attribute this array maps to. Defaults to same name as array prefixed by the default attribPrefix.\n\t   * @property {string} [name] synonym for `attrib`.\n\t   * @property {string} [attribName] synonym for `attrib`.\n\t   * @memberOf module:twgl\n\t   */\n\n\t  /**\n\t   * An individual array in {@link module:twgl.Arrays}\n\t   *\n\t   * When passed to {@link module:twgl.createBufferInfoFromArrays} if an ArraySpec is `number[]` or `ArrayBuffer`\n\t   * the types will be guessed based on the name. `indices` will be `Uint16Array`, everything else will\n\t   * be `Float32Array`. If an ArraySpec is a number it's the number of floats for an empty (zeroed) buffer.\n\t   *\n\t   * @typedef {(number|number[]|ArrayBuffer|module:twgl.FullArraySpec)} ArraySpec\n\t   * @memberOf module:twgl\n\t   */\n\n\t  /**\n\t   * This is a JavaScript object of arrays by name. The names should match your shader's attributes. If your\n\t   * attributes have a common prefix you can specify it by calling {@link module:twgl.setAttributePrefix}.\n\t   *\n\t   *     Bare JavaScript Arrays\n\t   *\n\t   *         var arrays = {\n\t   *            position: [-1, 1, 0],\n\t   *            normal: [0, 1, 0],\n\t   *            ...\n\t   *         }\n\t   *\n\t   *     Bare TypedArrays\n\t   *\n\t   *         var arrays = {\n\t   *            position: new Float32Array([-1, 1, 0]),\n\t   *            color: new Uint8Array([255, 128, 64, 255]),\n\t   *            ...\n\t   *         }\n\t   *\n\t   * *   Will guess at `numComponents` if not specified based on name.\n\t   *\n\t   *     If `coord` is in the name assumes `numComponents = 2`\n\t   *\n\t   *     If `color` is in the name assumes `numComponents = 4`\n\t   *\n\t   *     otherwise assumes `numComponents = 3`\n\t   *\n\t   * Objects with various fields. See {@link module:twgl.FullArraySpec}.\n\t   *\n\t   *     var arrays = {\n\t   *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n\t   *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n\t   *       normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },\n\t   *       indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },\n\t   *     };\n\t   *\n\t   * @typedef {Object.<string, module:twgl.ArraySpec>} Arrays\n\t   * @memberOf module:twgl\n\t   */\n\n\t  /**\n\t   * Creates a set of attribute data and WebGLBuffers from set of arrays\n\t   *\n\t   * Given\n\t   *\n\t   *      var arrays = {\n\t   *        position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n\t   *        texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n\t   *        normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },\n\t   *        color:    { numComponents: 4, data: [255, 255, 255, 255, 255, 0, 0, 255, 0, 0, 255, 255], type: Uint8Array, },\n\t   *        indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },\n\t   *      };\n\t   *\n\t   * returns something like\n\t   *\n\t   *      var attribs = {\n\t   *        position: { numComponents: 3, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },\n\t   *        texcoord: { numComponents: 2, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },\n\t   *        normal:   { numComponents: 3, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },\n\t   *        color:    { numComponents: 4, type: gl.UNSIGNED_BYTE, normalize: true,  buffer: WebGLBuffer, },\n\t   *      };\n\t   *\n\t   * notes:\n\t   *\n\t   * *   Arrays can take various forms\n\t   *\n\t   *     Bare JavaScript Arrays\n\t   *\n\t   *         var arrays = {\n\t   *            position: [-1, 1, 0],\n\t   *            normal: [0, 1, 0],\n\t   *            ...\n\t   *         }\n\t   *\n\t   *     Bare TypedArrays\n\t   *\n\t   *         var arrays = {\n\t   *            position: new Float32Array([-1, 1, 0]),\n\t   *            color: new Uint8Array([255, 128, 64, 255]),\n\t   *            ...\n\t   *         }\n\t   *\n\t   * *   Will guess at `numComponents` if not specified based on name.\n\t   *\n\t   *     If `coord` is in the name assumes `numComponents = 2`\n\t   *\n\t   *     If `color` is in the name assumes `numComponents = 4`\n\t   *\n\t   *     otherwise assumes `numComponents = 3`\n\t   *\n\t   * @param {WebGLRenderingContext} gl The webgl rendering context.\n\t   * @param {module:twgl.Arrays} arrays The arrays\n\t   * @return {Object.<string, module:twgl.AttribInfo>} the attribs\n\t   * @memberOf module:twgl/attributes\n\t   */\n\t  function createAttribsFromArrays(gl, arrays) {\n\t    var attribs = {};\n\t    Object.keys(arrays).forEach(function (arrayName) {\n\t      if (!isIndices(arrayName)) {\n\t        var array = arrays[arrayName];\n\t        var attribName = array.attrib || array.name || array.attribName || defaults.attribPrefix + arrayName;\n\t        var buffer;\n\t        var type;\n\t        var normalization;\n\t        var numComponents;\n\t        var numValues;\n\t        if (typeof array === \"number\" || typeof array.data === \"number\") {\n\t          numValues = array.data || array;\n\t          var arrayType = array.type || Float32Array;\n\t          var numBytes = numValues * arrayType.BYTES_PER_ELEMENT;\n\t          type = typedArrays.getGLTypeForTypedArrayType(arrayType);\n\t          normalization = array.normalize !== undefined ? array.normalize : getNormalizationForTypedArrayType(arrayType);\n\t          numComponents = array.numComponents || array.size || guessNumComponentsFromName(arrayName, numValues);\n\t          buffer = gl.createBuffer();\n\t          gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n\t          gl.bufferData(gl.ARRAY_BUFFER, numBytes, array.drawType || gl.STATIC_DRAW);\n\t        } else {\n\t          var typedArray = makeTypedArray(array, arrayName);\n\t          buffer = createBufferFromTypedArray(gl, typedArray, undefined, array.drawType);\n\t          type = typedArrays.getGLTypeForTypedArray(typedArray);\n\t          normalization = array.normalize !== undefined ? array.normalize : getNormalizationForTypedArray(typedArray);\n\t          numComponents = getNumComponents(array, arrayName);\n\t          numValues = typedArray.length;\n\t        }\n\t        attribs[attribName] = {\n\t          buffer: buffer,\n\t          numComponents: numComponents,\n\t          type: type,\n\t          normalize: normalization,\n\t          stride: array.stride || 0,\n\t          offset: array.offset || 0,\n\t          drawType: array.drawType\n\t        };\n\t      }\n\t    });\n\t    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n\t    return attribs;\n\t  }\n\n\t  /**\n\t   * Sets the contents of a buffer attached to an attribInfo\n\t   *\n\t   * This is helper function to dynamically update a buffer.\n\t   *\n\t   * Let's say you make a bufferInfo\n\t   *\n\t   *     var arrays = {\n\t   *        position: new Float32Array([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]),\n\t   *        texcoord: new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]),\n\t   *        normal:   new Float32Array([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]),\n\t   *        indices:  new Uint16Array([0, 1, 2, 1, 2, 3]),\n\t   *     };\n\t   *     var bufferInfo = twgl.createBufferInfoFromArrays(gl, arrays);\n\t   *\n\t   *  And you want to dynamically upate the positions. You could do this\n\t   *\n\t   *     // assuming arrays.position has already been updated with new data.\n\t   *     twgl.setAttribInfoBufferFromArray(gl, bufferInfo.attribs.position, arrays.position);\n\t   *\n\t   * @param {WebGLRenderingContext} gl\n\t   * @param {AttribInfo} attribInfo The attribInfo who's buffer contents to set. NOTE: If you have an attribute prefix\n\t   *   the name of the attribute will include the prefix.\n\t   * @param {ArraySpec} array Note: it is arguably ineffient to pass in anything but a typed array because anything\n\t   *    else will have to be converted to a typed array before it can be used by WebGL. During init time that\n\t   *    inefficiency is usually not important but if you're updating data dynamically best to be efficient.\n\t   * @param {number} [offset] an optional offset into the buffer. This is only an offset into the WebGL buffer\n\t   *    not the array. To pass in an offset into the array itself use a typed array and create an `ArrayBufferView`\n\t   *    for the portion of the array you want to use.\n\t   *\n\t   *        var someArray = new Float32Array(1000); // an array with 1000 floats\n\t   *        var someSubArray = new Float32Array(someArray.buffer, offsetInBytes, sizeInUnits); // a view into someArray\n\t   *\n\t   *    Now you can pass `someSubArray` into setAttribInfoBufferFromArray`\n\t   * @memberOf module:twgl/attributes\n\t   */\n\t  function setAttribInfoBufferFromArray(gl, attribInfo, array, offset) {\n\t    array = makeTypedArray(array);\n\t    if (offset !== undefined) {\n\t      gl.bindBuffer(gl.ARRAY_BUFFER, attribInfo.buffer);\n\t      gl.bufferSubData(gl.ARRAY_BUFFER, offset, array);\n\t    } else {\n\t      setBufferFromTypedArray(gl, gl.ARRAY_BUFFER, attribInfo.buffer, array, attribInfo.drawType);\n\t    }\n\t  }\n\n\t  function getBytesPerValueForGLType(gl, type) {\n\t    if (type === gl.BYTE) return 1; // eslint-disable-line\n\t    if (type === gl.UNSIGNED_BYTE) return 1; // eslint-disable-line\n\t    if (type === gl.SHORT) return 2; // eslint-disable-line\n\t    if (type === gl.UNSIGNED_SHORT) return 2; // eslint-disable-line\n\t    if (type === gl.INT) return 4; // eslint-disable-line\n\t    if (type === gl.UNSIGNED_INT) return 4; // eslint-disable-line\n\t    if (type === gl.FLOAT) return 4; // eslint-disable-line\n\t    return 0;\n\t  }\n\n\t  /**\n\t   * tries to get the number of elements from a set of arrays.\n\t   */\n\t  var positionKeys = ['position', 'positions', 'a_position'];\n\t  function getNumElementsFromNonIndexedArrays(arrays) {\n\t    var key;\n\t    for (var ii = 0; ii < positionKeys.length; ++ii) {\n\t      key = positionKeys[ii];\n\t      if (key in arrays) {\n\t        break;\n\t      }\n\t    }\n\t    if (ii === positionKeys.length) {\n\t      key = Object.keys(arrays)[0];\n\t    }\n\t    var array = arrays[key];\n\t    var length = getArray(array).length;\n\t    var numComponents = getNumComponents(array, key);\n\t    var numElements = length / numComponents;\n\t    if (length % numComponents > 0) {\n\t      throw \"numComponents \" + numComponents + \" not correct for length \" + length;\n\t    }\n\t    return numElements;\n\t  }\n\n\t  function getNumElementsFromAttributes(gl, attribs) {\n\t    var key;\n\t    for (var ii = 0; ii < positionKeys.length; ++ii) {\n\t      key = positionKeys[ii];\n\t      if (key in attribs) {\n\t        break;\n\t      }\n\t      key = defaults.attribPrefix + key;\n\t      if (key in attribs) {\n\t        break;\n\t      }\n\t    }\n\t    if (ii === positionKeys.length) {\n\t      key = Object.keys(attribs)[0];\n\t    }\n\t    var attrib = attribs[key];\n\t    gl.bindBuffer(gl.ARRAY_BUFFER, attrib.buffer);\n\t    var numBytes = gl.getBufferParameter(gl.ARRAY_BUFFER, gl.BUFFER_SIZE);\n\t    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n\t    var bytesPerValue = getBytesPerValueForGLType(gl, attrib.type);\n\t    var totalElements = numBytes / bytesPerValue;\n\t    var numComponents = attrib.numComponents || attrib.size;\n\t    // TODO: check stride\n\t    var numElements = totalElements / numComponents;\n\t    if (numElements % 1 !== 0) {\n\t      throw \"numComponents \" + numComponents + \" not correct for length \" + length;\n\t    }\n\t    return numElements;\n\t  }\n\n\t  /**\n\t   * @typedef {Object} BufferInfo\n\t   * @property {number} numElements The number of elements to pass to `gl.drawArrays` or `gl.drawElements`.\n\t   * @property {number} [elementType] The type of indices `UNSIGNED_BYTE`, `UNSIGNED_SHORT` etc..\n\t   * @property {WebGLBuffer} [indices] The indices `ELEMENT_ARRAY_BUFFER` if any indices exist.\n\t   * @property {Object.<string, module:twgl.AttribInfo>} [attribs] The attribs approriate to call `setAttributes`\n\t   * @memberOf module:twgl\n\t   */\n\n\t  /**\n\t   * Creates a BufferInfo from an object of arrays.\n\t   *\n\t   * This can be passed to {@link module:twgl.setBuffersAndAttributes} and to\n\t   * {@link module:twgl:drawBufferInfo}.\n\t   *\n\t   * Given an object like\n\t   *\n\t   *     var arrays = {\n\t   *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n\t   *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n\t   *       normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },\n\t   *       indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },\n\t   *     };\n\t   *\n\t   *  Creates an BufferInfo like this\n\t   *\n\t   *     bufferInfo = {\n\t   *       numElements: 4,        // or whatever the number of elements is\n\t   *       indices: WebGLBuffer,  // this property will not exist if there are no indices\n\t   *       attribs: {\n\t   *         a_position: { buffer: WebGLBuffer, numComponents: 3, },\n\t   *         a_normal:   { buffer: WebGLBuffer, numComponents: 3, },\n\t   *         a_texcoord: { buffer: WebGLBuffer, numComponents: 2, },\n\t   *       },\n\t   *     };\n\t   *\n\t   *  The properties of arrays can be JavaScript arrays in which case the number of components\n\t   *  will be guessed.\n\t   *\n\t   *     var arrays = {\n\t   *        position: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0],\n\t   *        texcoord: [0, 0, 0, 1, 1, 0, 1, 1],\n\t   *        normal:   [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],\n\t   *        indices:  [0, 1, 2, 1, 2, 3],\n\t   *     };\n\t   *\n\t   *  They can also by TypedArrays\n\t   *\n\t   *     var arrays = {\n\t   *        position: new Float32Array([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]),\n\t   *        texcoord: new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]),\n\t   *        normal:   new Float32Array([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]),\n\t   *        indices:  new Uint16Array([0, 1, 2, 1, 2, 3]),\n\t   *     };\n\t   *\n\t   *  Or augmentedTypedArrays\n\t   *\n\t   *     var positions = createAugmentedTypedArray(3, 4);\n\t   *     var texcoords = createAugmentedTypedArray(2, 4);\n\t   *     var normals   = createAugmentedTypedArray(3, 4);\n\t   *     var indices   = createAugmentedTypedArray(3, 2, Uint16Array);\n\t   *\n\t   *     positions.push([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]);\n\t   *     texcoords.push([0, 0, 0, 1, 1, 0, 1, 1]);\n\t   *     normals.push([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]);\n\t   *     indices.push([0, 1, 2, 1, 2, 3]);\n\t   *\n\t   *     var arrays = {\n\t   *        position: positions,\n\t   *        texcoord: texcoords,\n\t   *        normal:   normals,\n\t   *        indices:  indices,\n\t   *     };\n\t   *\n\t   * For the last example it is equivalent to\n\t   *\n\t   *     var bufferInfo = {\n\t   *       attribs: {\n\t   *         a_position: { numComponents: 3, buffer: gl.createBuffer(), },\n\t   *         a_texcoods: { numComponents: 2, buffer: gl.createBuffer(), },\n\t   *         a_normals: { numComponents: 3, buffer: gl.createBuffer(), },\n\t   *       },\n\t   *       indices: gl.createBuffer(),\n\t   *       numElements: 6,\n\t   *     };\n\t   *\n\t   *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.a_position.buffer);\n\t   *     gl.bufferData(gl.ARRAY_BUFFER, arrays.position, gl.STATIC_DRAW);\n\t   *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.a_texcoord.buffer);\n\t   *     gl.bufferData(gl.ARRAY_BUFFER, arrays.texcoord, gl.STATIC_DRAW);\n\t   *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.a_normal.buffer);\n\t   *     gl.bufferData(gl.ARRAY_BUFFER, arrays.normal, gl.STATIC_DRAW);\n\t   *     gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufferInfo.indices);\n\t   *     gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, arrays.indices, gl.STATIC_DRAW);\n\t   *\n\t   * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n\t   * @param {module:twgl.Arrays} arrays Your data\n\t   * @return {module:twgl.BufferInfo} A BufferInfo\n\t   * @memberOf module:twgl/attributes\n\t   */\n\t  function createBufferInfoFromArrays(gl, arrays) {\n\t    var bufferInfo = {\n\t      attribs: createAttribsFromArrays(gl, arrays)\n\t    };\n\t    var indices = arrays.indices;\n\t    if (indices) {\n\t      indices = makeTypedArray(indices, \"indices\");\n\t      bufferInfo.indices = createBufferFromTypedArray(gl, indices, gl.ELEMENT_ARRAY_BUFFER);\n\t      bufferInfo.numElements = indices.length;\n\t      bufferInfo.elementType = typedArrays.getGLTypeForTypedArray(indices);\n\t    } else {\n\t      bufferInfo.numElements = getNumElementsFromAttributes(gl, bufferInfo.attribs);\n\t    }\n\n\t    return bufferInfo;\n\t  }\n\n\t  /**\n\t   * Creates a buffer from an array, typed array, or array spec\n\t   *\n\t   * Given something like this\n\t   *\n\t   *     [1, 2, 3],\n\t   *\n\t   * or\n\t   *\n\t   *     new Uint16Array([1,2,3]);\n\t   *\n\t   * or\n\t   *\n\t   *     {\n\t   *        data: [1, 2, 3],\n\t   *        type: Uint8Array,\n\t   *     }\n\t   *\n\t   * returns a WebGLBuffer that constains the given data.\n\t   *\n\t   * @param {WebGLRenderingContext} gl A WebGLRenderingContext.\n\t   * @param {module:twgl.ArraySpec} array an array, typed array, or array spec.\n\t   * @param {string} arrayName name of array. Used to guess the type if type can not be dervied other wise.\n\t   * @return {WebGLBuffer} a WebGLBuffer containing the data in array.\n\t   * @memberOf module:twgl/attributes\n\t   */\n\t  function createBufferFromArray(gl, array, arrayName) {\n\t    var type = arrayName === \"indices\" ? gl.ELEMENT_ARRAY_BUFFER : gl.ARRAY_BUFFER;\n\t    var typedArray = makeTypedArray(array, arrayName);\n\t    return createBufferFromTypedArray(gl, typedArray, type);\n\t  }\n\n\t  /**\n\t   * Creates buffers from arrays or typed arrays\n\t   *\n\t   * Given something like this\n\t   *\n\t   *     var arrays = {\n\t   *        positions: [1, 2, 3],\n\t   *        normals: [0, 0, 1],\n\t   *     }\n\t   *\n\t   * returns something like\n\t   *\n\t   *     buffers = {\n\t   *       positions: WebGLBuffer,\n\t   *       normals: WebGLBuffer,\n\t   *     }\n\t   *\n\t   * If the buffer is named 'indices' it will be made an ELEMENT_ARRAY_BUFFER.\n\t   *\n\t   * @param {WebGLRenderingContext} gl A WebGLRenderingContext.\n\t   * @param {module:twgl.Arrays} arrays\n\t   * @return {Object<string, WebGLBuffer>} returns an object with one WebGLBuffer per array\n\t   * @memberOf module:twgl/attributes\n\t   */\n\t  function createBuffersFromArrays(gl, arrays) {\n\t    var buffers = {};\n\t    Object.keys(arrays).forEach(function (key) {\n\t      buffers[key] = createBufferFromArray(gl, arrays[key], key);\n\t    });\n\n\t    // Ugh!\n\t    if (arrays.indices) {\n\t      buffers.numElements = arrays.indices.length;\n\t      buffers.elementType = typedArrays.getGLTypeForTypedArray(makeTypedArray(arrays.indices), 'indices');\n\t    } else {\n\t      buffers.numElements = getNumElementsFromNonIndexedArrays(arrays);\n\t    }\n\n\t    return buffers;\n\t  }\n\n\t  // Using quotes prevents Uglify from changing the names.\n\t  // No speed diff AFAICT.\n\t  return {\n\t    \"createAttribsFromArrays\": createAttribsFromArrays,\n\t    \"createBuffersFromArrays\": createBuffersFromArrays,\n\t    \"createBufferFromArray\": createBufferFromArray,\n\t    \"createBufferFromTypedArray\": createBufferFromTypedArray,\n\t    \"createBufferInfoFromArrays\": createBufferInfoFromArrays,\n\t    \"setAttribInfoBufferFromArray\": setAttribInfoBufferFromArray,\n\n\t    \"setAttributePrefix\": setAttributePrefix,\n\n\t    \"setDefaults_\": setDefaults,\n\t    \"getNumComponents_\": getNumComponents,\n\t    \"getArray_\": getArray\n\t  };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\"use strict\";\n\n\t/*\n\t * Copyright 2015, Gregg Tavares.\n\t * All rights reserved.\n\t *\n\t * Redistribution and use in source and binary forms, with or without\n\t * modification, are permitted provided that the following conditions are\n\t * met:\n\t *\n\t *     * Redistributions of source code must retain the above copyright\n\t * notice, this list of conditions and the following disclaimer.\n\t *     * Redistributions in binary form must reproduce the above\n\t * copyright notice, this list of conditions and the following disclaimer\n\t * in the documentation and/or other materials provided with the\n\t * distribution.\n\t *     * Neither the name of Gregg Tavares. nor the names of his\n\t * contributors may be used to endorse or promote products derived from\n\t * this software without specific prior written permission.\n\t *\n\t * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\t * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n\t * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n\t * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n\t * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n\t * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n\t * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n\t * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n\t * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\t * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n\t * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\t */\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n\t  \"use strict\";\n\n\t  /**\n\t   * Low level shader typed array related functions\n\t   *\n\t   * You should generally not need to use these functions. They are provided\n\t   * for those cases where you're doing something out of the ordinary\n\t   * and you need lower level access.\n\t   *\n\t   * For backward compatibily they are available at both `twgl.typedArray` and `twgl`\n\t   * itself\n\t   *\n\t   * See {@link module:twgl} for core functions\n\t   *\n\t   * @module twgl/typedArray\n\t   */\n\n\t  // make sure we don't see a global gl\n\n\t  var gl = undefined; // eslint-disable-line\n\n\t  /* DataType */\n\t  var BYTE = 0x1400;\n\t  var UNSIGNED_BYTE = 0x1401;\n\t  var SHORT = 0x1402;\n\t  var UNSIGNED_SHORT = 0x1403;\n\t  var INT = 0x1404;\n\t  var UNSIGNED_INT = 0x1405;\n\t  var FLOAT = 0x1406;\n\t  var UNSIGNED_SHORT_4_4_4_4 = 0x8033;\n\t  var UNSIGNED_SHORT_5_5_5_1 = 0x8034;\n\t  var UNSIGNED_SHORT_5_6_5 = 0x8363;\n\t  var HALF_FLOAT = 0x140B;\n\t  var UNSIGNED_INT_2_10_10_10_REV = 0x8368;\n\t  var UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;\n\t  var UNSIGNED_INT_5_9_9_9_REV = 0x8C3E;\n\t  var FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;\n\t  var UNSIGNED_INT_24_8 = 0x84FA;\n\n\t  var glTypeToTypedArray = {};\n\t  {\n\t    var tt = glTypeToTypedArray;\n\t    tt[BYTE] = Int8Array;\n\t    tt[UNSIGNED_BYTE] = Uint8Array;\n\t    tt[SHORT] = Int16Array;\n\t    tt[UNSIGNED_SHORT] = Uint16Array;\n\t    tt[INT] = Int32Array;\n\t    tt[UNSIGNED_INT] = Uint32Array;\n\t    tt[FLOAT] = Float32Array;\n\t    tt[UNSIGNED_SHORT_4_4_4_4] = Uint16Array;\n\t    tt[UNSIGNED_SHORT_5_5_5_1] = Uint16Array;\n\t    tt[UNSIGNED_SHORT_5_6_5] = Uint16Array;\n\t    tt[HALF_FLOAT] = Uint16Array;\n\t    tt[UNSIGNED_INT_2_10_10_10_REV] = Uint32Array;\n\t    tt[UNSIGNED_INT_10F_11F_11F_REV] = Uint32Array;\n\t    tt[UNSIGNED_INT_5_9_9_9_REV] = Uint32Array;\n\t    tt[FLOAT_32_UNSIGNED_INT_24_8_REV] = Uint32Array;\n\t    tt[UNSIGNED_INT_24_8] = Uint32Array;\n\t  }\n\n\t  /**\n\t   * Get the GL type for a typedArray\n\t   * @param {ArrayBuffer|ArrayBufferView} typedArray a typedArray\n\t   * @return {number} the GL type for array. For example pass in an `Int8Array` and `gl.BYTE` will\n\t   *   be returned. Pass in a `Uint32Array` and `gl.UNSIGNED_INT` will be returned\n\t   * @memberOf module:twgl/typedArray\n\t   */\n\t  function getGLTypeForTypedArray(typedArray) {\n\t    if (typedArray instanceof Int8Array) {\n\t      return BYTE;\n\t    } // eslint-disable-line\n\t    if (typedArray instanceof Uint8Array) {\n\t      return UNSIGNED_BYTE;\n\t    } // eslint-disable-line\n\t    if (typedArray instanceof Uint8ClampedArray) {\n\t      return UNSIGNED_BYTE;\n\t    } // eslint-disable-line\n\t    if (typedArray instanceof Int16Array) {\n\t      return SHORT;\n\t    } // eslint-disable-line\n\t    if (typedArray instanceof Uint16Array) {\n\t      return UNSIGNED_SHORT;\n\t    } // eslint-disable-line\n\t    if (typedArray instanceof Int32Array) {\n\t      return INT;\n\t    } // eslint-disable-line\n\t    if (typedArray instanceof Uint32Array) {\n\t      return UNSIGNED_INT;\n\t    } // eslint-disable-line\n\t    if (typedArray instanceof Float32Array) {\n\t      return FLOAT;\n\t    } // eslint-disable-line\n\t    throw \"unsupported typed array type\";\n\t  }\n\n\t  /**\n\t   * Get the GL type for a typedArray type\n\t   * @param {ArrayBufferViewType} typedArrayType a typedArray constructor\n\t   * @return {number} the GL type for type. For example pass in `Int8Array` and `gl.BYTE` will\n\t   *   be returned. Pass in `Uint32Array` and `gl.UNSIGNED_INT` will be returned\n\t   * @memberOf module:twgl/typedArray\n\t   */\n\t  function getGLTypeForTypedArrayType(typedArrayType) {\n\t    if (typedArrayType === Int8Array) {\n\t      return BYTE;\n\t    } // eslint-disable-line\n\t    if (typedArrayType === Uint8Array) {\n\t      return UNSIGNED_BYTE;\n\t    } // eslint-disable-line\n\t    if (typedArrayType === Uint8ClampedArray) {\n\t      return UNSIGNED_BYTE;\n\t    } // eslint-disable-line\n\t    if (typedArrayType === Int16Array) {\n\t      return SHORT;\n\t    } // eslint-disable-line\n\t    if (typedArrayType === Uint16Array) {\n\t      return UNSIGNED_SHORT;\n\t    } // eslint-disable-line\n\t    if (typedArrayType === Int32Array) {\n\t      return INT;\n\t    } // eslint-disable-line\n\t    if (typedArrayType === Uint32Array) {\n\t      return UNSIGNED_INT;\n\t    } // eslint-disable-line\n\t    if (typedArrayType === Float32Array) {\n\t      return FLOAT;\n\t    } // eslint-disable-line\n\t    throw \"unsupported typed array type\";\n\t  }\n\n\t  /**\n\t   * Get the typed array constructor for a given GL type\n\t   * @param {number} type the GL type. (eg: `gl.UNSIGNED_INT`)\n\t   * @return {function} the constructor for a the corresponding typed array. (eg. `Uint32Array`).\n\t   * @memberOf module:twgl/typedArray\n\t   */\n\t  function getTypedArrayTypeForGLType(type) {\n\t    var CTOR = glTypeToTypedArray[type];\n\t    if (!CTOR) {\n\t      throw \"unknown gl type\";\n\t    }\n\t    return CTOR;\n\t  }\n\n\t  function isArrayBuffer(a) {\n\t    return a && a.buffer && a.buffer instanceof ArrayBuffer;\n\t  }\n\n\t  // Using quotes prevents Uglify from changing the names.\n\t  return {\n\t    \"getGLTypeForTypedArray\": getGLTypeForTypedArray,\n\t    \"getGLTypeForTypedArrayType\": getGLTypeForTypedArrayType,\n\t    \"getTypedArrayTypeForGLType\": getTypedArrayTypeForGLType,\n\t    \"isArrayBuffer\": isArrayBuffer\n\t  };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\"use strict\";\n\n\t/*\n\t * Copyright 2015, Gregg Tavares.\n\t * All rights reserved.\n\t *\n\t * Redistribution and use in source and binary forms, with or without\n\t * modification, are permitted provided that the following conditions are\n\t * met:\n\t *\n\t *     * Redistributions of source code must retain the above copyright\n\t * notice, this list of conditions and the following disclaimer.\n\t *     * Redistributions in binary form must reproduce the above\n\t * copyright notice, this list of conditions and the following disclaimer\n\t * in the documentation and/or other materials provided with the\n\t * distribution.\n\t *     * Neither the name of Gregg Tavares. nor the names of his\n\t * contributors may be used to endorse or promote products derived from\n\t * this software without specific prior written permission.\n\t *\n\t * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\t * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n\t * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n\t * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n\t * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n\t * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n\t * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n\t * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n\t * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\t * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n\t * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\t */\n\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n\t  \"use strict\";\n\n\t  /**\n\t   * Copy an object 1 level deep\n\t   * @param {object} src object to copy\n\t   * @return {object} the copy\n\t   */\n\n\t  function shallowCopy(src) {\n\t    var dst = {};\n\t    Object.keys(src).forEach(function (key) {\n\t      dst[key] = src[key];\n\t    });\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Copy named properties\n\t   *\n\t   * @param {string[]} names names of properties to copy\n\t   * @param {object} src object to copy properties from\n\t   * @param {object} dst object to copy properties to\n\t   */\n\t  function copyNamedProperties(names, src, dst) {\n\t    names.forEach(function (name) {\n\t      var value = src[name];\n\t      if (value !== undefined) {\n\t        dst[name] = value;\n\t      }\n\t    });\n\t  }\n\n\t  /**\n\t   * Copies properties from source to dest only if a matching key is in dest\n\t   *\n\t   * @param {Object.<string, ?>} src the source\n\t   * @param {Object.<string, ?>} dst the dest\n\t   */\n\t  function copyExistingProperties(src, dst) {\n\t    Object.keys(dst).forEach(function (key) {\n\t      if (dst.hasOwnProperty(key) && src.hasOwnProperty(key)) {\n\t        dst[key] = src[key];\n\t      }\n\t    });\n\t  }\n\n\t  /**\n\t   * Gets the gl version as a number\n\t   * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n\t   * @return {number} version of gl\n\t   */\n\t  //function getVersionAsNumber(gl) {\n\t  //  return parseFloat(gl.getParameter(gl.VERSION).substr(6));\n\t  //}\n\n\t  /**\n\t   * Check if context is WebGL 2.0\n\t   * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n\t   * @return {bool} true if it's WebGL 2.0\n\t   * @memberOf module:twgl\n\t   */\n\t  function isWebGL2(gl) {\n\t    // This is the correct check but it's slow\n\t    //return gl.getParameter(gl.VERSION).indexOf(\"WebGL 2.0\") === 0;\n\t    // This might also be the correct check but I'm assuming it's slow-ish\n\t    // return gl instanceof WebGL2RenderingContext;\n\t    return !!gl.texStorage2D;\n\t  }\n\n\t  /**\n\t   * Check if context is WebGL 1.0\n\t   * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n\t   * @return {bool} true if it's WebGL 1.0\n\t   * @memberOf module:twgl\n\t   */\n\t  function isWebGL1(gl) {\n\t    // This is the correct check but it's slow\n\t    //var version = getVersionAsNumber(gl);\n\t    //return version <= 1.0 && version > 0.0;  // because as of 2016/5 Edge returns 0.96\n\t    // This might also be the correct check but I'm assuming it's slow-ish\n\t    // return gl instanceof WebGLRenderingContext;\n\t    return !gl.texStorage2D;\n\t  }\n\n\t  var error = window.console && window.console.error && typeof window.console.error === \"function\" ? window.console.error.bind(window.console) : function () {};\n\n\t  var warn = window.console && window.console.warn && typeof window.console.warn === \"function\" ? window.console.warn.bind(window.console) : function () {};\n\n\t  return {\n\t    copyExistingProperties: copyExistingProperties,\n\t    copyNamedProperties: copyNamedProperties,\n\t    shallowCopy: shallowCopy,\n\t    isWebGL1: isWebGL1,\n\t    isWebGL2: isWebGL2,\n\t    error: error,\n\t    warn: warn\n\t  };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\"use strict\";\n\n\t/*\n\t * Copyright 2015, Gregg Tavares.\n\t * All rights reserved.\n\t *\n\t * Redistribution and use in source and binary forms, with or without\n\t * modification, are permitted provided that the following conditions are\n\t * met:\n\t *\n\t *     * Redistributions of source code must retain the above copyright\n\t * notice, this list of conditions and the following disclaimer.\n\t *     * Redistributions in binary form must reproduce the above\n\t * copyright notice, this list of conditions and the following disclaimer\n\t * in the documentation and/or other materials provided with the\n\t * distribution.\n\t *     * Neither the name of Gregg Tavares. nor the names of his\n\t * contributors may be used to endorse or promote products derived from\n\t * this software without specific prior written permission.\n\t *\n\t * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\t * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n\t * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n\t * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n\t * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n\t * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n\t * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n\t * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n\t * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\t * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n\t * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\t */\n\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(6)], __WEBPACK_AMD_DEFINE_RESULT__ = function (programs) {\n\t  \"use strict\";\n\n\t  /**\n\t   * Drawing related functions\n\t   *\n\t   * For backward compatibily they are available at both `twgl.draw` and `twgl`\n\t   * itself\n\t   *\n\t   * See {@link module:twgl} for core functions\n\t   *\n\t   * @module twgl/draw\n\t   */\n\n\t  /**\n\t   * Calls `gl.drawElements` or `gl.drawArrays`, whichever is appropriate\n\t   *\n\t   * normally you'd call `gl.drawElements` or `gl.drawArrays` yourself\n\t   * but calling this means if you switch from indexed data to non-indexed\n\t   * data you don't have to remember to update your draw call.\n\t   *\n\t   * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n\t   * @param {(module:twgl.BufferInfo|module:twgl.VertexArrayInfo)} bufferInfo A BufferInfo as returned from {@link module:twgl.createBufferInfoFromArrays} or\n\t   *   a VertexArrayInfo as returned from {@link module:twgl.createVertexArrayInfo}\n\t   * @param {enum} [type] eg (gl.TRIANGLES, gl.LINES, gl.POINTS, gl.TRIANGLE_STRIP, ...). Defaults to `gl.TRIANGLES`\n\t   * @param {number} [count] An optional count. Defaults to bufferInfo.numElements\n\t   * @param {number} [offset] An optional offset. Defaults to 0.\n\t   * @memberOf module:twgl/draw\n\t   */\n\n\t  function drawBufferInfo(gl, bufferInfo, type, count, offset) {\n\t    type = type === undefined ? gl.TRIANGLES : type;\n\t    var indices = bufferInfo.indices;\n\t    var elementType = bufferInfo.elementType;\n\t    var numElements = count === undefined ? bufferInfo.numElements : count;\n\t    offset = offset === undefined ? 0 : offset;\n\t    if (elementType || indices) {\n\t      gl.drawElements(type, numElements, elementType === undefined ? gl.UNSIGNED_SHORT : bufferInfo.elementType, offset);\n\t    } else {\n\t      gl.drawArrays(type, offset, numElements);\n\t    }\n\t  }\n\n\t  /**\n\t   * A DrawObject is useful for putting objects in to an array and passing them to {@link module:twgl.drawObjectList}.\n\t   *\n\t   * You need either a `BufferInfo` or a `VertexArrayInfo`.\n\t   *\n\t   * @typedef {Object} DrawObject\n\t   * @property {boolean} [active] whether or not to draw. Default = `true` (must be `false` to be not true). In otherwords `undefined` = `true`\n\t   * @property {number} [type] type to draw eg. `gl.TRIANGLES`, `gl.LINES`, etc...\n\t   * @property {module:twgl.ProgramInfo} programInfo A ProgramInfo as returned from {@link module:twgl.createProgramInfo}\n\t   * @property {module:twgl.BufferInfo} [bufferInfo] A BufferInfo as returned from {@link module:twgl.createBufferInfoFromArrays}\n\t   * @property {module:twgl.VertexArrayInfo} [vertexArrayInfo] A VertexArrayInfo as returned from {@link module:twgl.createVertexArrayInfo}\n\t   * @property {Object<string, ?>} uniforms The values for the uniforms.\n\t   *   You can pass multiple objects by putting them in an array. For example\n\t   *\n\t   *     var sharedUniforms = {\n\t   *       u_fogNear: 10,\n\t   *       u_projection: ...\n\t   *       ...\n\t   *     };\n\t   *\n\t   *     var localUniforms = {\n\t   *       u_world: ...\n\t   *       u_diffuseColor: ...\n\t   *     };\n\t   *\n\t   *     var drawObj = {\n\t   *       ...\n\t   *       uniforms: [sharedUniforms, localUniforms],\n\t   *     };\n\t   *\n\t   * @property {number} [offset] the offset to pass to `gl.drawArrays` or `gl.drawElements`. Defaults to 0.\n\t   * @property {number} [count] the count to pass to `gl.drawArrays` or `gl.drawElemnts`. Defaults to bufferInfo.numElements.\n\t   * @memberOf module:twgl\n\t   */\n\n\t  /**\n\t   * Draws a list of objects\n\t   * @param {DrawObject[]} objectsToDraw an array of objects to draw.\n\t   * @memberOf module:twgl/draw\n\t   */\n\t  function drawObjectList(gl, objectsToDraw) {\n\t    var lastUsedProgramInfo = null;\n\t    var lastUsedBufferInfo = null;\n\n\t    objectsToDraw.forEach(function (object) {\n\t      if (object.active === false) {\n\t        return;\n\t      }\n\n\t      var programInfo = object.programInfo;\n\t      var bufferInfo = object.vertexArrayInfo || object.bufferInfo;\n\t      var bindBuffers = false;\n\t      var type = object.type === undefined ? gl.TRIANGLES : object.type;\n\n\t      if (programInfo !== lastUsedProgramInfo) {\n\t        lastUsedProgramInfo = programInfo;\n\t        gl.useProgram(programInfo.program);\n\n\t        // We have to rebind buffers when changing programs because we\n\t        // only bind buffers the program uses. So if 2 programs use the same\n\t        // bufferInfo but the 1st one uses only positions the when the\n\t        // we switch to the 2nd one some of the attributes will not be on.\n\t        bindBuffers = true;\n\t      }\n\n\t      // Setup all the needed attributes.\n\t      if (bindBuffers || bufferInfo !== lastUsedBufferInfo) {\n\t        if (lastUsedBufferInfo && lastUsedBufferInfo.vertexArrayObject && !bufferInfo.vertexArrayObject) {\n\t          gl.bindVertexArray(null);\n\t        }\n\t        lastUsedBufferInfo = bufferInfo;\n\t        programs.setBuffersAndAttributes(gl, programInfo, bufferInfo);\n\t      }\n\n\t      // Set the uniforms.\n\t      programs.setUniforms(programInfo, object.uniforms);\n\n\t      // Draw\n\t      drawBufferInfo(gl, bufferInfo, type, object.count, object.offset);\n\t    });\n\n\t    if (lastUsedBufferInfo.vertexArrayObject) {\n\t      gl.bindVertexArray(null);\n\t    }\n\t  }\n\n\t  // Using quotes prevents Uglify from changing the names.\n\t  // No speed diff AFAICT.\n\t  return {\n\t    \"drawBufferInfo\": drawBufferInfo,\n\t    \"drawObjectList\": drawObjectList\n\t  };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\"use strict\";\n\n\t/*\n\t * Copyright 2015, Gregg Tavares.\n\t * All rights reserved.\n\t *\n\t * Redistribution and use in source and binary forms, with or without\n\t * modification, are permitted provided that the following conditions are\n\t * met:\n\t *\n\t *     * Redistributions of source code must retain the above copyright\n\t * notice, this list of conditions and the following disclaimer.\n\t *     * Redistributions in binary form must reproduce the above\n\t * copyright notice, this list of conditions and the following disclaimer\n\t * in the documentation and/or other materials provided with the\n\t * distribution.\n\t *     * Neither the name of Gregg Tavares. nor the names of his\n\t * contributors may be used to endorse or promote products derived from\n\t * this software without specific prior written permission.\n\t *\n\t * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\t * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n\t * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n\t * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n\t * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n\t * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n\t * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n\t * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n\t * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\t * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n\t * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\t */\n\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function (utils) {\n\t  \"use strict\";\n\n\t  /**\n\t   * Low level shader program related functions\n\t   *\n\t   * You should generally not need to use these functions. They are provided\n\t   * for those cases where you're doing something out of the ordinary\n\t   * and you need lower level access.\n\t   *\n\t   * For backward compatibily they are available at both `twgl.programs` and `twgl`\n\t   * itself\n\t   *\n\t   * See {@link module:twgl} for core functions\n\t   *\n\t   * @module twgl/programs\n\t   */\n\n\t  var error = utils.error;\n\t  var warn = utils.warn;\n\n\t  var FLOAT = 0x1406;\n\t  var FLOAT_VEC2 = 0x8B50;\n\t  var FLOAT_VEC3 = 0x8B51;\n\t  var FLOAT_VEC4 = 0x8B52;\n\t  var INT = 0x1404;\n\t  var INT_VEC2 = 0x8B53;\n\t  var INT_VEC3 = 0x8B54;\n\t  var INT_VEC4 = 0x8B55;\n\t  var BOOL = 0x8B56;\n\t  var BOOL_VEC2 = 0x8B57;\n\t  var BOOL_VEC3 = 0x8B58;\n\t  var BOOL_VEC4 = 0x8B59;\n\t  var FLOAT_MAT2 = 0x8B5A;\n\t  var FLOAT_MAT3 = 0x8B5B;\n\t  var FLOAT_MAT4 = 0x8B5C;\n\t  var SAMPLER_2D = 0x8B5E;\n\t  var SAMPLER_CUBE = 0x8B60;\n\t  var SAMPLER_3D = 0x8B5F;\n\t  var SAMPLER_2D_SHADOW = 0x8B62;\n\t  var FLOAT_MAT2x3 = 0x8B65;\n\t  var FLOAT_MAT2x4 = 0x8B66;\n\t  var FLOAT_MAT3x2 = 0x8B67;\n\t  var FLOAT_MAT3x4 = 0x8B68;\n\t  var FLOAT_MAT4x2 = 0x8B69;\n\t  var FLOAT_MAT4x3 = 0x8B6A;\n\t  var SAMPLER_2D_ARRAY = 0x8DC1;\n\t  var SAMPLER_2D_ARRAY_SHADOW = 0x8DC4;\n\t  var SAMPLER_CUBE_SHADOW = 0x8DC5;\n\t  var UNSIGNED_INT = 0x1405;\n\t  var UNSIGNED_INT_VEC2 = 0x8DC6;\n\t  var UNSIGNED_INT_VEC3 = 0x8DC7;\n\t  var UNSIGNED_INT_VEC4 = 0x8DC8;\n\t  var INT_SAMPLER_2D = 0x8DCA;\n\t  var INT_SAMPLER_3D = 0x8DCB;\n\t  var INT_SAMPLER_CUBE = 0x8DCC;\n\t  var INT_SAMPLER_2D_ARRAY = 0x8DCF;\n\t  var UNSIGNED_INT_SAMPLER_2D = 0x8DD2;\n\t  var UNSIGNED_INT_SAMPLER_3D = 0x8DD3;\n\t  var UNSIGNED_INT_SAMPLER_CUBE = 0x8DD4;\n\t  var UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7;\n\n\t  var TEXTURE_2D = 0x0DE1;\n\t  var TEXTURE_CUBE_MAP = 0x8513;\n\t  var TEXTURE_3D = 0x806F;\n\t  var TEXTURE_2D_ARRAY = 0x8C1A;\n\n\t  var typeMap = {};\n\n\t  /**\n\t   * Returns the corresponding bind point for a given sampler type\n\t   */\n\t  function getBindPointForSamplerType(gl, type) {\n\t    return typeMap[type].bindPoint;\n\t  }\n\n\t  // This kind of sucks! If you could compose functions as in `var fn = gl[name];`\n\t  // this code could be a lot smaller but that is sadly really slow (T_T)\n\n\t  function floatSetter(gl, location) {\n\t    return function (v) {\n\t      gl.uniform1f(location, v);\n\t    };\n\t  }\n\n\t  function floatArraySetter(gl, location) {\n\t    return function (v) {\n\t      gl.uniform1fv(location, v);\n\t    };\n\t  }\n\n\t  function floatVec2Setter(gl, location) {\n\t    return function (v) {\n\t      gl.uniform2fv(location, v);\n\t    };\n\t  }\n\n\t  function floatVec3Setter(gl, location) {\n\t    return function (v) {\n\t      gl.uniform3fv(location, v);\n\t    };\n\t  }\n\n\t  function floatVec4Setter(gl, location) {\n\t    return function (v) {\n\t      gl.uniform4fv(location, v);\n\t    };\n\t  }\n\n\t  function intSetter(gl, location) {\n\t    return function (v) {\n\t      gl.uniform1i(location, v);\n\t    };\n\t  }\n\n\t  function intArraySetter(gl, location) {\n\t    return function (v) {\n\t      gl.uniform1iv(location, v);\n\t    };\n\t  }\n\n\t  function intVec2Setter(gl, location) {\n\t    return function (v) {\n\t      gl.uniform2iv(location, v);\n\t    };\n\t  }\n\n\t  function intVec3Setter(gl, location) {\n\t    return function (v) {\n\t      gl.uniform3iv(location, v);\n\t    };\n\t  }\n\n\t  function intVec4Setter(gl, location) {\n\t    return function (v) {\n\t      gl.uniform4iv(location, v);\n\t    };\n\t  }\n\n\t  function uintSetter(gl, location) {\n\t    return function (v) {\n\t      gl.uniform1ui(location, v);\n\t    };\n\t  }\n\n\t  function uintArraySetter(gl, location) {\n\t    return function (v) {\n\t      gl.uniform1uiv(location, v);\n\t    };\n\t  }\n\n\t  function uintVec2Setter(gl, location) {\n\t    return function (v) {\n\t      gl.uniform2uiv(location, v);\n\t    };\n\t  }\n\n\t  function uintVec3Setter(gl, location) {\n\t    return function (v) {\n\t      gl.uniform3uiv(location, v);\n\t    };\n\t  }\n\n\t  function uintVec4Setter(gl, location) {\n\t    return function (v) {\n\t      gl.uniform4uiv(location, v);\n\t    };\n\t  }\n\n\t  function floatMat2Setter(gl, location) {\n\t    return function (v) {\n\t      gl.uniformMatrix2fv(location, false, v);\n\t    };\n\t  }\n\n\t  function floatMat3Setter(gl, location) {\n\t    return function (v) {\n\t      gl.uniformMatrix3fv(location, false, v);\n\t    };\n\t  }\n\n\t  function floatMat4Setter(gl, location) {\n\t    return function (v) {\n\t      gl.uniformMatrix4fv(location, false, v);\n\t    };\n\t  }\n\n\t  function floatMat23Setter(gl, location) {\n\t    return function (v) {\n\t      gl.uniformMatrix2x3fv(location, false, v);\n\t    };\n\t  }\n\n\t  function floatMat32Setter(gl, location) {\n\t    return function (v) {\n\t      gl.uniformMatrix3x2fv(location, false, v);\n\t    };\n\t  }\n\n\t  function floatMat24Setter(gl, location) {\n\t    return function (v) {\n\t      gl.uniformMatrix2x4fv(location, false, v);\n\t    };\n\t  }\n\n\t  function floatMat42Setter(gl, location) {\n\t    return function (v) {\n\t      gl.uniformMatrix4x2fv(location, false, v);\n\t    };\n\t  }\n\n\t  function floatMat34Setter(gl, location) {\n\t    return function (v) {\n\t      gl.uniformMatrix3x4fv(location, false, v);\n\t    };\n\t  }\n\n\t  function floatMat43Setter(gl, location) {\n\t    return function (v) {\n\t      gl.uniformMatrix4x3fv(location, false, v);\n\t    };\n\t  }\n\n\t  function samplerSetter(gl, type, unit, location) {\n\t    var bindPoint = getBindPointForSamplerType(gl, type);\n\t    return utils.isWebGL2(gl) ? function (textureOrPair) {\n\t      var texture = void 0;\n\t      var sampler = void 0;\n\t      if (textureOrPair instanceof WebGLTexture) {\n\t        texture = textureOrPair;\n\t        sampler = null;\n\t      } else {\n\t        texture = textureOrPair.texture;\n\t        sampler = textureOrPair.sampler;\n\t      }\n\t      gl.uniform1i(location, unit);\n\t      gl.activeTexture(gl.TEXTURE0 + unit);\n\t      gl.bindTexture(bindPoint, texture);\n\t      gl.bindSampler(unit, sampler);\n\t    } : function (texture) {\n\t      gl.uniform1i(location, unit);\n\t      gl.activeTexture(gl.TEXTURE0 + unit);\n\t      gl.bindTexture(bindPoint, texture);\n\t    };\n\t  }\n\n\t  function samplerArraySetter(gl, type, unit, location, size) {\n\t    var bindPoint = getBindPointForSamplerType(gl, type);\n\t    var units = new Int32Array(size);\n\t    for (var ii = 0; ii < size; ++ii) {\n\t      units[ii] = unit + ii;\n\t    }\n\n\t    return utils.isWebGL2(gl) ? function (textures) {\n\t      gl.uniform1iv(location, units);\n\t      textures.forEach(function (textureOrPair, index) {\n\t        gl.activeTexture(gl.TEXTURE0 + units[index]);\n\t        var texture = void 0;\n\t        var sampler = void 0;\n\t        if (textureOrPair instanceof WebGLTexture) {\n\t          texture = textureOrPair;\n\t          sampler = null;\n\t        } else {\n\t          texture = textureOrPair.texture;\n\t          sampler = textureOrPair.sampler;\n\t        }\n\t        gl.bindSampler(unit, sampler);\n\t        gl.bindTexture(bindPoint, texture);\n\t      });\n\t    } : function (textures) {\n\t      gl.uniform1iv(location, units);\n\t      textures.forEach(function (texture, index) {\n\t        gl.activeTexture(gl.TEXTURE0 + units[index]);\n\t        gl.bindTexture(bindPoint, texture);\n\t      });\n\t    };\n\t  }\n\n\t  typeMap[FLOAT] = { Type: Float32Array, size: 4, setter: floatSetter, arraySetter: floatArraySetter };\n\t  typeMap[FLOAT_VEC2] = { Type: Float32Array, size: 8, setter: floatVec2Setter };\n\t  typeMap[FLOAT_VEC3] = { Type: Float32Array, size: 12, setter: floatVec3Setter };\n\t  typeMap[FLOAT_VEC4] = { Type: Float32Array, size: 16, setter: floatVec4Setter };\n\t  typeMap[INT] = { Type: Int32Array, size: 4, setter: intSetter, arraySetter: intArraySetter };\n\t  typeMap[INT_VEC2] = { Type: Int32Array, size: 8, setter: intVec2Setter };\n\t  typeMap[INT_VEC3] = { Type: Int32Array, size: 12, setter: intVec3Setter };\n\t  typeMap[INT_VEC4] = { Type: Int32Array, size: 16, setter: intVec4Setter };\n\t  typeMap[UNSIGNED_INT] = { Type: Uint32Array, size: 4, setter: uintSetter, arraySetter: uintArraySetter };\n\t  typeMap[UNSIGNED_INT_VEC2] = { Type: Uint32Array, size: 8, setter: uintVec2Setter };\n\t  typeMap[UNSIGNED_INT_VEC3] = { Type: Uint32Array, size: 12, setter: uintVec3Setter };\n\t  typeMap[UNSIGNED_INT_VEC4] = { Type: Uint32Array, size: 16, setter: uintVec4Setter };\n\t  typeMap[BOOL] = { Type: Uint32Array, size: 4, setter: intSetter, arraySetter: intArraySetter };\n\t  typeMap[BOOL_VEC2] = { Type: Uint32Array, size: 8, setter: intVec2Setter };\n\t  typeMap[BOOL_VEC3] = { Type: Uint32Array, size: 12, setter: intVec3Setter };\n\t  typeMap[BOOL_VEC4] = { Type: Uint32Array, size: 16, setter: intVec4Setter };\n\t  typeMap[FLOAT_MAT2] = { Type: Float32Array, size: 16, setter: floatMat2Setter };\n\t  typeMap[FLOAT_MAT3] = { Type: Float32Array, size: 36, setter: floatMat3Setter };\n\t  typeMap[FLOAT_MAT4] = { Type: Float32Array, size: 64, setter: floatMat4Setter };\n\t  typeMap[FLOAT_MAT2x3] = { Type: Float32Array, size: 24, setter: floatMat23Setter };\n\t  typeMap[FLOAT_MAT2x4] = { Type: Float32Array, size: 32, setter: floatMat24Setter };\n\t  typeMap[FLOAT_MAT3x2] = { Type: Float32Array, size: 24, setter: floatMat32Setter };\n\t  typeMap[FLOAT_MAT3x4] = { Type: Float32Array, size: 48, setter: floatMat34Setter };\n\t  typeMap[FLOAT_MAT4x2] = { Type: Float32Array, size: 32, setter: floatMat42Setter };\n\t  typeMap[FLOAT_MAT4x3] = { Type: Float32Array, size: 48, setter: floatMat43Setter };\n\t  typeMap[SAMPLER_2D] = { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D };\n\t  typeMap[SAMPLER_CUBE] = { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP };\n\t  typeMap[SAMPLER_3D] = { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: TEXTURE_3D };\n\t  typeMap[SAMPLER_2D_SHADOW] = { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D };\n\t  typeMap[SAMPLER_2D_ARRAY] = { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY };\n\t  typeMap[SAMPLER_2D_ARRAY_SHADOW] = { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY };\n\t  typeMap[SAMPLER_CUBE_SHADOW] = { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP };\n\t  typeMap[INT_SAMPLER_2D] = { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D };\n\t  typeMap[INT_SAMPLER_3D] = { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: TEXTURE_3D };\n\t  typeMap[INT_SAMPLER_CUBE] = { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP };\n\t  typeMap[INT_SAMPLER_2D_ARRAY] = { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY };\n\t  typeMap[UNSIGNED_INT_SAMPLER_2D] = { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D };\n\t  typeMap[UNSIGNED_INT_SAMPLER_3D] = { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: TEXTURE_3D };\n\t  typeMap[UNSIGNED_INT_SAMPLER_CUBE] = { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP };\n\t  typeMap[UNSIGNED_INT_SAMPLER_2D_ARRAY] = { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY };\n\n\t  function floatAttribSetter(gl, index) {\n\t    return function (b) {\n\t      gl.bindBuffer(gl.ARRAY_BUFFER, b.buffer);\n\t      gl.enableVertexAttribArray(index);\n\t      gl.vertexAttribPointer(index, b.numComponents || b.size, b.type || gl.FLOAT, b.normalize || false, b.stride || 0, b.offset || 0);\n\t    };\n\t  }\n\n\t  function intAttribSetter(gl, index) {\n\t    return function (b) {\n\t      gl.bindBuffer(gl.ARRAY_BUFFER, b.buffer);\n\t      gl.enableVertexAttribArray(index);\n\t      gl.vertexAttribIPointer(index, b.numComponents || b.size, b.type || gl.INT, b.stride || 0, b.offset || 0);\n\t    };\n\t  }\n\n\t  function matAttribSetter(gl, index, typeInfo) {\n\t    var defaultSize = typeInfo.size;\n\t    var count = typeInfo.count;\n\n\t    return function (b) {\n\t      gl.bindBuffer(gl.ARRAY_BUFFER, b.buffer);\n\t      var numComponents = b.size || b.numComponents || defaultSize;\n\t      var size = numComponents / count;\n\t      var type = b.type || gl.FLOAT;\n\t      var typeInfo = typeMap[type];\n\t      var stride = typeInfo.size * numComponents;\n\t      var normalize = b.normalize || false;\n\t      var offset = b.offset || 0;\n\t      var rowOffset = stride / count;\n\t      for (var i = 0; i < count; ++i) {\n\t        gl.enableVertexAttribArray(index + i);\n\t        gl.vertexAttribPointer(index + i, size, type, normalize, stride, offset + rowOffset * i);\n\t      }\n\t    };\n\t  }\n\n\t  var attrTypeMap = {};\n\t  attrTypeMap[FLOAT] = { size: 4, setter: floatAttribSetter };\n\t  attrTypeMap[FLOAT_VEC2] = { size: 8, setter: floatAttribSetter };\n\t  attrTypeMap[FLOAT_VEC3] = { size: 12, setter: floatAttribSetter };\n\t  attrTypeMap[FLOAT_VEC4] = { size: 16, setter: floatAttribSetter };\n\t  attrTypeMap[INT] = { size: 4, setter: intAttribSetter };\n\t  attrTypeMap[INT_VEC2] = { size: 8, setter: intAttribSetter };\n\t  attrTypeMap[INT_VEC3] = { size: 12, setter: intAttribSetter };\n\t  attrTypeMap[INT_VEC4] = { size: 16, setter: intAttribSetter };\n\t  attrTypeMap[UNSIGNED_INT] = { size: 4, setter: intAttribSetter };\n\t  attrTypeMap[UNSIGNED_INT_VEC2] = { size: 8, setter: intAttribSetter };\n\t  attrTypeMap[UNSIGNED_INT_VEC3] = { size: 12, setter: intAttribSetter };\n\t  attrTypeMap[UNSIGNED_INT_VEC4] = { size: 16, setter: intAttribSetter };\n\t  attrTypeMap[BOOL] = { size: 4, setter: intAttribSetter };\n\t  attrTypeMap[BOOL_VEC2] = { size: 8, setter: intAttribSetter };\n\t  attrTypeMap[BOOL_VEC3] = { size: 12, setter: intAttribSetter };\n\t  attrTypeMap[BOOL_VEC4] = { size: 16, setter: intAttribSetter };\n\t  attrTypeMap[FLOAT_MAT2] = { size: 4, setter: matAttribSetter, count: 2 };\n\t  attrTypeMap[FLOAT_MAT3] = { size: 9, setter: matAttribSetter, count: 3 };\n\t  attrTypeMap[FLOAT_MAT4] = { size: 16, setter: matAttribSetter, count: 4 };\n\n\t  // make sure we don't see a global gl\n\t  var gl = undefined; // eslint-disable-line\n\n\t  /**\n\t   * Error Callback\n\t   * @callback ErrorCallback\n\t   * @param {string} msg error message.\n\t   * @param {number} [lineOffset] amount to add to line number\n\t   * @memberOf module:twgl\n\t   */\n\n\t  function addLineNumbers(src, lineOffset) {\n\t    lineOffset = lineOffset || 0;\n\t    ++lineOffset;\n\n\t    return src.split(\"\\n\").map(function (line, ndx) {\n\t      return ndx + lineOffset + \": \" + line;\n\t    }).join(\"\\n\");\n\t  }\n\n\t  var spaceRE = /^[ \\t]*\\n/;\n\n\t  /**\n\t   * Loads a shader.\n\t   * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n\t   * @param {string} shaderSource The shader source.\n\t   * @param {number} shaderType The type of shader.\n\t   * @param {module:twgl.ErrorCallback} opt_errorCallback callback for errors.\n\t   * @return {WebGLShader} The created shader.\n\t   */\n\t  function loadShader(gl, shaderSource, shaderType, opt_errorCallback) {\n\t    var errFn = opt_errorCallback || error;\n\t    // Create the shader object\n\t    var shader = gl.createShader(shaderType);\n\n\t    // Remove the first end of line because WebGL 2.0 requires\n\t    // #version 300 es\n\t    // as the first line. No whitespace allowed before that line\n\t    // so\n\t    //\n\t    // <script>\n\t    // #version 300 es\n\t    // </script>\n\t    //\n\t    // Has one line before it which is invalid according to GLSL ES 3.00\n\t    //\n\t    var lineOffset = 0;\n\t    if (spaceRE.test(shaderSource)) {\n\t      lineOffset = 1;\n\t      shaderSource = shaderSource.replace(spaceRE, '');\n\t    }\n\n\t    // Load the shader source\n\t    gl.shaderSource(shader, shaderSource);\n\n\t    // Compile the shader\n\t    gl.compileShader(shader);\n\n\t    // Check the compile status\n\t    var compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n\t    if (!compiled) {\n\t      // Something went wrong during compilation; get the error\n\t      var lastError = gl.getShaderInfoLog(shader);\n\t      errFn(addLineNumbers(shaderSource, lineOffset) + \"\\n*** Error compiling shader: \" + lastError);\n\t      gl.deleteShader(shader);\n\t      return null;\n\t    }\n\n\t    return shader;\n\t  }\n\n\t  /**\n\t   * @typedef {Object} ProgramOptions\n\t   * @property {function(string)} [errorCallback] callback for errors\n\t   * @property {Object.<string,number>} [attribLocations] a attribute name to location map\n\t   * @property {(module:twgl.BufferInfo|Object.<string,module:twgl.AttribInfo>|string[])} [transformFeedbackVaryings] If passed\n\t   *   a BufferInfo will use the attribs names inside. If passed an object of AttribInfos will use the names from that object. Otherwise\n\t   *   you can pass an array of names.\n\t   * @property {number} [transformFeedbackMode] the mode to pass `gl.transformFeedbackVaryings`. Defaults to `SEPARATE_ATTRIBS`.\n\t   * @memberOf module:twgl\n\t   */\n\n\t  /**\n\t   * Gets the program options based on all these optional arguments\n\t   * @param {module:twgl.ProgramOptions|string[]} [opt_attribs] Options for the program or an array of attribs names. Locations will be assigned by index if not passed in\n\t   * @param {number[]} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations.\n\t   * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n\t   *        on error. If you want something else pass an callback. It's passed an error message.\n\t   * @return {module:twgl.ProgramOptions} an instance of ProgramOptions based on the arguments pased on\n\t   */\n\t  function getProgramOptions(opt_attribs, opt_locations, opt_errorCallback) {\n\t    if (typeof opt_locations === 'function') {\n\t      opt_errorCallback = opt_locations;\n\t      opt_locations = undefined;\n\t    }\n\t    if (typeof opt_attribs === 'function') {\n\t      opt_errorCallback = opt_attribs;\n\t      opt_attribs = undefined;\n\t    } else if (opt_attribs && !Array.isArray(opt_attribs)) {\n\t      // If we have an errorCallback we can just return this object\n\t      // Otherwise we need to construct one with default errorCallback\n\t      if (opt_attribs.errorCallback) {\n\t        return opt_attribs;\n\t      }\n\t      var opt = opt_attribs;\n\t      opt_errorCallback = opt.errorCallback;\n\t      opt_attribs = opt.attribLocations;\n\t      var transformFeedbackVaryings = opt.transformFeedbackVaryings;\n\t    }\n\n\t    var options = {\n\t      errorCallback: opt_errorCallback || error,\n\t      transformFeedbackVaryings: transformFeedbackVaryings\n\t    };\n\n\t    if (opt_attribs) {\n\t      var attribLocations = {};\n\t      if (Array.isArray(opt_attribs)) {\n\t        opt_attribs.forEach(function (attrib, ndx) {\n\t          attribLocations[attrib] = opt_locations ? opt_locations[ndx] : ndx;\n\t        });\n\t      } else {\n\t        attribLocations = opt_attribs;\n\t      }\n\t      options.attribLocations = attribLocations;\n\t    }\n\n\t    return options;\n\t  }\n\n\t  var defaultShaderType = [\"VERTEX_SHADER\", \"FRAGMENT_SHADER\"];\n\n\t  function getShaderTypeFromScriptType(scriptType) {\n\t    if (scriptType.indexOf(\"frag\") >= 0) {\n\t      return gl.FRAGMENT_SHADER;\n\t    } else if (scriptType.indexOf(\"vert\") >= 0) {\n\t      return gl.VERTEX_SHADER;\n\t    }\n\t    return undefined;\n\t  }\n\n\t  function deleteShaders(gl, shaders) {\n\t    shaders.forEach(function (shader) {\n\t      gl.deleteShader(shader);\n\t    });\n\t  }\n\n\t  /**\n\t   * Creates a program, attaches (and/or compiles) shaders, binds attrib locations, links the\n\t   * program and calls useProgram.\n\t   *\n\t   * NOTE: There are 4 signatures for this function\n\t   *\n\t   *     twgl.createProgram(gl, [vs, fs], options);\n\t   *     twgl.createProgram(gl, [vs, fs], opt_errFunc);\n\t   *     twgl.createProgram(gl, [vs, fs], opt_attribs, opt_errFunc);\n\t   *     twgl.createProgram(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n\t   *\n\t   * @param {WebGLShader[]|string[]} shaders The shaders to attach, or element ids for their source, or strings that contain their source\n\t   * @param {module:twgl.ProgramOptions|string[]} [opt_attribs] Options for the program or an array of attribs names. Locations will be assigned by index if not passed in\n\t   * @param {number[]} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations.\n\t   * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n\t   *        on error. If you want something else pass an callback. It's passed an error message.\n\t   * @return {WebGLProgram?} the created program or null if error.\n\t   * @memberOf module:twgl/programs\n\t   */\n\t  function createProgram(gl, shaders, opt_attribs, opt_locations, opt_errorCallback) {\n\t    var progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n\t    var realShaders = [];\n\t    var newShaders = [];\n\t    for (var ndx = 0; ndx < shaders.length; ++ndx) {\n\t      var shader = shaders[ndx];\n\t      if (typeof shader === 'string') {\n\t        var elem = document.getElementById(shader);\n\t        var src = elem ? elem.text : shader;\n\t        var type = gl[defaultShaderType[ndx]];\n\t        if (elem && elem.type) {\n\t          type = getShaderTypeFromScriptType(elem.type) || type;\n\t        }\n\t        shader = loadShader(gl, src, type, progOptions.errorCallback);\n\t        newShaders.push(shader);\n\t      }\n\t      if (shader instanceof WebGLShader) {\n\t        realShaders.push(shader);\n\t      }\n\t    }\n\n\t    if (realShaders.length !== shaders.length) {\n\t      programOptions.errorCallback(\"not enough shaders for program\");\n\t      deleteShaders(gl, newShaders);\n\t      return null;\n\t    }\n\n\t    var program = gl.createProgram();\n\t    realShaders.forEach(function (shader) {\n\t      gl.attachShader(program, shader);\n\t    });\n\t    if (progOptions.attribLocations) {\n\t      Object.keys(progOptions.attribLocations).forEach(function (attrib) {\n\t        gl.bindAttribLocation(program, progOptions.attribLocations[attrib], attrib);\n\t      });\n\t    }\n\t    var varyings = progOptions.transformFeedbackVaryings;\n\t    if (varyings) {\n\t      if (varyings.attribs) {\n\t        varyings = varyings.attribs;\n\t      }\n\t      if (!Array.isArray(varyings)) {\n\t        varyings = Object.keys(varyings);\n\t      }\n\t      gl.transformFeedbackVaryings(program, varyings, progOptions.transformFeedbackMode || gl.SEPARATE_ATTRIBS);\n\t    }\n\t    gl.linkProgram(program);\n\n\t    // Check the link status\n\t    var linked = gl.getProgramParameter(program, gl.LINK_STATUS);\n\t    if (!linked) {\n\t      // something went wrong with the link\n\t      var lastError = gl.getProgramInfoLog(program);\n\t      progOptions.errorCallback(\"Error in program linking:\" + lastError);\n\n\t      gl.deleteProgram(program);\n\t      deleteShaders(gl, newShaders);\n\t      return null;\n\t    }\n\t    return program;\n\t  }\n\n\t  /**\n\t   * Loads a shader from a script tag.\n\t   * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n\t   * @param {string} scriptId The id of the script tag.\n\t   * @param {number} [opt_shaderType] The type of shader. If not passed in it will\n\t   *     be derived from the type of the script tag.\n\t   * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors.\n\t   * @return {WebGLShader?} The created shader or null if error.\n\t   */\n\t  function createShaderFromScript(gl, scriptId, opt_shaderType, opt_errorCallback) {\n\t    var shaderSource = \"\";\n\t    var shaderScript = document.getElementById(scriptId);\n\t    if (!shaderScript) {\n\t      throw \"*** Error: unknown script element\" + scriptId;\n\t    }\n\t    shaderSource = shaderScript.text;\n\n\t    var shaderType = opt_shaderType || getShaderTypeFromScriptType(shaderScript.type);\n\t    if (!shaderType) {\n\t      throw \"*** Error: unknown shader type\";\n\t    }\n\n\t    return loadShader(gl, shaderSource, shaderType, opt_errorCallback);\n\t  }\n\n\t  /**\n\t   * Creates a program from 2 script tags.\n\t   *\n\t   * NOTE: There are 4 signatures for this function\n\t   *\n\t   *     twgl.createProgramFromScripts(gl, [vs, fs], opt_options);\n\t   *     twgl.createProgramFromScripts(gl, [vs, fs], opt_errFunc);\n\t   *     twgl.createProgramFromScripts(gl, [vs, fs], opt_attribs, opt_errFunc);\n\t   *     twgl.createProgramFromScripts(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n\t   *\n\t   * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n\t   *        to use.\n\t   * @param {string[]} shaderScriptIds Array of ids of the script\n\t   *        tags for the shaders. The first is assumed to be the\n\t   *        vertex shader, the second the fragment shader.\n\t   * @param {string[]} [opt_attribs] An array of attribs names. Locations will be assigned by index if not passed in\n\t   * @param {number[]} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations.\n\t   * @param {module:twgl.ErrorCallback} opt_errorCallback callback for errors. By default it just prints an error to the console\n\t   *        on error. If you want something else pass an callback. It's passed an error message.\n\t   * @return {WebGLProgram} The created program.\n\t   * @memberOf module:twgl/programs\n\t   */\n\t  function createProgramFromScripts(gl, shaderScriptIds, opt_attribs, opt_locations, opt_errorCallback) {\n\t    var progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n\t    var shaders = [];\n\t    for (var ii = 0; ii < shaderScriptIds.length; ++ii) {\n\t      var shader = createShaderFromScript(gl, shaderScriptIds[ii], gl[defaultShaderType[ii]], progOptions.errorCallback);\n\t      if (!shader) {\n\t        return null;\n\t      }\n\t      shaders.push(shader);\n\t    }\n\t    return createProgram(gl, shaders, progOptions);\n\t  }\n\n\t  /**\n\t   * Creates a program from 2 sources.\n\t   *\n\t   * NOTE: There are 4 signatures for this function\n\t   *\n\t   *     twgl.createProgramFromSource(gl, [vs, fs], opt_options);\n\t   *     twgl.createProgramFromSource(gl, [vs, fs], opt_errFunc);\n\t   *     twgl.createProgramFromSource(gl, [vs, fs], opt_attribs, opt_errFunc);\n\t   *     twgl.createProgramFromSource(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n\t   *\n\t   * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n\t   *        to use.\n\t   * @param {string[]} shaderSources Array of sources for the\n\t   *        shaders. The first is assumed to be the vertex shader,\n\t   *        the second the fragment shader.\n\t   * @param {string[]} [opt_attribs] An array of attribs names. Locations will be assigned by index if not passed in\n\t   * @param {number[]} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations.\n\t   * @param {module:twgl.ErrorCallback} opt_errorCallback callback for errors. By default it just prints an error to the console\n\t   *        on error. If you want something else pass an callback. It's passed an error message.\n\t   * @return {WebGLProgram} The created program.\n\t   * @memberOf module:twgl/programs\n\t   */\n\t  function createProgramFromSources(gl, shaderSources, opt_attribs, opt_locations, opt_errorCallback) {\n\t    var progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n\t    var shaders = [];\n\t    for (var ii = 0; ii < shaderSources.length; ++ii) {\n\t      var shader = loadShader(gl, shaderSources[ii], gl[defaultShaderType[ii]], progOptions.errorCallback);\n\t      if (!shader) {\n\t        return null;\n\t      }\n\t      shaders.push(shader);\n\t    }\n\t    return createProgram(gl, shaders, progOptions);\n\t  }\n\n\t  /**\n\t   * Creates setter functions for all uniforms of a shader\n\t   * program.\n\t   *\n\t   * @see {@link module:twgl.setUniforms}\n\t   *\n\t   * @param {WebGLProgram} program the program to create setters for.\n\t   * @returns {Object.<string, function>} an object with a setter by name for each uniform\n\t   * @memberOf module:twgl/programs\n\t   */\n\t  function createUniformSetters(gl, program) {\n\t    var textureUnit = 0;\n\n\t    /**\n\t     * Creates a setter for a uniform of the given program with it's\n\t     * location embedded in the setter.\n\t     * @param {WebGLProgram} program\n\t     * @param {WebGLUniformInfo} uniformInfo\n\t     * @returns {function} the created setter.\n\t     */\n\t    function createUniformSetter(program, uniformInfo) {\n\t      var location = gl.getUniformLocation(program, uniformInfo.name);\n\t      var isArray = uniformInfo.size > 1 && uniformInfo.name.substr(-3) === \"[0]\";\n\t      var type = uniformInfo.type;\n\t      var typeInfo = typeMap[type];\n\t      if (!typeInfo) {\n\t        throw \"unknown type: 0x\" + type.toString(16); // we should never get here.\n\t      }\n\t      var setter;\n\t      if (typeInfo.bindPoint) {\n\t        // it's a sampler\n\t        var unit = textureUnit;\n\t        textureUnit += uniformInfo.size;\n\t        if (isArray) {\n\t          setter = typeInfo.arraySetter(gl, type, unit, location, uniformInfo.size);\n\t        } else {\n\t          setter = typeInfo.setter(gl, type, unit, location, uniformInfo.size);\n\t        }\n\t      } else {\n\t        if (typeInfo.arraySetter && isArray) {\n\t          setter = typeInfo.arraySetter(gl, location);\n\t        } else {\n\t          setter = typeInfo.setter(gl, location);\n\t        }\n\t      }\n\t      setter.location = location;\n\t      return setter;\n\t    }\n\n\t    var uniformSetters = {};\n\t    var numUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n\n\t    for (var ii = 0; ii < numUniforms; ++ii) {\n\t      var uniformInfo = gl.getActiveUniform(program, ii);\n\t      if (!uniformInfo) {\n\t        break;\n\t      }\n\t      var name = uniformInfo.name;\n\t      // remove the array suffix.\n\t      if (name.substr(-3) === \"[0]\") {\n\t        name = name.substr(0, name.length - 3);\n\t      }\n\t      var setter = createUniformSetter(program, uniformInfo);\n\t      uniformSetters[name] = setter;\n\t    }\n\t    return uniformSetters;\n\t  }\n\n\t  /**\n\t   * @typedef {Object} TransformFeedbackInfo\n\t   * @property {number} index index of transform feedback\n\t   * @property {number} type GL type\n\t   * @property {number} size 1 - 4\n\t   * @memberOf module:twgl\n\t   */\n\n\t  /**\n\t   * Create TransformFeedbackInfo for passing to bind/unbindTransformFeedbackInfo.\n\t   * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n\t   * @param {WebGLProgram} program an existing WebGLProgram.\n\t   * @return {Object<string, module:twgl.TransformFeedbackInfo>}\n\t   * @memberOf module:twgl\n\t   */\n\t  function createTransformFeedbackInfo(gl, program) {\n\t    var info = {};\n\t    var numVaryings = gl.getProgramParameter(program, gl.TRANSFORM_FEEDBACK_VARYINGS);\n\t    for (var ii = 0; ii < numVaryings; ++ii) {\n\t      var varying = gl.getTransformFeedbackVarying(program, ii);\n\t      info[varying.name] = {\n\t        index: ii,\n\t        type: varying.type,\n\t        size: varying.size\n\t      };\n\t    }\n\t    return info;\n\t  }\n\n\t  /**\n\t   * Binds buffers for transform feedback.\n\t   *\n\t   * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n\t   * @param {(module:twgl.ProgramInfo|Object<string, module:twgl.TransformFeedbackInfo>)} transformFeedbackInfo A ProgramInfo or TransformFeedbackInfo.\n\t   * @param {(module:twgl.BufferInfo|Object<string, module:twgl.AttribInfo>)} [bufferInfo] A BufferInfo or set of AttribInfos.\n\t   * @memberOf module:twgl\n\t   */\n\t  function bindTransformFeedbackInfo(gl, transformFeedbackInfo, bufferInfo) {\n\t    if (transformFeedbackInfo.transformFeedbackInfo) {\n\t      transformFeedbackInfo = transformFeedbackInfo.transformFeedbackInfo;\n\t    }\n\t    if (bufferInfo.attribs) {\n\t      bufferInfo = bufferInfo.attribs;\n\t    }\n\t    for (var name in bufferInfo) {\n\t      var varying = transformFeedbackInfo[name];\n\t      if (varying) {\n\t        var buf = bufferInfo[name];\n\t        if (buf.offset) {\n\t          gl.bindBufferRange(gl.TRANSFORM_FEEDBACK_BUFFER, varying.index, buf.buffer, buf.offset, buf.size);\n\t        } else {\n\t          gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, varying.index, buf.buffer);\n\t        }\n\t      }\n\t    }\n\t  }\n\n\t  /**\n\t   * Unbinds buffers afetr transform feedback.\n\t   *\n\t   * Buffers can not be bound to 2 bind points so if you try to bind a buffer used\n\t   * in a transform feedback as an ARRAY_BUFFER for an attribute it will fail.\n\t   *\n\t   * This function unbinds all buffers that were bound with {@link module:twgl.bindTransformFeedbackInfo}.\n\t   *\n\t   * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n\t   * @param {(module:twgl.ProgramInfo|Object<string, module:twgl.TransformFeedbackInfo>)} transformFeedbackInfo A ProgramInfo or TransformFeedbackInfo.\n\t   * @param {(module:twgl.BufferInfo|Object<string, module:twgl.AttribInfo>)} [bufferInfo] A BufferInfo or set of AttribInfos.\n\t   */\n\t  function unbindTransformFeedbackInfo(gl, transformFeedbackInfo, bufferInfo) {\n\t    if (transformFeedbackInfo.transformFeedbackInfo) {\n\t      transformFeedbackInfo = transformFeedbackInfo.transformFeedbackInfo;\n\t    }\n\t    if (bufferInfo.attribs) {\n\t      bufferInfo = bufferInfo.attribs;\n\t    }\n\t    for (var name in bufferInfo) {\n\t      var varying = transformFeedbackInfo[name];\n\t      if (varying) {\n\t        gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, varying.index, null);\n\t      }\n\t    }\n\t  }\n\n\t  /**\n\t   * Creates a transform feedback and sets the buffers\n\t   * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n\t   * @param {module:twgl.ProgramInfo} programInfo A ProgramInfo as returned from {@link module:twgl.createProgramInfo}\n\t   * @param {(module:twgl.BufferInfo|Object<string, module:twgl.AttribInfo>)} [bufferInfo] A BufferInfo or set of AttribInfos.\n\t   * @return {WebGLTransformFeedback} the created transform feedback\n\t   * @memberOf module:twgl\n\t   */\n\t  function createTransformFeedback(gl, programInfo, bufferInfo) {\n\t    var tf = gl.createTransformFeedback();\n\t    gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, tf);\n\t    gl.useProgram(programInfo.program);\n\t    bindTransformFeedbackInfo(gl, programInfo, bufferInfo);\n\t    gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, null);\n\t    // This is only needed because of a bug in Chrome 56. Will remove\n\t    // when chrome fixes it.\n\t    unbindTransformFeedbackInfo(gl, programInfo, bufferInfo);\n\t    return tf;\n\t  }\n\n\t  /**\n\t   * @typedef {Object} UniformData\n\t   * @property {number} type The WebGL type enum for this uniform\n\t   * @property {number} size The number of elements for this uniform\n\t   * @property {number} blockNdx The block index this uniform appears in\n\t   * @property {number} offset The byte offset in the block for this uniform's value\n\t   * @memberOf module:twgl\n\t   */\n\n\t  /**\n\t   * The specification for one UniformBlockObject\n\t   *\n\t   * @typedef {Object} BlockSpec\n\t   * @property {number} index The index of the block.\n\t   * @property {number} size The size in bytes needed for the block\n\t   * @property {number[]} uniformIndices The indices of the uniforms used by the block. These indices\n\t   *    correspond to entries in a UniformData array in the {@link module:twgl.UniformBlockSpec}.\n\t   * @property {bool} usedByVertexShader Self explanitory\n\t   * @property {bool} usedByFragmentShader Self explanitory\n\t   * @property {bool} used Self explanitory\n\t   * @memberOf module:twgl\n\t   */\n\n\t  /**\n\t   * A `UniformBlockSpec` represents the data needed to create and bind\n\t   * UniformBlockObjects for a given program\n\t   *\n\t   * @typedef {Object} UniformBlockSpec\n\t   * @property {Object.<string, module:twgl.BlockSpec> blockSpecs The BlockSpec for each block by block name\n\t   * @property {UniformData[]} uniformData An array of data for each uniform by uniform index.\n\t   * @memberOf module:twgl\n\t   */\n\n\t  /**\n\t   * Creates a UniformBlockSpec for the given program.\n\t   *\n\t   * A UniformBlockSpec represents the data needed to create and bind\n\t   * UniformBlockObjects\n\t   *\n\t   * @param {WebGL2RenderingContext} gl A WebGL2 Rendering Context\n\t   * @param {WebGLProgram} program A WebGLProgram for a successfully linked program\n\t   * @return {module:twgl.UniformBlockSpec} The created UniformBlockSpec\n\t   * @memberOf module:twgl/programs\n\t   */\n\t  function createUniformBlockSpecFromProgram(gl, program) {\n\t    var numUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n\t    var uniformData = [];\n\t    var uniformIndices = [];\n\n\t    for (var ii = 0; ii < numUniforms; ++ii) {\n\t      uniformIndices.push(ii);\n\t      uniformData.push({});\n\t      var uniformInfo = gl.getActiveUniform(program, ii);\n\t      if (!uniformInfo) {\n\t        break;\n\t      }\n\t      // REMOVE [0]?\n\t      uniformData[ii].name = uniformInfo.name;\n\t    }\n\n\t    [[\"UNIFORM_TYPE\", \"type\"], [\"UNIFORM_SIZE\", \"size\"], // num elements\n\t    [\"UNIFORM_BLOCK_INDEX\", \"blockNdx\"], [\"UNIFORM_OFFSET\", \"offset\"]].forEach(function (pair) {\n\t      var pname = pair[0];\n\t      var key = pair[1];\n\t      gl.getActiveUniforms(program, uniformIndices, gl[pname]).forEach(function (value, ndx) {\n\t        uniformData[ndx][key] = value;\n\t      });\n\t    });\n\n\t    var blockSpecs = {};\n\n\t    var numUniformBlocks = gl.getProgramParameter(program, gl.ACTIVE_UNIFORM_BLOCKS);\n\t    for (ii = 0; ii < numUniformBlocks; ++ii) {\n\t      var name = gl.getActiveUniformBlockName(program, ii);\n\t      var blockSpec = {\n\t        index: ii,\n\t        usedByVertexShader: gl.getActiveUniformBlockParameter(program, ii, gl.UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER),\n\t        usedByFragmentShader: gl.getActiveUniformBlockParameter(program, ii, gl.UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER),\n\t        size: gl.getActiveUniformBlockParameter(program, ii, gl.UNIFORM_BLOCK_DATA_SIZE),\n\t        uniformIndices: gl.getActiveUniformBlockParameter(program, ii, gl.UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES)\n\t      };\n\t      blockSpec.used = blockSpec.usedByVertexSahder || blockSpec.usedByFragmentShader;\n\t      blockSpecs[name] = blockSpec;\n\t    }\n\n\t    return {\n\t      blockSpecs: blockSpecs,\n\t      uniformData: uniformData\n\t    };\n\t  }\n\n\t  var arraySuffixRE = /\\[\\d+\\]\\.$/; // better way to check?\n\n\t  /**\n\t   * Represents a UniformBlockObject including an ArrayBuffer with all the uniform values\n\t   * and a corresponding WebGLBuffer to hold those values on the GPU\n\t   *\n\t   * @typedef {Object} UniformBlockInfo\n\t   * @property {string} name The name of the block\n\t   * @property {ArrayBuffer} array The array buffer that contains the uniform values\n\t   * @property {Float32Array} asFloat A float view on the array buffer. This is useful\n\t   *    inspecting the contents of the buffer in the debugger.\n\t   * @property {WebGLBuffer} buffer A WebGL buffer that will hold a copy of the uniform values for rendering.\n\t   * @property {number} [offset] offset into buffer\n\t   * @property {Object.<string, ArrayBufferView>} uniforms A uniform name to ArrayBufferView map.\n\t   *   each Uniform has a correctly typed `ArrayBufferView` into array at the correct offset\n\t   *   and length of that uniform. So for example a float uniform would have a 1 float `Float32Array`\n\t   *   view. A single mat4 would have a 16 element `Float32Array` view. An ivec2 would have an\n\t   *   `Int32Array` view, etc.\n\t   * @memberOf module:twgl\n\t   */\n\n\t  /**\n\t   * Creates a `UniformBlockInfo` for the specified block\n\t   *\n\t   * Note: **If the blockName matches no existing blocks a warning is printed to the console and a dummy\n\t   * `UniformBlockInfo` is returned**. This is because when debugging GLSL\n\t   * it is common to comment out large portions of a shader or for example set\n\t   * the final output to a constant. When that happens blocks get optimized out.\n\t   * If this function did not create dummy blocks your code would crash when debugging.\n\t   *\n\t   * @param {WebGL2RenderingContext} gl A WebGL2RenderingContext\n\t   * @param {WebGLProgram} program A WebGLProgram\n\t   * @param {module:twgl.UniformBlockSpec} uinformBlockSpec. A UniformBlockSpec as returned\n\t   *     from {@link module:twgl.createUniformBlockSpecFromProgram}.\n\t   * @param {string} blockName The name of the block.\n\t   * @return {module:twgl.UniformBlockInfo} The created UniformBlockInfo\n\t   * @memberOf module:twgl/programs\n\t   */\n\t  function createUniformBlockInfoFromProgram(gl, program, uniformBlockSpec, blockName) {\n\t    var blockSpecs = uniformBlockSpec.blockSpecs;\n\t    var uniformData = uniformBlockSpec.uniformData;\n\t    var blockSpec = blockSpecs[blockName];\n\t    if (!blockSpec) {\n\t      warn(\"no uniform block object named:\", blockName);\n\t      return {\n\t        name: blockName,\n\t        uniforms: {}\n\t      };\n\t    }\n\t    var array = new ArrayBuffer(blockSpec.size);\n\t    var buffer = gl.createBuffer();\n\t    var uniformBufferIndex = blockSpec.index;\n\t    gl.bindBuffer(gl.UNIFORM_BUFFER, buffer);\n\t    gl.uniformBlockBinding(program, blockSpec.index, uniformBufferIndex);\n\n\t    var prefix = blockName + \".\";\n\t    if (arraySuffixRE.test(prefix)) {\n\t      prefix = prefix.replace(arraySuffixRE, \".\");\n\t    }\n\t    var uniforms = {};\n\t    blockSpec.uniformIndices.forEach(function (uniformNdx) {\n\t      var data = uniformData[uniformNdx];\n\t      var typeInfo = typeMap[data.type];\n\t      var Type = typeInfo.Type;\n\t      var length = data.size * typeInfo.size;\n\t      var name = data.name;\n\t      if (name.substr(0, prefix.length) === prefix) {\n\t        name = name.substr(prefix.length);\n\t      }\n\t      uniforms[name] = new Type(array, data.offset, length / Type.BYTES_PER_ELEMENT);\n\t    });\n\t    return {\n\t      name: blockName,\n\t      array: array,\n\t      asFloat: new Float32Array(array), // for debugging\n\t      buffer: buffer,\n\t      uniforms: uniforms\n\t    };\n\t  }\n\n\t  /**\n\t   * Creates a `UniformBlockInfo` for the specified block\n\t   *\n\t   * Note: **If the blockName matches no existing blocks a warning is printed to the console and a dummy\n\t   * `UniformBlockInfo` is returned**. This is because when debugging GLSL\n\t   * it is common to comment out large portions of a shader or for example set\n\t   * the final output to a constant. When that happens blocks get optimized out.\n\t   * If this function did not create dummy blocks your code would crash when debugging.\n\t   *\n\t   * @param {WebGL2RenderingContext} gl A WebGL2RenderingContext\n\t   * @param {module:twgl.ProgramInfo} programInfo a `ProgramInfo`\n\t   *     as returned from {@link module:twgl.createProgramInfo}\n\t   * @param {string} blockName The name of the block.\n\t   * @return {module:twgl.UniformBlockInfo} The created UniformBlockInfo\n\t   * @memberOf module:twgl/programs\n\t   */\n\t  function createUniformBlockInfo(gl, programInfo, blockName) {\n\t    return createUniformBlockInfoFromProgram(gl, programInfo.program, programInfo.uniformBlockSpec, blockName);\n\t  }\n\n\t  /**\n\t   * Binds a unform block to the matching uniform block point.\n\t   * Matches by blocks by name so blocks must have the same name not just the same\n\t   * structure.\n\t   *\n\t   * If you have changed any values and you upload the valus into the corresponding WebGLBuffer\n\t   * call {@link module:twgl.setUniformBlock} instead.\n\t   *\n\t   * @param {WebGL2RenderingContext} gl A WebGL 2 rendering context.\n\t   * @param {(module:twgl.ProgramInfo|module:twgl.UniformBlockSpec)} programInfo a `ProgramInfo`\n\t   *     as returned from {@link module:twgl.createProgramInfo} or or `UniformBlockSpec` as\n\t   *     returned from {@link module:twgl.createUniformBlockSpecFromProgram}.\n\t   * @param {module:twgl.UniformBlockInfo} uniformBlockInfo a `UniformBlockInfo` as returned from\n\t   *     {@link module:twgl.createUniformBlockInfo}.\n\t   * @return {bool} true if buffer was bound. If the programInfo has no block with the same block name\n\t   *     no buffer is bound.\n\t   * @memberOf module:twgl/programs\n\t   */\n\t  function bindUniformBlock(gl, programInfo, uniformBlockInfo) {\n\t    var uniformBlockSpec = programInfo.uniformBlockSpec || programInfo;\n\t    var blockSpec = uniformBlockSpec.blockSpecs[uniformBlockInfo.name];\n\t    if (blockSpec) {\n\t      var bufferBindIndex = blockSpec.index;\n\t      gl.bindBufferRange(gl.UNIFORM_BUFFER, bufferBindIndex, uniformBlockInfo.buffer, uniformBlockInfo.offset || 0, uniformBlockInfo.array.byteLength);\n\t      return true;\n\t    }\n\t    return false;\n\t  }\n\n\t  /**\n\t   * Uploads the current uniform values to the corresponding WebGLBuffer\n\t   * and binds that buffer to the program's corresponding bind point for the uniform block object.\n\t   *\n\t   * If you haven't changed any values and you only need to bind the uniform block object\n\t   * call {@link module:twgl.bindUniformBlock} instead.\n\t   *\n\t   * @param {WebGL2RenderingContext} gl A WebGL 2 rendering context.\n\t   * @param {(module:twgl.ProgramInfo|module:twgl.UniformBlockSpec)} programInfo a `ProgramInfo`\n\t   *     as returned from {@link module:twgl.createProgramInfo} or or `UniformBlockSpec` as\n\t   *     returned from {@link module:twgl.createUniformBlockSpecFromProgram}.\n\t   * @param {module:twgl.UniformBlockInfo} uniformBlockInfo a `UniformBlockInfo` as returned from\n\t   *     {@link module:twgl.createUniformBlockInfo}.\n\t   * @memberOf module:twgl/programs\n\t   */\n\t  function setUniformBlock(gl, programInfo, uniformBlockInfo) {\n\t    if (bindUniformBlock(gl, programInfo, uniformBlockInfo)) {\n\t      gl.bufferData(gl.UNIFORM_BUFFER, uniformBlockInfo.array, gl.DYNAMIC_DRAW);\n\t    }\n\t  }\n\n\t  /**\n\t   * Sets values of a uniform block object\n\t   *\n\t   * @param {module:twgl.UniformBlockInfo} uniformBlockInfo A UniformBlockInfo as returned by {@link module:twgl.createUniformBlockInfo}.\n\t   * @param {Object.<string, ?>} values A uniform name to value map where the value is correct for the given\n\t   *    type of uniform. So for example given a block like\n\t   *\n\t   *       uniform SomeBlock {\n\t   *         float someFloat;\n\t   *         vec2 someVec2;\n\t   *         vec3 someVec3Array[2];\n\t   *         int someInt;\n\t   *       }\n\t   *\n\t   *  You can set the values of the uniform block with\n\t   *\n\t   *       twgl.setBlockUniforms(someBlockInfo, {\n\t   *          someFloat: 12.3,\n\t   *          someVec2: [1, 2],\n\t   *          someVec3Array: [1, 2, 3, 4, 5, 6],\n\t   *          someInt: 5,\n\t   *       }\n\t   *\n\t   *  Arrays can be JavaScript arrays or typed arrays\n\t   *\n\t   *  Any name that doesn't match will be ignored\n\t   * @memberOf module:twgl/programs\n\t   */\n\t  function setBlockUniforms(uniformBlockInfo, values) {\n\t    var uniforms = uniformBlockInfo.uniforms;\n\t    for (var name in values) {\n\t      var array = uniforms[name];\n\t      if (array) {\n\t        var value = values[name];\n\t        if (value.length) {\n\t          array.set(value);\n\t        } else {\n\t          array[0] = value;\n\t        }\n\t      }\n\t    }\n\t  }\n\n\t  /**\n\t   * Set uniforms and binds related textures.\n\t   *\n\t   * example:\n\t   *\n\t   *     var programInfo = createProgramInfo(\n\t   *         gl, [\"some-vs\", \"some-fs\"]);\n\t   *\n\t   *     var tex1 = gl.createTexture();\n\t   *     var tex2 = gl.createTexture();\n\t   *\n\t   *     ... assume we setup the textures with data ...\n\t   *\n\t   *     var uniforms = {\n\t   *       u_someSampler: tex1,\n\t   *       u_someOtherSampler: tex2,\n\t   *       u_someColor: [1,0,0,1],\n\t   *       u_somePosition: [0,1,1],\n\t   *       u_someMatrix: [\n\t   *         1,0,0,0,\n\t   *         0,1,0,0,\n\t   *         0,0,1,0,\n\t   *         0,0,0,0,\n\t   *       ],\n\t   *     };\n\t   *\n\t   *     gl.useProgram(program);\n\t   *\n\t   * This will automatically bind the textures AND set the\n\t   * uniforms.\n\t   *\n\t   *     twgl.setUniforms(programInfo, uniforms);\n\t   *\n\t   * For the example above it is equivalent to\n\t   *\n\t   *     var texUnit = 0;\n\t   *     gl.activeTexture(gl.TEXTURE0 + texUnit);\n\t   *     gl.bindTexture(gl.TEXTURE_2D, tex1);\n\t   *     gl.uniform1i(u_someSamplerLocation, texUnit++);\n\t   *     gl.activeTexture(gl.TEXTURE0 + texUnit);\n\t   *     gl.bindTexture(gl.TEXTURE_2D, tex2);\n\t   *     gl.uniform1i(u_someSamplerLocation, texUnit++);\n\t   *     gl.uniform4fv(u_someColorLocation, [1, 0, 0, 1]);\n\t   *     gl.uniform3fv(u_somePositionLocation, [0, 1, 1]);\n\t   *     gl.uniformMatrix4fv(u_someMatrix, false, [\n\t   *         1,0,0,0,\n\t   *         0,1,0,0,\n\t   *         0,0,1,0,\n\t   *         0,0,0,0,\n\t   *       ]);\n\t   *\n\t   * Note it is perfectly reasonable to call `setUniforms` multiple times. For example\n\t   *\n\t   *     var uniforms = {\n\t   *       u_someSampler: tex1,\n\t   *       u_someOtherSampler: tex2,\n\t   *     };\n\t   *\n\t   *     var moreUniforms {\n\t   *       u_someColor: [1,0,0,1],\n\t   *       u_somePosition: [0,1,1],\n\t   *       u_someMatrix: [\n\t   *         1,0,0,0,\n\t   *         0,1,0,0,\n\t   *         0,0,1,0,\n\t   *         0,0,0,0,\n\t   *       ],\n\t   *     };\n\t   *\n\t   *     twgl.setUniforms(programInfo, uniforms);\n\t   *     twgl.setUniforms(programInfo, moreUniforms);\n\t   *\n\t   * You can also add WebGLSamplers to uniform samplers as in\n\t   *\n\t   *     var uniforms = {\n\t   *       u_someSampler: {\n\t   *         texture: someWebGLTexture,\n\t   *         sampler: someWebGLSampler,\n\t   *       },\n\t   *     };\n\t   *\n\t   * In which case both the sampler and texture will be bound to the\n\t   * same unit.\n\t   *\n\t   * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters a `ProgramInfo` as returned from `createProgramInfo` or the setters returned from\n\t   *        `createUniformSetters`.\n\t   * @param {Object.<string, ?>} values an object with values for the\n\t   *        uniforms.\n\t   *   You can pass multiple objects by putting them in an array or by calling with more arguments.For example\n\t   *\n\t   *     var sharedUniforms = {\n\t   *       u_fogNear: 10,\n\t   *       u_projection: ...\n\t   *       ...\n\t   *     };\n\t   *\n\t   *     var localUniforms = {\n\t   *       u_world: ...\n\t   *       u_diffuseColor: ...\n\t   *     };\n\t   *\n\t   *     twgl.setUniforms(programInfo, sharedUniforms, localUniforms);\n\t   *\n\t   *     // is the same as\n\t   *\n\t   *     twgl.setUniforms(programInfo, [sharedUniforms, localUniforms]);\n\t   *\n\t   *     // is the same as\n\t   *\n\t   *     twgl.setUniforms(programInfo, sharedUniforms);\n\t   *     twgl.setUniforms(programInfo, localUniforms};\n\t   *\n\t   * @memberOf module:twgl/programs\n\t   */\n\t  function setUniforms(setters, values) {\n\t    // eslint-disable-line\n\t    var actualSetters = setters.uniformSetters || setters;\n\t    var numArgs = arguments.length;\n\t    for (var andx = 1; andx < numArgs; ++andx) {\n\t      var vals = arguments[andx];\n\t      if (Array.isArray(vals)) {\n\t        var numValues = vals.length;\n\t        for (var ii = 0; ii < numValues; ++ii) {\n\t          setUniforms(actualSetters, vals[ii]);\n\t        }\n\t      } else {\n\t        for (var name in vals) {\n\t          var setter = actualSetters[name];\n\t          if (setter) {\n\t            setter(vals[name]);\n\t          }\n\t        }\n\t      }\n\t    }\n\t  }\n\n\t  /**\n\t   * Creates setter functions for all attributes of a shader\n\t   * program. You can pass this to {@link module:twgl.setBuffersAndAttributes} to set all your buffers and attributes.\n\t   *\n\t   * @see {@link module:twgl.setAttributes} for example\n\t   * @param {WebGLProgram} program the program to create setters for.\n\t   * @return {Object.<string, function>} an object with a setter for each attribute by name.\n\t   * @memberOf module:twgl/programs\n\t   */\n\t  function createAttributeSetters(gl, program) {\n\t    var attribSetters = {};\n\n\t    var numAttribs = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n\t    for (var ii = 0; ii < numAttribs; ++ii) {\n\t      var attribInfo = gl.getActiveAttrib(program, ii);\n\t      if (!attribInfo) {\n\t        break;\n\t      }\n\t      var index = gl.getAttribLocation(program, attribInfo.name);\n\t      var typeInfo = attrTypeMap[attribInfo.type];\n\t      var setter = typeInfo.setter(gl, index, typeInfo);\n\t      setter.location = index;\n\t      attribSetters[attribInfo.name] = setter;\n\t    }\n\n\t    return attribSetters;\n\t  }\n\n\t  /**\n\t   * Sets attributes and binds buffers (deprecated... use {@link module:twgl.setBuffersAndAttributes})\n\t   *\n\t   * Example:\n\t   *\n\t   *     var program = createProgramFromScripts(\n\t   *         gl, [\"some-vs\", \"some-fs\");\n\t   *\n\t   *     var attribSetters = createAttributeSetters(program);\n\t   *\n\t   *     var positionBuffer = gl.createBuffer();\n\t   *     var texcoordBuffer = gl.createBuffer();\n\t   *\n\t   *     var attribs = {\n\t   *       a_position: {buffer: positionBuffer, numComponents: 3},\n\t   *       a_texcoord: {buffer: texcoordBuffer, numComponents: 2},\n\t   *     };\n\t   *\n\t   *     gl.useProgram(program);\n\t   *\n\t   * This will automatically bind the buffers AND set the\n\t   * attributes.\n\t   *\n\t   *     setAttributes(attribSetters, attribs);\n\t   *\n\t   * Properties of attribs. For each attrib you can add\n\t   * properties:\n\t   *\n\t   * *   type: the type of data in the buffer. Default = gl.FLOAT\n\t   * *   normalize: whether or not to normalize the data. Default = false\n\t   * *   stride: the stride. Default = 0\n\t   * *   offset: offset into the buffer. Default = 0\n\t   *\n\t   * For example if you had 3 value float positions, 2 value\n\t   * float texcoord and 4 value uint8 colors you'd setup your\n\t   * attribs like this\n\t   *\n\t   *     var attribs = {\n\t   *       a_position: {buffer: positionBuffer, numComponents: 3},\n\t   *       a_texcoord: {buffer: texcoordBuffer, numComponents: 2},\n\t   *       a_color: {\n\t   *         buffer: colorBuffer,\n\t   *         numComponents: 4,\n\t   *         type: gl.UNSIGNED_BYTE,\n\t   *         normalize: true,\n\t   *       },\n\t   *     };\n\t   *\n\t   * @param {Object.<string, function>} setters Attribute setters as returned from createAttributeSetters\n\t   * @param {Object.<string, module:twgl.AttribInfo>} buffers AttribInfos mapped by attribute name.\n\t   * @memberOf module:twgl/programs\n\t   * @deprecated use {@link module:twgl.setBuffersAndAttributes}\n\t   */\n\t  function setAttributes(setters, buffers) {\n\t    for (var name in buffers) {\n\t      var setter = setters[name];\n\t      if (setter) {\n\t        setter(buffers[name]);\n\t      }\n\t    }\n\t  }\n\n\t  /**\n\t   * Sets attributes and buffers including the `ELEMENT_ARRAY_BUFFER` if appropriate\n\t   *\n\t   * Example:\n\t   *\n\t   *     var programInfo = createProgramInfo(\n\t   *         gl, [\"some-vs\", \"some-fs\");\n\t   *\n\t   *     var arrays = {\n\t   *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n\t   *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n\t   *     };\n\t   *\n\t   *     var bufferInfo = createBufferInfoFromArrays(gl, arrays);\n\t   *\n\t   *     gl.useProgram(programInfo.program);\n\t   *\n\t   * This will automatically bind the buffers AND set the\n\t   * attributes.\n\t   *\n\t   *     setBuffersAndAttributes(gl, programInfo, bufferInfo);\n\t   *\n\t   * For the example above it is equivilent to\n\t   *\n\t   *     gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n\t   *     gl.enableVertexAttribArray(a_positionLocation);\n\t   *     gl.vertexAttribPointer(a_positionLocation, 3, gl.FLOAT, false, 0, 0);\n\t   *     gl.bindBuffer(gl.ARRAY_BUFFER, texcoordBuffer);\n\t   *     gl.enableVertexAttribArray(a_texcoordLocation);\n\t   *     gl.vertexAttribPointer(a_texcoordLocation, 4, gl.FLOAT, false, 0, 0);\n\t   *\n\t   * @param {WebGLRenderingContext} gl A WebGLRenderingContext.\n\t   * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters A `ProgramInfo` as returned from {@link module:twgl.createProgrmaInfo} or Attribute setters as returned from {@link module:twgl.createAttributeSetters}\n\t   * @param {(module:twgl.BufferInfo|module:twgl.vertexArrayInfo)} buffers a `BufferInfo` as returned from {@link module:twgl.createBufferInfoFromArrays}.\n\t   *   or a `VertexArrayInfo` as returned from {@link module:twgl.createVertexArrayInfo}\n\t   * @memberOf module:twgl/programs\n\t   */\n\t  function setBuffersAndAttributes(gl, programInfo, buffers) {\n\t    if (buffers.vertexArrayObject) {\n\t      gl.bindVertexArray(buffers.vertexArrayObject);\n\t    } else {\n\t      setAttributes(programInfo.attribSetters || programInfo, buffers.attribs);\n\t      if (buffers.indices) {\n\t        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffers.indices);\n\t      }\n\t    }\n\t  }\n\n\t  /**\n\t   * @typedef {Object} ProgramInfo\n\t   * @property {WebGLProgram} program A shader program\n\t   * @property {Object<string, function>} uniformSetters object of setters as returned from createUniformSetters,\n\t   * @property {Object<string, function>} attribSetters object of setters as returned from createAttribSetters,\n\t   * @propetty {module:twgl.UniformBlockSpec} [uniformBlockSpace] a uniform block spec for making UniformBlockInfos with createUniformBlockInfo etc..\n\t   * @property {Object<string, module:twgl.TransformFeedbackInfo>} [transformFeedbackInfo] info for transform feedbacks\n\t   * @memberOf module:twgl\n\t   */\n\n\t  /**\n\t   * Creates a ProgramInfo from an existing program.\n\t   *\n\t   * A ProgramInfo contains\n\t   *\n\t   *     programInfo = {\n\t   *        program: WebGLProgram,\n\t   *        uniformSetters: object of setters as returned from createUniformSetters,\n\t   *        attribSetters: object of setters as returned from createAttribSetters,\n\t   *     }\n\t   *\n\t   * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n\t   *        to use.\n\t   * @param {WebGLProgram} program an existing WebGLProgram.\n\t   * @return {module:twgl.ProgramInfo} The created ProgramInfo.\n\t   * @memberOf module:twgl/programs\n\t   */\n\t  function createProgramInfoFromProgram(gl, program) {\n\t    var uniformSetters = createUniformSetters(gl, program);\n\t    var attribSetters = createAttributeSetters(gl, program);\n\t    var programInfo = {\n\t      program: program,\n\t      uniformSetters: uniformSetters,\n\t      attribSetters: attribSetters\n\t    };\n\n\t    if (utils.isWebGL2(gl)) {\n\t      programInfo.uniformBlockSpec = createUniformBlockSpecFromProgram(gl, program);\n\t      programInfo.transformFeedbackInfo = createTransformFeedbackInfo(gl, program);\n\t    }\n\n\t    return programInfo;\n\t  }\n\n\t  /**\n\t   * Creates a ProgramInfo from 2 sources.\n\t   *\n\t   * A ProgramInfo contains\n\t   *\n\t   *     programInfo = {\n\t   *        program: WebGLProgram,\n\t   *        uniformSetters: object of setters as returned from createUniformSetters,\n\t   *        attribSetters: object of setters as returned from createAttribSetters,\n\t   *     }\n\t   *\n\t   * NOTE: There are 4 signatures for this function\n\t   *\n\t   *     twgl.createProgramInfo(gl, [vs, fs], options);\n\t   *     twgl.createProgramInfo(gl, [vs, fs], opt_errFunc);\n\t   *     twgl.createProgramInfo(gl, [vs, fs], opt_attribs, opt_errFunc);\n\t   *     twgl.createProgramInfo(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n\t   *\n\t   * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n\t   *        to use.\n\t   * @param {string[]} shaderSources Array of sources for the\n\t   *        shaders or ids. The first is assumed to be the vertex shader,\n\t   *        the second the fragment shader.\n\t   * @param {module:twgl.ProgramOptions|string[]} [opt_attribs] Options for the program or an array of attribs names. Locations will be assigned by index if not passed in\n\t   * @param {number[]} [opt_locations] The locations for the attributes. A parallel array to opt_attribs letting you assign locations.\n\t   * @param {module:twgl.ErrorCallback} opt_errorCallback callback for errors. By default it just prints an error to the console\n\t   *        on error. If you want something else pass an callback. It's passed an error message.\n\t   * @return {module:twgl.ProgramInfo?} The created ProgramInfo or null if it failed to link or compile\n\t   * @memberOf module:twgl/programs\n\t   */\n\t  function createProgramInfo(gl, shaderSources, opt_attribs, opt_locations, opt_errorCallback) {\n\t    var progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n\t    var good = true;\n\t    shaderSources = shaderSources.map(function (source) {\n\t      // Lets assume if there is no \\n it's an id\n\t      if (source.indexOf(\"\\n\") < 0) {\n\t        var script = document.getElementById(source);\n\t        if (!script) {\n\t          progOptions.errorCallback(\"no element with id: \" + source);\n\t          good = false;\n\t        } else {\n\t          source = script.text;\n\t        }\n\t      }\n\t      return source;\n\t    });\n\t    if (!good) {\n\t      return null;\n\t    }\n\t    var program = createProgramFromSources(gl, shaderSources, progOptions);\n\t    if (!program) {\n\t      return null;\n\t    }\n\t    return createProgramInfoFromProgram(gl, program);\n\t  }\n\n\t  // Using quotes prevents Uglify from changing the names.\n\t  // No speed diff AFAICT.\n\t  return {\n\t    \"createAttributeSetters\": createAttributeSetters,\n\n\t    \"createProgram\": createProgram,\n\t    \"createProgramFromScripts\": createProgramFromScripts,\n\t    \"createProgramFromSources\": createProgramFromSources,\n\t    \"createProgramInfo\": createProgramInfo,\n\t    \"createProgramInfoFromProgram\": createProgramInfoFromProgram,\n\t    \"createUniformSetters\": createUniformSetters,\n\t    \"createUniformBlockSpecFromProgram\": createUniformBlockSpecFromProgram,\n\t    \"createUniformBlockInfoFromProgram\": createUniformBlockInfoFromProgram,\n\t    \"createUniformBlockInfo\": createUniformBlockInfo,\n\n\t    \"createTransformFeedback\": createTransformFeedback,\n\t    \"createTransformFeedbackInfo\": createTransformFeedbackInfo,\n\t    \"bindTransformFeedbackInfo\": bindTransformFeedbackInfo,\n\n\t    \"setAttributes\": setAttributes,\n\t    \"setBuffersAndAttributes\": setBuffersAndAttributes,\n\t    \"setUniforms\": setUniforms,\n\t    \"setUniformBlock\": setUniformBlock,\n\t    \"setBlockUniforms\": setBlockUniforms,\n\t    \"bindUniformBlock\": bindUniformBlock\n\t  };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n\t/*\n\t * Copyright 2015, Gregg Tavares.\n\t * All rights reserved.\n\t *\n\t * Redistribution and use in source and binary forms, with or without\n\t * modification, are permitted provided that the following conditions are\n\t * met:\n\t *\n\t *     * Redistributions of source code must retain the above copyright\n\t * notice, this list of conditions and the following disclaimer.\n\t *     * Redistributions in binary form must reproduce the above\n\t * copyright notice, this list of conditions and the following disclaimer\n\t * in the documentation and/or other materials provided with the\n\t * distribution.\n\t *     * Neither the name of Gregg Tavares. nor the names of his\n\t * contributors may be used to endorse or promote products derived from\n\t * this software without specific prior written permission.\n\t *\n\t * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\t * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n\t * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n\t * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n\t * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n\t * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n\t * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n\t * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n\t * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\t * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n\t * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\t */\n\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8), __webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function (textures, utils) {\n\t  \"use strict\";\n\n\t  /**\n\t   * Framebuffer related functions\n\t   *\n\t   * For backward compatibily they are available at both `twgl.framebuffer` and `twgl`\n\t   * itself\n\t   *\n\t   * See {@link module:twgl} for core functions\n\t   *\n\t   * @module twgl/framebuffers\n\t   */\n\n\t  // make sure we don't see a global gl\n\n\t  var gl = undefined; // eslint-disable-line\n\n\t  var UNSIGNED_BYTE = 0x1401;\n\n\t  /* PixelFormat */\n\t  var DEPTH_COMPONENT = 0x1902;\n\t  var RGBA = 0x1908;\n\n\t  /* Framebuffer Object. */\n\t  var RGBA4 = 0x8056;\n\t  var RGB5_A1 = 0x8057;\n\t  var RGB565 = 0x8D62;\n\t  var DEPTH_COMPONENT16 = 0x81A5;\n\t  var STENCIL_INDEX = 0x1901;\n\t  var STENCIL_INDEX8 = 0x8D48;\n\t  var DEPTH_STENCIL = 0x84F9;\n\t  var COLOR_ATTACHMENT0 = 0x8CE0;\n\t  var DEPTH_ATTACHMENT = 0x8D00;\n\t  var STENCIL_ATTACHMENT = 0x8D20;\n\t  var DEPTH_STENCIL_ATTACHMENT = 0x821A;\n\n\t  /* TextureWrapMode */\n\t  var REPEAT = 0x2901; // eslint-disable-line\n\t  var CLAMP_TO_EDGE = 0x812F;\n\t  var MIRRORED_REPEAT = 0x8370; // eslint-disable-line\n\n\t  /* TextureMagFilter */\n\t  var NEAREST = 0x2600; // eslint-disable-line\n\t  var LINEAR = 0x2601;\n\n\t  /* TextureMinFilter */\n\t  var NEAREST_MIPMAP_NEAREST = 0x2700; // eslint-disable-line\n\t  var LINEAR_MIPMAP_NEAREST = 0x2701; // eslint-disable-line\n\t  var NEAREST_MIPMAP_LINEAR = 0x2702; // eslint-disable-line\n\t  var LINEAR_MIPMAP_LINEAR = 0x2703; // eslint-disable-line\n\n\t  /**\n\t   * The options for a framebuffer attachment.\n\t   *\n\t   * Note: For a `format` that is a texture include all the texture\n\t   * options from {@link module:twgl.TextureOptions} for example\n\t   * `min`, `mag`, `clamp`, etc... Note that unlike {@link module:twgl.TextureOptions}\n\t   * `auto` defaults to `false` for attachment textures but `min` and `mag` default\n\t   * to `gl.LINEAR` and `wrap` defaults to `CLAMP_TO_EDGE`\n\t   *\n\t   * @typedef {Object} AttachmentOptions\n\t   * @property {number} [attach] The attachment point. Defaults\n\t   *   to `gl.COLOR_ATTACTMENT0 + ndx` unless type is a depth or stencil type\n\t   *   then it's gl.DEPTH_ATTACHMENT or `gl.DEPTH_STENCIL_ATTACHMENT` depending\n\t   *   on the format or attachment type.\n\t   * @property {number} [format] The format. If one of `gl.RGBA4`,\n\t   *   `gl.RGB565`, `gl.RGB5_A1`, `gl.DEPTH_COMPONENT16`,\n\t   *   `gl.STENCIL_INDEX8` or `gl.DEPTH_STENCIL` then will create a\n\t   *   renderbuffer. Otherwise will create a texture. Default = `gl.RGBA`\n\t   * @property {number} [type] The type. Used for texture. Default = `gl.UNSIGNED_BYTE`.\n\t   * @property {number} [target] The texture target for `gl.framebufferTexture2D`.\n\t   *   Defaults to `gl.TEXTURE_2D`. Set to appropriate face for cube maps.\n\t   * @property {number} [level] level for `gl.framebufferTexture2D`. Defaults to 0.\n\t   * @property {WebGLObject} [attachment] An existing renderbuffer or texture.\n\t   *    If provided will attach this Object. This allows you to share\n\t   *    attachemnts across framebuffers.\n\t   * @memberOf module:twgl\n\t   */\n\n\t  var defaultAttachments = [{ format: RGBA, type: UNSIGNED_BYTE, min: LINEAR, wrap: CLAMP_TO_EDGE }, { format: DEPTH_STENCIL }];\n\n\t  var attachmentsByFormat = {};\n\t  attachmentsByFormat[DEPTH_STENCIL] = DEPTH_STENCIL_ATTACHMENT;\n\t  attachmentsByFormat[STENCIL_INDEX] = STENCIL_ATTACHMENT;\n\t  attachmentsByFormat[STENCIL_INDEX8] = STENCIL_ATTACHMENT;\n\t  attachmentsByFormat[DEPTH_COMPONENT] = DEPTH_ATTACHMENT;\n\t  attachmentsByFormat[DEPTH_COMPONENT16] = DEPTH_ATTACHMENT;\n\n\t  function getAttachmentPointForFormat(format) {\n\t    return attachmentsByFormat[format];\n\t  }\n\n\t  var renderbufferFormats = {};\n\t  renderbufferFormats[RGBA4] = true;\n\t  renderbufferFormats[RGB5_A1] = true;\n\t  renderbufferFormats[RGB565] = true;\n\t  renderbufferFormats[DEPTH_STENCIL] = true;\n\t  renderbufferFormats[DEPTH_COMPONENT16] = true;\n\t  renderbufferFormats[STENCIL_INDEX] = true;\n\t  renderbufferFormats[STENCIL_INDEX8] = true;\n\n\t  function isRenderbufferFormat(format) {\n\t    return renderbufferFormats[format];\n\t  }\n\n\t  /**\n\t   * @typedef {Object} FramebufferInfo\n\t   * @property {WebGLFramebuffer} framebuffer The WebGLFramebuffer for this framebufferInfo\n\t   * @property {WebGLObject[]} attachments The created attachments in the same order as passed in to {@link module:twgl.createFramebufferInfo}.\n\t   * @memberOf module:twgl\n\t   */\n\n\t  /**\n\t   * Creates a framebuffer and attachments.\n\t   *\n\t   * This returns a {@link module:twgl.FramebufferInfo} because it needs to return the attachments as well as the framebuffer.\n\t   *\n\t   * The simplest usage\n\t   *\n\t   *     // create an RGBA/UNSIGNED_BYTE texture and DEPTH_STENCIL renderbuffer\n\t   *     var fbi = twgl.createFramebufferInfo(gl);\n\t   *\n\t   * More complex usage\n\t   *\n\t   *     // create an RGB565 renderbuffer and a STENCIL_INDEX8 renderbuffer\n\t   *     var attachments = [\n\t   *       { format: RGB565, mag: NEAREST },\n\t   *       { format: STENCIL_INDEX8 },\n\t   *     ]\n\t   *     var fbi = twgl.createFramebufferInfo(gl, attachments);\n\t   *\n\t   * Passing in a specific size\n\t   *\n\t   *     var width = 256;\n\t   *     var height = 256;\n\t   *     var fbi = twgl.createFramebufferInfo(gl, attachments, width, height);\n\t   *\n\t   * **Note!!** It is up to you to check if the framebuffer is renderable by calling `gl.checkFramebufferStatus`.\n\t   * [WebGL only guarantees 3 combinations of attachments work](https://www.khronos.org/registry/webgl/specs/latest/1.0/#6.6).\n\t   *\n\t   * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n\t   * @param {module:twgl.AttachmentOptions[]} [attachments] which attachments to create. If not provided the default is a framebuffer with an\n\t   *    `RGBA`, `UNSIGNED_BYTE` texture `COLOR_ATTACHMENT0` and a `DEPTH_STENCIL` renderbuffer `DEPTH_STENCIL_ATTACHMENT`.\n\t   * @param {number} [width] the width for the attachments. Default = size of drawingBuffer\n\t   * @param {number} [height] the height for the attachments. Defautt = size of drawingBuffer\n\t   * @return {module:twgl.FramebufferInfo} the framebuffer and attachments.\n\t   * @memberOf module:twgl/framebuffers\n\t   */\n\t  function createFramebufferInfo(gl, attachments, width, height) {\n\t    var target = gl.FRAMEBUFFER;\n\t    var fb = gl.createFramebuffer();\n\t    gl.bindFramebuffer(target, fb);\n\t    width = width || gl.drawingBufferWidth;\n\t    height = height || gl.drawingBufferHeight;\n\t    attachments = attachments || defaultAttachments;\n\t    var colorAttachmentCount = 0;\n\t    var framebufferInfo = {\n\t      framebuffer: fb,\n\t      attachments: [],\n\t      width: width,\n\t      height: height\n\t    };\n\t    attachments.forEach(function (attachmentOptions) {\n\t      var attachment = attachmentOptions.attachment;\n\t      var format = attachmentOptions.format;\n\t      var attachmentPoint = getAttachmentPointForFormat(format);\n\t      if (!attachmentPoint) {\n\t        attachmentPoint = COLOR_ATTACHMENT0 + colorAttachmentCount++;\n\t      }\n\t      if (!attachment) {\n\t        if (isRenderbufferFormat(format)) {\n\t          attachment = gl.createRenderbuffer();\n\t          gl.bindRenderbuffer(gl.RENDERBUFFER, attachment);\n\t          gl.renderbufferStorage(gl.RENDERBUFFER, format, width, height);\n\t        } else {\n\t          var textureOptions = utils.shallowCopy(attachmentOptions);\n\t          textureOptions.width = width;\n\t          textureOptions.height = height;\n\t          if (textureOptions.auto === undefined) {\n\t            textureOptions.auto = false;\n\t            textureOptions.min = textureOptions.min || textureOptions.minMag || gl.LINEAR;\n\t            textureOptions.mag = textureOptions.mag || textureOptions.minMag || gl.LINEAR;\n\t            textureOptions.wrapS = textureOptions.wrapS || textureOptions.wrap || gl.CLAMP_TO_EDGE;\n\t            textureOptions.wrapT = textureOptions.wrapT || textureOptions.wrap || gl.CLAMP_TO_EDGE;\n\t          }\n\t          attachment = textures.createTexture(gl, textureOptions);\n\t        }\n\t      }\n\t      if (attachment instanceof WebGLRenderbuffer) {\n\t        gl.framebufferRenderbuffer(target, attachmentPoint, gl.RENDERBUFFER, attachment);\n\t      } else if (attachment instanceof WebGLTexture) {\n\t        gl.framebufferTexture2D(target, attachmentPoint, attachmentOptions.texTarget || gl.TEXTURE_2D, attachment, attachmentOptions.level || 0);\n\t      } else {\n\t        throw \"unknown attachment type\";\n\t      }\n\t      framebufferInfo.attachments.push(attachment);\n\t    });\n\t    return framebufferInfo;\n\t  }\n\n\t  /**\n\t   * Resizes the attachments of a framebuffer.\n\t   *\n\t   * You need to pass in the same `attachments` as you passed in {@link module:twgl.createFramebufferInfo}\n\t   * because TWGL has no idea the format/type of each attachment.\n\t   *\n\t   * The simplest usage\n\t   *\n\t   *     // create an RGBA/UNSIGNED_BYTE texture and DEPTH_STENCIL renderbuffer\n\t   *     var fbi = twgl.createFramebufferInfo(gl);\n\t   *\n\t   *     ...\n\t   *\n\t   *     function render() {\n\t   *       if (twgl.resizeCanvasToDisplaySize(gl.canvas)) {\n\t   *         // resize the attachments\n\t   *         twgl.resizeFramebufferInfo(gl, fbi);\n\t   *       }\n\t   *\n\t   * More complex usage\n\t   *\n\t   *     // create an RGB565 renderbuffer and a STENCIL_INDEX8 renderbuffer\n\t   *     var attachments = [\n\t   *       { format: RGB565, mag: NEAREST },\n\t   *       { format: STENCIL_INDEX8 },\n\t   *     ]\n\t   *     var fbi = twgl.createFramebufferInfo(gl, attachments);\n\t   *\n\t   *     ...\n\t   *\n\t   *     function render() {\n\t   *       if (twgl.resizeCanvasToDisplaySize(gl.canvas)) {\n\t   *         // resize the attachments to match\n\t   *         twgl.resizeFramebufferInfo(gl, fbi, attachments);\n\t   *       }\n\t   *\n\t   * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n\t   * @param {module:twgl.FramebufferInfo} framebufferInfo a framebufferInfo as returned from {@link module:twgl.createFramebufferInfo}.\n\t   * @param {module:twgl.AttachmentOptions[]} [attachments] the same attachments options as passed to {@link module:twgl.createFramebufferInfo}.\n\t   * @param {number} [width] the width for the attachments. Default = size of drawingBuffer\n\t   * @param {number} [height] the height for the attachments. Defautt = size of drawingBuffer\n\t   * @memberOf module:twgl/framebuffers\n\t   */\n\t  function resizeFramebufferInfo(gl, framebufferInfo, attachments, width, height) {\n\t    width = width || gl.drawingBufferWidth;\n\t    height = height || gl.drawingBufferHeight;\n\t    framebufferInfo.width = width;\n\t    framebufferInfo.height = height;\n\t    attachments = attachments || defaultAttachments;\n\t    attachments.forEach(function (attachmentOptions, ndx) {\n\t      var attachment = framebufferInfo.attachments[ndx];\n\t      var format = attachmentOptions.format;\n\t      if (attachment instanceof WebGLRenderbuffer) {\n\t        gl.bindRenderbuffer(gl.RENDERBUFFER, attachment);\n\t        gl.renderbufferStorage(gl.RENDERBUFFER, format, width, height);\n\t      } else if (attachment instanceof WebGLTexture) {\n\t        textures.resizeTexture(gl, attachment, attachmentOptions, width, height);\n\t      } else {\n\t        throw \"unknown attachment type\";\n\t      }\n\t    });\n\t  }\n\n\t  /**\n\t   * Binds a framebuffer\n\t   *\n\t   * This function pretty much soley exists because I spent hours\n\t   * trying to figure out why something I wrote wasn't working only\n\t   * to realize I forget to set the viewport dimensions.\n\t   * My hope is this function will fix that.\n\t   *\n\t   * It is effectively the same as\n\t   *\n\t   *     gl.bindFramebuffer(gl.FRAMEBUFFER, someFramebufferInfo.framebuffer);\n\t   *     gl.viewport(0, 0, someFramebufferInfo.width, someFramebufferInfo.height);\n\t   *\n\t   * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n\t   * @param {module:twgl.FramebufferInfo} [framebufferInfo] a framebufferInfo as returned from {@link module:twgl.createFramebufferInfo}.\n\t   *   If not passed will bind the canvas.\n\t   * @param {number} [target] The target. If not passed `gl.FRAMEBUFFER` will be used.\n\t   * @memberOf module:twgl/framebuffers\n\t   */\n\n\t  function bindFramebufferInfo(gl, framebufferInfo, target) {\n\t    target = target || gl.FRAMEBUFFER;\n\t    if (framebufferInfo) {\n\t      gl.bindFramebuffer(target, framebufferInfo.framebuffer);\n\t      gl.viewport(0, 0, framebufferInfo.width, framebufferInfo.height);\n\t    } else {\n\t      gl.bindFramebuffer(target, null);\n\t      gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n\t    }\n\t  }\n\n\t  // Using quotes prevents Uglify from changing the names.\n\t  // No speed diff AFAICT.\n\t  return {\n\t    \"bindFramebufferInfo\": bindFramebufferInfo,\n\t    \"createFramebufferInfo\": createFramebufferInfo,\n\t    \"resizeFramebufferInfo\": resizeFramebufferInfo\n\t  };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n\t/*\n\t * Copyright 2015, Gregg Tavares.\n\t * All rights reserved.\n\t *\n\t * Redistribution and use in source and binary forms, with or without\n\t * modification, are permitted provided that the following conditions are\n\t * met:\n\t *\n\t *     * Redistributions of source code must retain the above copyright\n\t * notice, this list of conditions and the following disclaimer.\n\t *     * Redistributions in binary form must reproduce the above\n\t * copyright notice, this list of conditions and the following disclaimer\n\t * in the documentation and/or other materials provided with the\n\t * distribution.\n\t *     * Neither the name of Gregg Tavares. nor the names of his\n\t * contributors may be used to endorse or promote products derived from\n\t * this software without specific prior written permission.\n\t *\n\t * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\t * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n\t * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n\t * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n\t * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n\t * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n\t * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n\t * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n\t * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\t * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n\t * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\t */\n\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function (typedArrays, utils) {\n\t  \"use strict\";\n\n\t  /**\n\t   * Low level texture related functions\n\t   *\n\t   * You should generally not need to use these functions. They are provided\n\t   * for those cases where you're doing something out of the ordinary\n\t   * and you need lower level access.\n\t   *\n\t   * For backward compatibily they are available at both `twgl.textures` and `twgl`\n\t   * itself\n\t   *\n\t   * See {@link module:twgl} for core functions\n\t   *\n\t   * @module twgl/textures\n\t   */\n\n\t  // make sure we don't see a global gl\n\n\t  var gl = undefined; // eslint-disable-line\n\t  var defaults = {\n\t    textureColor: new Uint8Array([128, 192, 255, 255]),\n\t    textureOptions: {},\n\t    crossOrigin: undefined\n\t  };\n\t  var isArrayBuffer = typedArrays.isArrayBuffer;\n\n\t  // Should we make this on demand?\n\t  var ctx = document.createElement(\"canvas\").getContext(\"2d\");\n\n\t  /* PixelFormat */\n\t  var ALPHA = 0x1906;\n\t  var RGB = 0x1907;\n\t  var RGBA = 0x1908;\n\t  var LUMINANCE = 0x1909;\n\t  var LUMINANCE_ALPHA = 0x190A;\n\t  var DEPTH_COMPONENT = 0x1902;\n\t  var DEPTH_STENCIL = 0x84F9;\n\n\t  /* TextureWrapMode */\n\t  var REPEAT = 0x2901; // eslint-disable-line\n\t  var MIRRORED_REPEAT = 0x8370; // eslint-disable-line\n\n\t  /* TextureMagFilter */\n\t  var NEAREST = 0x2600; // eslint-disable-line\n\n\t  /* TextureMinFilter */\n\t  var NEAREST_MIPMAP_NEAREST = 0x2700; // eslint-disable-line\n\t  var LINEAR_MIPMAP_NEAREST = 0x2701; // eslint-disable-line\n\t  var NEAREST_MIPMAP_LINEAR = 0x2702; // eslint-disable-line\n\t  var LINEAR_MIPMAP_LINEAR = 0x2703; // eslint-disable-line\n\n\t  var R8 = 0x8229;\n\t  var R8_SNORM = 0x8F94;\n\t  var R16F = 0x822D;\n\t  var R32F = 0x822E;\n\t  var R8UI = 0x8232;\n\t  var R8I = 0x8231;\n\t  var RG16UI = 0x823A;\n\t  var RG16I = 0x8239;\n\t  var RG32UI = 0x823C;\n\t  var RG32I = 0x823B;\n\t  var RG8 = 0x822B;\n\t  var RG8_SNORM = 0x8F95;\n\t  var RG16F = 0x822F;\n\t  var RG32F = 0x8230;\n\t  var RG8UI = 0x8238;\n\t  var RG8I = 0x8237;\n\t  var R16UI = 0x8234;\n\t  var R16I = 0x8233;\n\t  var R32UI = 0x8236;\n\t  var R32I = 0x8235;\n\t  var RGB8 = 0x8051;\n\t  var SRGB8 = 0x8C41;\n\t  var RGB565 = 0x8D62;\n\t  var RGB8_SNORM = 0x8F96;\n\t  var R11F_G11F_B10F = 0x8C3A;\n\t  var RGB9_E5 = 0x8C3D;\n\t  var RGB16F = 0x881B;\n\t  var RGB32F = 0x8815;\n\t  var RGB8UI = 0x8D7D;\n\t  var RGB8I = 0x8D8F;\n\t  var RGB16UI = 0x8D77;\n\t  var RGB16I = 0x8D89;\n\t  var RGB32UI = 0x8D71;\n\t  var RGB32I = 0x8D83;\n\t  var RGBA8 = 0x8058;\n\t  var SRGB8_ALPHA8 = 0x8C43;\n\t  var RGBA8_SNORM = 0x8F97;\n\t  var RGB5_A1 = 0x8057;\n\t  var RGBA4 = 0x8056;\n\t  var RGB10_A2 = 0x8059;\n\t  var RGBA16F = 0x881A;\n\t  var RGBA32F = 0x8814;\n\t  var RGBA8UI = 0x8D7C;\n\t  var RGBA8I = 0x8D8E;\n\t  var RGB10_A2UI = 0x906F;\n\t  var RGBA16UI = 0x8D76;\n\t  var RGBA16I = 0x8D88;\n\t  var RGBA32I = 0x8D82;\n\t  var RGBA32UI = 0x8D70;\n\n\t  var DEPTH_COMPONENT16 = 0x81A5;\n\t  var DEPTH_COMPONENT24 = 0x81A6;\n\t  var DEPTH_COMPONENT32F = 0x8CAC;\n\t  var DEPTH32F_STENCIL8 = 0x8CAD;\n\t  var DEPTH24_STENCIL8 = 0x88F0;\n\n\t  /* DataType */\n\t  var BYTE = 0x1400;\n\t  var UNSIGNED_BYTE = 0x1401;\n\t  var SHORT = 0x1402;\n\t  var UNSIGNED_SHORT = 0x1403;\n\t  var INT = 0x1404;\n\t  var UNSIGNED_INT = 0x1405;\n\t  var FLOAT = 0x1406;\n\t  var UNSIGNED_SHORT_4_4_4_4 = 0x8033;\n\t  var UNSIGNED_SHORT_5_5_5_1 = 0x8034;\n\t  var UNSIGNED_SHORT_5_6_5 = 0x8363;\n\t  var HALF_FLOAT = 0x140B;\n\t  var HALF_FLOAT_OES = 0x8D61; // Thanks Khronos for making this different >:(\n\t  var UNSIGNED_INT_2_10_10_10_REV = 0x8368;\n\t  var UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;\n\t  var UNSIGNED_INT_5_9_9_9_REV = 0x8C3E;\n\t  var FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;\n\t  var UNSIGNED_INT_24_8 = 0x84FA;\n\n\t  var RG = 0x8227;\n\t  var RG_INTEGER = 0x8228;\n\t  var RED = 0x1903;\n\t  var RED_INTEGER = 0x8D94;\n\t  var RGB_INTEGER = 0x8D98;\n\t  var RGBA_INTEGER = 0x8D99;\n\n\t  var formatInfo = {};\n\t  {\n\t    // NOTE: this is named `numColorComponents` vs `numComponents` so we can let Uglify mangle\n\t    // the name.\n\t    var f = formatInfo;\n\t    f[ALPHA] = { numColorComponents: 1 };\n\t    f[LUMINANCE] = { numColorComponents: 1 };\n\t    f[LUMINANCE_ALPHA] = { numColorComponents: 2 };\n\t    f[RGB] = { numColorComponents: 3 };\n\t    f[RGBA] = { numColorComponents: 4 };\n\t    f[RED] = { numColorComponents: 1 };\n\t    f[RED_INTEGER] = { numColorComponents: 1 };\n\t    f[RG] = { numColorComponents: 2 };\n\t    f[RG_INTEGER] = { numColorComponents: 2 };\n\t    f[RGB] = { numColorComponents: 3 };\n\t    f[RGB_INTEGER] = { numColorComponents: 3 };\n\t    f[RGBA] = { numColorComponents: 4 };\n\t    f[RGBA_INTEGER] = { numColorComponents: 4 };\n\t    f[DEPTH_COMPONENT] = { numColorComponents: 1 };\n\t    f[DEPTH_STENCIL] = { numColorComponents: 2 };\n\t  }\n\n\t  var textureInternalFormatInfo = {};\n\t  {\n\t    (function () {\n\t      // NOTE: these properties need unique names so we can let Uglify mangle the name.\n\t      var t = textureInternalFormatInfo;\n\t      // unsized formats\n\t      t[ALPHA] = { textureFormat: ALPHA, colorRenderable: true, textureFilterable: true, bytesPerElement: [1, 2, 2, 4], type: [UNSIGNED_BYTE, HALF_FLOAT, HALF_FLOAT_OES, FLOAT] };\n\t      t[LUMINANCE] = { textureFormat: LUMINANCE, colorRenderable: true, textureFilterable: true, bytesPerElement: [1, 2, 2, 4], type: [UNSIGNED_BYTE, HALF_FLOAT, HALF_FLOAT_OES, FLOAT] };\n\t      t[LUMINANCE_ALPHA] = { textureFormat: LUMINANCE_ALPHA, colorRenderable: true, textureFilterable: true, bytesPerElement: [2, 4, 4, 8], type: [UNSIGNED_BYTE, HALF_FLOAT, HALF_FLOAT_OES, FLOAT] };\n\t      t[RGB] = { textureFormat: RGB, colorRenderable: true, textureFilterable: true, bytesPerElement: [3, 6, 6, 12, 2], type: [UNSIGNED_BYTE, HALF_FLOAT, HALF_FLOAT_OES, FLOAT, UNSIGNED_SHORT_5_6_5] };\n\t      t[RGBA] = { textureFormat: RGBA, colorRenderable: true, textureFilterable: true, bytesPerElement: [4, 8, 8, 16, 2, 2], type: [UNSIGNED_BYTE, HALF_FLOAT, HALF_FLOAT_OES, FLOAT, UNSIGNED_SHORT_4_4_4_4, UNSIGNED_SHORT_5_5_5_1] };\n\n\t      // sized formats\n\t      t[R8] = { textureFormat: RED, colorRenderable: true, textureFilterable: true, bytesPerElement: 1, type: UNSIGNED_BYTE };\n\t      t[R8_SNORM] = { textureFormat: RED, colorRenderable: false, textureFilterable: true, bytesPerElement: 1, type: BYTE };\n\t      t[R16F] = { textureFormat: RED, colorRenderable: false, textureFilterable: true, bytesPerElement: [4, 2], type: [FLOAT, HALF_FLOAT] };\n\t      t[R32F] = { textureFormat: RED, colorRenderable: false, textureFilterable: false, bytesPerElement: 4, type: FLOAT };\n\t      t[R8UI] = { textureFormat: RED_INTEGER, colorRenderable: true, textureFilterable: false, bytesPerElement: 1, type: UNSIGNED_BYTE };\n\t      t[R8I] = { textureFormat: RED_INTEGER, colorRenderable: true, textureFilterable: false, bytesPerElement: 1, type: BYTE };\n\t      t[R16UI] = { textureFormat: RED_INTEGER, colorRenderable: true, textureFilterable: false, bytesPerElement: 2, type: UNSIGNED_SHORT };\n\t      t[R16I] = { textureFormat: RED_INTEGER, colorRenderable: true, textureFilterable: false, bytesPerElement: 2, type: SHORT };\n\t      t[R32UI] = { textureFormat: RED_INTEGER, colorRenderable: true, textureFilterable: false, bytesPerElement: 4, type: UNSIGNED_INT };\n\t      t[R32I] = { textureFormat: RED_INTEGER, colorRenderable: true, textureFilterable: false, bytesPerElement: 4, type: INT };\n\t      t[RG8] = { textureFormat: RG, colorRenderable: true, textureFilterable: true, bytesPerElement: 2, type: UNSIGNED_BYTE };\n\t      t[RG8_SNORM] = { textureFormat: RG, colorRenderable: false, textureFilterable: true, bytesPerElement: 2, type: BYTE };\n\t      t[RG16F] = { textureFormat: RG, colorRenderable: false, textureFilterable: true, bytesPerElement: [8, 4], type: [FLOAT, HALF_FLOAT] };\n\t      t[RG32F] = { textureFormat: RG, colorRenderable: false, textureFilterable: false, bytesPerElement: 8, type: FLOAT };\n\t      t[RG8UI] = { textureFormat: RG_INTEGER, colorRenderable: true, textureFilterable: false, bytesPerElement: 2, type: UNSIGNED_BYTE };\n\t      t[RG8I] = { textureFormat: RG_INTEGER, colorRenderable: true, textureFilterable: false, bytesPerElement: 2, type: BYTE };\n\t      t[RG16UI] = { textureFormat: RG_INTEGER, colorRenderable: true, textureFilterable: false, bytesPerElement: 4, type: UNSIGNED_SHORT };\n\t      t[RG16I] = { textureFormat: RG_INTEGER, colorRenderable: true, textureFilterable: false, bytesPerElement: 4, type: SHORT };\n\t      t[RG32UI] = { textureFormat: RG_INTEGER, colorRenderable: true, textureFilterable: false, bytesPerElement: 8, type: UNSIGNED_INT };\n\t      t[RG32I] = { textureFormat: RG_INTEGER, colorRenderable: true, textureFilterable: false, bytesPerElement: 8, type: INT };\n\t      t[RGB8] = { textureFormat: RGB, colorRenderable: true, textureFilterable: true, bytesPerElement: 3, type: UNSIGNED_BYTE };\n\t      t[SRGB8] = { textureFormat: RGB, colorRenderable: false, textureFilterable: true, bytesPerElement: 3, type: UNSIGNED_BYTE };\n\t      t[RGB565] = { textureFormat: RGB, colorRenderable: true, textureFilterable: true, bytesPerElement: [3, 2], type: [UNSIGNED_BYTE, UNSIGNED_SHORT_5_6_5] };\n\t      t[RGB8_SNORM] = { textureFormat: RGB, colorRenderable: false, textureFilterable: true, bytesPerElement: 3, type: BYTE };\n\t      t[R11F_G11F_B10F] = { textureFormat: RGB, colorRenderable: false, textureFilterable: true, bytesPerElement: [12, 6, 4], type: [FLOAT, HALF_FLOAT, UNSIGNED_INT_10F_11F_11F_REV] };\n\t      t[RGB9_E5] = { textureFormat: RGB, colorRenderable: false, textureFilterable: true, bytesPerElement: [12, 6, 4], type: [FLOAT, HALF_FLOAT, UNSIGNED_INT_5_9_9_9_REV] };\n\t      t[RGB16F] = { textureFormat: RGB, colorRenderable: false, textureFilterable: true, bytesPerElement: [12, 6], type: [FLOAT, HALF_FLOAT] };\n\t      t[RGB32F] = { textureFormat: RGB, colorRenderable: false, textureFilterable: false, bytesPerElement: 12, type: FLOAT };\n\t      t[RGB8UI] = { textureFormat: RGB_INTEGER, colorRenderable: false, textureFilterable: false, bytesPerElement: 3, type: UNSIGNED_BYTE };\n\t      t[RGB8I] = { textureFormat: RGB_INTEGER, colorRenderable: false, textureFilterable: false, bytesPerElement: 3, type: BYTE };\n\t      t[RGB16UI] = { textureFormat: RGB_INTEGER, colorRenderable: false, textureFilterable: false, bytesPerElement: 6, type: UNSIGNED_SHORT };\n\t      t[RGB16I] = { textureFormat: RGB_INTEGER, colorRenderable: false, textureFilterable: false, bytesPerElement: 6, type: SHORT };\n\t      t[RGB32UI] = { textureFormat: RGB_INTEGER, colorRenderable: false, textureFilterable: false, bytesPerElement: 12, type: UNSIGNED_INT };\n\t      t[RGB32I] = { textureFormat: RGB_INTEGER, colorRenderable: false, textureFilterable: false, bytesPerElement: 12, type: INT };\n\t      t[RGBA8] = { textureFormat: RGBA, colorRenderable: true, textureFilterable: true, bytesPerElement: 4, type: UNSIGNED_BYTE };\n\t      t[SRGB8_ALPHA8] = { textureFormat: RGBA, colorRenderable: true, textureFilterable: true, bytesPerElement: 4, type: UNSIGNED_BYTE };\n\t      t[RGBA8_SNORM] = { textureFormat: RGBA, colorRenderable: false, textureFilterable: true, bytesPerElement: 4, type: BYTE };\n\t      t[RGB5_A1] = { textureFormat: RGBA, colorRenderable: true, textureFilterable: true, bytesPerElement: [4, 2, 4], type: [UNSIGNED_BYTE, UNSIGNED_SHORT_5_5_5_1, UNSIGNED_INT_2_10_10_10_REV] };\n\t      t[RGBA4] = { textureFormat: RGBA, colorRenderable: true, textureFilterable: true, bytesPerElement: [4, 2], type: [UNSIGNED_BYTE, UNSIGNED_SHORT_4_4_4_4] };\n\t      t[RGB10_A2] = { textureFormat: RGBA, colorRenderable: true, textureFilterable: true, bytesPerElement: 4, type: UNSIGNED_INT_2_10_10_10_REV };\n\t      t[RGBA16F] = { textureFormat: RGBA, colorRenderable: false, textureFilterable: true, bytesPerElement: [16, 8], type: [FLOAT, HALF_FLOAT] };\n\t      t[RGBA32F] = { textureFormat: RGBA, colorRenderable: false, textureFilterable: false, bytesPerElement: 16, type: FLOAT };\n\t      t[RGBA8UI] = { textureFormat: RGBA_INTEGER, colorRenderable: true, textureFilterable: false, bytesPerElement: 4, type: UNSIGNED_BYTE };\n\t      t[RGBA8I] = { textureFormat: RGBA_INTEGER, colorRenderable: true, textureFilterable: false, bytesPerElement: 4, type: BYTE };\n\t      t[RGB10_A2UI] = { textureFormat: RGBA_INTEGER, colorRenderable: true, textureFilterable: false, bytesPerElement: 4, type: UNSIGNED_INT_2_10_10_10_REV };\n\t      t[RGBA16UI] = { textureFormat: RGBA_INTEGER, colorRenderable: true, textureFilterable: false, bytesPerElement: 8, type: UNSIGNED_SHORT };\n\t      t[RGBA16I] = { textureFormat: RGBA_INTEGER, colorRenderable: true, textureFilterable: false, bytesPerElement: 8, type: SHORT };\n\t      t[RGBA32I] = { textureFormat: RGBA_INTEGER, colorRenderable: true, textureFilterable: false, bytesPerElement: 16, type: INT };\n\t      t[RGBA32UI] = { textureFormat: RGBA_INTEGER, colorRenderable: true, textureFilterable: false, bytesPerElement: 16, type: UNSIGNED_INT };\n\t      // Sized Internal\n\t      t[DEPTH_COMPONENT16] = { textureFormat: DEPTH_COMPONENT, colorRenderable: true, textureFilterable: false, bytesPerElement: [2, 4], type: [UNSIGNED_SHORT, UNSIGNED_INT] };\n\t      t[DEPTH_COMPONENT24] = { textureFormat: DEPTH_COMPONENT, colorRenderable: true, textureFilterable: false, bytesPerElement: 4, type: UNSIGNED_INT };\n\t      t[DEPTH_COMPONENT32F] = { textureFormat: DEPTH_COMPONENT, colorRenderable: true, textureFilterable: false, bytesPerElement: 4, type: FLOAT };\n\t      t[DEPTH24_STENCIL8] = { textureFormat: DEPTH_STENCIL, colorRenderable: true, textureFilterable: false, bytesPerElement: 4, type: UNSIGNED_INT_24_8 };\n\t      t[DEPTH32F_STENCIL8] = { textureFormat: DEPTH_STENCIL, colorRenderable: true, textureFilterable: false, bytesPerElement: 4, type: FLOAT_32_UNSIGNED_INT_24_8_REV };\n\n\t      Object.keys(t).forEach(function (internalFormat) {\n\t        var info = t[internalFormat];\n\t        info.bytesPerElementMap = {};\n\t        if (Array.isArray(info.bytesPerElement)) {\n\t          info.bytesPerElement.forEach(function (bytesPerElement, ndx) {\n\t            var type = info.type[ndx];\n\t            info.bytesPerElementMap[type] = bytesPerElement;\n\t          });\n\t        } else {\n\t          var type = info.type;\n\t          info.bytesPerElementMap[type] = info.bytesPerElement;\n\t        }\n\t      });\n\t    })();\n\t  }\n\n\t  /**\n\t   * Gets the number of bytes per element for a given internalFormat / type\n\t   * @param {number} internalFormat The internalFormat parameter from texImage2D etc..\n\t   * @param {number} type The type parameter for texImage2D etc..\n\t   * @return {number} the number of bytes per element for the given internalFormat, type combo\n\t   * @memberOf module:twgl/textures\n\t   */\n\t  function getBytesPerElementForInternalFormat(internalFormat, type) {\n\t    var info = textureInternalFormatInfo[internalFormat];\n\t    if (!info) {\n\t      throw \"unknown internal format\";\n\t    }\n\t    var bytesPerElement = info.bytesPerElementMap[type];\n\t    if (bytesPerElement === undefined) {\n\t      throw \"unknown internal format\";\n\t    }\n\t    return bytesPerElement;\n\t  }\n\n\t  /**\n\t   * Gets the format for a given internalFormat\n\t   *\n\t   * @param {number} internalFormat The internal format\n\t   * @return {{format:number, type:number}} the corresponding format and type\n\t   */\n\t  function getFormatAndTypeForInternalFormat(internalFormat) {\n\t    var info = textureInternalFormatInfo[internalFormat];\n\t    if (!info) {\n\t      throw \"unknown internal format\";\n\t    }\n\t    return {\n\t      format: info.textureFormat,\n\t      type: Array.isArray(info.type) ? info.type[0] : info.type\n\t    };\n\t  }\n\n\t  /**\n\t   * Returns true if value is power of 2\n\t   * @param {number} value number to check.\n\t   * @return true if value is power of 2\n\t   */\n\t  function isPowerOf2(value) {\n\t    return (value & value - 1) === 0;\n\t  }\n\n\t  /**\n\t   * Gets whether or not we can generate mips for the given format\n\t   * @param {number} internalFormat The internalFormat parameter from texImage2D etc..\n\t   * @param {number} type The type parameter for texImage2D etc..\n\t   * @return {boolean} true if we can generate mips\n\t   */\n\t  function canGenerateMipmap(gl, width, height, internalFormat /*, type */) {\n\t    if (!utils.isWebGL2(gl)) {\n\t      return isPowerOf2(width) && isPowerOf2(height);\n\t    }\n\t    var info = textureInternalFormatInfo[internalFormat];\n\t    if (!info) {\n\t      throw \"unknown internal format\";\n\t    }\n\t    return info.colorRenderable && info.textureFilterable;\n\t  }\n\n\t  /**\n\t   * Gets whether or not we can generate mips for the given format\n\t   * @param {number} internalFormat The internalFormat parameter from texImage2D etc..\n\t   * @param {number} type The type parameter for texImage2D etc..\n\t   * @return {boolean} true if we can generate mips\n\t   */\n\t  function canFilter(internalFormat /*, type */) {\n\t    var info = textureInternalFormatInfo[internalFormat];\n\t    if (!info) {\n\t      throw \"unknown internal format\";\n\t    }\n\t    return info.textureFilterable;\n\t  }\n\n\t  /**\n\t   * Gets the number of compontents for a given image format.\n\t   * @param {number} format the format.\n\t   * @return {number} the number of components for the format.\n\t   * @memberOf module:twgl/textures\n\t   */\n\t  function getNumComponentsForFormat(format) {\n\t    var info = formatInfo[format];\n\t    if (!info) {\n\t      throw \"unknown format: \" + format;\n\t    }\n\t    return info.numColorComponents;\n\t  }\n\n\t  /**\n\t   * Gets the texture type for a given array type.\n\t   * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n\t   * @return {number} the gl texture type\n\t   */\n\t  function getTextureTypeForArrayType(gl, src, defaultType) {\n\t    if (isArrayBuffer(src)) {\n\t      return typedArrays.getGLTypeForTypedArray(src);\n\t    }\n\t    return defaultType || gl.UNSIGNED_BYTE;\n\t  }\n\n\t  function guessDimensions(gl, target, width, height, numElements) {\n\t    if (numElements % 1 !== 0) {\n\t      throw \"can't guess dimensions\";\n\t    }\n\t    if (!width && !height) {\n\t      var size = Math.sqrt(numElements / (target === gl.TEXTURE_CUBE_MAP ? 6 : 1));\n\t      if (size % 1 === 0) {\n\t        width = size;\n\t        height = size;\n\t      } else {\n\t        width = numElements;\n\t        height = 1;\n\t      }\n\t    } else if (!height) {\n\t      height = numElements / width;\n\t      if (height % 1) {\n\t        throw \"can't guess dimensions\";\n\t      }\n\t    } else if (!width) {\n\t      width = numElements / height;\n\t      if (width % 1) {\n\t        throw \"can't guess dimensions\";\n\t      }\n\t    }\n\t    return {\n\t      width: width,\n\t      height: height\n\t    };\n\t  }\n\n\t  /**\n\t   * Sets the default texture color.\n\t   *\n\t   * The default texture color is used when loading textures from\n\t   * urls. Because the URL will be loaded async we'd like to be\n\t   * able to use the texture immediately. By putting a 1x1 pixel\n\t   * color in the texture we can start using the texture before\n\t   * the URL has loaded.\n\t   *\n\t   * @param {number[]} color Array of 4 values in the range 0 to 1\n\t   * @deprecated see {@link module:twgl.setDefaults}\n\t   * @memberOf module:twgl/textures\n\t   */\n\t  function setDefaultTextureColor(color) {\n\t    defaults.textureColor = new Uint8Array([color[0] * 255, color[1] * 255, color[2] * 255, color[3] * 255]);\n\t  }\n\n\t  function setDefaults(newDefaults) {\n\t    utils.copyExistingProperties(newDefaults, defaults);\n\t    if (newDefaults.textureColor) {\n\t      setDefaultTextureColor(newDefaults.textureColor);\n\t    }\n\t  }\n\n\t  /**\n\t   * Gets a string for gl enum\n\t   *\n\t   * Note: Several enums are the same. Without more\n\t   * context (which function) it's impossible to always\n\t   * give the correct enum.\n\t   *\n\t   * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n\t   * @param {number} value the value of the enum you want to look up.\n\t   */\n\t  var glEnumToString = function () {\n\t    var enums;\n\n\t    function init(gl) {\n\t      if (!enums) {\n\t        enums = {};\n\t        for (var key in gl) {\n\t          if (typeof gl[key] === 'number') {\n\t            enums[gl[key]] = key;\n\t          }\n\t        }\n\t      }\n\t    }\n\n\t    return function glEnumToString(gl, value) {\n\t      init(gl);\n\t      return enums[value] || \"0x\" + value.toString(16);\n\t    };\n\t  }();\n\n\t  /**\n\t   * A function to generate the source for a texture.\n\t   * @callback TextureFunc\n\t   * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n\t   * @param {module:twgl.TextureOptions} options the texture options\n\t   * @return {*} Returns any of the things documentented for `src` for {@link module:twgl.TextureOptions}.\n\t   * @memberOf module:twgl\n\t   */\n\n\t  /**\n\t   * Texture options passed to most texture functions. Each function will use whatever options\n\t   * are appropriate for its needs. This lets you pass the same options to all functions.\n\t   *\n\t   * @typedef {Object} TextureOptions\n\t   * @property {number} [target] the type of texture `gl.TEXTURE_2D` or `gl.TEXTURE_CUBE_MAP`. Defaults to `gl.TEXTURE_2D`.\n\t   * @property {number} [width] the width of the texture. Only used if src is an array or typed array or null.\n\t   * @property {number} [height] the height of a texture. Only used if src is an array or typed array or null.\n\t   * @property {number} [depth] the depth of a texture. Only used if src is an array or type array or null and target is `TEXTURE_3D` .\n\t   * @property {number} [min] the min filter setting (eg. `gl.LINEAR`). Defaults to `gl.NEAREST_MIPMAP_LINEAR`\n\t   *     or if texture is not a power of 2 on both dimensions then defaults to `gl.LINEAR`.\n\t   * @property {number} [mag] the mag filter setting (eg. `gl.LINEAR`). Defaults to `gl.LINEAR`\n\t   * @property {number} [minMag] both the min and mag filter settings.\n\t   * @property {number} [internalFormat] internal format for texture. Defaults to `gl.RGBA`\n\t   * @property {number} [format] format for texture. Defaults to `gl.RGBA`.\n\t   * @property {number} [type] type for texture. Defaults to `gl.UNSIGNED_BYTE` unless `src` is ArrayBuffer. If `src`\n\t   *     is ArrayBuffer defaults to type that matches ArrayBuffer type.\n\t   * @property {number} [wrap] Texture wrapping for both S and T (and R if TEXTURE_3D or WebGLSampler). Defaults to `gl.REPEAT` for 2D unless src is WebGL1 and src not npot and `gl.CLAMP_TO_EDGE` for cube\n\t   * @property {number} [wrapS] Texture wrapping for S. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.\n\t   * @property {number} [wrapT] Texture wrapping for T. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.\n\t   * @property {number} [wrapR] Texture wrapping for R. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.\n\t   * @property {number} [minLod] TEXTURE_MIN_LOD setting\n\t   * @property {number} [maxLod] TEXTURE_MAX_LOD setting\n\t   * @property {number} [baseLevel] TEXTURE_BASE_LEVEL setting\n\t   * @property {number} [maxLevel] TEXTURE_MAX_LEVEL setting\n\t   * @property {number} [unpackAlignment] The `gl.UNPACK_ALIGNMENT` used when uploading an array. Defaults to 1.\n\t   * @property {number} [premultiplyAlpha] Whether or not to premultiply alpha. Defaults to whatever the current setting is.\n\t   *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override\n\t   *     the current setting for specific textures.\n\t   * @property {number} [flipY] Whether or not to flip the texture vertically on upload. Defaults to whatever the current setting is.\n\t   *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override\n\t   *     the current setting for specific textures.\n\t   * @property {number} [colorspaceConversion] Whether or not to let the browser do colorspace conversion of the texture on upload. Defaults to whatever the current setting is.\n\t   *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override\n\t   *     the current setting for specific textures.\n\t   * @property {(number[]|ArrayBuffer)} color color used as temporary 1x1 pixel color for textures loaded async when src is a string.\n\t   *    If it's a JavaScript array assumes color is 0 to 1 like most GL colors as in `[1, 0, 0, 1] = red=1, green=0, blue=0, alpha=0`.\n\t   *    Defaults to `[0.5, 0.75, 1, 1]`. See {@link module:twgl.setDefaultTextureColor}. If `false` texture is set. Can be used to re-load a texture\n\t   * @property {boolean} [auto] If not `false` then texture working filtering is set automatically for non-power of 2 images and\n\t   *    mips are generated for power of 2 images.\n\t   * @property {number[]} [cubeFaceOrder] The order that cube faces are pulled out of an img or set of images. The default is\n\t   *\n\t   *     [gl.TEXTURE_CUBE_MAP_POSITIVE_X,\n\t   *      gl.TEXTURE_CUBE_MAP_NEGATIVE_X,\n\t   *      gl.TEXTURE_CUBE_MAP_POSITIVE_Y,\n\t   *      gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,\n\t   *      gl.TEXTURE_CUBE_MAP_POSITIVE_Z,\n\t   *      gl.TEXTURE_CUBE_MAP_NEGATIVE_Z]\n\t   *\n\t   * @property {(number[]|ArrayBuffer|HTMLCanvasElement|HTMLImageElement|HTMLVideoElement|string|string[]|module:twgl.TextureFunc)} [src] source for texture\n\t   *\n\t   *    If `string` then it's assumed to be a URL to an image. The image will be downloaded async. A usable\n\t   *    1x1 pixel texture will be returned immediatley. The texture will be updated once the image has downloaded.\n\t   *    If `target` is `gl.TEXTURE_CUBE_MAP` will attempt to divide image into 6 square pieces. 1x6, 6x1, 3x2, 2x3.\n\t   *    The pieces will be uploaded in `cubeFaceOrder`\n\t   *\n\t   *    If `string[]` then it must have 6 entries, one for each face of a cube map. Target must be `gl.TEXTURE_CUBE_MAP`.\n\t   *\n\t   *    If `HTMLElement` then it wil be used immediately to create the contents of the texture. Examples `HTMLImageElement`,\n\t   *    `HTMLCanvasElement`, `HTMLVideoElement`.\n\t   *\n\t   *    If `number[]` or `ArrayBuffer` it's assumed to be data for a texture. If `width` or `height` is\n\t   *    not specified it is guessed as follows. First the number of elements is computed by `src.length / numComponets`\n\t   *    where `numComponents` is derived from `format`. If `target` is `gl.TEXTURE_CUBE_MAP` then `numElements` is divided\n\t   *    by 6. Then\n\t   *\n\t   *    *   If neither `width` nor `height` are specified and `sqrt(numElements)` is an integer then width and height\n\t   *        are set to `sqrt(numElements)`. Otherwise `width = numElements` and `height = 1`.\n\t   *\n\t   *    *   If only one of `width` or `height` is specified then the other equals `numElements / specifiedDimension`.\n\t   *\n\t   * If `number[]` will be converted to `type`.\n\t   *\n\t   * If `src` is a function it will be called with a `WebGLRenderingContext` and these options.\n\t   * Whatever it returns is subject to these rules. So it can return a string url, an `HTMLElement`\n\t   * an array etc...\n\t   *\n\t   * If `src` is undefined then an empty texture will be created of size `width` by `height`.\n\t   *\n\t   * @property {string} [crossOrigin] What to set the crossOrigin property of images when they are downloaded.\n\t   *    default: undefined. Also see {@link module:twgl.setDefaults}.\n\t   *\n\t   * @memberOf module:twgl\n\t   */\n\n\t  // NOTE: While querying GL is considered slow it's not remotely as slow\n\t  // as uploading a texture. On top of that you're unlikely to call this in\n\t  // a perf critical loop. Even if upload a texture every frame that's unlikely\n\t  // to be more than 1 or 2 textures a frame. In other words, the benefits of\n\t  // making the API easy to use outweigh any supposed perf benefits\n\t  var lastPackState = {};\n\n\t  /**\n\t   * Saves any packing state that will be set based on the options.\n\t   * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n\t   * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n\t   */\n\t  function savePackState(gl, options) {\n\t    if (options.colorspaceConversion !== undefined) {\n\t      lastPackState.colorspaceConversion = gl.getParameter(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL);\n\t      gl.pixelStorei(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, options.colorspaceConversion);\n\t    }\n\t    if (options.premultiplyAlpha !== undefined) {\n\t      lastPackState.premultiplyAlpha = gl.getParameter(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL);\n\t      gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, options.premultiplyAlpha);\n\t    }\n\t    if (options.flipY !== undefined) {\n\t      lastPackState.flipY = gl.getParameter(gl.UNPACK_FLIP_Y_WEBGL);\n\t      gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, options.flipY);\n\t    }\n\t  }\n\n\t  /**\n\t   * Restores any packing state that was set based on the options.\n\t   * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n\t   * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n\t   */\n\t  function restorePackState(gl, options) {\n\t    if (options.colorspaceConversion !== undefined) {\n\t      gl.pixelStorei(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, lastPackState.colorspaceConversion);\n\t    }\n\t    if (options.premultiplyAlpha !== undefined) {\n\t      gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, lastPackState.premultiplyAlpha);\n\t    }\n\t    if (options.flipY !== undefined) {\n\t      gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, lastPackState.flipY);\n\t    }\n\t  }\n\n\t  var WebGLSamplerCtor = window.WebGLSampler || function NotWebGLSampler() {};\n\n\t  /**\n\t   * Sets the parameters of a texture or sampler\n\t   * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n\t   * @param {number|WebGLSampler} target texture target or sampler\n\t   * @param {function()} parameteriFn texParamteri or samplerParameteri fn\n\t   * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n\t   * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n\t   *   This is often the same options you passed in when you created the texture.\n\t   */\n\t  function setTextureSamplerParameters(gl, target, parameteriFn, options) {\n\t    if (options.minMag) {\n\t      parameteriFn.call(gl, target, gl.TEXTURE_MIN_FILTER, options.minMag);\n\t      parameteriFn.call(gl, target, gl.TEXTURE_MAG_FILTER, options.minMag);\n\t    }\n\t    if (options.min) {\n\t      parameteriFn.call(gl, target, gl.TEXTURE_MIN_FILTER, options.min);\n\t    }\n\t    if (options.mag) {\n\t      parameteriFn.call(gl, target, gl.TEXTURE_MAG_FILTER, options.mag);\n\t    }\n\t    if (options.wrap) {\n\t      parameteriFn.call(gl, target, gl.TEXTURE_WRAP_S, options.wrap);\n\t      parameteriFn.call(gl, target, gl.TEXTURE_WRAP_T, options.wrap);\n\t      if (target === gl.TEXTURE_3D || target instanceof WebGLSamplerCtor) {\n\t        parameteriFn.call(gl, target, gl.TEXTURE_WRAP_R, options.wrap);\n\t      }\n\t    }\n\t    if (options.wrapR) {\n\t      parameteriFn.call(gl, target, gl.TEXTURE_WRAP_R, options.wrapR);\n\t    }\n\t    if (options.wrapS) {\n\t      parameteriFn.call(gl, target, gl.TEXTURE_WRAP_S, options.wrapS);\n\t    }\n\t    if (options.wrapT) {\n\t      parameteriFn.call(gl, target, gl.TEXTURE_WRAP_T, options.wrapT);\n\t    }\n\t    if (options.minLod) {\n\t      parameteriFn.call(gl, target, gl.TEXTURE_MIN_LOD, options.minLod);\n\t    }\n\t    if (options.maxLod) {\n\t      parameteriFn.call(gl, target, gl.TEXTURE_MAX_LOD, options.maxLod);\n\t    }\n\t    if (options.baseLevel) {\n\t      parameteriFn.call(gl, target, gl.TEXTURE_BASE_LEVEL, options.baseLevel);\n\t    }\n\t    if (options.maxLevel) {\n\t      parameteriFn.call(gl, target, gl.TEXTURE_MAX_LEVEL, options.maxLevel);\n\t    }\n\t  }\n\n\t  /**\n\t   * Sets the texture parameters of a texture.\n\t   * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n\t   * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n\t   * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n\t   *   This is often the same options you passed in when you created the texture.\n\t   * @memberOf module:twgl/textures\n\t   */\n\t  function setTextureParameters(gl, tex, options) {\n\t    var target = options.target || gl.TEXTURE_2D;\n\t    gl.bindTexture(target, tex);\n\t    setTextureSamplerParameters(gl, target, gl.texParameteri, options);\n\t  }\n\n\t  /**\n\t   * Sets the sampler parameters of a sampler.\n\t   * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n\t   * @param {WebGLSampler} sampler the WebGLSampler to set parameters for\n\t   * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n\t   * @memberOf module:twgl/textures\n\t   */\n\t  function setSamplerParameters(gl, sampler, options) {\n\t    setTextureSamplerParameters(gl, sampler, gl.samplerParameteri, options);\n\t  }\n\n\t  /**\n\t   * Creates a new sampler object and sets parameters.\n\t   *\n\t   * Example:\n\t   *\n\t   *      const sampler = twgl.createSampler(gl, {\n\t   *        minMag: gl.NEAREST,         // sets both TEXTURE_MIN_FILTER and TEXTURE_MAG_FILTER\n\t   *        wrap: gl.CLAMP_TO_NEAREST,  // sets both TEXTURE_WRAP_S and TEXTURE_WRAP_T and TEXTURE_WRAP_R\n\t   *      });\n\t   *\n\t   * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n\t   * @param {Object.<string,module:twgl.TextureOptions>} options A object of TextureOptions one per sampler.\n\t   * @return {Object.<string,WebGLSampler>} the created samplers by name\n\t   */\n\t  function createSampler(gl, options) {\n\t    var sampler = gl.createSampler();\n\t    setSamplerParameters(gl, sampler, options);\n\t    return sampler;\n\t  }\n\n\t  /**\n\t   * Creates a multiple sampler objects and sets parameters on each.\n\t   *\n\t   * Example:\n\t   *\n\t   *      const samplers = twgl.createSamplers(gl, {\n\t   *        nearest: {\n\t   *          minMag: gl.NEAREST,\n\t   *        },\n\t   *        nearestClampS: {\n\t   *          minMag: gl.NEAREST,\n\t   *          wrapS: gl.CLAMP_TO_NEAREST,\n\t   *        },\n\t   *        linear: {\n\t   *          minMag: gl.LINEAR,\n\t   *        },\n\t   *        nearestClamp: {\n\t   *          minMag: gl.NEAREST,\n\t   *          wrap: gl.CLAMP_TO_EDGE,\n\t   *        },\n\t   *        linearClamp: {\n\t   *          minMag: gl.LINEAR,\n\t   *          wrap: gl.CLAMP_TO_EDGE,\n\t   *        },\n\t   *        linearClampT: {\n\t   *          minMag: gl.LINEAR,\n\t   *          wrapT: gl.CLAMP_TO_EDGE,\n\t   *        },\n\t   *      });\n\t   *\n\t   * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n\t   * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set on the sampler\n\t   */\n\t  function createSamplers(gl, samplerOptions) {\n\t    var samplers = {};\n\t    Object.keys(samplerOptions).forEach(function (name) {\n\t      samplers[name] = createSampler(gl, samplerOptions[name]);\n\t    });\n\t    return samplers;\n\t  }\n\n\t  /**\n\t   * Makes a 1x1 pixel\n\t   * If no color is passed in uses the default color which can be set by calling `setDefaultTextureColor`.\n\t   * @param {(number[]|ArrayBuffer)} [color] The color using 0-1 values\n\t   * @return {Uint8Array} Unit8Array with color.\n\t   */\n\t  function make1Pixel(color) {\n\t    color = color || defaults.textureColor;\n\t    if (isArrayBuffer(color)) {\n\t      return color;\n\t    }\n\t    return new Uint8Array([color[0] * 255, color[1] * 255, color[2] * 255, color[3] * 255]);\n\t  }\n\n\t  /**\n\t   * Sets filtering or generates mips for texture based on width or height\n\t   * If width or height is not passed in uses `options.width` and//or `options.height`\n\t   *\n\t   * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n\t   * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n\t   * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n\t   *   This is often the same options you passed in when you created the texture.\n\t   * @param {number} [width] width of texture\n\t   * @param {number} [height] height of texture\n\t   * @param {number} [internalFormat] The internalFormat parameter from texImage2D etc..\n\t   * @param {number} [type] The type parameter for texImage2D etc..\n\t   * @memberOf module:twgl/textures\n\t   */\n\t  function setTextureFilteringForSize(gl, tex, options, width, height, internalFormat, type) {\n\t    options = options || defaults.textureOptions;\n\t    internalFormat = internalFormat || gl.RGBA;\n\t    type = type || gl.UNSIGNED_BYTE;\n\t    var target = options.target || gl.TEXTURE_2D;\n\t    width = width || options.width;\n\t    height = height || options.height;\n\t    gl.bindTexture(target, tex);\n\t    if (canGenerateMipmap(gl, width, height, internalFormat, type)) {\n\t      gl.generateMipmap(target);\n\t    } else {\n\t      var filtering = canFilter(internalFormat, type) ? gl.LINEAR : gl.NEAREST;\n\t      gl.texParameteri(target, gl.TEXTURE_MIN_FILTER, filtering);\n\t      gl.texParameteri(target, gl.TEXTURE_MAG_FILTER, filtering);\n\t      gl.texParameteri(target, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n\t      gl.texParameteri(target, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\t    }\n\t  }\n\n\t  /**\n\t   * Gets an array of cubemap face enums\n\t   * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n\t   * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n\t   *   This is often the same options you passed in when you created the texture.\n\t   * @return {number[]} cubemap face enums\n\t   */\n\t  function getCubeFaceOrder(gl, options) {\n\t    options = options || {};\n\t    return options.cubeFaceOrder || [gl.TEXTURE_CUBE_MAP_POSITIVE_X, gl.TEXTURE_CUBE_MAP_NEGATIVE_X, gl.TEXTURE_CUBE_MAP_POSITIVE_Y, gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, gl.TEXTURE_CUBE_MAP_POSITIVE_Z, gl.TEXTURE_CUBE_MAP_NEGATIVE_Z];\n\t  }\n\n\t  /**\n\t   * @typedef {Object} FaceInfo\n\t   * @property {number} face gl enum for texImage2D\n\t   * @property {number} ndx face index (0 - 5) into source data\n\t   * @ignore\n\t   */\n\n\t  /**\n\t   * Gets an array of FaceInfos\n\t   * There's a bug in some NVidia drivers that will crash the driver if\n\t   * `gl.TEXTURE_CUBE_MAP_POSITIVE_X` is not uploaded first. So, we take\n\t   * the user's desired order from his faces to WebGL and make sure we\n\t   * do the faces in WebGL order\n\t   *\n\t   * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n\t   * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n\t   * @return {FaceInfo[]} cubemap face infos. Arguably the `face` property of each element is redundent but\n\t   *    it's needed internally to sort the array of `ndx` properties by `face`.\n\t   */\n\t  function getCubeFacesWithNdx(gl, options) {\n\t    var faces = getCubeFaceOrder(gl, options);\n\t    // work around bug in NVidia drivers. We have to upload the first face first else the driver crashes :(\n\t    var facesWithNdx = faces.map(function (face, ndx) {\n\t      return { face: face, ndx: ndx };\n\t    });\n\t    facesWithNdx.sort(function (a, b) {\n\t      return a.face - b.face;\n\t    });\n\t    return facesWithNdx;\n\t  }\n\n\t  /**\n\t   * Set a texture from the contents of an element. Will also set\n\t   * texture filtering or generate mips based on the dimensions of the element\n\t   * unless `options.auto === false`. If `target === gl.TEXTURE_CUBE_MAP` will\n\t   * attempt to slice image into 1x6, 2x3, 3x2, or 6x1 images, one for each face.\n\t   * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n\t   * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n\t   * @param {HTMLElement} element a canvas, img, or video element.\n\t   * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n\t   *   This is often the same options you passed in when you created the texture.\n\t   * @memberOf module:twgl/textures\n\t   * @kind function\n\t   */\n\t  function setTextureFromElement(gl, tex, element, options) {\n\t    options = options || defaults.textureOptions;\n\t    var target = options.target || gl.TEXTURE_2D;\n\t    var width = element.width;\n\t    var height = element.height;\n\t    var internalFormat = options.internalFormat || options.format || gl.RGBA;\n\t    var formatType = getFormatAndTypeForInternalFormat(internalFormat);\n\t    var format = options.format || formatType.format;\n\t    var type = options.type || formatType.type;\n\t    savePackState(gl, options);\n\t    gl.bindTexture(target, tex);\n\t    if (target === gl.TEXTURE_CUBE_MAP) {\n\t      // guess the parts\n\t      var imgWidth = element.width;\n\t      var imgHeight = element.height;\n\t      var size;\n\t      var slices;\n\t      if (imgWidth / 6 === imgHeight) {\n\t        // It's 6x1\n\t        size = imgHeight;\n\t        slices = [0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0];\n\t      } else if (imgHeight / 6 === imgWidth) {\n\t        // It's 1x6\n\t        size = imgWidth;\n\t        slices = [0, 0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5];\n\t      } else if (imgWidth / 3 === imgHeight / 2) {\n\t        // It's 3x2\n\t        size = imgWidth / 3;\n\t        slices = [0, 0, 1, 0, 2, 0, 0, 1, 1, 1, 2, 1];\n\t      } else if (imgWidth / 2 === imgHeight / 3) {\n\t        // It's 2x3\n\t        size = imgWidth / 2;\n\t        slices = [0, 0, 1, 0, 0, 1, 1, 1, 0, 2, 1, 2];\n\t      } else {\n\t        throw \"can't figure out cube map from element: \" + (element.src ? element.src : element.nodeName);\n\t      }\n\t      ctx.canvas.width = size;\n\t      ctx.canvas.height = size;\n\t      width = size;\n\t      height = size;\n\t      getCubeFacesWithNdx(gl, options).forEach(function (f) {\n\t        var xOffset = slices[f.ndx * 2 + 0] * size;\n\t        var yOffset = slices[f.ndx * 2 + 1] * size;\n\t        ctx.drawImage(element, xOffset, yOffset, size, size, 0, 0, size, size);\n\t        gl.texImage2D(f.face, 0, internalFormat, format, type, ctx.canvas);\n\t      });\n\t      // Free up the canvas memory\n\t      ctx.canvas.width = 1;\n\t      ctx.canvas.height = 1;\n\t    } else if (target === gl.TEXTURE_3D) {\n\t      var smallest = Math.min(element.width, element.height);\n\t      var largest = Math.max(element.width, element.height);\n\t      var depth = largest / smallest;\n\t      if (depth % 1 !== 0) {\n\t        throw \"can not compute 3D dimensions of element\";\n\t      }\n\t      var xMult = element.width === largest ? 1 : 0;\n\t      var yMult = element.height === largest ? 1 : 0;\n\t      gl.texImage3D(target, 0, internalFormat, smallest, smallest, smallest, 0, format, type, null);\n\t      // remove this is texSubImage3D gets width and height arguments\n\t      ctx.canvas.width = smallest;\n\t      ctx.canvas.height = smallest;\n\t      for (var d = 0; d < depth; ++d) {\n\t        //        gl.pixelStorei(gl.UNPACK_SKIP_PIXELS, d * smallest);\n\t        //        gl.texSubImage3D(target, 0, 0, 0, d, format, type, element);\n\t        var srcX = d * smallest * xMult;\n\t        var srcY = d * smallest * yMult;\n\t        var srcW = smallest;\n\t        var srcH = smallest;\n\t        var dstX = 0;\n\t        var dstY = 0;\n\t        var dstW = smallest;\n\t        var dstH = smallest;\n\t        ctx.drawImage(element, srcX, srcY, srcW, srcH, dstX, dstY, dstW, dstH);\n\t        gl.texSubImage3D(target, 0, 0, 0, d, smallest, smallest, 1, format, type, ctx.canvas);\n\t      }\n\t      ctx.canvas.width = 0;\n\t      ctx.canvas.height = 0;\n\t      // FIX (save state)\n\t      //      gl.pixelStorei(gl.UNPACK_SKIP_PIXELS, 0);\n\t    } else {\n\t      gl.texImage2D(target, 0, internalFormat, format, type, element);\n\t    }\n\t    restorePackState(gl, options);\n\t    if (options.auto !== false) {\n\t      setTextureFilteringForSize(gl, tex, options, width, height, internalFormat, type);\n\t    }\n\t    setTextureParameters(gl, tex, options);\n\t  }\n\n\t  function noop() {}\n\n\t  /**\n\t   * Loads an image\n\t   * @param {string} url url to image\n\t   * @param {function(err, img)} [callback] a callback that's passed an error and the image. The error will be non-null\n\t   *     if there was an error\n\t   * @return {HTMLImageElement} the image being loaded.\n\t   */\n\t  function loadImage(url, crossOrigin, callback) {\n\t    callback = callback || noop;\n\t    var img = new Image();\n\t    crossOrigin = crossOrigin !== undefined ? crossOrigin : defaults.crossOrigin;\n\t    if (crossOrigin !== undefined) {\n\t      img.crossOrigin = crossOrigin;\n\t    }\n\n\t    function clearEventHandlers() {\n\t      img.removeEventListener('error', onError); // eslint-disable-line\n\t      img.removeEventListener('load', onLoad); // eslint-disable-line\n\t      img = null;\n\t    }\n\n\t    function onError() {\n\t      var msg = \"couldn't load image: \" + url;\n\t      utils.error(msg);\n\t      callback(msg, img);\n\t      clearEventHandlers();\n\t    }\n\n\t    function onLoad() {\n\t      callback(null, img);\n\t      clearEventHandlers();\n\t    }\n\n\t    img.addEventListener('error', onError);\n\t    img.addEventListener('load', onLoad);\n\t    img.src = url;\n\t    return img;\n\t  }\n\n\t  /**\n\t   * Sets a texture to a 1x1 pixel color. If `options.color === false` is nothing happens. If it's not set\n\t   * the default texture color is used which can be set by calling `setDefaultTextureColor`.\n\t   * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n\t   * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n\t   * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n\t   *   This is often the same options you passed in when you created the texture.\n\t   * @memberOf module:twgl/textures\n\t   */\n\t  function setTextureTo1PixelColor(gl, tex, options) {\n\t    options = options || defaults.textureOptions;\n\t    var target = options.target || gl.TEXTURE_2D;\n\t    gl.bindTexture(target, tex);\n\t    if (options.color === false) {\n\t      return;\n\t    }\n\t    // Assume it's a URL\n\t    // Put 1x1 pixels in texture. That makes it renderable immediately regardless of filtering.\n\t    var color = make1Pixel(options.color);\n\t    if (target === gl.TEXTURE_CUBE_MAP) {\n\t      for (var ii = 0; ii < 6; ++ii) {\n\t        gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + ii, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, color);\n\t      }\n\t    } else if (target === gl.TEXTURE_3D || target === gl.TEXTURE_2D_ARRAY) {\n\t      gl.texImage3D(target, 0, gl.RGBA, 1, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, color);\n\t    } else {\n\t      gl.texImage2D(target, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, color);\n\t    }\n\t  }\n\n\t  /**\n\t   * The src image(s) used to create a texture.\n\t   *\n\t   * When you call {@link module:twgl.createTexture} or {@link module:twgl.createTextures}\n\t   * you can pass in urls for images to load into the textures. If it's a single url\n\t   * then this will be a single HTMLImageElement. If it's an array of urls used for a cubemap\n\t   * this will be a corresponding array of images for the cubemap.\n\t   *\n\t   * @typedef {HTMLImageElement|HTMLImageElement[]} TextureSrc\n\t   * @memberOf module:twgl\n\t   */\n\n\t  /**\n\t   * A callback for when an image finished downloading and been uploaded into a texture\n\t   * @callback TextureReadyCallback\n\t   * @param {*} err If truthy there was an error.\n\t   * @param {WebGLTexture} texture the texture.\n\t   * @param {module:twgl.TextureSrc} souce image(s) used to as the src for the texture\n\t   * @memberOf module:twgl\n\t   */\n\n\t  /**\n\t   * A callback for when all images have finished downloading and been uploaded into their respective textures\n\t   * @callback TexturesReadyCallback\n\t   * @param {*} err If truthy there was an error.\n\t   * @param {Object.<string, WebGLTexture>} textures the created textures by name. Same as returned by {@link module:twgl.createTextures}.\n\t   * @param {Object.<string, module:twgl.TextureSrc>} sources the image(s) used for the texture by name.\n\t   * @memberOf module:twgl\n\t   */\n\n\t  /**\n\t   * A callback for when an image finished downloading and been uploaded into a texture\n\t   * @callback CubemapReadyCallback\n\t   * @param {*} err If truthy there was an error.\n\t   * @param {WebGLTexture} tex the texture.\n\t   * @param {HTMLImageElement[]} imgs the images for each face.\n\t   * @memberOf module:twgl\n\t   */\n\n\t  /**\n\t   * A callback for when an image finished downloading and been uploaded into a texture\n\t   * @callback ThreeDReadyCallback\n\t   * @param {*} err If truthy there was an error.\n\t   * @param {WebGLTexture} tex the texture.\n\t   * @param {HTMLImageElement[]} imgs the images for each slice.\n\t   * @memberOf module:twgl\n\t   */\n\n\t  /**\n\t   * Loads a texture from an image from a Url as specified in `options.src`\n\t   * If `options.color !== false` will set the texture to a 1x1 pixel color so that the texture is\n\t   * immediately useable. It will be updated with the contents of the image once the image has finished\n\t   * downloading. Filtering options will be set as approriate for image unless `options.auto === false`.\n\t   * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n\t   * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n\t   * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n\t   * @param {module:twgl.TextureReadyCallback} [callback] A function to be called when the image has finished loading. err will\n\t   *    be non null if there was an error.\n\t   * @return {HTMLImageElement} the image being downloaded.\n\t   * @memberOf module:twgl/textures\n\t   */\n\t  function loadTextureFromUrl(gl, tex, options, callback) {\n\t    callback = callback || noop;\n\t    options = options || defaults.textureOptions;\n\t    setTextureTo1PixelColor(gl, tex, options);\n\t    // Because it's async we need to copy the options.\n\t    options = utils.shallowCopy(options);\n\t    var img = loadImage(options.src, options.crossOrigin, function (err, img) {\n\t      if (err) {\n\t        callback(err, tex, img);\n\t      } else {\n\t        setTextureFromElement(gl, tex, img, options);\n\t        callback(null, tex, img);\n\t      }\n\t    });\n\t    return img;\n\t  }\n\n\t  /**\n\t   * Loads a cubemap from 6 urls as specified in `options.src`. Will set the cubemap to a 1x1 pixel color\n\t   * so that it is usable immediately unless `option.color === false`.\n\t   * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n\t   * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n\t   * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n\t   * @param {module:twgl.CubemapReadyCallback} [callback] A function to be called when all the images have finished loading. err will\n\t   *    be non null if there was an error.\n\t   * @memberOf module:twgl/textures\n\t   */\n\t  function loadCubemapFromUrls(gl, tex, options, callback) {\n\t    callback = callback || noop;\n\t    var urls = options.src;\n\t    if (urls.length !== 6) {\n\t      throw \"there must be 6 urls for a cubemap\";\n\t    }\n\t    var internalFormat = options.internalFormat || options.format || gl.RGBA;\n\t    var formatType = getFormatAndTypeForInternalFormat(internalFormat);\n\t    var format = options.format || formatType.format;\n\t    var type = options.type || gl.UNSIGNED_BYTE;\n\t    var target = options.target || gl.TEXTURE_2D;\n\t    if (target !== gl.TEXTURE_CUBE_MAP) {\n\t      throw \"target must be TEXTURE_CUBE_MAP\";\n\t    }\n\t    setTextureTo1PixelColor(gl, tex, options);\n\t    // Because it's async we need to copy the options.\n\t    options = utils.shallowCopy(options);\n\t    var numToLoad = 6;\n\t    var errors = [];\n\t    var imgs;\n\t    var faces = getCubeFaceOrder(gl, options);\n\n\t    function uploadImg(faceTarget) {\n\t      return function (err, img) {\n\t        --numToLoad;\n\t        if (err) {\n\t          errors.push(err);\n\t        } else {\n\t          if (img.width !== img.height) {\n\t            errors.push(\"cubemap face img is not a square: \" + img.src);\n\t          } else {\n\t            savePackState(gl, options);\n\t            gl.bindTexture(target, tex);\n\n\t            // So assuming this is the first image we now have one face that's img sized\n\t            // and 5 faces that are 1x1 pixel so size the other faces\n\t            if (numToLoad === 5) {\n\t              // use the default order\n\t              getCubeFaceOrder(gl).forEach(function (otherTarget) {\n\t                // Should we re-use the same face or a color?\n\t                gl.texImage2D(otherTarget, 0, internalFormat, format, type, img);\n\t              });\n\t            } else {\n\t              gl.texImage2D(faceTarget, 0, internalFormat, format, type, img);\n\t            }\n\n\t            restorePackState(gl, options);\n\t            gl.generateMipmap(target);\n\t          }\n\t        }\n\n\t        if (numToLoad === 0) {\n\t          callback(errors.length ? errors : undefined, imgs, tex);\n\t        }\n\t      };\n\t    }\n\n\t    imgs = urls.map(function (url, ndx) {\n\t      return loadImage(url, options.crossOrigin, uploadImg(faces[ndx]));\n\t    });\n\t  }\n\n\t  /**\n\t   * Loads a 2d array or 3d texture from urls as specified in `options.src`.\n\t   * Will set the texture to a 1x1 pixel color\n\t   * so that it is usable immediately unless `option.color === false`.\n\t   *\n\t   * If the width and height is not specified the width and height of the first\n\t   * image loaded will be used. Note that since images are loaded async\n\t   * which image downloads first is unknown.\n\t   *\n\t   * If an image is not the same size as the width and height it will be scaled\n\t   * to that width and height.\n\t   *\n\t   * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n\t   * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n\t   * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n\t   * @param {module:twgl.ThreeDReadyCallback} [callback] A function to be called when all the images have finished loading. err will\n\t   *    be non null if there was an error.\n\t   * @memberOf module:twgl/textures\n\t   */\n\t  function loadSlicesFromUrls(gl, tex, options, callback) {\n\t    callback = callback || noop;\n\t    var urls = options.src;\n\t    var internalFormat = options.internalFormat || options.format || gl.RGBA;\n\t    var formatType = getFormatAndTypeForInternalFormat(internalFormat);\n\t    var format = options.format || formatType.format;\n\t    var type = options.type || gl.UNSIGNED_BYTE;\n\t    var target = options.target || gl.TEXTURE_2D_ARRAY;\n\t    if (target !== gl.TEXTURE_3D && target !== gl.TEXTURE_2D_ARRAY) {\n\t      throw \"target must be TEXTURE_3D or TEXTURE_2D_ARRAY\";\n\t    }\n\t    setTextureTo1PixelColor(gl, tex, options);\n\t    // Because it's async we need to copy the options.\n\t    options = utils.shallowCopy(options);\n\t    var numToLoad = urls.length;\n\t    var errors = [];\n\t    var imgs;\n\t    var width = options.width;\n\t    var height = options.height;\n\t    var depth = urls.length;\n\t    var firstImage = true;\n\n\t    function uploadImg(slice) {\n\t      return function (err, img) {\n\t        --numToLoad;\n\t        if (err) {\n\t          errors.push(err);\n\t        } else {\n\t          savePackState(gl, options);\n\t          gl.bindTexture(target, tex);\n\n\t          if (firstImage) {\n\t            firstImage = false;\n\t            width = options.width || img.width;\n\t            height = options.height || img.height;\n\t            gl.texImage3D(target, 0, internalFormat, width, height, depth, 0, format, type, null);\n\n\t            // put it in every slice otherwise some slices will be 0,0,0,0\n\t            for (var s = 0; s < depth; ++s) {\n\t              gl.texSubImage3D(target, 0, 0, 0, s, width, height, 1, format, type, img);\n\t            }\n\t          } else {\n\t            var src = img;\n\t            if (img.width !== width || img.height !== height) {\n\t              // Size the image to fix\n\t              src = ctx.canvas;\n\t              ctx.canvas.width = width;\n\t              ctx.canvas.height = height;\n\t              ctx.drawImage(img, 0, 0, width, height);\n\t            }\n\n\t            gl.texSubImage3D(target, 0, 0, 0, slice, width, height, 1, format, type, src);\n\n\t            // free the canvas memory\n\t            if (src === ctx.canvas) {\n\t              ctx.canvas.width = 0;\n\t              ctx.canvas.height = 0;\n\t            }\n\t          }\n\n\t          restorePackState(gl, options);\n\t          gl.generateMipmap(target);\n\t        }\n\n\t        if (numToLoad === 0) {\n\t          callback(errors.length ? errors : undefined, imgs, tex);\n\t        }\n\t      };\n\t    }\n\n\t    imgs = urls.map(function (url, ndx) {\n\t      return loadImage(url, options.crossOrigin, uploadImg(ndx));\n\t    });\n\t  }\n\n\t  /**\n\t   * Sets a texture from an array or typed array. If the width or height is not provided will attempt to\n\t   * guess the size. See {@link module:twgl.TextureOptions}.\n\t   * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n\t   * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n\t   * @param {(number[]|ArrayBuffer)} src An array or typed arry with texture data.\n\t   * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n\t   *   This is often the same options you passed in when you created the texture.\n\t   * @memberOf module:twgl/textures\n\t   */\n\t  function setTextureFromArray(gl, tex, src, options) {\n\t    options = options || defaults.textureOptions;\n\t    var target = options.target || gl.TEXTURE_2D;\n\t    gl.bindTexture(target, tex);\n\t    var width = options.width;\n\t    var height = options.height;\n\t    var depth = options.depth;\n\t    var internalFormat = options.internalFormat || options.format || gl.RGBA;\n\t    var formatType = getFormatAndTypeForInternalFormat(internalFormat);\n\t    var format = options.format || formatType.format;\n\t    var type = options.type || getTextureTypeForArrayType(gl, src, formatType.type);\n\t    if (!isArrayBuffer(src)) {\n\t      var Type = typedArrays.getTypedArrayTypeForGLType(type);\n\t      src = new Type(src);\n\t    } else {\n\t      if (src instanceof Uint8ClampedArray) {\n\t        src = new Uint8Array(src.buffer);\n\t      }\n\t    }\n\t    var bytesPerElement = getBytesPerElementForInternalFormat(internalFormat, type);\n\t    var numElements = src.byteLength / bytesPerElement; // TODO: check UNPACK_ALIGNMENT?\n\t    if (numElements % 1) {\n\t      throw \"length wrong size for format: \" + glEnumToString(gl, format);\n\t    }\n\t    var dimensions;\n\t    if (target === gl.TEXTURE_3D) {\n\t      if (!width && !height && !depth) {\n\t        var size = Math.cbrt(numElements);\n\t        if (size % 1 !== 0) {\n\t          throw \"can't guess cube size of array of numElements: \" + numElements;\n\t        }\n\t        width = size;\n\t        height = size;\n\t        depth = size;\n\t      } else if (width && (!height || !depth)) {\n\t        dimensions = guessDimensions(gl, target, height, depth, numElements / width);\n\t        height = dimensions.width;\n\t        depth = dimensions.height;\n\t      } else if (height && (!width || !depth)) {\n\t        dimensions = guessDimensions(gl, target, width, depth, numElements / height);\n\t        width = dimensions.width;\n\t        depth = dimensions.height;\n\t      } else {\n\t        dimensions = guessDimensions(gl, target, width, height, numElements / depth);\n\t        width = dimensions.width;\n\t        height = dimensions.height;\n\t      }\n\t    } else {\n\t      dimensions = guessDimensions(gl, target, width, height, numElements);\n\t      width = dimensions.width;\n\t      height = dimensions.height;\n\t    }\n\t    gl.pixelStorei(gl.UNPACK_ALIGNMENT, options.unpackAlignment || 1);\n\t    savePackState(gl, options);\n\t    if (target === gl.TEXTURE_CUBE_MAP) {\n\t      (function () {\n\t        var elementsPerElement = bytesPerElement / src.BYTES_PER_ELEMENT;\n\t        var faceSize = numElements / 6 * elementsPerElement;\n\n\t        getCubeFacesWithNdx(gl, options).forEach(function (f) {\n\t          var offset = faceSize * f.ndx;\n\t          var data = src.subarray(offset, offset + faceSize);\n\t          gl.texImage2D(f.face, 0, internalFormat, width, height, 0, format, type, data);\n\t        });\n\t      })();\n\t    } else if (target === gl.TEXTURE_3D) {\n\t      gl.texImage3D(target, 0, internalFormat, width, height, depth, 0, format, type, src);\n\t    } else {\n\t      gl.texImage2D(target, 0, internalFormat, width, height, 0, format, type, src);\n\t    }\n\t    restorePackState(gl, options);\n\t    return {\n\t      width: width,\n\t      height: height,\n\t      depth: depth,\n\t      type: type\n\t    };\n\t  }\n\n\t  /**\n\t   * Sets a texture with no contents of a certain size. In other words calls `gl.texImage2D` with `null`.\n\t   * You must set `options.width` and `options.height`.\n\t   * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n\t   * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n\t   * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n\t   * @memberOf module:twgl/textures\n\t   */\n\t  function setEmptyTexture(gl, tex, options) {\n\t    var target = options.target || gl.TEXTURE_2D;\n\t    gl.bindTexture(target, tex);\n\t    var internalFormat = options.internalFormat || options.format || gl.RGBA;\n\t    var formatType = getFormatAndTypeForInternalFormat(internalFormat);\n\t    var format = options.format || formatType.format;\n\t    var type = options.type || formatType.type;\n\t    savePackState(gl, options);\n\t    if (target === gl.TEXTURE_CUBE_MAP) {\n\t      for (var ii = 0; ii < 6; ++ii) {\n\t        gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + ii, 0, internalFormat, options.width, options.height, 0, format, type, null);\n\t      }\n\t    } else if (target === gl.TEXTURE_3D) {\n\t      gl.texImage3D(target, 0, internalFormat, options.width, options.height, options.depth, 0, format, type, null);\n\t    } else {\n\t      gl.texImage2D(target, 0, internalFormat, options.width, options.height, 0, format, type, null);\n\t    }\n\t    restorePackState(gl, options);\n\t  }\n\n\t  /**\n\t   * Creates a texture based on the options passed in.\n\t   * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n\t   * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n\t   * @param {module:twgl.TextureReadyCallback} [callback] A callback called when an image has been downloaded and uploaded to the texture.\n\t   * @return {WebGLTexture} the created texture.\n\t   * @memberOf module:twgl/textures\n\t   */\n\t  function createTexture(gl, options, callback) {\n\t    callback = callback || noop;\n\t    options = options || defaults.textureOptions;\n\t    var tex = gl.createTexture();\n\t    var target = options.target || gl.TEXTURE_2D;\n\t    var width = options.width || 1;\n\t    var height = options.height || 1;\n\t    var internalFormat = options.internalFormat || gl.RGBA;\n\t    var formatType = getFormatAndTypeForInternalFormat(internalFormat);\n\t    var type = options.type || formatType.type;\n\t    gl.bindTexture(target, tex);\n\t    if (target === gl.TEXTURE_CUBE_MAP) {\n\t      // this should have been the default for CUBEMAPS :(\n\t      gl.texParameteri(target, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n\t      gl.texParameteri(target, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\t    }\n\t    var src = options.src;\n\t    if (src) {\n\t      if (typeof src === \"function\") {\n\t        src = src(gl, options);\n\t      }\n\t      if (typeof src === \"string\") {\n\t        loadTextureFromUrl(gl, tex, options, callback);\n\t      } else if (isArrayBuffer(src) || Array.isArray(src) && (typeof src[0] === 'number' || Array.isArray(src[0]) || isArrayBuffer(src[0]))) {\n\t        var dimensions = setTextureFromArray(gl, tex, src, options);\n\t        width = dimensions.width;\n\t        height = dimensions.height;\n\t        type = dimensions.type;\n\t      } else if (Array.isArray(src) && typeof src[0] === 'string') {\n\t        if (target === gl.TEXTURE_CUBE_MAP) {\n\t          loadCubemapFromUrls(gl, tex, options, callback);\n\t        } else {\n\t          loadSlicesFromUrls(gl, tex, options, callback);\n\t        }\n\t      } else if (src instanceof HTMLElement) {\n\t        setTextureFromElement(gl, tex, src, options);\n\t        width = src.width;\n\t        height = src.height;\n\t      } else {\n\t        throw \"unsupported src type\";\n\t      }\n\t    } else {\n\t      setEmptyTexture(gl, tex, options);\n\t    }\n\t    if (options.auto !== false) {\n\t      setTextureFilteringForSize(gl, tex, options, width, height, internalFormat, type);\n\t    }\n\t    setTextureParameters(gl, tex, options);\n\t    return tex;\n\t  }\n\n\t  /**\n\t   * Resizes a texture based on the options passed in.\n\t   *\n\t   * Note: This is not a generic resize anything function.\n\t   * It's mostly used by {@link module:twgl.resizeFramebufferInfo}\n\t   * It will use `options.src` if it exists to try to determine a `type`\n\t   * otherwise it will assume `gl.UNSIGNED_BYTE`. No data is provided\n\t   * for the texture. Texture parameters will be set accordingly\n\t   *\n\t   * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n\t   * @param {WebGLTexture} tex the texture to resize\n\t   * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n\t   * @param {number} [width] the new width. If not passed in will use `options.width`\n\t   * @param {number} [height] the new height. If not passed in will use `options.height`\n\t   * @memberOf module:twgl/textures\n\t   */\n\t  function resizeTexture(gl, tex, options, width, height) {\n\t    width = width || options.width;\n\t    height = height || options.height;\n\t    var target = options.target || gl.TEXTURE_2D;\n\t    gl.bindTexture(target, tex);\n\t    var internalFormat = options.internalFormat || options.format || gl.RGBA;\n\t    var formatType = getFormatAndTypeForInternalFormat(internalFormat);\n\t    var format = options.format || formatType.format;\n\t    var type;\n\t    var src = options.src;\n\t    if (!src) {\n\t      type = options.type || formatType.type;\n\t    } else if (isArrayBuffer(src) || Array.isArray(src) && typeof src[0] === 'number') {\n\t      type = options.type || getTextureTypeForArrayType(gl, src, formatType.type);\n\t    } else {\n\t      type = options.type || formatType.type;\n\t    }\n\t    if (target === gl.TEXTURE_CUBE_MAP) {\n\t      for (var ii = 0; ii < 6; ++ii) {\n\t        gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + ii, 0, format, width, height, 0, format, type, null);\n\t      }\n\t    } else {\n\t      gl.texImage2D(target, 0, format, width, height, 0, format, type, null);\n\t    }\n\t  }\n\n\t  /**\n\t   * Check if a src is an async request.\n\t   * if src is a string we're going to download an image\n\t   * if src is an array of strings we're going to download cubemap images\n\t   * @param {*} src The src from a TextureOptions\n\t   * @returns {bool} true if src is async.\n\t   */\n\t  function isAsyncSrc(src) {\n\t    return typeof src === 'string' || Array.isArray(src) && typeof src[0] === 'string';\n\t  }\n\n\t  /**\n\t   * Creates a bunch of textures based on the passed in options.\n\t   *\n\t   * Example:\n\t   *\n\t   *     var textures = twgl.createTextures(gl, {\n\t   *       // a power of 2 image\n\t   *       hftIcon: { src: \"images/hft-icon-16.png\", mag: gl.NEAREST },\n\t   *       // a non-power of 2 image\n\t   *       clover: { src: \"images/clover.jpg\" },\n\t   *       // From a canvas\n\t   *       fromCanvas: { src: ctx.canvas },\n\t   *       // A cubemap from 6 images\n\t   *       yokohama: {\n\t   *         target: gl.TEXTURE_CUBE_MAP,\n\t   *         src: [\n\t   *           'images/yokohama/posx.jpg',\n\t   *           'images/yokohama/negx.jpg',\n\t   *           'images/yokohama/posy.jpg',\n\t   *           'images/yokohama/negy.jpg',\n\t   *           'images/yokohama/posz.jpg',\n\t   *           'images/yokohama/negz.jpg',\n\t   *         ],\n\t   *       },\n\t   *       // A cubemap from 1 image (can be 1x6, 2x3, 3x2, 6x1)\n\t   *       goldengate: {\n\t   *         target: gl.TEXTURE_CUBE_MAP,\n\t   *         src: 'images/goldengate.jpg',\n\t   *       },\n\t   *       // A 2x2 pixel texture from a JavaScript array\n\t   *       checker: {\n\t   *         mag: gl.NEAREST,\n\t   *         min: gl.LINEAR,\n\t   *         src: [\n\t   *           255,255,255,255,\n\t   *           192,192,192,255,\n\t   *           192,192,192,255,\n\t   *           255,255,255,255,\n\t   *         ],\n\t   *       },\n\t   *       // a 1x2 pixel texture from a typed array.\n\t   *       stripe: {\n\t   *         mag: gl.NEAREST,\n\t   *         min: gl.LINEAR,\n\t   *         format: gl.LUMINANCE,\n\t   *         src: new Uint8Array([\n\t   *           255,\n\t   *           128,\n\t   *           255,\n\t   *           128,\n\t   *           255,\n\t   *           128,\n\t   *           255,\n\t   *           128,\n\t   *         ]),\n\t   *         width: 1,\n\t   *       },\n\t   *     });\n\t   *\n\t   * Now\n\t   *\n\t   * *   `textures.hftIcon` will be a 2d texture\n\t   * *   `textures.clover` will be a 2d texture\n\t   * *   `textures.fromCanvas` will be a 2d texture\n\t   * *   `textures.yohohama` will be a cubemap texture\n\t   * *   `textures.goldengate` will be a cubemap texture\n\t   * *   `textures.checker` will be a 2d texture\n\t   * *   `textures.stripe` will be a 2d texture\n\t   *\n\t   * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n\t   * @param {Object.<string,module:twgl.TextureOptions>} options A object of TextureOptions one per texture.\n\t   * @param {module:twgl.TexturesReadyCallback} [callback] A callback called when all textures have been downloaded.\n\t   * @return {Object.<string,WebGLTexture>} the created textures by name\n\t   * @memberOf module:twgl/textures\n\t   */\n\t  function createTextures(gl, textureOptions, callback) {\n\t    callback = callback || noop;\n\t    var numDownloading = 0;\n\t    var errors = [];\n\t    var textures = {};\n\t    var images = {};\n\n\t    function callCallbackIfReady() {\n\t      if (numDownloading === 0) {\n\t        setTimeout(function () {\n\t          callback(errors.length ? errors : undefined, textures, images);\n\t        }, 0);\n\t      }\n\t    }\n\n\t    Object.keys(textureOptions).forEach(function (name) {\n\t      var options = textureOptions[name];\n\t      var onLoadFn;\n\t      if (isAsyncSrc(options.src)) {\n\t        onLoadFn = function onLoadFn(err, tex, img) {\n\t          images[name] = img;\n\t          --numDownloading;\n\t          if (err) {\n\t            errors.push(err);\n\t          }\n\t          callCallbackIfReady();\n\t        };\n\t        ++numDownloading;\n\t      }\n\t      textures[name] = createTexture(gl, options, onLoadFn);\n\t    });\n\n\t    // queue the callback if there are no images to download.\n\t    // We do this because if your code is structured to wait for\n\t    // images to download but then you comment out all the async\n\t    // images your code would break.\n\t    callCallbackIfReady();\n\n\t    return textures;\n\t  }\n\n\t  // Using quotes prevents Uglify from changing the names.\n\t  // No speed diff AFAICT.\n\t  return {\n\t    \"setDefaults_\": setDefaults,\n\n\t    \"createSampler\": createSampler,\n\t    \"createSamplers\": createSamplers,\n\t    \"setSamplerParameters\": setSamplerParameters,\n\n\t    \"createTexture\": createTexture,\n\t    \"setEmptyTexture\": setEmptyTexture,\n\t    \"setTextureFromArray\": setTextureFromArray,\n\t    \"loadTextureFromUrl\": loadTextureFromUrl,\n\t    \"setTextureFromElement\": setTextureFromElement,\n\t    \"setTextureFilteringForSize\": setTextureFilteringForSize,\n\t    \"setTextureParameters\": setTextureParameters,\n\t    \"setDefaultTextureColor\": setDefaultTextureColor,\n\t    \"createTextures\": createTextures,\n\t    \"resizeTexture\": resizeTexture,\n\t    \"getNumComponentsForFormat\": getNumComponentsForFormat,\n\t    \"getBytesPerElementForInternalFormat\": getBytesPerElementForInternalFormat\n\t  };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\"use strict\";\n\n\t/*\n\t * Copyright 2015, Gregg Tavares.\n\t * All rights reserved.\n\t *\n\t * Redistribution and use in source and binary forms, with or without\n\t * modification, are permitted provided that the following conditions are\n\t * met:\n\t *\n\t *     * Redistributions of source code must retain the above copyright\n\t * notice, this list of conditions and the following disclaimer.\n\t *     * Redistributions in binary form must reproduce the above\n\t * copyright notice, this list of conditions and the following disclaimer\n\t * in the documentation and/or other materials provided with the\n\t * distribution.\n\t *     * Neither the name of Gregg Tavares. nor the names of his\n\t * contributors may be used to endorse or promote products derived from\n\t * this software without specific prior written permission.\n\t *\n\t * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\t * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n\t * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n\t * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n\t * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n\t * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n\t * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n\t * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n\t * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\t * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n\t * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\t */\n\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(6)], __WEBPACK_AMD_DEFINE_RESULT__ = function (programs) {\n\t  \"use strict\";\n\n\t  /**\n\t   * vertex array object related functions\n\t   *\n\t   * You should generally not need to use these functions. They are provided\n\t   * for those cases where you're doing something out of the ordinary\n\t   * and you need lower level access.\n\t   *\n\t   * For backward compatibily they are available at both `twgl.attributes` and `twgl`\n\t   * itself\n\t   *\n\t   * See {@link module:twgl} for core functions\n\t   *\n\t   * @module twgl/vertexArrays\n\t   */\n\n\t  /**\n\t   * @typedef {Object} VertexArrayInfo\n\t   * @property {number} numElements The number of elements to pass to `gl.drawArrays` or `gl.drawElements`.\n\t   * @property {number} [elementType] The type of indices `UNSIGNED_BYTE`, `UNSIGNED_SHORT` etc..\n\t   * @property {WebGLVertexArrayObject} [vertexArrayObject] a vertex array object\n\t   * @memberOf module:twgl\n\t   */\n\n\t  /**\n\t   * Creates a VertexArrayInfo from a BufferInfo and one or more ProgramInfos\n\t   *\n\t   * This can be passed to {@link module:twgl.setBuffersAndAttributes} and to\n\t   * {@link module:twgl:drawBufferInfo}.\n\t   *\n\t   * > **IMPORTANT:** Vertex Array Objects are **not** a direct analog for a BufferInfo. Vertex Array Objects\n\t   *   assign buffers to specific attributes at creation time. That means they can only be used with programs\n\t   *   who's attributes use the same attribute locations for the same purposes.\n\t   *\n\t   * > Bind your attribute locations by passing an array of attribute names to {@link module:twgl.createProgramInfo}\n\t   *   or use WebGL 2's GLSL ES 3's `layout(location = <num>)` to make sure locations match.\n\t   *\n\t   * also\n\t   *\n\t   * > **IMPORTANT:** After calling twgl.setBuffersAndAttribute with a BufferInfo that uses a Vertex Array Object\n\t   *   that Vertex Array Object will be bound. That means **ANY MANIPULATION OF ELEMENT_ARRAY_BUFFER or ATTRIBUTES**\n\t   *   will affect the Vertex Array Object state.\n\t   *\n\t   * > Call `gl.bindVertexArray(null)` to get back manipulating the global attributes and ELEMENT_ARRAY_BUFFER.\n\t   *\n\t   * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n\t   * @param {module:twgl.ProgramInfo|module:twgl.ProgramInfo[]} programInfo a programInfo or array of programInfos\n\t   * @param {module:twgl.BufferInfo} bufferInfo BufferInfo as returned from createBufferInfoFromArrays etc...\n\t   *\n\t   *    You need to make sure every attribute that will be used is bound. So for example assume shader 1\n\t   *    uses attributes A, B, C and shader 2 uses attributes A, B, D. If you only pass in the programInfo\n\t   *    for shader 1 then only attributes A, B, and C will have their attributes set because TWGL doesn't\n\t   *    now attribute D's location.\n\t   *\n\t   *    So, you can pass in both shader 1 and shader 2's programInfo\n\t   *\n\t   * @return {module:twgl.VertexArrayInfo} The created VertexArrayInfo\n\t   *\n\t   * @memberOf module:twgl/vertexArrays\n\t   */\n\n\t  function createVertexArrayInfo(gl, programInfos, bufferInfo) {\n\t    var vao = gl.createVertexArray();\n\t    gl.bindVertexArray(vao);\n\t    if (!programInfos.length) {\n\t      programInfos = [programInfos];\n\t    }\n\t    programInfos.forEach(function (programInfo) {\n\t      programs.setBuffersAndAttributes(gl, programInfo, bufferInfo);\n\t    });\n\t    gl.bindVertexArray(null);\n\t    return {\n\t      numElements: bufferInfo.numElements,\n\t      elementType: bufferInfo.elementType,\n\t      vertexArrayObject: vao\n\t    };\n\t  }\n\n\t  /**\n\t   * Creates a vertex array object and then sets the attributes on it\n\t   *\n\t   * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n\t   * @param {Object.<string, function>} setters Attribute setters as returned from createAttributeSetters\n\t   * @param {Object.<string, module:twgl.AttribInfo>} attribs AttribInfos mapped by attribute name.\n\t   * @param {WebGLBuffer} [indices] an optional ELEMENT_ARRAY_BUFFER of indices\n\t   * @memberOf module:twgl/vertexArrays\n\t   */\n\t  function createVAOAndSetAttributes(gl, setters, attribs, indices) {\n\t    var vao = gl.createVertexArray();\n\t    gl.bindVertexArray(vao);\n\t    programs.setAttributes(setters, attribs);\n\t    if (indices) {\n\t      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indices);\n\t    }\n\t    // We unbind this because otherwise any change to ELEMENT_ARRAY_BUFFER\n\t    // like when creating buffers for other stuff will mess up this VAO's binding\n\t    gl.bindVertexArray(null);\n\t    return vao;\n\t  }\n\n\t  /**\n\t   * Creates a vertex array object and then sets the attributes\n\t   * on it\n\t   *\n\t   * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n\t   *        to use.\n\t   * @param {Object.<string, function>| module:twgl.ProgramInfo} programInfo as returned from createProgramInfo or Attribute setters as returned from createAttributeSetters\n\t   * @param {module:twgl.BufferInfo} bufferInfo BufferInfo as returned from createBufferInfoFromArrays etc...\n\t   * @param {WebGLBuffer} [indices] an optional ELEMENT_ARRAY_BUFFER of indices\n\t   * @memberOf module:twgl/vertexArrays\n\t   */\n\t  function createVAOFromBufferInfo(gl, programInfo, bufferInfo) {\n\t    return createVAOAndSetAttributes(gl, programInfo.attribSetters || programInfo, bufferInfo.attribs, bufferInfo.indices);\n\t  }\n\n\t  // Using quotes prevents Uglify from changing the names.\n\t  // No speed diff AFAICT.\n\t  return {\n\t    \"createVertexArrayInfo\": createVertexArrayInfo,\n\t    \"createVAOAndSetAttributes\": createVAOAndSetAttributes,\n\t    \"createVAOFromBufferInfo\": createVAOFromBufferInfo\n\t  };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\"use strict\";\n\n\t/*\n\t * Copyright 2015, Gregg Tavares.\n\t * All rights reserved.\n\t *\n\t * Redistribution and use in source and binary forms, with or without\n\t * modification, are permitted provided that the following conditions are\n\t * met:\n\t *\n\t *     * Redistributions of source code must retain the above copyright\n\t * notice, this list of conditions and the following disclaimer.\n\t *     * Redistributions in binary form must reproduce the above\n\t * copyright notice, this list of conditions and the following disclaimer\n\t * in the documentation and/or other materials provided with the\n\t * distribution.\n\t *     * Neither the name of Gregg Tavares. nor the names of his\n\t * contributors may be used to endorse or promote products derived from\n\t * this software without specific prior written permission.\n\t *\n\t * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\t * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n\t * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n\t * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n\t * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n\t * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n\t * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n\t * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n\t * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\t * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n\t * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\t */\n\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(11)], __WEBPACK_AMD_DEFINE_RESULT__ = function (v3) {\n\t  \"use strict\";\n\n\t  /**\n\t   * 4x4 Matrix math math functions.\n\t   *\n\t   * Almost all functions take an optional `dst` argument. If it is not passed in the\n\t   * functions will create a new matrix. In other words you can do this\n\t   *\n\t   *     var mat = m4.translation([1, 2, 3]);  // Creates a new translation matrix\n\t   *\n\t   * or\n\t   *\n\t   *     var mat = m4.create();\n\t   *     m4.translation([1, 2, 3], mat);  // Puts translation matrix in mat.\n\t   *\n\t   * The first style is often easier but depending on where it's used it generates garbage where\n\t   * as there is almost never allocation with the second style.\n\t   *\n\t   * It is always save to pass any matrix as the destination. So for example\n\t   *\n\t   *     var mat = m4.identity();\n\t   *     var trans = m4.translation([1, 2, 3]);\n\t   *     m4.multiply(mat, trans, mat);  // Multiplies mat * trans and puts result in mat.\n\t   *\n\t   * @module twgl/m4\n\t   */\n\n\t  var MatType = Float32Array;\n\n\t  var tempV3a = v3.create();\n\t  var tempV3b = v3.create();\n\t  var tempV3c = v3.create();\n\n\t  /**\n\t   * A JavaScript array with 16 values or a Float32Array with 16 values.\n\t   * When created by the library will create the default type which is `Float32Array`\n\t   * but can be set by calling {@link module:twgl/m4.setDefaultType}.\n\t   * @typedef {(number[]|Float32Array)} Mat4\n\t   * @memberOf module:twgl/m4\n\t   */\n\n\t  /**\n\t   * Sets the type this library creates for a Mat4\n\t   * @param {constructor} ctor the constructor for the type. Either `Float32Array` or `Array`\n\t   * @return {constructor} previous constructor for Mat4\n\t   */\n\t  function setDefaultType(ctor) {\n\t    var oldType = MatType;\n\t    MatType = ctor;\n\t    return oldType;\n\t  }\n\n\t  /**\n\t   * Negates a matrix.\n\t   * @param {module:twgl/m4.Mat4} m The matrix.\n\t   * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..\n\t   * @return {module:twgl/m4.Mat4} -m.\n\t   * @memberOf module:twgl/m4\n\t   */\n\t  function negate(m, dst) {\n\t    dst = dst || new MatType(16);\n\n\t    dst[0] = -m[0];\n\t    dst[1] = -m[1];\n\t    dst[2] = -m[2];\n\t    dst[3] = -m[3];\n\t    dst[4] = -m[4];\n\t    dst[5] = -m[5];\n\t    dst[6] = -m[6];\n\t    dst[7] = -m[7];\n\t    dst[8] = -m[8];\n\t    dst[9] = -m[9];\n\t    dst[10] = -m[10];\n\t    dst[11] = -m[11];\n\t    dst[12] = -m[12];\n\t    dst[13] = -m[13];\n\t    dst[14] = -m[14];\n\t    dst[15] = -m[15];\n\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Copies a matrix.\n\t   * @param {module:twgl/m4.Mat4} m The matrix.\n\t   * @param {module:twgl/m4.Mat4} [dst] The matrix.\n\t   * @return {module:twgl/m4.Mat4} A copy of m.\n\t   * @memberOf module:twgl/m4\n\t   */\n\t  function copy(m, dst) {\n\t    dst = dst || new MatType(16);\n\n\t    dst[0] = m[0];\n\t    dst[1] = m[1];\n\t    dst[2] = m[2];\n\t    dst[3] = m[3];\n\t    dst[4] = m[4];\n\t    dst[5] = m[5];\n\t    dst[6] = m[6];\n\t    dst[7] = m[7];\n\t    dst[8] = m[8];\n\t    dst[9] = m[9];\n\t    dst[10] = m[10];\n\t    dst[11] = m[11];\n\t    dst[12] = m[12];\n\t    dst[13] = m[13];\n\t    dst[14] = m[14];\n\t    dst[15] = m[15];\n\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Creates an n-by-n identity matrix.\n\t   *\n\t   * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..\n\t   * @return {module:twgl/m4.Mat4} An n-by-n identity matrix.\n\t   * @memberOf module:twgl/m4\n\t   */\n\t  function identity(dst) {\n\t    dst = dst || new MatType(16);\n\n\t    dst[0] = 1;\n\t    dst[1] = 0;\n\t    dst[2] = 0;\n\t    dst[3] = 0;\n\t    dst[4] = 0;\n\t    dst[5] = 1;\n\t    dst[6] = 0;\n\t    dst[7] = 0;\n\t    dst[8] = 0;\n\t    dst[9] = 0;\n\t    dst[10] = 1;\n\t    dst[11] = 0;\n\t    dst[12] = 0;\n\t    dst[13] = 0;\n\t    dst[14] = 0;\n\t    dst[15] = 1;\n\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Takes the transpose of a matrix.\n\t   * @param {module:twgl/m4.Mat4} m The matrix.\n\t   * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..\n\t   * @return {module:twgl/m4.Mat4} The transpose of m.\n\t   * @memberOf module:twgl/m4\n\t   */\n\t  function transpose(m, dst) {\n\t    dst = dst || new MatType(16);\n\t    if (dst === m) {\n\t      var t;\n\n\t      t = m[1];\n\t      m[1] = m[4];\n\t      m[4] = t;\n\n\t      t = m[2];\n\t      m[2] = m[8];\n\t      m[8] = t;\n\n\t      t = m[3];\n\t      m[3] = m[12];\n\t      m[12] = t;\n\n\t      t = m[6];\n\t      m[6] = m[9];\n\t      m[9] = t;\n\n\t      t = m[7];\n\t      m[7] = m[13];\n\t      m[13] = t;\n\n\t      t = m[11];\n\t      m[11] = m[14];\n\t      m[14] = t;\n\t      return dst;\n\t    }\n\n\t    var m00 = m[0 * 4 + 0];\n\t    var m01 = m[0 * 4 + 1];\n\t    var m02 = m[0 * 4 + 2];\n\t    var m03 = m[0 * 4 + 3];\n\t    var m10 = m[1 * 4 + 0];\n\t    var m11 = m[1 * 4 + 1];\n\t    var m12 = m[1 * 4 + 2];\n\t    var m13 = m[1 * 4 + 3];\n\t    var m20 = m[2 * 4 + 0];\n\t    var m21 = m[2 * 4 + 1];\n\t    var m22 = m[2 * 4 + 2];\n\t    var m23 = m[2 * 4 + 3];\n\t    var m30 = m[3 * 4 + 0];\n\t    var m31 = m[3 * 4 + 1];\n\t    var m32 = m[3 * 4 + 2];\n\t    var m33 = m[3 * 4 + 3];\n\n\t    dst[0] = m00;\n\t    dst[1] = m10;\n\t    dst[2] = m20;\n\t    dst[3] = m30;\n\t    dst[4] = m01;\n\t    dst[5] = m11;\n\t    dst[6] = m21;\n\t    dst[7] = m31;\n\t    dst[8] = m02;\n\t    dst[9] = m12;\n\t    dst[10] = m22;\n\t    dst[11] = m32;\n\t    dst[12] = m03;\n\t    dst[13] = m13;\n\t    dst[14] = m23;\n\t    dst[15] = m33;\n\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Computes the inverse of a 4-by-4 matrix.\n\t   * @param {module:twgl/m4.Mat4} m The matrix.\n\t   * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..\n\t   * @return {module:twgl/m4.Mat4} The inverse of m.\n\t   * @memberOf module:twgl/m4\n\t   */\n\t  function inverse(m, dst) {\n\t    dst = dst || new MatType(16);\n\n\t    var m00 = m[0 * 4 + 0];\n\t    var m01 = m[0 * 4 + 1];\n\t    var m02 = m[0 * 4 + 2];\n\t    var m03 = m[0 * 4 + 3];\n\t    var m10 = m[1 * 4 + 0];\n\t    var m11 = m[1 * 4 + 1];\n\t    var m12 = m[1 * 4 + 2];\n\t    var m13 = m[1 * 4 + 3];\n\t    var m20 = m[2 * 4 + 0];\n\t    var m21 = m[2 * 4 + 1];\n\t    var m22 = m[2 * 4 + 2];\n\t    var m23 = m[2 * 4 + 3];\n\t    var m30 = m[3 * 4 + 0];\n\t    var m31 = m[3 * 4 + 1];\n\t    var m32 = m[3 * 4 + 2];\n\t    var m33 = m[3 * 4 + 3];\n\t    var tmp_0 = m22 * m33;\n\t    var tmp_1 = m32 * m23;\n\t    var tmp_2 = m12 * m33;\n\t    var tmp_3 = m32 * m13;\n\t    var tmp_4 = m12 * m23;\n\t    var tmp_5 = m22 * m13;\n\t    var tmp_6 = m02 * m33;\n\t    var tmp_7 = m32 * m03;\n\t    var tmp_8 = m02 * m23;\n\t    var tmp_9 = m22 * m03;\n\t    var tmp_10 = m02 * m13;\n\t    var tmp_11 = m12 * m03;\n\t    var tmp_12 = m20 * m31;\n\t    var tmp_13 = m30 * m21;\n\t    var tmp_14 = m10 * m31;\n\t    var tmp_15 = m30 * m11;\n\t    var tmp_16 = m10 * m21;\n\t    var tmp_17 = m20 * m11;\n\t    var tmp_18 = m00 * m31;\n\t    var tmp_19 = m30 * m01;\n\t    var tmp_20 = m00 * m21;\n\t    var tmp_21 = m20 * m01;\n\t    var tmp_22 = m00 * m11;\n\t    var tmp_23 = m10 * m01;\n\n\t    var t0 = tmp_0 * m11 + tmp_3 * m21 + tmp_4 * m31 - (tmp_1 * m11 + tmp_2 * m21 + tmp_5 * m31);\n\t    var t1 = tmp_1 * m01 + tmp_6 * m21 + tmp_9 * m31 - (tmp_0 * m01 + tmp_7 * m21 + tmp_8 * m31);\n\t    var t2 = tmp_2 * m01 + tmp_7 * m11 + tmp_10 * m31 - (tmp_3 * m01 + tmp_6 * m11 + tmp_11 * m31);\n\t    var t3 = tmp_5 * m01 + tmp_8 * m11 + tmp_11 * m21 - (tmp_4 * m01 + tmp_9 * m11 + tmp_10 * m21);\n\n\t    var d = 1.0 / (m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3);\n\n\t    dst[0] = d * t0;\n\t    dst[1] = d * t1;\n\t    dst[2] = d * t2;\n\t    dst[3] = d * t3;\n\t    dst[4] = d * (tmp_1 * m10 + tmp_2 * m20 + tmp_5 * m30 - (tmp_0 * m10 + tmp_3 * m20 + tmp_4 * m30));\n\t    dst[5] = d * (tmp_0 * m00 + tmp_7 * m20 + tmp_8 * m30 - (tmp_1 * m00 + tmp_6 * m20 + tmp_9 * m30));\n\t    dst[6] = d * (tmp_3 * m00 + tmp_6 * m10 + tmp_11 * m30 - (tmp_2 * m00 + tmp_7 * m10 + tmp_10 * m30));\n\t    dst[7] = d * (tmp_4 * m00 + tmp_9 * m10 + tmp_10 * m20 - (tmp_5 * m00 + tmp_8 * m10 + tmp_11 * m20));\n\t    dst[8] = d * (tmp_12 * m13 + tmp_15 * m23 + tmp_16 * m33 - (tmp_13 * m13 + tmp_14 * m23 + tmp_17 * m33));\n\t    dst[9] = d * (tmp_13 * m03 + tmp_18 * m23 + tmp_21 * m33 - (tmp_12 * m03 + tmp_19 * m23 + tmp_20 * m33));\n\t    dst[10] = d * (tmp_14 * m03 + tmp_19 * m13 + tmp_22 * m33 - (tmp_15 * m03 + tmp_18 * m13 + tmp_23 * m33));\n\t    dst[11] = d * (tmp_17 * m03 + tmp_20 * m13 + tmp_23 * m23 - (tmp_16 * m03 + tmp_21 * m13 + tmp_22 * m23));\n\t    dst[12] = d * (tmp_14 * m22 + tmp_17 * m32 + tmp_13 * m12 - (tmp_16 * m32 + tmp_12 * m12 + tmp_15 * m22));\n\t    dst[13] = d * (tmp_20 * m32 + tmp_12 * m02 + tmp_19 * m22 - (tmp_18 * m22 + tmp_21 * m32 + tmp_13 * m02));\n\t    dst[14] = d * (tmp_18 * m12 + tmp_23 * m32 + tmp_15 * m02 - (tmp_22 * m32 + tmp_14 * m02 + tmp_19 * m12));\n\t    dst[15] = d * (tmp_22 * m22 + tmp_16 * m02 + tmp_21 * m12 - (tmp_20 * m12 + tmp_23 * m22 + tmp_17 * m02));\n\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Multiplies two 4-by-4 matrices with a on the left and b on the right\n\t   * @param {module:twgl/m4.Mat4} a The matrix on the left.\n\t   * @param {module:twgl/m4.Mat4} b The matrix on the right.\n\t   * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..\n\t   * @return {module:twgl/m4.Mat4} The matrix product of a and b.\n\t   * @memberOf module:twgl/m4\n\t   */\n\t  function multiply(a, b, dst) {\n\t    dst = dst || new MatType(16);\n\n\t    var a00 = a[0];\n\t    var a01 = a[1];\n\t    var a02 = a[2];\n\t    var a03 = a[3];\n\t    var a10 = a[4 + 0];\n\t    var a11 = a[4 + 1];\n\t    var a12 = a[4 + 2];\n\t    var a13 = a[4 + 3];\n\t    var a20 = a[8 + 0];\n\t    var a21 = a[8 + 1];\n\t    var a22 = a[8 + 2];\n\t    var a23 = a[8 + 3];\n\t    var a30 = a[12 + 0];\n\t    var a31 = a[12 + 1];\n\t    var a32 = a[12 + 2];\n\t    var a33 = a[12 + 3];\n\t    var b00 = b[0];\n\t    var b01 = b[1];\n\t    var b02 = b[2];\n\t    var b03 = b[3];\n\t    var b10 = b[4 + 0];\n\t    var b11 = b[4 + 1];\n\t    var b12 = b[4 + 2];\n\t    var b13 = b[4 + 3];\n\t    var b20 = b[8 + 0];\n\t    var b21 = b[8 + 1];\n\t    var b22 = b[8 + 2];\n\t    var b23 = b[8 + 3];\n\t    var b30 = b[12 + 0];\n\t    var b31 = b[12 + 1];\n\t    var b32 = b[12 + 2];\n\t    var b33 = b[12 + 3];\n\n\t    dst[0] = a00 * b00 + a10 * b01 + a20 * b02 + a30 * b03;\n\t    dst[1] = a01 * b00 + a11 * b01 + a21 * b02 + a31 * b03;\n\t    dst[2] = a02 * b00 + a12 * b01 + a22 * b02 + a32 * b03;\n\t    dst[3] = a03 * b00 + a13 * b01 + a23 * b02 + a33 * b03;\n\t    dst[4] = a00 * b10 + a10 * b11 + a20 * b12 + a30 * b13;\n\t    dst[5] = a01 * b10 + a11 * b11 + a21 * b12 + a31 * b13;\n\t    dst[6] = a02 * b10 + a12 * b11 + a22 * b12 + a32 * b13;\n\t    dst[7] = a03 * b10 + a13 * b11 + a23 * b12 + a33 * b13;\n\t    dst[8] = a00 * b20 + a10 * b21 + a20 * b22 + a30 * b23;\n\t    dst[9] = a01 * b20 + a11 * b21 + a21 * b22 + a31 * b23;\n\t    dst[10] = a02 * b20 + a12 * b21 + a22 * b22 + a32 * b23;\n\t    dst[11] = a03 * b20 + a13 * b21 + a23 * b22 + a33 * b23;\n\t    dst[12] = a00 * b30 + a10 * b31 + a20 * b32 + a30 * b33;\n\t    dst[13] = a01 * b30 + a11 * b31 + a21 * b32 + a31 * b33;\n\t    dst[14] = a02 * b30 + a12 * b31 + a22 * b32 + a32 * b33;\n\t    dst[15] = a03 * b30 + a13 * b31 + a23 * b32 + a33 * b33;\n\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Sets the translation component of a 4-by-4 matrix to the given\n\t   * vector.\n\t   * @param {module:twgl/m4.Mat4} a The matrix.\n\t   * @param {Vec3} v The vector.\n\t   * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..\n\t   * @return {module:twgl/m4.Mat4} a once modified.\n\t   * @memberOf module:twgl/m4\n\t   */\n\t  function setTranslation(a, v, dst) {\n\t    dst = dst || identity();\n\t    if (a !== dst) {\n\t      dst[0] = a[0];\n\t      dst[1] = a[1];\n\t      dst[2] = a[2];\n\t      dst[3] = a[3];\n\t      dst[4] = a[4];\n\t      dst[5] = a[5];\n\t      dst[6] = a[6];\n\t      dst[7] = a[7];\n\t      dst[8] = a[8];\n\t      dst[9] = a[9];\n\t      dst[10] = a[10];\n\t      dst[11] = a[11];\n\t    }\n\t    dst[12] = v[0];\n\t    dst[13] = v[1];\n\t    dst[14] = v[2];\n\t    dst[15] = 1;\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Returns the translation component of a 4-by-4 matrix as a vector with 3\n\t   * entries.\n\t   * @param {module:twgl/m4.Mat4} m The matrix.\n\t   * @param {Vec3} [dst] vector..\n\t   * @return {Vec3} The translation component of m.\n\t   * @memberOf module:twgl/m4\n\t   */\n\t  function getTranslation(m, dst) {\n\t    dst = dst || v3.create();\n\t    dst[0] = m[12];\n\t    dst[1] = m[13];\n\t    dst[2] = m[14];\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Returns an axis of a 4x4 matrix as a vector with 3 entries\n\t   * @param {module:twgl/m4.Mat4} m The matrix.\n\t   * @param {number} axis The axis 0 = x, 1 = y, 2 = z;\n\t   * @return {Vec3} [dst] vector.\n\t   * @return {Vec3} The axis component of m.\n\t   * @memberOf module:twgl/m4\n\t   */\n\t  function getAxis(m, axis, dst) {\n\t    dst = dst || v3.create();\n\t    var off = axis * 4;\n\t    dst[0] = m[off + 0];\n\t    dst[1] = m[off + 1];\n\t    dst[2] = m[off + 2];\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Sets an axis of a 4x4 matrix as a vector with 3 entries\n\t   * @param {Vec3} v the axis vector\n\t   * @param {number} axis The axis  0 = x, 1 = y, 2 = z;\n\t   * @param {module:twgl/m4.Mat4} [dst] The matrix to set. If none a new one is created\n\t   * @return {module:twgl/m4.Mat4} dst\n\t   * @memberOf module:twgl/m4\n\t   */\n\t  function setAxis(a, v, axis, dst) {\n\t    if (dst !== a) {\n\t      dst = copy(a, dst);\n\t    }\n\t    var off = axis * 4;\n\t    dst[off + 0] = v[0];\n\t    dst[off + 1] = v[1];\n\t    dst[off + 2] = v[2];\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Computes a 4-by-4 perspective transformation matrix given the angular height\n\t   * of the frustum, the aspect ratio, and the near and far clipping planes.  The\n\t   * arguments define a frustum extending in the negative z direction.  The given\n\t   * angle is the vertical angle of the frustum, and the horizontal angle is\n\t   * determined to produce the given aspect ratio.  The arguments near and far are\n\t   * the distances to the near and far clipping planes.  Note that near and far\n\t   * are not z coordinates, but rather they are distances along the negative\n\t   * z-axis.  The matrix generated sends the viewing frustum to the unit box.\n\t   * We assume a unit box extending from -1 to 1 in the x and y dimensions and\n\t   * from 0 to 1 in the z dimension.\n\t   * @param {number} fieldOfViewYInRadians The camera angle from top to bottom (in radians).\n\t   * @param {number} aspect The aspect ratio width / height.\n\t   * @param {number} zNear The depth (negative z coordinate)\n\t   *     of the near clipping plane.\n\t   * @param {number} zFar The depth (negative z coordinate)\n\t   *     of the far clipping plane.\n\t   * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..\n\t   * @return {module:twgl/m4.Mat4} The perspective matrix.\n\t   * @memberOf module:twgl/m4\n\t   */\n\t  function perspective(fieldOfViewYInRadians, aspect, zNear, zFar, dst) {\n\t    dst = dst || new MatType(16);\n\n\t    var f = Math.tan(Math.PI * 0.5 - 0.5 * fieldOfViewYInRadians);\n\t    var rangeInv = 1.0 / (zNear - zFar);\n\n\t    dst[0] = f / aspect;\n\t    dst[1] = 0;\n\t    dst[2] = 0;\n\t    dst[3] = 0;\n\n\t    dst[4] = 0;\n\t    dst[5] = f;\n\t    dst[6] = 0;\n\t    dst[7] = 0;\n\n\t    dst[8] = 0;\n\t    dst[9] = 0;\n\t    dst[10] = (zNear + zFar) * rangeInv;\n\t    dst[11] = -1;\n\n\t    dst[12] = 0;\n\t    dst[13] = 0;\n\t    dst[14] = zNear * zFar * rangeInv * 2;\n\t    dst[15] = 0;\n\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Computes a 4-by-4 othogonal transformation matrix given the left, right,\n\t   * bottom, and top dimensions of the near clipping plane as well as the\n\t   * near and far clipping plane distances.\n\t   * @param {number} left Left side of the near clipping plane viewport.\n\t   * @param {number} right Right side of the near clipping plane viewport.\n\t   * @param {number} top Top of the near clipping plane viewport.\n\t   * @param {number} bottom Bottom of the near clipping plane viewport.\n\t   * @param {number} near The depth (negative z coordinate)\n\t   *     of the near clipping plane.\n\t   * @param {number} far The depth (negative z coordinate)\n\t   *     of the far clipping plane.\n\t   * @param {module:twgl/m4.Mat4} [dst] Output matrix.\n\t   * @return {module:twgl/m4.Mat4} The perspective matrix.\n\t   * @memberOf module:twgl/m4\n\t   */\n\t  function ortho(left, right, bottom, top, near, far, dst) {\n\t    dst = dst || new MatType(16);\n\n\t    dst[0] = 2 / (right - left);\n\t    dst[1] = 0;\n\t    dst[2] = 0;\n\t    dst[3] = 0;\n\n\t    dst[4] = 0;\n\t    dst[5] = 2 / (top - bottom);\n\t    dst[6] = 0;\n\t    dst[7] = 0;\n\n\t    dst[8] = 0;\n\t    dst[9] = 0;\n\t    dst[10] = -1 / (far - near);\n\t    dst[11] = 0;\n\n\t    dst[12] = (right + left) / (left - right);\n\t    dst[13] = (top + bottom) / (bottom - top);\n\t    dst[14] = -near / (near - far);\n\t    dst[15] = 1;\n\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Computes a 4-by-4 perspective transformation matrix given the left, right,\n\t   * top, bottom, near and far clipping planes. The arguments define a frustum\n\t   * extending in the negative z direction. The arguments near and far are the\n\t   * distances to the near and far clipping planes. Note that near and far are not\n\t   * z coordinates, but rather they are distances along the negative z-axis. The\n\t   * matrix generated sends the viewing frustum to the unit box. We assume a unit\n\t   * box extending from -1 to 1 in the x and y dimensions and from 0 to 1 in the z\n\t   * dimension.\n\t   * @param {number} left The x coordinate of the left plane of the box.\n\t   * @param {number} right The x coordinate of the right plane of the box.\n\t   * @param {number} bottom The y coordinate of the bottom plane of the box.\n\t   * @param {number} top The y coordinate of the right plane of the box.\n\t   * @param {number} near The negative z coordinate of the near plane of the box.\n\t   * @param {number} far The negative z coordinate of the far plane of the box.\n\t   * @param {module:twgl/m4.Mat4} [dst] Output matrix.\n\t   * @return {module:twgl/m4.Mat4} The perspective projection matrix.\n\t   * @memberOf module:twgl/m4\n\t   */\n\t  function frustum(left, right, bottom, top, near, far, dst) {\n\t    dst = dst || new MatType(16);\n\n\t    var dx = right - left;\n\t    var dy = top - bottom;\n\t    var dz = near - far;\n\n\t    dst[0] = 2 * near / dx;\n\t    dst[1] = 0;\n\t    dst[2] = 0;\n\t    dst[3] = 0;\n\t    dst[4] = 0;\n\t    dst[5] = 2 * near / dy;\n\t    dst[6] = 0;\n\t    dst[7] = 0;\n\t    dst[8] = (left + right) / dx;\n\t    dst[9] = (top + bottom) / dy;\n\t    dst[10] = far / dz;\n\t    dst[11] = -1;\n\t    dst[12] = 0;\n\t    dst[13] = 0;\n\t    dst[14] = near * far / dz;\n\t    dst[15] = 0;\n\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Computes a 4-by-4 look-at transformation.\n\t   *\n\t   * This is a matrix which positions the camera itself. If you want\n\t   * a view matrix (a matrix which moves things in front of the camera)\n\t   * take the inverse of this.\n\t   *\n\t   * @param {Vec3} eye The position of the eye.\n\t   * @param {Vec3} target The position meant to be viewed.\n\t   * @param {Vec3} up A vector pointing up.\n\t   * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..\n\t   * @return {module:twgl/m4.Mat4} The look-at matrix.\n\t   * @memberOf module:twgl/m4\n\t   */\n\t  function lookAt(eye, target, up, dst) {\n\t    dst = dst || new MatType(16);\n\n\t    var xAxis = tempV3a;\n\t    var yAxis = tempV3b;\n\t    var zAxis = tempV3c;\n\n\t    v3.normalize(v3.subtract(eye, target, zAxis), zAxis);\n\t    v3.normalize(v3.cross(up, zAxis, xAxis), xAxis);\n\t    v3.normalize(v3.cross(zAxis, xAxis, yAxis), yAxis);\n\n\t    dst[0] = xAxis[0];\n\t    dst[1] = xAxis[1];\n\t    dst[2] = xAxis[2];\n\t    dst[3] = 0;\n\t    dst[4] = yAxis[0];\n\t    dst[5] = yAxis[1];\n\t    dst[6] = yAxis[2];\n\t    dst[7] = 0;\n\t    dst[8] = zAxis[0];\n\t    dst[9] = zAxis[1];\n\t    dst[10] = zAxis[2];\n\t    dst[11] = 0;\n\t    dst[12] = eye[0];\n\t    dst[13] = eye[1];\n\t    dst[14] = eye[2];\n\t    dst[15] = 1;\n\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Creates a 4-by-4 matrix which translates by the given vector v.\n\t   * @param {Vec3} v The vector by\n\t   *     which to translate.\n\t   * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..\n\t   * @return {module:twgl/m4.Mat4} The translation matrix.\n\t   * @memberOf module:twgl/m4\n\t   */\n\t  function translation(v, dst) {\n\t    dst = dst || new MatType(16);\n\n\t    dst[0] = 1;\n\t    dst[1] = 0;\n\t    dst[2] = 0;\n\t    dst[3] = 0;\n\t    dst[4] = 0;\n\t    dst[5] = 1;\n\t    dst[6] = 0;\n\t    dst[7] = 0;\n\t    dst[8] = 0;\n\t    dst[9] = 0;\n\t    dst[10] = 1;\n\t    dst[11] = 0;\n\t    dst[12] = v[0];\n\t    dst[13] = v[1];\n\t    dst[14] = v[2];\n\t    dst[15] = 1;\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Modifies the given 4-by-4 matrix by translation by the given vector v.\n\t   * @param {module:twgl/m4.Mat4} m The matrix.\n\t   * @param {Vec3} v The vector by\n\t   *     which to translate.\n\t   * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..\n\t   * @return {module:twgl/m4.Mat4} m once modified.\n\t   * @memberOf module:twgl/m4\n\t   */\n\t  function translate(m, v, dst) {\n\t    dst = dst || new MatType(16);\n\n\t    var v0 = v[0];\n\t    var v1 = v[1];\n\t    var v2 = v[2];\n\t    var m00 = m[0];\n\t    var m01 = m[1];\n\t    var m02 = m[2];\n\t    var m03 = m[3];\n\t    var m10 = m[1 * 4 + 0];\n\t    var m11 = m[1 * 4 + 1];\n\t    var m12 = m[1 * 4 + 2];\n\t    var m13 = m[1 * 4 + 3];\n\t    var m20 = m[2 * 4 + 0];\n\t    var m21 = m[2 * 4 + 1];\n\t    var m22 = m[2 * 4 + 2];\n\t    var m23 = m[2 * 4 + 3];\n\t    var m30 = m[3 * 4 + 0];\n\t    var m31 = m[3 * 4 + 1];\n\t    var m32 = m[3 * 4 + 2];\n\t    var m33 = m[3 * 4 + 3];\n\n\t    if (m !== dst) {\n\t      dst[0] = m00;\n\t      dst[1] = m01;\n\t      dst[2] = m02;\n\t      dst[3] = m03;\n\t      dst[4] = m10;\n\t      dst[5] = m11;\n\t      dst[6] = m12;\n\t      dst[7] = m13;\n\t      dst[8] = m20;\n\t      dst[9] = m21;\n\t      dst[10] = m22;\n\t      dst[11] = m23;\n\t    }\n\n\t    dst[12] = m00 * v0 + m10 * v1 + m20 * v2 + m30;\n\t    dst[13] = m01 * v0 + m11 * v1 + m21 * v2 + m31;\n\t    dst[14] = m02 * v0 + m12 * v1 + m22 * v2 + m32;\n\t    dst[15] = m03 * v0 + m13 * v1 + m23 * v2 + m33;\n\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Creates a 4-by-4 matrix which rotates around the x-axis by the given angle.\n\t   * @param {number} angleInRadians The angle by which to rotate (in radians).\n\t   * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..\n\t   * @return {module:twgl/m4.Mat4} The rotation matrix.\n\t   * @memberOf module:twgl/m4\n\t   */\n\t  function rotationX(angleInRadians, dst) {\n\t    dst = dst || new MatType(16);\n\n\t    var c = Math.cos(angleInRadians);\n\t    var s = Math.sin(angleInRadians);\n\n\t    dst[0] = 1;\n\t    dst[1] = 0;\n\t    dst[2] = 0;\n\t    dst[3] = 0;\n\t    dst[4] = 0;\n\t    dst[5] = c;\n\t    dst[6] = s;\n\t    dst[7] = 0;\n\t    dst[8] = 0;\n\t    dst[9] = -s;\n\t    dst[10] = c;\n\t    dst[11] = 0;\n\t    dst[12] = 0;\n\t    dst[13] = 0;\n\t    dst[14] = 0;\n\t    dst[15] = 1;\n\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Modifies the given 4-by-4 matrix by a rotation around the x-axis by the given\n\t   * angle.\n\t   * @param {module:twgl/m4.Mat4} m The matrix.\n\t   * @param {number} angleInRadians The angle by which to rotate (in radians).\n\t   * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..\n\t   * @return {module:twgl/m4.Mat4} m once modified.\n\t   * @memberOf module:twgl/m4\n\t   */\n\t  function rotateX(m, angleInRadians, dst) {\n\t    dst = dst || new MatType(16);\n\n\t    var m10 = m[4];\n\t    var m11 = m[5];\n\t    var m12 = m[6];\n\t    var m13 = m[7];\n\t    var m20 = m[8];\n\t    var m21 = m[9];\n\t    var m22 = m[10];\n\t    var m23 = m[11];\n\t    var c = Math.cos(angleInRadians);\n\t    var s = Math.sin(angleInRadians);\n\n\t    dst[4] = c * m10 + s * m20;\n\t    dst[5] = c * m11 + s * m21;\n\t    dst[6] = c * m12 + s * m22;\n\t    dst[7] = c * m13 + s * m23;\n\t    dst[8] = c * m20 - s * m10;\n\t    dst[9] = c * m21 - s * m11;\n\t    dst[10] = c * m22 - s * m12;\n\t    dst[11] = c * m23 - s * m13;\n\n\t    if (m !== dst) {\n\t      dst[0] = m[0];\n\t      dst[1] = m[1];\n\t      dst[2] = m[2];\n\t      dst[3] = m[3];\n\t      dst[12] = m[12];\n\t      dst[13] = m[13];\n\t      dst[14] = m[14];\n\t      dst[15] = m[15];\n\t    }\n\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Creates a 4-by-4 matrix which rotates around the y-axis by the given angle.\n\t   * @param {number} angleInRadians The angle by which to rotate (in radians).\n\t   * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..\n\t   * @return {module:twgl/m4.Mat4} The rotation matrix.\n\t   * @memberOf module:twgl/m4\n\t   */\n\t  function rotationY(angleInRadians, dst) {\n\t    dst = dst || new MatType(16);\n\n\t    var c = Math.cos(angleInRadians);\n\t    var s = Math.sin(angleInRadians);\n\n\t    dst[0] = c;\n\t    dst[1] = 0;\n\t    dst[2] = -s;\n\t    dst[3] = 0;\n\t    dst[4] = 0;\n\t    dst[5] = 1;\n\t    dst[6] = 0;\n\t    dst[7] = 0;\n\t    dst[8] = s;\n\t    dst[9] = 0;\n\t    dst[10] = c;\n\t    dst[11] = 0;\n\t    dst[12] = 0;\n\t    dst[13] = 0;\n\t    dst[14] = 0;\n\t    dst[15] = 1;\n\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Modifies the given 4-by-4 matrix by a rotation around the y-axis by the given\n\t   * angle.\n\t   * @param {module:twgl/m4.Mat4} m The matrix.\n\t   * @param {number} angleInRadians The angle by which to rotate (in radians).\n\t   * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..\n\t   * @return {module:twgl/m4.Mat4} m once modified.\n\t   * @memberOf module:twgl/m4\n\t   */\n\t  function rotateY(m, angleInRadians, dst) {\n\t    dst = dst || new MatType(16);\n\n\t    var m00 = m[0 * 4 + 0];\n\t    var m01 = m[0 * 4 + 1];\n\t    var m02 = m[0 * 4 + 2];\n\t    var m03 = m[0 * 4 + 3];\n\t    var m20 = m[2 * 4 + 0];\n\t    var m21 = m[2 * 4 + 1];\n\t    var m22 = m[2 * 4 + 2];\n\t    var m23 = m[2 * 4 + 3];\n\t    var c = Math.cos(angleInRadians);\n\t    var s = Math.sin(angleInRadians);\n\n\t    dst[0] = c * m00 - s * m20;\n\t    dst[1] = c * m01 - s * m21;\n\t    dst[2] = c * m02 - s * m22;\n\t    dst[3] = c * m03 - s * m23;\n\t    dst[8] = c * m20 + s * m00;\n\t    dst[9] = c * m21 + s * m01;\n\t    dst[10] = c * m22 + s * m02;\n\t    dst[11] = c * m23 + s * m03;\n\n\t    if (m !== dst) {\n\t      dst[4] = m[4];\n\t      dst[5] = m[5];\n\t      dst[6] = m[6];\n\t      dst[7] = m[7];\n\t      dst[12] = m[12];\n\t      dst[13] = m[13];\n\t      dst[14] = m[14];\n\t      dst[15] = m[15];\n\t    }\n\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Creates a 4-by-4 matrix which rotates around the z-axis by the given angle.\n\t   * @param {number} angleInRadians The angle by which to rotate (in radians).\n\t   * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..\n\t   * @return {module:twgl/m4.Mat4} The rotation matrix.\n\t   * @memberOf module:twgl/m4\n\t   */\n\t  function rotationZ(angleInRadians, dst) {\n\t    dst = dst || new MatType(16);\n\n\t    var c = Math.cos(angleInRadians);\n\t    var s = Math.sin(angleInRadians);\n\n\t    dst[0] = c;\n\t    dst[1] = s;\n\t    dst[2] = 0;\n\t    dst[3] = 0;\n\t    dst[4] = -s;\n\t    dst[5] = c;\n\t    dst[6] = 0;\n\t    dst[7] = 0;\n\t    dst[8] = 0;\n\t    dst[9] = 0;\n\t    dst[10] = 1;\n\t    dst[11] = 0;\n\t    dst[12] = 0;\n\t    dst[13] = 0;\n\t    dst[14] = 0;\n\t    dst[15] = 1;\n\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Modifies the given 4-by-4 matrix by a rotation around the z-axis by the given\n\t   * angle.\n\t   * @param {module:twgl/m4.Mat4} m The matrix.\n\t   * @param {number} angleInRadians The angle by which to rotate (in radians).\n\t   * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..\n\t   * @return {module:twgl/m4.Mat4} m once modified.\n\t   * @memberOf module:twgl/m4\n\t   */\n\t  function rotateZ(m, angleInRadians, dst) {\n\t    dst = dst || new MatType(16);\n\n\t    var m00 = m[0 * 4 + 0];\n\t    var m01 = m[0 * 4 + 1];\n\t    var m02 = m[0 * 4 + 2];\n\t    var m03 = m[0 * 4 + 3];\n\t    var m10 = m[1 * 4 + 0];\n\t    var m11 = m[1 * 4 + 1];\n\t    var m12 = m[1 * 4 + 2];\n\t    var m13 = m[1 * 4 + 3];\n\t    var c = Math.cos(angleInRadians);\n\t    var s = Math.sin(angleInRadians);\n\n\t    dst[0] = c * m00 + s * m10;\n\t    dst[1] = c * m01 + s * m11;\n\t    dst[2] = c * m02 + s * m12;\n\t    dst[3] = c * m03 + s * m13;\n\t    dst[4] = c * m10 - s * m00;\n\t    dst[5] = c * m11 - s * m01;\n\t    dst[6] = c * m12 - s * m02;\n\t    dst[7] = c * m13 - s * m03;\n\n\t    if (m !== dst) {\n\t      dst[8] = m[8];\n\t      dst[9] = m[9];\n\t      dst[10] = m[10];\n\t      dst[11] = m[11];\n\t      dst[12] = m[12];\n\t      dst[13] = m[13];\n\t      dst[14] = m[14];\n\t      dst[15] = m[15];\n\t    }\n\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Creates a 4-by-4 matrix which rotates around the given axis by the given\n\t   * angle.\n\t   * @param {Vec3} axis The axis\n\t   *     about which to rotate.\n\t   * @param {number} angleInRadians The angle by which to rotate (in radians).\n\t   * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..\n\t   * @return {module:twgl/m4.Mat4} A matrix which rotates angle radians\n\t   *     around the axis.\n\t   * @memberOf module:twgl/m4\n\t   */\n\t  function axisRotation(axis, angleInRadians, dst) {\n\t    dst = dst || new MatType(16);\n\n\t    var x = axis[0];\n\t    var y = axis[1];\n\t    var z = axis[2];\n\t    var n = Math.sqrt(x * x + y * y + z * z);\n\t    x /= n;\n\t    y /= n;\n\t    z /= n;\n\t    var xx = x * x;\n\t    var yy = y * y;\n\t    var zz = z * z;\n\t    var c = Math.cos(angleInRadians);\n\t    var s = Math.sin(angleInRadians);\n\t    var oneMinusCosine = 1 - c;\n\n\t    dst[0] = xx + (1 - xx) * c;\n\t    dst[1] = x * y * oneMinusCosine + z * s;\n\t    dst[2] = x * z * oneMinusCosine - y * s;\n\t    dst[3] = 0;\n\t    dst[4] = x * y * oneMinusCosine - z * s;\n\t    dst[5] = yy + (1 - yy) * c;\n\t    dst[6] = y * z * oneMinusCosine + x * s;\n\t    dst[7] = 0;\n\t    dst[8] = x * z * oneMinusCosine + y * s;\n\t    dst[9] = y * z * oneMinusCosine - x * s;\n\t    dst[10] = zz + (1 - zz) * c;\n\t    dst[11] = 0;\n\t    dst[12] = 0;\n\t    dst[13] = 0;\n\t    dst[14] = 0;\n\t    dst[15] = 1;\n\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Modifies the given 4-by-4 matrix by rotation around the given axis by the\n\t   * given angle.\n\t   * @param {module:twgl/m4.Mat4} m The matrix.\n\t   * @param {Vec3} axis The axis\n\t   *     about which to rotate.\n\t   * @param {number} angleInRadians The angle by which to rotate (in radians).\n\t   * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..\n\t   * @return {module:twgl/m4.Mat4} m once modified.\n\t   * @memberOf module:twgl/m4\n\t   */\n\t  function axisRotate(m, axis, angleInRadians, dst) {\n\t    dst = dst || new MatType(16);\n\n\t    var x = axis[0];\n\t    var y = axis[1];\n\t    var z = axis[2];\n\t    var n = Math.sqrt(x * x + y * y + z * z);\n\t    x /= n;\n\t    y /= n;\n\t    z /= n;\n\t    var xx = x * x;\n\t    var yy = y * y;\n\t    var zz = z * z;\n\t    var c = Math.cos(angleInRadians);\n\t    var s = Math.sin(angleInRadians);\n\t    var oneMinusCosine = 1 - c;\n\n\t    var r00 = xx + (1 - xx) * c;\n\t    var r01 = x * y * oneMinusCosine + z * s;\n\t    var r02 = x * z * oneMinusCosine - y * s;\n\t    var r10 = x * y * oneMinusCosine - z * s;\n\t    var r11 = yy + (1 - yy) * c;\n\t    var r12 = y * z * oneMinusCosine + x * s;\n\t    var r20 = x * z * oneMinusCosine + y * s;\n\t    var r21 = y * z * oneMinusCosine - x * s;\n\t    var r22 = zz + (1 - zz) * c;\n\n\t    var m00 = m[0];\n\t    var m01 = m[1];\n\t    var m02 = m[2];\n\t    var m03 = m[3];\n\t    var m10 = m[4];\n\t    var m11 = m[5];\n\t    var m12 = m[6];\n\t    var m13 = m[7];\n\t    var m20 = m[8];\n\t    var m21 = m[9];\n\t    var m22 = m[10];\n\t    var m23 = m[11];\n\n\t    dst[0] = r00 * m00 + r01 * m10 + r02 * m20;\n\t    dst[1] = r00 * m01 + r01 * m11 + r02 * m21;\n\t    dst[2] = r00 * m02 + r01 * m12 + r02 * m22;\n\t    dst[3] = r00 * m03 + r01 * m13 + r02 * m23;\n\t    dst[4] = r10 * m00 + r11 * m10 + r12 * m20;\n\t    dst[5] = r10 * m01 + r11 * m11 + r12 * m21;\n\t    dst[6] = r10 * m02 + r11 * m12 + r12 * m22;\n\t    dst[7] = r10 * m03 + r11 * m13 + r12 * m23;\n\t    dst[8] = r20 * m00 + r21 * m10 + r22 * m20;\n\t    dst[9] = r20 * m01 + r21 * m11 + r22 * m21;\n\t    dst[10] = r20 * m02 + r21 * m12 + r22 * m22;\n\t    dst[11] = r20 * m03 + r21 * m13 + r22 * m23;\n\n\t    if (m !== dst) {\n\t      dst[12] = m[12];\n\t      dst[13] = m[13];\n\t      dst[14] = m[14];\n\t      dst[15] = m[15];\n\t    }\n\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Creates a 4-by-4 matrix which scales in each dimension by an amount given by\n\t   * the corresponding entry in the given vector; assumes the vector has three\n\t   * entries.\n\t   * @param {Vec3} v A vector of\n\t   *     three entries specifying the factor by which to scale in each dimension.\n\t   * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..\n\t   * @return {module:twgl/m4.Mat4} The scaling matrix.\n\t   * @memberOf module:twgl/m4\n\t   */\n\t  function scaling(v, dst) {\n\t    dst = dst || new MatType(16);\n\n\t    dst[0] = v[0];\n\t    dst[1] = 0;\n\t    dst[2] = 0;\n\t    dst[3] = 0;\n\t    dst[4] = 0;\n\t    dst[5] = v[1];\n\t    dst[6] = 0;\n\t    dst[7] = 0;\n\t    dst[8] = 0;\n\t    dst[9] = 0;\n\t    dst[10] = v[2];\n\t    dst[11] = 0;\n\t    dst[12] = 0;\n\t    dst[13] = 0;\n\t    dst[14] = 0;\n\t    dst[15] = 1;\n\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Modifies the given 4-by-4 matrix, scaling in each dimension by an amount\n\t   * given by the corresponding entry in the given vector; assumes the vector has\n\t   * three entries.\n\t   * @param {module:twgl/m4.Mat4} m The matrix to be modified.\n\t   * @param {Vec3} v A vector of three entries specifying the\n\t   *     factor by which to scale in each dimension.\n\t   * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..\n\t   * @return {module:twgl/m4.Mat4} m once modified.\n\t   * @memberOf module:twgl/m4\n\t   */\n\t  function scale(m, v, dst) {\n\t    dst = dst || new MatType(16);\n\n\t    var v0 = v[0];\n\t    var v1 = v[1];\n\t    var v2 = v[2];\n\n\t    dst[0] = v0 * m[0 * 4 + 0];\n\t    dst[1] = v0 * m[0 * 4 + 1];\n\t    dst[2] = v0 * m[0 * 4 + 2];\n\t    dst[3] = v0 * m[0 * 4 + 3];\n\t    dst[4] = v1 * m[1 * 4 + 0];\n\t    dst[5] = v1 * m[1 * 4 + 1];\n\t    dst[6] = v1 * m[1 * 4 + 2];\n\t    dst[7] = v1 * m[1 * 4 + 3];\n\t    dst[8] = v2 * m[2 * 4 + 0];\n\t    dst[9] = v2 * m[2 * 4 + 1];\n\t    dst[10] = v2 * m[2 * 4 + 2];\n\t    dst[11] = v2 * m[2 * 4 + 3];\n\n\t    if (m !== dst) {\n\t      dst[12] = m[12];\n\t      dst[13] = m[13];\n\t      dst[14] = m[14];\n\t      dst[15] = m[15];\n\t    }\n\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Takes a 4-by-4 matrix and a vector with 3 entries,\n\t   * interprets the vector as a point, transforms that point by the matrix, and\n\t   * returns the result as a vector with 3 entries.\n\t   * @param {module:twgl/m4.Mat4} m The matrix.\n\t   * @param {Vec3} v The point.\n\t   * @param {Vec3} dst optional vec3 to store result\n\t   * @return {Vec3} dst or new vec3 if not provided\n\t   * @memberOf module:twgl/m4\n\t   */\n\t  function transformPoint(m, v, dst) {\n\t    dst = dst || v3.create();\n\t    var v0 = v[0];\n\t    var v1 = v[1];\n\t    var v2 = v[2];\n\t    var d = v0 * m[0 * 4 + 3] + v1 * m[1 * 4 + 3] + v2 * m[2 * 4 + 3] + m[3 * 4 + 3];\n\n\t    dst[0] = (v0 * m[0 * 4 + 0] + v1 * m[1 * 4 + 0] + v2 * m[2 * 4 + 0] + m[3 * 4 + 0]) / d;\n\t    dst[1] = (v0 * m[0 * 4 + 1] + v1 * m[1 * 4 + 1] + v2 * m[2 * 4 + 1] + m[3 * 4 + 1]) / d;\n\t    dst[2] = (v0 * m[0 * 4 + 2] + v1 * m[1 * 4 + 2] + v2 * m[2 * 4 + 2] + m[3 * 4 + 2]) / d;\n\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Takes a 4-by-4 matrix and a vector with 3 entries, interprets the vector as a\n\t   * direction, transforms that direction by the matrix, and returns the result;\n\t   * assumes the transformation of 3-dimensional space represented by the matrix\n\t   * is parallel-preserving, i.e. any combination of rotation, scaling and\n\t   * translation, but not a perspective distortion. Returns a vector with 3\n\t   * entries.\n\t   * @param {module:twgl/m4.Mat4} m The matrix.\n\t   * @param {Vec3} v The direction.\n\t   * @param {Vec3} dst optional Vec3 to store result\n\t   * @return {Vec3} dst or new Vec3 if not provided\n\t   * @memberOf module:twgl/m4\n\t   */\n\t  function transformDirection(m, v, dst) {\n\t    dst = dst || v3.create();\n\n\t    var v0 = v[0];\n\t    var v1 = v[1];\n\t    var v2 = v[2];\n\n\t    dst[0] = v0 * m[0 * 4 + 0] + v1 * m[1 * 4 + 0] + v2 * m[2 * 4 + 0];\n\t    dst[1] = v0 * m[0 * 4 + 1] + v1 * m[1 * 4 + 1] + v2 * m[2 * 4 + 1];\n\t    dst[2] = v0 * m[0 * 4 + 2] + v1 * m[1 * 4 + 2] + v2 * m[2 * 4 + 2];\n\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Takes a 4-by-4 matrix m and a vector v with 3 entries, interprets the vector\n\t   * as a normal to a surface, and computes a vector which is normal upon\n\t   * transforming that surface by the matrix. The effect of this function is the\n\t   * same as transforming v (as a direction) by the inverse-transpose of m.  This\n\t   * function assumes the transformation of 3-dimensional space represented by the\n\t   * matrix is parallel-preserving, i.e. any combination of rotation, scaling and\n\t   * translation, but not a perspective distortion.  Returns a vector with 3\n\t   * entries.\n\t   * @param {module:twgl/m4.Mat4} m The matrix.\n\t   * @param {Vec3} v The normal.\n\t   * @param {Vec3} [dst] The direction.\n\t   * @return {Vec3} The transformed direction.\n\t   * @memberOf module:twgl/m4\n\t   */\n\t  function transformNormal(m, v, dst) {\n\t    dst = dst || v3.create();\n\t    var mi = inverse(m);\n\t    var v0 = v[0];\n\t    var v1 = v[1];\n\t    var v2 = v[2];\n\n\t    dst[0] = v0 * mi[0 * 4 + 0] + v1 * mi[0 * 4 + 1] + v2 * mi[0 * 4 + 2];\n\t    dst[1] = v0 * mi[1 * 4 + 0] + v1 * mi[1 * 4 + 1] + v2 * mi[1 * 4 + 2];\n\t    dst[2] = v0 * mi[2 * 4 + 0] + v1 * mi[2 * 4 + 1] + v2 * mi[2 * 4 + 2];\n\n\t    return dst;\n\t  }\n\n\t  // Using quotes prevents Uglify from changing the names.\n\t  // No speed diff AFAICT.\n\t  return {\n\t    \"axisRotate\": axisRotate,\n\t    \"axisRotation\": axisRotation,\n\t    \"create\": identity,\n\t    \"copy\": copy,\n\t    \"frustum\": frustum,\n\t    \"getAxis\": getAxis,\n\t    \"getTranslation\": getTranslation,\n\t    \"identity\": identity,\n\t    \"inverse\": inverse,\n\t    \"lookAt\": lookAt,\n\t    \"multiply\": multiply,\n\t    \"negate\": negate,\n\t    \"ortho\": ortho,\n\t    \"perspective\": perspective,\n\t    \"rotateX\": rotateX,\n\t    \"rotateY\": rotateY,\n\t    \"rotateZ\": rotateZ,\n\t    \"rotateAxis\": axisRotate,\n\t    \"rotationX\": rotationX,\n\t    \"rotationY\": rotationY,\n\t    \"rotationZ\": rotationZ,\n\t    \"scale\": scale,\n\t    \"scaling\": scaling,\n\t    \"setAxis\": setAxis,\n\t    \"setDefaultType\": setDefaultType,\n\t    \"setTranslation\": setTranslation,\n\t    \"transformDirection\": transformDirection,\n\t    \"transformNormal\": transformNormal,\n\t    \"transformPoint\": transformPoint,\n\t    \"translate\": translate,\n\t    \"translation\": translation,\n\t    \"transpose\": transpose\n\t  };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\"use strict\";\n\n\t/*\n\t * Copyright 2015, Gregg Tavares.\n\t * All rights reserved.\n\t *\n\t * Redistribution and use in source and binary forms, with or without\n\t * modification, are permitted provided that the following conditions are\n\t * met:\n\t *\n\t *     * Redistributions of source code must retain the above copyright\n\t * notice, this list of conditions and the following disclaimer.\n\t *     * Redistributions in binary form must reproduce the above\n\t * copyright notice, this list of conditions and the following disclaimer\n\t * in the documentation and/or other materials provided with the\n\t * distribution.\n\t *     * Neither the name of Gregg Tavares. nor the names of his\n\t * contributors may be used to endorse or promote products derived from\n\t * this software without specific prior written permission.\n\t *\n\t * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\t * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n\t * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n\t * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n\t * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n\t * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n\t * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n\t * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n\t * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\t * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n\t * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\t */\n\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n\t  \"use strict\";\n\n\t  /**\n\t   *\n\t   * Vec3 math math functions.\n\t   *\n\t   * Almost all functions take an optional `dst` argument. If it is not passed in the\n\t   * functions will create a new Vec3. In other words you can do this\n\t   *\n\t   *     var v = v3.cross(v1, v2);  // Creates a new Vec3 with the cross product of v1 x v2.\n\t   *\n\t   * or\n\t   *\n\t   *     var v3 = v3.create();\n\t   *     v3.cross(v1, v2, v);  // Puts the cross product of v1 x v2 in v\n\t   *\n\t   * The first style is often easier but depending on where it's used it generates garbage where\n\t   * as there is almost never allocation with the second style.\n\t   *\n\t   * It is always save to pass any vector as the destination. So for example\n\t   *\n\t   *     v3.cross(v1, v2, v1);  // Puts the cross product of v1 x v2 in v1\n\t   *\n\t   * @module twgl/v3\n\t   */\n\n\t  var VecType = Float32Array;\n\n\t  /**\n\t   * A JavaScript array with 3 values or a Float32Array with 3 values.\n\t   * When created by the library will create the default type which is `Float32Array`\n\t   * but can be set by calling {@link module:twgl/v3.setDefaultType}.\n\t   * @typedef {(number[]|Float32Array)} Vec3\n\t   * @memberOf module:twgl/v3\n\t   */\n\n\t  /**\n\t   * Sets the type this library creates for a Vec3\n\t   * @param {constructor} ctor the constructor for the type. Either `Float32Array` or `Array`\n\t   * @return {constructor} previous constructor for Vec3\n\t   */\n\t  function setDefaultType(ctor) {\n\t    var oldType = VecType;\n\t    VecType = ctor;\n\t    return oldType;\n\t  }\n\n\t  /**\n\t   * Creates a vec3; may be called with x, y, z to set initial values.\n\t   * @return {Vec3} the created vector\n\t   * @memberOf module:twgl/v3\n\t   */\n\t  function create(x, y, z) {\n\t    var dst = new VecType(3);\n\t    if (x) {\n\t      dst[0] = x;\n\t    }\n\t    if (y) {\n\t      dst[1] = y;\n\t    }\n\t    if (z) {\n\t      dst[2] = z;\n\t    }\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Adds two vectors; assumes a and b have the same dimension.\n\t   * @param {module:twgl/v3.Vec3} a Operand vector.\n\t   * @param {module:twgl/v3.Vec3} b Operand vector.\n\t   * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created..\n\t   * @memberOf module:twgl/v3\n\t   */\n\t  function add(a, b, dst) {\n\t    dst = dst || new VecType(3);\n\n\t    dst[0] = a[0] + b[0];\n\t    dst[1] = a[1] + b[1];\n\t    dst[2] = a[2] + b[2];\n\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Subtracts two vectors.\n\t   * @param {module:twgl/v3.Vec3} a Operand vector.\n\t   * @param {module:twgl/v3.Vec3} b Operand vector.\n\t   * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created..\n\t   * @memberOf module:twgl/v3\n\t   */\n\t  function subtract(a, b, dst) {\n\t    dst = dst || new VecType(3);\n\n\t    dst[0] = a[0] - b[0];\n\t    dst[1] = a[1] - b[1];\n\t    dst[2] = a[2] - b[2];\n\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Performs linear interpolation on two vectors.\n\t   * Given vectors a and b and interpolation coefficient t, returns\n\t   * (1 - t) * a + t * b.\n\t   * @param {module:twgl/v3.Vec3} a Operand vector.\n\t   * @param {module:twgl/v3.Vec3} b Operand vector.\n\t   * @param {number} t Interpolation coefficient.\n\t   * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created..\n\t   * @memberOf module:twgl/v3\n\t   */\n\t  function lerp(a, b, t, dst) {\n\t    dst = dst || new VecType(3);\n\n\t    dst[0] = (1 - t) * a[0] + t * b[0];\n\t    dst[1] = (1 - t) * a[1] + t * b[1];\n\t    dst[2] = (1 - t) * a[2] + t * b[2];\n\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Mutiplies a vector by a scalar.\n\t   * @param {module:twgl/v3.Vec3} v The vector.\n\t   * @param {number} k The scalar.\n\t   * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created..\n\t   * @return {module:twgl/v3.Vec3} dst.\n\t   * @memberOf module:twgl/v3\n\t   */\n\t  function mulScalar(v, k, dst) {\n\t    dst = dst || new VecType(3);\n\n\t    dst[0] = v[0] * k;\n\t    dst[1] = v[1] * k;\n\t    dst[2] = v[2] * k;\n\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Divides a vector by a scalar.\n\t   * @param {module:twgl/v3.Vec3} v The vector.\n\t   * @param {number} k The scalar.\n\t   * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created..\n\t   * @return {module:twgl/v3.Vec3} dst.\n\t   * @memberOf module:twgl/v3\n\t   */\n\t  function divScalar(v, k, dst) {\n\t    dst = dst || new VecType(3);\n\n\t    dst[0] = v[0] / k;\n\t    dst[1] = v[1] / k;\n\t    dst[2] = v[2] / k;\n\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Computes the cross product of two vectors; assumes both vectors have\n\t   * three entries.\n\t   * @param {module:twgl/v3.Vec3} a Operand vector.\n\t   * @param {module:twgl/v3.Vec3} b Operand vector.\n\t   * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created..\n\t   * @return {module:twgl/v3.Vec3} The vector a cross b.\n\t   * @memberOf module:twgl/v3\n\t   */\n\t  function cross(a, b, dst) {\n\t    dst = dst || new VecType(3);\n\n\t    var t1 = a[2] * b[0] - a[0] * b[2];\n\t    var t2 = a[0] * b[1] - a[1] * b[0];\n\t    dst[0] = a[1] * b[2] - a[2] * b[1];\n\t    dst[1] = t1;\n\t    dst[2] = t2;\n\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Computes the dot product of two vectors; assumes both vectors have\n\t   * three entries.\n\t   * @param {module:twgl/v3.Vec3} a Operand vector.\n\t   * @param {module:twgl/v3.Vec3} b Operand vector.\n\t   * @return {number} dot product\n\t   * @memberOf module:twgl/v3\n\t   */\n\t  function dot(a, b) {\n\t    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n\t  }\n\n\t  /**\n\t   * Computes the length of vector\n\t   * @param {module:twgl/v3.Vec3} v vector.\n\t   * @return {number} length of vector.\n\t   * @memberOf module:twgl/v3\n\t   */\n\t  function length(v) {\n\t    return Math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);\n\t  }\n\n\t  /**\n\t   * Computes the square of the length of vector\n\t   * @param {module:twgl/v3.Vec3} v vector.\n\t   * @return {number} square of the length of vector.\n\t   * @memberOf module:twgl/v3\n\t   */\n\t  function lengthSq(v) {\n\t    return v[0] * v[0] + v[1] * v[1] + v[2] * v[2];\n\t  }\n\n\t  /**\n\t   * Computes the distance between 2 points\n\t   * @param {module:twgl/v3.Vec3} a vector.\n\t   * @param {module:twgl/v3.Vec3} b vector.\n\t   * @return {number} distance between a and b\n\t   * @memberOf module:twgl/v3\n\t   */\n\t  function distance(a, b) {\n\t    var dx = a[0] - b[0];\n\t    var dy = a[1] - b[1];\n\t    var dz = a[2] - b[2];\n\t    return Math.sqrt(dx * dx + dy * dy + dz * dz);\n\t  }\n\n\t  /**\n\t   * Computes the square of the distance between 2 points\n\t   * @param {module:twgl/v3.Vec3} a vector.\n\t   * @param {module:twgl/v3.Vec3} b vector.\n\t   * @return {number} square of the distance between a and b\n\t   * @memberOf module:twgl/v3\n\t   */\n\t  function distanceSq(a, b) {\n\t    var dx = a[0] - b[0];\n\t    var dy = a[1] - b[1];\n\t    var dz = a[2] - b[2];\n\t    return dx * dx + dy * dy + dz * dz;\n\t  }\n\n\t  /**\n\t   * Divides a vector by its Euclidean length and returns the quotient.\n\t   * @param {module:twgl/v3.Vec3} a The vector.\n\t   * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created..\n\t   * @return {module:twgl/v3.Vec3} The normalized vector.\n\t   * @memberOf module:twgl/v3\n\t   */\n\t  function normalize(a, dst) {\n\t    dst = dst || new VecType(3);\n\n\t    var lenSq = a[0] * a[0] + a[1] * a[1] + a[2] * a[2];\n\t    var len = Math.sqrt(lenSq);\n\t    if (len > 0.00001) {\n\t      dst[0] = a[0] / len;\n\t      dst[1] = a[1] / len;\n\t      dst[2] = a[2] / len;\n\t    } else {\n\t      dst[0] = 0;\n\t      dst[1] = 0;\n\t      dst[2] = 0;\n\t    }\n\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Negates a vector.\n\t   * @param {module:twgl/v3.Vec3} v The vector.\n\t   * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created..\n\t   * @return {module:twgl/v3.Vec3} -v.\n\t   * @memberOf module:twgl/v3\n\t   */\n\t  function negate(v, dst) {\n\t    dst = dst || new VecType(3);\n\n\t    dst[0] = -v[0];\n\t    dst[1] = -v[1];\n\t    dst[2] = -v[2];\n\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Copies a vector.\n\t   * @param {module:twgl/v3.Vec3} v The vector.\n\t   * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created..\n\t   * @return {module:twgl/v3.Vec3} A copy of v.\n\t   * @memberOf module:twgl/v3\n\t   */\n\t  function copy(v, dst) {\n\t    dst = dst || new VecType(3);\n\n\t    dst[0] = v[0];\n\t    dst[1] = v[1];\n\t    dst[2] = v[2];\n\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Multiplies a vector by another vector (component-wise); assumes a and\n\t   * b have the same length.\n\t   * @param {module:twgl/v3.Vec3} a Operand vector.\n\t   * @param {module:twgl/v3.Vec3} b Operand vector.\n\t   * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created..\n\t   * @return {module:twgl/v3.Vec3} The vector of products of entries of a and\n\t   *     b.\n\t   * @memberOf module:twgl/v3\n\t   */\n\t  function multiply(a, b, dst) {\n\t    dst = dst || new VecType(3);\n\n\t    dst[0] = a[0] * b[0];\n\t    dst[1] = a[1] * b[1];\n\t    dst[2] = a[2] * b[2];\n\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Divides a vector by another vector (component-wise); assumes a and\n\t   * b have the same length.\n\t   * @param {module:twgl/v3.Vec3} a Operand vector.\n\t   * @param {module:twgl/v3.Vec3} b Operand vector.\n\t   * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created..\n\t   * @return {module:twgl/v3.Vec3} The vector of quotients of entries of a and\n\t   *     b.\n\t   * @memberOf module:twgl/v3\n\t   */\n\t  function divide(a, b, dst) {\n\t    dst = dst || new VecType(3);\n\n\t    dst[0] = a[0] / b[0];\n\t    dst[1] = a[1] / b[1];\n\t    dst[2] = a[2] / b[2];\n\n\t    return dst;\n\t  }\n\n\t  // Using quotes prevents Uglify from changing the names.\n\t  // No speed diff AFAICT.\n\t  return {\n\t    \"add\": add,\n\t    \"copy\": copy,\n\t    \"create\": create,\n\t    \"cross\": cross,\n\t    \"distance\": distance,\n\t    \"distanceSq\": distanceSq,\n\t    \"divide\": divide,\n\t    \"divScalar\": divScalar,\n\t    \"dot\": dot,\n\t    \"lerp\": lerp,\n\t    \"length\": length,\n\t    \"lengthSq\": lengthSq,\n\t    \"mulScalar\": mulScalar,\n\t    \"multiply\": multiply,\n\t    \"negate\": negate,\n\t    \"normalize\": normalize,\n\t    \"setDefaultType\": setDefaultType,\n\t    \"subtract\": subtract\n\t  };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n\t/*\n\t * Copyright 2015, Gregg Tavares.\n\t * All rights reserved.\n\t *\n\t * Redistribution and use in source and binary forms, with or without\n\t * modification, are permitted provided that the following conditions are\n\t * met:\n\t *\n\t *     * Redistributions of source code must retain the above copyright\n\t * notice, this list of conditions and the following disclaimer.\n\t *     * Redistributions in binary form must reproduce the above\n\t * copyright notice, this list of conditions and the following disclaimer\n\t * in the documentation and/or other materials provided with the\n\t * distribution.\n\t *     * Neither the name of Gregg Tavares. nor the names of his\n\t * contributors may be used to endorse or promote products derived from\n\t * this software without specific prior written permission.\n\t *\n\t * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\t * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n\t * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n\t * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n\t * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n\t * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n\t * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n\t * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n\t * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\t * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n\t * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\t */\n\n\t/**\n\t * Various functions to make simple primitives\n\t *\n\t * note: Most primitive functions come in 3 styles\n\t *\n\t * *  `createSomeShapeBufferInfo`\n\t *\n\t *    These functions are almost always the functions you want to call. They\n\t *    create vertices then make WebGLBuffers and create {@link module:twgl.AttribInfo}s\n\t *    returing a {@link module:twgl.BufferInfo} you can pass to {@link module:twgl.setBuffersAndAttributes}\n\t *    and {@link module:twgl.drawBufferInfo} etc...\n\t *\n\t * *  `createSomeShapeBuffers`\n\t *\n\t *    These create WebGLBuffers and put your data in them but nothing else.\n\t *    It's a shortcut to doing it yourself if you don't want to use\n\t *    the higher level functions.\n\t *\n\t * *  `createSomeShapeVertices`\n\t *\n\t *    These just create vertices, no buffers. This allows you to manipulate the vertices\n\t *    or add more data before generating a {@link module:twgl.BufferInfo}. Once you're finished\n\t *    manipulating the vertices call {@link module:twgl.createBufferInfoFromArrays}.\n\t *\n\t *    example:\n\t *\n\t *        var arrays = twgl.primitives.createPlaneArrays(1);\n\t *        twgl.primitives.reorientVertices(arrays, m4.rotationX(Math.PI * 0.5));\n\t *        var bufferInfo = twgl.createBufferInfoFromArrays(gl, arrays);\n\t *\n\t * @module twgl/primitives\n\t */\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(2), __webpack_require__(4), __webpack_require__(10), __webpack_require__(11)], __WEBPACK_AMD_DEFINE_RESULT__ = function (attributes, utils, m4, v3) {\n\t  \"use strict\";\n\n\t  var getArray = attributes.getArray_; // eslint-disable-line\n\t  var getNumComponents = attributes.getNumComponents_; // eslint-disable-line\n\n\t  /**\n\t   * Add `push` to a typed array. It just keeps a 'cursor'\n\t   * and allows use to `push` values into the array so we\n\t   * don't have to manually compute offsets\n\t   * @param {TypedArray} typedArray TypedArray to augment\n\t   * @param {number} numComponents number of components.\n\t   */\n\t  function augmentTypedArray(typedArray, numComponents) {\n\t    var cursor = 0;\n\t    typedArray.push = function () {\n\t      for (var ii = 0; ii < arguments.length; ++ii) {\n\t        var value = arguments[ii];\n\t        if (value instanceof Array || value.buffer && value.buffer instanceof ArrayBuffer) {\n\t          for (var jj = 0; jj < value.length; ++jj) {\n\t            typedArray[cursor++] = value[jj];\n\t          }\n\t        } else {\n\t          typedArray[cursor++] = value;\n\t        }\n\t      }\n\t    };\n\t    typedArray.reset = function (opt_index) {\n\t      cursor = opt_index || 0;\n\t    };\n\t    typedArray.numComponents = numComponents;\n\t    Object.defineProperty(typedArray, 'numElements', {\n\t      get: function get() {\n\t        return this.length / this.numComponents | 0;\n\t      }\n\t    });\n\t    return typedArray;\n\t  }\n\n\t  /**\n\t   * creates a typed array with a `push` function attached\n\t   * so that you can easily *push* values.\n\t   *\n\t   * `push` can take multiple arguments. If an argument is an array each element\n\t   * of the array will be added to the typed array.\n\t   *\n\t   * Example:\n\t   *\n\t   *     var array = createAugmentedTypedArray(3, 2);  // creates a Float32Array with 6 values\n\t   *     array.push(1, 2, 3);\n\t   *     array.push([4, 5, 6]);\n\t   *     // array now contains [1, 2, 3, 4, 5, 6]\n\t   *\n\t   * Also has `numComponents` and `numElements` properties.\n\t   *\n\t   * @param {number} numComponents number of components\n\t   * @param {number} numElements number of elements. The total size of the array will be `numComponents * numElements`.\n\t   * @param {constructor} opt_type A constructor for the type. Default = `Float32Array`.\n\t   * @return {ArrayBuffer} A typed array.\n\t   * @memberOf module:twgl/primitives\n\t   */\n\t  function createAugmentedTypedArray(numComponents, numElements, opt_type) {\n\t    var Type = opt_type || Float32Array;\n\t    return augmentTypedArray(new Type(numComponents * numElements), numComponents);\n\t  }\n\n\t  function allButIndices(name) {\n\t    return name !== \"indices\";\n\t  }\n\n\t  /**\n\t   * Given indexed vertices creates a new set of vertices unindexed by expanding the indexed vertices.\n\t   * @param {Object.<string, TypedArray>} vertices The indexed vertices to deindex\n\t   * @return {Object.<string, TypedArray>} The deindexed vertices\n\t   * @memberOf module:twgl/primitives\n\t   */\n\t  function deindexVertices(vertices) {\n\t    var indices = vertices.indices;\n\t    var newVertices = {};\n\t    var numElements = indices.length;\n\n\t    function expandToUnindexed(channel) {\n\t      var srcBuffer = vertices[channel];\n\t      var numComponents = srcBuffer.numComponents;\n\t      var dstBuffer = createAugmentedTypedArray(numComponents, numElements, srcBuffer.constructor);\n\t      for (var ii = 0; ii < numElements; ++ii) {\n\t        var ndx = indices[ii];\n\t        var offset = ndx * numComponents;\n\t        for (var jj = 0; jj < numComponents; ++jj) {\n\t          dstBuffer.push(srcBuffer[offset + jj]);\n\t        }\n\t      }\n\t      newVertices[channel] = dstBuffer;\n\t    }\n\n\t    Object.keys(vertices).filter(allButIndices).forEach(expandToUnindexed);\n\n\t    return newVertices;\n\t  }\n\n\t  /**\n\t   * flattens the normals of deindexed vertices in place.\n\t   * @param {Object.<string, TypedArray>} vertices The deindexed vertices who's normals to flatten\n\t   * @return {Object.<string, TypedArray>} The flattened vertices (same as was passed in)\n\t   * @memberOf module:twgl/primitives\n\t   */\n\t  function flattenNormals(vertices) {\n\t    if (vertices.indices) {\n\t      throw \"can't flatten normals of indexed vertices. deindex them first\";\n\t    }\n\n\t    var normals = vertices.normal;\n\t    var numNormals = normals.length;\n\t    for (var ii = 0; ii < numNormals; ii += 9) {\n\t      // pull out the 3 normals for this triangle\n\t      var nax = normals[ii + 0];\n\t      var nay = normals[ii + 1];\n\t      var naz = normals[ii + 2];\n\n\t      var nbx = normals[ii + 3];\n\t      var nby = normals[ii + 4];\n\t      var nbz = normals[ii + 5];\n\n\t      var ncx = normals[ii + 6];\n\t      var ncy = normals[ii + 7];\n\t      var ncz = normals[ii + 8];\n\n\t      // add them\n\t      var nx = nax + nbx + ncx;\n\t      var ny = nay + nby + ncy;\n\t      var nz = naz + nbz + ncz;\n\n\t      // normalize them\n\t      var length = Math.sqrt(nx * nx + ny * ny + nz * nz);\n\n\t      nx /= length;\n\t      ny /= length;\n\t      nz /= length;\n\n\t      // copy them back in\n\t      normals[ii + 0] = nx;\n\t      normals[ii + 1] = ny;\n\t      normals[ii + 2] = nz;\n\n\t      normals[ii + 3] = nx;\n\t      normals[ii + 4] = ny;\n\t      normals[ii + 5] = nz;\n\n\t      normals[ii + 6] = nx;\n\t      normals[ii + 7] = ny;\n\t      normals[ii + 8] = nz;\n\t    }\n\n\t    return vertices;\n\t  }\n\n\t  function applyFuncToV3Array(array, matrix, fn) {\n\t    var len = array.length;\n\t    var tmp = new Float32Array(3);\n\t    for (var ii = 0; ii < len; ii += 3) {\n\t      fn(matrix, [array[ii], array[ii + 1], array[ii + 2]], tmp);\n\t      array[ii] = tmp[0];\n\t      array[ii + 1] = tmp[1];\n\t      array[ii + 2] = tmp[2];\n\t    }\n\t  }\n\n\t  function transformNormal(mi, v, dst) {\n\t    dst = dst || v3.create();\n\t    var v0 = v[0];\n\t    var v1 = v[1];\n\t    var v2 = v[2];\n\n\t    dst[0] = v0 * mi[0 * 4 + 0] + v1 * mi[0 * 4 + 1] + v2 * mi[0 * 4 + 2];\n\t    dst[1] = v0 * mi[1 * 4 + 0] + v1 * mi[1 * 4 + 1] + v2 * mi[1 * 4 + 2];\n\t    dst[2] = v0 * mi[2 * 4 + 0] + v1 * mi[2 * 4 + 1] + v2 * mi[2 * 4 + 2];\n\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Reorients directions by the given matrix..\n\t   * @param {number[]|TypedArray} array The array. Assumes value floats per element.\n\t   * @param {Matrix} matrix A matrix to multiply by.\n\t   * @return {number[]|TypedArray} the same array that was passed in\n\t   * @memberOf module:twgl/primitives\n\t   */\n\t  function reorientDirections(array, matrix) {\n\t    applyFuncToV3Array(array, matrix, m4.transformDirection);\n\t    return array;\n\t  }\n\n\t  /**\n\t   * Reorients normals by the inverse-transpose of the given\n\t   * matrix..\n\t   * @param {number[]|TypedArray} array The array. Assumes value floats per element.\n\t   * @param {Matrix} matrix A matrix to multiply by.\n\t   * @return {number[]|TypedArray} the same array that was passed in\n\t   * @memberOf module:twgl/primitives\n\t   */\n\t  function reorientNormals(array, matrix) {\n\t    applyFuncToV3Array(array, m4.inverse(matrix), transformNormal);\n\t    return array;\n\t  }\n\n\t  /**\n\t   * Reorients positions by the given matrix. In other words, it\n\t   * multiplies each vertex by the given matrix.\n\t   * @param {number[]|TypedArray} array The array. Assumes value floats per element.\n\t   * @param {Matrix} matrix A matrix to multiply by.\n\t   * @return {number[]|TypedArray} the same array that was passed in\n\t   * @memberOf module:twgl/primitives\n\t   */\n\t  function reorientPositions(array, matrix) {\n\t    applyFuncToV3Array(array, matrix, m4.transformPoint);\n\t    return array;\n\t  }\n\n\t  /**\n\t   * Reorients arrays by the given matrix. Assumes arrays have\n\t   * names that contains 'pos' could be reoriented as positions,\n\t   * 'binorm' or 'tan' as directions, and 'norm' as normals.\n\t   *\n\t   * @param {Object.<string, (number[]|TypedArray)>} arrays The vertices to reorient\n\t   * @param {Matrix} matrix matrix to reorient by.\n\t   * @return {Object.<string, (number[]|TypedArray)>} same arrays that were passed in.\n\t   * @memberOf module:twgl/primitives\n\t   */\n\t  function reorientVertices(arrays, matrix) {\n\t    Object.keys(arrays).forEach(function (name) {\n\t      var array = arrays[name];\n\t      if (name.indexOf(\"pos\") >= 0) {\n\t        reorientPositions(array, matrix);\n\t      } else if (name.indexOf(\"tan\") >= 0 || name.indexOf(\"binorm\") >= 0) {\n\t        reorientDirections(array, matrix);\n\t      } else if (name.indexOf(\"norm\") >= 0) {\n\t        reorientNormals(array, matrix);\n\t      }\n\t    });\n\t    return arrays;\n\t  }\n\n\t  /**\n\t   * Creates XY quad BufferInfo\n\t   *\n\t   * The default with no parameters will return a 2x2 quad with values from -1 to +1.\n\t   * If you want a unit quad with that goes from 0 to 1 you'd call it with\n\t   *\n\t   *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0.5, 0.5);\n\t   *\n\t   * If you want a unit quad centered above 0,0 you'd call it with\n\t   *\n\t   *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0, 0.5);\n\t   *\n\t   * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n\t   * @param {number} [size] the size across the quad. Defaults to 2 which means vertices will go from -1 to +1\n\t   * @param {number} [xOffset] the amount to offset the quad in X\n\t   * @param {number} [yOffset] the amount to offset the quad in Y\n\t   * @return {Object.<string, WebGLBuffer>} the created XY Quad BufferInfo\n\t   * @memberOf module:twgl/primitives\n\t   * @function createXYQuadBufferInfo\n\t   */\n\n\t  /**\n\t   * Creates XY quad Buffers\n\t   *\n\t   * The default with no parameters will return a 2x2 quad with values from -1 to +1.\n\t   * If you want a unit quad with that goes from 0 to 1 you'd call it with\n\t   *\n\t   *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0.5, 0.5);\n\t   *\n\t   * If you want a unit quad centered above 0,0 you'd call it with\n\t   *\n\t   *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0, 0.5);\n\t   *\n\t   * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n\t   * @param {number} [size] the size across the quad. Defaults to 2 which means vertices will go from -1 to +1\n\t   * @param {number} [xOffset] the amount to offset the quad in X\n\t   * @param {number} [yOffset] the amount to offset the quad in Y\n\t   * @return {module:twgl.BufferInfo} the created XY Quad buffers\n\t   * @memberOf module:twgl/primitives\n\t   * @function createXYQuadBuffers\n\t   */\n\n\t  /**\n\t   * Creates XY quad vertices\n\t   *\n\t   * The default with no parameters will return a 2x2 quad with values from -1 to +1.\n\t   * If you want a unit quad with that goes from 0 to 1 you'd call it with\n\t   *\n\t   *     twgl.primitives.createXYQuadVertices(1, 0.5, 0.5);\n\t   *\n\t   * If you want a unit quad centered above 0,0 you'd call it with\n\t   *\n\t   *     twgl.primitives.createXYQuadVertices(1, 0, 0.5);\n\t   *\n\t   * @param {number} [size] the size across the quad. Defaults to 2 which means vertices will go from -1 to +1\n\t   * @param {number} [xOffset] the amount to offset the quad in X\n\t   * @param {number} [yOffset] the amount to offset the quad in Y\n\t   * @return {Object.<string, TypedArray> the created XY Quad vertices\n\t   * @memberOf module:twgl/primitives\n\t   */\n\t  function createXYQuadVertices(size, xOffset, yOffset) {\n\t    size = size || 2;\n\t    xOffset = xOffset || 0;\n\t    yOffset = yOffset || 0;\n\t    size *= 0.5;\n\t    return {\n\t      position: {\n\t        numComponents: 2,\n\t        data: [xOffset + -1 * size, yOffset + -1 * size, xOffset + 1 * size, yOffset + -1 * size, xOffset + -1 * size, yOffset + 1 * size, xOffset + 1 * size, yOffset + 1 * size]\n\t      },\n\t      normal: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],\n\t      texcoord: [0, 0, 1, 0, 0, 1, 1, 1],\n\t      indices: [0, 1, 2, 2, 1, 3]\n\t    };\n\t  }\n\n\t  /**\n\t   * Creates XZ plane BufferInfo.\n\t   *\n\t   * The created plane has position, normal, and texcoord data\n\t   *\n\t   * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n\t   * @param {number} [width] Width of the plane. Default = 1\n\t   * @param {number} [depth] Depth of the plane. Default = 1\n\t   * @param {number} [subdivisionsWidth] Number of steps across the plane. Default = 1\n\t   * @param {number} [subdivisionsDepth] Number of steps down the plane. Default = 1\n\t   * @param {Matrix4} [matrix] A matrix by which to multiply all the vertices.\n\t   * @return {@module:twgl.BufferInfo} The created plane BufferInfo.\n\t   * @memberOf module:twgl/primitives\n\t   * @function createPlaneBufferInfo\n\t   */\n\n\t  /**\n\t   * Creates XZ plane buffers.\n\t   *\n\t   * The created plane has position, normal, and texcoord data\n\t   *\n\t   * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n\t   * @param {number} [width] Width of the plane. Default = 1\n\t   * @param {number} [depth] Depth of the plane. Default = 1\n\t   * @param {number} [subdivisionsWidth] Number of steps across the plane. Default = 1\n\t   * @param {number} [subdivisionsDepth] Number of steps down the plane. Default = 1\n\t   * @param {Matrix4} [matrix] A matrix by which to multiply all the vertices.\n\t   * @return {Object.<string, WebGLBuffer>} The created plane buffers.\n\t   * @memberOf module:twgl/primitives\n\t   * @function createPlaneBuffers\n\t   */\n\n\t  /**\n\t   * Creates XZ plane vertices.\n\t   *\n\t   * The created plane has position, normal, and texcoord data\n\t   *\n\t   * @param {number} [width] Width of the plane. Default = 1\n\t   * @param {number} [depth] Depth of the plane. Default = 1\n\t   * @param {number} [subdivisionsWidth] Number of steps across the plane. Default = 1\n\t   * @param {number} [subdivisionsDepth] Number of steps down the plane. Default = 1\n\t   * @param {Matrix4} [matrix] A matrix by which to multiply all the vertices.\n\t   * @return {Object.<string, TypedArray>} The created plane vertices.\n\t   * @memberOf module:twgl/primitives\n\t   */\n\t  function createPlaneVertices(width, depth, subdivisionsWidth, subdivisionsDepth, matrix) {\n\t    width = width || 1;\n\t    depth = depth || 1;\n\t    subdivisionsWidth = subdivisionsWidth || 1;\n\t    subdivisionsDepth = subdivisionsDepth || 1;\n\t    matrix = matrix || m4.identity();\n\n\t    var numVertices = (subdivisionsWidth + 1) * (subdivisionsDepth + 1);\n\t    var positions = createAugmentedTypedArray(3, numVertices);\n\t    var normals = createAugmentedTypedArray(3, numVertices);\n\t    var texcoords = createAugmentedTypedArray(2, numVertices);\n\n\t    for (var z = 0; z <= subdivisionsDepth; z++) {\n\t      for (var x = 0; x <= subdivisionsWidth; x++) {\n\t        var u = x / subdivisionsWidth;\n\t        var v = z / subdivisionsDepth;\n\t        positions.push(width * u - width * 0.5, 0, depth * v - depth * 0.5);\n\t        normals.push(0, 1, 0);\n\t        texcoords.push(u, v);\n\t      }\n\t    }\n\n\t    var numVertsAcross = subdivisionsWidth + 1;\n\t    var indices = createAugmentedTypedArray(3, subdivisionsWidth * subdivisionsDepth * 2, Uint16Array);\n\n\t    for (var z = 0; z < subdivisionsDepth; z++) {\n\t      // eslint-disable-line\n\t      for (var x = 0; x < subdivisionsWidth; x++) {\n\t        // eslint-disable-line\n\t        // Make triangle 1 of quad.\n\t        indices.push((z + 0) * numVertsAcross + x, (z + 1) * numVertsAcross + x, (z + 0) * numVertsAcross + x + 1);\n\n\t        // Make triangle 2 of quad.\n\t        indices.push((z + 1) * numVertsAcross + x, (z + 1) * numVertsAcross + x + 1, (z + 0) * numVertsAcross + x + 1);\n\t      }\n\t    }\n\n\t    var arrays = reorientVertices({\n\t      position: positions,\n\t      normal: normals,\n\t      texcoord: texcoords,\n\t      indices: indices\n\t    }, matrix);\n\t    return arrays;\n\t  }\n\n\t  /**\n\t   * Creates sphere BufferInfo.\n\t   *\n\t   * The created sphere has position, normal, and texcoord data\n\t   *\n\t   * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n\t   * @param {number} radius radius of the sphere.\n\t   * @param {number} subdivisionsAxis number of steps around the sphere.\n\t   * @param {number} subdivisionsHeight number of vertically on the sphere.\n\t   * @param {number} [opt_startLatitudeInRadians] where to start the\n\t   *     top of the sphere. Default = 0.\n\t   * @param {number} [opt_endLatitudeInRadians] Where to end the\n\t   *     bottom of the sphere. Default = Math.PI.\n\t   * @param {number} [opt_startLongitudeInRadians] where to start\n\t   *     wrapping the sphere. Default = 0.\n\t   * @param {number} [opt_endLongitudeInRadians] where to end\n\t   *     wrapping the sphere. Default = 2 * Math.PI.\n\t   * @return {module:twgl.BufferInfo} The created sphere BufferInfo.\n\t   * @memberOf module:twgl/primitives\n\t   * @function createSphereBufferInfo\n\t   */\n\n\t  /**\n\t   * Creates sphere buffers.\n\t   *\n\t   * The created sphere has position, normal, and texcoord data\n\t   *\n\t   * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n\t   * @param {number} radius radius of the sphere.\n\t   * @param {number} subdivisionsAxis number of steps around the sphere.\n\t   * @param {number} subdivisionsHeight number of vertically on the sphere.\n\t   * @param {number} [opt_startLatitudeInRadians] where to start the\n\t   *     top of the sphere. Default = 0.\n\t   * @param {number} [opt_endLatitudeInRadians] Where to end the\n\t   *     bottom of the sphere. Default = Math.PI.\n\t   * @param {number} [opt_startLongitudeInRadians] where to start\n\t   *     wrapping the sphere. Default = 0.\n\t   * @param {number} [opt_endLongitudeInRadians] where to end\n\t   *     wrapping the sphere. Default = 2 * Math.PI.\n\t   * @return {Object.<string, WebGLBuffer>} The created sphere buffers.\n\t   * @memberOf module:twgl/primitives\n\t   * @function createSphereBuffers\n\t   */\n\n\t  /**\n\t   * Creates sphere vertices.\n\t   *\n\t   * The created sphere has position, normal, and texcoord data\n\t   *\n\t   * @param {number} radius radius of the sphere.\n\t   * @param {number} subdivisionsAxis number of steps around the sphere.\n\t   * @param {number} subdivisionsHeight number of vertically on the sphere.\n\t   * @param {number} [opt_startLatitudeInRadians] where to start the\n\t   *     top of the sphere. Default = 0.\n\t   * @param {number} [opt_endLatitudeInRadians] Where to end the\n\t   *     bottom of the sphere. Default = Math.PI.\n\t   * @param {number} [opt_startLongitudeInRadians] where to start\n\t   *     wrapping the sphere. Default = 0.\n\t   * @param {number} [opt_endLongitudeInRadians] where to end\n\t   *     wrapping the sphere. Default = 2 * Math.PI.\n\t   * @return {Object.<string, TypedArray>} The created sphere vertices.\n\t   * @memberOf module:twgl/primitives\n\t   */\n\t  function createSphereVertices(radius, subdivisionsAxis, subdivisionsHeight, opt_startLatitudeInRadians, opt_endLatitudeInRadians, opt_startLongitudeInRadians, opt_endLongitudeInRadians) {\n\t    if (subdivisionsAxis <= 0 || subdivisionsHeight <= 0) {\n\t      throw Error('subdivisionAxis and subdivisionHeight must be > 0');\n\t    }\n\n\t    opt_startLatitudeInRadians = opt_startLatitudeInRadians || 0;\n\t    opt_endLatitudeInRadians = opt_endLatitudeInRadians || Math.PI;\n\t    opt_startLongitudeInRadians = opt_startLongitudeInRadians || 0;\n\t    opt_endLongitudeInRadians = opt_endLongitudeInRadians || Math.PI * 2;\n\n\t    var latRange = opt_endLatitudeInRadians - opt_startLatitudeInRadians;\n\t    var longRange = opt_endLongitudeInRadians - opt_startLongitudeInRadians;\n\n\t    // We are going to generate our sphere by iterating through its\n\t    // spherical coordinates and generating 2 triangles for each quad on a\n\t    // ring of the sphere.\n\t    var numVertices = (subdivisionsAxis + 1) * (subdivisionsHeight + 1);\n\t    var positions = createAugmentedTypedArray(3, numVertices);\n\t    var normals = createAugmentedTypedArray(3, numVertices);\n\t    var texcoords = createAugmentedTypedArray(2, numVertices);\n\n\t    // Generate the individual vertices in our vertex buffer.\n\t    for (var y = 0; y <= subdivisionsHeight; y++) {\n\t      for (var x = 0; x <= subdivisionsAxis; x++) {\n\t        // Generate a vertex based on its spherical coordinates\n\t        var u = x / subdivisionsAxis;\n\t        var v = y / subdivisionsHeight;\n\t        var theta = longRange * u;\n\t        var phi = latRange * v;\n\t        var sinTheta = Math.sin(theta);\n\t        var cosTheta = Math.cos(theta);\n\t        var sinPhi = Math.sin(phi);\n\t        var cosPhi = Math.cos(phi);\n\t        var ux = cosTheta * sinPhi;\n\t        var uy = cosPhi;\n\t        var uz = sinTheta * sinPhi;\n\t        positions.push(radius * ux, radius * uy, radius * uz);\n\t        normals.push(ux, uy, uz);\n\t        texcoords.push(1 - u, v);\n\t      }\n\t    }\n\n\t    var numVertsAround = subdivisionsAxis + 1;\n\t    var indices = createAugmentedTypedArray(3, subdivisionsAxis * subdivisionsHeight * 2, Uint16Array);\n\t    for (var x = 0; x < subdivisionsAxis; x++) {\n\t      // eslint-disable-line\n\t      for (var y = 0; y < subdivisionsHeight; y++) {\n\t        // eslint-disable-line\n\t        // Make triangle 1 of quad.\n\t        indices.push((y + 0) * numVertsAround + x, (y + 0) * numVertsAround + x + 1, (y + 1) * numVertsAround + x);\n\n\t        // Make triangle 2 of quad.\n\t        indices.push((y + 1) * numVertsAround + x, (y + 0) * numVertsAround + x + 1, (y + 1) * numVertsAround + x + 1);\n\t      }\n\t    }\n\n\t    return {\n\t      position: positions,\n\t      normal: normals,\n\t      texcoord: texcoords,\n\t      indices: indices\n\t    };\n\t  }\n\n\t  /**\n\t   * Array of the indices of corners of each face of a cube.\n\t   * @type {Array.<number[]>}\n\t   */\n\t  var CUBE_FACE_INDICES = [[3, 7, 5, 1], // right\n\t  [6, 2, 0, 4], // left\n\t  [6, 7, 3, 2], // ??\n\t  [0, 1, 5, 4], // ??\n\t  [7, 6, 4, 5], // front\n\t  [2, 3, 1, 0]];\n\n\t  /**\n\t   * Creates a BufferInfo for a cube.\n\t   *\n\t   * The cube is created around the origin. (-size / 2, size / 2).\n\t   *\n\t   * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n\t   * @param {number} [size] width, height and depth of the cube.\n\t   * @return {module:twgl.BufferInfo} The created BufferInfo.\n\t   * @memberOf module:twgl/primitives\n\t   * @function createCubeBufferInfo\n\t   */\n\n\t  /**\n\t   * Creates the buffers and indices for a cube.\n\t   *\n\t   * The cube is created around the origin. (-size / 2, size / 2).\n\t   *\n\t   * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n\t   * @param {number} [size] width, height and depth of the cube.\n\t   * @return {Object.<string, WebGLBuffer>} The created buffers.\n\t   * @memberOf module:twgl/primitives\n\t   * @function createCubeBuffers\n\t   */\n\n\t  /**\n\t   * Creates the vertices and indices for a cube.\n\t   *\n\t   * The cube is created around the origin. (-size / 2, size / 2).\n\t   *\n\t   * @param {number} [size] width, height and depth of the cube.\n\t   * @return {Object.<string, TypedArray>} The created vertices.\n\t   * @memberOf module:twgl/primitives\n\t   */\n\t  function createCubeVertices(size) {\n\t    size = size || 1;\n\t    var k = size / 2;\n\n\t    var cornerVertices = [[-k, -k, -k], [+k, -k, -k], [-k, +k, -k], [+k, +k, -k], [-k, -k, +k], [+k, -k, +k], [-k, +k, +k], [+k, +k, +k]];\n\n\t    var faceNormals = [[+1, +0, +0], [-1, +0, +0], [+0, +1, +0], [+0, -1, +0], [+0, +0, +1], [+0, +0, -1]];\n\n\t    var uvCoords = [[1, 0], [0, 0], [0, 1], [1, 1]];\n\n\t    var numVertices = 6 * 4;\n\t    var positions = createAugmentedTypedArray(3, numVertices);\n\t    var normals = createAugmentedTypedArray(3, numVertices);\n\t    var texcoords = createAugmentedTypedArray(2, numVertices);\n\t    var indices = createAugmentedTypedArray(3, 6 * 2, Uint16Array);\n\n\t    for (var f = 0; f < 6; ++f) {\n\t      var faceIndices = CUBE_FACE_INDICES[f];\n\t      for (var v = 0; v < 4; ++v) {\n\t        var position = cornerVertices[faceIndices[v]];\n\t        var normal = faceNormals[f];\n\t        var uv = uvCoords[v];\n\n\t        // Each face needs all four vertices because the normals and texture\n\t        // coordinates are not all the same.\n\t        positions.push(position);\n\t        normals.push(normal);\n\t        texcoords.push(uv);\n\t      }\n\t      // Two triangles make a square face.\n\t      var offset = 4 * f;\n\t      indices.push(offset + 0, offset + 1, offset + 2);\n\t      indices.push(offset + 0, offset + 2, offset + 3);\n\t    }\n\n\t    return {\n\t      position: positions,\n\t      normal: normals,\n\t      texcoord: texcoords,\n\t      indices: indices\n\t    };\n\t  }\n\n\t  /**\n\t   * Creates a BufferInfo for a truncated cone, which is like a cylinder\n\t   * except that it has different top and bottom radii. A truncated cone\n\t   * can also be used to create cylinders and regular cones. The\n\t   * truncated cone will be created centered about the origin, with the\n\t   * y axis as its vertical axis.\n\t   *\n\t   * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n\t   * @param {number} bottomRadius Bottom radius of truncated cone.\n\t   * @param {number} topRadius Top radius of truncated cone.\n\t   * @param {number} height Height of truncated cone.\n\t   * @param {number} radialSubdivisions The number of subdivisions around the\n\t   *     truncated cone.\n\t   * @param {number} verticalSubdivisions The number of subdivisions down the\n\t   *     truncated cone.\n\t   * @param {boolean} [opt_topCap] Create top cap. Default = true.\n\t   * @param {boolean} [opt_bottomCap] Create bottom cap. Default = true.\n\t   * @return {module:twgl.BufferInfo} The created cone BufferInfo.\n\t   * @memberOf module:twgl/primitives\n\t   * @function createTruncatedConeBufferInfo\n\t   */\n\n\t  /**\n\t   * Creates buffers for a truncated cone, which is like a cylinder\n\t   * except that it has different top and bottom radii. A truncated cone\n\t   * can also be used to create cylinders and regular cones. The\n\t   * truncated cone will be created centered about the origin, with the\n\t   * y axis as its vertical axis.\n\t   *\n\t   * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n\t   * @param {number} bottomRadius Bottom radius of truncated cone.\n\t   * @param {number} topRadius Top radius of truncated cone.\n\t   * @param {number} height Height of truncated cone.\n\t   * @param {number} radialSubdivisions The number of subdivisions around the\n\t   *     truncated cone.\n\t   * @param {number} verticalSubdivisions The number of subdivisions down the\n\t   *     truncated cone.\n\t   * @param {boolean} [opt_topCap] Create top cap. Default = true.\n\t   * @param {boolean} [opt_bottomCap] Create bottom cap. Default = true.\n\t   * @return {Object.<string, WebGLBuffer>} The created cone buffers.\n\t   * @memberOf module:twgl/primitives\n\t   * @function createTruncatedConeBuffers\n\t   */\n\n\t  /**\n\t   * Creates vertices for a truncated cone, which is like a cylinder\n\t   * except that it has different top and bottom radii. A truncated cone\n\t   * can also be used to create cylinders and regular cones. The\n\t   * truncated cone will be created centered about the origin, with the\n\t   * y axis as its vertical axis. .\n\t   *\n\t   * @param {number} bottomRadius Bottom radius of truncated cone.\n\t   * @param {number} topRadius Top radius of truncated cone.\n\t   * @param {number} height Height of truncated cone.\n\t   * @param {number} radialSubdivisions The number of subdivisions around the\n\t   *     truncated cone.\n\t   * @param {number} verticalSubdivisions The number of subdivisions down the\n\t   *     truncated cone.\n\t   * @param {boolean} [opt_topCap] Create top cap. Default = true.\n\t   * @param {boolean} [opt_bottomCap] Create bottom cap. Default = true.\n\t   * @return {Object.<string, TypedArray>} The created cone vertices.\n\t   * @memberOf module:twgl/primitives\n\t   */\n\t  function createTruncatedConeVertices(bottomRadius, topRadius, height, radialSubdivisions, verticalSubdivisions, opt_topCap, opt_bottomCap) {\n\t    if (radialSubdivisions < 3) {\n\t      throw Error('radialSubdivisions must be 3 or greater');\n\t    }\n\n\t    if (verticalSubdivisions < 1) {\n\t      throw Error('verticalSubdivisions must be 1 or greater');\n\t    }\n\n\t    var topCap = opt_topCap === undefined ? true : opt_topCap;\n\t    var bottomCap = opt_bottomCap === undefined ? true : opt_bottomCap;\n\n\t    var extra = (topCap ? 2 : 0) + (bottomCap ? 2 : 0);\n\n\t    var numVertices = (radialSubdivisions + 1) * (verticalSubdivisions + 1 + extra);\n\t    var positions = createAugmentedTypedArray(3, numVertices);\n\t    var normals = createAugmentedTypedArray(3, numVertices);\n\t    var texcoords = createAugmentedTypedArray(2, numVertices);\n\t    var indices = createAugmentedTypedArray(3, radialSubdivisions * (verticalSubdivisions + extra) * 2, Uint16Array);\n\n\t    var vertsAroundEdge = radialSubdivisions + 1;\n\n\t    // The slant of the cone is constant across its surface\n\t    var slant = Math.atan2(bottomRadius - topRadius, height);\n\t    var cosSlant = Math.cos(slant);\n\t    var sinSlant = Math.sin(slant);\n\n\t    var start = topCap ? -2 : 0;\n\t    var end = verticalSubdivisions + (bottomCap ? 2 : 0);\n\n\t    for (var yy = start; yy <= end; ++yy) {\n\t      var v = yy / verticalSubdivisions;\n\t      var y = height * v;\n\t      var ringRadius;\n\t      if (yy < 0) {\n\t        y = 0;\n\t        v = 1;\n\t        ringRadius = bottomRadius;\n\t      } else if (yy > verticalSubdivisions) {\n\t        y = height;\n\t        v = 1;\n\t        ringRadius = topRadius;\n\t      } else {\n\t        ringRadius = bottomRadius + (topRadius - bottomRadius) * (yy / verticalSubdivisions);\n\t      }\n\t      if (yy === -2 || yy === verticalSubdivisions + 2) {\n\t        ringRadius = 0;\n\t        v = 0;\n\t      }\n\t      y -= height / 2;\n\t      for (var ii = 0; ii < vertsAroundEdge; ++ii) {\n\t        var sin = Math.sin(ii * Math.PI * 2 / radialSubdivisions);\n\t        var cos = Math.cos(ii * Math.PI * 2 / radialSubdivisions);\n\t        positions.push(sin * ringRadius, y, cos * ringRadius);\n\t        normals.push(yy < 0 || yy > verticalSubdivisions ? 0 : sin * cosSlant, yy < 0 ? -1 : yy > verticalSubdivisions ? 1 : sinSlant, yy < 0 || yy > verticalSubdivisions ? 0 : cos * cosSlant);\n\t        texcoords.push(ii / radialSubdivisions, 1 - v);\n\t      }\n\t    }\n\n\t    for (var yy = 0; yy < verticalSubdivisions + extra; ++yy) {\n\t      // eslint-disable-line\n\t      for (var ii = 0; ii < radialSubdivisions; ++ii) {\n\t        // eslint-disable-line\n\t        indices.push(vertsAroundEdge * (yy + 0) + 0 + ii, vertsAroundEdge * (yy + 0) + 1 + ii, vertsAroundEdge * (yy + 1) + 1 + ii);\n\t        indices.push(vertsAroundEdge * (yy + 0) + 0 + ii, vertsAroundEdge * (yy + 1) + 1 + ii, vertsAroundEdge * (yy + 1) + 0 + ii);\n\t      }\n\t    }\n\n\t    return {\n\t      position: positions,\n\t      normal: normals,\n\t      texcoord: texcoords,\n\t      indices: indices\n\t    };\n\t  }\n\n\t  /**\n\t   * Expands RLE data\n\t   * @param {number[]} rleData data in format of run-length, x, y, z, run-length, x, y, z\n\t   * @param {number[]} [padding] value to add each entry with.\n\t   * @return {number[]} the expanded rleData\n\t   */\n\t  function expandRLEData(rleData, padding) {\n\t    padding = padding || [];\n\t    var data = [];\n\t    for (var ii = 0; ii < rleData.length; ii += 4) {\n\t      var runLength = rleData[ii];\n\t      var element = rleData.slice(ii + 1, ii + 4);\n\t      element.push.apply(element, padding);\n\t      for (var jj = 0; jj < runLength; ++jj) {\n\t        data.push.apply(data, element);\n\t      }\n\t    }\n\t    return data;\n\t  }\n\n\t  /**\n\t   * Creates 3D 'F' BufferInfo.\n\t   * An 'F' is useful because you can easily tell which way it is oriented.\n\t   * The created 'F' has position, normal, texcoord, and color buffers.\n\t   *\n\t   * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n\t   * @return {module:twgl.BufferInfo} The created BufferInfo.\n\t   * @memberOf module:twgl/primitives\n\t   * @function create3DFBufferInfo\n\t   */\n\n\t  /**\n\t   * Creates 3D 'F' buffers.\n\t   * An 'F' is useful because you can easily tell which way it is oriented.\n\t   * The created 'F' has position, normal, texcoord, and color buffers.\n\t   *\n\t   * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n\t   * @return {Object.<string, WebGLBuffer>} The created buffers.\n\t   * @memberOf module:twgl/primitives\n\t   * @function create3DFBuffers\n\t   */\n\n\t  /**\n\t   * Creates 3D 'F' vertices.\n\t   * An 'F' is useful because you can easily tell which way it is oriented.\n\t   * The created 'F' has position, normal, texcoord, and color arrays.\n\t   *\n\t   * @return {Object.<string, TypedArray>} The created vertices.\n\t   * @memberOf module:twgl/primitives\n\t   */\n\t  function create3DFVertices() {\n\n\t    var positions = [\n\t    // left column front\n\t    0, 0, 0, 0, 150, 0, 30, 0, 0, 0, 150, 0, 30, 150, 0, 30, 0, 0,\n\n\t    // top rung front\n\t    30, 0, 0, 30, 30, 0, 100, 0, 0, 30, 30, 0, 100, 30, 0, 100, 0, 0,\n\n\t    // middle rung front\n\t    30, 60, 0, 30, 90, 0, 67, 60, 0, 30, 90, 0, 67, 90, 0, 67, 60, 0,\n\n\t    // left column back\n\t    0, 0, 30, 30, 0, 30, 0, 150, 30, 0, 150, 30, 30, 0, 30, 30, 150, 30,\n\n\t    // top rung back\n\t    30, 0, 30, 100, 0, 30, 30, 30, 30, 30, 30, 30, 100, 0, 30, 100, 30, 30,\n\n\t    // middle rung back\n\t    30, 60, 30, 67, 60, 30, 30, 90, 30, 30, 90, 30, 67, 60, 30, 67, 90, 30,\n\n\t    // top\n\t    0, 0, 0, 100, 0, 0, 100, 0, 30, 0, 0, 0, 100, 0, 30, 0, 0, 30,\n\n\t    // top rung front\n\t    100, 0, 0, 100, 30, 0, 100, 30, 30, 100, 0, 0, 100, 30, 30, 100, 0, 30,\n\n\t    // under top rung\n\t    30, 30, 0, 30, 30, 30, 100, 30, 30, 30, 30, 0, 100, 30, 30, 100, 30, 0,\n\n\t    // between top rung and middle\n\t    30, 30, 0, 30, 60, 30, 30, 30, 30, 30, 30, 0, 30, 60, 0, 30, 60, 30,\n\n\t    // top of middle rung\n\t    30, 60, 0, 67, 60, 30, 30, 60, 30, 30, 60, 0, 67, 60, 0, 67, 60, 30,\n\n\t    // front of middle rung\n\t    67, 60, 0, 67, 90, 30, 67, 60, 30, 67, 60, 0, 67, 90, 0, 67, 90, 30,\n\n\t    // bottom of middle rung.\n\t    30, 90, 0, 30, 90, 30, 67, 90, 30, 30, 90, 0, 67, 90, 30, 67, 90, 0,\n\n\t    // front of bottom\n\t    30, 90, 0, 30, 150, 30, 30, 90, 30, 30, 90, 0, 30, 150, 0, 30, 150, 30,\n\n\t    // bottom\n\t    0, 150, 0, 0, 150, 30, 30, 150, 30, 0, 150, 0, 30, 150, 30, 30, 150, 0,\n\n\t    // left side\n\t    0, 0, 0, 0, 0, 30, 0, 150, 30, 0, 0, 0, 0, 150, 30, 0, 150, 0];\n\n\t    var texcoords = [\n\t    // left column front\n\t    0.22, 0.19, 0.22, 0.79, 0.34, 0.19, 0.22, 0.79, 0.34, 0.79, 0.34, 0.19,\n\n\t    // top rung front\n\t    0.34, 0.19, 0.34, 0.31, 0.62, 0.19, 0.34, 0.31, 0.62, 0.31, 0.62, 0.19,\n\n\t    // middle rung front\n\t    0.34, 0.43, 0.34, 0.55, 0.49, 0.43, 0.34, 0.55, 0.49, 0.55, 0.49, 0.43,\n\n\t    // left column back\n\t    0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1,\n\n\t    // top rung back\n\t    0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1,\n\n\t    // middle rung back\n\t    0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1,\n\n\t    // top\n\t    0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1,\n\n\t    // top rung front\n\t    0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1,\n\n\t    // under top rung\n\t    0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0,\n\n\t    // between top rung and middle\n\t    0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1,\n\n\t    // top of middle rung\n\t    0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1,\n\n\t    // front of middle rung\n\t    0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1,\n\n\t    // bottom of middle rung.\n\t    0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0,\n\n\t    // front of bottom\n\t    0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1,\n\n\t    // bottom\n\t    0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0,\n\n\t    // left side\n\t    0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0];\n\n\t    var normals = expandRLEData([\n\t    // left column front\n\t    // top rung front\n\t    // middle rung front\n\t    18, 0, 0, 1,\n\n\t    // left column back\n\t    // top rung back\n\t    // middle rung back\n\t    18, 0, 0, -1,\n\n\t    // top\n\t    6, 0, 1, 0,\n\n\t    // top rung front\n\t    6, 1, 0, 0,\n\n\t    // under top rung\n\t    6, 0, -1, 0,\n\n\t    // between top rung and middle\n\t    6, 1, 0, 0,\n\n\t    // top of middle rung\n\t    6, 0, 1, 0,\n\n\t    // front of middle rung\n\t    6, 1, 0, 0,\n\n\t    // bottom of middle rung.\n\t    6, 0, -1, 0,\n\n\t    // front of bottom\n\t    6, 1, 0, 0,\n\n\t    // bottom\n\t    6, 0, -1, 0,\n\n\t    // left side\n\t    6, -1, 0, 0]);\n\n\t    var colors = expandRLEData([\n\t    // left column front\n\t    // top rung front\n\t    // middle rung front\n\t    18, 200, 70, 120,\n\n\t    // left column back\n\t    // top rung back\n\t    // middle rung back\n\t    18, 80, 70, 200,\n\n\t    // top\n\t    6, 70, 200, 210,\n\n\t    // top rung front\n\t    6, 200, 200, 70,\n\n\t    // under top rung\n\t    6, 210, 100, 70,\n\n\t    // between top rung and middle\n\t    6, 210, 160, 70,\n\n\t    // top of middle rung\n\t    6, 70, 180, 210,\n\n\t    // front of middle rung\n\t    6, 100, 70, 210,\n\n\t    // bottom of middle rung.\n\t    6, 76, 210, 100,\n\n\t    // front of bottom\n\t    6, 140, 210, 80,\n\n\t    // bottom\n\t    6, 90, 130, 110,\n\n\t    // left side\n\t    6, 160, 160, 220], [255]);\n\n\t    var numVerts = positions.length / 3;\n\n\t    var arrays = {\n\t      position: createAugmentedTypedArray(3, numVerts),\n\t      texcoord: createAugmentedTypedArray(2, numVerts),\n\t      normal: createAugmentedTypedArray(3, numVerts),\n\t      color: createAugmentedTypedArray(4, numVerts, Uint8Array),\n\t      indices: createAugmentedTypedArray(3, numVerts / 3, Uint16Array)\n\t    };\n\n\t    arrays.position.push(positions);\n\t    arrays.texcoord.push(texcoords);\n\t    arrays.normal.push(normals);\n\t    arrays.color.push(colors);\n\n\t    for (var ii = 0; ii < numVerts; ++ii) {\n\t      arrays.indices.push(ii);\n\t    }\n\n\t    return arrays;\n\t  }\n\n\t  /**\n\t   * Creates cresent BufferInfo.\n\t   *\n\t   * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n\t   * @param {number} verticalRadius The vertical radius of the cresent.\n\t   * @param {number} outerRadius The outer radius of the cresent.\n\t   * @param {number} innerRadius The inner radius of the cresent.\n\t   * @param {number} thickness The thickness of the cresent.\n\t   * @param {number} subdivisionsDown number of steps around the cresent.\n\t   * @param {number} subdivisionsThick number of vertically on the cresent.\n\t   * @param {number} [startOffset] Where to start arc. Default 0.\n\t   * @param {number} [endOffset] Where to end arg. Default 1.\n\t   * @return {module:twgl.BufferInfo} The created BufferInfo.\n\t   * @memberOf module:twgl/primitives\n\t   * @function createCresentBufferInfo\n\t   */\n\n\t  /**\n\t   * Creates cresent buffers.\n\t   *\n\t   * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n\t   * @param {number} verticalRadius The vertical radius of the cresent.\n\t   * @param {number} outerRadius The outer radius of the cresent.\n\t   * @param {number} innerRadius The inner radius of the cresent.\n\t   * @param {number} thickness The thickness of the cresent.\n\t   * @param {number} subdivisionsDown number of steps around the cresent.\n\t   * @param {number} subdivisionsThick number of vertically on the cresent.\n\t   * @param {number} [startOffset] Where to start arc. Default 0.\n\t   * @param {number} [endOffset] Where to end arg. Default 1.\n\t   * @return {Object.<string, WebGLBuffer>} The created buffers.\n\t   * @memberOf module:twgl/primitives\n\t   * @function createCresentBuffers\n\t   */\n\n\t  /**\n\t   * Creates cresent vertices.\n\t   *\n\t   * @param {number} verticalRadius The vertical radius of the cresent.\n\t   * @param {number} outerRadius The outer radius of the cresent.\n\t   * @param {number} innerRadius The inner radius of the cresent.\n\t   * @param {number} thickness The thickness of the cresent.\n\t   * @param {number} subdivisionsDown number of steps around the cresent.\n\t   * @param {number} subdivisionsThick number of vertically on the cresent.\n\t   * @param {number} [startOffset] Where to start arc. Default 0.\n\t   * @param {number} [endOffset] Where to end arg. Default 1.\n\t   * @return {Object.<string, TypedArray>} The created vertices.\n\t   * @memberOf module:twgl/primitives\n\t   */\n\t  function createCresentVertices(verticalRadius, outerRadius, innerRadius, thickness, subdivisionsDown, startOffset, endOffset) {\n\t    if (subdivisionsDown <= 0) {\n\t      throw Error('subdivisionDown must be > 0');\n\t    }\n\n\t    startOffset = startOffset || 0;\n\t    endOffset = endOffset || 1;\n\n\t    var subdivisionsThick = 2;\n\n\t    var offsetRange = endOffset - startOffset;\n\t    var numVertices = (subdivisionsDown + 1) * 2 * (2 + subdivisionsThick);\n\t    var positions = createAugmentedTypedArray(3, numVertices);\n\t    var normals = createAugmentedTypedArray(3, numVertices);\n\t    var texcoords = createAugmentedTypedArray(2, numVertices);\n\n\t    function lerp(a, b, s) {\n\t      return a + (b - a) * s;\n\t    }\n\n\t    function createArc(arcRadius, x, normalMult, normalAdd, uMult, uAdd) {\n\t      for (var z = 0; z <= subdivisionsDown; z++) {\n\t        var uBack = x / (subdivisionsThick - 1);\n\t        var v = z / subdivisionsDown;\n\t        var xBack = (uBack - 0.5) * 2;\n\t        var angle = (startOffset + v * offsetRange) * Math.PI;\n\t        var s = Math.sin(angle);\n\t        var c = Math.cos(angle);\n\t        var radius = lerp(verticalRadius, arcRadius, s);\n\t        var px = xBack * thickness;\n\t        var py = c * verticalRadius;\n\t        var pz = s * radius;\n\t        positions.push(px, py, pz);\n\t        var n = v3.add(v3.multiply([0, s, c], normalMult), normalAdd);\n\t        normals.push(n);\n\t        texcoords.push(uBack * uMult + uAdd, v);\n\t      }\n\t    }\n\n\t    // Generate the individual vertices in our vertex buffer.\n\t    for (var x = 0; x < subdivisionsThick; x++) {\n\t      var uBack = (x / (subdivisionsThick - 1) - 0.5) * 2;\n\t      createArc(outerRadius, x, [1, 1, 1], [0, 0, 0], 1, 0);\n\t      createArc(outerRadius, x, [0, 0, 0], [uBack, 0, 0], 0, 0);\n\t      createArc(innerRadius, x, [1, 1, 1], [0, 0, 0], 1, 0);\n\t      createArc(innerRadius, x, [0, 0, 0], [uBack, 0, 0], 0, 1);\n\t    }\n\n\t    // Do outer surface.\n\t    var indices = createAugmentedTypedArray(3, subdivisionsDown * 2 * (2 + subdivisionsThick), Uint16Array);\n\n\t    function createSurface(leftArcOffset, rightArcOffset) {\n\t      for (var z = 0; z < subdivisionsDown; ++z) {\n\t        // Make triangle 1 of quad.\n\t        indices.push(leftArcOffset + z + 0, leftArcOffset + z + 1, rightArcOffset + z + 0);\n\n\t        // Make triangle 2 of quad.\n\t        indices.push(leftArcOffset + z + 1, rightArcOffset + z + 1, rightArcOffset + z + 0);\n\t      }\n\t    }\n\n\t    var numVerticesDown = subdivisionsDown + 1;\n\t    // front\n\t    createSurface(numVerticesDown * 0, numVerticesDown * 4);\n\t    // right\n\t    createSurface(numVerticesDown * 5, numVerticesDown * 7);\n\t    // back\n\t    createSurface(numVerticesDown * 6, numVerticesDown * 2);\n\t    // left\n\t    createSurface(numVerticesDown * 3, numVerticesDown * 1);\n\n\t    return {\n\t      position: positions,\n\t      normal: normals,\n\t      texcoord: texcoords,\n\t      indices: indices\n\t    };\n\t  }\n\n\t  /**\n\t   * Creates cylinder BufferInfo. The cylinder will be created around the origin\n\t   * along the y-axis.\n\t   *\n\t   * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n\t   * @param {number} radius Radius of cylinder.\n\t   * @param {number} height Height of cylinder.\n\t   * @param {number} radialSubdivisions The number of subdivisions around the cylinder.\n\t   * @param {number} verticalSubdivisions The number of subdivisions down the cylinder.\n\t   * @param {boolean} [topCap] Create top cap. Default = true.\n\t   * @param {boolean} [bottomCap] Create bottom cap. Default = true.\n\t   * @return {module:twgl.BufferInfo} The created BufferInfo.\n\t   * @memberOf module:twgl/primitives\n\t   * @function createCylinderBufferInfo\n\t   */\n\n\t  /**\n\t   * Creates cylinder buffers. The cylinder will be created around the origin\n\t   * along the y-axis.\n\t   *\n\t   * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n\t   * @param {number} radius Radius of cylinder.\n\t   * @param {number} height Height of cylinder.\n\t   * @param {number} radialSubdivisions The number of subdivisions around the cylinder.\n\t   * @param {number} verticalSubdivisions The number of subdivisions down the cylinder.\n\t   * @param {boolean} [topCap] Create top cap. Default = true.\n\t   * @param {boolean} [bottomCap] Create bottom cap. Default = true.\n\t   * @return {Object.<string, WebGLBuffer>} The created buffers.\n\t   * @memberOf module:twgl/primitives\n\t   * @function createCylinderBuffers\n\t   */\n\n\t  /**\n\t   * Creates cylinder vertices. The cylinder will be created around the origin\n\t   * along the y-axis.\n\t   *\n\t   * @param {number} radius Radius of cylinder.\n\t   * @param {number} height Height of cylinder.\n\t   * @param {number} radialSubdivisions The number of subdivisions around the cylinder.\n\t   * @param {number} verticalSubdivisions The number of subdivisions down the cylinder.\n\t   * @param {boolean} [topCap] Create top cap. Default = true.\n\t   * @param {boolean} [bottomCap] Create bottom cap. Default = true.\n\t   * @return {Object.<string, TypedArray>} The created vertices.\n\t   * @memberOf module:twgl/primitives\n\t   */\n\t  function createCylinderVertices(radius, height, radialSubdivisions, verticalSubdivisions, topCap, bottomCap) {\n\t    return createTruncatedConeVertices(radius, radius, height, radialSubdivisions, verticalSubdivisions, topCap, bottomCap);\n\t  }\n\n\t  /**\n\t   * Creates BufferInfo for a torus\n\t   *\n\t   * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n\t   * @param {number} radius radius of center of torus circle.\n\t   * @param {number} thickness radius of torus ring.\n\t   * @param {number} radialSubdivisions The number of subdivisions around the torus.\n\t   * @param {number} bodySubdivisions The number of subdivisions around the body torus.\n\t   * @param {boolean} [startAngle] start angle in radians. Default = 0.\n\t   * @param {boolean} [endAngle] end angle in radians. Default = Math.PI * 2.\n\t   * @return {module:twgl.BufferInfo} The created BufferInfo.\n\t   * @memberOf module:twgl/primitives\n\t   * @function createTorusBufferInfo\n\t   */\n\n\t  /**\n\t   * Creates buffers for a torus\n\t   *\n\t   * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n\t   * @param {number} radius radius of center of torus circle.\n\t   * @param {number} thickness radius of torus ring.\n\t   * @param {number} radialSubdivisions The number of subdivisions around the torus.\n\t   * @param {number} bodySubdivisions The number of subdivisions around the body torus.\n\t   * @param {boolean} [startAngle] start angle in radians. Default = 0.\n\t   * @param {boolean} [endAngle] end angle in radians. Default = Math.PI * 2.\n\t   * @return {Object.<string, WebGLBuffer>} The created buffers.\n\t   * @memberOf module:twgl/primitives\n\t   * @function createTorusBuffers\n\t   */\n\n\t  /**\n\t   * Creates vertices for a torus\n\t   *\n\t   * @param {number} radius radius of center of torus circle.\n\t   * @param {number} thickness radius of torus ring.\n\t   * @param {number} radialSubdivisions The number of subdivisions around the torus.\n\t   * @param {number} bodySubdivisions The number of subdivisions around the body torus.\n\t   * @param {boolean} [startAngle] start angle in radians. Default = 0.\n\t   * @param {boolean} [endAngle] end angle in radians. Default = Math.PI * 2.\n\t   * @return {Object.<string, TypedArray>} The created vertices.\n\t   * @memberOf module:twgl/primitives\n\t   */\n\t  function createTorusVertices(radius, thickness, radialSubdivisions, bodySubdivisions, startAngle, endAngle) {\n\t    if (radialSubdivisions < 3) {\n\t      throw Error('radialSubdivisions must be 3 or greater');\n\t    }\n\n\t    if (bodySubdivisions < 3) {\n\t      throw Error('verticalSubdivisions must be 3 or greater');\n\t    }\n\n\t    startAngle = startAngle || 0;\n\t    endAngle = endAngle || Math.PI * 2;\n\t    var range = endAngle - startAngle;\n\n\t    var radialParts = radialSubdivisions + 1;\n\t    var bodyParts = bodySubdivisions + 1;\n\t    var numVertices = radialParts * bodyParts;\n\t    var positions = createAugmentedTypedArray(3, numVertices);\n\t    var normals = createAugmentedTypedArray(3, numVertices);\n\t    var texcoords = createAugmentedTypedArray(2, numVertices);\n\t    var indices = createAugmentedTypedArray(3, radialSubdivisions * bodySubdivisions * 2, Uint16Array);\n\n\t    for (var slice = 0; slice < bodyParts; ++slice) {\n\t      var v = slice / bodySubdivisions;\n\t      var sliceAngle = v * Math.PI * 2;\n\t      var sliceSin = Math.sin(sliceAngle);\n\t      var ringRadius = radius + sliceSin * thickness;\n\t      var ny = Math.cos(sliceAngle);\n\t      var y = ny * thickness;\n\t      for (var ring = 0; ring < radialParts; ++ring) {\n\t        var u = ring / radialSubdivisions;\n\t        var ringAngle = startAngle + u * range;\n\t        var xSin = Math.sin(ringAngle);\n\t        var zCos = Math.cos(ringAngle);\n\t        var x = xSin * ringRadius;\n\t        var z = zCos * ringRadius;\n\t        var nx = xSin * sliceSin;\n\t        var nz = zCos * sliceSin;\n\t        positions.push(x, y, z);\n\t        normals.push(nx, ny, nz);\n\t        texcoords.push(u, 1 - v);\n\t      }\n\t    }\n\n\t    for (var slice = 0; slice < bodySubdivisions; ++slice) {\n\t      // eslint-disable-line\n\t      for (var ring = 0; ring < radialSubdivisions; ++ring) {\n\t        // eslint-disable-line\n\t        var nextRingIndex = 1 + ring;\n\t        var nextSliceIndex = 1 + slice;\n\t        indices.push(radialParts * slice + ring, radialParts * nextSliceIndex + ring, radialParts * slice + nextRingIndex);\n\t        indices.push(radialParts * nextSliceIndex + ring, radialParts * nextSliceIndex + nextRingIndex, radialParts * slice + nextRingIndex);\n\t      }\n\t    }\n\n\t    return {\n\t      position: positions,\n\t      normal: normals,\n\t      texcoord: texcoords,\n\t      indices: indices\n\t    };\n\t  }\n\n\t  /**\n\t   * Creates a disc BufferInfo. The disc will be in the xz plane, centered at\n\t   * the origin. When creating, at least 3 divisions, or pie\n\t   * pieces, need to be specified, otherwise the triangles making\n\t   * up the disc will be degenerate. You can also specify the\n\t   * number of radial pieces `stacks`. A value of 1 for\n\t   * stacks will give you a simple disc of pie pieces.  If you\n\t   * want to create an annulus you can set `innerRadius` to a\n\t   * value > 0. Finally, `stackPower` allows you to have the widths\n\t   * increase or decrease as you move away from the center. This\n\t   * is particularly useful when using the disc as a ground plane\n\t   * with a fixed camera such that you don't need the resolution\n\t   * of small triangles near the perimeter. For example, a value\n\t   * of 2 will produce stacks whose ouside radius increases with\n\t   * the square of the stack index. A value of 1 will give uniform\n\t   * stacks.\n\t   *\n\t   * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n\t   * @param {number} radius Radius of the ground plane.\n\t   * @param {number} divisions Number of triangles in the ground plane (at least 3).\n\t   * @param {number} [stacks] Number of radial divisions (default=1).\n\t   * @param {number} [innerRadius] Default 0.\n\t   * @param {number} [stackPower] Power to raise stack size to for decreasing width.\n\t   * @return {module:twgl.BufferInfo} The created BufferInfo.\n\t   * @memberOf module:twgl/primitives\n\t   * @function createDiscBufferInfo\n\t   */\n\n\t  /**\n\t   * Creates disc buffers. The disc will be in the xz plane, centered at\n\t   * the origin. When creating, at least 3 divisions, or pie\n\t   * pieces, need to be specified, otherwise the triangles making\n\t   * up the disc will be degenerate. You can also specify the\n\t   * number of radial pieces `stacks`. A value of 1 for\n\t   * stacks will give you a simple disc of pie pieces.  If you\n\t   * want to create an annulus you can set `innerRadius` to a\n\t   * value > 0. Finally, `stackPower` allows you to have the widths\n\t   * increase or decrease as you move away from the center. This\n\t   * is particularly useful when using the disc as a ground plane\n\t   * with a fixed camera such that you don't need the resolution\n\t   * of small triangles near the perimeter. For example, a value\n\t   * of 2 will produce stacks whose ouside radius increases with\n\t   * the square of the stack index. A value of 1 will give uniform\n\t   * stacks.\n\t   *\n\t   * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n\t   * @param {number} radius Radius of the ground plane.\n\t   * @param {number} divisions Number of triangles in the ground plane (at least 3).\n\t   * @param {number} [stacks] Number of radial divisions (default=1).\n\t   * @param {number} [innerRadius] Default 0.\n\t   * @param {number} [stackPower] Power to raise stack size to for decreasing width.\n\t   * @return {Object.<string, WebGLBuffer>} The created buffers.\n\t   * @memberOf module:twgl/primitives\n\t   * @function createDiscBuffers\n\t   */\n\n\t  /**\n\t   * Creates disc vertices. The disc will be in the xz plane, centered at\n\t   * the origin. When creating, at least 3 divisions, or pie\n\t   * pieces, need to be specified, otherwise the triangles making\n\t   * up the disc will be degenerate. You can also specify the\n\t   * number of radial pieces `stacks`. A value of 1 for\n\t   * stacks will give you a simple disc of pie pieces.  If you\n\t   * want to create an annulus you can set `innerRadius` to a\n\t   * value > 0. Finally, `stackPower` allows you to have the widths\n\t   * increase or decrease as you move away from the center. This\n\t   * is particularly useful when using the disc as a ground plane\n\t   * with a fixed camera such that you don't need the resolution\n\t   * of small triangles near the perimeter. For example, a value\n\t   * of 2 will produce stacks whose ouside radius increases with\n\t   * the square of the stack index. A value of 1 will give uniform\n\t   * stacks.\n\t   *\n\t   * @param {number} radius Radius of the ground plane.\n\t   * @param {number} divisions Number of triangles in the ground plane (at least 3).\n\t   * @param {number} [stacks] Number of radial divisions (default=1).\n\t   * @param {number} [innerRadius] Default 0.\n\t   * @param {number} [stackPower] Power to raise stack size to for decreasing width.\n\t   * @return {Object.<string, TypedArray>} The created vertices.\n\t   * @memberOf module:twgl/primitives\n\t   */\n\t  function createDiscVertices(radius, divisions, stacks, innerRadius, stackPower) {\n\t    if (divisions < 3) {\n\t      throw Error('divisions must be at least 3');\n\t    }\n\n\t    stacks = stacks ? stacks : 1;\n\t    stackPower = stackPower ? stackPower : 1;\n\t    innerRadius = innerRadius ? innerRadius : 0;\n\n\t    // Note: We don't share the center vertex because that would\n\t    // mess up texture coordinates.\n\t    var numVertices = (divisions + 1) * (stacks + 1);\n\n\t    var positions = createAugmentedTypedArray(3, numVertices);\n\t    var normals = createAugmentedTypedArray(3, numVertices);\n\t    var texcoords = createAugmentedTypedArray(2, numVertices);\n\t    var indices = createAugmentedTypedArray(3, stacks * divisions * 2, Uint16Array);\n\n\t    var firstIndex = 0;\n\t    var radiusSpan = radius - innerRadius;\n\t    var pointsPerStack = divisions + 1;\n\n\t    // Build the disk one stack at a time.\n\t    for (var stack = 0; stack <= stacks; ++stack) {\n\t      var stackRadius = innerRadius + radiusSpan * Math.pow(stack / stacks, stackPower);\n\n\t      for (var i = 0; i <= divisions; ++i) {\n\t        var theta = 2.0 * Math.PI * i / divisions;\n\t        var x = stackRadius * Math.cos(theta);\n\t        var z = stackRadius * Math.sin(theta);\n\n\t        positions.push(x, 0, z);\n\t        normals.push(0, 1, 0);\n\t        texcoords.push(1 - i / divisions, stack / stacks);\n\t        if (stack > 0 && i !== divisions) {\n\t          // a, b, c and d are the indices of the vertices of a quad.  unless\n\t          // the current stack is the one closest to the center, in which case\n\t          // the vertices a and b connect to the center vertex.\n\t          var a = firstIndex + (i + 1);\n\t          var b = firstIndex + i;\n\t          var c = firstIndex + i - pointsPerStack;\n\t          var d = firstIndex + (i + 1) - pointsPerStack;\n\n\t          // Make a quad of the vertices a, b, c, d.\n\t          indices.push(a, b, c);\n\t          indices.push(a, c, d);\n\t        }\n\t      }\n\n\t      firstIndex += divisions + 1;\n\t    }\n\n\t    return {\n\t      position: positions,\n\t      normal: normals,\n\t      texcoord: texcoords,\n\t      indices: indices\n\t    };\n\t  }\n\n\t  /**\n\t   * creates a random integer between 0 and range - 1 inclusive.\n\t   * @param {number} range\n\t   * @return {number} random value between 0 and range - 1 inclusive.\n\t   */\n\t  function randInt(range) {\n\t    return Math.random() * range | 0;\n\t  }\n\n\t  /**\n\t   * Used to supply random colors\n\t   * @callback RandomColorFunc\n\t   * @param {number} ndx index of triangle/quad if unindexed or index of vertex if indexed\n\t   * @param {number} channel 0 = red, 1 = green, 2 = blue, 3 = alpha\n\t   * @return {number} a number from 0 to 255\n\t   * @memberOf module:twgl/primitives\n\t   */\n\n\t  /**\n\t   * @typedef {Object} RandomVerticesOptions\n\t   * @property {number} [vertsPerColor] Defaults to 3 for non-indexed vertices\n\t   * @property {module:twgl/primitives.RandomColorFunc} [rand] A function to generate random numbers\n\t   * @memberOf module:twgl/primitives\n\t   */\n\n\t  /**\n\t   * Creates an augmentedTypedArray of random vertex colors.\n\t   * If the vertices are indexed (have an indices array) then will\n\t   * just make random colors. Otherwise assumes they are triangles\n\t   * and makes one random color for every 3 vertices.\n\t   * @param {Object.<string, augmentedTypedArray>} vertices Vertices as returned from one of the createXXXVertices functions.\n\t   * @param {module:twgl/primitives.RandomVerticesOptions} [options] options.\n\t   * @return {Object.<string, augmentedTypedArray>} same vertices as passed in with `color` added.\n\t   * @memberOf module:twgl/primitives\n\t   */\n\t  function makeRandomVertexColors(vertices, options) {\n\t    options = options || {};\n\t    var numElements = vertices.position.numElements;\n\t    var vcolors = createAugmentedTypedArray(4, numElements, Uint8Array);\n\t    var rand = options.rand || function (ndx, channel) {\n\t      return channel < 3 ? randInt(256) : 255;\n\t    };\n\t    vertices.color = vcolors;\n\t    if (vertices.indices) {\n\t      // just make random colors if index\n\t      for (var ii = 0; ii < numElements; ++ii) {\n\t        vcolors.push(rand(ii, 0), rand(ii, 1), rand(ii, 2), rand(ii, 3));\n\t      }\n\t    } else {\n\t      // make random colors per triangle\n\t      var numVertsPerColor = options.vertsPerColor || 3;\n\t      var numSets = numElements / numVertsPerColor;\n\t      for (var ii = 0; ii < numSets; ++ii) {\n\t        // eslint-disable-line\n\t        var color = [rand(ii, 0), rand(ii, 1), rand(ii, 2), rand(ii, 3)];\n\t        for (var jj = 0; jj < numVertsPerColor; ++jj) {\n\t          vcolors.push(color);\n\t        }\n\t      }\n\t    }\n\t    return vertices;\n\t  }\n\n\t  /**\n\t   * creates a function that calls fn to create vertices and then\n\t   * creates a buffers for them\n\t   */\n\t  function createBufferFunc(fn) {\n\t    return function (gl) {\n\t      var arrays = fn.apply(this, Array.prototype.slice.call(arguments, 1));\n\t      return attributes.createBuffersFromArrays(gl, arrays);\n\t    };\n\t  }\n\n\t  /**\n\t   * creates a function that calls fn to create vertices and then\n\t   * creates a bufferInfo object for them\n\t   */\n\t  function createBufferInfoFunc(fn) {\n\t    return function (gl) {\n\t      var arrays = fn.apply(null, Array.prototype.slice.call(arguments, 1));\n\t      return attributes.createBufferInfoFromArrays(gl, arrays);\n\t    };\n\t  }\n\n\t  var arraySpecPropertyNames = [\"numComponents\", \"size\", \"type\", \"normalize\", \"stride\", \"offset\", \"attrib\", \"name\", \"attribName\"];\n\n\t  /**\n\t   * Copy elements from one array to another\n\t   *\n\t   * @param {Array|TypedArray} src source array\n\t   * @param {Array|TypedArray} dst dest array\n\t   * @param {number} dstNdx index in dest to copy src\n\t   * @param {number} [offset] offset to add to copied values\n\t   */\n\t  function copyElements(src, dst, dstNdx, offset) {\n\t    offset = offset || 0;\n\t    var length = src.length;\n\t    for (var ii = 0; ii < length; ++ii) {\n\t      dst[dstNdx + ii] = src[ii] + offset;\n\t    }\n\t  }\n\n\t  /**\n\t   * Creates an array of the same time\n\t   *\n\t   * @param {(number[]|ArrayBuffer|module:twgl.FullArraySpec)} srcArray array who's type to copy\n\t   * @param {number} length size of new array\n\t   * @return {(number[]|ArrayBuffer|module:twgl.FullArraySpec)} array with same type as srcArray\n\t   */\n\t  function createArrayOfSameType(srcArray, length) {\n\t    var arraySrc = getArray(srcArray);\n\t    var newArray = new arraySrc.constructor(length);\n\t    var newArraySpec = newArray;\n\t    // If it appears to have been augmented make new one augemented\n\t    if (arraySrc.numComponents && arraySrc.numElements) {\n\t      augmentTypedArray(newArray, arraySrc.numComponents);\n\t    }\n\t    // If it was a fullspec make new one a fullspec\n\t    if (srcArray.data) {\n\t      newArraySpec = {\n\t        data: newArray\n\t      };\n\t      utils.copyNamedProperties(arraySpecPropertyNames, srcArray, newArraySpec);\n\t    }\n\t    return newArraySpec;\n\t  }\n\n\t  /**\n\t   * Concatinates sets of vertices\n\t   *\n\t   * Assumes the vertices match in composition. For example\n\t   * if one set of vertices has positions, normals, and indices\n\t   * all sets of vertices must have positions, normals, and indices\n\t   * and of the same type.\n\t   *\n\t   * Example:\n\t   *\n\t   *      var cubeVertices = twgl.primtiives.createCubeVertices(2);\n\t   *      var sphereVertices = twgl.primitives.createSphereVertices(1, 10, 10);\n\t   *      // move the sphere 2 units up\n\t   *      twgl.primitives.reorientVertices(\n\t   *          sphereVertices, twgl.m4.translation([0, 2, 0]));\n\t   *      // merge the sphere with the cube\n\t   *      var cubeSphereVertices = twgl.primitives.concatVertices(\n\t   *          [cubeVertices, sphereVertices]);\n\t   *      // turn them into WebGL buffers and attrib data\n\t   *      var bufferInfo = twgl.createBufferInfoFromArrays(gl, cubeSphereVertices);\n\t   *\n\t   * @param {module:twgl.Arrays[]} arrays Array of arrays of vertices\n\t   * @return {module:twgl.Arrays} The concatinated vertices.\n\t   * @memberOf module:twgl/primitives\n\t   */\n\t  function concatVertices(arrayOfArrays) {\n\t    var names = {};\n\t    var baseName;\n\t    // get names of all arrays.\n\t    // and numElements for each set of vertices\n\t    for (var ii = 0; ii < arrayOfArrays.length; ++ii) {\n\t      var arrays = arrayOfArrays[ii];\n\t      Object.keys(arrays).forEach(function (name) {\n\t        // eslint-disable-line\n\t        if (!names[name]) {\n\t          names[name] = [];\n\t        }\n\t        if (!baseName && name !== 'indices') {\n\t          baseName = name;\n\t        }\n\t        var arrayInfo = arrays[name];\n\t        var numComponents = getNumComponents(arrayInfo, name);\n\t        var array = getArray(arrayInfo);\n\t        var numElements = array.length / numComponents;\n\t        names[name].push(numElements);\n\t      });\n\t    }\n\n\t    // compute length of combined array\n\t    // and return one for reference\n\t    function getLengthOfCombinedArrays(name) {\n\t      var length = 0;\n\t      var arraySpec;\n\t      for (var ii = 0; ii < arrayOfArrays.length; ++ii) {\n\t        var arrays = arrayOfArrays[ii];\n\t        var arrayInfo = arrays[name];\n\t        var array = getArray(arrayInfo);\n\t        length += array.length;\n\t        if (!arraySpec || arrayInfo.data) {\n\t          arraySpec = arrayInfo;\n\t        }\n\t      }\n\t      return {\n\t        length: length,\n\t        spec: arraySpec\n\t      };\n\t    }\n\n\t    function copyArraysToNewArray(name, base, newArray) {\n\t      var baseIndex = 0;\n\t      var offset = 0;\n\t      for (var ii = 0; ii < arrayOfArrays.length; ++ii) {\n\t        var arrays = arrayOfArrays[ii];\n\t        var arrayInfo = arrays[name];\n\t        var array = getArray(arrayInfo);\n\t        if (name === 'indices') {\n\t          copyElements(array, newArray, offset, baseIndex);\n\t          baseIndex += base[ii];\n\t        } else {\n\t          copyElements(array, newArray, offset);\n\t        }\n\t        offset += array.length;\n\t      }\n\t    }\n\n\t    var base = names[baseName];\n\n\t    var newArrays = {};\n\t    Object.keys(names).forEach(function (name) {\n\t      var info = getLengthOfCombinedArrays(name);\n\t      var newArraySpec = createArrayOfSameType(info.spec, info.length);\n\t      copyArraysToNewArray(name, base, getArray(newArraySpec));\n\t      newArrays[name] = newArraySpec;\n\t    });\n\t    return newArrays;\n\t  }\n\n\t  /**\n\t   * Creates a duplicate set of vertices\n\t   *\n\t   * This is useful for calling reorientVertices when you\n\t   * also want to keep the original available\n\t   *\n\t   * @param {module:twgl.Arrays} arrays of vertices\n\t   * @return {module:twgl.Arrays} The dupilicated vertices.\n\t   * @memberOf module:twgl/primitives\n\t   */\n\t  function duplicateVertices(arrays) {\n\t    var newArrays = {};\n\t    Object.keys(arrays).forEach(function (name) {\n\t      var arraySpec = arrays[name];\n\t      var srcArray = getArray(arraySpec);\n\t      var newArraySpec = createArrayOfSameType(arraySpec, srcArray.length);\n\t      copyElements(srcArray, getArray(newArraySpec), 0);\n\t      newArrays[name] = newArraySpec;\n\t    });\n\t    return newArrays;\n\t  }\n\n\t  // Using quotes prevents Uglify from changing the names.\n\t  // No speed diff AFAICT.\n\t  return {\n\t    \"create3DFBufferInfo\": createBufferInfoFunc(create3DFVertices),\n\t    \"create3DFBuffers\": createBufferFunc(create3DFVertices),\n\t    \"create3DFVertices\": create3DFVertices,\n\t    \"createAugmentedTypedArray\": createAugmentedTypedArray,\n\t    \"createCubeBufferInfo\": createBufferInfoFunc(createCubeVertices),\n\t    \"createCubeBuffers\": createBufferFunc(createCubeVertices),\n\t    \"createCubeVertices\": createCubeVertices,\n\t    \"createPlaneBufferInfo\": createBufferInfoFunc(createPlaneVertices),\n\t    \"createPlaneBuffers\": createBufferFunc(createPlaneVertices),\n\t    \"createPlaneVertices\": createPlaneVertices,\n\t    \"createSphereBufferInfo\": createBufferInfoFunc(createSphereVertices),\n\t    \"createSphereBuffers\": createBufferFunc(createSphereVertices),\n\t    \"createSphereVertices\": createSphereVertices,\n\t    \"createTruncatedConeBufferInfo\": createBufferInfoFunc(createTruncatedConeVertices),\n\t    \"createTruncatedConeBuffers\": createBufferFunc(createTruncatedConeVertices),\n\t    \"createTruncatedConeVertices\": createTruncatedConeVertices,\n\t    \"createXYQuadBufferInfo\": createBufferInfoFunc(createXYQuadVertices),\n\t    \"createXYQuadBuffers\": createBufferFunc(createXYQuadVertices),\n\t    \"createXYQuadVertices\": createXYQuadVertices,\n\t    \"createCresentBufferInfo\": createBufferInfoFunc(createCresentVertices),\n\t    \"createCresentBuffers\": createBufferFunc(createCresentVertices),\n\t    \"createCresentVertices\": createCresentVertices,\n\t    \"createCylinderBufferInfo\": createBufferInfoFunc(createCylinderVertices),\n\t    \"createCylinderBuffers\": createBufferFunc(createCylinderVertices),\n\t    \"createCylinderVertices\": createCylinderVertices,\n\t    \"createTorusBufferInfo\": createBufferInfoFunc(createTorusVertices),\n\t    \"createTorusBuffers\": createBufferFunc(createTorusVertices),\n\t    \"createTorusVertices\": createTorusVertices,\n\t    \"createDiscBufferInfo\": createBufferInfoFunc(createDiscVertices),\n\t    \"createDiscBuffers\": createBufferFunc(createDiscVertices),\n\t    \"createDiscVertices\": createDiscVertices,\n\t    \"deindexVertices\": deindexVertices,\n\t    \"flattenNormals\": flattenNormals,\n\t    \"makeRandomVertexColors\": makeRandomVertexColors,\n\t    \"reorientDirections\": reorientDirections,\n\t    \"reorientNormals\": reorientNormals,\n\t    \"reorientPositions\": reorientPositions,\n\t    \"reorientVertices\": reorientVertices,\n\t    \"concatVertices\": concatVertices,\n\t    \"duplicateVertices\": duplicateVertices\n\t  };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }\n/******/ ])\n});\n;\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * @fileoverview gl-matrix - High performance matrix and vector operations\n * @author Brandon Jones\n * @author Colin MacKenzie IV\n * @version 2.3.2\n */\n\n/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n// END HEADER\n\nexports.glMatrix = __webpack_require__(1);\nexports.mat2 = __webpack_require__(21);\nexports.mat2d = __webpack_require__(22);\nexports.mat3 = __webpack_require__(11);\nexports.mat4 = __webpack_require__(23);\nexports.quat = __webpack_require__(24);\nexports.vec2 = __webpack_require__(25);\nexports.vec3 = __webpack_require__(12);\nexports.vec4 = __webpack_require__(13);\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar constants_1 = __webpack_require__(0);\r\nvar Transform_1 = __webpack_require__(7);\r\nvar twgl = __webpack_require__(4);\r\nvar IndexBuffer_1 = __webpack_require__(27);\r\nvar POS_OFFSET_1X = 0;\r\nvar POS_OFFSET_1Y = POS_OFFSET_1X + 1;\r\nvar POS_OFFSET_2X = constants_1.VERTEX_SIZE_SHORT;\r\nvar POS_OFFSET_2Y = POS_OFFSET_2X + 1;\r\nvar POS_OFFSET_3X = constants_1.VERTEX_SIZE_SHORT * 2;\r\nvar POS_OFFSET_3Y = POS_OFFSET_3X + 1;\r\nvar POS_OFFSET_4X = constants_1.VERTEX_SIZE_SHORT * 3;\r\nvar POS_OFFSET_4Y = POS_OFFSET_4X + 1;\r\nvar Z_OFFSET_1 = constants_1.OFFSET_Z_INDEX;\r\nvar Z_OFFSET_2 = constants_1.VERTEX_SIZE + constants_1.OFFSET_Z_INDEX;\r\nvar Z_OFFSET_3 = constants_1.VERTEX_SIZE * 2 + constants_1.OFFSET_Z_INDEX;\r\nvar Z_OFFSET_4 = constants_1.VERTEX_SIZE * 3 + constants_1.OFFSET_Z_INDEX;\r\nvar PAL_OFFSET_1 = constants_1.OFFSET_PAL_SHIFT;\r\nvar PAL_OFFSET_2 = constants_1.VERTEX_SIZE + constants_1.OFFSET_PAL_SHIFT;\r\nvar PAL_OFFSET_3 = constants_1.VERTEX_SIZE * 2 + constants_1.OFFSET_PAL_SHIFT;\r\nvar PAL_OFFSET_4 = constants_1.VERTEX_SIZE * 3 + constants_1.OFFSET_PAL_SHIFT;\r\nvar UV_OFFSET_1X = constants_1.OFFSET_UV;\r\nvar UV_OFFSET_1Y = UV_OFFSET_1X + 1;\r\nvar UV_OFFSET_2X = constants_1.VERTEX_SIZE + constants_1.OFFSET_UV;\r\nvar UV_OFFSET_2Y = UV_OFFSET_2X + 1;\r\nvar UV_OFFSET_3X = constants_1.VERTEX_SIZE * 2 + constants_1.OFFSET_UV;\r\nvar UV_OFFSET_3Y = UV_OFFSET_3X + 1;\r\nvar UV_OFFSET_4X = constants_1.VERTEX_SIZE * 3 + constants_1.OFFSET_UV;\r\nvar UV_OFFSET_4Y = UV_OFFSET_4X + 1;\r\nvar BufferedSprite = (function () {\r\n    function BufferedSprite(_id, _buffer, transform, options) {\r\n        this._id = _id;\r\n        this._buffer = _buffer;\r\n        this.tag = {};\r\n        this._isDirty = true;\r\n        this._transform = transform || new Transform_1.Transform2d();\r\n        if (options) {\r\n            _buffer.setAttributes(_id, options.x, options.y, options.x + options.w, options.y + options.h, options.textureX, options.textureY, options.textureX + options.w, options.textureY + options.h, options.z, options.palOffset);\r\n        }\r\n        this._options = options || _buffer.getAttributeInfo(_id);\r\n    }\r\n    Object.defineProperty(BufferedSprite.prototype, \"transform\", {\r\n        get: function () {\r\n            return this._transform;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(BufferedSprite.prototype, \"isDirty\", {\r\n        get: function () {\r\n            return this._isDirty;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(BufferedSprite.prototype, \"x\", {\r\n        get: function () {\r\n            return this._options.x;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(BufferedSprite.prototype, \"y\", {\r\n        get: function () {\r\n            return this._options.y;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    // setAttribute(key: AttributeKey, value: any){\r\n    //     this._isDirty = true;\r\n    //     this._options[key] = value;\r\n    // }\r\n    BufferedSprite.prototype.update = function () {\r\n        if (this._transform.isDirty || this._isDirty) {\r\n            var a = this._options;\r\n            var m = this._transform.matrix;\r\n            var id = this._id;\r\n            this._buffer.setPositionTransformed(id, a.x, a.y, a.x + a.w, a.y + a.h, m);\r\n            this._buffer.setZ(id, a.z || 1);\r\n            this._buffer.setPalShift(id, a.palOffset || 0);\r\n            this._buffer.setUv(id, a.textureX, a.textureY, a.textureX + a.w, a.textureY + a.h);\r\n            this._isDirty = false;\r\n        }\r\n    };\r\n    BufferedSprite.prototype.center = function () {\r\n        this._transform.ox = this._options.x + this._options.w / 2;\r\n        this._transform.oy = this._options.y + this._options.h / 2;\r\n    };\r\n    return BufferedSprite;\r\n}());\r\nvar QuadBuffer = (function () {\r\n    function QuadBuffer(_gl, _capacity) {\r\n        if (_capacity === void 0) { _capacity = 16; }\r\n        this._gl = _gl;\r\n        this._capacity = _capacity;\r\n        this._dirty_start = constants_1.HUGE;\r\n        this._dirty_end = 0;\r\n        this._data = new ArrayBuffer(_capacity * constants_1.VERTICES_QUAD * constants_1.VERTEX_SIZE);\r\n        this._shortView = new Uint16Array(this._data);\r\n        this._byteView = new Uint8Array(this._data);\r\n        this._indices = new Uint16Array(_capacity * constants_1.INDICES_QUAD);\r\n        //this._createIndices();        \r\n    }\r\n    Object.defineProperty(QuadBuffer.prototype, \"isDirty\", {\r\n        get: function () {\r\n            return (this._dirty_end - this._dirty_start) > 0;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(QuadBuffer.prototype, \"bufferInfo\", {\r\n        get: function () {\r\n            if (!this._bufferInfo)\r\n                throw \"Buffer not created. Did you forget to call create(...)?\";\r\n            return this._bufferInfo;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(QuadBuffer.prototype, \"capacity\", {\r\n        get: function () {\r\n            return this._capacity;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(QuadBuffer.prototype, \"size\", {\r\n        get: function () {\r\n            return this._range;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(QuadBuffer.prototype, \"vertexSize\", {\r\n        get: function () {\r\n            return this._range * constants_1.INDICES_QUAD;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    // protected get range(){\r\n    //     return this._range;\r\n    // }\r\n    QuadBuffer.prototype.update = function () {\r\n        if (this._sprites) {\r\n            this._sprites.forEach(function (s) { return s.update(); });\r\n        }\r\n        if (this.isDirty) {\r\n            var gl = this._gl;\r\n            var buffer = this.bufferInfo.attribs[\"position\"].buffer;\r\n            var data = new Uint8Array(this._data, this._dirty_start, this._dirty_end - this._dirty_start);\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\r\n            gl.bufferSubData(gl.ARRAY_BUFFER, this._dirty_start, data);\r\n            this._dirty_start = constants_1.HUGE;\r\n            this._dirty_end = 0;\r\n        }\r\n    };\r\n    QuadBuffer.prototype.destroy = function () {\r\n        this._gl.deleteBuffer(this._bufferInfo.attribs[\"position\"].buffer);\r\n        this._gl.deleteBuffer(this._bufferInfo.attribs[\"texcoord\"].buffer);\r\n        this._gl.deleteBuffer(this._bufferInfo.attribs[\"indices\"].buffer);\r\n        this._indices = null;\r\n        this._shortView = null;\r\n        this._byteView = null;\r\n        this._data = null;\r\n    };\r\n    Object.defineProperty(QuadBuffer.prototype, \"range\", {\r\n        set: function (value) {\r\n            this._range = value;\r\n            if (this._bufferInfo) {\r\n                this._bufferInfo.numElements = value * constants_1.INDICES_QUAD;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    QuadBuffer.prototype.create = function () {\r\n        var packedBuffer = twgl.createBufferFromTypedArray(this._gl, this._data, this._gl.ARRAY_BUFFER, this._gl.DYNAMIC_DRAW);\r\n        var indexBuffer = new IndexBuffer_1.IndexBuffer(this._gl);\r\n        this._bufferInfo = {\r\n            numElements: this._range ? this._range * constants_1.INDICES_QUAD : this._indices.length,\r\n            indices: indexBuffer.buffer,\r\n            elementType: indexBuffer.elementType,\r\n            attribs: {\r\n                position: {\r\n                    buffer: packedBuffer,\r\n                    numComponents: constants_1.COMP_POS,\r\n                    type: this._gl.UNSIGNED_SHORT,\r\n                    stride: constants_1.VERTEX_SIZE,\r\n                    offset: 0\r\n                },\r\n                z_index: {\r\n                    buffer: packedBuffer,\r\n                    numComponents: constants_1.COMP_Z_INDEX,\r\n                    type: this._gl.UNSIGNED_BYTE,\r\n                    stride: constants_1.VERTEX_SIZE,\r\n                    offset: constants_1.OFFSET_Z_INDEX,\r\n                    normalize: false\r\n                },\r\n                pal_shift: {\r\n                    buffer: packedBuffer,\r\n                    numComponents: constants_1.COMP_PAL_PAL_SHIFT,\r\n                    type: this._gl.UNSIGNED_BYTE,\r\n                    stride: constants_1.VERTEX_SIZE,\r\n                    offset: constants_1.OFFSET_PAL_SHIFT,\r\n                    normalize: true\r\n                },\r\n                texcoord: {\r\n                    buffer: packedBuffer,\r\n                    numComponents: constants_1.COMP_UV,\r\n                    type: this._gl.UNSIGNED_BYTE,\r\n                    stride: constants_1.VERTEX_SIZE,\r\n                    offset: constants_1.OFFSET_UV,\r\n                    normalize: false\r\n                },\r\n            },\r\n        };\r\n        this._range = 0;\r\n        this._dirty_start = constants_1.HUGE;\r\n        this._dirty_end = 0;\r\n        return this;\r\n    };\r\n    QuadBuffer.prototype.setPosition = function (id, x1, y1, x2, y2) {\r\n        var start = id * constants_1.QUAD_SIZE_SHORT;\r\n        var pos = this._shortView;\r\n        pos[start + POS_OFFSET_1X] = x1;\r\n        pos[start + POS_OFFSET_1Y] = y1;\r\n        pos[start + POS_OFFSET_2X] = x2;\r\n        pos[start + POS_OFFSET_2Y] = y1;\r\n        pos[start + POS_OFFSET_3X] = x2;\r\n        pos[start + POS_OFFSET_3Y] = y2;\r\n        pos[start + POS_OFFSET_4X] = x1;\r\n        pos[start + POS_OFFSET_4Y] = y2;\r\n        this.setQuadDirty(start);\r\n    };\r\n    QuadBuffer.prototype.setPositionTransformed = function (id, x1, y1, x2, y2, m) {\r\n        var start = id * constants_1.QUAD_SIZE_SHORT;\r\n        var pos = this._shortView;\r\n        pos[start + POS_OFFSET_1X] = m[0] * x1 + m[4] * y1 + m[12];\r\n        pos[start + POS_OFFSET_1Y] = m[1] * x1 + m[5] * y1 + m[13];\r\n        pos[start + POS_OFFSET_2X] = m[0] * x2 + m[4] * y1 + m[12];\r\n        pos[start + POS_OFFSET_2Y] = m[1] * x2 + m[5] * y1 + m[13];\r\n        pos[start + POS_OFFSET_3X] = m[0] * x2 + m[4] * y2 + m[12];\r\n        pos[start + POS_OFFSET_3Y] = m[1] * x2 + m[5] * y2 + m[13];\r\n        pos[start + POS_OFFSET_4X] = m[0] * x1 + m[4] * y2 + m[12];\r\n        pos[start + POS_OFFSET_4Y] = m[1] * x1 + m[5] * y2 + m[13];\r\n    };\r\n    QuadBuffer.prototype.setUv = function (id, x1, y1, x2, y2) {\r\n        var start = id * constants_1.QUAD_SIZE;\r\n        var bytes = this._byteView;\r\n        bytes[start + UV_OFFSET_1X] = x1;\r\n        bytes[start + UV_OFFSET_1Y] = y1;\r\n        bytes[start + UV_OFFSET_2X] = x2 - 1;\r\n        bytes[start + UV_OFFSET_2Y] = y1;\r\n        bytes[start + UV_OFFSET_3X] = x2 - 1;\r\n        bytes[start + UV_OFFSET_3Y] = y2 - 1;\r\n        bytes[start + UV_OFFSET_4X] = x1;\r\n        bytes[start + UV_OFFSET_4Y] = y2 - 1;\r\n        this.setQuadDirty(start);\r\n    };\r\n    QuadBuffer.prototype.setPalShift = function (id, pal) {\r\n        var start = id * constants_1.QUAD_SIZE;\r\n        var bytes = this._byteView;\r\n        bytes[start + PAL_OFFSET_1] = pal;\r\n        bytes[start + PAL_OFFSET_2] = pal;\r\n        bytes[start + PAL_OFFSET_3] = pal;\r\n        bytes[start + PAL_OFFSET_4] = pal;\r\n        this.setQuadDirty(start);\r\n    };\r\n    QuadBuffer.prototype.getPalShift = function (id) {\r\n        return this._byteView[id * constants_1.QUAD_SIZE + PAL_OFFSET_1];\r\n    };\r\n    QuadBuffer.prototype.setZ = function (id, z) {\r\n        var start = id * constants_1.QUAD_SIZE;\r\n        var bytes = this._byteView;\r\n        bytes[start + Z_OFFSET_1] = z;\r\n        bytes[start + Z_OFFSET_2] = z;\r\n        bytes[start + Z_OFFSET_3] = z;\r\n        bytes[start + Z_OFFSET_4] = z;\r\n        this.setQuadDirty(start);\r\n    };\r\n    QuadBuffer.prototype.getZ = function (id) {\r\n        return this._byteView[id * constants_1.QUAD_SIZE + Z_OFFSET_1];\r\n    };\r\n    QuadBuffer.prototype.setAttributes = function (id, x1, y1, x2, y2, uvx1, uvy1, uvx2, uvy2, z, pal) {\r\n        var startShort = id * constants_1.QUAD_SIZE_SHORT;\r\n        var startByte = id * constants_1.QUAD_SIZE;\r\n        var shorts = this._shortView;\r\n        var bytes = this._byteView;\r\n        shorts[startShort + POS_OFFSET_1X] = x1;\r\n        shorts[startShort + POS_OFFSET_1Y] = y1;\r\n        bytes[startByte + Z_OFFSET_1] = z;\r\n        bytes[startByte + PAL_OFFSET_1] = pal;\r\n        bytes[startByte + UV_OFFSET_1X] = uvx1;\r\n        bytes[startByte + UV_OFFSET_1Y] = uvy1;\r\n        shorts[startShort + POS_OFFSET_2X] = x2;\r\n        shorts[startShort + POS_OFFSET_2Y] = y1;\r\n        bytes[startByte + Z_OFFSET_2] = z;\r\n        bytes[startByte + PAL_OFFSET_2] = pal;\r\n        bytes[startByte + UV_OFFSET_2X] = uvx2 - 1;\r\n        bytes[startByte + UV_OFFSET_2Y] = uvy1;\r\n        shorts[startShort + POS_OFFSET_3X] = x2;\r\n        shorts[startShort + POS_OFFSET_3Y] = y2;\r\n        bytes[startByte + Z_OFFSET_3] = z;\r\n        bytes[startByte + PAL_OFFSET_3] = pal;\r\n        bytes[startByte + UV_OFFSET_3X] = uvx2 - 1;\r\n        bytes[startByte + UV_OFFSET_3Y] = uvy2 - 1;\r\n        shorts[startShort + POS_OFFSET_4X] = x1;\r\n        shorts[startShort + POS_OFFSET_4Y] = y2;\r\n        bytes[startByte + Z_OFFSET_4] = z;\r\n        bytes[startByte + PAL_OFFSET_4] = pal;\r\n        bytes[startByte + UV_OFFSET_4X] = uvx1;\r\n        bytes[startByte + UV_OFFSET_4Y] = uvy2 - 1;\r\n        this.setQuadDirty(startByte);\r\n    };\r\n    QuadBuffer.prototype.add = function () {\r\n        if (this._range >= this._capacity) {\r\n            this._resize(this._capacity * 2);\r\n        }\r\n        return this._range++;\r\n    };\r\n    QuadBuffer.prototype.addMany = function (amount) {\r\n        var res = [];\r\n        for (var i = 0; i < amount; i++) {\r\n            res.push(this.add());\r\n        }\r\n    };\r\n    QuadBuffer.prototype.getAttributeInfo = function (id) {\r\n        var startShort = id * constants_1.QUAD_SIZE_SHORT;\r\n        var startByte = id * constants_1.QUAD_SIZE;\r\n        var shorts = this._shortView;\r\n        var bytes = this._byteView;\r\n        return {\r\n            x: shorts[startShort + POS_OFFSET_1X],\r\n            y: shorts[startShort + POS_OFFSET_1Y],\r\n            w: shorts[startShort + POS_OFFSET_3X] - shorts[startShort + POS_OFFSET_1X],\r\n            h: shorts[startShort + POS_OFFSET_3Y] - shorts[startShort + POS_OFFSET_1Y],\r\n            z: bytes[startByte + Z_OFFSET_1],\r\n            palOffset: bytes[startByte + PAL_OFFSET_1],\r\n            textureX: bytes[startByte + UV_OFFSET_1X],\r\n            textureY: bytes[startByte + UV_OFFSET_1Y]\r\n        };\r\n    };\r\n    QuadBuffer.prototype.setAttributeBytes = function (id, values) {\r\n        var startByte = id * constants_1.QUAD_SIZE;\r\n        var bytes = this._byteView;\r\n        bytes.set(values, startByte);\r\n        this.setQuadDirty(startByte);\r\n    };\r\n    QuadBuffer.prototype.getAttributeBytes = function (id, values) {\r\n        var startByte = id * constants_1.QUAD_SIZE;\r\n        return new Uint8Array(this._data, startByte, constants_1.QUAD_SIZE);\r\n    };\r\n    QuadBuffer.prototype.clearQuad = function (id) {\r\n        this.setAttributes(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\r\n    };\r\n    QuadBuffer.prototype.setQuadDirty = function (byteOffset) {\r\n        this._dirty_start = Math.min(byteOffset, this._dirty_start);\r\n        this._dirty_end = Math.max(byteOffset + constants_1.QUAD_SIZE, this._dirty_end);\r\n    };\r\n    QuadBuffer.prototype.setAllDirty = function () {\r\n        this._dirty_start = 0;\r\n        this._dirty_end = this._range * constants_1.QUAD_SIZE;\r\n    };\r\n    QuadBuffer.prototype.createSprite = function (id, transform, options) {\r\n        var sprite = new BufferedSprite(id, this, transform, options);\r\n        this._sprites = this._sprites || [];\r\n        this._sprites.push(sprite);\r\n        return sprite;\r\n    };\r\n    QuadBuffer.prototype._resize = function (size) {\r\n        if (size > constants_1.MAX_QUADS)\r\n            throw \"Maximum quads per buffer (\" + constants_1.MAX_QUADS + \") exceeded: \" + size;\r\n        this._capacity = size;\r\n        var buffer = this.bufferInfo.attribs[\"position\"].buffer;\r\n        console.log(\"resize buffer to \" + size);\r\n        var newBuffer = new ArrayBuffer(size * constants_1.QUAD_SIZE);\r\n        var newBytes = new Uint8Array(newBuffer);\r\n        newBytes.set(this._byteView);\r\n        this._shortView = new Uint16Array(newBuffer);\r\n        this._byteView = newBytes;\r\n        this._data = newBuffer;\r\n        this._gl.bindBuffer(this._gl.ARRAY_BUFFER, buffer);\r\n        this._gl.bufferData(this._gl.ARRAY_BUFFER, this._data, this._gl.DYNAMIC_DRAW);\r\n    };\r\n    QuadBuffer.prototype._vec2Transform = function (x, y, m, offset) {\r\n        if (offset === void 0) { offset = 0; }\r\n        this._shortView[offset] = m[0] * x + m[4] * y + m[12];\r\n        this._shortView[offset + 1] = m[1] * x + m[5] * y + m[13];\r\n    };\r\n    return QuadBuffer;\r\n}());\r\nexports.QuadBuffer = QuadBuffer;\r\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar gl_matrix_1 = __webpack_require__(5);\r\nvar Transform2d = (function () {\r\n    function Transform2d() {\r\n        this._dirty = true;\r\n        this._rDirty = true;\r\n        this._matrix = gl_matrix_1.mat4.create();\r\n        this._quat = gl_matrix_1.quat.create();\r\n        this._trans = gl_matrix_1.vec3.fromValues(0, 0, 0);\r\n        this._origin = gl_matrix_1.vec3.fromValues(0, 0, 0);\r\n        this._scale = gl_matrix_1.vec3.fromValues(1, 1, 1);\r\n        this._axis = gl_matrix_1.vec3.fromValues(0, 0, 1);\r\n        this._angle = 0;\r\n    }\r\n    Object.defineProperty(Transform2d.prototype, \"matrix\", {\r\n        get: function () {\r\n            if (this._dirty)\r\n                this._buildMatrix();\r\n            this._buildMatrix();\r\n            return this._matrix;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Transform2d.prototype, \"x\", {\r\n        get: function () {\r\n            return this._trans[0];\r\n        },\r\n        set: function (value) {\r\n            this._trans[0] = value;\r\n            this._dirty = true;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Transform2d.prototype, \"y\", {\r\n        get: function () {\r\n            return this._trans[1];\r\n        },\r\n        set: function (value) {\r\n            this._trans[1] = value;\r\n            this._dirty = true;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Transform2d.prototype, \"z\", {\r\n        get: function () {\r\n            return this._trans[2];\r\n        },\r\n        set: function (value) {\r\n            this._trans[2] = value;\r\n            this._dirty = true;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Transform2d.prototype, \"rot\", {\r\n        get: function () {\r\n            return this._angle;\r\n        },\r\n        set: function (value) {\r\n            this._angle = value;\r\n            this._rDirty = true;\r\n            this._dirty = true;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Transform2d.prototype, \"sx\", {\r\n        get: function () {\r\n            return this._scale[0];\r\n        },\r\n        set: function (value) {\r\n            this._scale[0] = value;\r\n            this._dirty = true;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Transform2d.prototype, \"sy\", {\r\n        get: function () {\r\n            return this._scale[1];\r\n        },\r\n        set: function (value) {\r\n            this._scale[1] = value;\r\n            this._dirty = true;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Transform2d.prototype, \"ox\", {\r\n        get: function () {\r\n            return this._origin[0];\r\n        },\r\n        set: function (value) {\r\n            this._origin[0] = value;\r\n            this._dirty = true;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Transform2d.prototype, \"oy\", {\r\n        get: function () {\r\n            return this._origin[1];\r\n        },\r\n        set: function (value) {\r\n            this._origin[1] = value;\r\n            this._dirty = true;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Transform2d.prototype, \"isDirty\", {\r\n        get: function () {\r\n            return this._dirty;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Transform2d.prototype.update = function () {\r\n        if (this._dirty)\r\n            this._buildMatrix();\r\n    };\r\n    Transform2d.prototype._buildMatrix = function () {\r\n        if (this._rDirty)\r\n            this._buildQuat();\r\n        gl_matrix_1.mat4.fromRotationTranslationScaleOrigin(this._matrix, this._quat, this._trans, this._scale, this._origin);\r\n        this._dirty = false;\r\n    };\r\n    Transform2d.prototype._buildQuat = function () {\r\n        gl_matrix_1.quat.setAxisAngle(this._quat, this._axis, this._angle);\r\n        this._rDirty = false;\r\n    };\r\n    return Transform2d;\r\n}());\r\nexports.Transform2d = Transform2d;\r\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar constants_1 = __webpack_require__(0);\r\nvar twgl = __webpack_require__(4);\r\nvar ColorComponent;\r\n(function (ColorComponent) {\r\n    ColorComponent[ColorComponent[\"R\"] = 0] = \"R\";\r\n    ColorComponent[ColorComponent[\"G\"] = 1] = \"G\";\r\n    ColorComponent[ColorComponent[\"B\"] = 2] = \"B\";\r\n    ColorComponent[ColorComponent[\"A\"] = 3] = \"A\";\r\n})(ColorComponent = exports.ColorComponent || (exports.ColorComponent = {}));\r\nvar PixelTexture = (function () {\r\n    function PixelTexture(_gl) {\r\n        this._gl = _gl;\r\n        this._dirtyStart = constants_1.HUGE;\r\n        this._dirtyEnd = 0;\r\n        this._texdata = new Uint8Array(constants_1.TEXTURE_SIZE * constants_1.TEXTURE_SIZE * this._components);\r\n    }\r\n    Object.defineProperty(PixelTexture.prototype, \"texture\", {\r\n        get: function () {\r\n            if (!this._texture)\r\n                throw \"No texture available. Did you forget to call create(...)?\";\r\n            return this._texture;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    PixelTexture.prototype.getRawData = function () {\r\n        return this._texdata;\r\n    };\r\n    PixelTexture.prototype.setRawData = function (value) {\r\n        this._texdata = value;\r\n        this.setAllDirty();\r\n    };\r\n    Object.defineProperty(PixelTexture.prototype, \"colorDepth\", {\r\n        get: function () {\r\n            switch (this._options.format) {\r\n                case this._gl.RGBA:\r\n                    return 32;\r\n                case this._gl.LUMINANCE:\r\n                case this._gl.ALPHA:\r\n                    return 8;\r\n                case this._gl.RGB:\r\n                    return 24;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    PixelTexture.prototype.setDataFunc = function (func) {\r\n        var tex = this._texdata;\r\n        var f = Math.floor;\r\n        var totalComp = this._components;\r\n        for (var i = 0; i < tex.length; i++) {\r\n            var comp = i % totalComp;\r\n            var pixel = Math.floor((i - comp) / totalComp);\r\n            tex[i] = func(pixel % constants_1.TEXTURE_SIZE, Math.floor(pixel / constants_1.TEXTURE_SIZE), i % totalComp);\r\n        }\r\n        this.setAllDirty();\r\n    };\r\n    PixelTexture.prototype.create = function () {\r\n        this._texture = twgl.createTexture(this._gl, this._options);\r\n        this._dirtyEnd = 0;\r\n        this._dirtyStart = constants_1.HUGE;\r\n        return this;\r\n    };\r\n    PixelTexture.prototype.update = function () {\r\n        var updateLength = this._dirtyEnd - this._dirtyStart;\r\n        if (updateLength > 0) {\r\n            var o = this._options;\r\n            var updateData = new Uint8Array(this._texdata.buffer, this._dirtyStart, updateLength);\r\n            var rowSize = this._components * constants_1.TEXTURE_SIZE;\r\n            var x = 0;\r\n            var y = Math.floor(this._dirtyStart / rowSize);\r\n            var w = 256;\r\n            var h = Math.floor(updateLength / rowSize);\r\n            console.log(x, y, w, h);\r\n            this._gl.bindTexture(o.target, this.texture);\r\n            this._gl.texSubImage2D(o.target, 0, x, y, w, h, o.format, o.type, updateData);\r\n            this._dirtyEnd = 0;\r\n            this._dirtyStart = constants_1.HUGE;\r\n        }\r\n    };\r\n    PixelTexture.prototype.setAllDirty = function () {\r\n        this._dirtyStart = 0;\r\n        this._dirtyEnd = this._texdata.length;\r\n    };\r\n    PixelTexture.prototype.getPixel = function (x, y) {\r\n        var c = this._components;\r\n        var res = new Array(c);\r\n        var offset = (y * constants_1.TEXTURE_SIZE + x) * c;\r\n        for (var i = 0; i < c; i++) {\r\n            res[i] = this._texdata[offset + i];\r\n        }\r\n        return res;\r\n    };\r\n    PixelTexture.prototype.setPixel = function (x, y, color) {\r\n        var c = this._components;\r\n        if (color.length != c)\r\n            throw \"Color needs to be an array with length \" + c;\r\n        var offset = (y * constants_1.TEXTURE_SIZE + x) * c;\r\n        for (var i = 0; i < c; i++) {\r\n            this._texdata[offset + i] = color[i];\r\n        }\r\n        this.setRowDirty(y);\r\n    };\r\n    PixelTexture.prototype.setRowDirty = function (y) {\r\n        var start = y * constants_1.TEXTURE_SIZE * this._components;\r\n        this._dirtyStart = Math.min(this._dirtyStart, start);\r\n        this._dirtyEnd = Math.max(this._dirtyEnd, start + constants_1.TEXTURE_SIZE * this._components);\r\n    };\r\n    return PixelTexture;\r\n}());\r\nexports.PixelTexture = PixelTexture;\r\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nmodule.exports = {\n  2:      'need dictionary',     /* Z_NEED_DICT       2  */\n  1:      'stream end',          /* Z_STREAM_END      1  */\n  0:      '',                    /* Z_OK              0  */\n  '-1':   'file error',          /* Z_ERRNO         (-1) */\n  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */\n  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */\n  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */\n  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */\n  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */\n};\n\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(2);\r\ntslib_1.__exportStar(__webpack_require__(0), exports);\r\ntslib_1.__exportStar(__webpack_require__(26), exports);\r\ntslib_1.__exportStar(__webpack_require__(6), exports);\r\ntslib_1.__exportStar(__webpack_require__(28), exports);\r\ntslib_1.__exportStar(__webpack_require__(29), exports);\r\ntslib_1.__exportStar(__webpack_require__(30), exports);\r\ntslib_1.__exportStar(__webpack_require__(31), exports);\r\ntslib_1.__exportStar(__webpack_require__(7), exports);\r\ntslib_1.__exportStar(__webpack_require__(8), exports);\r\ntslib_1.__exportStar(__webpack_require__(32), exports);\r\ntslib_1.__exportStar(__webpack_require__(33), exports);\r\n\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = __webpack_require__(1);\n\n/**\n * @class 3x3 Matrix\n * @name mat3\n */\nvar mat3 = {};\n\n/**\n * Creates a new identity mat3\n *\n * @returns {mat3} a new 3x3 matrix\n */\nmat3.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(9);\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 1;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n};\n\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {mat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\nmat3.fromMat4 = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[4];\n    out[4] = a[5];\n    out[5] = a[6];\n    out[6] = a[8];\n    out[7] = a[9];\n    out[8] = a[10];\n    return out;\n};\n\n/**\n * Creates a new mat3 initialized with values from an existing matrix\n *\n * @param {mat3} a matrix to clone\n * @returns {mat3} a new 3x3 matrix\n */\nmat3.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(9);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n};\n\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nmat3.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n};\n\n/**\n * Create a new mat3 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} A new mat3\n */\nmat3.fromValues = function(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n    var out = new glMatrix.ARRAY_TYPE(9);\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m10;\n    out[4] = m11;\n    out[5] = m12;\n    out[6] = m20;\n    out[7] = m21;\n    out[8] = m22;\n    return out;\n};\n\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} out\n */\nmat3.set = function(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m10;\n    out[4] = m11;\n    out[5] = m12;\n    out[6] = m20;\n    out[7] = m21;\n    out[8] = m22;\n    return out;\n};\n\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\nmat3.identity = function(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 1;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n};\n\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nmat3.transpose = function(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        var a01 = a[1], a02 = a[2], a12 = a[5];\n        out[1] = a[3];\n        out[2] = a[6];\n        out[3] = a01;\n        out[5] = a[7];\n        out[6] = a02;\n        out[7] = a12;\n    } else {\n        out[0] = a[0];\n        out[1] = a[3];\n        out[2] = a[6];\n        out[3] = a[1];\n        out[4] = a[4];\n        out[5] = a[7];\n        out[6] = a[2];\n        out[7] = a[5];\n        out[8] = a[8];\n    }\n    \n    return out;\n};\n\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nmat3.invert = function(out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8],\n\n        b01 = a22 * a11 - a12 * a21,\n        b11 = -a22 * a10 + a12 * a20,\n        b21 = a21 * a10 - a11 * a20,\n\n        // Calculate the determinant\n        det = a00 * b01 + a01 * b11 + a02 * b21;\n\n    if (!det) { \n        return null; \n    }\n    det = 1.0 / det;\n\n    out[0] = b01 * det;\n    out[1] = (-a22 * a01 + a02 * a21) * det;\n    out[2] = (a12 * a01 - a02 * a11) * det;\n    out[3] = b11 * det;\n    out[4] = (a22 * a00 - a02 * a20) * det;\n    out[5] = (-a12 * a00 + a02 * a10) * det;\n    out[6] = b21 * det;\n    out[7] = (-a21 * a00 + a01 * a20) * det;\n    out[8] = (a11 * a00 - a01 * a10) * det;\n    return out;\n};\n\n/**\n * Calculates the adjugate of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nmat3.adjoint = function(out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8];\n\n    out[0] = (a11 * a22 - a12 * a21);\n    out[1] = (a02 * a21 - a01 * a22);\n    out[2] = (a01 * a12 - a02 * a11);\n    out[3] = (a12 * a20 - a10 * a22);\n    out[4] = (a00 * a22 - a02 * a20);\n    out[5] = (a02 * a10 - a00 * a12);\n    out[6] = (a10 * a21 - a11 * a20);\n    out[7] = (a01 * a20 - a00 * a21);\n    out[8] = (a00 * a11 - a01 * a10);\n    return out;\n};\n\n/**\n * Calculates the determinant of a mat3\n *\n * @param {mat3} a the source matrix\n * @returns {Number} determinant of a\n */\nmat3.determinant = function (a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8];\n\n    return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n};\n\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nmat3.multiply = function (out, a, b) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8],\n\n        b00 = b[0], b01 = b[1], b02 = b[2],\n        b10 = b[3], b11 = b[4], b12 = b[5],\n        b20 = b[6], b21 = b[7], b22 = b[8];\n\n    out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n    out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n    out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n\n    out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n    out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n    out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n\n    out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n    out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n    out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n    return out;\n};\n\n/**\n * Alias for {@link mat3.multiply}\n * @function\n */\nmat3.mul = mat3.multiply;\n\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to translate\n * @param {vec2} v vector to translate by\n * @returns {mat3} out\n */\nmat3.translate = function(out, a, v) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8],\n        x = v[0], y = v[1];\n\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n\n    out[3] = a10;\n    out[4] = a11;\n    out[5] = a12;\n\n    out[6] = x * a00 + y * a10 + a20;\n    out[7] = x * a01 + y * a11 + a21;\n    out[8] = x * a02 + y * a12 + a22;\n    return out;\n};\n\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nmat3.rotate = function (out, a, rad) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8],\n\n        s = Math.sin(rad),\n        c = Math.cos(rad);\n\n    out[0] = c * a00 + s * a10;\n    out[1] = c * a01 + s * a11;\n    out[2] = c * a02 + s * a12;\n\n    out[3] = c * a10 - s * a00;\n    out[4] = c * a11 - s * a01;\n    out[5] = c * a12 - s * a02;\n\n    out[6] = a20;\n    out[7] = a21;\n    out[8] = a22;\n    return out;\n};\n\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\nmat3.scale = function(out, a, v) {\n    var x = v[0], y = v[1];\n\n    out[0] = x * a[0];\n    out[1] = x * a[1];\n    out[2] = x * a[2];\n\n    out[3] = y * a[3];\n    out[4] = y * a[4];\n    out[5] = y * a[5];\n\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n};\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.translate(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {vec2} v Translation vector\n * @returns {mat3} out\n */\nmat3.fromTranslation = function(out, v) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 1;\n    out[5] = 0;\n    out[6] = v[0];\n    out[7] = v[1];\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.rotate(dest, dest, rad);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nmat3.fromRotation = function(out, rad) {\n    var s = Math.sin(rad), c = Math.cos(rad);\n\n    out[0] = c;\n    out[1] = s;\n    out[2] = 0;\n\n    out[3] = -s;\n    out[4] = c;\n    out[5] = 0;\n\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.scale(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat3} out\n */\nmat3.fromScaling = function(out, v) {\n    out[0] = v[0];\n    out[1] = 0;\n    out[2] = 0;\n\n    out[3] = 0;\n    out[4] = v[1];\n    out[5] = 0;\n\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Copies the values from a mat2d into a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat2d} a the matrix to copy\n * @returns {mat3} out\n **/\nmat3.fromMat2d = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = 0;\n\n    out[3] = a[2];\n    out[4] = a[3];\n    out[5] = 0;\n\n    out[6] = a[4];\n    out[7] = a[5];\n    out[8] = 1;\n    return out;\n};\n\n/**\n* Calculates a 3x3 matrix from the given quaternion\n*\n* @param {mat3} out mat3 receiving operation result\n* @param {quat} q Quaternion to create matrix from\n*\n* @returns {mat3} out\n*/\nmat3.fromQuat = function (out, q) {\n    var x = q[0], y = q[1], z = q[2], w = q[3],\n        x2 = x + x,\n        y2 = y + y,\n        z2 = z + z,\n\n        xx = x * x2,\n        yx = y * x2,\n        yy = y * y2,\n        zx = z * x2,\n        zy = z * y2,\n        zz = z * z2,\n        wx = w * x2,\n        wy = w * y2,\n        wz = w * z2;\n\n    out[0] = 1 - yy - zz;\n    out[3] = yx - wz;\n    out[6] = zx + wy;\n\n    out[1] = yx + wz;\n    out[4] = 1 - xx - zz;\n    out[7] = zy - wx;\n\n    out[2] = zx - wy;\n    out[5] = zy + wx;\n    out[8] = 1 - xx - yy;\n\n    return out;\n};\n\n/**\n* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n*\n* @param {mat3} out mat3 receiving operation result\n* @param {mat4} a Mat4 to derive the normal matrix from\n*\n* @returns {mat3} out\n*/\nmat3.normalFromMat4 = function (out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],\n\n        b00 = a00 * a11 - a01 * a10,\n        b01 = a00 * a12 - a02 * a10,\n        b02 = a00 * a13 - a03 * a10,\n        b03 = a01 * a12 - a02 * a11,\n        b04 = a01 * a13 - a03 * a11,\n        b05 = a02 * a13 - a03 * a12,\n        b06 = a20 * a31 - a21 * a30,\n        b07 = a20 * a32 - a22 * a30,\n        b08 = a20 * a33 - a23 * a30,\n        b09 = a21 * a32 - a22 * a31,\n        b10 = a21 * a33 - a23 * a31,\n        b11 = a22 * a33 - a23 * a32,\n\n        // Calculate the determinant\n        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n    if (!det) { \n        return null; \n    }\n    det = 1.0 / det;\n\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n\n    out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n\n    out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n\n    return out;\n};\n\n/**\n * Returns a string representation of a mat3\n *\n * @param {mat3} mat matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nmat3.str = function (a) {\n    return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + \n                    a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + \n                    a[6] + ', ' + a[7] + ', ' + a[8] + ')';\n};\n\n/**\n * Returns Frobenius norm of a mat3\n *\n * @param {mat3} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nmat3.frob = function (a) {\n    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2)))\n};\n\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nmat3.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    out[4] = a[4] + b[4];\n    out[5] = a[5] + b[5];\n    out[6] = a[6] + b[6];\n    out[7] = a[7] + b[7];\n    out[8] = a[8] + b[8];\n    return out;\n};\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nmat3.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    out[4] = a[4] - b[4];\n    out[5] = a[5] - b[5];\n    out[6] = a[6] - b[6];\n    out[7] = a[7] - b[7];\n    out[8] = a[8] - b[8];\n    return out;\n};\n\n/**\n * Alias for {@link mat3.subtract}\n * @function\n */\nmat3.sub = mat3.subtract;\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\nmat3.multiplyScalar = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    out[4] = a[4] * b;\n    out[5] = a[5] * b;\n    out[6] = a[6] * b;\n    out[7] = a[7] * b;\n    out[8] = a[8] * b;\n    return out;\n};\n\n/**\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat3} out the receiving vector\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat3} out\n */\nmat3.multiplyScalarAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    out[2] = a[2] + (b[2] * scale);\n    out[3] = a[3] + (b[3] * scale);\n    out[4] = a[4] + (b[4] * scale);\n    out[5] = a[5] + (b[5] * scale);\n    out[6] = a[6] + (b[6] * scale);\n    out[7] = a[7] + (b[7] * scale);\n    out[8] = a[8] + (b[8] * scale);\n    return out;\n};\n\n/*\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat3} a The first matrix.\n * @param {mat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat3.exactEquals = function (a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && \n           a[3] === b[3] && a[4] === b[4] && a[5] === b[5] &&\n           a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n};\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat3} a The first matrix.\n * @param {mat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat3.equals = function (a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5], a6 = a[6], a7 = a[7], a8 = a[8];\n    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = a[6], b7 = b[7], b8 = b[8];\n    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n            Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n            Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n            Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n            Math.abs(a6 - b6) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n            Math.abs(a7 - b7) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&\n            Math.abs(a8 - b8) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a8), Math.abs(b8)));\n};\n\n\nmodule.exports = mat3;\n\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = __webpack_require__(1);\n\n/**\n * @class 3 Dimensional Vector\n * @name vec3\n */\nvar vec3 = {};\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\nvec3.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(3);\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    return out;\n};\n\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {vec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\nvec3.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(3);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    return out;\n};\n\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\nvec3.fromValues = function(x, y, z) {\n    var out = new glMatrix.ARRAY_TYPE(3);\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    return out;\n};\n\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the source vector\n * @returns {vec3} out\n */\nvec3.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    return out;\n};\n\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\nvec3.set = function(out, x, y, z) {\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    return out;\n};\n\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    return out;\n};\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    return out;\n};\n\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\nvec3.sub = vec3.subtract;\n\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.multiply = function(out, a, b) {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    out[2] = a[2] * b[2];\n    return out;\n};\n\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\nvec3.mul = vec3.multiply;\n\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.divide = function(out, a, b) {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    out[2] = a[2] / b[2];\n    return out;\n};\n\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\nvec3.div = vec3.divide;\n\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to ceil\n * @returns {vec3} out\n */\nvec3.ceil = function (out, a) {\n    out[0] = Math.ceil(a[0]);\n    out[1] = Math.ceil(a[1]);\n    out[2] = Math.ceil(a[2]);\n    return out;\n};\n\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to floor\n * @returns {vec3} out\n */\nvec3.floor = function (out, a) {\n    out[0] = Math.floor(a[0]);\n    out[1] = Math.floor(a[1]);\n    out[2] = Math.floor(a[2]);\n    return out;\n};\n\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.min = function(out, a, b) {\n    out[0] = Math.min(a[0], b[0]);\n    out[1] = Math.min(a[1], b[1]);\n    out[2] = Math.min(a[2], b[2]);\n    return out;\n};\n\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.max = function(out, a, b) {\n    out[0] = Math.max(a[0], b[0]);\n    out[1] = Math.max(a[1], b[1]);\n    out[2] = Math.max(a[2], b[2]);\n    return out;\n};\n\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to round\n * @returns {vec3} out\n */\nvec3.round = function (out, a) {\n    out[0] = Math.round(a[0]);\n    out[1] = Math.round(a[1]);\n    out[2] = Math.round(a[2]);\n    return out;\n};\n\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\nvec3.scale = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    return out;\n};\n\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\nvec3.scaleAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    out[2] = a[2] + (b[2] * scale);\n    return out;\n};\n\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} distance between a and b\n */\nvec3.distance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1],\n        z = b[2] - a[2];\n    return Math.sqrt(x*x + y*y + z*z);\n};\n\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\nvec3.dist = vec3.distance;\n\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\nvec3.squaredDistance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1],\n        z = b[2] - a[2];\n    return x*x + y*y + z*z;\n};\n\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\nvec3.sqrDist = vec3.squaredDistance;\n\n/**\n * Calculates the length of a vec3\n *\n * @param {vec3} a vector to calculate length of\n * @returns {Number} length of a\n */\nvec3.length = function (a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2];\n    return Math.sqrt(x*x + y*y + z*z);\n};\n\n/**\n * Alias for {@link vec3.length}\n * @function\n */\nvec3.len = vec3.length;\n\n/**\n * Calculates the squared length of a vec3\n *\n * @param {vec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nvec3.squaredLength = function (a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2];\n    return x*x + y*y + z*z;\n};\n\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\nvec3.sqrLen = vec3.squaredLength;\n\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to negate\n * @returns {vec3} out\n */\nvec3.negate = function(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    return out;\n};\n\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to invert\n * @returns {vec3} out\n */\nvec3.inverse = function(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n};\n\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to normalize\n * @returns {vec3} out\n */\nvec3.normalize = function(out, a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2];\n    var len = x*x + y*y + z*z;\n    if (len > 0) {\n        //TODO: evaluate use of glm_invsqrt here?\n        len = 1 / Math.sqrt(len);\n        out[0] = a[0] * len;\n        out[1] = a[1] * len;\n        out[2] = a[2] * len;\n    }\n    return out;\n};\n\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} dot product of a and b\n */\nvec3.dot = function (a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n};\n\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.cross = function(out, a, b) {\n    var ax = a[0], ay = a[1], az = a[2],\n        bx = b[0], by = b[1], bz = b[2];\n\n    out[0] = ay * bz - az * by;\n    out[1] = az * bx - ax * bz;\n    out[2] = ax * by - ay * bx;\n    return out;\n};\n\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec3} out\n */\nvec3.lerp = function (out, a, b, t) {\n    var ax = a[0],\n        ay = a[1],\n        az = a[2];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    out[2] = az + t * (b[2] - az);\n    return out;\n};\n\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {vec3} c the third operand\n * @param {vec3} d the fourth operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec3} out\n */\nvec3.hermite = function (out, a, b, c, d, t) {\n  var factorTimes2 = t * t,\n      factor1 = factorTimes2 * (2 * t - 3) + 1,\n      factor2 = factorTimes2 * (t - 2) + t,\n      factor3 = factorTimes2 * (t - 1),\n      factor4 = factorTimes2 * (3 - 2 * t);\n  \n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  \n  return out;\n};\n\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {vec3} c the third operand\n * @param {vec3} d the fourth operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec3} out\n */\nvec3.bezier = function (out, a, b, c, d, t) {\n  var inverseFactor = 1 - t,\n      inverseFactorTimesTwo = inverseFactor * inverseFactor,\n      factorTimes2 = t * t,\n      factor1 = inverseFactorTimesTwo * inverseFactor,\n      factor2 = 3 * t * inverseFactorTimesTwo,\n      factor3 = 3 * factorTimes2 * inverseFactor,\n      factor4 = factorTimes2 * t;\n  \n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  \n  return out;\n};\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\nvec3.random = function (out, scale) {\n    scale = scale || 1.0;\n\n    var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n    var z = (glMatrix.RANDOM() * 2.0) - 1.0;\n    var zScale = Math.sqrt(1.0-z*z) * scale;\n\n    out[0] = Math.cos(r) * zScale;\n    out[1] = Math.sin(r) * zScale;\n    out[2] = z * scale;\n    return out;\n};\n\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec3} out\n */\nvec3.transformMat4 = function(out, a, m) {\n    var x = a[0], y = a[1], z = a[2],\n        w = m[3] * x + m[7] * y + m[11] * z + m[15];\n    w = w || 1.0;\n    out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n    out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n    out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n    return out;\n};\n\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat4} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\nvec3.transformMat3 = function(out, a, m) {\n    var x = a[0], y = a[1], z = a[2];\n    out[0] = x * m[0] + y * m[3] + z * m[6];\n    out[1] = x * m[1] + y * m[4] + z * m[7];\n    out[2] = x * m[2] + y * m[5] + z * m[8];\n    return out;\n};\n\n/**\n * Transforms the vec3 with a quat\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec3} out\n */\nvec3.transformQuat = function(out, a, q) {\n    // benchmarks: http://jsperf.com/quaternion-transform-vec3-implementations\n\n    var x = a[0], y = a[1], z = a[2],\n        qx = q[0], qy = q[1], qz = q[2], qw = q[3],\n\n        // calculate quat * vec\n        ix = qw * x + qy * z - qz * y,\n        iy = qw * y + qz * x - qx * z,\n        iz = qw * z + qx * y - qy * x,\n        iw = -qx * x - qy * y - qz * z;\n\n    // calculate result * inverse quat\n    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n    return out;\n};\n\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nvec3.rotateX = function(out, a, b, c){\n   var p = [], r=[];\n\t  //Translate point to the origin\n\t  p[0] = a[0] - b[0];\n\t  p[1] = a[1] - b[1];\n  \tp[2] = a[2] - b[2];\n\n\t  //perform rotation\n\t  r[0] = p[0];\n\t  r[1] = p[1]*Math.cos(c) - p[2]*Math.sin(c);\n\t  r[2] = p[1]*Math.sin(c) + p[2]*Math.cos(c);\n\n\t  //translate to correct position\n\t  out[0] = r[0] + b[0];\n\t  out[1] = r[1] + b[1];\n\t  out[2] = r[2] + b[2];\n\n  \treturn out;\n};\n\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nvec3.rotateY = function(out, a, b, c){\n  \tvar p = [], r=[];\n  \t//Translate point to the origin\n  \tp[0] = a[0] - b[0];\n  \tp[1] = a[1] - b[1];\n  \tp[2] = a[2] - b[2];\n  \n  \t//perform rotation\n  \tr[0] = p[2]*Math.sin(c) + p[0]*Math.cos(c);\n  \tr[1] = p[1];\n  \tr[2] = p[2]*Math.cos(c) - p[0]*Math.sin(c);\n  \n  \t//translate to correct position\n  \tout[0] = r[0] + b[0];\n  \tout[1] = r[1] + b[1];\n  \tout[2] = r[2] + b[2];\n  \n  \treturn out;\n};\n\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nvec3.rotateZ = function(out, a, b, c){\n  \tvar p = [], r=[];\n  \t//Translate point to the origin\n  \tp[0] = a[0] - b[0];\n  \tp[1] = a[1] - b[1];\n  \tp[2] = a[2] - b[2];\n  \n  \t//perform rotation\n  \tr[0] = p[0]*Math.cos(c) - p[1]*Math.sin(c);\n  \tr[1] = p[0]*Math.sin(c) + p[1]*Math.cos(c);\n  \tr[2] = p[2];\n  \n  \t//translate to correct position\n  \tout[0] = r[0] + b[0];\n  \tout[1] = r[1] + b[1];\n  \tout[2] = r[2] + b[2];\n  \n  \treturn out;\n};\n\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nvec3.forEach = (function() {\n    var vec = vec3.create();\n\n    return function(a, stride, offset, count, fn, arg) {\n        var i, l;\n        if(!stride) {\n            stride = 3;\n        }\n\n        if(!offset) {\n            offset = 0;\n        }\n        \n        if(count) {\n            l = Math.min((count * stride) + offset, a.length);\n        } else {\n            l = a.length;\n        }\n\n        for(i = offset; i < l; i += stride) {\n            vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2];\n            fn(vec, vec, arg);\n            a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2];\n        }\n        \n        return a;\n    };\n})();\n\n/**\n * Get the angle between two 3D vectors\n * @param {vec3} a The first operand\n * @param {vec3} b The second operand\n * @returns {Number} The angle in radians\n */\nvec3.angle = function(a, b) {\n   \n    var tempA = vec3.fromValues(a[0], a[1], a[2]);\n    var tempB = vec3.fromValues(b[0], b[1], b[2]);\n \n    vec3.normalize(tempA, tempA);\n    vec3.normalize(tempB, tempB);\n \n    var cosine = vec3.dot(tempA, tempB);\n\n    if(cosine > 1.0){\n        return 0;\n    } else {\n        return Math.acos(cosine);\n    }     \n};\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec3} vec vector to represent as a string\n * @returns {String} string representation of the vector\n */\nvec3.str = function (a) {\n    return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\n};\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nvec3.exactEquals = function (a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n};\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nvec3.equals = function (a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2];\n    var b0 = b[0], b1 = b[1], b2 = b[2];\n    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)));\n};\n\nmodule.exports = vec3;\n\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = __webpack_require__(1);\n\n/**\n * @class 4 Dimensional Vector\n * @name vec4\n */\nvar vec4 = {};\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\nvec4.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(4);\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    return out;\n};\n\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {vec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\nvec4.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(4);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\nvec4.fromValues = function(x, y, z, w) {\n    var out = new glMatrix.ARRAY_TYPE(4);\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = w;\n    return out;\n};\n\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the source vector\n * @returns {vec4} out\n */\nvec4.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\nvec4.set = function(out, x, y, z, w) {\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = w;\n    return out;\n};\n\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    return out;\n};\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    return out;\n};\n\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\nvec4.sub = vec4.subtract;\n\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.multiply = function(out, a, b) {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    out[2] = a[2] * b[2];\n    out[3] = a[3] * b[3];\n    return out;\n};\n\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\nvec4.mul = vec4.multiply;\n\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.divide = function(out, a, b) {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    out[2] = a[2] / b[2];\n    out[3] = a[3] / b[3];\n    return out;\n};\n\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\nvec4.div = vec4.divide;\n\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to ceil\n * @returns {vec4} out\n */\nvec4.ceil = function (out, a) {\n    out[0] = Math.ceil(a[0]);\n    out[1] = Math.ceil(a[1]);\n    out[2] = Math.ceil(a[2]);\n    out[3] = Math.ceil(a[3]);\n    return out;\n};\n\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to floor\n * @returns {vec4} out\n */\nvec4.floor = function (out, a) {\n    out[0] = Math.floor(a[0]);\n    out[1] = Math.floor(a[1]);\n    out[2] = Math.floor(a[2]);\n    out[3] = Math.floor(a[3]);\n    return out;\n};\n\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.min = function(out, a, b) {\n    out[0] = Math.min(a[0], b[0]);\n    out[1] = Math.min(a[1], b[1]);\n    out[2] = Math.min(a[2], b[2]);\n    out[3] = Math.min(a[3], b[3]);\n    return out;\n};\n\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.max = function(out, a, b) {\n    out[0] = Math.max(a[0], b[0]);\n    out[1] = Math.max(a[1], b[1]);\n    out[2] = Math.max(a[2], b[2]);\n    out[3] = Math.max(a[3], b[3]);\n    return out;\n};\n\n/**\n * Math.round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to round\n * @returns {vec4} out\n */\nvec4.round = function (out, a) {\n    out[0] = Math.round(a[0]);\n    out[1] = Math.round(a[1]);\n    out[2] = Math.round(a[2]);\n    out[3] = Math.round(a[3]);\n    return out;\n};\n\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\nvec4.scale = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    return out;\n};\n\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\nvec4.scaleAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    out[2] = a[2] + (b[2] * scale);\n    out[3] = a[3] + (b[3] * scale);\n    return out;\n};\n\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} distance between a and b\n */\nvec4.distance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1],\n        z = b[2] - a[2],\n        w = b[3] - a[3];\n    return Math.sqrt(x*x + y*y + z*z + w*w);\n};\n\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\nvec4.dist = vec4.distance;\n\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\nvec4.squaredDistance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1],\n        z = b[2] - a[2],\n        w = b[3] - a[3];\n    return x*x + y*y + z*z + w*w;\n};\n\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\nvec4.sqrDist = vec4.squaredDistance;\n\n/**\n * Calculates the length of a vec4\n *\n * @param {vec4} a vector to calculate length of\n * @returns {Number} length of a\n */\nvec4.length = function (a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2],\n        w = a[3];\n    return Math.sqrt(x*x + y*y + z*z + w*w);\n};\n\n/**\n * Alias for {@link vec4.length}\n * @function\n */\nvec4.len = vec4.length;\n\n/**\n * Calculates the squared length of a vec4\n *\n * @param {vec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nvec4.squaredLength = function (a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2],\n        w = a[3];\n    return x*x + y*y + z*z + w*w;\n};\n\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\nvec4.sqrLen = vec4.squaredLength;\n\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to negate\n * @returns {vec4} out\n */\nvec4.negate = function(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    out[3] = -a[3];\n    return out;\n};\n\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to invert\n * @returns {vec4} out\n */\nvec4.inverse = function(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n};\n\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to normalize\n * @returns {vec4} out\n */\nvec4.normalize = function(out, a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2],\n        w = a[3];\n    var len = x*x + y*y + z*z + w*w;\n    if (len > 0) {\n        len = 1 / Math.sqrt(len);\n        out[0] = x * len;\n        out[1] = y * len;\n        out[2] = z * len;\n        out[3] = w * len;\n    }\n    return out;\n};\n\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} dot product of a and b\n */\nvec4.dot = function (a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n};\n\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec4} out\n */\nvec4.lerp = function (out, a, b, t) {\n    var ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    out[2] = az + t * (b[2] - az);\n    out[3] = aw + t * (b[3] - aw);\n    return out;\n};\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */\nvec4.random = function (out, scale) {\n    scale = scale || 1.0;\n\n    //TODO: This is a pretty awful way of doing this. Find something better.\n    out[0] = glMatrix.RANDOM();\n    out[1] = glMatrix.RANDOM();\n    out[2] = glMatrix.RANDOM();\n    out[3] = glMatrix.RANDOM();\n    vec4.normalize(out, out);\n    vec4.scale(out, out, scale);\n    return out;\n};\n\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec4} out\n */\nvec4.transformMat4 = function(out, a, m) {\n    var x = a[0], y = a[1], z = a[2], w = a[3];\n    out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n    out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n    out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n    out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n    return out;\n};\n\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec4} out\n */\nvec4.transformQuat = function(out, a, q) {\n    var x = a[0], y = a[1], z = a[2],\n        qx = q[0], qy = q[1], qz = q[2], qw = q[3],\n\n        // calculate quat * vec\n        ix = qw * x + qy * z - qz * y,\n        iy = qw * y + qz * x - qx * z,\n        iz = qw * z + qx * y - qy * x,\n        iw = -qx * x - qy * y - qz * z;\n\n    // calculate result * inverse quat\n    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nvec4.forEach = (function() {\n    var vec = vec4.create();\n\n    return function(a, stride, offset, count, fn, arg) {\n        var i, l;\n        if(!stride) {\n            stride = 4;\n        }\n\n        if(!offset) {\n            offset = 0;\n        }\n        \n        if(count) {\n            l = Math.min((count * stride) + offset, a.length);\n        } else {\n            l = a.length;\n        }\n\n        for(i = offset; i < l; i += stride) {\n            vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2]; vec[3] = a[i+3];\n            fn(vec, vec, arg);\n            a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2]; a[i+3] = vec[3];\n        }\n        \n        return a;\n    };\n})();\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec4} vec vector to represent as a string\n * @returns {String} string representation of the vector\n */\nvec4.str = function (a) {\n    return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n};\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec4} a The first vector.\n * @param {vec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nvec4.exactEquals = function (a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n};\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec4} a The first vector.\n * @param {vec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nvec4.equals = function (a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n            Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)));\n};\n\nmodule.exports = vec4;\n\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar ChunkType;\r\n(function (ChunkType) {\r\n    ChunkType[ChunkType[\"Header\"] = 1229472850] = \"Header\";\r\n    ChunkType[ChunkType[\"Palette\"] = 1347179589] = \"Palette\";\r\n    ChunkType[ChunkType[\"Data\"] = 1229209940] = \"Data\";\r\n    ChunkType[ChunkType[\"End\"] = 1229278788] = \"End\";\r\n})(ChunkType = exports.ChunkType || (exports.ChunkType = {}));\r\nvar ColorType;\r\n(function (ColorType) {\r\n    ColorType[ColorType[\"Greyscale\"] = 0] = \"Greyscale\";\r\n    ColorType[ColorType[\"Truecolor\"] = 2] = \"Truecolor\";\r\n    ColorType[ColorType[\"Indexed\"] = 3] = \"Indexed\";\r\n    ColorType[ColorType[\"GreyscaleAlpha\"] = 4] = \"GreyscaleAlpha\";\r\n    ColorType[ColorType[\"TruecolorAlpha\"] = 6] = \"TruecolorAlpha\";\r\n})(ColorType = exports.ColorType || (exports.ColorType = {}));\r\nexports.SIGN_OFFSET = 8;\r\nexports.LENGTH_LENGTH = 4;\r\nexports.TYPE_LENGTH = 4;\r\nexports.CRC_LENGTH = 4;\r\n\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n// Note: adler32 takes 12% for level 0 and 2% for level 6.\n// It doesn't worth to make additional optimizationa as in original.\n// Small size is preferable.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction adler32(adler, buf, len, pos) {\n  var s1 = (adler & 0xffff) |0,\n      s2 = ((adler >>> 16) & 0xffff) |0,\n      n = 0;\n\n  while (len !== 0) {\n    // Set limit ~ twice less than 5552, to keep\n    // s2 in 31-bits, because we force signed ints.\n    // in other case %= will fail.\n    n = len > 2000 ? 2000 : len;\n    len -= n;\n\n    do {\n      s1 = (s1 + buf[pos++]) |0;\n      s2 = (s2 + s1) |0;\n    } while (--n);\n\n    s1 %= 65521;\n    s2 %= 65521;\n  }\n\n  return (s1 | (s2 << 16)) |0;\n}\n\n\nmodule.exports = adler32;\n\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n// Note: we can't get significant speed boost here.\n// So write code to minimize size - no pregenerated tables\n// and array tools dependencies.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// Use ordinary array, since untyped makes no boost here\nfunction makeTable() {\n  var c, table = [];\n\n  for (var n = 0; n < 256; n++) {\n    c = n;\n    for (var k = 0; k < 8; k++) {\n      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));\n    }\n    table[n] = c;\n  }\n\n  return table;\n}\n\n// Create table on load. Just 255 signed longs. Not a problem.\nvar crcTable = makeTable();\n\n\nfunction crc32(crc, buf, len, pos) {\n  var t = crcTable,\n      end = pos + len;\n\n  crc ^= -1;\n\n  for (var i = pos; i < end; i++) {\n    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];\n  }\n\n  return (crc ^ (-1)); // >>> 0;\n}\n\n\nmodule.exports = crc32;\n\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n// String encode/decode helpers\n\n\n\nvar utils = __webpack_require__(3);\n\n\n// Quick check if we can use fast array to bin string conversion\n//\n// - apply(Array) can fail on Android 2.2\n// - apply(Uint8Array) can fail on iOS 5.1 Safary\n//\nvar STR_APPLY_OK = true;\nvar STR_APPLY_UIA_OK = true;\n\ntry { String.fromCharCode.apply(null, [ 0 ]); } catch (__) { STR_APPLY_OK = false; }\ntry { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }\n\n\n// Table with utf8 lengths (calculated by first byte of sequence)\n// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,\n// because max possible codepoint is 0x10ffff\nvar _utf8len = new utils.Buf8(256);\nfor (var q = 0; q < 256; q++) {\n  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);\n}\n_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start\n\n\n// convert string to array (typed, when possible)\nexports.string2buf = function (str) {\n  var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;\n\n  // count binary size\n  for (m_pos = 0; m_pos < str_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;\n  }\n\n  // allocate buffer\n  buf = new utils.Buf8(buf_len);\n\n  // convert\n  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    if (c < 0x80) {\n      /* one byte */\n      buf[i++] = c;\n    } else if (c < 0x800) {\n      /* two bytes */\n      buf[i++] = 0xC0 | (c >>> 6);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else if (c < 0x10000) {\n      /* three bytes */\n      buf[i++] = 0xE0 | (c >>> 12);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else {\n      /* four bytes */\n      buf[i++] = 0xf0 | (c >>> 18);\n      buf[i++] = 0x80 | (c >>> 12 & 0x3f);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    }\n  }\n\n  return buf;\n};\n\n// Helper (used in 2 places)\nfunction buf2binstring(buf, len) {\n  // use fallback for big arrays to avoid stack overflow\n  if (len < 65537) {\n    if ((buf.subarray && STR_APPLY_UIA_OK) || (!buf.subarray && STR_APPLY_OK)) {\n      return String.fromCharCode.apply(null, utils.shrinkBuf(buf, len));\n    }\n  }\n\n  var result = '';\n  for (var i = 0; i < len; i++) {\n    result += String.fromCharCode(buf[i]);\n  }\n  return result;\n}\n\n\n// Convert byte array to binary string\nexports.buf2binstring = function (buf) {\n  return buf2binstring(buf, buf.length);\n};\n\n\n// Convert binary string (typed, when possible)\nexports.binstring2buf = function (str) {\n  var buf = new utils.Buf8(str.length);\n  for (var i = 0, len = buf.length; i < len; i++) {\n    buf[i] = str.charCodeAt(i);\n  }\n  return buf;\n};\n\n\n// convert array to string\nexports.buf2string = function (buf, max) {\n  var i, out, c, c_len;\n  var len = max || buf.length;\n\n  // Reserve max possible length (2 words per char)\n  // NB: by unknown reasons, Array is significantly faster for\n  //     String.fromCharCode.apply than Uint16Array.\n  var utf16buf = new Array(len * 2);\n\n  for (out = 0, i = 0; i < len;) {\n    c = buf[i++];\n    // quick process ascii\n    if (c < 0x80) { utf16buf[out++] = c; continue; }\n\n    c_len = _utf8len[c];\n    // skip 5 & 6 byte codes\n    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }\n\n    // apply mask on first byte\n    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;\n    // join the rest\n    while (c_len > 1 && i < len) {\n      c = (c << 6) | (buf[i++] & 0x3f);\n      c_len--;\n    }\n\n    // terminated by end of string?\n    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }\n\n    if (c < 0x10000) {\n      utf16buf[out++] = c;\n    } else {\n      c -= 0x10000;\n      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);\n      utf16buf[out++] = 0xdc00 | (c & 0x3ff);\n    }\n  }\n\n  return buf2binstring(utf16buf, out);\n};\n\n\n// Calculate max possible position in utf8 buffer,\n// that will not break sequence. If that's not possible\n// - (very small limits) return max size as is.\n//\n// buf[] - utf8 bytes array\n// max   - length limit (mandatory);\nexports.utf8border = function (buf, max) {\n  var pos;\n\n  max = max || buf.length;\n  if (max > buf.length) { max = buf.length; }\n\n  // go back from last position, until start of sequence found\n  pos = max - 1;\n  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }\n\n  // Fuckup - very small and broken sequence,\n  // return max, because we should return something anyway.\n  if (pos < 0) { return max; }\n\n  // If we came to start of buffer - that means vuffer is too small,\n  // return max too.\n  if (pos === 0) { return max; }\n\n  return (pos + _utf8len[buf[pos]] > max) ? pos : max;\n};\n\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction ZStream() {\n  /* next input byte */\n  this.input = null; // JS specific, because we have no pointers\n  this.next_in = 0;\n  /* number of bytes available at input */\n  this.avail_in = 0;\n  /* total number of input bytes read so far */\n  this.total_in = 0;\n  /* next output byte should be put there */\n  this.output = null; // JS specific, because we have no pointers\n  this.next_out = 0;\n  /* remaining free space at output */\n  this.avail_out = 0;\n  /* total number of bytes output so far */\n  this.total_out = 0;\n  /* last error message, NULL if no error */\n  this.msg = ''/*Z_NULL*/;\n  /* not visible by applications */\n  this.state = null;\n  /* best guess about the data type: binary or text */\n  this.data_type = 2/*Z_UNKNOWN*/;\n  /* adler32 value of the uncompressed data */\n  this.adler = 0;\n}\n\nmodule.exports = ZStream;\n\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nmodule.exports = {\n\n  /* Allowed flush values; see deflate() and inflate() below for details */\n  Z_NO_FLUSH:         0,\n  Z_PARTIAL_FLUSH:    1,\n  Z_SYNC_FLUSH:       2,\n  Z_FULL_FLUSH:       3,\n  Z_FINISH:           4,\n  Z_BLOCK:            5,\n  Z_TREES:            6,\n\n  /* Return codes for the compression/decompression functions. Negative values\n  * are errors, positive values are used for special but normal events.\n  */\n  Z_OK:               0,\n  Z_STREAM_END:       1,\n  Z_NEED_DICT:        2,\n  Z_ERRNO:           -1,\n  Z_STREAM_ERROR:    -2,\n  Z_DATA_ERROR:      -3,\n  //Z_MEM_ERROR:     -4,\n  Z_BUF_ERROR:       -5,\n  //Z_VERSION_ERROR: -6,\n\n  /* compression levels */\n  Z_NO_COMPRESSION:         0,\n  Z_BEST_SPEED:             1,\n  Z_BEST_COMPRESSION:       9,\n  Z_DEFAULT_COMPRESSION:   -1,\n\n\n  Z_FILTERED:               1,\n  Z_HUFFMAN_ONLY:           2,\n  Z_RLE:                    3,\n  Z_FIXED:                  4,\n  Z_DEFAULT_STRATEGY:       0,\n\n  /* Possible values of the data_type field (though see inflate()) */\n  Z_BINARY:                 0,\n  Z_TEXT:                   1,\n  //Z_ASCII:                1, // = Z_TEXT (deprecated)\n  Z_UNKNOWN:                2,\n\n  /* The deflate compression method */\n  Z_DEFLATED:               8\n  //Z_NULL:                 null // Use -1 or null inline, depending on var type\n};\n\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(2);\r\nvar core_1 = __webpack_require__(10);\r\nvar helpers_1 = __webpack_require__(35);\r\nvar twgl = __webpack_require__(4);\r\nvar Stats = __webpack_require__(36);\r\nvar SPECTOR = __webpack_require__(37);\r\nvar BinaryHelpers_1 = __webpack_require__(38);\r\nvar PngReader_1 = __webpack_require__(39);\r\nvar spector = new SPECTOR.Spector();\r\nspector.displayUI();\r\nspector.spyCanvases();\r\nvar gl;\r\nvar t = 0;\r\nvar renderer;\r\nvar tiles;\r\nvar text;\r\nfunction main() {\r\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n        function render(time) {\r\n            stats.begin();\r\n            t += 0.1;\r\n            a *= 0.9;\r\n            sprites.forEach(function (s) { return s.transform.y = Math.sin(s.x / 4 + t) * 3; });\r\n            var spr = test.createSprite(test.add(), new core_1.Transform2d(), {\r\n                w: 2,\r\n                h: 2,\r\n                palOffset: 0,\r\n                textureX: 32,\r\n                textureY: 0,\r\n                x: 1,\r\n                y: 1,\r\n                z: 250\r\n            });\r\n            spr.tag[\"dx\"] = Math.random();\r\n            spr.tag[\"dy\"] = Math.random();\r\n            sprites2.push(spr);\r\n            sprites2.forEach(function (s) {\r\n                if (s.transform.x > 320 || s.transform.x < 0) {\r\n                    s.tag[\"dx\"] = -s.tag[\"dx\"];\r\n                }\r\n                if (s.transform.y > 180 || s.transform.y < 0) {\r\n                    s.tag[\"dy\"] = -s.tag[\"dy\"];\r\n                }\r\n                s.transform.x += s.tag[\"dx\"];\r\n                s.transform.y += s.tag[\"dy\"];\r\n            });\r\n            //sprites2.forEach(s => s.transform.update());\r\n            renderer.render();\r\n            stats.end();\r\n            requestAnimationFrame(render);\r\n        }\r\n        var stats, vs, fs, programInfo, palette, tilesetPng, tileset, fontPng, font, fontInfo, fntBuffer, sprites, i, sprite, test, sprites2, testR, a, posx, posy;\r\n        return tslib_1.__generator(this, function (_a) {\r\n            stats = new Stats();\r\n            stats.showPanel(0); // 0: fps, 1: ms, 2: mb, 3+: custom\r\n            document.body.appendChild(stats.dom);\r\n            gl = helpers_1.initWebGl();\r\n            vs = __webpack_require__(50);\r\n            fs = __webpack_require__(51);\r\n            programInfo = twgl.createProgramInfo(gl, [vs, fs]);\r\n            palette = new core_1.PaletteTexture(gl).create();\r\n            tilesetPng = new PngReader_1.PngReader(BinaryHelpers_1.stringToBuffer(__webpack_require__(52)));\r\n            tileset = new core_1.IndexedTexture(gl).create();\r\n            tileset.setRawData(tilesetPng.createPixelData());\r\n            palette.setRawPalette(0, tilesetPng.createPaletteDataRgba(256));\r\n            fontPng = new PngReader_1.PngReader(BinaryHelpers_1.stringToBuffer(__webpack_require__(53)));\r\n            font = new core_1.IndexedTexture(gl).create();\r\n            fontInfo = __webpack_require__(54);\r\n            font.setRawData(fontPng.createPixelData());\r\n            palette.setRawPalette(1, fontPng.createPaletteDataRgba(256));\r\n            renderer = new core_1.Renderer(gl, {\r\n                shader: programInfo,\r\n                palette: palette,\r\n                texture: font,\r\n                paletteId: 0,\r\n                zSort: true,\r\n                blendMode: \"none\"\r\n            });\r\n            tiles = helpers_1.createTileSprite(gl, tileset, palette, 0);\r\n            fntBuffer = new core_1.TextBuffer(gl, fontInfo).create();\r\n            fntBuffer.write(\"Start Game\", 320, 130, 50, 4, 4);\r\n            fntBuffer.write(\"Load Game\", 320, 130, 50 + 16, 4);\r\n            fntBuffer.write(\"Settings\", 320, 130, 50 + 16 * 2, 4);\r\n            fntBuffer.write(\"Quit\", 320, 130, 50 + 16 * 3, 4);\r\n            text = new core_1.Renderable({\r\n                buffer: fntBuffer,\r\n                texture: font,\r\n                paletteId: 1\r\n            });\r\n            sprites = [];\r\n            for (i = 0; i < \"Start Game\".length; i++) {\r\n                sprite = fntBuffer.createSprite(i);\r\n                sprites.push(sprite);\r\n            }\r\n            test = new core_1.QuadBuffer(gl).create();\r\n            sprites2 = [];\r\n            testR = new core_1.Renderable({\r\n                buffer: test,\r\n                texture: tileset,\r\n                paletteId: 0\r\n            });\r\n            renderer.renderList.push(tiles);\r\n            renderer.renderList.push(text);\r\n            renderer.renderList.push(testR);\r\n            a = .5;\r\n            requestAnimationFrame(render);\r\n            posx = 0;\r\n            posy = 0;\r\n            setInterval(function () {\r\n                //tiles.transform.x = Math.floor((posx -= 0.1)%(4*16));\r\n                //tiles.transform.y = Math.floor((posy -= 0.1)%(16));\r\n            }, 16);\r\n            return [2 /*return*/];\r\n        });\r\n    });\r\n}\r\nmain();\r\n\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = __webpack_require__(1);\n\n/**\n * @class 2x2 Matrix\n * @name mat2\n */\nvar mat2 = {};\n\n/**\n * Creates a new identity mat2\n *\n * @returns {mat2} a new 2x2 matrix\n */\nmat2.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(4);\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n};\n\n/**\n * Creates a new mat2 initialized with values from an existing matrix\n *\n * @param {mat2} a matrix to clone\n * @returns {mat2} a new 2x2 matrix\n */\nmat2.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(4);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Copy the values from one mat2 to another\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nmat2.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Set a mat2 to the identity matrix\n *\n * @param {mat2} out the receiving matrix\n * @returns {mat2} out\n */\nmat2.identity = function(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n};\n\n/**\n * Create a new mat2 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\n * @returns {mat2} out A new 2x2 matrix\n */\nmat2.fromValues = function(m00, m01, m10, m11) {\n    var out = new glMatrix.ARRAY_TYPE(4);\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m10;\n    out[3] = m11;\n    return out;\n};\n\n/**\n * Set the components of a mat2 to the given values\n *\n * @param {mat2} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\n * @returns {mat2} out\n */\nmat2.set = function(out, m00, m01, m10, m11) {\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m10;\n    out[3] = m11;\n    return out;\n};\n\n\n/**\n * Transpose the values of a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nmat2.transpose = function(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        var a1 = a[1];\n        out[1] = a[2];\n        out[2] = a1;\n    } else {\n        out[0] = a[0];\n        out[1] = a[2];\n        out[2] = a[1];\n        out[3] = a[3];\n    }\n    \n    return out;\n};\n\n/**\n * Inverts a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nmat2.invert = function(out, a) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],\n\n        // Calculate the determinant\n        det = a0 * a3 - a2 * a1;\n\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n    \n    out[0] =  a3 * det;\n    out[1] = -a1 * det;\n    out[2] = -a2 * det;\n    out[3] =  a0 * det;\n\n    return out;\n};\n\n/**\n * Calculates the adjugate of a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nmat2.adjoint = function(out, a) {\n    // Caching this value is nessecary if out == a\n    var a0 = a[0];\n    out[0] =  a[3];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    out[3] =  a0;\n\n    return out;\n};\n\n/**\n * Calculates the determinant of a mat2\n *\n * @param {mat2} a the source matrix\n * @returns {Number} determinant of a\n */\nmat2.determinant = function (a) {\n    return a[0] * a[3] - a[2] * a[1];\n};\n\n/**\n * Multiplies two mat2's\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @returns {mat2} out\n */\nmat2.multiply = function (out, a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n    out[0] = a0 * b0 + a2 * b1;\n    out[1] = a1 * b0 + a3 * b1;\n    out[2] = a0 * b2 + a2 * b3;\n    out[3] = a1 * b2 + a3 * b3;\n    return out;\n};\n\n/**\n * Alias for {@link mat2.multiply}\n * @function\n */\nmat2.mul = mat2.multiply;\n\n/**\n * Rotates a mat2 by the given angle\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2} out\n */\nmat2.rotate = function (out, a, rad) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],\n        s = Math.sin(rad),\n        c = Math.cos(rad);\n    out[0] = a0 *  c + a2 * s;\n    out[1] = a1 *  c + a3 * s;\n    out[2] = a0 * -s + a2 * c;\n    out[3] = a1 * -s + a3 * c;\n    return out;\n};\n\n/**\n * Scales the mat2 by the dimensions in the given vec2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the matrix to rotate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat2} out\n **/\nmat2.scale = function(out, a, v) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],\n        v0 = v[0], v1 = v[1];\n    out[0] = a0 * v0;\n    out[1] = a1 * v0;\n    out[2] = a2 * v1;\n    out[3] = a3 * v1;\n    return out;\n};\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat2.identity(dest);\n *     mat2.rotate(dest, dest, rad);\n *\n * @param {mat2} out mat2 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2} out\n */\nmat2.fromRotation = function(out, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad);\n    out[0] = c;\n    out[1] = s;\n    out[2] = -s;\n    out[3] = c;\n    return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat2.identity(dest);\n *     mat2.scale(dest, dest, vec);\n *\n * @param {mat2} out mat2 receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat2} out\n */\nmat2.fromScaling = function(out, v) {\n    out[0] = v[0];\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = v[1];\n    return out;\n}\n\n/**\n * Returns a string representation of a mat2\n *\n * @param {mat2} mat matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nmat2.str = function (a) {\n    return 'mat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n};\n\n/**\n * Returns Frobenius norm of a mat2\n *\n * @param {mat2} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nmat2.frob = function (a) {\n    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2)))\n};\n\n/**\n * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix\n * @param {mat2} L the lower triangular matrix \n * @param {mat2} D the diagonal matrix \n * @param {mat2} U the upper triangular matrix \n * @param {mat2} a the input matrix to factorize\n */\n\nmat2.LDU = function (L, D, U, a) { \n    L[2] = a[2]/a[0]; \n    U[0] = a[0]; \n    U[1] = a[1]; \n    U[3] = a[3] - L[2] * U[1]; \n    return [L, D, U];       \n}; \n\n/**\n * Adds two mat2's\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @returns {mat2} out\n */\nmat2.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    return out;\n};\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @returns {mat2} out\n */\nmat2.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    return out;\n};\n\n/**\n * Alias for {@link mat2.subtract}\n * @function\n */\nmat2.sub = mat2.subtract;\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat2} a The first matrix.\n * @param {mat2} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat2.exactEquals = function (a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n};\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat2} a The first matrix.\n * @param {mat2} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat2.equals = function (a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n            Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)));\n};\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat2} out\n */\nmat2.multiplyScalar = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    return out;\n};\n\n/**\n * Adds two mat2's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat2} out the receiving vector\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat2} out\n */\nmat2.multiplyScalarAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    out[2] = a[2] + (b[2] * scale);\n    out[3] = a[3] + (b[3] * scale);\n    return out;\n};\n\nmodule.exports = mat2;\n\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = __webpack_require__(1);\n\n/**\n * @class 2x3 Matrix\n * @name mat2d\n * \n * @description \n * A mat2d contains six elements defined as:\n * <pre>\n * [a, c, tx,\n *  b, d, ty]\n * </pre>\n * This is a short form for the 3x3 matrix:\n * <pre>\n * [a, c, tx,\n *  b, d, ty,\n *  0, 0, 1]\n * </pre>\n * The last row is ignored so the array is shorter and operations are faster.\n */\nvar mat2d = {};\n\n/**\n * Creates a new identity mat2d\n *\n * @returns {mat2d} a new 2x3 matrix\n */\nmat2d.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(6);\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    out[4] = 0;\n    out[5] = 0;\n    return out;\n};\n\n/**\n * Creates a new mat2d initialized with values from an existing matrix\n *\n * @param {mat2d} a matrix to clone\n * @returns {mat2d} a new 2x3 matrix\n */\nmat2d.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(6);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    return out;\n};\n\n/**\n * Copy the values from one mat2d to another\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the source matrix\n * @returns {mat2d} out\n */\nmat2d.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    return out;\n};\n\n/**\n * Set a mat2d to the identity matrix\n *\n * @param {mat2d} out the receiving matrix\n * @returns {mat2d} out\n */\nmat2d.identity = function(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    out[4] = 0;\n    out[5] = 0;\n    return out;\n};\n\n/**\n * Create a new mat2d with the given values\n *\n * @param {Number} a Component A (index 0)\n * @param {Number} b Component B (index 1)\n * @param {Number} c Component C (index 2)\n * @param {Number} d Component D (index 3)\n * @param {Number} tx Component TX (index 4)\n * @param {Number} ty Component TY (index 5)\n * @returns {mat2d} A new mat2d\n */\nmat2d.fromValues = function(a, b, c, d, tx, ty) {\n    var out = new glMatrix.ARRAY_TYPE(6);\n    out[0] = a;\n    out[1] = b;\n    out[2] = c;\n    out[3] = d;\n    out[4] = tx;\n    out[5] = ty;\n    return out;\n};\n\n/**\n * Set the components of a mat2d to the given values\n *\n * @param {mat2d} out the receiving matrix\n * @param {Number} a Component A (index 0)\n * @param {Number} b Component B (index 1)\n * @param {Number} c Component C (index 2)\n * @param {Number} d Component D (index 3)\n * @param {Number} tx Component TX (index 4)\n * @param {Number} ty Component TY (index 5)\n * @returns {mat2d} out\n */\nmat2d.set = function(out, a, b, c, d, tx, ty) {\n    out[0] = a;\n    out[1] = b;\n    out[2] = c;\n    out[3] = d;\n    out[4] = tx;\n    out[5] = ty;\n    return out;\n};\n\n/**\n * Inverts a mat2d\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the source matrix\n * @returns {mat2d} out\n */\nmat2d.invert = function(out, a) {\n    var aa = a[0], ab = a[1], ac = a[2], ad = a[3],\n        atx = a[4], aty = a[5];\n\n    var det = aa * ad - ab * ac;\n    if(!det){\n        return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = ad * det;\n    out[1] = -ab * det;\n    out[2] = -ac * det;\n    out[3] = aa * det;\n    out[4] = (ac * aty - ad * atx) * det;\n    out[5] = (ab * atx - aa * aty) * det;\n    return out;\n};\n\n/**\n * Calculates the determinant of a mat2d\n *\n * @param {mat2d} a the source matrix\n * @returns {Number} determinant of a\n */\nmat2d.determinant = function (a) {\n    return a[0] * a[3] - a[1] * a[2];\n};\n\n/**\n * Multiplies two mat2d's\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @returns {mat2d} out\n */\nmat2d.multiply = function (out, a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],\n        b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];\n    out[0] = a0 * b0 + a2 * b1;\n    out[1] = a1 * b0 + a3 * b1;\n    out[2] = a0 * b2 + a2 * b3;\n    out[3] = a1 * b2 + a3 * b3;\n    out[4] = a0 * b4 + a2 * b5 + a4;\n    out[5] = a1 * b4 + a3 * b5 + a5;\n    return out;\n};\n\n/**\n * Alias for {@link mat2d.multiply}\n * @function\n */\nmat2d.mul = mat2d.multiply;\n\n/**\n * Rotates a mat2d by the given angle\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2d} out\n */\nmat2d.rotate = function (out, a, rad) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],\n        s = Math.sin(rad),\n        c = Math.cos(rad);\n    out[0] = a0 *  c + a2 * s;\n    out[1] = a1 *  c + a3 * s;\n    out[2] = a0 * -s + a2 * c;\n    out[3] = a1 * -s + a3 * c;\n    out[4] = a4;\n    out[5] = a5;\n    return out;\n};\n\n/**\n * Scales the mat2d by the dimensions in the given vec2\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to translate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat2d} out\n **/\nmat2d.scale = function(out, a, v) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],\n        v0 = v[0], v1 = v[1];\n    out[0] = a0 * v0;\n    out[1] = a1 * v0;\n    out[2] = a2 * v1;\n    out[3] = a3 * v1;\n    out[4] = a4;\n    out[5] = a5;\n    return out;\n};\n\n/**\n * Translates the mat2d by the dimensions in the given vec2\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to translate\n * @param {vec2} v the vec2 to translate the matrix by\n * @returns {mat2d} out\n **/\nmat2d.translate = function(out, a, v) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],\n        v0 = v[0], v1 = v[1];\n    out[0] = a0;\n    out[1] = a1;\n    out[2] = a2;\n    out[3] = a3;\n    out[4] = a0 * v0 + a2 * v1 + a4;\n    out[5] = a1 * v0 + a3 * v1 + a5;\n    return out;\n};\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.rotate(dest, dest, rad);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2d} out\n */\nmat2d.fromRotation = function(out, rad) {\n    var s = Math.sin(rad), c = Math.cos(rad);\n    out[0] = c;\n    out[1] = s;\n    out[2] = -s;\n    out[3] = c;\n    out[4] = 0;\n    out[5] = 0;\n    return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.scale(dest, dest, vec);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat2d} out\n */\nmat2d.fromScaling = function(out, v) {\n    out[0] = v[0];\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = v[1];\n    out[4] = 0;\n    out[5] = 0;\n    return out;\n}\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.translate(dest, dest, vec);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {vec2} v Translation vector\n * @returns {mat2d} out\n */\nmat2d.fromTranslation = function(out, v) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    out[4] = v[0];\n    out[5] = v[1];\n    return out;\n}\n\n/**\n * Returns a string representation of a mat2d\n *\n * @param {mat2d} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nmat2d.str = function (a) {\n    return 'mat2d(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + \n                    a[3] + ', ' + a[4] + ', ' + a[5] + ')';\n};\n\n/**\n * Returns Frobenius norm of a mat2d\n *\n * @param {mat2d} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nmat2d.frob = function (a) { \n    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + 1))\n}; \n\n/**\n * Adds two mat2d's\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @returns {mat2d} out\n */\nmat2d.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    out[4] = a[4] + b[4];\n    out[5] = a[5] + b[5];\n    return out;\n};\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @returns {mat2d} out\n */\nmat2d.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    out[4] = a[4] - b[4];\n    out[5] = a[5] - b[5];\n    return out;\n};\n\n/**\n * Alias for {@link mat2d.subtract}\n * @function\n */\nmat2d.sub = mat2d.subtract;\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat2d} out\n */\nmat2d.multiplyScalar = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    out[4] = a[4] * b;\n    out[5] = a[5] * b;\n    return out;\n};\n\n/**\n * Adds two mat2d's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat2d} out the receiving vector\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat2d} out\n */\nmat2d.multiplyScalarAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    out[2] = a[2] + (b[2] * scale);\n    out[3] = a[3] + (b[3] * scale);\n    out[4] = a[4] + (b[4] * scale);\n    out[5] = a[5] + (b[5] * scale);\n    return out;\n};\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat2d} a The first matrix.\n * @param {mat2d} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat2d.exactEquals = function (a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];\n};\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat2d} a The first matrix.\n * @param {mat2d} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat2d.equals = function (a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\n    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];\n    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n            Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n            Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n            Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)));\n};\n\nmodule.exports = mat2d;\n\n\n/***/ }),\n/* 23 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = __webpack_require__(1);\n\n/**\n * @class 4x4 Matrix\n * @name mat4\n */\nvar mat4 = {\n  scalar: {},\n  SIMD: {},\n};\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\nmat4.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(16);\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n};\n\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {mat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\nmat4.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(16);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n};\n\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n};\n\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\nmat4.fromValues = function(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n    var out = new glMatrix.ARRAY_TYPE(16);\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m03;\n    out[4] = m10;\n    out[5] = m11;\n    out[6] = m12;\n    out[7] = m13;\n    out[8] = m20;\n    out[9] = m21;\n    out[10] = m22;\n    out[11] = m23;\n    out[12] = m30;\n    out[13] = m31;\n    out[14] = m32;\n    out[15] = m33;\n    return out;\n};\n\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\nmat4.set = function(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m03;\n    out[4] = m10;\n    out[5] = m11;\n    out[6] = m12;\n    out[7] = m13;\n    out[8] = m20;\n    out[9] = m21;\n    out[10] = m22;\n    out[11] = m23;\n    out[12] = m30;\n    out[13] = m31;\n    out[14] = m32;\n    out[15] = m33;\n    return out;\n};\n\n\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\nmat4.identity = function(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n};\n\n/**\n * Transpose the values of a mat4 not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.scalar.transpose = function(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        var a01 = a[1], a02 = a[2], a03 = a[3],\n            a12 = a[6], a13 = a[7],\n            a23 = a[11];\n\n        out[1] = a[4];\n        out[2] = a[8];\n        out[3] = a[12];\n        out[4] = a01;\n        out[6] = a[9];\n        out[7] = a[13];\n        out[8] = a02;\n        out[9] = a12;\n        out[11] = a[14];\n        out[12] = a03;\n        out[13] = a13;\n        out[14] = a23;\n    } else {\n        out[0] = a[0];\n        out[1] = a[4];\n        out[2] = a[8];\n        out[3] = a[12];\n        out[4] = a[1];\n        out[5] = a[5];\n        out[6] = a[9];\n        out[7] = a[13];\n        out[8] = a[2];\n        out[9] = a[6];\n        out[10] = a[10];\n        out[11] = a[14];\n        out[12] = a[3];\n        out[13] = a[7];\n        out[14] = a[11];\n        out[15] = a[15];\n    }\n\n    return out;\n};\n\n/**\n * Transpose the values of a mat4 using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.SIMD.transpose = function(out, a) {\n    var a0, a1, a2, a3,\n        tmp01, tmp23,\n        out0, out1, out2, out3;\n\n    a0 = SIMD.Float32x4.load(a, 0);\n    a1 = SIMD.Float32x4.load(a, 4);\n    a2 = SIMD.Float32x4.load(a, 8);\n    a3 = SIMD.Float32x4.load(a, 12);\n\n    tmp01 = SIMD.Float32x4.shuffle(a0, a1, 0, 1, 4, 5);\n    tmp23 = SIMD.Float32x4.shuffle(a2, a3, 0, 1, 4, 5);\n    out0  = SIMD.Float32x4.shuffle(tmp01, tmp23, 0, 2, 4, 6);\n    out1  = SIMD.Float32x4.shuffle(tmp01, tmp23, 1, 3, 5, 7);\n    SIMD.Float32x4.store(out, 0,  out0);\n    SIMD.Float32x4.store(out, 4,  out1);\n\n    tmp01 = SIMD.Float32x4.shuffle(a0, a1, 2, 3, 6, 7);\n    tmp23 = SIMD.Float32x4.shuffle(a2, a3, 2, 3, 6, 7);\n    out2  = SIMD.Float32x4.shuffle(tmp01, tmp23, 0, 2, 4, 6);\n    out3  = SIMD.Float32x4.shuffle(tmp01, tmp23, 1, 3, 5, 7);\n    SIMD.Float32x4.store(out, 8,  out2);\n    SIMD.Float32x4.store(out, 12, out3);\n\n    return out;\n};\n\n/**\n * Transpse a mat4 using SIMD if available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.transpose = glMatrix.USE_SIMD ? mat4.SIMD.transpose : mat4.scalar.transpose;\n\n/**\n * Inverts a mat4 not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.scalar.invert = function(out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],\n\n        b00 = a00 * a11 - a01 * a10,\n        b01 = a00 * a12 - a02 * a10,\n        b02 = a00 * a13 - a03 * a10,\n        b03 = a01 * a12 - a02 * a11,\n        b04 = a01 * a13 - a03 * a11,\n        b05 = a02 * a13 - a03 * a12,\n        b06 = a20 * a31 - a21 * a30,\n        b07 = a20 * a32 - a22 * a30,\n        b08 = a20 * a33 - a23 * a30,\n        b09 = a21 * a32 - a22 * a31,\n        b10 = a21 * a33 - a23 * a31,\n        b11 = a22 * a33 - a23 * a32,\n\n        // Calculate the determinant\n        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n\n    return out;\n};\n\n/**\n * Inverts a mat4 using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.SIMD.invert = function(out, a) {\n  var row0, row1, row2, row3,\n      tmp1,\n      minor0, minor1, minor2, minor3,\n      det,\n      a0 = SIMD.Float32x4.load(a, 0),\n      a1 = SIMD.Float32x4.load(a, 4),\n      a2 = SIMD.Float32x4.load(a, 8),\n      a3 = SIMD.Float32x4.load(a, 12);\n\n  // Compute matrix adjugate\n  tmp1 = SIMD.Float32x4.shuffle(a0, a1, 0, 1, 4, 5);\n  row1 = SIMD.Float32x4.shuffle(a2, a3, 0, 1, 4, 5);\n  row0 = SIMD.Float32x4.shuffle(tmp1, row1, 0, 2, 4, 6);\n  row1 = SIMD.Float32x4.shuffle(row1, tmp1, 1, 3, 5, 7);\n  tmp1 = SIMD.Float32x4.shuffle(a0, a1, 2, 3, 6, 7);\n  row3 = SIMD.Float32x4.shuffle(a2, a3, 2, 3, 6, 7);\n  row2 = SIMD.Float32x4.shuffle(tmp1, row3, 0, 2, 4, 6);\n  row3 = SIMD.Float32x4.shuffle(row3, tmp1, 1, 3, 5, 7);\n\n  tmp1   = SIMD.Float32x4.mul(row2, row3);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor0 = SIMD.Float32x4.mul(row1, tmp1);\n  minor1 = SIMD.Float32x4.mul(row0, tmp1);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor0 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row1, tmp1), minor0);\n  minor1 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor1);\n  minor1 = SIMD.Float32x4.swizzle(minor1, 2, 3, 0, 1);\n\n  tmp1   = SIMD.Float32x4.mul(row1, row2);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor0 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor0);\n  minor3 = SIMD.Float32x4.mul(row0, tmp1);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor0 = SIMD.Float32x4.sub(minor0, SIMD.Float32x4.mul(row3, tmp1));\n  minor3 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor3);\n  minor3 = SIMD.Float32x4.swizzle(minor3, 2, 3, 0, 1);\n\n  tmp1   = SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(row1, 2, 3, 0, 1), row3);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  row2   = SIMD.Float32x4.swizzle(row2, 2, 3, 0, 1);\n  minor0 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row2, tmp1), minor0);\n  minor2 = SIMD.Float32x4.mul(row0, tmp1);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor0 = SIMD.Float32x4.sub(minor0, SIMD.Float32x4.mul(row2, tmp1));\n  minor2 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor2);\n  minor2 = SIMD.Float32x4.swizzle(minor2, 2, 3, 0, 1);\n\n  tmp1   = SIMD.Float32x4.mul(row0, row1);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor2 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor2);\n  minor3 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row2, tmp1), minor3);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor2 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row3, tmp1), minor2);\n  minor3 = SIMD.Float32x4.sub(minor3, SIMD.Float32x4.mul(row2, tmp1));\n\n  tmp1   = SIMD.Float32x4.mul(row0, row3);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor1 = SIMD.Float32x4.sub(minor1, SIMD.Float32x4.mul(row2, tmp1));\n  minor2 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row1, tmp1), minor2);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor1 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row2, tmp1), minor1);\n  minor2 = SIMD.Float32x4.sub(minor2, SIMD.Float32x4.mul(row1, tmp1));\n\n  tmp1   = SIMD.Float32x4.mul(row0, row2);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor1 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor1);\n  minor3 = SIMD.Float32x4.sub(minor3, SIMD.Float32x4.mul(row1, tmp1));\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor1 = SIMD.Float32x4.sub(minor1, SIMD.Float32x4.mul(row3, tmp1));\n  minor3 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row1, tmp1), minor3);\n\n  // Compute matrix determinant\n  det   = SIMD.Float32x4.mul(row0, minor0);\n  det   = SIMD.Float32x4.add(SIMD.Float32x4.swizzle(det, 2, 3, 0, 1), det);\n  det   = SIMD.Float32x4.add(SIMD.Float32x4.swizzle(det, 1, 0, 3, 2), det);\n  tmp1  = SIMD.Float32x4.reciprocalApproximation(det);\n  det   = SIMD.Float32x4.sub(\n               SIMD.Float32x4.add(tmp1, tmp1),\n               SIMD.Float32x4.mul(det, SIMD.Float32x4.mul(tmp1, tmp1)));\n  det   = SIMD.Float32x4.swizzle(det, 0, 0, 0, 0);\n  if (!det) {\n      return null;\n  }\n\n  // Compute matrix inverse\n  SIMD.Float32x4.store(out, 0,  SIMD.Float32x4.mul(det, minor0));\n  SIMD.Float32x4.store(out, 4,  SIMD.Float32x4.mul(det, minor1));\n  SIMD.Float32x4.store(out, 8,  SIMD.Float32x4.mul(det, minor2));\n  SIMD.Float32x4.store(out, 12, SIMD.Float32x4.mul(det, minor3));\n  return out;\n}\n\n/**\n * Inverts a mat4 using SIMD if available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.invert = glMatrix.USE_SIMD ? mat4.SIMD.invert : mat4.scalar.invert;\n\n/**\n * Calculates the adjugate of a mat4 not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.scalar.adjoint = function(out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n    out[0]  =  (a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22));\n    out[1]  = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n    out[2]  =  (a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12));\n    out[3]  = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n    out[4]  = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n    out[5]  =  (a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22));\n    out[6]  = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n    out[7]  =  (a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12));\n    out[8]  =  (a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21));\n    out[9]  = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n    out[10] =  (a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11));\n    out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n    out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n    out[13] =  (a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21));\n    out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n    out[15] =  (a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11));\n    return out;\n};\n\n/**\n * Calculates the adjugate of a mat4 using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.SIMD.adjoint = function(out, a) {\n  var a0, a1, a2, a3;\n  var row0, row1, row2, row3;\n  var tmp1;\n  var minor0, minor1, minor2, minor3;\n\n  var a0 = SIMD.Float32x4.load(a, 0);\n  var a1 = SIMD.Float32x4.load(a, 4);\n  var a2 = SIMD.Float32x4.load(a, 8);\n  var a3 = SIMD.Float32x4.load(a, 12);\n\n  // Transpose the source matrix.  Sort of.  Not a true transpose operation\n  tmp1 = SIMD.Float32x4.shuffle(a0, a1, 0, 1, 4, 5);\n  row1 = SIMD.Float32x4.shuffle(a2, a3, 0, 1, 4, 5);\n  row0 = SIMD.Float32x4.shuffle(tmp1, row1, 0, 2, 4, 6);\n  row1 = SIMD.Float32x4.shuffle(row1, tmp1, 1, 3, 5, 7);\n\n  tmp1 = SIMD.Float32x4.shuffle(a0, a1, 2, 3, 6, 7);\n  row3 = SIMD.Float32x4.shuffle(a2, a3, 2, 3, 6, 7);\n  row2 = SIMD.Float32x4.shuffle(tmp1, row3, 0, 2, 4, 6);\n  row3 = SIMD.Float32x4.shuffle(row3, tmp1, 1, 3, 5, 7);\n\n  tmp1   = SIMD.Float32x4.mul(row2, row3);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor0 = SIMD.Float32x4.mul(row1, tmp1);\n  minor1 = SIMD.Float32x4.mul(row0, tmp1);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor0 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row1, tmp1), minor0);\n  minor1 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor1);\n  minor1 = SIMD.Float32x4.swizzle(minor1, 2, 3, 0, 1);\n\n  tmp1   = SIMD.Float32x4.mul(row1, row2);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor0 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor0);\n  minor3 = SIMD.Float32x4.mul(row0, tmp1);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor0 = SIMD.Float32x4.sub(minor0, SIMD.Float32x4.mul(row3, tmp1));\n  minor3 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor3);\n  minor3 = SIMD.Float32x4.swizzle(minor3, 2, 3, 0, 1);\n\n  tmp1   = SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(row1, 2, 3, 0, 1), row3);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  row2   = SIMD.Float32x4.swizzle(row2, 2, 3, 0, 1);\n  minor0 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row2, tmp1), minor0);\n  minor2 = SIMD.Float32x4.mul(row0, tmp1);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor0 = SIMD.Float32x4.sub(minor0, SIMD.Float32x4.mul(row2, tmp1));\n  minor2 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor2);\n  minor2 = SIMD.Float32x4.swizzle(minor2, 2, 3, 0, 1);\n\n  tmp1   = SIMD.Float32x4.mul(row0, row1);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor2 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor2);\n  minor3 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row2, tmp1), minor3);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor2 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row3, tmp1), minor2);\n  minor3 = SIMD.Float32x4.sub(minor3, SIMD.Float32x4.mul(row2, tmp1));\n\n  tmp1   = SIMD.Float32x4.mul(row0, row3);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor1 = SIMD.Float32x4.sub(minor1, SIMD.Float32x4.mul(row2, tmp1));\n  minor2 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row1, tmp1), minor2);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor1 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row2, tmp1), minor1);\n  minor2 = SIMD.Float32x4.sub(minor2, SIMD.Float32x4.mul(row1, tmp1));\n\n  tmp1   = SIMD.Float32x4.mul(row0, row2);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor1 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor1);\n  minor3 = SIMD.Float32x4.sub(minor3, SIMD.Float32x4.mul(row1, tmp1));\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor1 = SIMD.Float32x4.sub(minor1, SIMD.Float32x4.mul(row3, tmp1));\n  minor3 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row1, tmp1), minor3);\n\n  SIMD.Float32x4.store(out, 0,  minor0);\n  SIMD.Float32x4.store(out, 4,  minor1);\n  SIMD.Float32x4.store(out, 8,  minor2);\n  SIMD.Float32x4.store(out, 12, minor3);\n  return out;\n};\n\n/**\n * Calculates the adjugate of a mat4 using SIMD if available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\n mat4.adjoint = glMatrix.USE_SIMD ? mat4.SIMD.adjoint : mat4.scalar.adjoint;\n\n/**\n * Calculates the determinant of a mat4\n *\n * @param {mat4} a the source matrix\n * @returns {Number} determinant of a\n */\nmat4.determinant = function (a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],\n\n        b00 = a00 * a11 - a01 * a10,\n        b01 = a00 * a12 - a02 * a10,\n        b02 = a00 * a13 - a03 * a10,\n        b03 = a01 * a12 - a02 * a11,\n        b04 = a01 * a13 - a03 * a11,\n        b05 = a02 * a13 - a03 * a12,\n        b06 = a20 * a31 - a21 * a30,\n        b07 = a20 * a32 - a22 * a30,\n        b08 = a20 * a33 - a23 * a30,\n        b09 = a21 * a32 - a22 * a31,\n        b10 = a21 * a33 - a23 * a31,\n        b11 = a22 * a33 - a23 * a32;\n\n    // Calculate the determinant\n    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n};\n\n/**\n * Multiplies two mat4's explicitly using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand, must be a Float32Array\n * @param {mat4} b the second operand, must be a Float32Array\n * @returns {mat4} out\n */\nmat4.SIMD.multiply = function (out, a, b) {\n    var a0 = SIMD.Float32x4.load(a, 0);\n    var a1 = SIMD.Float32x4.load(a, 4);\n    var a2 = SIMD.Float32x4.load(a, 8);\n    var a3 = SIMD.Float32x4.load(a, 12);\n\n    var b0 = SIMD.Float32x4.load(b, 0);\n    var out0 = SIMD.Float32x4.add(\n                   SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b0, 0, 0, 0, 0), a0),\n                   SIMD.Float32x4.add(\n                       SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b0, 1, 1, 1, 1), a1),\n                       SIMD.Float32x4.add(\n                           SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b0, 2, 2, 2, 2), a2),\n                           SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b0, 3, 3, 3, 3), a3))));\n    SIMD.Float32x4.store(out, 0, out0);\n\n    var b1 = SIMD.Float32x4.load(b, 4);\n    var out1 = SIMD.Float32x4.add(\n                   SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b1, 0, 0, 0, 0), a0),\n                   SIMD.Float32x4.add(\n                       SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b1, 1, 1, 1, 1), a1),\n                       SIMD.Float32x4.add(\n                           SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b1, 2, 2, 2, 2), a2),\n                           SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b1, 3, 3, 3, 3), a3))));\n    SIMD.Float32x4.store(out, 4, out1);\n\n    var b2 = SIMD.Float32x4.load(b, 8);\n    var out2 = SIMD.Float32x4.add(\n                   SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b2, 0, 0, 0, 0), a0),\n                   SIMD.Float32x4.add(\n                       SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b2, 1, 1, 1, 1), a1),\n                       SIMD.Float32x4.add(\n                               SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b2, 2, 2, 2, 2), a2),\n                               SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b2, 3, 3, 3, 3), a3))));\n    SIMD.Float32x4.store(out, 8, out2);\n\n    var b3 = SIMD.Float32x4.load(b, 12);\n    var out3 = SIMD.Float32x4.add(\n                   SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b3, 0, 0, 0, 0), a0),\n                   SIMD.Float32x4.add(\n                        SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b3, 1, 1, 1, 1), a1),\n                        SIMD.Float32x4.add(\n                            SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b3, 2, 2, 2, 2), a2),\n                            SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b3, 3, 3, 3, 3), a3))));\n    SIMD.Float32x4.store(out, 12, out3);\n\n    return out;\n};\n\n/**\n * Multiplies two mat4's explicitly not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nmat4.scalar.multiply = function (out, a, b) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n    // Cache only the current line of the second matrix\n    var b0  = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n    out[0] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n    out[1] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n    out[2] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n    out[3] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n    b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];\n    out[4] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n    out[5] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n    out[6] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n    out[7] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n    b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];\n    out[8] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n    out[9] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n    out[10] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n    out[11] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n    b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];\n    out[12] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n    out[13] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n    out[14] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n    out[15] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n    return out;\n};\n\n/**\n * Multiplies two mat4's using SIMD if available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nmat4.multiply = glMatrix.USE_SIMD ? mat4.SIMD.multiply : mat4.scalar.multiply;\n\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\nmat4.mul = mat4.multiply;\n\n/**\n * Translate a mat4 by the given vector not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to translate\n * @param {vec3} v vector to translate by\n * @returns {mat4} out\n */\nmat4.scalar.translate = function (out, a, v) {\n    var x = v[0], y = v[1], z = v[2],\n        a00, a01, a02, a03,\n        a10, a11, a12, a13,\n        a20, a21, a22, a23;\n\n    if (a === out) {\n        out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n        out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n        out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n        out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n    } else {\n        a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n        a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n        a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n        out[0] = a00; out[1] = a01; out[2] = a02; out[3] = a03;\n        out[4] = a10; out[5] = a11; out[6] = a12; out[7] = a13;\n        out[8] = a20; out[9] = a21; out[10] = a22; out[11] = a23;\n\n        out[12] = a00 * x + a10 * y + a20 * z + a[12];\n        out[13] = a01 * x + a11 * y + a21 * z + a[13];\n        out[14] = a02 * x + a12 * y + a22 * z + a[14];\n        out[15] = a03 * x + a13 * y + a23 * z + a[15];\n    }\n\n    return out;\n};\n\n/**\n * Translates a mat4 by the given vector using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to translate\n * @param {vec3} v vector to translate by\n * @returns {mat4} out\n */\nmat4.SIMD.translate = function (out, a, v) {\n    var a0 = SIMD.Float32x4.load(a, 0),\n        a1 = SIMD.Float32x4.load(a, 4),\n        a2 = SIMD.Float32x4.load(a, 8),\n        a3 = SIMD.Float32x4.load(a, 12),\n        vec = SIMD.Float32x4(v[0], v[1], v[2] , 0);\n\n    if (a !== out) {\n        out[0] = a[0]; out[1] = a[1]; out[2] = a[2]; out[3] = a[3];\n        out[4] = a[4]; out[5] = a[5]; out[6] = a[6]; out[7] = a[7];\n        out[8] = a[8]; out[9] = a[9]; out[10] = a[10]; out[11] = a[11];\n    }\n\n    a0 = SIMD.Float32x4.mul(a0, SIMD.Float32x4.swizzle(vec, 0, 0, 0, 0));\n    a1 = SIMD.Float32x4.mul(a1, SIMD.Float32x4.swizzle(vec, 1, 1, 1, 1));\n    a2 = SIMD.Float32x4.mul(a2, SIMD.Float32x4.swizzle(vec, 2, 2, 2, 2));\n\n    var t0 = SIMD.Float32x4.add(a0, SIMD.Float32x4.add(a1, SIMD.Float32x4.add(a2, a3)));\n    SIMD.Float32x4.store(out, 12, t0);\n\n    return out;\n};\n\n/**\n * Translates a mat4 by the given vector using SIMD if available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to translate\n * @param {vec3} v vector to translate by\n * @returns {mat4} out\n */\nmat4.translate = glMatrix.USE_SIMD ? mat4.SIMD.translate : mat4.scalar.translate;\n\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {vec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\nmat4.scalar.scale = function(out, a, v) {\n    var x = v[0], y = v[1], z = v[2];\n\n    out[0] = a[0] * x;\n    out[1] = a[1] * x;\n    out[2] = a[2] * x;\n    out[3] = a[3] * x;\n    out[4] = a[4] * y;\n    out[5] = a[5] * y;\n    out[6] = a[6] * y;\n    out[7] = a[7] * y;\n    out[8] = a[8] * z;\n    out[9] = a[9] * z;\n    out[10] = a[10] * z;\n    out[11] = a[11] * z;\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n};\n\n/**\n * Scales the mat4 by the dimensions in the given vec3 using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {vec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\nmat4.SIMD.scale = function(out, a, v) {\n    var a0, a1, a2;\n    var vec = SIMD.Float32x4(v[0], v[1], v[2], 0);\n\n    a0 = SIMD.Float32x4.load(a, 0);\n    SIMD.Float32x4.store(\n        out, 0, SIMD.Float32x4.mul(a0, SIMD.Float32x4.swizzle(vec, 0, 0, 0, 0)));\n\n    a1 = SIMD.Float32x4.load(a, 4);\n    SIMD.Float32x4.store(\n        out, 4, SIMD.Float32x4.mul(a1, SIMD.Float32x4.swizzle(vec, 1, 1, 1, 1)));\n\n    a2 = SIMD.Float32x4.load(a, 8);\n    SIMD.Float32x4.store(\n        out, 8, SIMD.Float32x4.mul(a2, SIMD.Float32x4.swizzle(vec, 2, 2, 2, 2)));\n\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n};\n\n/**\n * Scales the mat4 by the dimensions in the given vec3 using SIMD if available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {vec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n */\nmat4.scale = glMatrix.USE_SIMD ? mat4.SIMD.scale : mat4.scalar.scale;\n\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nmat4.rotate = function (out, a, rad, axis) {\n    var x = axis[0], y = axis[1], z = axis[2],\n        len = Math.sqrt(x * x + y * y + z * z),\n        s, c, t,\n        a00, a01, a02, a03,\n        a10, a11, a12, a13,\n        a20, a21, a22, a23,\n        b00, b01, b02,\n        b10, b11, b12,\n        b20, b21, b22;\n\n    if (Math.abs(len) < glMatrix.EPSILON) { return null; }\n\n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n\n    s = Math.sin(rad);\n    c = Math.cos(rad);\n    t = 1 - c;\n\n    a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n    a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n    a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n    // Construct the elements of the rotation matrix\n    b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;\n    b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;\n    b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;\n\n    // Perform rotation-specific matrix multiplication\n    out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n    out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n    out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n    out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n    out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n    out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n    out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n    out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n    out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n    out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n    out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n    out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged last row\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the X axis not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.scalar.rotateX = function (out, a, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad),\n        a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7],\n        a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged rows\n        out[0]  = a[0];\n        out[1]  = a[1];\n        out[2]  = a[2];\n        out[3]  = a[3];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    out[4] = a10 * c + a20 * s;\n    out[5] = a11 * c + a21 * s;\n    out[6] = a12 * c + a22 * s;\n    out[7] = a13 * c + a23 * s;\n    out[8] = a20 * c - a10 * s;\n    out[9] = a21 * c - a11 * s;\n    out[10] = a22 * c - a12 * s;\n    out[11] = a23 * c - a13 * s;\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the X axis using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.SIMD.rotateX = function (out, a, rad) {\n    var s = SIMD.Float32x4.splat(Math.sin(rad)),\n        c = SIMD.Float32x4.splat(Math.cos(rad));\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged rows\n      out[0]  = a[0];\n      out[1]  = a[1];\n      out[2]  = a[2];\n      out[3]  = a[3];\n      out[12] = a[12];\n      out[13] = a[13];\n      out[14] = a[14];\n      out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    var a_1 = SIMD.Float32x4.load(a, 4);\n    var a_2 = SIMD.Float32x4.load(a, 8);\n    SIMD.Float32x4.store(out, 4,\n                         SIMD.Float32x4.add(SIMD.Float32x4.mul(a_1, c), SIMD.Float32x4.mul(a_2, s)));\n    SIMD.Float32x4.store(out, 8,\n                         SIMD.Float32x4.sub(SIMD.Float32x4.mul(a_2, c), SIMD.Float32x4.mul(a_1, s)));\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the X axis using SIMD if availabe and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.rotateX = glMatrix.USE_SIMD ? mat4.SIMD.rotateX : mat4.scalar.rotateX;\n\n/**\n * Rotates a matrix by the given angle around the Y axis not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.scalar.rotateY = function (out, a, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad),\n        a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3],\n        a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged rows\n        out[4]  = a[4];\n        out[5]  = a[5];\n        out[6]  = a[6];\n        out[7]  = a[7];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    out[0] = a00 * c - a20 * s;\n    out[1] = a01 * c - a21 * s;\n    out[2] = a02 * c - a22 * s;\n    out[3] = a03 * c - a23 * s;\n    out[8] = a00 * s + a20 * c;\n    out[9] = a01 * s + a21 * c;\n    out[10] = a02 * s + a22 * c;\n    out[11] = a03 * s + a23 * c;\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the Y axis using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.SIMD.rotateY = function (out, a, rad) {\n    var s = SIMD.Float32x4.splat(Math.sin(rad)),\n        c = SIMD.Float32x4.splat(Math.cos(rad));\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged rows\n        out[4]  = a[4];\n        out[5]  = a[5];\n        out[6]  = a[6];\n        out[7]  = a[7];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    var a_0 = SIMD.Float32x4.load(a, 0);\n    var a_2 = SIMD.Float32x4.load(a, 8);\n    SIMD.Float32x4.store(out, 0,\n                         SIMD.Float32x4.sub(SIMD.Float32x4.mul(a_0, c), SIMD.Float32x4.mul(a_2, s)));\n    SIMD.Float32x4.store(out, 8,\n                         SIMD.Float32x4.add(SIMD.Float32x4.mul(a_0, s), SIMD.Float32x4.mul(a_2, c)));\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the Y axis if SIMD available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n mat4.rotateY = glMatrix.USE_SIMD ? mat4.SIMD.rotateY : mat4.scalar.rotateY;\n\n/**\n * Rotates a matrix by the given angle around the Z axis not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.scalar.rotateZ = function (out, a, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad),\n        a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3],\n        a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7];\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged last row\n        out[8]  = a[8];\n        out[9]  = a[9];\n        out[10] = a[10];\n        out[11] = a[11];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    out[0] = a00 * c + a10 * s;\n    out[1] = a01 * c + a11 * s;\n    out[2] = a02 * c + a12 * s;\n    out[3] = a03 * c + a13 * s;\n    out[4] = a10 * c - a00 * s;\n    out[5] = a11 * c - a01 * s;\n    out[6] = a12 * c - a02 * s;\n    out[7] = a13 * c - a03 * s;\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the Z axis using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.SIMD.rotateZ = function (out, a, rad) {\n    var s = SIMD.Float32x4.splat(Math.sin(rad)),\n        c = SIMD.Float32x4.splat(Math.cos(rad));\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged last row\n        out[8]  = a[8];\n        out[9]  = a[9];\n        out[10] = a[10];\n        out[11] = a[11];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    var a_0 = SIMD.Float32x4.load(a, 0);\n    var a_1 = SIMD.Float32x4.load(a, 4);\n    SIMD.Float32x4.store(out, 0,\n                         SIMD.Float32x4.add(SIMD.Float32x4.mul(a_0, c), SIMD.Float32x4.mul(a_1, s)));\n    SIMD.Float32x4.store(out, 4,\n                         SIMD.Float32x4.sub(SIMD.Float32x4.mul(a_1, c), SIMD.Float32x4.mul(a_0, s)));\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the Z axis if SIMD available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n mat4.rotateZ = glMatrix.USE_SIMD ? mat4.SIMD.rotateZ : mat4.scalar.rotateZ;\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {vec3} v Translation vector\n * @returns {mat4} out\n */\nmat4.fromTranslation = function(out, v) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = v[0];\n    out[13] = v[1];\n    out[14] = v[2];\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {vec3} v Scaling vector\n * @returns {mat4} out\n */\nmat4.fromScaling = function(out, v) {\n    out[0] = v[0];\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = v[1];\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = v[2];\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nmat4.fromRotation = function(out, rad, axis) {\n    var x = axis[0], y = axis[1], z = axis[2],\n        len = Math.sqrt(x * x + y * y + z * z),\n        s, c, t;\n\n    if (Math.abs(len) < glMatrix.EPSILON) { return null; }\n\n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n\n    s = Math.sin(rad);\n    c = Math.cos(rad);\n    t = 1 - c;\n\n    // Perform rotation-specific matrix multiplication\n    out[0] = x * x * t + c;\n    out[1] = y * x * t + z * s;\n    out[2] = z * x * t - y * s;\n    out[3] = 0;\n    out[4] = x * y * t - z * s;\n    out[5] = y * y * t + c;\n    out[6] = z * y * t + x * s;\n    out[7] = 0;\n    out[8] = x * z * t + y * s;\n    out[9] = y * z * t - x * s;\n    out[10] = z * z * t + c;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.fromXRotation = function(out, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad);\n\n    // Perform axis-specific matrix multiplication\n    out[0]  = 1;\n    out[1]  = 0;\n    out[2]  = 0;\n    out[3]  = 0;\n    out[4] = 0;\n    out[5] = c;\n    out[6] = s;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = -s;\n    out[10] = c;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.fromYRotation = function(out, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad);\n\n    // Perform axis-specific matrix multiplication\n    out[0]  = c;\n    out[1]  = 0;\n    out[2]  = -s;\n    out[3]  = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = s;\n    out[9] = 0;\n    out[10] = c;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.fromZRotation = function(out, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad);\n\n    // Perform axis-specific matrix multiplication\n    out[0]  = c;\n    out[1]  = s;\n    out[2]  = 0;\n    out[3]  = 0;\n    out[4] = -s;\n    out[5] = c;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     var quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @returns {mat4} out\n */\nmat4.fromRotationTranslation = function (out, q, v) {\n    // Quaternion math\n    var x = q[0], y = q[1], z = q[2], w = q[3],\n        x2 = x + x,\n        y2 = y + y,\n        z2 = z + z,\n\n        xx = x * x2,\n        xy = x * y2,\n        xz = x * z2,\n        yy = y * y2,\n        yz = y * z2,\n        zz = z * z2,\n        wx = w * x2,\n        wy = w * y2,\n        wz = w * z2;\n\n    out[0] = 1 - (yy + zz);\n    out[1] = xy + wz;\n    out[2] = xz - wy;\n    out[3] = 0;\n    out[4] = xy - wz;\n    out[5] = 1 - (xx + zz);\n    out[6] = yz + wx;\n    out[7] = 0;\n    out[8] = xz + wy;\n    out[9] = yz - wx;\n    out[10] = 1 - (xx + yy);\n    out[11] = 0;\n    out[12] = v[0];\n    out[13] = v[1];\n    out[14] = v[2];\n    out[15] = 1;\n\n    return out;\n};\n\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nmat4.getTranslation = function (out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n\n  return out;\n};\n\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {mat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\nmat4.getRotation = function (out, mat) {\n  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n  var trace = mat[0] + mat[5] + mat[10];\n  var S = 0;\n\n  if (trace > 0) { \n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (mat[6] - mat[9]) / S;\n    out[1] = (mat[8] - mat[2]) / S; \n    out[2] = (mat[1] - mat[4]) / S; \n  } else if ((mat[0] > mat[5])&(mat[0] > mat[10])) { \n    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;\n    out[3] = (mat[6] - mat[9]) / S;\n    out[0] = 0.25 * S;\n    out[1] = (mat[1] + mat[4]) / S; \n    out[2] = (mat[8] + mat[2]) / S; \n  } else if (mat[5] > mat[10]) { \n    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;\n    out[3] = (mat[8] - mat[2]) / S;\n    out[0] = (mat[1] + mat[4]) / S; \n    out[1] = 0.25 * S;\n    out[2] = (mat[6] + mat[9]) / S; \n  } else { \n    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;\n    out[3] = (mat[1] - mat[4]) / S;\n    out[0] = (mat[8] + mat[2]) / S;\n    out[1] = (mat[6] + mat[9]) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n};\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     var quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @returns {mat4} out\n */\nmat4.fromRotationTranslationScale = function (out, q, v, s) {\n    // Quaternion math\n    var x = q[0], y = q[1], z = q[2], w = q[3],\n        x2 = x + x,\n        y2 = y + y,\n        z2 = z + z,\n\n        xx = x * x2,\n        xy = x * y2,\n        xz = x * z2,\n        yy = y * y2,\n        yz = y * z2,\n        zz = z * z2,\n        wx = w * x2,\n        wy = w * y2,\n        wz = w * z2,\n        sx = s[0],\n        sy = s[1],\n        sz = s[2];\n\n    out[0] = (1 - (yy + zz)) * sx;\n    out[1] = (xy + wz) * sx;\n    out[2] = (xz - wy) * sx;\n    out[3] = 0;\n    out[4] = (xy - wz) * sy;\n    out[5] = (1 - (xx + zz)) * sy;\n    out[6] = (yz + wx) * sy;\n    out[7] = 0;\n    out[8] = (xz + wy) * sz;\n    out[9] = (yz - wx) * sz;\n    out[10] = (1 - (xx + yy)) * sz;\n    out[11] = 0;\n    out[12] = v[0];\n    out[13] = v[1];\n    out[14] = v[2];\n    out[15] = 1;\n\n    return out;\n};\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     var quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @param {vec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\nmat4.fromRotationTranslationScaleOrigin = function (out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0], y = q[1], z = q[2], w = q[3],\n      x2 = x + x,\n      y2 = y + y,\n      z2 = z + z,\n\n      xx = x * x2,\n      xy = x * y2,\n      xz = x * z2,\n      yy = y * y2,\n      yz = y * z2,\n      zz = z * z2,\n      wx = w * x2,\n      wy = w * y2,\n      wz = w * z2,\n\n      sx = s[0],\n      sy = s[1],\n      sz = s[2],\n\n      ox = o[0],\n      oy = o[1],\n      oz = o[2];\n\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out[0] * ox + out[4] * oy + out[8] * oz);\n  out[13] = v[1] + oy - (out[1] * ox + out[5] * oy + out[9] * oz);\n  out[14] = v[2] + oz - (out[2] * ox + out[6] * oy + out[10] * oz);\n  out[15] = 1;\n\n  return out;\n};\n\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\nmat4.fromQuat = function (out, q) {\n    var x = q[0], y = q[1], z = q[2], w = q[3],\n        x2 = x + x,\n        y2 = y + y,\n        z2 = z + z,\n\n        xx = x * x2,\n        yx = y * x2,\n        yy = y * y2,\n        zx = z * x2,\n        zy = z * y2,\n        zz = z * z2,\n        wx = w * x2,\n        wy = w * y2,\n        wz = w * z2;\n\n    out[0] = 1 - yy - zz;\n    out[1] = yx + wz;\n    out[2] = zx - wy;\n    out[3] = 0;\n\n    out[4] = yx - wz;\n    out[5] = 1 - xx - zz;\n    out[6] = zy + wx;\n    out[7] = 0;\n\n    out[8] = zx + wy;\n    out[9] = zy - wx;\n    out[10] = 1 - xx - yy;\n    out[11] = 0;\n\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n\n    return out;\n};\n\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\nmat4.frustum = function (out, left, right, bottom, top, near, far) {\n    var rl = 1 / (right - left),\n        tb = 1 / (top - bottom),\n        nf = 1 / (near - far);\n    out[0] = (near * 2) * rl;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = (near * 2) * tb;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = (right + left) * rl;\n    out[9] = (top + bottom) * tb;\n    out[10] = (far + near) * nf;\n    out[11] = -1;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = (far * near * 2) * nf;\n    out[15] = 0;\n    return out;\n};\n\n/**\n * Generates a perspective projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nmat4.perspective = function (out, fovy, aspect, near, far) {\n    var f = 1.0 / Math.tan(fovy / 2),\n        nf = 1 / (near - far);\n    out[0] = f / aspect;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = f;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = (far + near) * nf;\n    out[11] = -1;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = (2 * far * near) * nf;\n    out[15] = 0;\n    return out;\n};\n\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nmat4.perspectiveFromFieldOfView = function (out, fov, near, far) {\n    var upTan = Math.tan(fov.upDegrees * Math.PI/180.0),\n        downTan = Math.tan(fov.downDegrees * Math.PI/180.0),\n        leftTan = Math.tan(fov.leftDegrees * Math.PI/180.0),\n        rightTan = Math.tan(fov.rightDegrees * Math.PI/180.0),\n        xScale = 2.0 / (leftTan + rightTan),\n        yScale = 2.0 / (upTan + downTan);\n\n    out[0] = xScale;\n    out[1] = 0.0;\n    out[2] = 0.0;\n    out[3] = 0.0;\n    out[4] = 0.0;\n    out[5] = yScale;\n    out[6] = 0.0;\n    out[7] = 0.0;\n    out[8] = -((leftTan - rightTan) * xScale * 0.5);\n    out[9] = ((upTan - downTan) * yScale * 0.5);\n    out[10] = far / (near - far);\n    out[11] = -1.0;\n    out[12] = 0.0;\n    out[13] = 0.0;\n    out[14] = (far * near) / (near - far);\n    out[15] = 0.0;\n    return out;\n}\n\n/**\n * Generates a orthogonal projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nmat4.ortho = function (out, left, right, bottom, top, near, far) {\n    var lr = 1 / (left - right),\n        bt = 1 / (bottom - top),\n        nf = 1 / (near - far);\n    out[0] = -2 * lr;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = -2 * bt;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 2 * nf;\n    out[11] = 0;\n    out[12] = (left + right) * lr;\n    out[13] = (top + bottom) * bt;\n    out[14] = (far + near) * nf;\n    out[15] = 1;\n    return out;\n};\n\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} center Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */\nmat4.lookAt = function (out, eye, center, up) {\n    var x0, x1, x2, y0, y1, y2, z0, z1, z2, len,\n        eyex = eye[0],\n        eyey = eye[1],\n        eyez = eye[2],\n        upx = up[0],\n        upy = up[1],\n        upz = up[2],\n        centerx = center[0],\n        centery = center[1],\n        centerz = center[2];\n\n    if (Math.abs(eyex - centerx) < glMatrix.EPSILON &&\n        Math.abs(eyey - centery) < glMatrix.EPSILON &&\n        Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n        return mat4.identity(out);\n    }\n\n    z0 = eyex - centerx;\n    z1 = eyey - centery;\n    z2 = eyez - centerz;\n\n    len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n\n    x0 = upy * z2 - upz * z1;\n    x1 = upz * z0 - upx * z2;\n    x2 = upx * z1 - upy * z0;\n    len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n    if (!len) {\n        x0 = 0;\n        x1 = 0;\n        x2 = 0;\n    } else {\n        len = 1 / len;\n        x0 *= len;\n        x1 *= len;\n        x2 *= len;\n    }\n\n    y0 = z1 * x2 - z2 * x1;\n    y1 = z2 * x0 - z0 * x2;\n    y2 = z0 * x1 - z1 * x0;\n\n    len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n    if (!len) {\n        y0 = 0;\n        y1 = 0;\n        y2 = 0;\n    } else {\n        len = 1 / len;\n        y0 *= len;\n        y1 *= len;\n        y2 *= len;\n    }\n\n    out[0] = x0;\n    out[1] = y0;\n    out[2] = z0;\n    out[3] = 0;\n    out[4] = x1;\n    out[5] = y1;\n    out[6] = z1;\n    out[7] = 0;\n    out[8] = x2;\n    out[9] = y2;\n    out[10] = z2;\n    out[11] = 0;\n    out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n    out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n    out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n    out[15] = 1;\n\n    return out;\n};\n\n/**\n * Returns a string representation of a mat4\n *\n * @param {mat4} mat matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nmat4.str = function (a) {\n    return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' +\n                    a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' +\n                    a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' +\n                    a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\n};\n\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {mat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nmat4.frob = function (a) {\n    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2) ))\n};\n\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nmat4.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    out[4] = a[4] + b[4];\n    out[5] = a[5] + b[5];\n    out[6] = a[6] + b[6];\n    out[7] = a[7] + b[7];\n    out[8] = a[8] + b[8];\n    out[9] = a[9] + b[9];\n    out[10] = a[10] + b[10];\n    out[11] = a[11] + b[11];\n    out[12] = a[12] + b[12];\n    out[13] = a[13] + b[13];\n    out[14] = a[14] + b[14];\n    out[15] = a[15] + b[15];\n    return out;\n};\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nmat4.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    out[4] = a[4] - b[4];\n    out[5] = a[5] - b[5];\n    out[6] = a[6] - b[6];\n    out[7] = a[7] - b[7];\n    out[8] = a[8] - b[8];\n    out[9] = a[9] - b[9];\n    out[10] = a[10] - b[10];\n    out[11] = a[11] - b[11];\n    out[12] = a[12] - b[12];\n    out[13] = a[13] - b[13];\n    out[14] = a[14] - b[14];\n    out[15] = a[15] - b[15];\n    return out;\n};\n\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\nmat4.sub = mat4.subtract;\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\nmat4.multiplyScalar = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    out[4] = a[4] * b;\n    out[5] = a[5] * b;\n    out[6] = a[6] * b;\n    out[7] = a[7] * b;\n    out[8] = a[8] * b;\n    out[9] = a[9] * b;\n    out[10] = a[10] * b;\n    out[11] = a[11] * b;\n    out[12] = a[12] * b;\n    out[13] = a[13] * b;\n    out[14] = a[14] * b;\n    out[15] = a[15] * b;\n    return out;\n};\n\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\nmat4.multiplyScalarAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    out[2] = a[2] + (b[2] * scale);\n    out[3] = a[3] + (b[3] * scale);\n    out[4] = a[4] + (b[4] * scale);\n    out[5] = a[5] + (b[5] * scale);\n    out[6] = a[6] + (b[6] * scale);\n    out[7] = a[7] + (b[7] * scale);\n    out[8] = a[8] + (b[8] * scale);\n    out[9] = a[9] + (b[9] * scale);\n    out[10] = a[10] + (b[10] * scale);\n    out[11] = a[11] + (b[11] * scale);\n    out[12] = a[12] + (b[12] * scale);\n    out[13] = a[13] + (b[13] * scale);\n    out[14] = a[14] + (b[14] * scale);\n    out[15] = a[15] + (b[15] * scale);\n    return out;\n};\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat4} a The first matrix.\n * @param {mat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat4.exactEquals = function (a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && \n           a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && \n           a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] &&\n           a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n};\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat4} a The first matrix.\n * @param {mat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat4.equals = function (a, b) {\n    var a0  = a[0],  a1  = a[1],  a2  = a[2],  a3  = a[3],\n        a4  = a[4],  a5  = a[5],  a6  = a[6],  a7  = a[7], \n        a8  = a[8],  a9  = a[9],  a10 = a[10], a11 = a[11], \n        a12 = a[12], a13 = a[13], a14 = a[14], a15 = a[15];\n\n    var b0  = b[0],  b1  = b[1],  b2  = b[2],  b3  = b[3],\n        b4  = b[4],  b5  = b[5],  b6  = b[6],  b7  = b[7], \n        b8  = b[8],  b9  = b[9],  b10 = b[10], b11 = b[11], \n        b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];\n\n    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n            Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n            Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n            Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n            Math.abs(a6 - b6) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n            Math.abs(a7 - b7) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&\n            Math.abs(a8 - b8) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a8), Math.abs(b8)) &&\n            Math.abs(a9 - b9) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a9), Math.abs(b9)) &&\n            Math.abs(a10 - b10) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a10), Math.abs(b10)) &&\n            Math.abs(a11 - b11) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a11), Math.abs(b11)) &&\n            Math.abs(a12 - b12) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a12), Math.abs(b12)) &&\n            Math.abs(a13 - b13) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a13), Math.abs(b13)) &&\n            Math.abs(a14 - b14) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a14), Math.abs(b14)) &&\n            Math.abs(a15 - b15) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a15), Math.abs(b15)));\n};\n\n\n\nmodule.exports = mat4;\n\n\n/***/ }),\n/* 24 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = __webpack_require__(1);\nvar mat3 = __webpack_require__(11);\nvar vec3 = __webpack_require__(12);\nvar vec4 = __webpack_require__(13);\n\n/**\n * @class Quaternion\n * @name quat\n */\nvar quat = {};\n\n/**\n * Creates a new identity quat\n *\n * @returns {quat} a new quaternion\n */\nquat.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(4);\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n};\n\n/**\n * Sets a quaternion to represent the shortest rotation from one\n * vector to another.\n *\n * Both vectors are assumed to be unit length.\n *\n * @param {quat} out the receiving quaternion.\n * @param {vec3} a the initial vector\n * @param {vec3} b the destination vector\n * @returns {quat} out\n */\nquat.rotationTo = (function() {\n    var tmpvec3 = vec3.create();\n    var xUnitVec3 = vec3.fromValues(1,0,0);\n    var yUnitVec3 = vec3.fromValues(0,1,0);\n\n    return function(out, a, b) {\n        var dot = vec3.dot(a, b);\n        if (dot < -0.999999) {\n            vec3.cross(tmpvec3, xUnitVec3, a);\n            if (vec3.length(tmpvec3) < 0.000001)\n                vec3.cross(tmpvec3, yUnitVec3, a);\n            vec3.normalize(tmpvec3, tmpvec3);\n            quat.setAxisAngle(out, tmpvec3, Math.PI);\n            return out;\n        } else if (dot > 0.999999) {\n            out[0] = 0;\n            out[1] = 0;\n            out[2] = 0;\n            out[3] = 1;\n            return out;\n        } else {\n            vec3.cross(tmpvec3, a, b);\n            out[0] = tmpvec3[0];\n            out[1] = tmpvec3[1];\n            out[2] = tmpvec3[2];\n            out[3] = 1 + dot;\n            return quat.normalize(out, out);\n        }\n    };\n})();\n\n/**\n * Sets the specified quaternion with values corresponding to the given\n * axes. Each axis is a vec3 and is expected to be unit length and\n * perpendicular to all other specified axes.\n *\n * @param {vec3} view  the vector representing the viewing direction\n * @param {vec3} right the vector representing the local \"right\" direction\n * @param {vec3} up    the vector representing the local \"up\" direction\n * @returns {quat} out\n */\nquat.setAxes = (function() {\n    var matr = mat3.create();\n\n    return function(out, view, right, up) {\n        matr[0] = right[0];\n        matr[3] = right[1];\n        matr[6] = right[2];\n\n        matr[1] = up[0];\n        matr[4] = up[1];\n        matr[7] = up[2];\n\n        matr[2] = -view[0];\n        matr[5] = -view[1];\n        matr[8] = -view[2];\n\n        return quat.normalize(out, quat.fromMat3(out, matr));\n    };\n})();\n\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {quat} a quaternion to clone\n * @returns {quat} a new quaternion\n * @function\n */\nquat.clone = vec4.clone;\n\n/**\n * Creates a new quat initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} a new quaternion\n * @function\n */\nquat.fromValues = vec4.fromValues;\n\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the source quaternion\n * @returns {quat} out\n * @function\n */\nquat.copy = vec4.copy;\n\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\nquat.set = vec4.set;\n\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\nquat.identity = function(out) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n};\n\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {vec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\nquat.setAxisAngle = function(out, axis, rad) {\n    rad = rad * 0.5;\n    var s = Math.sin(rad);\n    out[0] = s * axis[0];\n    out[1] = s * axis[1];\n    out[2] = s * axis[2];\n    out[3] = Math.cos(rad);\n    return out;\n};\n\n/**\n * Gets the rotation axis and angle for a given\n *  quaternion. If a quaternion is created with\n *  setAxisAngle, this method will return the same\n *  values as providied in the original parameter list\n *  OR functionally equivalent values.\n * Example: The quaternion formed by axis [0, 0, 1] and\n *  angle -90 is the same as the quaternion formed by\n *  [0, 0, 1] and 270. This method favors the latter.\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\n * @param  {quat} q     Quaternion to be decomposed\n * @return {Number}     Angle, in radians, of the rotation\n */\nquat.getAxisAngle = function(out_axis, q) {\n    var rad = Math.acos(q[3]) * 2.0;\n    var s = Math.sin(rad / 2.0);\n    if (s != 0.0) {\n        out_axis[0] = q[0] / s;\n        out_axis[1] = q[1] / s;\n        out_axis[2] = q[2] / s;\n    } else {\n        // If s is zero, return any axis (no rotation - axis does not matter)\n        out_axis[0] = 1;\n        out_axis[1] = 0;\n        out_axis[2] = 0;\n    }\n    return rad;\n};\n\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n * @function\n */\nquat.add = vec4.add;\n\n/**\n * Multiplies two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n */\nquat.multiply = function(out, a, b) {\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n        bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\n    out[0] = ax * bw + aw * bx + ay * bz - az * by;\n    out[1] = ay * bw + aw * by + az * bx - ax * bz;\n    out[2] = az * bw + aw * bz + ax * by - ay * bx;\n    out[3] = aw * bw - ax * bx - ay * by - az * bz;\n    return out;\n};\n\n/**\n * Alias for {@link quat.multiply}\n * @function\n */\nquat.mul = quat.multiply;\n\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {quat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\nquat.scale = vec4.scale;\n\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nquat.rotateX = function (out, a, rad) {\n    rad *= 0.5; \n\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n        bx = Math.sin(rad), bw = Math.cos(rad);\n\n    out[0] = ax * bw + aw * bx;\n    out[1] = ay * bw + az * bx;\n    out[2] = az * bw - ay * bx;\n    out[3] = aw * bw - ax * bx;\n    return out;\n};\n\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nquat.rotateY = function (out, a, rad) {\n    rad *= 0.5; \n\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n        by = Math.sin(rad), bw = Math.cos(rad);\n\n    out[0] = ax * bw - az * by;\n    out[1] = ay * bw + aw * by;\n    out[2] = az * bw + ax * by;\n    out[3] = aw * bw - ay * by;\n    return out;\n};\n\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nquat.rotateZ = function (out, a, rad) {\n    rad *= 0.5; \n\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n        bz = Math.sin(rad), bw = Math.cos(rad);\n\n    out[0] = ax * bw + ay * bz;\n    out[1] = ay * bw - ax * bz;\n    out[2] = az * bw + aw * bz;\n    out[3] = aw * bw - az * bz;\n    return out;\n};\n\n/**\n * Calculates the W component of a quat from the X, Y, and Z components.\n * Assumes that quaternion is 1 unit in length.\n * Any existing W component will be ignored.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate W component of\n * @returns {quat} out\n */\nquat.calculateW = function (out, a) {\n    var x = a[0], y = a[1], z = a[2];\n\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n    return out;\n};\n\n/**\n * Calculates the dot product of two quat's\n *\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\nquat.dot = vec4.dot;\n\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n * @function\n */\nquat.lerp = vec4.lerp;\n\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n */\nquat.slerp = function (out, a, b, t) {\n    // benchmarks:\n    //    http://jsperf.com/quaternion-slerp-implementations\n\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n        bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\n    var        omega, cosom, sinom, scale0, scale1;\n\n    // calc cosine\n    cosom = ax * bx + ay * by + az * bz + aw * bw;\n    // adjust signs (if necessary)\n    if ( cosom < 0.0 ) {\n        cosom = -cosom;\n        bx = - bx;\n        by = - by;\n        bz = - bz;\n        bw = - bw;\n    }\n    // calculate coefficients\n    if ( (1.0 - cosom) > 0.000001 ) {\n        // standard case (slerp)\n        omega  = Math.acos(cosom);\n        sinom  = Math.sin(omega);\n        scale0 = Math.sin((1.0 - t) * omega) / sinom;\n        scale1 = Math.sin(t * omega) / sinom;\n    } else {        \n        // \"from\" and \"to\" quaternions are very close \n        //  ... so we can do a linear interpolation\n        scale0 = 1.0 - t;\n        scale1 = t;\n    }\n    // calculate final values\n    out[0] = scale0 * ax + scale1 * bx;\n    out[1] = scale0 * ay + scale1 * by;\n    out[2] = scale0 * az + scale1 * bz;\n    out[3] = scale0 * aw + scale1 * bw;\n    \n    return out;\n};\n\n/**\n * Performs a spherical linear interpolation with two control points\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {quat} c the third operand\n * @param {quat} d the fourth operand\n * @param {Number} t interpolation amount\n * @returns {quat} out\n */\nquat.sqlerp = (function () {\n  var temp1 = quat.create();\n  var temp2 = quat.create();\n  \n  return function (out, a, b, c, d, t) {\n    quat.slerp(temp1, a, d, t);\n    quat.slerp(temp2, b, c, t);\n    quat.slerp(out, temp1, temp2, 2 * t * (1 - t));\n    \n    return out;\n  };\n}());\n\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate inverse of\n * @returns {quat} out\n */\nquat.invert = function(out, a) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],\n        dot = a0*a0 + a1*a1 + a2*a2 + a3*a3,\n        invDot = dot ? 1.0/dot : 0;\n    \n    // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n    out[0] = -a0*invDot;\n    out[1] = -a1*invDot;\n    out[2] = -a2*invDot;\n    out[3] = a3*invDot;\n    return out;\n};\n\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate conjugate of\n * @returns {quat} out\n */\nquat.conjugate = function (out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Calculates the length of a quat\n *\n * @param {quat} a vector to calculate length of\n * @returns {Number} length of a\n * @function\n */\nquat.length = vec4.length;\n\n/**\n * Alias for {@link quat.length}\n * @function\n */\nquat.len = quat.length;\n\n/**\n * Calculates the squared length of a quat\n *\n * @param {quat} a vector to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\nquat.squaredLength = vec4.squaredLength;\n\n/**\n * Alias for {@link quat.squaredLength}\n * @function\n */\nquat.sqrLen = quat.squaredLength;\n\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\nquat.normalize = vec4.normalize;\n\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {mat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\nquat.fromMat3 = function(out, m) {\n    // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n    // article \"Quaternion Calculus and Fast Animation\".\n    var fTrace = m[0] + m[4] + m[8];\n    var fRoot;\n\n    if ( fTrace > 0.0 ) {\n        // |w| > 1/2, may as well choose w > 1/2\n        fRoot = Math.sqrt(fTrace + 1.0);  // 2w\n        out[3] = 0.5 * fRoot;\n        fRoot = 0.5/fRoot;  // 1/(4w)\n        out[0] = (m[5]-m[7])*fRoot;\n        out[1] = (m[6]-m[2])*fRoot;\n        out[2] = (m[1]-m[3])*fRoot;\n    } else {\n        // |w| <= 1/2\n        var i = 0;\n        if ( m[4] > m[0] )\n          i = 1;\n        if ( m[8] > m[i*3+i] )\n          i = 2;\n        var j = (i+1)%3;\n        var k = (i+2)%3;\n        \n        fRoot = Math.sqrt(m[i*3+i]-m[j*3+j]-m[k*3+k] + 1.0);\n        out[i] = 0.5 * fRoot;\n        fRoot = 0.5 / fRoot;\n        out[3] = (m[j*3+k] - m[k*3+j]) * fRoot;\n        out[j] = (m[j*3+i] + m[i*3+j]) * fRoot;\n        out[k] = (m[k*3+i] + m[i*3+k]) * fRoot;\n    }\n    \n    return out;\n};\n\n/**\n * Returns a string representation of a quatenion\n *\n * @param {quat} vec vector to represent as a string\n * @returns {String} string representation of the vector\n */\nquat.str = function (a) {\n    return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n};\n\n/**\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {quat} a The first quaternion.\n * @param {quat} b The second quaternion.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nquat.exactEquals = vec4.exactEquals;\n\n/**\n * Returns whether or not the quaternions have approximately the same elements in the same position.\n *\n * @param {quat} a The first vector.\n * @param {quat} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nquat.equals = vec4.equals;\n\nmodule.exports = quat;\n\n\n/***/ }),\n/* 25 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = __webpack_require__(1);\n\n/**\n * @class 2 Dimensional Vector\n * @name vec2\n */\nvar vec2 = {};\n\n/**\n * Creates a new, empty vec2\n *\n * @returns {vec2} a new 2D vector\n */\nvec2.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(2);\n    out[0] = 0;\n    out[1] = 0;\n    return out;\n};\n\n/**\n * Creates a new vec2 initialized with values from an existing vector\n *\n * @param {vec2} a vector to clone\n * @returns {vec2} a new 2D vector\n */\nvec2.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(2);\n    out[0] = a[0];\n    out[1] = a[1];\n    return out;\n};\n\n/**\n * Creates a new vec2 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} a new 2D vector\n */\nvec2.fromValues = function(x, y) {\n    var out = new glMatrix.ARRAY_TYPE(2);\n    out[0] = x;\n    out[1] = y;\n    return out;\n};\n\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the source vector\n * @returns {vec2} out\n */\nvec2.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    return out;\n};\n\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */\nvec2.set = function(out, x, y) {\n    out[0] = x;\n    out[1] = y;\n    return out;\n};\n\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    return out;\n};\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    return out;\n};\n\n/**\n * Alias for {@link vec2.subtract}\n * @function\n */\nvec2.sub = vec2.subtract;\n\n/**\n * Multiplies two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.multiply = function(out, a, b) {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    return out;\n};\n\n/**\n * Alias for {@link vec2.multiply}\n * @function\n */\nvec2.mul = vec2.multiply;\n\n/**\n * Divides two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.divide = function(out, a, b) {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    return out;\n};\n\n/**\n * Alias for {@link vec2.divide}\n * @function\n */\nvec2.div = vec2.divide;\n\n/**\n * Math.ceil the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to ceil\n * @returns {vec2} out\n */\nvec2.ceil = function (out, a) {\n    out[0] = Math.ceil(a[0]);\n    out[1] = Math.ceil(a[1]);\n    return out;\n};\n\n/**\n * Math.floor the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to floor\n * @returns {vec2} out\n */\nvec2.floor = function (out, a) {\n    out[0] = Math.floor(a[0]);\n    out[1] = Math.floor(a[1]);\n    return out;\n};\n\n/**\n * Returns the minimum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.min = function(out, a, b) {\n    out[0] = Math.min(a[0], b[0]);\n    out[1] = Math.min(a[1], b[1]);\n    return out;\n};\n\n/**\n * Returns the maximum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.max = function(out, a, b) {\n    out[0] = Math.max(a[0], b[0]);\n    out[1] = Math.max(a[1], b[1]);\n    return out;\n};\n\n/**\n * Math.round the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to round\n * @returns {vec2} out\n */\nvec2.round = function (out, a) {\n    out[0] = Math.round(a[0]);\n    out[1] = Math.round(a[1]);\n    return out;\n};\n\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */\nvec2.scale = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    return out;\n};\n\n/**\n * Adds two vec2's after scaling the second operand by a scalar value\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec2} out\n */\nvec2.scaleAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    return out;\n};\n\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} distance between a and b\n */\nvec2.distance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1];\n    return Math.sqrt(x*x + y*y);\n};\n\n/**\n * Alias for {@link vec2.distance}\n * @function\n */\nvec2.dist = vec2.distance;\n\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} squared distance between a and b\n */\nvec2.squaredDistance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1];\n    return x*x + y*y;\n};\n\n/**\n * Alias for {@link vec2.squaredDistance}\n * @function\n */\nvec2.sqrDist = vec2.squaredDistance;\n\n/**\n * Calculates the length of a vec2\n *\n * @param {vec2} a vector to calculate length of\n * @returns {Number} length of a\n */\nvec2.length = function (a) {\n    var x = a[0],\n        y = a[1];\n    return Math.sqrt(x*x + y*y);\n};\n\n/**\n * Alias for {@link vec2.length}\n * @function\n */\nvec2.len = vec2.length;\n\n/**\n * Calculates the squared length of a vec2\n *\n * @param {vec2} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nvec2.squaredLength = function (a) {\n    var x = a[0],\n        y = a[1];\n    return x*x + y*y;\n};\n\n/**\n * Alias for {@link vec2.squaredLength}\n * @function\n */\nvec2.sqrLen = vec2.squaredLength;\n\n/**\n * Negates the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to negate\n * @returns {vec2} out\n */\nvec2.negate = function(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    return out;\n};\n\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to invert\n * @returns {vec2} out\n */\nvec2.inverse = function(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n};\n\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to normalize\n * @returns {vec2} out\n */\nvec2.normalize = function(out, a) {\n    var x = a[0],\n        y = a[1];\n    var len = x*x + y*y;\n    if (len > 0) {\n        //TODO: evaluate use of glm_invsqrt here?\n        len = 1 / Math.sqrt(len);\n        out[0] = a[0] * len;\n        out[1] = a[1] * len;\n    }\n    return out;\n};\n\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} dot product of a and b\n */\nvec2.dot = function (a, b) {\n    return a[0] * b[0] + a[1] * b[1];\n};\n\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product must by definition produce a 3D vector\n *\n * @param {vec3} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec3} out\n */\nvec2.cross = function(out, a, b) {\n    var z = a[0] * b[1] - a[1] * b[0];\n    out[0] = out[1] = 0;\n    out[2] = z;\n    return out;\n};\n\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec2} out\n */\nvec2.lerp = function (out, a, b, t) {\n    var ax = a[0],\n        ay = a[1];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    return out;\n};\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec2} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec2} out\n */\nvec2.random = function (out, scale) {\n    scale = scale || 1.0;\n    var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n    out[0] = Math.cos(r) * scale;\n    out[1] = Math.sin(r) * scale;\n    return out;\n};\n\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2} m matrix to transform with\n * @returns {vec2} out\n */\nvec2.transformMat2 = function(out, a, m) {\n    var x = a[0],\n        y = a[1];\n    out[0] = m[0] * x + m[2] * y;\n    out[1] = m[1] * x + m[3] * y;\n    return out;\n};\n\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2d} m matrix to transform with\n * @returns {vec2} out\n */\nvec2.transformMat2d = function(out, a, m) {\n    var x = a[0],\n        y = a[1];\n    out[0] = m[0] * x + m[2] * y + m[4];\n    out[1] = m[1] * x + m[3] * y + m[5];\n    return out;\n};\n\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat3} m matrix to transform with\n * @returns {vec2} out\n */\nvec2.transformMat3 = function(out, a, m) {\n    var x = a[0],\n        y = a[1];\n    out[0] = m[0] * x + m[3] * y + m[6];\n    out[1] = m[1] * x + m[4] * y + m[7];\n    return out;\n};\n\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec2} out\n */\nvec2.transformMat4 = function(out, a, m) {\n    var x = a[0], \n        y = a[1];\n    out[0] = m[0] * x + m[4] * y + m[12];\n    out[1] = m[1] * x + m[5] * y + m[13];\n    return out;\n};\n\n/**\n * Perform some operation over an array of vec2s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nvec2.forEach = (function() {\n    var vec = vec2.create();\n\n    return function(a, stride, offset, count, fn, arg) {\n        var i, l;\n        if(!stride) {\n            stride = 2;\n        }\n\n        if(!offset) {\n            offset = 0;\n        }\n        \n        if(count) {\n            l = Math.min((count * stride) + offset, a.length);\n        } else {\n            l = a.length;\n        }\n\n        for(i = offset; i < l; i += stride) {\n            vec[0] = a[i]; vec[1] = a[i+1];\n            fn(vec, vec, arg);\n            a[i] = vec[0]; a[i+1] = vec[1];\n        }\n        \n        return a;\n    };\n})();\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec2} vec vector to represent as a string\n * @returns {String} string representation of the vector\n */\nvec2.str = function (a) {\n    return 'vec2(' + a[0] + ', ' + a[1] + ')';\n};\n\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {vec2} a The first vector.\n * @param {vec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nvec2.exactEquals = function (a, b) {\n    return a[0] === b[0] && a[1] === b[1];\n};\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec2} a The first vector.\n * @param {vec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nvec2.equals = function (a, b) {\n    var a0 = a[0], a1 = a[1];\n    var b0 = b[0], b1 = b[1];\n    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)));\n};\n\nmodule.exports = vec2;\n\n\n/***/ }),\n/* 26 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar constants_1 = __webpack_require__(0);\r\nvar gl_matrix_1 = __webpack_require__(5);\r\nvar Quad = (function () {\r\n    function Quad(_data, _offset) {\r\n        if (_data === void 0) { _data = new ArrayBuffer(constants_1.VERTEX_SIZE * constants_1.VERTICES_QUAD); }\r\n        if (_offset === void 0) { _offset = 0; }\r\n        this._data = _data;\r\n        this._offset = _offset;\r\n        this._pos1 = new Uint16Array(this._data, this._offset, 2);\r\n        this._pos2 = new Uint16Array(this._data, this._offset + constants_1.VERTEX_SIZE, 2);\r\n        this._pos3 = new Uint16Array(this._data, this._offset + constants_1.VERTEX_SIZE * 2, 2);\r\n        this._pos4 = new Uint16Array(this._data, this._offset + constants_1.VERTEX_SIZE * 3, 2);\r\n        this._z_shift1 = new Uint8Array(this._data, this._offset + constants_1.OFFSET_Z_INDEX, 2);\r\n        this._z_shift2 = new Uint8Array(this._data, this._offset + constants_1.VERTEX_SIZE + constants_1.OFFSET_Z_INDEX, 2);\r\n        this._z_shift3 = new Uint8Array(this._data, this._offset + constants_1.VERTEX_SIZE * 2 + constants_1.OFFSET_Z_INDEX, 2);\r\n        this._z_shift4 = new Uint8Array(this._data, this._offset + constants_1.VERTEX_SIZE * 3 + constants_1.OFFSET_Z_INDEX, 2);\r\n        this._uv1 = new Uint8Array(this._data, this._offset + constants_1.OFFSET_UV, 2);\r\n        this._uv2 = new Uint8Array(this._data, this._offset + constants_1.VERTEX_SIZE + constants_1.OFFSET_UV, 2);\r\n        this._uv3 = new Uint8Array(this._data, this._offset + constants_1.VERTEX_SIZE * 2 + constants_1.OFFSET_UV, 2);\r\n        this._uv4 = new Uint8Array(this._data, this._offset + constants_1.VERTEX_SIZE * 3 + constants_1.OFFSET_UV, 2);\r\n    }\r\n    Quad.prototype.applyTransform = function (matrix, out_quad) {\r\n        if (out_quad === void 0) { out_quad = this; }\r\n        gl_matrix_1.vec2.transformMat4(out_quad._pos1, this._pos1, matrix);\r\n        //this._transVec2(matrix, <vec2>this._pos1, <vec2>out_quad._pos1);\r\n        //this._transVec2(matrix, <vec2>this._pos2, <vec2>out_quad._pos2);\r\n        //this._transVec2(matrix, <vec2>this._pos3, <vec2>out_quad._pos3);\r\n        //this._transVec2(matrix, <vec2>this._pos4, <vec2>out_quad._pos4);\r\n        return out_quad;\r\n    };\r\n    Quad.prototype.setPos = function (x, y, w, h) {\r\n        this._pos1[0] = x;\r\n        this._pos1[1] = y;\r\n        this._pos2[0] = x + w;\r\n        this._pos2[1] = y;\r\n        this._pos3[0] = x + w;\r\n        this._pos3[1] = y + h;\r\n        this._pos4[0] = x;\r\n        this._pos4[1] = y + h;\r\n    };\r\n    Quad.prototype.setUv = function (x, y, w, h) {\r\n        this._uv1[0] = x;\r\n        this._uv1[1] = y;\r\n        this._uv2[0] = x + w;\r\n        this._uv2[1] = y;\r\n        this._uv3[0] = x + w;\r\n        this._uv3[1] = y + h;\r\n        this._uv4[0] = x;\r\n        this._uv4[1] = y + h;\r\n    };\r\n    Quad.prototype.setZ = function (z) {\r\n        this._z_shift1[0] = z;\r\n        this._z_shift2[0] = z;\r\n        this._z_shift3[0] = z;\r\n        this._z_shift4[0] = z;\r\n    };\r\n    Quad.prototype.setPalShift = function (s) {\r\n        this._z_shift1[1] = s;\r\n        this._z_shift2[1] = s;\r\n        this._z_shift3[1] = s;\r\n        this._z_shift4[1] = s;\r\n    };\r\n    Quad.prototype.setAttributes = function (x, y, w, h, z, pal, ux, uy, uw, uh) {\r\n        this.setPos(x, y, w, h);\r\n        this.setZ(z);\r\n        this.setPalShift(pal);\r\n        this.setUv(ux, uy, uw, uh);\r\n    };\r\n    return Quad;\r\n}());\r\nexports.Quad = Quad;\r\n\n\n/***/ }),\n/* 27 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar twgl_js_1 = __webpack_require__(4);\r\nvar constants_1 = __webpack_require__(0);\r\n// define a global buffer for quads\r\nvar indexBuffer;\r\nvar elementType;\r\nfunction init(gl) {\r\n    elementType = gl.UNSIGNED_SHORT;\r\n    var indices = new Uint16Array(constants_1.MAX_VERTICES * constants_1.INDICES_QUAD);\r\n    var max = constants_1.MAX_VERTICES * constants_1.VERTICES_QUAD;\r\n    var vertex = 0;\r\n    for (var i = 0; i < max; i += constants_1.INDICES_QUAD) {\r\n        /*  *1---*2\r\n            |  /  |\r\n            *4---*3  */\r\n        indices[i] = vertex; // 1\r\n        indices[i + 1] = vertex + 1; // 2\r\n        indices[i + 2] = vertex + 3; // 4\r\n        indices[i + 3] = vertex + 3; // 4\r\n        indices[i + 4] = vertex + 1; // 2\r\n        indices[i + 5] = vertex + 2; // 3\r\n        vertex += constants_1.VERTICES_QUAD;\r\n    }\r\n    indexBuffer = twgl_js_1.createBufferFromTypedArray(gl, indices, gl.ELEMENT_ARRAY_BUFFER);\r\n}\r\nvar IndexBuffer = (function () {\r\n    function IndexBuffer(gl) {\r\n        if (!indexBuffer) {\r\n            init(gl);\r\n        }\r\n    }\r\n    Object.defineProperty(IndexBuffer.prototype, \"buffer\", {\r\n        get: function () {\r\n            return indexBuffer;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(IndexBuffer.prototype, \"elementType\", {\r\n        get: function () {\r\n            return elementType;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return IndexBuffer;\r\n}());\r\nexports.IndexBuffer = IndexBuffer;\r\n\n\n/***/ }),\n/* 28 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Transform_1 = __webpack_require__(7);\r\nvar Renderable = (function () {\r\n    function Renderable(_options) {\r\n        this._options = _options;\r\n        _options.transform = _options.transform || new Transform_1.Transform2d();\r\n        this.paletteId = _options.paletteId;\r\n    }\r\n    Object.defineProperty(Renderable.prototype, \"paletteId\", {\r\n        get: function () {\r\n            return this._options.paletteId;\r\n        },\r\n        set: function (value) {\r\n            this._options.paletteId = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Renderable.prototype, \"texture\", {\r\n        get: function () {\r\n            return this._options.texture;\r\n        },\r\n        set: function (value) {\r\n            this._options.texture = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Renderable.prototype, \"buffer\", {\r\n        get: function () {\r\n            return this._options.buffer;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Renderable.prototype, \"palette\", {\r\n        get: function () {\r\n            return this._options.palette;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Renderable.prototype, \"shader\", {\r\n        get: function () {\r\n            return this._options.shader;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Renderable.prototype, \"transform\", {\r\n        get: function () {\r\n            return this._options.transform;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Renderable.prototype, \"zSort\", {\r\n        get: function () {\r\n            return this._options.zSort;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Renderable.prototype, \"blendMode\", {\r\n        get: function () {\r\n            return this._options.blendMode;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Renderable.prototype, \"mode7\", {\r\n        get: function () {\r\n            return this._options.mode7;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Renderable;\r\n}());\r\nexports.Renderable = Renderable;\r\n\n\n/***/ }),\n/* 29 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar constants_1 = __webpack_require__(0);\r\nvar gl_matrix_1 = __webpack_require__(5);\r\nvar twgl = __webpack_require__(4);\r\nvar Renderer = (function () {\r\n    function Renderer(_gl, settings) {\r\n        this._gl = _gl;\r\n        this.renderList = [];\r\n        this._settings = {};\r\n        this.a = 0;\r\n        this._ortho = gl_matrix_1.mat4.ortho(gl_matrix_1.mat4.create(), 0, _gl.canvas.width, _gl.canvas.height, 0, -256, 0);\r\n        this._projection = gl_matrix_1.mat4.perspective(gl_matrix_1.mat4.create(), 1, 1, -255, 0);\r\n        this._view = gl_matrix_1.mat4.lookAt(gl_matrix_1.mat4.create(), gl_matrix_1.vec3.fromValues(0, -1, 1.5), gl_matrix_1.vec3.fromValues(0, 1, .7), gl_matrix_1.vec3.fromValues(0, 1, 0));\r\n        this._matrix = gl_matrix_1.mat4.create();\r\n        this._matrixTemp = gl_matrix_1.mat4.create();\r\n        this.setDefaults(settings);\r\n    }\r\n    Renderer.prototype.setDefaults = function (defaults) {\r\n        this._defaults = defaults; //$.extend({},defaults);        \r\n    };\r\n    Renderer.prototype.render = function () {\r\n        var _this = this;\r\n        this.renderList.forEach(function (r) { return r.buffer.update(); });\r\n        //this._gl.clear(this._gl.COLOR_CLEAR_VALUE);\r\n        this._gl.useProgram(this._defaults.shader.program);\r\n        this.renderList.forEach(function (r) {\r\n            _this._setOptions(r);\r\n            _this._buildMatrix(r);\r\n            var u = _this._getUniforms(r);\r\n            if (u) {\r\n                twgl.setUniforms(_this._defaults.shader, u);\r\n            }\r\n            twgl.setBuffersAndAttributes(_this._gl, _this._defaults.shader, r.buffer.bufferInfo);\r\n            //console.log(r.buffer.vertexSize)\r\n            twgl.drawBufferInfo(_this._gl, r.buffer.bufferInfo, _this._gl.TRIANGLES, r.buffer.vertexSize);\r\n        });\r\n    };\r\n    Renderer.prototype._setOptions = function (r) {\r\n        var zSort = r.zSort != undefined ? r.zSort : this._defaults.zSort;\r\n        var blendMode = r.blendMode || this._defaults.blendMode;\r\n        if (zSort != this._settings.zSort) {\r\n            zSort\r\n                ? this._gl.enable(this._gl.DEPTH_TEST)\r\n                : this._gl.disable(this._gl.DEPTH_TEST);\r\n            this._settings.zSort = zSort;\r\n        }\r\n        if (blendMode != this._settings.blendMode) {\r\n            switch (blendMode) {\r\n                case \"alpha\":\r\n                    this._gl.enable(this._gl.BLEND);\r\n                    this._gl.blendFunc(this._gl.SRC_ALPHA, this._gl.ONE_MINUS_SRC_ALPHA);\r\n                    break;\r\n                default:\r\n                    this._gl.disable(this._gl.BLEND);\r\n                    break;\r\n            }\r\n            this._settings.blendMode = blendMode;\r\n        }\r\n    };\r\n    Renderer.prototype._buildMatrix = function (r) {\r\n        var transform = r.transform\r\n            ? r.transform.matrix\r\n            : constants_1.MAT4_IDENT;\r\n        if (r.mode7) {\r\n            gl_matrix_1.mat4.mul(this._matrixTemp, this._ortho, transform);\r\n            gl_matrix_1.mat4.mul(this._matrix, this._projection, this._view);\r\n            gl_matrix_1.mat4.mul(this._matrix, this._matrix, this._matrixTemp);\r\n        }\r\n        else {\r\n            gl_matrix_1.mat4.mul(this._matrix, this._ortho, transform);\r\n            //mat4.mul(this._matrix, this._ortho, r.transform.matrix);\r\n        }\r\n    };\r\n    Renderer.prototype._getUniforms = function (r) {\r\n        this.a -= 0.0001;\r\n        var a = this.a;\r\n        var u = {\r\n            matrix: this._matrix,\r\n        };\r\n        var texture = r.texture || this._defaults.texture;\r\n        var palette = r.palette || this._defaults.palette;\r\n        var paletteId = r.paletteId || this._defaults.paletteId;\r\n        if (texture != this._settings.texture)\r\n            this._settings.texture = u[\"texture\"] = texture;\r\n        if (palette != this._settings.palette)\r\n            this._settings.palette = u[\"palette\"] = palette;\r\n        if (paletteId != this._settings.paletteId) {\r\n            this._settings.paletteId = paletteId;\r\n            u[\"pal_offset\"] = paletteId * constants_1.PAL_OFFSET;\r\n        }\r\n        return u;\r\n    };\r\n    return Renderer;\r\n}());\r\nexports.Renderer = Renderer;\r\n\n\n/***/ }),\n/* 30 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(2);\r\nvar QuadBuffer_1 = __webpack_require__(6);\r\nvar constants_1 = __webpack_require__(0);\r\nvar TextBuffer = (function (_super) {\r\n    tslib_1.__extends(TextBuffer, _super);\r\n    function TextBuffer(_gl, _fontInfo, capacity) {\r\n        var _this = _super.call(this, _gl, capacity) || this;\r\n        _this._fontInfo = _fontInfo;\r\n        _this._fontLoookup = [];\r\n        _this._text = \"\";\r\n        _this._ptr = 0;\r\n        return _this;\r\n    }\r\n    Object.defineProperty(TextBuffer.prototype, \"text\", {\r\n        get: function () {\r\n            return this._text;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    TextBuffer.prototype.create = function (text, width, x, y, z) {\r\n        if (width === void 0) { width = constants_1.HUGE; }\r\n        if (x === void 0) { x = 0; }\r\n        if (y === void 0) { y = 0; }\r\n        if (z === void 0) { z = constants_1.MIN_Z; }\r\n        this._createFont();\r\n        _super.prototype.create.call(this);\r\n        if (text)\r\n            this.write(text, width, x, y, z);\r\n        //this.range = text ? text.length : 0;\r\n        return this;\r\n    };\r\n    TextBuffer.prototype.seek = function (pos) {\r\n        this._ptr = pos;\r\n    };\r\n    // public setText(text: string, offset=0, width = HUGE, x = 0, y = 0, z = MIN_Z, pal = 0){\r\n    //     this._putText(text, width, offset, x,y,z,pal)\r\n    //     //this.range = offset + text.length;\r\n    //     this._text = text;\r\n    // }\r\n    TextBuffer.prototype.clear = function (length) {\r\n        for (var i = this._ptr; i < this._ptr + length; i++) {\r\n            this.clearQuad(i);\r\n        }\r\n        this._ptr += length;\r\n    };\r\n    // public appendText(text: string, width = HUGE, x = 0, y = 0, z = MIN_Z, pal = 0){\r\n    //     this._putText(text, width, this.range,x,y,z,pal);\r\n    //     //this.range += text.length;\r\n    //     this._text += text;\r\n    // }\r\n    TextBuffer.prototype.write = function (text, width, x, y, z, pal) {\r\n        if (width === void 0) { width = constants_1.HUGE; }\r\n        if (x === void 0) { x = 0; }\r\n        if (y === void 0) { y = 0; }\r\n        if (z === void 0) { z = constants_1.MIN_Z; }\r\n        if (pal === void 0) { pal = 0; }\r\n        var ctr = 0;\r\n        // if(this._ptr + text.length > this.capacity)\r\n        //     text = text.substr(0,this.capacity - this._ptr);\r\n        var ox = x;\r\n        var oy = y;\r\n        for (var i = 0; i < text.length; i++) {\r\n            var offset = this._fontLoookup[text.charCodeAt(i)];\r\n            var x_1 = this._font[offset];\r\n            var y_1 = this._font[offset + 1];\r\n            var w = this._font[offset + 2];\r\n            var h = this._font[offset + 3];\r\n            this.setAttributes(this.add(), ox, oy, ox + w, oy + h, x_1, y_1, x_1 + w, y_1 + h, z, pal);\r\n            if (ox > width) {\r\n                oy += h;\r\n                ox = 0;\r\n            }\r\n            else {\r\n                ox += w;\r\n            }\r\n        }\r\n        this._ptr += text.length;\r\n    };\r\n    TextBuffer.prototype._createFont = function () {\r\n        var info = this._fontInfo;\r\n        var chars = info.chars;\r\n        this._font = new Uint8Array(chars.length * constants_1.VERTICES_QUAD);\r\n        var wRow = constants_1.TEXTURE_SIZE / this._fontInfo.x;\r\n        for (var i = 0; i < chars.length; i++) {\r\n            var x = (i % wRow) * info.x;\r\n            var y = Math.floor(i / wRow) * info.y;\r\n            var w = info.widths ? info.widths[i] : info.x;\r\n            var h = info.y;\r\n            var offset = i * constants_1.VERTICES_QUAD;\r\n            this._fontLoookup[chars.charCodeAt(i)] = offset;\r\n            //console.log(x,y);\r\n            this._font[offset] = x;\r\n            this._font[offset + 1] = y;\r\n            this._font[offset + 2] = w;\r\n            this._font[offset + 3] = h;\r\n        }\r\n    };\r\n    return TextBuffer;\r\n}(QuadBuffer_1.QuadBuffer));\r\nexports.TextBuffer = TextBuffer;\r\n\n\n/***/ }),\n/* 31 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(2);\r\nvar constants_1 = __webpack_require__(0);\r\nvar QuadBuffer_1 = __webpack_require__(6);\r\nvar TileBuffer = (function (_super) {\r\n    tslib_1.__extends(TileBuffer, _super);\r\n    function TileBuffer(gl, _width, _height, _twidth, _theight) {\r\n        if (_twidth === void 0) { _twidth = 16; }\r\n        if (_theight === void 0) { _theight = 16; }\r\n        var _this = _super.call(this, gl, _width * _height) || this;\r\n        _this._width = _width;\r\n        _this._height = _height;\r\n        _this._twidth = _twidth;\r\n        _this._theight = _theight;\r\n        return _this;\r\n    }\r\n    TileBuffer.prototype.create = function (tids, baseZ) {\r\n        if (baseZ === void 0) { baseZ = constants_1.MIN_Z; }\r\n        this._createTileset();\r\n        if (tids)\r\n            this.setTiles(tids, baseZ);\r\n        _super.prototype.create.call(this);\r\n        this.addMany(this._width * this._height);\r\n        return this;\r\n    };\r\n    TileBuffer.prototype.setTile = function (tid, x, y, z) {\r\n        if (z === void 0) { z = constants_1.MIN_Z; }\r\n        var seq = y * this._width + x;\r\n        this.setTileSeq(seq, tid);\r\n        return this;\r\n    };\r\n    TileBuffer.prototype.setTiles = function (tids, baseZ) {\r\n        if (baseZ === void 0) { baseZ = constants_1.MIN_Z; }\r\n        for (var i = 0; i < tids.length; i++) {\r\n            this.setTileSeq(i, tids[i], baseZ);\r\n        }\r\n        return this;\r\n    };\r\n    TileBuffer.prototype.setTileSeq = function (seq, tid, z) {\r\n        if (z === void 0) { z = constants_1.MIN_Z; }\r\n        if (tid == 0) {\r\n            this.setAttributes(seq, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\r\n            return;\r\n        }\r\n        var ts = this._tileset;\r\n        var offset = tid * (constants_1.VERTICES_QUAD);\r\n        var x1 = (seq % this._width) * this._twidth;\r\n        var y1 = Math.floor(seq / this._width) * this._theight;\r\n        var x2 = x1 + this._twidth;\r\n        var y2 = y1 + this._theight;\r\n        this.setAttributes(seq, x1, y1, x2, y2, ts[offset], ts[offset + 1], ts[offset + 2], ts[offset + 3], z, 0);\r\n    };\r\n    TileBuffer.prototype._createTileset = function () {\r\n        var ctr = 0;\r\n        var tileset = new Uint8Array((constants_1.TEXTURE_SIZE / this._twidth) * (constants_1.TEXTURE_SIZE / this._theight) * constants_1.VERTICES_QUAD);\r\n        for (var y = 0; y < constants_1.TEXTURE_SIZE; y += this._twidth) {\r\n            for (var x = 0; x < constants_1.TEXTURE_SIZE; x += this._theight) {\r\n                tileset[ctr++] = x;\r\n                tileset[ctr++] = y;\r\n                tileset[ctr++] = x + this._twidth;\r\n                tileset[ctr++] = y + this._theight;\r\n            }\r\n        }\r\n        this._tileset = tileset;\r\n    };\r\n    TileBuffer.prototype._createGeometry = function () {\r\n        // let ctr = 0;\r\n        // let idxCtr = 0;\r\n        // let vertex = 0;\r\n        // for(let y = 0; y < this._theight * this._height; y += this._theight){\r\n        //     for(let x = 0; x < this._twidth * this._width; x += this._twidth){\r\n        //         this.add();\r\n        //         ctr++;\r\n        //     }\r\n        // }\r\n    };\r\n    return TileBuffer;\r\n}(QuadBuffer_1.QuadBuffer));\r\nexports.TileBuffer = TileBuffer;\r\n\n\n/***/ }),\n/* 32 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(2);\r\nvar constants_1 = __webpack_require__(0);\r\nvar PixelTexture_1 = __webpack_require__(8);\r\nvar IndexedTexture = (function (_super) {\r\n    tslib_1.__extends(IndexedTexture, _super);\r\n    function IndexedTexture(gl) {\r\n        return _super.call(this, gl) || this;\r\n    }\r\n    Object.defineProperty(IndexedTexture.prototype, \"_components\", {\r\n        get: function () {\r\n            return constants_1.COMP_INDEXED;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(IndexedTexture.prototype, \"_options\", {\r\n        get: function () {\r\n            return {\r\n                target: this._gl.TEXTURE_2D,\r\n                width: constants_1.TEXTURE_SIZE,\r\n                height: constants_1.TEXTURE_SIZE,\r\n                min: this._gl.NEAREST,\r\n                mag: this._gl.NEAREST,\r\n                src: this._texdata,\r\n                format: this._gl.LUMINANCE,\r\n                type: this._gl.UNSIGNED_BYTE\r\n            };\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return IndexedTexture;\r\n}(PixelTexture_1.PixelTexture));\r\nexports.IndexedTexture = IndexedTexture;\r\n\n\n/***/ }),\n/* 33 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(2);\r\nvar RgbaTexture_1 = __webpack_require__(34);\r\nvar constants_1 = __webpack_require__(0);\r\nvar PaletteTexture = (function (_super) {\r\n    tslib_1.__extends(PaletteTexture, _super);\r\n    function PaletteTexture() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    PaletteTexture.prototype.setPalFunc = function (palId, func) {\r\n        var tex = this._texdata;\r\n        var f = Math.floor;\r\n        var totComp = this._components;\r\n        var start = palId * constants_1.TEXTURE_SIZE * totComp;\r\n        var end = start + constants_1.TEXTURE_SIZE * totComp;\r\n        for (var i = start; i < end; i++) {\r\n            var comp = i % constants_1.COMP_RGBA;\r\n            var pixel = Math.floor((i - comp) / totComp);\r\n            tex[i] = func(pixel % 256, i % totComp);\r\n        }\r\n        this.setPalDirty(palId);\r\n    };\r\n    PaletteTexture.prototype.setRawPalette = function (palId, data) {\r\n        var offset = this._components * constants_1.TEXTURE_SIZE * palId;\r\n        for (var i = 0; i < data.length; i++) {\r\n            this._texdata[offset + i] = data[i];\r\n        }\r\n    };\r\n    PaletteTexture.prototype.setPalDirty = function (palId) {\r\n        this.setRowDirty(palId);\r\n    };\r\n    // public setPngPalette(palId: number, pngPal: Uint8Array){\r\n    //     this.setPalFunc(palId, (x, comp) => {\r\n    //         // Make first color transparent\r\n    //         if(x == 0 && comp == ColorComponent.A)\r\n    //             return 0;\r\n    //         switch (comp) {\r\n    //             case ColorComponent.A:\r\n    //                 return 255;\r\n    //             default:\r\n    //                 return pngPal[x * COMP_RGB + comp]; \r\n    //         }\r\n    //     });\r\n    // }\r\n    PaletteTexture.prototype.setIndex = function (palId, index, color) {\r\n        return this.setPixel(index, palId, color);\r\n    };\r\n    PaletteTexture.prototype.getIndex = function (palId, index) {\r\n        return this.getPixel(index, palId);\r\n    };\r\n    PaletteTexture.prototype.shift = function (palId, start, end) {\r\n        var len = end - start;\r\n        for (var i = 0; i < len; i++) {\r\n            this.switchColors(palId, start + i, end);\r\n        }\r\n    };\r\n    PaletteTexture.prototype.switchColors = function (palId, idx1, idx2) {\r\n        var temp = this.getIndex(palId, idx1);\r\n        this.setIndex(palId, idx1, this.getIndex(palId, idx2));\r\n        this.setIndex(palId, idx2, temp);\r\n    };\r\n    return PaletteTexture;\r\n}(RgbaTexture_1.RgbaTexture));\r\nexports.PaletteTexture = PaletteTexture;\r\n\n\n/***/ }),\n/* 34 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(2);\r\nvar constants_1 = __webpack_require__(0);\r\nvar PixelTexture_1 = __webpack_require__(8);\r\nvar RgbaTexture = (function (_super) {\r\n    tslib_1.__extends(RgbaTexture, _super);\r\n    function RgbaTexture(gl) {\r\n        return _super.call(this, gl) || this;\r\n    }\r\n    Object.defineProperty(RgbaTexture.prototype, \"_components\", {\r\n        get: function () {\r\n            return constants_1.COMP_RGBA;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(RgbaTexture.prototype, \"_options\", {\r\n        get: function () {\r\n            return {\r\n                target: this._gl.TEXTURE_2D,\r\n                width: constants_1.TEXTURE_SIZE,\r\n                height: constants_1.TEXTURE_SIZE,\r\n                min: this._gl.NEAREST,\r\n                mag: this._gl.NEAREST,\r\n                src: this._texdata,\r\n                format: this._gl.RGBA,\r\n                type: this._gl.UNSIGNED_BYTE\r\n            };\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return RgbaTexture;\r\n}(PixelTexture_1.PixelTexture));\r\nexports.RgbaTexture = RgbaTexture;\r\n\n\n/***/ }),\n/* 35 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar index_1 = __webpack_require__(10);\r\nvar twgl = __webpack_require__(4);\r\nfunction initWebGl() {\r\n    var canvas = document.getElementById(\"canvas\");\r\n    var gl = twgl.getContext(canvas, {\r\n        premultipliedAlpha: false,\r\n        alpha: false,\r\n        antialias: false\r\n    });\r\n    //twgl.resizeCanvasToDisplaySize(gl.canvas);\r\n    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\r\n    return gl;\r\n}\r\nexports.initWebGl = initWebGl;\r\nfunction createTexture(gl, path) {\r\n    return twgl.createTexture(gl, {\r\n        src: path,\r\n        min: gl.NEAREST,\r\n        mag: gl.NEAREST\r\n    });\r\n}\r\nexports.createTexture = createTexture;\r\nfunction createAlphaTexture(gl, path) {\r\n    return twgl.createTexture(gl, {\r\n        src: path,\r\n        min: gl.NEAREST,\r\n        mag: gl.NEAREST,\r\n        format: gl.LUMINANCE,\r\n        internalFormat: gl.LUMINANCE\r\n    });\r\n}\r\nexports.createAlphaTexture = createAlphaTexture;\r\nvar offset = 5;\r\nfunction createTileSprite(gl, texture, palette, paletteId) {\r\n    var tids = [];\r\n    for (var i = 0; i < 32 * 32; i++) {\r\n        tids.push(1);\r\n    }\r\n    offset++;\r\n    var mesh = new index_1.TileBuffer(gl, 32, 32).create(tids, 1);\r\n    return new index_1.Renderable({\r\n        buffer: mesh,\r\n        texture: texture,\r\n        palette: palette,\r\n        paletteId: paletteId,\r\n        //mode7: true,\r\n        zSort: false\r\n    });\r\n}\r\nexports.createTileSprite = createTileSprite;\r\nfunction createSprite(gl, texture, palette, paletteId, x, y, ox, oy, w, h) {\r\n    var sb = new index_1.QuadBuffer(gl, 1);\r\n    sb.setAttributes(0, x, y, x + w, y + h, ox, oy, ox + w, oy + w, index_1.MIN_Z, 0);\r\n    sb.create();\r\n    return new index_1.Renderable({\r\n        buffer: sb,\r\n        texture: texture,\r\n        palette: palette,\r\n        paletteId: paletteId,\r\n        zSort: false\r\n    });\r\n}\r\nexports.createSprite = createSprite;\r\n\n\n/***/ }),\n/* 36 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// stats.js - http://github.com/mrdoob/stats.js\n(function(f,e){ true?module.exports=e():\"function\"===typeof define&&define.amd?define(e):f.Stats=e()})(this,function(){var f=function(){function e(a){c.appendChild(a.dom);return a}function u(a){for(var d=0;d<c.children.length;d++)c.children[d].style.display=d===a?\"block\":\"none\";l=a}var l=0,c=document.createElement(\"div\");c.style.cssText=\"position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000\";c.addEventListener(\"click\",function(a){a.preventDefault();\nu(++l%c.children.length)},!1);var k=(performance||Date).now(),g=k,a=0,r=e(new f.Panel(\"FPS\",\"#0ff\",\"#002\")),h=e(new f.Panel(\"MS\",\"#0f0\",\"#020\"));if(self.performance&&self.performance.memory)var t=e(new f.Panel(\"MB\",\"#f08\",\"#201\"));u(0);return{REVISION:16,dom:c,addPanel:e,showPanel:u,begin:function(){k=(performance||Date).now()},end:function(){a++;var c=(performance||Date).now();h.update(c-k,200);if(c>g+1E3&&(r.update(1E3*a/(c-g),100),g=c,a=0,t)){var d=performance.memory;t.update(d.usedJSHeapSize/\n1048576,d.jsHeapSizeLimit/1048576)}return c},update:function(){k=this.end()},domElement:c,setMode:u}};f.Panel=function(e,f,l){var c=Infinity,k=0,g=Math.round,a=g(window.devicePixelRatio||1),r=80*a,h=48*a,t=3*a,v=2*a,d=3*a,m=15*a,n=74*a,p=30*a,q=document.createElement(\"canvas\");q.width=r;q.height=h;q.style.cssText=\"width:80px;height:48px\";var b=q.getContext(\"2d\");b.font=\"bold \"+9*a+\"px Helvetica,Arial,sans-serif\";b.textBaseline=\"top\";b.fillStyle=l;b.fillRect(0,0,r,h);b.fillStyle=f;b.fillText(e,t,v);\nb.fillRect(d,m,n,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d,m,n,p);return{dom:q,update:function(h,w){c=Math.min(c,h);k=Math.max(k,h);b.fillStyle=l;b.globalAlpha=1;b.fillRect(0,0,r,m);b.fillStyle=f;b.fillText(g(h)+\" \"+e+\" (\"+g(c)+\"-\"+g(k)+\")\",t,v);b.drawImage(q,d+a,m,n-a,p,d,m,n-a,p);b.fillRect(d+n-a,m,a,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d+n-a,m,a,g((1-h/w)*p))}}};return f});\n\n\n/***/ }),\n/* 37 */\n/***/ (function(module, exports, __webpack_require__) {\n\n!function(e,t){ true?module.exports=t():\"function\"==typeof define&&define.amd?define(\"SPECTOR\",[],t):\"object\"==typeof exports?exports.SPECTOR=t():e.SPECTOR=t()}(this,function(){return function(e){function t(a){if(n[a])return n[a].exports;var r=n[a]={i:a,l:!1,exports:{}};return e[a].call(r.exports,r,r.exports,t),r.l=!0,r.exports}var n={};return t.m=e,t.c=n,t.i=function(e){return e},t.d=function(e,n,a){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:a})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,\"a\",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p=\"\",t(t.s=10)}([function(e,t){function n(e,t){var n=e[1]||\"\",r=e[3];if(!r)return n;if(t&&\"function\"==typeof btoa){var o=a(r);return[n].concat(r.sources.map(function(e){return\"/*# sourceURL=\"+r.sourceRoot+e+\" */\"})).concat([o]).join(\"\\n\")}return[n].join(\"\\n\")}function a(e){return\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,\"+btoa(unescape(encodeURIComponent(JSON.stringify(e))))+\" */\"}e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var a=n(t,e);return t[2]?\"@media \"+t[2]+\"{\"+a+\"}\":a}).join(\"\")},t.i=function(e,n){\"string\"==typeof e&&(e=[[null,e,\"\"]]);for(var a={},r=0;r<this.length;r++){var o=this[r][0];\"number\"==typeof o&&(a[o]=!0)}for(r=0;r<e.length;r++){var i=e[r];\"number\"==typeof i[0]&&a[i[0]]||(n&&!i[2]?i[2]=n:n&&(i[2]=\"(\"+i[2]+\") and (\"+n+\")\"),t.push(i))}},t}},function(e,t,n){function a(e,t){for(var n=0;n<e.length;n++){var a=e[n],r=E[a.id];if(r){r.refs++;for(var o=0;o<r.parts.length;o++)r.parts[o](a.parts[o]);for(;o<a.parts.length;o++)r.parts.push(c(a.parts[o],t))}else{for(var i=[],o=0;o<a.parts.length;o++)i.push(c(a.parts[o],t));E[a.id]={id:a.id,refs:1,parts:i}}}}function r(e){for(var t=[],n={},a=0;a<e.length;a++){var r=e[a],o=r[0],i=r[1],s=r[2],u=r[3],l={css:i,media:s,sourceMap:u};n[o]?n[o].parts.push(l):t.push(n[o]={id:o,parts:[l]})}return t}function o(e,t){var n=_(e.insertInto);if(!n)throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.\");var a=T[T.length-1];if(\"top\"===e.insertAt)a?a.nextSibling?n.insertBefore(t,a.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),T.push(t);else{if(\"bottom\"!==e.insertAt)throw new Error(\"Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.\");n.appendChild(t)}}function i(e){e.parentNode.removeChild(e);var t=T.indexOf(e);t>=0&&T.splice(t,1)}function s(e){var t=document.createElement(\"style\");return e.attrs.type=\"text/css\",l(t,e.attrs),o(e,t),t}function u(e){var t=document.createElement(\"link\");return e.attrs.type=\"text/css\",e.attrs.rel=\"stylesheet\",l(t,e.attrs),o(e,t),t}function l(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function c(e,t){var n,a,r;if(t.singleton){var o=f++;n=h||(h=s(t)),a=m.bind(null,n,o,!1),r=m.bind(null,n,o,!0)}else e.sourceMap&&\"function\"==typeof URL&&\"function\"==typeof URL.createObjectURL&&\"function\"==typeof URL.revokeObjectURL&&\"function\"==typeof Blob&&\"function\"==typeof btoa?(n=u(t),a=p.bind(null,n,t),r=function(){i(n),n.href&&URL.revokeObjectURL(n.href)}):(n=s(t),a=d.bind(null,n),r=function(){i(n)});return a(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;a(e=t)}else r()}}function m(e,t,n,a){var r=n?\"\":a.css;if(e.styleSheet)e.styleSheet.cssText=R(t,r);else{var o=document.createTextNode(r),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(o,i[t]):e.appendChild(o)}}function d(e,t){var n=t.css,a=t.media;if(a&&e.setAttribute(\"media\",a),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}function p(e,t,n){var a=n.css,r=n.sourceMap,o=void 0===t.convertToAbsoluteUrls&&r;(t.convertToAbsoluteUrls||o)&&(a=v(a)),r&&(a+=\"\\n/*# sourceMappingURL=data:application/json;base64,\"+btoa(unescape(encodeURIComponent(JSON.stringify(r))))+\" */\");var i=new Blob([a],{type:\"text/css\"}),s=e.href;e.href=URL.createObjectURL(i),s&&URL.revokeObjectURL(s)}var E={},C=function(e){var t;return function(){return void 0===t&&(t=e.apply(this,arguments)),t}}(function(){return window&&document&&document.all&&!window.atob}),_=function(e){var t={};return function(n){return void 0===t[n]&&(t[n]=e.call(this,n)),t[n]}}(function(e){return document.querySelector(e)}),h=null,f=0,T=[],v=n(8);e.exports=function(e,t){if(\"undefined\"!=typeof DEBUG&&DEBUG&&\"object\"!=typeof document)throw new Error(\"The style-loader cannot be used in a non-browser environment\");t=t||{},t.attrs=\"object\"==typeof t.attrs?t.attrs:{},void 0===t.singleton&&(t.singleton=C()),void 0===t.insertInto&&(t.insertInto=\"head\"),void 0===t.insertAt&&(t.insertAt=\"bottom\");var n=r(e);return a(n,t),function(e){for(var o=[],i=0;i<n.length;i++){var s=n[i],u=E[s.id];u.refs--,o.push(u)}if(e){a(r(e),t)}for(var i=0;i<o.length;i++){var u=o[i];if(0===u.refs){for(var l=0;l<u.parts.length;l++)u.parts[l]();delete E[u.id]}}}};var R=function(){var e=[];return function(t,n){return e[t]=n,e.filter(Boolean).join(\"\\n\")}}()},function(e,t,n){(function(t){var n=\"undefined\"!=typeof window?window:\"undefined\"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope?self:{},a=function(){var e=/\\blang(?:uage)?-(\\w+)\\b/i,t=0,a=n.Prism={manual:n.Prism&&n.Prism.manual,util:{encode:function(e){return e instanceof r?new r(e.type,a.util.encode(e.content),e.alias):\"Array\"===a.util.type(e)?e.map(a.util.encode):e.replace(/&/g,\"&amp;\").replace(/</g,\"&lt;\").replace(/\\u00a0/g,\" \")},type:function(e){return Object.prototype.toString.call(e).match(/\\[object (\\w+)\\]/)[1]},objId:function(e){return e.__id||Object.defineProperty(e,\"__id\",{value:++t}),e.__id},clone:function(e){switch(a.util.type(e)){case\"Object\":var t={};for(var n in e)e.hasOwnProperty(n)&&(t[n]=a.util.clone(e[n]));return t;case\"Array\":return e.map&&e.map(function(e){return a.util.clone(e)})}return e}},languages:{extend:function(e,t){var n=a.util.clone(a.languages[e]);for(var r in t)n[r]=t[r];return n},insertBefore:function(e,t,n,r){r=r||a.languages;var o=r[e];if(2==arguments.length){n=arguments[1];for(var i in n)n.hasOwnProperty(i)&&(o[i]=n[i]);return o}var s={};for(var u in o)if(o.hasOwnProperty(u)){if(u==t)for(var i in n)n.hasOwnProperty(i)&&(s[i]=n[i]);s[u]=o[u]}return a.languages.DFS(a.languages,function(t,n){n===r[e]&&t!=e&&(this[t]=s)}),r[e]=s},DFS:function(e,t,n,r){r=r||{};for(var o in e)e.hasOwnProperty(o)&&(t.call(e,o,e[o],n||o),\"Object\"!==a.util.type(e[o])||r[a.util.objId(e[o])]?\"Array\"!==a.util.type(e[o])||r[a.util.objId(e[o])]||(r[a.util.objId(e[o])]=!0,a.languages.DFS(e[o],t,o,r)):(r[a.util.objId(e[o])]=!0,a.languages.DFS(e[o],t,null,r)))}},plugins:{},highlightAll:function(e,t){var n={callback:t,selector:'code[class*=\"language-\"], [class*=\"language-\"] code, code[class*=\"lang-\"], [class*=\"lang-\"] code'};a.hooks.run(\"before-highlightall\",n);for(var r,o=n.elements||document.querySelectorAll(n.selector),i=0;r=o[i++];)a.highlightElement(r,!0===e,n.callback)},highlightElement:function(t,r,o){for(var i,s,u=t;u&&!e.test(u.className);)u=u.parentNode;u&&(i=(u.className.match(e)||[,\"\"])[1].toLowerCase(),s=a.languages[i]),t.className=t.className.replace(e,\"\").replace(/\\s+/g,\" \")+\" language-\"+i,u=t.parentNode,/pre/i.test(u.nodeName)&&(u.className=u.className.replace(e,\"\").replace(/\\s+/g,\" \")+\" language-\"+i);var l=t.textContent,c={element:t,language:i,grammar:s,code:l};if(a.hooks.run(\"before-sanity-check\",c),!c.code||!c.grammar)return c.code&&(c.element.textContent=c.code),void a.hooks.run(\"complete\",c);if(a.hooks.run(\"before-highlight\",c),r&&n.Worker){var m=new Worker(a.filename);m.onmessage=function(e){c.highlightedCode=e.data,a.hooks.run(\"before-insert\",c),c.element.innerHTML=c.highlightedCode,o&&o.call(c.element),a.hooks.run(\"after-highlight\",c),a.hooks.run(\"complete\",c)},m.postMessage(JSON.stringify({language:c.language,code:c.code,immediateClose:!0}))}else c.highlightedCode=a.highlight(c.code,c.grammar,c.language),a.hooks.run(\"before-insert\",c),c.element.innerHTML=c.highlightedCode,o&&o.call(t),a.hooks.run(\"after-highlight\",c),a.hooks.run(\"complete\",c)},highlight:function(e,t,n){var o=a.tokenize(e,t);return r.stringify(a.util.encode(o),n)},tokenize:function(e,t){var n=a.Token,r=[e],o=t.rest;if(o){for(var i in o)t[i]=o[i];delete t.rest}e:for(var i in t)if(t.hasOwnProperty(i)&&t[i]){var s=t[i];s=\"Array\"===a.util.type(s)?s:[s];for(var u=0;u<s.length;++u){var l=s[u],c=l.inside,m=!!l.lookbehind,d=!!l.greedy,p=0,E=l.alias;if(d&&!l.pattern.global){var C=l.pattern.toString().match(/[imuy]*$/)[0];l.pattern=RegExp(l.pattern.source,C+\"g\")}l=l.pattern||l;for(var _=0,h=0;_<r.length;h+=r[_].length,++_){var f=r[_];if(r.length>e.length)break e;if(!(f instanceof n)){l.lastIndex=0;var T=l.exec(f),v=1;if(!T&&d&&_!=r.length-1){if(l.lastIndex=h,!(T=l.exec(e)))break;for(var R=T.index+(m?T[1].length:0),A=T.index+T[0].length,S=_,g=h,b=r.length;b>S&&A>g;++S)g+=r[S].length,R>=g&&(++_,h=g);if(r[_]instanceof n||r[S-1].greedy)continue;v=S-_,f=e.slice(h,g),T.index-=h}if(T){m&&(p=T[1].length);var R=T.index+p,T=T[0].slice(p),A=R+T.length,I=f.slice(0,R),N=f.slice(A),F=[_,v];I&&F.push(I);var y=new n(i,c?a.tokenize(T,c):T,E,T,d);F.push(y),N&&F.push(N),Array.prototype.splice.apply(r,F)}}}}}return r},hooks:{all:{},add:function(e,t){var n=a.hooks.all;n[e]=n[e]||[],n[e].push(t)},run:function(e,t){var n=a.hooks.all[e];if(n&&n.length)for(var r,o=0;r=n[o++];)r(t)}}},r=a.Token=function(e,t,n,a,r){this.type=e,this.content=t,this.alias=n,this.length=0|(a||\"\").length,this.greedy=!!r};if(r.stringify=function(e,t,n){if(\"string\"==typeof e)return e;if(\"Array\"===a.util.type(e))return e.map(function(n){return r.stringify(n,t,e)}).join(\"\");var o={type:e.type,content:r.stringify(e.content,t,n),tag:\"span\",classes:[\"token\",e.type],attributes:{},language:t,parent:n};if(\"comment\"==o.type&&(o.attributes.spellcheck=\"true\"),e.alias){var i=\"Array\"===a.util.type(e.alias)?e.alias:[e.alias];Array.prototype.push.apply(o.classes,i)}a.hooks.run(\"wrap\",o);var s=Object.keys(o.attributes).map(function(e){return e+'=\"'+(o.attributes[e]||\"\").replace(/\"/g,\"&quot;\")+'\"'}).join(\" \");return\"<\"+o.tag+' class=\"'+o.classes.join(\" \")+'\"'+(s?\" \"+s:\"\")+\">\"+o.content+\"</\"+o.tag+\">\"},!n.document)return n.addEventListener?(n.addEventListener(\"message\",function(e){var t=JSON.parse(e.data),r=t.language,o=t.code,i=t.immediateClose;n.postMessage(a.highlight(o,a.languages[r],r)),i&&n.close()},!1),n.Prism):n.Prism;var o=document.currentScript||[].slice.call(document.getElementsByTagName(\"script\")).pop();return o&&(a.filename=o.src,!document.addEventListener||a.manual||o.hasAttribute(\"data-manual\")||(\"loading\"!==document.readyState?window.requestAnimationFrame?window.requestAnimationFrame(a.highlightAll):window.setTimeout(a.highlightAll,16):document.addEventListener(\"DOMContentLoaded\",a.highlightAll))),n.Prism}();void 0!==e&&e.exports&&(e.exports=a),void 0!==t&&(t.Prism=a),a.languages.markup={comment:/<!--[\\w\\W]*?-->/,prolog:/<\\?[\\w\\W]+?\\?>/,doctype:/<!DOCTYPE[\\w\\W]+?>/i,cdata:/<!\\[CDATA\\[[\\w\\W]*?]]>/i,tag:{pattern:/<\\/?(?!\\d)[^\\s>\\/=$<]+(?:\\s+[^\\s>\\/=]+(?:=(?:(\"|')(?:\\\\\\1|\\\\?(?!\\1)[\\w\\W])*\\1|[^\\s'\">=]+))?)*\\s*\\/?>/i,inside:{tag:{pattern:/^<\\/?[^\\s>\\/]+/i,inside:{punctuation:/^<\\/?/,namespace:/^[^\\s>\\/:]+:/}},\"attr-value\":{pattern:/=(?:('|\")[\\w\\W]*?(\\1)|[^\\s>]+)/i,inside:{punctuation:/[=>\"']/}},punctuation:/\\/?>/,\"attr-name\":{pattern:/[^\\s>\\/]+/,inside:{namespace:/^[^\\s>\\/:]+:/}}}},entity:/&#?[\\da-z]{1,8};/i},a.hooks.add(\"wrap\",function(e){\"entity\"===e.type&&(e.attributes.title=e.content.replace(/&amp;/,\"&\"))}),a.languages.xml=a.languages.markup,a.languages.html=a.languages.markup,a.languages.mathml=a.languages.markup,a.languages.svg=a.languages.markup,a.languages.css={comment:/\\/\\*[\\w\\W]*?\\*\\//,atrule:{pattern:/@[\\w-]+?.*?(;|(?=\\s*\\{))/i,inside:{rule:/@[\\w-]+/}},url:/url\\((?:([\"'])(\\\\(?:\\r\\n|[\\w\\W])|(?!\\1)[^\\\\\\r\\n])*\\1|.*?)\\)/i,selector:/[^\\{\\}\\s][^\\{\\};]*?(?=\\s*\\{)/,string:{pattern:/(\"|')(\\\\(?:\\r\\n|[\\w\\W])|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0},property:/(\\b|\\B)[\\w-]+(?=\\s*:)/i,important:/\\B!important\\b/i,function:/[-a-z0-9]+(?=\\()/i,punctuation:/[(){};:]/},a.languages.css.atrule.inside.rest=a.util.clone(a.languages.css),a.languages.markup&&(a.languages.insertBefore(\"markup\",\"tag\",{style:{pattern:/(<style[\\w\\W]*?>)[\\w\\W]*?(?=<\\/style>)/i,lookbehind:!0,inside:a.languages.css,alias:\"language-css\"}}),a.languages.insertBefore(\"inside\",\"attr-value\",{\"style-attr\":{pattern:/\\s*style=(\"|').*?\\1/i,inside:{\"attr-name\":{pattern:/^\\s*style/i,inside:a.languages.markup.tag.inside},punctuation:/^\\s*=\\s*['\"]|['\"]\\s*$/,\"attr-value\":{pattern:/.+/i,inside:a.languages.css}},alias:\"language-css\"}},a.languages.markup.tag)),a.languages.clike={comment:[{pattern:/(^|[^\\\\])\\/\\*[\\w\\W]*?\\*\\//,lookbehind:!0},{pattern:/(^|[^\\\\:])\\/\\/.*/,lookbehind:!0}],string:{pattern:/([\"'])(\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0},\"class-name\":{pattern:/((?:\\b(?:class|interface|extends|implements|trait|instanceof|new)\\s+)|(?:catch\\s+\\())[a-z0-9_\\.\\\\]+/i,lookbehind:!0,inside:{punctuation:/(\\.|\\\\)/}},keyword:/\\b(if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\\b/,boolean:/\\b(true|false)\\b/,function:/[a-z0-9_]+(?=\\()/i,number:/\\b-?(?:0x[\\da-f]+|\\d*\\.?\\d+(?:e[+-]?\\d+)?)\\b/i,operator:/--?|\\+\\+?|!=?=?|<=?|>=?|==?=?|&&?|\\|\\|?|\\?|\\*|\\/|~|\\^|%/,punctuation:/[{}[\\];(),.:]/},a.languages.javascript=a.languages.extend(\"clike\",{keyword:/\\b(as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|var|void|while|with|yield)\\b/,number:/\\b-?(0x[\\dA-Fa-f]+|0b[01]+|0o[0-7]+|\\d*\\.?\\d+([Ee][+-]?\\d+)?|NaN|Infinity)\\b/,function:/[_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*(?=\\()/i,operator:/--?|\\+\\+?|!=?=?|<=?|>=?|==?=?|&&?|\\|\\|?|\\?|\\*\\*?|\\/|~|\\^|%|\\.{3}/}),a.languages.insertBefore(\"javascript\",\"keyword\",{regex:{pattern:/(^|[^\\/])\\/(?!\\/)(\\[.+?]|\\\\.|[^\\/\\\\\\r\\n])+\\/[gimyu]{0,5}(?=\\s*($|[\\r\\n,.;})]))/,lookbehind:!0,greedy:!0}}),a.languages.insertBefore(\"javascript\",\"string\",{\"template-string\":{pattern:/`(?:\\\\\\\\|\\\\?[^\\\\])*?`/,greedy:!0,inside:{interpolation:{pattern:/\\$\\{[^}]+\\}/,inside:{\"interpolation-punctuation\":{pattern:/^\\$\\{|\\}$/,alias:\"punctuation\"},rest:a.languages.javascript}},string:/[\\s\\S]+/}}}),a.languages.markup&&a.languages.insertBefore(\"markup\",\"tag\",{script:{pattern:/(<script[\\w\\W]*?>)[\\w\\W]*?(?=<\\/script>)/i,lookbehind:!0,inside:a.languages.javascript,alias:\"language-javascript\"}}),a.languages.js=a.languages.javascript,a.languages.glsl=a.languages.extend(\"clike\",{comment:[/\\/\\*[\\w\\W]*?\\*\\//,/\\/\\/(?:\\\\(?:\\r\\n|[\\s\\S])|.)*/],number:/\\b(?:0x[\\da-f]+|(?:\\.\\d+|\\d+\\.?\\d*)(?:e[+-]?\\d+)?)[ulf]*\\b/i,keyword:/\\b(?:attribute|const|uniform|varying|buffer|shared|coherent|volatile|restrict|readonly|writeonly|atomic_uint|layout|centroid|flat|smooth|noperspective|patch|sample|break|continue|do|for|while|switch|case|default|if|else|subroutine|in|out|inout|float|double|int|void|bool|true|false|invariant|precise|discard|return|d?mat[234](?:x[234])?|[ibdu]?vec[234]|uint|lowp|mediump|highp|precision|[iu]?sampler[123]D|[iu]?samplerCube|sampler[12]DShadow|samplerCubeShadow|[iu]?sampler[12]DArray|sampler[12]DArrayShadow|[iu]?sampler2DRect|sampler2DRectShadow|[iu]?samplerBuffer|[iu]?sampler2DMS(?:Array)?|[iu]?samplerCubeArray|samplerCubeArrayShadow|[iu]?image[123]D|[iu]?image2DRect|[iu]?imageCube|[iu]?imageBuffer|[iu]?image[12]DArray|[iu]?imageCubeArray|[iu]?image2DMS(?:Array)?|struct|common|partition|active|asm|class|union|enum|typedef|template|this|resource|goto|inline|noinline|public|static|extern|external|interface|long|short|half|fixed|unsigned|superp|input|output|hvec[234]|fvec[234]|sampler3DRect|filter|sizeof|cast|namespace|using)\\b/}),a.languages.insertBefore(\"glsl\",\"comment\",{preprocessor:{pattern:/(^[ \\t]*)#(?:(?:define|undef|if|ifdef|ifndef|else|elif|endif|error|pragma|extension|version|line)\\b)?/m,lookbehind:!0,alias:\"builtin\"}}),e.exports=a}).call(t,n(9))},function(e,t){var n;!function(e){!function(e){var t=function(){function e(){this.callbacks=[],this.counter=-1}return e.prototype.add=function(e,t){return this.counter++,t&&(e=e.bind(t)),this.callbacks[this.counter]=e,this.counter},e.prototype.remove=function(e){delete this.callbacks[e]},e.prototype.clear=function(){this.callbacks={}},e.prototype.trigger=function(e){for(var t in this.callbacks)this.callbacks.hasOwnProperty(t)&&this.callbacks[t](e)},e}();e.Event=t}(e.Utils||(e.Utils={}))}(n||(n={}));var n;!function(e){!function(e){e[e.noLog=0]=\"noLog\",e[e.error=1]=\"error\",e[e.warning=2]=\"warning\",e[e.info=3]=\"info\"}(e.LogLevel||(e.LogLevel={}))}(n||(n={})),function(e){!function(t){var n=function(){function t(t){void 0===t&&(t=e.LogLevel.warning),this.level=t}return t.prototype.setLevel=function(e){this.level=e},t.prototype.error=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];this.level>0&&console.error(e,t)},t.prototype.warn=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];this.level>1&&console.warn(e,t)},t.prototype.info=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];this.level>2&&console.log(e,t)},t}();t.ConsoleLogger=n}(e.Utils||(e.Utils={}))}(n||(n={}));var n;!function(e){!function(e){var t=function(){function e(){}return e.prototype.getStackTrace=function(e,t){void 0===e&&(e=0),void 0===t&&(t=0);var n=[];try{throw new Error}catch(e){if(e.stack)for(var a=e.stack.split(\"\\n\"),r=0,o=a.length;r<o;r++)a[r].match(/^\\s*[A-Za-z0-9\\-_\\$]+\\(/)?n.push(a[r]):0===a[r].indexOf(\"    at \")&&(a[r]=a[r].replace(\"    at \",\"\"),n.push(a[r]));else if(e.message)for(var a=e.message.split(\"\\n\"),r=0,o=a.length;r<o;r++)if(a[r].match(/^\\s*[A-Za-z0-9\\-_\\$]+\\(/)){var i=a[r];a[r+1]&&(i+=\" at \"+a[r+1],r++),n.push(i)}}if(!n)for(var s=arguments.callee.caller;s;){var u=s.toString(),l=u.substring(u.indexOf(\"function\")+8,u.indexOf(\"\"))||\"anonymous\";n.push(l),s=s.caller}if(n){n.shift();for(var r=0;r<e&&n.length>0;r++)n.shift();for(var r=0;r<t&&n.length>0;r++)n.pop()}return n},e}();e.StackTrace=t}(e.Utils||(e.Utils={}))}(n||(n={}));var n;!function(e){!function(e){var t=function(){function e(){if(window.performance&&window.performance.now)this.nowFunction=this.dateBasedPerformanceNow.bind(this);else{var e=new Date;this.nowFunction=e.getTime.bind(e)}}return e.prototype.dateBasedPerformanceNow=function(){return performance.timing.navigationStart+performance.now()},Object.defineProperty(e.prototype,\"now\",{get:function(){return this.nowFunction()},enumerable:!0,configurable:!0}),e}();e.Time=t}(e.Utils||(e.Utils={}))}(n||(n={}));var n;!function(e){function t(e,t){var n={};for(var a in e)e.hasOwnProperty(a)&&(n[a]=e[a]);for(var a in t)n.hasOwnProperty(a)||(n[a]=t[a]);return n}e.merge=t}(n||(n={}));var n;!function(e){var t=function(){function t(){}return t.isWebGlConstant=function(t){return null!==e.WebGlConstantsByValue[t]&&void 0!==e.WebGlConstantsByValue[t]},t.stringifyWebGlConstant=function(t,n){if(0===t){var a=this.zeroMeaningByCommand[n];return a||\"0\"}if(1===t){var a=this.oneMeaningByCommand[n];return a||\"1\"}var r=e.WebGlConstantsByValue[t];return r?r.name:t+\"\"},t}();t.DEPTH_BUFFER_BIT={name:\"DEPTH_BUFFER_BIT\",value:256,description:\"Passed to clear to clear the current depth buffer.\"},t.STENCIL_BUFFER_BIT={name:\"STENCIL_BUFFER_BIT\",value:1024,description:\"Passed to clear to clear the current stencil buffer.\"},t.COLOR_BUFFER_BIT={name:\"COLOR_BUFFER_BIT\",value:16384,description:\"Passed to clear to clear the current color buffer.\"},t.POINTS={name:\"POINTS\",value:0,description:\"Passed to drawElements or drawArrays to draw single points.\"},t.LINES={name:\"LINES\",value:1,description:\"Passed to drawElements or drawArrays to draw lines. Each vertex connects to the one after it.\"},t.LINE_LOOP={name:\"LINE_LOOP\",value:2,description:\"Passed to drawElements or drawArrays to draw lines. Each set of two vertices is treated as a separate line segment.\"},t.LINE_STRIP={name:\"LINE_STRIP\",value:3,description:\"Passed to drawElements or drawArrays to draw a connected group of line segments from the first vertex to the last.\"},t.TRIANGLES={name:\"TRIANGLES\",value:4,description:\"Passed to drawElements or drawArrays to draw triangles. Each set of three vertices creates a separate triangle.\"},t.TRIANGLE_STRIP={name:\"TRIANGLE_STRIP\",value:5,description:\"Passed to drawElements or drawArrays to draw a connected group of triangles.\"},t.TRIANGLE_FAN={name:\"TRIANGLE_FAN\",value:6,description:\"Passed to drawElements or drawArrays to draw a connected group of triangles. Each vertex connects to the previous and the first vertex in the fan.\"},t.ZERO={name:\"ZERO\",value:0,description:\"Passed to blendFunc or blendFuncSeparate to turn off a component.\"},t.ONE={name:\"ONE\",value:1,description:\"Passed to blendFunc or blendFuncSeparate to turn on a component.\"},t.SRC_COLOR={name:\"SRC_COLOR\",value:768,description:\"Passed to blendFunc or blendFuncSeparate to multiply a component by the source elements color.\"},t.ONE_MINUS_SRC_COLOR={name:\"ONE_MINUS_SRC_COLOR\",value:769,description:\"Passed to blendFunc or blendFuncSeparate to multiply a component by one minus the source elements color.\"},t.SRC_ALPHA={name:\"SRC_ALPHA\",value:770,description:\"Passed to blendFunc or blendFuncSeparate to multiply a component by the source's alpha.\"},t.ONE_MINUS_SRC_ALPHA={name:\"ONE_MINUS_SRC_ALPHA\",value:771,description:\"Passed to blendFunc or blendFuncSeparate to multiply a component by one minus the source's alpha.\"},t.DST_ALPHA={name:\"DST_ALPHA\",value:772,description:\"Passed to blendFunc or blendFuncSeparate to multiply a component by the destination's alpha.\"},t.ONE_MINUS_DST_ALPHA={name:\"ONE_MINUS_DST_ALPHA\",value:773,description:\"Passed to blendFunc or blendFuncSeparate to multiply a component by one minus the destination's alpha.\"},t.DST_COLOR={name:\"DST_COLOR\",value:774,description:\"Passed to blendFunc or blendFuncSeparate to multiply a component by the destination's color.\"},t.ONE_MINUS_DST_COLOR={name:\"ONE_MINUS_DST_COLOR\",value:775,description:\"Passed to blendFunc or blendFuncSeparate to multiply a component by one minus the destination's color.\"},t.SRC_ALPHA_SATURATE={name:\"SRC_ALPHA_SATURATE\",value:776,description:\"Passed to blendFunc or blendFuncSeparate to multiply a component by the minimum of source's alpha or one minus the destination's alpha.\"},t.CONSTANT_COLOR={name:\"CONSTANT_COLOR\",value:32769,description:\"Passed to blendFunc or blendFuncSeparate to specify a constant color blend function.\"},t.ONE_MINUS_CONSTANT_COLOR={name:\"ONE_MINUS_CONSTANT_COLOR\",value:32770,description:\"Passed to blendFunc or blendFuncSeparate to specify one minus a constant color blend function.\"},t.CONSTANT_ALPHA={name:\"CONSTANT_ALPHA\",value:32771,description:\"Passed to blendFunc or blendFuncSeparate to specify a constant alpha blend function.\"},t.ONE_MINUS_CONSTANT_ALPHA={name:\"ONE_MINUS_CONSTANT_ALPHA\",value:32772,description:\"Passed to blendFunc or blendFuncSeparate to specify one minus a constant alpha blend function.\"},t.FUNC_ADD={name:\"FUNC_ADD\",value:32774,description:\"Passed to blendEquation or blendEquationSeparate to set an addition blend function.\"},t.FUNC_SUBSTRACT={name:\"FUNC_SUBSTRACT\",value:32778,description:\"Passed to blendEquation or blendEquationSeparate to specify a subtraction blend function (source - destination).\"},t.FUNC_REVERSE_SUBTRACT={name:\"FUNC_REVERSE_SUBTRACT\",value:32779,description:\"Passed to blendEquation or blendEquationSeparate to specify a reverse subtraction blend function (destination - source).\"},t.BLEND_EQUATION={name:\"BLEND_EQUATION\",value:32777,description:\"Passed to getParameter to get the current RGB blend function.\"},t.BLEND_EQUATION_RGB={name:\"BLEND_EQUATION_RGB\",value:32777,description:\"Passed to getParameter to get the current RGB blend function. Same as BLEND_EQUATION\"},t.BLEND_EQUATION_ALPHA={name:\"BLEND_EQUATION_ALPHA\",value:34877,description:\"Passed to getParameter to get the current alpha blend function. Same as BLEND_EQUATION\"},t.BLEND_DST_RGB={name:\"BLEND_DST_RGB\",value:32968,description:\"Passed to getParameter to get the current destination RGB blend function.\"},t.BLEND_SRC_RGB={name:\"BLEND_SRC_RGB\",value:32969,description:\"Passed to getParameter to get the current destination RGB blend function.\"},t.BLEND_DST_ALPHA={name:\"BLEND_DST_ALPHA\",value:32970,description:\"Passed to getParameter to get the current destination alpha blend function.\"},t.BLEND_SRC_ALPHA={name:\"BLEND_SRC_ALPHA\",value:32971,description:\"Passed to getParameter to get the current source alpha blend function.\"},t.BLEND_COLOR={name:\"BLEND_COLOR\",value:32773,description:\"Passed to getParameter to return a the current blend color.\"},t.ARRAY_BUFFER_BINDING={name:\"ARRAY_BUFFER_BINDING\",value:34964,description:\"Passed to getParameter to get the array buffer binding.\"},t.ELEMENT_ARRAY_BUFFER_BINDING={name:\"ELEMENT_ARRAY_BUFFER_BINDING\",value:34965,description:\"Passed to getParameter to get the current element array buffer.\"},t.LINE_WIDTH={name:\"LINE_WIDTH\",value:2849,description:\"Passed to getParameter to get the current lineWidth (set by the lineWidth method).\"},t.ALIASED_POINT_SIZE_RANGE={name:\"ALIASED_POINT_SIZE_RANGE\",value:33901,description:\"Passed to getParameter to get the current size of a point drawn with gl.POINTS\"},t.ALIASED_LINE_WIDTH_RANGE={name:\"ALIASED_LINE_WIDTH_RANGE\",value:33902,description:\"Passed to getParameter to get the range of available widths for a line. Returns a length-2 array with the lo value at 0, and hight at 1.\"},t.CULL_FACE_MODE={name:\"CULL_FACE_MODE\",value:2885,description:\"Passed to getParameter to get the current value of cullFace. Should return FRONT, BACK, or FRONT_AND_BACK\"},t.FRONT_FACE={name:\"FRONT_FACE\",value:2886,description:\"Passed to getParameter to determine the current value of frontFace. Should return CW or CCW.\"},t.DEPTH_RANGE={name:\"DEPTH_RANGE\",value:2928,description:\"Passed to getParameter to return a length-2 array of floats giving the current depth range.\"},t.DEPTH_WRITEMASK={name:\"DEPTH_WRITEMASK\",value:2930,description:\"Passed to getParameter to determine if the depth write mask is enabled.\"},t.DEPTH_CLEAR_VALUE={name:\"DEPTH_CLEAR_VALUE\",value:2931,description:\"Passed to getParameter to determine the current depth clear value.\"},t.DEPTH_FUNC={name:\"DEPTH_FUNC\",value:2932,description:\"Passed to getParameter to get the current depth function. Returns NEVER, ALWAYS, LESS, EQUAL, LEQUAL, GREATER, GEQUAL, or NOTEQUAL.\"},t.STENCIL_CLEAR_VALUE={name:\"STENCIL_CLEAR_VALUE\",value:2961,description:\"Passed to getParameter to get the value the stencil will be cleared to.\"},t.STENCIL_FUNC={name:\"STENCIL_FUNC\",value:2962,description:\"Passed to getParameter to get the current stencil function. Returns NEVER, ALWAYS, LESS, EQUAL, LEQUAL, GREATER, GEQUAL, or NOTEQUAL.\"},t.STENCIL_FAIL={name:\"STENCIL_FAIL\",value:2964,description:\"Passed to getParameter to get the current stencil fail function. Should return KEEP, REPLACE, INCR, DECR, INVERT, INCR_WRAP, or DECR_WRAP.\"},t.STENCIL_PASS_DEPTH_FAIL={name:\"STENCIL_PASS_DEPTH_FAIL\",value:2965,description:\"Passed to getParameter to get the current stencil fail function should the depth buffer test fail. Should return KEEP, REPLACE, INCR, DECR, INVERT, INCR_WRAP, or DECR_WRAP.\"},t.STENCIL_PASS_DEPTH_PASS={name:\"STENCIL_PASS_DEPTH_PASS\",value:2966,description:\"Passed to getParameter to get the current stencil fail function should the depth buffer test pass. Should return KEEP, REPLACE, INCR, DECR, INVERT, INCR_WRAP, or DECR_WRAP.\"},t.STENCIL_REF={name:\"STENCIL_REF\",value:2967,description:\"Passed to getParameter to get the reference value used for stencil tests.\"},t.STENCIL_VALUE_MASK={name:\"STENCIL_VALUE_MASK\",value:2963,description:\" \"},t.STENCIL_WRITEMASK={name:\"STENCIL_WRITEMASK\",value:2968,description:\" \"},t.STENCIL_BACK_FUNC={name:\"STENCIL_BACK_FUNC\",value:34816,description:\" \"},t.STENCIL_BACK_FAIL={name:\"STENCIL_BACK_FAIL\",value:34817,description:\" \"},t.STENCIL_BACK_PASS_DEPTH_FAIL={name:\"STENCIL_BACK_PASS_DEPTH_FAIL\",value:34818,description:\" \"},t.STENCIL_BACK_PASS_DEPTH_PASS={name:\"STENCIL_BACK_PASS_DEPTH_PASS\",value:34819,description:\" \"},t.STENCIL_BACK_REF={name:\"STENCIL_BACK_REF\",value:36003,description:\" \"},t.STENCIL_BACK_VALUE_MASK={name:\"STENCIL_BACK_VALUE_MASK\",value:36004,description:\" \"},t.STENCIL_BACK_WRITEMASK={name:\"STENCIL_BACK_WRITEMASK\",value:36005,description:\" \"},t.VIEWPORT={name:\"VIEWPORT\",value:2978,description:\"Returns an Int32Array with four elements for the current viewport dimensions.\"},t.SCISSOR_BOX={name:\"SCISSOR_BOX\",value:3088,description:\"Returns an Int32Array with four elements for the current scissor box dimensions.\"},t.COLOR_CLEAR_VALUE={name:\"COLOR_CLEAR_VALUE\",value:3106,description:\" \"},t.COLOR_WRITEMASK={name:\"COLOR_WRITEMASK\",value:3107,description:\" \"},t.UNPACK_ALIGNMENT={name:\"UNPACK_ALIGNMENT\",value:3317,description:\" \"},t.PACK_ALIGNMENT={name:\"PACK_ALIGNMENT\",value:3333,description:\" \"},t.MAX_TEXTURE_SIZE={name:\"MAX_TEXTURE_SIZE\",value:3379,description:\" \"},t.MAX_VIEWPORT_DIMS={name:\"MAX_VIEWPORT_DIMS\",value:3386,description:\" \"},t.SUBPIXEL_BITS={name:\"SUBPIXEL_BITS\",value:3408,description:\" \"},t.RED_BITS={name:\"RED_BITS\",value:3410,description:\" \"},t.GREEN_BITS={name:\"GREEN_BITS\",value:3411,description:\" \"},t.BLUE_BITS={name:\"BLUE_BITS\",value:3412,description:\" \"},t.ALPHA_BITS={name:\"ALPHA_BITS\",value:3413,description:\" \"},t.DEPTH_BITS={name:\"DEPTH_BITS\",value:3414,description:\" \"},t.STENCIL_BITS={name:\"STENCIL_BITS\",value:3415,description:\" \"},t.POLYGON_OFFSET_UNITS={name:\"POLYGON_OFFSET_UNITS\",value:10752,description:\" \"},t.POLYGON_OFFSET_FACTOR={name:\"POLYGON_OFFSET_FACTOR\",value:32824,description:\" \"},t.TEXTURE_BINDING_2D={name:\"TEXTURE_BINDING_2D\",value:32873,description:\" \"},t.SAMPLE_BUFFERS={name:\"SAMPLE_BUFFERS\",value:32936,description:\" \"},t.SAMPLES={name:\"SAMPLES\",value:32937,description:\" \"},t.SAMPLE_COVERAGE_VALUE={name:\"SAMPLE_COVERAGE_VALUE\",value:32938,description:\" \"},t.SAMPLE_COVERAGE_INVERT={name:\"SAMPLE_COVERAGE_INVERT\",value:32939,description:\" \"},t.COMPRESSED_TEXTURE_FORMATS={name:\"COMPRESSED_TEXTURE_FORMATS\",value:34467,description:\" \"},t.VENDOR={name:\"VENDOR\",value:7936,description:\" \"},t.RENDERER={name:\"RENDERER\",value:7937,description:\" \"},t.VERSION={name:\"VERSION\",value:7938,description:\" \"},t.IMPLEMENTATION_COLOR_READ_TYPE={name:\"IMPLEMENTATION_COLOR_READ_TYPE\",value:35738,description:\" \"},t.IMPLEMENTATION_COLOR_READ_FORMAT={name:\"IMPLEMENTATION_COLOR_READ_FORMAT\",value:35739,description:\" \"},t.BROWSER_DEFAULT_WEBGL={name:\"BROWSER_DEFAULT_WEBGL\",value:37444,description:\" \"},t.STATIC_DRAW={name:\"STATIC_DRAW\",value:35044,description:\"Passed to bufferData as a hint about whether the contents of the buffer are likely to be used often and not change often.\"},t.STREAM_DRAW={name:\"STREAM_DRAW\",value:35040,description:\"Passed to bufferData as a hint about whether the contents of the buffer are likely to not be used often.\"},t.DYNAMIC_DRAW={name:\"DYNAMIC_DRAW\",value:35048,description:\"Passed to bufferData as a hint about whether the contents of the buffer are likely to be used often and change often.\"},t.ARRAY_BUFFER={name:\"ARRAY_BUFFER\",value:34962,description:\"Passed to bindBuffer or bufferData to specify the type of buffer being used.\"},t.ELEMENT_ARRAY_BUFFER={name:\"ELEMENT_ARRAY_BUFFER\",value:34963,description:\"Passed to bindBuffer or bufferData to specify the type of buffer being used.\"},t.BUFFER_SIZE={name:\"BUFFER_SIZE\",value:34660,description:\"Passed to getBufferParameter to get a buffer's size.\"},t.BUFFER_USAGE={name:\"BUFFER_USAGE\",value:34661,description:\"Passed to getBufferParameter to get the hint for the buffer passed in when it was created.\"},t.CURRENT_VERTEX_ATTRIB={name:\"CURRENT_VERTEX_ATTRIB\",value:34342,description:\"Passed to getVertexAttrib to read back the current vertex attribute.\"},t.VERTEX_ATTRIB_ARRAY_ENABLED={name:\"VERTEX_ATTRIB_ARRAY_ENABLED\",value:34338,description:\" \"},t.VERTEX_ATTRIB_ARRAY_SIZE={name:\"VERTEX_ATTRIB_ARRAY_SIZE\",value:34339,description:\" \"},t.VERTEX_ATTRIB_ARRAY_STRIDE={name:\"VERTEX_ATTRIB_ARRAY_STRIDE\",value:34340,description:\" \"},t.VERTEX_ATTRIB_ARRAY_TYPE={name:\"VERTEX_ATTRIB_ARRAY_TYPE\",value:34341,description:\" \"},t.VERTEX_ATTRIB_ARRAY_NORMALIZED={name:\"VERTEX_ATTRIB_ARRAY_NORMALIZED\",value:34922,description:\" \"},t.VERTEX_ATTRIB_ARRAY_POINTER={name:\"VERTEX_ATTRIB_ARRAY_POINTER\",value:34373,description:\" \"},t.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING={name:\"VERTEX_ATTRIB_ARRAY_BUFFER_BINDING\",value:34975,description:\" \"},t.CULL_FACE={name:\"CULL_FACE\",value:2884,description:\"Passed to enable/disable to turn on/off culling. Can also be used with getParameter to find the current culling method.\"},t.FRONT={name:\"FRONT\",value:1028,description:\"Passed to cullFace to specify that only front faces should be drawn.\"},t.BACK={name:\"BACK\",value:1029,description:\"Passed to cullFace to specify that only back faces should be drawn.\"},t.FRONT_AND_BACK={name:\"FRONT_AND_BACK\",value:1032,description:\"Passed to cullFace to specify that front and back faces should be drawn.\"},t.BLEND={name:\"BLEND\",value:3042,description:\"Passed to enable/disable to turn on/off blending. Can also be used with getParameter to find the current blending method.\"},t.DEPTH_TEST={name:\"DEPTH_TEST\",value:2929,description:\"Passed to enable/disable to turn on/off the depth test. Can also be used with getParameter to query the depth test.\"},t.DITHER={name:\"DITHER\",value:3024,description:\"Passed to enable/disable to turn on/off dithering. Can also be used with getParameter to find the current dithering method.\"},t.POLYGON_OFFSET_FILL={name:\"POLYGON_OFFSET_FILL\",value:32823,description:\"Passed to enable/disable to turn on/off the polygon offset. Useful for rendering hidden-line images, decals, and or solids with highlighted edges. Can also be used with getParameter to query the scissor test.\"},t.SAMPLE_ALPHA_TO_COVERAGE={name:\"SAMPLE_ALPHA_TO_COVERAGE\",value:32926,description:\"Passed to enable/disable to turn on/off the alpha to coverage. Used in multi-sampling alpha channels.\"},t.SAMPLE_COVERAGE={name:\"SAMPLE_COVERAGE\",value:32928,description:\"Passed to enable/disable to turn on/off the sample coverage. Used in multi-sampling.\"},t.SCISSOR_TEST={name:\"SCISSOR_TEST\",value:3089,description:\"Passed to enable/disable to turn on/off the scissor test. Can also be used with getParameter to query the scissor test.\"},t.STENCIL_TEST={name:\"STENCIL_TEST\",value:2960,description:\"Passed to enable/disable to turn on/off the stencil test. Can also be used with getParameter to query the stencil test.\"},t.NO_ERROR={name:\"NO_ERROR\",value:0,description:\"Returned from getError.\"},t.INVALID_ENUM={name:\"INVALID_ENUM\",value:1280,description:\"Returned from getError.\"},t.INVALID_VALUE={name:\"INVALID_VALUE\",value:1281,description:\"Returned from getError.\"},t.INVALID_OPERATION={name:\"INVALID_OPERATION\",value:1282,description:\"Returned from getError.\"},t.OUT_OF_MEMORY={name:\"OUT_OF_MEMORY\",value:1285,description:\"Returned from getError.\"},t.CONTEXT_LOST_WEBGL={name:\"CONTEXT_LOST_WEBGL\",value:37442,description:\"Returned from getError.\"},t.CW={name:\"CW\",value:2304,description:\"Passed to frontFace to specify the front face of a polygon is drawn in the clockwise direction\"},t.CCW={name:\"CCW\",value:2305,description:\"Passed to frontFace to specify the front face of a polygon is drawn in the counter clockwise direction\"},t.DONT_CARE={name:\"DONT_CARE\",value:4352,description:\"There is no preference for this behavior.\"},t.FASTEST={name:\"FASTEST\",value:4353,description:\"The most efficient behavior should be used.\"},t.NICEST={name:\"NICEST\",value:4354,description:\"The most correct or the highest quality option should be used.\"},t.GENERATE_MIPMAP_HINT={name:\"GENERATE_MIPMAP_HINT\",value:33170,description:\"Hint for the quality of filtering when generating mipmap images with WebGLRenderingContext.generateMipmap().\"},t.BYTE={name:\"BYTE\",value:5120,description:\" \"},t.UNSIGNED_BYTE={name:\"UNSIGNED_BYTE\",value:5121,description:\" \"},t.SHORT={name:\"SHORT\",value:5122,description:\" \"},t.UNSIGNED_SHORT={name:\"UNSIGNED_SHORT\",value:5123,description:\" \"},t.INT={name:\"INT\",value:5124,description:\" \"},t.UNSIGNED_INT={name:\"UNSIGNED_INT\",value:5125,description:\" \"},t.FLOAT={name:\"FLOAT\",value:5126,description:\" \"},t.DEPTH_COMPONENT={name:\"DEPTH_COMPONENT\",value:6402,description:\" \"},t.ALPHA={name:\"ALPHA\",value:6406,description:\" \"},t.RGB={name:\"RGB\",value:6407,description:\" \"},t.RGBA={name:\"RGBA\",value:6408,description:\" \"},t.LUMINANCE={name:\"LUMINANCE\",value:6409,description:\" \"},t.LUMINANCE_ALPHA={name:\"LUMINANCE_ALPHA\",value:6410,description:\" \"},t.UNSIGNED_SHORT_4_4_4_4={name:\"UNSIGNED_SHORT_4_4_4_4\",value:32819,description:\" \"},t.UNSIGNED_SHORT_5_5_5_1={name:\"UNSIGNED_SHORT_5_5_5_1\",value:32820,description:\" \"},t.UNSIGNED_SHORT_5_6_5={name:\"UNSIGNED_SHORT_5_6_5\",value:33635,description:\" \"},t.FRAGMENT_SHADER={name:\"FRAGMENT_SHADER\",value:35632,description:\"Passed to createShader to define a fragment shader.\"},t.VERTEX_SHADER={name:\"VERTEX_SHADER\",value:35633,description:\"Passed to createShader to define a vertex shader\"},t.COMPILE_STATUS={name:\"COMPILE_STATUS\",value:35713,description:\"Passed to getShaderParamter to get the status of the compilation. Returns false if the shader was not compiled. You can then query getShaderInfoLog to find the exact error\"},t.DELETE_STATUS={name:\"DELETE_STATUS\",value:35712,description:\"Passed to getShaderParamter to determine if a shader was deleted via deleteShader. Returns true if it was, false otherwise.\"},t.LINK_STATUS={name:\"LINK_STATUS\",value:35714,description:\"Passed to getProgramParameter after calling linkProgram to determine if a program was linked correctly. Returns false if there were errors. Use getProgramInfoLog to find the exact error.\"},t.VALIDATE_STATUS={name:\"VALIDATE_STATUS\",value:35715,description:\"Passed to getProgramParameter after calling validateProgram to determine if it is valid. Returns false if errors were found.\"},t.ATTACHED_SHADERS={name:\"ATTACHED_SHADERS\",value:35717,description:\"Passed to getProgramParameter after calling attachShader to determine if the shader was attached correctly. Returns false if errors occurred.\"},t.ACTIVE_ATTRIBUTES={name:\"ACTIVE_ATTRIBUTES\",value:35721,description:\"Passed to getProgramParameter to get the number of attributes active in a program.\"},t.ACTIVE_UNIFORMS={name:\"ACTIVE_UNIFORMS\",value:35718,description:\"Passed to getProgramParamter to get the number of uniforms active in a program.\"},t.MAX_VERTEX_ATTRIBS={name:\"MAX_VERTEX_ATTRIBS\",value:34921,description:\" \"},t.MAX_VERTEX_UNIFORM_VECTORS={name:\"MAX_VERTEX_UNIFORM_VECTORS\",value:36347,description:\" \"},t.MAX_VARYING_VECTORS={name:\"MAX_VARYING_VECTORS\",value:36348,description:\" \"},t.MAX_COMBINED_TEXTURE_IMAGE_UNITS={name:\"MAX_COMBINED_TEXTURE_IMAGE_UNITS\",value:35661,description:\" \"},t.MAX_VERTEX_TEXTURE_IMAGE_UNITS={name:\"MAX_VERTEX_TEXTURE_IMAGE_UNITS\",value:35660,description:\" \"},t.MAX_TEXTURE_IMAGE_UNITS={name:\"MAX_TEXTURE_IMAGE_UNITS\",value:34930,description:\"Implementation dependent number of maximum texture units. At least 8.\"},t.MAX_FRAGMENT_UNIFORM_VECTORS={name:\"MAX_FRAGMENT_UNIFORM_VECTORS\",value:36349,description:\" \"},t.SHADER_TYPE={name:\"SHADER_TYPE\",value:35663,description:\" \"},t.SHADING_LANGUAGE_VERSION={name:\"SHADING_LANGUAGE_VERSION\",value:35724,description:\" \"},t.CURRENT_PROGRAM={name:\"CURRENT_PROGRAM\",value:35725,description:\" \"},t.NEVER={name:\"NEVER\",value:512,description:\"Passed to depthFunction or stencilFunction to specify depth or stencil tests will never pass. i.e. Nothing will be drawn.\"},t.ALWAYS={name:\"ALWAYS\",value:519,description:\"Passed to depthFunction or stencilFunction to specify depth or stencil tests will always pass. i.e. Pixels will be drawn in the order they are drawn.\"},t.LESS={name:\"LESS\",value:513,description:\"Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is less than the stored value.\"},t.EQUAL={name:\"EQUAL\",value:514,description:\"Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is equals to the stored value.\"},t.LEQUAL={name:\"LEQUAL\",value:515,description:\"Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is less than or equal to the stored value.\"},t.GREATER={name:\"GREATER\",value:516,description:\"Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is greater than the stored value.\"},t.GEQUAL={name:\"GEQUAL\",value:518,description:\"Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is greater than or equal to the stored value.\"},t.NOTEQUAL={name:\"NOTEQUAL\",value:517,description:\"Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is not equal to the stored value.\"},t.KEEP={name:\"KEEP\",value:7680,description:\" \"},t.REPLACE={name:\"REPLACE\",value:7681,description:\" \"},t.INCR={name:\"INCR\",value:7682,description:\" \"},t.DECR={name:\"DECR\",value:7683,description:\" \"},t.INVERT={name:\"INVERT\",value:5386,description:\" \"},t.INCR_WRAP={name:\"INCR_WRAP\",value:34055,description:\" \"},t.DECR_WRAP={name:\"DECR_WRAP\",value:34056,description:\" \"},t.NEAREST={name:\"NEAREST\",value:9728,description:\" \"},t.LINEAR={name:\"LINEAR\",value:9729,description:\" \"},t.NEAREST_MIPMAP_NEAREST={name:\"NEAREST_MIPMAP_NEAREST\",value:9984,description:\" \"},t.LINEAR_MIPMAP_NEAREST={name:\"LINEAR_MIPMAP_NEAREST\",value:9985,description:\" \"},t.NEAREST_MIPMAP_LINEAR={name:\"NEAREST_MIPMAP_LINEAR\",value:9986,description:\" \"},t.LINEAR_MIPMAP_LINEAR={name:\"LINEAR_MIPMAP_LINEAR\",value:9987,description:\" \"},t.TEXTURE_MAG_FILTER={name:\"TEXTURE_MAG_FILTER\",value:10240,description:\" \"},t.TEXTURE_MIN_FILTER={name:\"TEXTURE_MIN_FILTER\",value:10241,description:\" \"},t.TEXTURE_WRAP_S={name:\"TEXTURE_WRAP_S\",value:10242,description:\" \"},t.TEXTURE_WRAP_T={name:\"TEXTURE_WRAP_T\",value:10243,description:\" \"},t.TEXTURE_2D={name:\"TEXTURE_2D\",value:3553,description:\" \"},t.TEXTURE={name:\"TEXTURE\",value:5890,description:\" \"},t.TEXTURE_CUBE_MAP={name:\"TEXTURE_CUBE_MAP\",value:34067,description:\" \"},t.TEXTURE_BINDING_CUBE_MAP={name:\"TEXTURE_BINDING_CUBE_MAP\",value:34068,description:\" \"},t.TEXTURE_CUBE_MAP_POSITIVE_X={name:\"TEXTURE_CUBE_MAP_POSITIVE_X\",value:34069,description:\" \"},t.TEXTURE_CUBE_MAP_NEGATIVE_X={name:\"TEXTURE_CUBE_MAP_NEGATIVE_X\",value:34070,description:\" \"},t.TEXTURE_CUBE_MAP_POSITIVE_Y={name:\"TEXTURE_CUBE_MAP_POSITIVE_Y\",value:34071,description:\" \"},t.TEXTURE_CUBE_MAP_NEGATIVE_Y={name:\"TEXTURE_CUBE_MAP_NEGATIVE_Y\",value:34072,description:\" \"},t.TEXTURE_CUBE_MAP_POSITIVE_Z={name:\"TEXTURE_CUBE_MAP_POSITIVE_Z\",value:34073,description:\" \"},t.TEXTURE_CUBE_MAP_NEGATIVE_Z={name:\"TEXTURE_CUBE_MAP_NEGATIVE_Z\",value:34074,description:\" \"};t.MAX_CUBE_MAP_TEXTURE_SIZE={name:\"MAX_CUBE_MAP_TEXTURE_SIZE\",value:34076,description:\" \"},t.TEXTURE0={name:\"TEXTURE0\",value:33984,description:\"A texture unit.\"},t.TEXTURE1={name:\"TEXTURE1\",value:33985,description:\"A texture unit.\"},t.TEXTURE2={name:\"TEXTURE2\",value:33986,description:\"A texture unit.\"},t.TEXTURE3={name:\"TEXTURE3\",value:33987,description:\"A texture unit.\"},t.TEXTURE4={name:\"TEXTURE4\",value:33988,description:\"A texture unit.\"},t.TEXTURE5={name:\"TEXTURE5\",value:33989,description:\"A texture unit.\"},t.TEXTURE6={name:\"TEXTURE6\",value:33990,description:\"A texture unit.\"},t.TEXTURE7={name:\"TEXTURE7\",value:33991,description:\"A texture unit.\"},t.TEXTURE8={name:\"TEXTURE8\",value:33992,description:\"A texture unit.\"},t.TEXTURE9={name:\"TEXTURE9\",value:33993,description:\"A texture unit.\"},t.TEXTURE10={name:\"TEXTURE10\",value:33994,description:\"A texture unit.\"},t.TEXTURE11={name:\"TEXTURE11\",value:33995,description:\"A texture unit.\"},t.TEXTURE12={name:\"TEXTURE12\",value:33996,description:\"A texture unit.\"},t.TEXTURE13={name:\"TEXTURE13\",value:33997,description:\"A texture unit.\"},t.TEXTURE14={name:\"TEXTURE14\",value:33998,description:\"A texture unit.\"},t.TEXTURE15={name:\"TEXTURE15\",value:33999,description:\"A texture unit.\"},t.TEXTURE16={name:\"TEXTURE16\",value:34e3,description:\"A texture unit.\"},t.TEXTURE17={name:\"TEXTURE17\",value:34001,description:\"A texture unit.\"},t.TEXTURE18={name:\"TEXTURE18\",value:34002,description:\"A texture unit.\"},t.TEXTURE19={name:\"TEXTURE19\",value:34003,description:\"A texture unit.\"},t.TEXTURE20={name:\"TEXTURE20\",value:34004,description:\"A texture unit.\"},t.TEXTURE21={name:\"TEXTURE21\",value:34005,description:\"A texture unit.\"},t.TEXTURE22={name:\"TEXTURE22\",value:34006,description:\"A texture unit.\"},t.TEXTURE23={name:\"TEXTURE23\",value:34007,description:\"A texture unit.\"},t.TEXTURE24={name:\"TEXTURE24\",value:34008,description:\"A texture unit.\"},t.TEXTURE25={name:\"TEXTURE25\",value:34009,description:\"A texture unit.\"},t.TEXTURE26={name:\"TEXTURE26\",value:34010,description:\"A texture unit.\"},t.TEXTURE27={name:\"TEXTURE27\",value:34011,description:\"A texture unit.\"},t.TEXTURE28={name:\"TEXTURE28\",value:34012,description:\"A texture unit.\"},t.TEXTURE29={name:\"TEXTURE29\",value:34013,description:\"A texture unit.\"},t.TEXTURE30={name:\"TEXTURE30\",value:34014,description:\"A texture unit.\"},t.TEXTURE31={name:\"TEXTURE31\",value:34015,description:\"A texture unit.\"},t.ACTIVE_TEXTURE={name:\"ACTIVE_TEXTURE\",value:34016,description:\"The current active texture unit.\"},t.REPEAT={name:\"REPEAT\",value:10497,description:\" \"},t.CLAMP_TO_EDGE={name:\"CLAMP_TO_EDGE\",value:33071,description:\" \"},t.MIRRORED_REPEAT={name:\"MIRRORED_REPEAT\",value:33648,description:\" \"},t.FLOAT_VEC2={name:\"FLOAT_VEC2\",value:35664,description:\" \"},t.FLOAT_VEC3={name:\"FLOAT_VEC3\",value:35665,description:\" \"},t.FLOAT_VEC4={name:\"FLOAT_VEC4\",value:35666,description:\" \"},t.INT_VEC2={name:\"INT_VEC2\",value:35667,description:\" \"},t.INT_VEC3={name:\"INT_VEC3\",value:35668,description:\" \"},t.INT_VEC4={name:\"INT_VEC4\",value:35669,description:\" \"},t.BOOL={name:\"BOOL\",value:35670,description:\" \"},t.BOOL_VEC2={name:\"BOOL_VEC2\",value:35671,description:\" \"},t.BOOL_VEC3={name:\"BOOL_VEC3\",value:35672,description:\" \"},t.BOOL_VEC4={name:\"BOOL_VEC4\",value:35673,description:\" \"},t.FLOAT_MAT2={name:\"FLOAT_MAT2\",value:35674,description:\" \"},t.FLOAT_MAT3={name:\"FLOAT_MAT3\",value:35675,description:\" \"},t.FLOAT_MAT4={name:\"FLOAT_MAT4\",value:35676,description:\" \"},t.SAMPLER_2D={name:\"SAMPLER_2D\",value:35678,description:\" \"},t.SAMPLER_CUBE={name:\"SAMPLER_CUBE\",value:35680,description:\" \"},t.LOW_FLOAT={name:\"LOW_FLOAT\",value:36336,description:\" \"},t.MEDIUM_FLOAT={name:\"MEDIUM_FLOAT\",value:36337,description:\" \"},t.HIGH_FLOAT={name:\"HIGH_FLOAT\",value:36338,description:\" \"},t.LOW_INT={name:\"LOW_INT\",value:36339,description:\" \"},t.MEDIUM_INT={name:\"MEDIUM_INT\",value:36340,description:\" \"},t.HIGH_INT={name:\"HIGH_INT\",value:36341,description:\" \"},t.FRAMEBUFFER={name:\"FRAMEBUFFER\",value:36160,description:\" \"},t.RENDERBUFFER={name:\"RENDERBUFFER\",value:36161,description:\" \"},t.RGBA4={name:\"RGBA4\",value:32854,description:\" \"},t.RGB5_A1={name:\"RGB5_A1\",value:32855,description:\" \"},t.RGB565={name:\"RGB565\",value:36194,description:\" \"},t.DEPTH_COMPONENT16={name:\"DEPTH_COMPONENT16\",value:33189,description:\" \"},t.STENCIL_INDEX={name:\"STENCIL_INDEX\",value:6401,description:\" \"},t.STENCIL_INDEX8={name:\"STENCIL_INDEX8\",value:36168,description:\" \"},t.DEPTH_STENCIL={name:\"DEPTH_STENCIL\",value:34041,description:\" \"},t.RENDERBUFFER_WIDTH={name:\"RENDERBUFFER_WIDTH\",value:36162,description:\" \"},t.RENDERBUFFER_HEIGHT={name:\"RENDERBUFFER_HEIGHT\",value:36163,description:\" \"},t.RENDERBUFFER_INTERNAL_FORMAT={name:\"RENDERBUFFER_INTERNAL_FORMAT\",value:36164,description:\" \"},t.RENDERBUFFER_RED_SIZE={name:\"RENDERBUFFER_RED_SIZE\",value:36176,description:\" \"},t.RENDERBUFFER_GREEN_SIZE={name:\"RENDERBUFFER_GREEN_SIZE\",value:36177,description:\" \"},t.RENDERBUFFER_BLUE_SIZE={name:\"RENDERBUFFER_BLUE_SIZE\",value:36178,description:\" \"},t.RENDERBUFFER_ALPHA_SIZE={name:\"RENDERBUFFER_ALPHA_SIZE\",value:36179,description:\" \"},t.RENDERBUFFER_DEPTH_SIZE={name:\"RENDERBUFFER_DEPTH_SIZE\",value:36180,description:\" \"},t.RENDERBUFFER_STENCIL_SIZE={name:\"RENDERBUFFER_STENCIL_SIZE\",value:36181,description:\" \"},t.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE={name:\"FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE\",value:36048,description:\" \"},t.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME={name:\"FRAMEBUFFER_ATTACHMENT_OBJECT_NAME\",value:36049,description:\" \"},t.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL={name:\"FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL\",value:36050,description:\" \"},t.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE={name:\"FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE\",value:36051,description:\" \"},t.COLOR_ATTACHMENT0={name:\"COLOR_ATTACHMENT0\",value:36064,description:\" \"},t.DEPTH_ATTACHMENT={name:\"DEPTH_ATTACHMENT\",value:36096,description:\" \"},t.STENCIL_ATTACHMENT={name:\"STENCIL_ATTACHMENT\",value:36128,description:\" \"},t.DEPTH_STENCIL_ATTACHMENT={name:\"DEPTH_STENCIL_ATTACHMENT\",value:33306,description:\" \"},t.NONE={name:\"NONE\",value:0,description:\" \"},t.FRAMEBUFFER_COMPLETE={name:\"FRAMEBUFFER_COMPLETE\",value:36053,description:\" \"},t.FRAMEBUFFER_INCOMPLETE_ATTACHMENT={name:\"FRAMEBUFFER_INCOMPLETE_ATTACHMENT\",value:36054,description:\" \"},t.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT={name:\"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT\",value:36055,description:\" \"},t.FRAMEBUFFER_INCOMPLETE_DIMENSIONS={name:\"FRAMEBUFFER_INCOMPLETE_DIMENSIONS\",value:36057,description:\" \"},t.FRAMEBUFFER_UNSUPPORTED={name:\"FRAMEBUFFER_UNSUPPORTED\",value:36061,description:\" \"},t.FRAMEBUFFER_BINDING={name:\"FRAMEBUFFER_BINDING\",value:36006,description:\" \"},t.RENDERBUFFER_BINDING={name:\"RENDERBUFFER_BINDING\",value:36007,description:\" \"},t.MAX_RENDERBUFFER_SIZE={name:\"MAX_RENDERBUFFER_SIZE\",value:34024,description:\" \"},t.INVALID_FRAMEBUFFER_OPERATION={name:\"INVALID_FRAMEBUFFER_OPERATION\",value:1286,description:\" \"},t.UNPACK_FLIP_Y_WEBGL={name:\"UNPACK_FLIP_Y_WEBGL\",value:37440,description:\" \"},t.UNPACK_PREMULTIPLY_ALPHA_WEBGL={name:\"UNPACK_PREMULTIPLY_ALPHA_WEBGL\",value:37441,description:\" \"},t.UNPACK_COLORSPACE_CONVERSION_WEBGL={name:\"UNPACK_COLORSPACE_CONVERSION_WEBGL\",value:37443,description:\" \"},t.READ_BUFFER={name:\"READ_BUFFER\",value:3074,description:\" \"},t.UNPACK_ROW_LENGTH={name:\"UNPACK_ROW_LENGTH\",value:3314,description:\" \"},t.UNPACK_SKIP_ROWS={name:\"UNPACK_SKIP_ROWS\",value:3315,description:\" \"},t.UNPACK_SKIP_PIXELS={name:\"UNPACK_SKIP_PIXELS\",value:3316,description:\" \"},t.PACK_ROW_LENGTH={name:\"PACK_ROW_LENGTH\",value:3330,description:\" \"},t.PACK_SKIP_ROWS={name:\"PACK_SKIP_ROWS\",value:3331,description:\" \"},t.PACK_SKIP_PIXELS={name:\"PACK_SKIP_PIXELS\",value:3332,description:\" \"},t.TEXTURE_BINDING_3D={name:\"TEXTURE_BINDING_3D\",value:32874,description:\" \"},t.UNPACK_SKIP_IMAGES={name:\"UNPACK_SKIP_IMAGES\",value:32877,description:\" \"},t.UNPACK_IMAGE_HEIGHT={name:\"UNPACK_IMAGE_HEIGHT\",value:32878,description:\" \"},t.MAX_3D_TEXTURE_SIZE={name:\"MAX_3D_TEXTURE_SIZE\",value:32883,description:\" \"},t.MAX_ELEMENTS_VERTICES={name:\"MAX_ELEMENTS_VERTICES\",value:33e3,description:\" \"},t.MAX_ELEMENTS_INDICES={name:\"MAX_ELEMENTS_INDICES\",value:33001,description:\" \"},t.MAX_TEXTURE_LOD_BIAS={name:\"MAX_TEXTURE_LOD_BIAS\",value:34045,description:\" \"},t.MAX_FRAGMENT_UNIFORM_COMPONENTS={name:\"MAX_FRAGMENT_UNIFORM_COMPONENTS\",value:35657,description:\" \"},t.MAX_VERTEX_UNIFORM_COMPONENTS={name:\"MAX_VERTEX_UNIFORM_COMPONENTS\",value:35658,description:\" \"},t.MAX_ARRAY_TEXTURE_LAYERS={name:\"MAX_ARRAY_TEXTURE_LAYERS\",value:35071,description:\" \"},t.MIN_PROGRAM_TEXEL_OFFSET={name:\"MIN_PROGRAM_TEXEL_OFFSET\",value:35076,description:\" \"},t.MAX_PROGRAM_TEXEL_OFFSET={name:\"MAX_PROGRAM_TEXEL_OFFSET\",value:35077,description:\" \"},t.MAX_VARYING_COMPONENTS={name:\"MAX_VARYING_COMPONENTS\",value:35659,description:\" \"},t.FRAGMENT_SHADER_DERIVATIVE_HINT={name:\"FRAGMENT_SHADER_DERIVATIVE_HINT\",value:35723,description:\" \"},t.RASTERIZER_DISCARD={name:\"RASTERIZER_DISCARD\",value:35977,description:\" \"},t.VERTEX_ARRAY_BINDING={name:\"VERTEX_ARRAY_BINDING\",value:34229,description:\" \"},t.MAX_VERTEX_OUTPUT_COMPONENTS={name:\"MAX_VERTEX_OUTPUT_COMPONENTS\",value:37154,description:\" \"},t.MAX_FRAGMENT_INPUT_COMPONENTS={name:\"MAX_FRAGMENT_INPUT_COMPONENTS\",value:37157,description:\" \"},t.MAX_SERVER_WAIT_TIMEOUT={name:\"MAX_SERVER_WAIT_TIMEOUT\",value:37137,description:\" \"},t.MAX_ELEMENT_INDEX={name:\"MAX_ELEMENT_INDEX\",value:36203,description:\" \"},t.RED={name:\"RED\",value:6403,description:\" \"},t.RGB8={name:\"RGB8\",value:32849,description:\" \"},t.RGBA8={name:\"RGBA8\",value:32856,description:\" \"},t.RGB10_A2={name:\"RGB10_A2\",value:32857,description:\" \"},t.TEXTURE_3D={name:\"TEXTURE_3D\",value:32879,description:\" \"},t.TEXTURE_WRAP_R={name:\"TEXTURE_WRAP_R\",value:32882,description:\" \"},t.TEXTURE_MIN_LOD={name:\"TEXTURE_MIN_LOD\",value:33082,description:\" \"},t.TEXTURE_MAX_LOD={name:\"TEXTURE_MAX_LOD\",value:33083,description:\" \"},t.TEXTURE_BASE_LEVEL={name:\"TEXTURE_BASE_LEVEL\",value:33084,description:\" \"},t.TEXTURE_MAX_LEVEL={name:\"TEXTURE_MAX_LEVEL\",value:33085,description:\" \"},t.TEXTURE_COMPARE_MODE={name:\"TEXTURE_COMPARE_MODE\",value:34892,description:\" \"},t.TEXTURE_COMPARE_FUNC={name:\"TEXTURE_COMPARE_FUNC\",value:34893,description:\" \"},t.SRGB={name:\"SRGB\",value:35904,description:\" \"},t.SRGB8={name:\"SRGB8\",value:35905,description:\" \"},t.SRGB8_ALPHA8={name:\"SRGB8_ALPHA8\",value:35907,description:\" \"},t.COMPARE_REF_TO_TEXTURE={name:\"COMPARE_REF_TO_TEXTURE\",value:34894,description:\" \"},t.RGBA32F={name:\"RGBA32F\",value:34836,description:\" \"},t.RGB32F={name:\"RGB32F\",value:34837,description:\" \"},t.RGBA16F={name:\"RGBA16F\",value:34842,description:\" \"},t.RGB16F={name:\"RGB16F\",value:34843,description:\" \"},t.TEXTURE_2D_ARRAY={name:\"TEXTURE_2D_ARRAY\",value:35866,description:\" \"},t.TEXTURE_BINDING_2D_ARRAY={name:\"TEXTURE_BINDING_2D_ARRAY\",value:35869,description:\" \"},t.R11F_G11F_B10F={name:\"R11F_G11F_B10F\",value:35898,description:\" \"},t.RGB9_E5={name:\"RGB9_E5\",value:35901,description:\" \"},t.RGBA32UI={name:\"RGBA32UI\",value:36208,description:\" \"},t.RGB32UI={name:\"RGB32UI\",value:36209,description:\" \"},t.RGBA16UI={name:\"RGBA16UI\",value:36214,description:\" \"},t.RGB16UI={name:\"RGB16UI\",value:36215,description:\" \"},t.RGBA8UI={name:\"RGBA8UI\",value:36220,description:\" \"},t.RGB8UI={name:\"RGB8UI\",value:36221,description:\" \"},t.RGBA32I={name:\"RGBA32I\",value:36226,description:\" \"},t.RGB32I={name:\"RGB32I\",value:36227,description:\" \"},t.RGBA16I={name:\"RGBA16I\",value:36232,description:\" \"},t.RGB16I={name:\"RGB16I\",value:36233,description:\" \"},t.RGBA8I={name:\"RGBA8I\",value:36238,description:\" \"},t.RGB8I={name:\"RGB8I\",value:36239,description:\" \"},t.RED_INTEGER={name:\"RED_INTEGER\",value:36244,description:\" \"},t.RGB_INTEGER={name:\"RGB_INTEGER\",value:36248,description:\" \"},t.RGBA_INTEGER={name:\"RGBA_INTEGER\",value:36249,description:\" \"},t.R8={name:\"R8\",value:33321,description:\" \"},t.RG8={name:\"RG8\",value:33323,description:\" \"},t.R16F={name:\"R16F\",value:33325,description:\" \"},t.R32F={name:\"R32F\",value:33326,description:\" \"},t.RG16F={name:\"RG16F\",value:33327,description:\" \"},t.RG32F={name:\"RG32F\",value:33328,description:\" \"},t.R8I={name:\"R8I\",value:33329,description:\" \"},t.R8UI={name:\"R8UI\",value:33330,description:\" \"},t.R16I={name:\"R16I\",value:33331,description:\" \"},t.R16UI={name:\"R16UI\",value:33332,description:\" \"},t.R32I={name:\"R32I\",value:33333,description:\" \"},t.R32UI={name:\"R32UI\",value:33334,description:\" \"},t.RG8I={name:\"RG8I\",value:33335,description:\" \"},t.RG8UI={name:\"RG8UI\",value:33336,description:\" \"},t.RG16I={name:\"RG16I\",value:33337,description:\" \"},t.RG16UI={name:\"RG16UI\",value:33338,description:\" \"},t.RG32I={name:\"RG32I\",value:33339,description:\" \"},t.RG32UI={name:\"RG32UI\",value:33340,description:\" \"},t.R8_SNORM={name:\"R8_SNORM\",value:36756,description:\" \"},t.RG8_SNORM={name:\"RG8_SNORM\",value:36757,description:\" \"},t.RGB8_SNORM={name:\"RGB8_SNORM\",value:36758,description:\" \"},t.RGBA8_SNORM={name:\"RGBA8_SNORM\",value:36759,description:\" \"},t.RGB10_A2UI={name:\"RGB10_A2UI\",value:36975,description:\" \"},t.TEXTURE_IMMUTABLE_FORMAT={name:\"TEXTURE_IMMUTABLE_FORMAT\",value:37167,description:\" \"},t.TEXTURE_IMMUTABLE_LEVELS={name:\"TEXTURE_IMMUTABLE_LEVELS\",value:33503,description:\" \"},t.UNSIGNED_INT_2_10_10_10_REV={name:\"UNSIGNED_INT_2_10_10_10_REV\",value:33640,description:\" \"},t.UNSIGNED_INT_10F_11F_11F_REV={name:\"UNSIGNED_INT_10F_11F_11F_REV\",value:35899,description:\" \"},t.UNSIGNED_INT_5_9_9_9_REV={name:\"UNSIGNED_INT_5_9_9_9_REV\",value:35902,description:\" \"},t.FLOAT_32_UNSIGNED_INT_24_8_REV={name:\"FLOAT_32_UNSIGNED_INT_24_8_REV\",value:36269,description:\" \"},t.UNSIGNED_INT_24_8={name:\"UNSIGNED_INT_24_8\",value:34042,description:\" \"},t.HALF_FLOAT={name:\"HALF_FLOAT\",value:5131,description:\" \"},t.RG={name:\"RG\",value:33319,description:\" \"},t.RG_INTEGER={name:\"RG_INTEGER\",value:33320,description:\" \"},t.INT_2_10_10_10_REV={name:\"INT_2_10_10_10_REV\",value:36255,description:\" \"},t.CURRENT_QUERY={name:\"CURRENT_QUERY\",value:34917,description:\" \"},t.QUERY_RESULT={name:\"QUERY_RESULT\",value:34918,description:\" \"},t.QUERY_RESULT_AVAILABLE={name:\"QUERY_RESULT_AVAILABLE\",value:34919,description:\" \"};t.ANY_SAMPLES_PASSED={name:\"ANY_SAMPLES_PASSED\",value:35887,description:\" \"},t.ANY_SAMPLES_PASSED_CONSERVATIVE={name:\"ANY_SAMPLES_PASSED_CONSERVATIVE\",value:36202,description:\" \"},t.MAX_DRAW_BUFFERS={name:\"MAX_DRAW_BUFFERS\",value:34852,description:\" \"},t.DRAW_BUFFER0={name:\"DRAW_BUFFER0\",value:34853,description:\" \"},t.DRAW_BUFFER1={name:\"DRAW_BUFFER1\",value:34854,description:\" \"},t.DRAW_BUFFER2={name:\"DRAW_BUFFER2\",value:34855,description:\" \"},t.DRAW_BUFFER3={name:\"DRAW_BUFFER3\",value:34856,description:\" \"},t.DRAW_BUFFER4={name:\"DRAW_BUFFER4\",value:34857,description:\" \"},t.DRAW_BUFFER5={name:\"DRAW_BUFFER5\",value:34858,description:\" \"},t.DRAW_BUFFER6={name:\"DRAW_BUFFER6\",value:34859,description:\" \"},t.DRAW_BUFFER7={name:\"DRAW_BUFFER7\",value:34860,description:\" \"},t.DRAW_BUFFER8={name:\"DRAW_BUFFER8\",value:34861,description:\" \"},t.DRAW_BUFFER9={name:\"DRAW_BUFFER9\",value:34862,description:\" \"},t.DRAW_BUFFER10={name:\"DRAW_BUFFER10\",value:34863,description:\" \"},t.DRAW_BUFFER11={name:\"DRAW_BUFFER11\",value:34864,description:\" \"},t.DRAW_BUFFER12={name:\"DRAW_BUFFER12\",value:34865,description:\" \"},t.DRAW_BUFFER13={name:\"DRAW_BUFFER13\",value:34866,description:\" \"},t.DRAW_BUFFER14={name:\"DRAW_BUFFER14\",value:34867,description:\" \"},t.DRAW_BUFFER15={name:\"DRAW_BUFFER15\",value:34868,description:\" \"},t.MAX_COLOR_ATTACHMENTS={name:\"MAX_COLOR_ATTACHMENTS\",value:36063,description:\" \"},t.COLOR_ATTACHMENT1={name:\"COLOR_ATTACHMENT1\",value:36065,description:\" \"},t.COLOR_ATTACHMENT2={name:\"COLOR_ATTACHMENT2\",value:36066,description:\" \"},t.COLOR_ATTACHMENT3={name:\"COLOR_ATTACHMENT3\",value:36067,description:\" \"},t.COLOR_ATTACHMENT4={name:\"COLOR_ATTACHMENT4\",value:36068,description:\" \"},t.COLOR_ATTACHMENT5={name:\"COLOR_ATTACHMENT5\",value:36069,description:\" \"},t.COLOR_ATTACHMENT6={name:\"COLOR_ATTACHMENT6\",value:36070,description:\" \"},t.COLOR_ATTACHMENT7={name:\"COLOR_ATTACHMENT7\",value:36071,description:\" \"},t.COLOR_ATTACHMENT8={name:\"COLOR_ATTACHMENT8\",value:36072,description:\" \"},t.COLOR_ATTACHMENT9={name:\"COLOR_ATTACHMENT9\",value:36073,description:\" \"},t.COLOR_ATTACHMENT10={name:\"COLOR_ATTACHMENT10\",value:36074,description:\" \"},t.COLOR_ATTACHMENT11={name:\"COLOR_ATTACHMENT11\",value:36075,description:\" \"},t.COLOR_ATTACHMENT12={name:\"COLOR_ATTACHMENT12\",value:36076,description:\" \"},t.COLOR_ATTACHMENT13={name:\"COLOR_ATTACHMENT13\",value:36077,description:\" \"},t.COLOR_ATTACHMENT14={name:\"COLOR_ATTACHMENT14\",value:36078,description:\" \"},t.COLOR_ATTACHMENT15={name:\"COLOR_ATTACHMENT15\",value:36079,description:\" \"},t.SAMPLER_3D={name:\"SAMPLER_3D\",value:35679,description:\" \"},t.SAMPLER_2D_SHADOW={name:\"SAMPLER_2D_SHADOW\",value:35682,description:\" \"},t.SAMPLER_2D_ARRAY={name:\"SAMPLER_2D_ARRAY\",value:36289,description:\" \"},t.SAMPLER_2D_ARRAY_SHADOW={name:\"SAMPLER_2D_ARRAY_SHADOW\",value:36292,description:\" \"},t.SAMPLER_CUBE_SHADOW={name:\"SAMPLER_CUBE_SHADOW\",value:36293,description:\" \"},t.INT_SAMPLER_2D={name:\"INT_SAMPLER_2D\",value:36298,description:\" \"},t.INT_SAMPLER_3D={name:\"INT_SAMPLER_3D\",value:36299,description:\" \"},t.INT_SAMPLER_CUBE={name:\"INT_SAMPLER_CUBE\",value:36300,description:\" \"},t.INT_SAMPLER_2D_ARRAY={name:\"INT_SAMPLER_2D_ARRAY\",value:36303,description:\" \"},t.UNSIGNED_INT_SAMPLER_2D={name:\"UNSIGNED_INT_SAMPLER_2D\",value:36306,description:\" \"},t.UNSIGNED_INT_SAMPLER_3D={name:\"UNSIGNED_INT_SAMPLER_3D\",value:36307,description:\" \"},t.UNSIGNED_INT_SAMPLER_CUBE={name:\"UNSIGNED_INT_SAMPLER_CUBE\",value:36308,description:\" \"},t.UNSIGNED_INT_SAMPLER_2D_ARRAY={name:\"UNSIGNED_INT_SAMPLER_2D_ARRAY\",value:36311,description:\" \"},t.MAX_SAMPLES={name:\"MAX_SAMPLES\",value:36183,description:\" \"},t.SAMPLER_BINDING={name:\"SAMPLER_BINDING\",value:35097,description:\" \"},t.PIXEL_PACK_BUFFER={name:\"PIXEL_PACK_BUFFER\",value:35051,description:\" \"},t.PIXEL_UNPACK_BUFFER={name:\"PIXEL_UNPACK_BUFFER\",value:35052,description:\" \"},t.PIXEL_PACK_BUFFER_BINDING={name:\"PIXEL_PACK_BUFFER_BINDING\",value:35053,description:\" \"},t.PIXEL_UNPACK_BUFFER_BINDING={name:\"PIXEL_UNPACK_BUFFER_BINDING\",value:35055,description:\" \"},t.COPY_READ_BUFFER={name:\"COPY_READ_BUFFER\",value:36662,description:\" \"},t.COPY_WRITE_BUFFER={name:\"COPY_WRITE_BUFFER\",value:36663,description:\" \"},t.COPY_READ_BUFFER_BINDING={name:\"COPY_READ_BUFFER_BINDING\",value:36662,description:\" \"},t.COPY_WRITE_BUFFER_BINDING={name:\"COPY_WRITE_BUFFER_BINDING\",value:36663,description:\" \"},t.FLOAT_MAT2x3={name:\"FLOAT_MAT2x3\",value:35685,description:\" \"},t.FLOAT_MAT2x4={name:\"FLOAT_MAT2x4\",value:35686,description:\" \"},t.FLOAT_MAT3x2={name:\"FLOAT_MAT3x2\",value:35687,description:\" \"},t.FLOAT_MAT3x4={name:\"FLOAT_MAT3x4\",value:35688,description:\" \"},t.FLOAT_MAT4x2={name:\"FLOAT_MAT4x2\",value:35689,description:\" \"},t.FLOAT_MAT4x3={name:\"FLOAT_MAT4x3\",value:35690,description:\" \"},t.UNSIGNED_INT_VEC2={name:\"UNSIGNED_INT_VEC2\",value:36294,description:\" \"},t.UNSIGNED_INT_VEC3={name:\"UNSIGNED_INT_VEC3\",value:36295,description:\" \"},t.UNSIGNED_INT_VEC4={name:\"UNSIGNED_INT_VEC4\",value:36296,description:\" \"},t.UNSIGNED_NORMALIZED={name:\"UNSIGNED_NORMALIZED\",value:35863,description:\" \"},t.SIGNED_NORMALIZED={name:\"SIGNED_NORMALIZED\",value:36764,description:\" \"},t.VERTEX_ATTRIB_ARRAY_INTEGER={name:\"VERTEX_ATTRIB_ARRAY_INTEGER\",value:35069,description:\" \"},t.VERTEX_ATTRIB_ARRAY_DIVISOR={name:\"VERTEX_ATTRIB_ARRAY_DIVISOR\",value:35070,description:\" \"},t.TRANSFORM_FEEDBACK_BUFFER_MODE={name:\"TRANSFORM_FEEDBACK_BUFFER_MODE\",value:35967,description:\" \"},t.MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS={name:\"MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS\",value:35968,description:\" \"},t.TRANSFORM_FEEDBACK_VARYINGS={name:\"TRANSFORM_FEEDBACK_VARYINGS\",value:35971,description:\" \"},t.TRANSFORM_FEEDBACK_BUFFER_START={name:\"TRANSFORM_FEEDBACK_BUFFER_START\",value:35972,description:\" \"},t.TRANSFORM_FEEDBACK_BUFFER_SIZE={name:\"TRANSFORM_FEEDBACK_BUFFER_SIZE\",value:35973,description:\" \"},t.TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN={name:\"TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN\",value:35976,description:\" \"},t.MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS={name:\"MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS\",value:35978,description:\" \"},t.MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS={name:\"MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS\",value:35979,description:\" \"},t.INTERLEAVED_ATTRIBS={name:\"INTERLEAVED_ATTRIBS\",value:35980,description:\" \"},t.SEPARATE_ATTRIBS={name:\"SEPARATE_ATTRIBS\",value:35981,description:\" \"},t.TRANSFORM_FEEDBACK_BUFFER={name:\"TRANSFORM_FEEDBACK_BUFFER\",value:35982,description:\" \"},t.TRANSFORM_FEEDBACK_BUFFER_BINDING={name:\"TRANSFORM_FEEDBACK_BUFFER_BINDING\",value:35983,description:\" \"},t.TRANSFORM_FEEDBACK={name:\"TRANSFORM_FEEDBACK\",value:36386,description:\" \"},t.TRANSFORM_FEEDBACK_PAUSED={name:\"TRANSFORM_FEEDBACK_PAUSED\",value:36387,description:\" \"},t.TRANSFORM_FEEDBACK_ACTIVE={name:\"TRANSFORM_FEEDBACK_ACTIVE\",value:36388,description:\" \"},t.TRANSFORM_FEEDBACK_BINDING={name:\"TRANSFORM_FEEDBACK_BINDING\",value:36389,description:\" \"},t.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING={name:\"FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING\",value:33296,description:\" \"},t.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE={name:\"FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE\",value:33297,description:\" \"},t.FRAMEBUFFER_ATTACHMENT_RED_SIZE={name:\"FRAMEBUFFER_ATTACHMENT_RED_SIZE\",value:33298,description:\" \"},t.FRAMEBUFFER_ATTACHMENT_GREEN_SIZE={name:\"FRAMEBUFFER_ATTACHMENT_GREEN_SIZE\",value:33299,description:\" \"},t.FRAMEBUFFER_ATTACHMENT_BLUE_SIZE={name:\"FRAMEBUFFER_ATTACHMENT_BLUE_SIZE\",value:33300,description:\" \"},t.FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE={name:\"FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE\",value:33301,description:\" \"},t.FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE={name:\"FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE\",value:33302,description:\" \"},t.FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE={name:\"FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE\",value:33303,description:\" \"},t.FRAMEBUFFER_DEFAULT={name:\"FRAMEBUFFER_DEFAULT\",value:33304,description:\" \"},t.DEPTH24_STENCIL8={name:\"DEPTH24_STENCIL8\",value:35056,description:\" \"},t.DRAW_FRAMEBUFFER_BINDING={name:\"DRAW_FRAMEBUFFER_BINDING\",value:36006,description:\" \"},t.READ_FRAMEBUFFER={name:\"READ_FRAMEBUFFER\",value:36008,description:\" \"},t.DRAW_FRAMEBUFFER={name:\"DRAW_FRAMEBUFFER\",value:36009,description:\" \"},t.READ_FRAMEBUFFER_BINDING={name:\"READ_FRAMEBUFFER_BINDING\",value:36010,description:\" \"},t.RENDERBUFFER_SAMPLES={name:\"RENDERBUFFER_SAMPLES\",value:36011,description:\" \"},t.FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER={name:\"FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER\",value:36052,description:\" \"},t.FRAMEBUFFER_INCOMPLETE_MULTISAMPLE={name:\"FRAMEBUFFER_INCOMPLETE_MULTISAMPLE\",value:36182,description:\" \"},t.UNIFORM_BUFFER={name:\"UNIFORM_BUFFER\",value:35345,description:\" \"},t.UNIFORM_BUFFER_BINDING={name:\"UNIFORM_BUFFER_BINDING\",value:35368,description:\" \"},t.UNIFORM_BUFFER_START={name:\"UNIFORM_BUFFER_START\",value:35369,description:\" \"},t.UNIFORM_BUFFER_SIZE={name:\"UNIFORM_BUFFER_SIZE\",value:35370,description:\" \"},t.MAX_VERTEX_UNIFORM_BLOCKS={name:\"MAX_VERTEX_UNIFORM_BLOCKS\",value:35371,description:\" \"},t.MAX_FRAGMENT_UNIFORM_BLOCKS={name:\"MAX_FRAGMENT_UNIFORM_BLOCKS\",value:35373,description:\" \"},t.MAX_COMBINED_UNIFORM_BLOCKS={name:\"MAX_COMBINED_UNIFORM_BLOCKS\",value:35374,description:\" \"},t.MAX_UNIFORM_BUFFER_BINDINGS={name:\"MAX_UNIFORM_BUFFER_BINDINGS\",value:35375,description:\" \"},t.MAX_UNIFORM_BLOCK_SIZE={name:\"MAX_UNIFORM_BLOCK_SIZE\",value:35376,description:\" \"},t.MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS={name:\"MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS\",value:35377,description:\" \"},t.MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS={name:\"MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS\",value:35379,description:\" \"},t.UNIFORM_BUFFER_OFFSET_ALIGNMENT={name:\"UNIFORM_BUFFER_OFFSET_ALIGNMENT\",value:35380,description:\" \"},t.ACTIVE_UNIFORM_BLOCKS={name:\"ACTIVE_UNIFORM_BLOCKS\",value:35382,description:\" \"},t.UNIFORM_TYPE={name:\"UNIFORM_TYPE\",value:35383,description:\" \"},t.UNIFORM_SIZE={name:\"UNIFORM_SIZE\",value:35384,description:\" \"},t.UNIFORM_BLOCK_INDEX={name:\"UNIFORM_BLOCK_INDEX\",value:35386,description:\" \"},t.UNIFORM_OFFSET={name:\"UNIFORM_OFFSET\",value:35387,description:\" \"},t.UNIFORM_ARRAY_STRIDE={name:\"UNIFORM_ARRAY_STRIDE\",value:35388,description:\" \"},t.UNIFORM_MATRIX_STRIDE={name:\"UNIFORM_MATRIX_STRIDE\",value:35389,description:\" \"},t.UNIFORM_IS_ROW_MAJOR={name:\"UNIFORM_IS_ROW_MAJOR\",value:35390,description:\" \"},t.UNIFORM_BLOCK_BINDING={name:\"UNIFORM_BLOCK_BINDING\",value:35391,description:\" \"},t.UNIFORM_BLOCK_DATA_SIZE={name:\"UNIFORM_BLOCK_DATA_SIZE\",value:35392,description:\" \"},t.UNIFORM_BLOCK_ACTIVE_UNIFORMS={name:\"UNIFORM_BLOCK_ACTIVE_UNIFORMS\",value:35394,description:\" \"},t.UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES={name:\"UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES\",value:35395,description:\" \"},t.UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER={name:\"UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER\",value:35396,description:\" \"},t.UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER={name:\"UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER\",value:35398,description:\" \"},t.OBJECT_TYPE={name:\"OBJECT_TYPE\",value:37138,description:\" \"},t.SYNC_CONDITION={name:\"SYNC_CONDITION\",value:37139,description:\" \"},t.SYNC_STATUS={name:\"SYNC_STATUS\",value:37140,description:\" \"},t.SYNC_FLAGS={name:\"SYNC_FLAGS\",value:37141,description:\" \"},t.SYNC_FENCE={name:\"SYNC_FENCE\",value:37142,description:\" \"},t.SYNC_GPU_COMMANDS_COMPLETE={name:\"SYNC_GPU_COMMANDS_COMPLETE\",value:37143,description:\" \"},t.UNSIGNALED={name:\"UNSIGNALED\",value:37144,description:\" \"},t.SIGNALED={name:\"SIGNALED\",value:37145,description:\" \"},t.ALREADY_SIGNALED={name:\"ALREADY_SIGNALED\",value:37146,description:\" \"},t.TIMEOUT_EXPIRED={name:\"TIMEOUT_EXPIRED\",value:37147,description:\" \"},t.CONDITION_SATISFIED={name:\"CONDITION_SATISFIED\",value:37148,description:\" \"},t.WAIT_FAILED={name:\"WAIT_FAILED\",value:37149,description:\" \"},t.SYNC_FLUSH_COMMANDS_BIT={name:\"SYNC_FLUSH_COMMANDS_BIT\",value:1,description:\" \"},t.COLOR={name:\"COLOR\",value:6144,description:\" \"},t.DEPTH={name:\"DEPTH\",value:6145,description:\" \"},t.STENCIL={name:\"STENCIL\",value:6146,description:\" \"},t.MIN={name:\"MIN\",value:32775,description:\" \"},t.MAX={name:\"MAX\",value:32776,description:\" \"},t.DEPTH_COMPONENT24={name:\"DEPTH_COMPONENT24\",value:33190,description:\" \"},t.STREAM_READ={name:\"STREAM_READ\",value:35041,description:\" \"},t.STREAM_COPY={name:\"STREAM_COPY\",value:35042,description:\" \"},t.STATIC_READ={name:\"STATIC_READ\",value:35045,description:\" \"},t.STATIC_COPY={name:\"STATIC_COPY\",value:35046,description:\" \"},t.DYNAMIC_READ={name:\"DYNAMIC_READ\",value:35049,description:\" \"},t.DYNAMIC_COPY={name:\"DYNAMIC_COPY\",value:35050,description:\" \"},t.DEPTH_COMPONENT32F={name:\"DEPTH_COMPONENT32F\",value:36012,description:\" \"},t.DEPTH32F_STENCIL8={name:\"DEPTH32F_STENCIL8\",value:36013,description:\" \"},t.INVALID_INDEX={name:\"INVALID_INDEX\",value:4294967295,description:\" \"},t.TIMEOUT_IGNORED={name:\"TIMEOUT_IGNORED\",value:-1,description:\" \"},t.MAX_CLIENT_WAIT_TIMEOUT_WEBGL={name:\"MAX_CLIENT_WAIT_TIMEOUT_WEBGL\",value:37447,description:\" \"},t.VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE={name:\"VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE\",value:35070,description:\"Describes the frequency divisor used for instanced rendering.\",extensionName:\"ANGLE_instanced_arrays\"},t.UNMASKED_VENDOR_WEBGL={name:\"UNMASKED_VENDOR_WEBGL\",value:37445,description:\"Passed to getParameter to get the vendor string of the graphics driver.\",extensionName:\"ANGLE_instanced_arrays\"},t.UNMASKED_RENDERER_WEBGL={name:\"UNMASKED_RENDERER_WEBGL\",value:37446,description:\"Passed to getParameter to get the renderer string of the graphics driver.\",extensionName:\"WEBGL_debug_renderer_info\"},t.MAX_TEXTURE_MAX_ANISOTROPY_EXT={name:\"MAX_TEXTURE_MAX_ANISOTROPY_EXT\",value:34047,description:\"Returns the maximum available anisotropy.\",extensionName:\"EXT_texture_filter_anisotropic\"},t.TEXTURE_MAX_ANISOTROPY_EXT={name:\"TEXTURE_MAX_ANISOTROPY_EXT\",value:34046,description:\"Passed to texParameter to set the desired maximum anisotropy for a texture.\",extensionName:\"EXT_texture_filter_anisotropic\"},t.COMPRESSED_RGB_S3TC_DXT1_EXT={name:\"COMPRESSED_RGB_S3TC_DXT1_EXT\",value:33776,description:\"A DXT1-compressed image in an RGB image format.\",extensionName:\"WEBGL_compressed_texture_s3tc\"},t.COMPRESSED_RGBA_S3TC_DXT1_EXT={name:\"COMPRESSED_RGBA_S3TC_DXT1_EXT\",value:33777,description:\"A DXT1-compressed image in an RGB image format with a simple on/off alpha value.\",extensionName:\"WEBGL_compressed_texture_s3tc\"},t.COMPRESSED_RGBA_S3TC_DXT3_EXT={name:\"COMPRESSED_RGBA_S3TC_DXT3_EXT\",value:33778,description:\"A DXT3-compressed image in an RGBA image format. Compared to a 32-bit RGBA texture, it offers 4:1 compression.\",extensionName:\"WEBGL_compressed_texture_s3tc\"},t.COMPRESSED_RGBA_S3TC_DXT5_EXT={name:\"COMPRESSED_RGBA_S3TC_DXT5_EXT\",value:33779,description:\"A DXT5-compressed image in an RGBA image format. It also provides a 4:1 compression, but differs to the DXT3 compression in how the alpha compression is done.\",extensionName:\"WEBGL_compressed_texture_s3tc\"},t.COMPRESSED_R11_EAC={name:\"COMPRESSED_R11_EAC\",value:37488,description:\"One-channel (red) unsigned format compression.\",extensionName:\"WEBGL_compressed_texture_etc\"},t.COMPRESSED_SIGNED_R11_EAC={name:\"COMPRESSED_SIGNED_R11_EAC\",value:37489,description:\"One-channel (red) signed format compression.\",extensionName:\"WEBGL_compressed_texture_etc\"},t.COMPRESSED_RG11_EAC={name:\"COMPRESSED_RG11_EAC\",value:37490,description:\"Two-channel (red and green) unsigned format compression.\",extensionName:\"WEBGL_compressed_texture_etc\"},t.COMPRESSED_SIGNED_RG11_EAC={name:\"COMPRESSED_SIGNED_RG11_EAC\",value:37491,description:\"Two-channel (red and green) signed format compression.\",extensionName:\"WEBGL_compressed_texture_etc\"},t.COMPRESSED_RGB8_ETC2={name:\"COMPRESSED_RGB8_ETC2\",value:37492,description:\"Compresses RBG8 data with no alpha channel.\",extensionName:\"WEBGL_compressed_texture_etc\"},t.COMPRESSED_RGBA8_ETC2_EAC={name:\"COMPRESSED_RGBA8_ETC2_EAC\",value:37493,description:\"Compresses RGBA8 data. The RGB part is encoded the same as RGB_ETC2, but the alpha part is encoded separately.\",extensionName:\"WEBGL_compressed_texture_etc\"},t.COMPRESSED_SRGB8_ETC2={name:\"COMPRESSED_SRGB8_ETC2\",value:37494,description:\"Compresses sRBG8 data with no alpha channel.\",extensionName:\"WEBGL_compressed_texture_etc\"},t.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC={name:\"COMPRESSED_SRGB8_ALPHA8_ETC2_EAC\",value:37495,description:\"Compresses sRGBA8 data. The sRGB part is encoded the same as SRGB_ETC2, but the alpha part is encoded separately.\",extensionName:\"WEBGL_compressed_texture_etc\"},t.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2={name:\"COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2\",value:37496,description:\"Similar to RGB8_ETC, but with ability to punch through the alpha channel, which means to make it completely opaque or transparent.\",extensionName:\"WEBGL_compressed_texture_etc\"},t.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2={name:\"COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2\",value:37497,description:\"Similar to SRGB8_ETC, but with ability to punch through the alpha channel, which means to make it completely opaque or transparent.\",extensionName:\"WEBGL_compressed_texture_etc\"},t.COMPRESSED_RGB_PVRTC_4BPPV1_IMG={name:\"COMPRESSED_RGB_PVRTC_4BPPV1_IMG\",value:35840,description:\"RGB compression in 4-bit mode. One block for each 4×4 pixels.\",extensionName:\"WEBGL_compressed_texture_pvrtc\"},t.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG={name:\"COMPRESSED_RGBA_PVRTC_4BPPV1_IMG\",value:35842,description:\"RGBA compression in 4-bit mode. One block for each 4×4 pixels.\",extensionName:\"WEBGL_compressed_texture_pvrtc\"},t.COMPRESSED_RGB_PVRTC_2BPPV1_IMG={name:\"COMPRESSED_RGB_PVRTC_2BPPV1_IMG\",value:35841,description:\"RGB compression in 2-bit mode. One block for each 8×4 pixels.\",extensionName:\"WEBGL_compressed_texture_pvrtc\"},t.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG={name:\"COMPRESSED_RGBA_PVRTC_2BPPV1_IMG\",value:35843,description:\"RGBA compression in 2-bit mode. One block for each 8×4 pixe\",extensionName:\"WEBGL_compressed_texture_pvrtc\"},t.COMPRESSED_RGB_ETC1_WEBGL={name:\"COMPRESSED_RGB_ETC1_WEBGL\",value:36196,description:\"Compresses 24-bit RGB data with no alpha channel.\",extensionName:\"WEBGL_compressed_texture_etc1\"},t.COMPRESSED_RGB_ATC_WEBGL={name:\"COMPRESSED_RGB_ATC_WEBGL\",value:35986,description:\"Compresses RGB textures with no alpha channel.\",extensionName:\"WEBGL_compressed_texture_atc\"},t.COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL={name:\"COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL\",value:35986,description:\"Compresses RGBA textures using explicit alpha encoding (useful when alpha transitions are sharp).\",extensionName:\"WEBGL_compressed_texture_atc\"},t.COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL={name:\"COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL\",value:34798,description:\"Compresses RGBA textures using interpolated alpha encoding (useful when alpha transitions are gradient).\",extensionName:\"WEBGL_compressed_texture_atc\"},t.UNSIGNED_INT_24_8_WEBGL={name:\"UNSIGNED_INT_24_8_WEBGL\",value:34042,description:\"Unsigned integer type for 24-bit depth texture data.\",extensionName:\"WEBGL_depth_texture\"},t.HALF_FLOAT_OES={name:\"HALF_FLOAT_OES\",value:36193,description:\"Half floating-point type (16-bit).\",extensionName:\"OES_texture_half_float\"},t.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT={name:\"FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT\",value:33297,description:\" \",extensionName:\"WEBGL_color_buffer_float\"},t.UNSIGNED_NORMALIZED_EXT={name:\"UNSIGNED_NORMALIZED_EXT\",value:35863,description:\" \",extensionName:\"WEBGL_color_buffer_float\"},t.MIN_EXT={name:\"MIN_EXT\",value:32775,description:\"Produces the minimum color components of the source and destination colors.\",extensionName:\"EXT_blend_minmax\"},t.MAX_EXT={name:\"MAX_EXT\",value:32776,description:\"Produces the maximum color components of the source and destination colors.\",extensionName:\"EXT_blend_minmax\"},t.SRGB_EXT={name:\"SRGB_EXT\",value:35904,description:\"Unsized sRGB format that leaves the precision up to the driver.\",extensionName:\"EXT_sRGB\"},t.SRGB_ALPHA_EXT={name:\"SRGB_ALPHA_EXT\",value:35906,description:\"Unsized sRGB format with unsized alpha component.\",extensionName:\"EXT_sRGB\"},t.SRGB8_ALPHA8_EXT={name:\"SRGB8_ALPHA8_EXT\",value:35907,description:\"Sized (8-bit) sRGB and alpha formats.\",extensionName:\"EXT_sRGB\"},t.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT={name:\"FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT\",value:33296,description:\"Returns the framebuffer color encoding.\",extensionName:\"EXT_sRGB\"},t.FRAGMENT_SHADER_DERIVATIVE_HINT_OES={name:\"FRAGMENT_SHADER_DERIVATIVE_HINT_OES\",value:35723,description:\"Indicates the accuracy of the derivative calculation for the GLSL built-in functions: dFdx, dFdy, and fwidth.\",extensionName:\"OES_standard_derivatives\"},t.COLOR_ATTACHMENT0_WEBGL={name:\"COLOR_ATTACHMENT0_WEBGL\",value:36064,description:\"Framebuffer color attachment point\",extensionName:\"WEBGL_draw_buffers\"},t.COLOR_ATTACHMENT1_WEBGL={name:\"COLOR_ATTACHMENT1_WEBGL\",value:36065,description:\"Framebuffer color attachment point\",extensionName:\"WEBGL_draw_buffers\"};t.COLOR_ATTACHMENT2_WEBGL={name:\"COLOR_ATTACHMENT2_WEBGL\",value:36066,description:\"Framebuffer color attachment point\",extensionName:\"WEBGL_draw_buffers\"},t.COLOR_ATTACHMENT3_WEBGL={name:\"COLOR_ATTACHMENT3_WEBGL\",value:36067,description:\"Framebuffer color attachment point\",extensionName:\"WEBGL_draw_buffers\"},t.COLOR_ATTACHMENT4_WEBGL={name:\"COLOR_ATTACHMENT4_WEBGL\",value:36068,description:\"Framebuffer color attachment point\",extensionName:\"WEBGL_draw_buffers\"},t.COLOR_ATTACHMENT5_WEBGL={name:\"COLOR_ATTACHMENT5_WEBGL\",value:36069,description:\"Framebuffer color attachment point\",extensionName:\"WEBGL_draw_buffers\"},t.COLOR_ATTACHMENT6_WEBGL={name:\"COLOR_ATTACHMENT6_WEBGL\",value:36070,description:\"Framebuffer color attachment point\",extensionName:\"WEBGL_draw_buffers\"},t.COLOR_ATTACHMENT7_WEBGL={name:\"COLOR_ATTACHMENT7_WEBGL\",value:36071,description:\"Framebuffer color attachment point\",extensionName:\"WEBGL_draw_buffers\"},t.COLOR_ATTACHMENT8_WEBGL={name:\"COLOR_ATTACHMENT8_WEBGL\",value:36072,description:\"Framebuffer color attachment point\",extensionName:\"WEBGL_draw_buffers\"},t.COLOR_ATTACHMENT9_WEBGL={name:\"COLOR_ATTACHMENT9_WEBGL\",value:36073,description:\"Framebuffer color attachment point\",extensionName:\"WEBGL_draw_buffers\"},t.COLOR_ATTACHMENT10_WEBGL={name:\"COLOR_ATTACHMENT10_WEBGL\",value:36074,description:\"Framebuffer color attachment point\",extensionName:\"WEBGL_draw_buffers\"},t.COLOR_ATTACHMENT11_WEBGL={name:\"COLOR_ATTACHMENT11_WEBGL\",value:36075,description:\"Framebuffer color attachment point\",extensionName:\"WEBGL_draw_buffers\"},t.COLOR_ATTACHMENT12_WEBGL={name:\"COLOR_ATTACHMENT12_WEBGL\",value:36076,description:\"Framebuffer color attachment point\",extensionName:\"WEBGL_draw_buffers\"},t.COLOR_ATTACHMENT13_WEBGL={name:\"COLOR_ATTACHMENT13_WEBGL\",value:36077,description:\"Framebuffer color attachment point\",extensionName:\"WEBGL_draw_buffers\"},t.COLOR_ATTACHMENT14_WEBGL={name:\"COLOR_ATTACHMENT14_WEBGL\",value:36078,description:\"Framebuffer color attachment point\",extensionName:\"WEBGL_draw_buffers\"},t.COLOR_ATTACHMENT15_WEBGL={name:\"COLOR_ATTACHMENT15_WEBGL\",value:36079,description:\"Framebuffer color attachment point\",extensionName:\"WEBGL_draw_buffers\"},t.DRAW_BUFFER0_WEBGL={name:\"DRAW_BUFFER0_WEBGL\",value:34853,description:\"Draw buffer\",extensionName:\"WEBGL_draw_buffers\"},t.DRAW_BUFFER1_WEBGL={name:\"DRAW_BUFFER1_WEBGL\",value:34854,description:\"Draw buffer\",extensionName:\"WEBGL_draw_buffers\"},t.DRAW_BUFFER2_WEBGL={name:\"DRAW_BUFFER2_WEBGL\",value:34855,description:\"Draw buffer\",extensionName:\"WEBGL_draw_buffers\"},t.DRAW_BUFFER3_WEBGL={name:\"DRAW_BUFFER3_WEBGL\",value:34856,description:\"Draw buffer\",extensionName:\"WEBGL_draw_buffers\"},t.DRAW_BUFFER4_WEBGL={name:\"DRAW_BUFFER4_WEBGL\",value:34857,description:\"Draw buffer\",extensionName:\"WEBGL_draw_buffers\"},t.DRAW_BUFFER5_WEBGL={name:\"DRAW_BUFFER5_WEBGL\",value:34858,description:\"Draw buffer\",extensionName:\"WEBGL_draw_buffers\"},t.DRAW_BUFFER6_WEBGL={name:\"DRAW_BUFFER6_WEBGL\",value:34859,description:\"Draw buffer\",extensionName:\"WEBGL_draw_buffers\"},t.DRAW_BUFFER7_WEBGL={name:\"DRAW_BUFFER7_WEBGL\",value:34860,description:\"Draw buffer\",extensionName:\"WEBGL_draw_buffers\"},t.DRAW_BUFFER8_WEBGL={name:\"DRAW_BUFFER8_WEBGL\",value:34861,description:\"Draw buffer\",extensionName:\"WEBGL_draw_buffers\"},t.DRAW_BUFFER9_WEBGL={name:\"DRAW_BUFFER9_WEBGL\",value:34862,description:\"Draw buffer\",extensionName:\"WEBGL_draw_buffers\"},t.DRAW_BUFFER10_WEBGL={name:\"DRAW_BUFFER10_WEBGL\",value:34863,description:\"Draw buffer\",extensionName:\"WEBGL_draw_buffers\"},t.DRAW_BUFFER11_WEBGL={name:\"DRAW_BUFFER11_WEBGL\",value:34864,description:\"Draw buffer\",extensionName:\"WEBGL_draw_buffers\"},t.DRAW_BUFFER12_WEBGL={name:\"DRAW_BUFFER12_WEBGL\",value:34865,description:\"Draw buffer\",extensionName:\"WEBGL_draw_buffers\"},t.DRAW_BUFFER13_WEBGL={name:\"DRAW_BUFFER13_WEBGL\",value:34866,description:\"Draw buffer\",extensionName:\"WEBGL_draw_buffers\"},t.DRAW_BUFFER14_WEBGL={name:\"DRAW_BUFFER14_WEBGL\",value:34867,description:\"Draw buffer\",extensionName:\"WEBGL_draw_buffers\"},t.DRAW_BUFFER15_WEBGL={name:\"DRAW_BUFFER15_WEBGL\",value:34868,description:\"Draw buffer\",extensionName:\"WEBGL_draw_buffers\"},t.MAX_COLOR_ATTACHMENTS_WEBGL={name:\"MAX_COLOR_ATTACHMENTS_WEBGL\",value:36063,description:\"Maximum number of framebuffer color attachment points\",extensionName:\"WEBGL_draw_buffers\"},t.MAX_DRAW_BUFFERS_WEBGL={name:\"MAX_DRAW_BUFFERS_WEBGL\",value:34852,description:\"Maximum number of draw buffers\",extensionName:\"WEBGL_draw_buffers\"},t.VERTEX_ARRAY_BINDING_OES={name:\"VERTEX_ARRAY_BINDING_OES\",value:34229,description:\"The bound vertex array object (VAO).\",extensionName:\"VERTEX_ARRAY_BINDING_OES\"},t.QUERY_COUNTER_BITS_EXT={name:\"QUERY_COUNTER_BITS_EXT\",value:34916,description:\"The number of bits used to hold the query result for the given target.\",extensionName:\"EXT_disjoint_timer_query\"},t.CURRENT_QUERY_EXT={name:\"CURRENT_QUERY_EXT\",value:34917,description:\"The currently active query.\",extensionName:\"EXT_disjoint_timer_query\"},t.QUERY_RESULT_EXT={name:\"QUERY_RESULT_EXT\",value:34918,description:\"The query result.\",extensionName:\"EXT_disjoint_timer_query\"},t.QUERY_RESULT_AVAILABLE_EXT={name:\"QUERY_RESULT_AVAILABLE_EXT\",value:34919,description:\"A Boolean indicating whether or not a query result is available.\",extensionName:\"EXT_disjoint_timer_query\"},t.TIME_ELAPSED_EXT={name:\"TIME_ELAPSED_EXT\",value:35007,description:\"Elapsed time (in nanoseconds).\",extensionName:\"EXT_disjoint_timer_query\"},t.TIMESTAMP_EXT={name:\"TIMESTAMP_EXT\",value:36392,description:\"The current time.\",extensionName:\"EXT_disjoint_timer_query\"},t.GPU_DISJOINT_EXT={name:\"GPU_DISJOINT_EXT\",value:36795,description:\"A Boolean indicating whether or not the GPU performed any disjoint operation.\",extensionName:\"EXT_disjoint_timer_query\"},t.zeroMeaningByCommand={getError:\"NO_ERROR\",blendFunc:\"ZERO\",blendFuncSeparate:\"ZERO\",readBuffer:\"NONE\",getFramebufferAttachmentParameter:\"NONE\",texParameterf:\"NONE\",texParameteri:\"NONE\",drawArrays:\"POINTS\",drawElements:\"POINTS\",drawArraysInstanced:\"POINTS\",drawBuffers:\"POINTS\",drawElementsInstanced:\"POINTS\",drawRangeElements:\"POINTS\"},t.oneMeaningByCommand={blendFunc:\"ONE\",blendFuncSeparate:\"ONE\",drawArrays:\"LINES\",drawElements:\"LINES\",drawArraysInstanced:\"LINES\",drawBuffers:\"LINES\",drawElementsInstanced:\"LINES\",drawRangeElements:\"LINES\"},e.WebGlConstants=t}(n||(n={}));var n;!function(e){e.WebGlConstantsByName={},function(){for(var t in e.WebGlConstants)if(e.WebGlConstants.hasOwnProperty(t)){var n=e.WebGlConstants[t];e.WebGlConstantsByName[n.name]=n}}()}(n||(n={}));var n;!function(e){e.WebGlConstantsByValue={},function(){for(var t in e.WebGlConstants)if(e.WebGlConstants.hasOwnProperty(t)){var n=e.WebGlConstants[t];e.WebGlConstantsByValue[n.value]=n}}()}(n||(n={}));var n;!function(e){!function(e){function t(e){return function(t){t[d]=e}}function n(e){return e[d]}function a(e){return function(t){t[p]=e}}function r(e){return e[p]}function o(e){return function(t){t[E]=e}}function i(e){return e[E]}function s(t){return function(n){n[e.OBJECTNAMEKEY]=t,n[e.OBJECTTYPEKEY]=window[t]||null}}function u(t){return t[e.OBJECTNAMEKEY]}function l(t){return t[e.OBJECTTYPEKEY]}function c(e){return function(t){t[C]=e}}function m(e){return e[C]}var d=\"__CommandName\";e.command=t,e.getCommandName=n;var p=\"__StateName\";e.state=a,e.getStateName=r;var E=\"___RecorderObjectName\";e.recorder=o,e.getRecorderName=i,e.OBJECTNAMEKEY=\"___ObjectName\",e.OBJECTTYPEKEY=\"___ObjectType\",e.webGlObject=s,e.getWebGlObjectName=u,e.getWebGlObjectType=l;var C=\"___AnalyserObjectName\";e.analyser=c,e.getAnalyserName=m}(e.Decorators||(e.Decorators={}))}(n||(n={}));var n;!function(e){var t=function(){function t(){}return t.isSupportedCombination=function(t,n,a){return t=t||e.WebGlConstants.UNSIGNED_BYTE.value,((n=n||e.WebGlConstants.RGBA.value)===e.WebGlConstants.RGB.value||n===e.WebGlConstants.RGBA.value)&&((a===e.WebGlConstants.RGB.value||a===e.WebGlConstants.RGBA.value||a===e.WebGlConstants.RGBA16F.value||a===e.WebGlConstants.RGBA32F.value||a===e.WebGlConstants.RGB16F.value||a===e.WebGlConstants.RGB32F.value||a===e.WebGlConstants.R11F_G11F_B10F.value)&&(t===e.WebGlConstants.UNSIGNED_BYTE.value||t===e.WebGlConstants.UNSIGNED_SHORT_4_4_4_4.value||t===e.WebGlConstants.UNSIGNED_SHORT_5_5_5_1.value||t===e.WebGlConstants.UNSIGNED_SHORT_5_6_5.value||t===e.WebGlConstants.HALF_FLOAT.value||t===e.WebGlConstants.HALF_FLOAT_OES.value||t===e.WebGlConstants.FLOAT.value))},t.readPixels=function(t,n,a,r,o,i){t.getError();var s,u=r*o*4;if(i===e.WebGlConstants.UNSIGNED_BYTE.value?s=new Uint8Array(u):(i=e.WebGlConstants.FLOAT.value,s=new Float32Array(u)),t.readPixels(n,a,r,o,t.RGBA,i,s),!t.getError()){if(i===e.WebGlConstants.UNSIGNED_BYTE.value)return s;for(var l=new Uint8Array(r*o*4),c=0;c<o;c++)for(var m=0;m<r;m++)l[c*r*4+4*m+0]=255*Math.min(Math.max(s[c*r*4+4*m+0],0),1),l[c*r*4+4*m+1]=255*Math.min(Math.max(s[c*r*4+4*m+1],0),1),l[c*r*4+4*m+2]=255*Math.min(Math.max(s[c*r*4+4*m+2],0),1),l[c*r*4+4*m+3]=255*Math.min(Math.max(s[c*r*4+4*m+3],0),1);return l}},t}();e.ReadPixelsHelper=t}(n||(n={}));var n;!function(e){!function(e){var t=function(){function e(t,n){this.options=t,this.logger=n,this.spiedWindow=t.spiedWindow||window,this.lastFrame=0,this.speedRatio=1,this.willPlayNextFrame=!1,this.onFrameStart=new t.eventConstructor,this.onFrameEnd=new t.eventConstructor,this.onError=new t.eventConstructor,this.time=new this.options.timeConstructor,this.lastSixtyFramesDuration=[],this.lastSixtyFramesCurrentIndex=0,this.lastSixtyFramesPreviousStart=0;for(var a=0;a<e.fpsWindowSize;a++)this.lastSixtyFramesDuration[a]=0;this.init()}return e.prototype.playNextFrame=function(){this.willPlayNextFrame=!0},e.prototype.changeSpeedRatio=function(e){this.speedRatio=e},e.prototype.getFps=function(){for(var t=0,n=0;n<e.fpsWindowSize;n++)t+=this.lastSixtyFramesDuration[n];return 0===t?0:6e4/t},e.prototype.init=function(){for(var t=0,n=e.requestAnimationFrameFunctions;t<n.length;t++){var a=n[t];this.spyRequestAnimationFrame(a)}for(var r=0,o=e.setTimerFunctions;r<o.length;r++){var a=o[r];this.spySetTimer(a)}},e.prototype.spyRequestAnimationFrame=function(e){var t=this,n=this.spiedWindow[e],a=this.spiedWindow;a[e]=function(){var r=arguments[0],o=t.getCallback(t,r,function(){a[e](r)});return n.apply(t.spiedWindow,[o])}},e.prototype.spySetTimer=function(t){var n=this,a=this.spiedWindow[t],r=\"setTimeout\"===t,o=this.spiedWindow;o[t]=function(){var i=arguments[0],s=arguments[1];return e.setTimerCommonValues.indexOf(s)>-1&&(i=n.getCallback(n,i,r?function(){o[t](i)}:null)),a.apply(n.spiedWindow,[i,s])}},e.prototype.getCallback=function(t,n,a){return void 0===a&&(a=null),function(){var r=t.time.now;if(t.lastFrame=++t.lastFrame%t.speedRatio,t.willPlayNextFrame||t.speedRatio&&!t.lastFrame){t.onFrameStart.trigger(t);try{n.apply(t.spiedWindow,arguments)}catch(e){t.onError.trigger(e)}t.lastSixtyFramesCurrentIndex=(t.lastSixtyFramesCurrentIndex+1)%e.fpsWindowSize,t.lastSixtyFramesDuration[t.lastSixtyFramesCurrentIndex]=r-t.lastSixtyFramesPreviousStart,t.onFrameEnd.trigger(t),t.willPlayNextFrame=!1}else a&&a();t.lastSixtyFramesPreviousStart=r}},e}();t.requestAnimationFrameFunctions=[\"requestAnimationFrame\",\"msRequestAnimationFrame\",\"webkitRequestAnimationFrame\",\"mozRequestAnimationFrame\",\"oRequestAnimationFrame\"],t.setTimerFunctions=[\"setTimeout\",\"setInterval\"],t.setTimerCommonValues=[0,15,16,33,32,40],t.fpsWindowSize=60,e.TimeSpy=t}(e.Spies||(e.Spies={}))}(n||(n={}));var n;!function(e){!function(e){var t=function(){function e(e,t){this.options=e,this.logger=t,this.onContextRequested=new e.eventConstructor,this.canvas=e.canvas,this.init()}return e.prototype.init=function(){var e=this,t=function(){var t=e.spiedGetContext.apply(this,arguments);if(arguments.length>0&&\"2d\"===arguments[0])return t;if(t){var n=Array.prototype.slice.call(arguments),a=\"webgl2\"===n[0]||\"experimental-webgl2\"===n[0],r=a?2:1;e.onContextRequested.trigger({context:t,contextVersion:r})}return t};this.canvas?(this.spiedGetContext=this.canvas.getContext,this.canvas.getContext=t):(this.spiedGetContext=HTMLCanvasElement.prototype.getContext,HTMLCanvasElement.prototype.getContext=t)},e}();e.CanvasSpy=t}(e.Spies||(e.Spies={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(){function t(e,t,n){this.options=e,this.time=t,this.logger=n,this.commandId=0,this.context=e.context,this.version=e.version,this.capturing=!1,this.globalCapturing=!0,this.injection=e.injection,this.contextInformation={context:this.context,contextVersion:this.version,toggleCapture:this.toggleGlobalCapturing.bind(this),tagWebGlObject:this.tagWebGlObject.bind(this),extensions:{}},this.commandSpies={},this.stateSpy=new this.injection.StateSpyCtor({contextInformation:this.contextInformation,stateNamespace:this.injection.StateNamespace},n),this.recorderSpy=new this.injection.RecorderSpyCtor({contextInformation:this.contextInformation,recorderNamespace:this.injection.RecorderNamespace,timeConstructor:this.injection.TimeCtor},n),this.webGlObjectSpy=new this.injection.WebGlObjectSpyCtor({contextInformation:this.contextInformation,webGlObjectNamespace:this.injection.WebGlObjectNamespace},n),this.analyser=new this.injection.CaptureAnalyserCtor({contextInformation:this.contextInformation,analyserNamespace:this.injection.AnalyserNamespace},n),this.initStaticCapture(),e.recordAlways&&this.spy()}return t.prototype.spy=function(){this.spyContext(this.context);var e=this.contextInformation.extensions;for(var t in e)e.hasOwnProperty(t)&&this.spyContext(e[t])},t.prototype.unSpy=function(){for(var e in this.commandSpies)this.commandSpies.hasOwnProperty(e)&&this.commandSpies[e].unSpy()},t.prototype.startCapture=function(){var e=this.time.now;this.options.recordAlways||this.spy(),this.capturing=!0,this.commandId=0,this.currentCapture={canvas:this.canvasCapture,context:this.contextCapture,commands:[],initState:{},endState:{},startTime:e,listenCommandsStartTime:0,listenCommandsEndTime:0,endTime:0,analyses:[],frameMemory:{},memory:{}},this.stateSpy.startCapture(this.currentCapture),this.recorderSpy.startCapture(),this.currentCapture.listenCommandsStartTime=this.time.now},t.prototype.stopCapture=function(){var e=this.time.now;return this.options.recordAlways||this.unSpy(),this.capturing=!1,this.stateSpy.stopCapture(this.currentCapture),this.recorderSpy.stopCapture(),this.currentCapture.listenCommandsEndTime=e,this.currentCapture.endTime=this.time.now,this.recorderSpy.appendRecordedInformation(this.currentCapture),this.analyser.appendAnalyses(this.currentCapture),this.currentCapture},t.prototype.isCapturing=function(){return this.globalCapturing&&this.capturing},t.prototype.getNextCommandCaptureId=function(){return this.commandId++},t.prototype.onCommand=function(e,t){if(this.globalCapturing&&(this.webGlObjectSpy.tagWebGlObjects(t),this.recorderSpy.recordCommand(t),this.isCapturing())){var n=e.createCapture(t,this.getNextCommandCaptureId());this.stateSpy.captureState(n),this.currentCapture.commands.push(n),n.endTime=this.time.now}},t.prototype.spyContext=function(e){for(var n in e)if(!~t.unSpyableMembers.indexOf(n))try{var a=\"number\"!=typeof e[n];a&&this.spyFunction(n,e)}catch(e){this.logger.error(\"Cant Spy member: \"+n),this.logger.error(e)}},t.prototype.initStaticCapture=function(){var e=new this.injection.ExtensionsCtor(this.contextInformation,this.logger),t=e.getExtensions();for(var n in t)t.hasOwnProperty(n)&&(this.contextInformation.extensions[n]=t[n]);var a=new this.injection.CapabilitiesCtor(this.contextInformation,this.logger),r=new this.injection.CompressedTexturesCtor(this.contextInformation,this.logger);this.contextCapture={version:this.version,contextAttributes:this.context.getContextAttributes(),capabilities:a.getStateData(),extensions:e.getStateData(),compressedTextures:r.getStateData()},this.canvasCapture={width:this.context.canvas.width,height:this.context.canvas.height,clientWidth:this.context.canvas.clientWidth,clientHeight:this.context.canvas.clientHeight,browserAgent:navigator?navigator.userAgent:\"\"}},t.prototype.spyFunction=function(t,n){if(!this.commandSpies[t]){var a=e.merge(this.contextInformation,{spiedCommandName:t,spiedCommandRunningContext:n,callback:this.onCommand.bind(this),commandNamespace:this.injection.CommandNamespace,stackTraceCtor:this.injection.StackTraceCtor,defaultCommandCtor:this.injection.DefaultCommandCtor});this.commandSpies[t]=new this.injection.CommandSpyCtor(a,this.time,this.logger)}this.commandSpies[t].spy()},t.prototype.toggleGlobalCapturing=function(e){this.globalCapturing=e},t.prototype.tagWebGlObject=function(e){return this.webGlObjectSpy.tagWebGlObject(e)},t}();n.unSpyableMembers=[\"canvas\",\"drawingBufferWidth\",\"drawingBufferHeight\"],t.ContextSpy=n}(e.Spies||(e.Spies={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(){function t(e,t,n){this.time=t,this.logger=n,this.stackTrace=new e.stackTraceCtor,this.spiedCommandName=e.spiedCommandName,this.spiedCommandRunningContext=e.spiedCommandRunningContext,this.spiedCommand=this.spiedCommandRunningContext[this.spiedCommandName],this.callback=e.callback,this.commandOptions={context:e.context,contextVersion:e.contextVersion,extensions:e.extensions,toggleCapture:e.toggleCapture,spiedCommandName:e.spiedCommandName},this.initCustomCommands(e.commandNamespace),this.initCommand(e.defaultCommandCtor)}return t.prototype.spy=function(){this.spiedCommandRunningContext[this.spiedCommandName]=this.overloadedCommand},t.prototype.unSpy=function(){this.spiedCommandRunningContext[this.spiedCommandName]=this.spiedCommand},t.prototype.createCapture=function(e,t){return this.command.createCapture(e,t)},t.prototype.initCustomCommands=function(n){if(!t.customCommandsConstructors){t.customCommandsConstructors={};for(var a in n)if(n.hasOwnProperty(a)){var r=n[a],o=e.Decorators.getCommandName(r);o&&(t.customCommandsConstructors[o]=r)}}},t.prototype.initCommand=function(e){t.customCommandsConstructors[this.spiedCommandName]?this.command=new t.customCommandsConstructors[this.spiedCommandName](this.commandOptions,this.stackTrace,this.logger):this.command=new e(this.commandOptions,this.stackTrace,this.logger),this.overloadedCommand=this.getSpy()},t.prototype.getSpy=function(){var e=this;return function(){var t=e.time.now,n=e.spiedCommand.apply(e.spiedCommandRunningContext,arguments),a=e.time.now,r={name:e.spiedCommandName,arguments:arguments,result:n,startTime:t,endTime:a};return e.callback(e,r),n}},t}();t.CommandSpy=n}(e.Spies||(e.Spies={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(){function t(e,t,n){this.options=e,this.stackTrace=t,this.logger=n,this.spiedCommandName=e.spiedCommandName}return t.prototype.createCapture=function(e,t){var n=this.stackTrace.getStackTrace(4,1),a=this.stringify(e.arguments,e.result),r={id:t,startTime:e.startTime,commandEndTime:e.endTime,endTime:0,name:e.name,commandArguments:e.arguments,result:e.result,stackTrace:n,status:0,text:a};this.transformCapture(r);for(var o=0;o<r.commandArguments.length;o++){var i=r.commandArguments[o];i&&i.length&&i.length>50&&(r.commandArguments[o]=\"Array Legnth: \"+i.length)}if(r.commandArguments){for(var s=[],o=0;o<r.commandArguments.length;o++){var u=r.commandArguments[o];void 0===u?s.push(void 0):null===u?s.push(null):s.push(JSON.parse(JSON.stringify(u)))}r.commandArguments=s}return r.result&&(r.result=JSON.parse(JSON.stringify(r.result))),r},t.prototype.transformCapture=function(e){},t.prototype.stringify=function(e,t){var n=this.options.spiedCommandName;return e&&e.length>0&&(n+=\": \"+this.stringifyArgs(e).join(\", \")),t&&(n+=\" -> \"+this.stringifyResult(t)),n},t.prototype.stringifyArgs=function(e){for(var t=[],n=0;n<e.length;n++){var a=e[n],r=this.stringifyValue(a);t.push(r)}return t},t.prototype.stringifyResult=function(e){if(e)return this.stringifyValue(e)},t.prototype.stringifyValue=function(t){if(null===t)return\"null\";if(void 0===t)return\"undefined\";var n=e.WebGlObjects.getWebGlObjectTag(t);return n?n.displayText:\"number\"==typeof t&&e.WebGlConstants.isWebGlConstant(t)?e.WebGlConstants.stringifyWebGlConstant(t,this.spiedCommandName):\"string\"==typeof t?t:t instanceof HTMLImageElement?t.src:t instanceof ArrayBuffer?\"[--(\"+t.byteLength+\")--]\":t.length?\"[..(\"+t.length+\")..]\":t},t}();t.BaseCommand=n}(e.Commands||(e.Commands={}))}(n||(n={}));var n,a=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function a(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(a.prototype=n.prototype,new a)}}();!function(e){!function(e){var t=[\"lineWidth\"],n=function(e){function n(n,a,r){var o=e.call(this,n,a,r)||this;return o.isDeprecated=t.indexOf(o.spiedCommandName)>-1,o}return a(n,e),n.prototype.transformCapture=function(e){this.isDeprecated&&(e.status=50)},n}(e.BaseCommand);e.DefaultCommand=n}(e.Commands||(e.Commands={}))}(n||(n={}));var n,r=this&&this.__decorate||function(e,t,n,a){var r,o=arguments.length,i=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,n):a;if(\"object\"==typeof Reflect&&\"function\"==typeof Reflect.decorate)i=Reflect.decorate(e,t,n,a);else for(var s=e.length-1;s>=0;s--)(r=e[s])&&(i=(o<3?r(i):o>3?r(t,n,i):r(t,n))||i);return o>3&&i&&Object.defineProperty(t,n,i),i};!function(e){!function(t){var n=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return a(n,t),n.prototype.stringifyArgs=function(t){var n=[];return(t[0]&e.WebGlConstants.DEPTH_BUFFER_BIT.value)===e.WebGlConstants.DEPTH_BUFFER_BIT.value&&n.push(e.WebGlConstants.DEPTH_BUFFER_BIT.name),(t[0]&e.WebGlConstants.STENCIL_BUFFER_BIT.value)===e.WebGlConstants.STENCIL_BUFFER_BIT.value&&n.push(e.WebGlConstants.STENCIL_BUFFER_BIT.name),(t[0]&e.WebGlConstants.COLOR_BUFFER_BIT.value)===e.WebGlConstants.COLOR_BUFFER_BIT.value&&n.push(e.WebGlConstants.COLOR_BUFFER_BIT.name),n},n}(t.BaseCommand);n=r([e.Decorators.command(\"clear\")],n),t.Clear=n}(e.Commands||(e.Commands={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return a(n,t),n.prototype.stringifyArgs=function(t){var n=[],a=this.options.context.getParameter(e.WebGlConstants.READ_FRAMEBUFFER_BINDING.value),r=this.options.tagWebGlObject(a);n.push(\"READ FROM: \"+this.stringifyValue(r));var o=this.options.context.getParameter(e.WebGlConstants.DRAW_FRAMEBUFFER_BINDING.value),i=this.options.tagWebGlObject(o);n.push(\"WRITE TO: \"+this.stringifyValue(i));for(var s=0;s<8;s++)n.push(t[s]);return(t[8]&e.WebGlConstants.DEPTH_BUFFER_BIT.value)===e.WebGlConstants.DEPTH_BUFFER_BIT.value&&n.push(e.WebGlConstants.DEPTH_BUFFER_BIT.name),(t[8]&e.WebGlConstants.STENCIL_BUFFER_BIT.value)===e.WebGlConstants.STENCIL_BUFFER_BIT.value&&n.push(e.WebGlConstants.STENCIL_BUFFER_BIT.name),(t[8]&e.WebGlConstants.COLOR_BUFFER_BIT.value)===e.WebGlConstants.COLOR_BUFFER_BIT.value&&n.push(e.WebGlConstants.COLOR_BUFFER_BIT.name),n.push(e.WebGlConstants.stringifyWebGlConstant(t[9],\"blitFrameBuffer\")),n},n}(t.BaseCommand);n=r([e.Decorators.command(\"blitFrameBuffer\")],n),t.BlitFrameBuffer=n}(e.Commands||(e.Commands={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return a(n,t),n.prototype.stringifyArgs=function(t){var n=[];return n.push(t[0]),n.push(t[1]),n.push(e.WebGlConstants.stringifyWebGlConstant(t[2],\"vertexAttribPointer\")),n.push(t[3]),n.push(t[4]),n.push(t[5]),n},n}(t.BaseCommand);n=r([e.Decorators.command(\"vertexAttribPointer\")],n),t.VertexAttribPointer=n}(e.Commands||(e.Commands={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t.prototype.stringifyResult=function(e){if(e)return\"name: \"+e.name+\", size: \"+e.size+\", type: \"+e.type},t}(t.BaseCommand);n=r([e.Decorators.command(\"getActiveAttrib\")],n),t.GetActiveAttrib=n}(e.Commands||(e.Commands={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t.prototype.stringifyResult=function(e){if(e)return\"name: \"+e.name+\", size: \"+e.size+\", type: \"+e.type},t}(t.BaseCommand);n=r([e.Decorators.command(\"getActiveUniform\")],n),t.GetActiveUniform=n}(e.Commands||(e.Commands={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t.prototype.stringifyResult=function(e){if(e)return\"name: \"+e.name+\", size: \"+e.size+\", type: \"+e.type},t}(t.BaseCommand);n=r([e.Decorators.command(\"getTransformFeedbackVarying\")],n),t.GetTransformFeedbackVarying=n}(e.Commands||(e.Commands={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t.prototype.stringifyResult=function(e){return e?\"true\":\"false\"},t}(t.BaseCommand);n=r([e.Decorators.command(\"getExtension\")],n),t.GetExtension=n}(e.Commands||(e.Commands={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t.prototype.stringifyResult=function(e){if(e)return\"min: \"+e.rangeMin+\", max: \"+e.rangeMax+\", precision: \"+e.precision},t}(t.BaseCommand);n=r([e.Decorators.command(\"getShaderPrecisionFormat\")],n),t.GetShaderPrecisionFormat=n}(e.Commands||(e.Commands={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return a(n,t),n.prototype.stringifyResult=function(t){if(!t)return\"null\";var n=e.WebGlObjects.getWebGlObjectTag(t);return n?n.displayText:t},n}(t.BaseCommand);n=r([e.Decorators.command(\"getParameter\")],n),t.GetParameter=n}(e.Commands||(e.Commands={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return a(n,t),n.prototype.stringifyArgs=function(t){var n=[];return n.push(e.WebGlConstants.stringifyWebGlConstant(t[0],\"drawArrays\")),n.push(t[1]),n.push(t[2]),n},n}(t.BaseCommand);n=r([e.Decorators.command(\"drawArrays\")],n),t.DrawArrays=n}(e.Commands||(e.Commands={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return a(n,t),n.prototype.stringifyArgs=function(t){var n=[];return n.push(e.WebGlConstants.stringifyWebGlConstant(t[0],\"drawArraysInstanced\")),n.push(t[1]),n.push(t[2]),n.push(t[3]),n},n}(t.BaseCommand);n=r([e.Decorators.command(\"drawArraysInstanced\")],n),t.DrawArraysInstanced=n}(e.Commands||(e.Commands={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return a(n,t),n.prototype.stringifyArgs=function(t){for(var n=[],a=0;a<t.length;a++)n.push(e.WebGlConstants.stringifyWebGlConstant(t[a],\"drawBuffers\"));return n},n}(t.BaseCommand);n=r([e.Decorators.command(\"drawBuffers\")],n),t.DrawBuffers=n}(e.Commands||(e.Commands={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return a(n,t),n.prototype.stringifyArgs=function(t){var n=[];return n.push(e.WebGlConstants.stringifyWebGlConstant(t[0],\"drawElements\")),n.push(t[1]),n.push(e.WebGlConstants.stringifyWebGlConstant(t[2],\"drawElements\")),n.push(t[3]),n},n}(t.BaseCommand);n=r([e.Decorators.command(\"drawElements\")],n),t.DrawElements=n}(e.Commands||(e.Commands={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return a(n,t),n.prototype.stringifyArgs=function(t){var n=[];return n.push(e.WebGlConstants.stringifyWebGlConstant(t[0],\"drawElementsInstanced\")),n.push(t[1]),n.push(e.WebGlConstants.stringifyWebGlConstant(t[2],\"drawElementsInstanced\")),n.push(t[3]),n.push(t[4]),n},n}(t.BaseCommand);n=r([e.Decorators.command(\"drawElementsInstanced\")],n),t.DrawElementsInstanced=n}(e.Commands||(e.Commands={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return a(n,t),n.prototype.stringifyArgs=function(t){var n=[];return n.push(e.WebGlConstants.stringifyWebGlConstant(t[0],\"drawElementsInstancedANGLE\")),n.push(t[1]),n.push(e.WebGlConstants.stringifyWebGlConstant(t[2],\"drawElementsInstancedANGLE\")),n.push(t[3]),n.push(t[4]),n},n}(t.BaseCommand);n=r([e.Decorators.command(\"drawElementsInstancedANGLE\")],n),t.DrawElementsInstancedAngle=n}(e.Commands||(e.Commands={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return a(n,t),n.prototype.stringifyArgs=function(t){var n=[];return n.push(e.WebGlConstants.stringifyWebGlConstant(t[0],\"drawRangeElements\")),n.push(t[1]),n.push(t[2]),n.push(t[3]),n.push(e.WebGlConstants.stringifyWebGlConstant(t[4],\"drawRangeElements\")),n.push(t[5]),n},n}(t.BaseCommand);n=r([e.Decorators.command(\"drawRangeElements\")],n),t.DrawRangeElements=n}(e.Commands||(e.Commands={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t.prototype.stringifyArgs=function(e){for(var t=[],n=0;n<4;n++)t.push(e[n].toFixed(0));return t},t}(t.BaseCommand);n=r([e.Decorators.command(\"scissor\")],n),t.Scissor=n}(e.Commands||(e.Commands={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t.prototype.stringifyArgs=function(e){for(var t=[],n=0;n<4;n++)t.push(e[n].toFixed(0));return t},t}(t.BaseCommand);n=r([e.Decorators.command(\"viewport\")],n),t.Viewport=n}(e.Commands||(e.Commands={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(){function t(e,n){this.options=e,this.logger=n,this.objectName=e.objectName,this.createCommandNames=this.getCreateCommandNames(),this.updateCommandNames=this.getUpdateCommandNames(),this.deleteCommandNames=this.getDeleteCommandNames(),this.startTime=this.options.time.now,this.memoryPerSecond={},this.totalMemory=0,this.frameMemory=0,this.capturing=!1,t.byteSizePerInternalFormat={}}return t.initializeByteSizeFormat=function(){if(!this.byteSizePerInternalFormat){this.byteSizePerInternalFormat=(t={},t[e.WebGlConstants.R8.value]=1,t[e.WebGlConstants.R16F.value]=2,t[e.WebGlConstants.R32F.value]=4,t[e.WebGlConstants.R8UI.value]=1,t[e.WebGlConstants.RG8.value]=2,t[e.WebGlConstants.RG16F.value]=4,t[e.WebGlConstants.RG32F.value]=8,t[e.WebGlConstants.ALPHA.value]=1,t[e.WebGlConstants.RGB.value]=3,t[e.WebGlConstants.RGBA.value]=4,t[e.WebGlConstants.LUMINANCE.value]=1,t[e.WebGlConstants.LUMINANCE_ALPHA.value]=2,t[e.WebGlConstants.DEPTH_COMPONENT.value]=1,t[e.WebGlConstants.DEPTH_STENCIL.value]=2,t[e.WebGlConstants.SRGB_EXT.value]=3,t[e.WebGlConstants.SRGB_ALPHA_EXT.value]=4,t[e.WebGlConstants.RGB8.value]=3,t[e.WebGlConstants.SRGB8.value]=3,t[e.WebGlConstants.RGB565.value]=2,t[e.WebGlConstants.R11F_G11F_B10F.value]=4,t[e.WebGlConstants.RGB9_E5.value]=2,t[e.WebGlConstants.RGB16F.value]=6,t[e.WebGlConstants.RGB32F.value]=12,t[e.WebGlConstants.RGB8UI.value]=3,t[e.WebGlConstants.RGBA8.value]=4,t[e.WebGlConstants.RGB5_A1.value]=2,t[e.WebGlConstants.RGBA16F.value]=8,t[e.WebGlConstants.RGBA32F.value]=16,t[e.WebGlConstants.RGBA8UI.value]=4,t[e.WebGlConstants.COMPRESSED_R11_EAC.value]=4,t[e.WebGlConstants.COMPRESSED_SIGNED_R11_EAC.value]=4,t[e.WebGlConstants.COMPRESSED_RG11_EAC.value]=4,t[e.WebGlConstants.COMPRESSED_SIGNED_RG11_EAC.value]=4,t[e.WebGlConstants.COMPRESSED_RGB8_ETC2.value]=4,t[e.WebGlConstants.COMPRESSED_RGBA8_ETC2_EAC.value]=4,t[e.WebGlConstants.COMPRESSED_SRGB8_ETC2.value]=4,t[e.WebGlConstants.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC.value]=4,t[e.WebGlConstants.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2.value]=4,t[e.WebGlConstants.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2.value]=4,t);var t}},t.prototype.registerCallbacks=function(e){for(var t=0,n=this.createCommandNames;t<n.length;t++){var a=n[t];e[a]=e[a]||[],e[a].push(this.createWithoutSideEffects.bind(this))}for(var r=0,o=this.updateCommandNames;r<o.length;r++){var a=o[r];e[a]=e[a]||[],e[a].push(this.updateWithoutSideEffects.bind(this))}for(var i=0,s=this.deleteCommandNames;i<s.length;i++){var a=s[i];e[a]=e[a]||[],e[a].push(this.deleteWithoutSideEffects.bind(this))}},t.prototype.startCapture=function(){this.frameMemory=0,this.capturing=!0},t.prototype.stopCapture=function(){this.frameMemory=0,this.capturing=!1},t.prototype.appendRecordedInformation=function(e){e.frameMemory[this.objectName]=this.frameMemory,e.memory[this.objectName]=this.memoryPerSecond},t.prototype.create=function(e){},t.prototype.createWithoutSideEffects=function(e){this.options.toggleCapture(!1),this.create(e),this.options.toggleCapture(!0)},t.prototype.updateWithoutSideEffects=function(t){if(t&&0!==t.arguments.length){this.options.toggleCapture(!1);var n=t.arguments[0],a=this.getBoundInstance(n);if(!a)return void this.options.toggleCapture(!0);if(!e.WebGlObjects.getWebGlObjectTag(a))return void this.options.toggleCapture(!0);var r=this.getWebGlConstant(n),o=this.update(t,r,a);this.changeMemorySize(o),this.options.toggleCapture(!0)}},t.prototype.deleteWithoutSideEffects=function(e){if(e&&e.arguments&&!(e.arguments.length<1)){var t=e.arguments[0];if(t){this.options.toggleCapture(!1);var n=this.delete(t);this.changeMemorySize(-n),this.options.toggleCapture(!0)}}},t.prototype.changeMemorySize=function(e){this.totalMemory+=e,this.capturing&&(this.frameMemory+=e);var t=this.options.time.now-this.startTime,n=Math.round(t/1e3);this.memoryPerSecond[n]=this.totalMemory},t.prototype.getWebGlConstant=function(t){var n=e.WebGlConstantsByValue[t];return n?n.name:t+\"\"},t.prototype.getByteSizeForInternalFormat=function(e){return t.byteSizePerInternalFormat[e]||4},t}();t.BaseRecorder=n}(e.Recorders||(e.Recorders={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return a(n,t),n.prototype.getCreateCommandNames=function(){return[\"createTexture\"]},n.prototype.getUpdateCommandNames=function(){return[\"texImage2D\",\"compressedTexImage2D\",\"texStorage2D\"]},n.prototype.getDeleteCommandNames=function(){return[\"deleteTexture\"]},n.prototype.getBoundInstance=function(t){var n=this.options.context;return t===e.WebGlConstants.TEXTURE_2D.value?n.getParameter(e.WebGlConstants.TEXTURE_BINDING_2D.value):t===e.WebGlConstants.TEXTURE_CUBE_MAP_POSITIVE_X.value||t===e.WebGlConstants.TEXTURE_CUBE_MAP_POSITIVE_Y.value||t===e.WebGlConstants.TEXTURE_CUBE_MAP_POSITIVE_Z.value||t===e.WebGlConstants.TEXTURE_CUBE_MAP_NEGATIVE_X.value||t===e.WebGlConstants.TEXTURE_CUBE_MAP_NEGATIVE_Y.value||t===e.WebGlConstants.TEXTURE_CUBE_MAP_NEGATIVE_Z.value?n.getParameter(e.WebGlConstants.TEXTURE_BINDING_CUBE_MAP.value):void 0},n.prototype.delete=function(t){var n=t.__SPECTOR_Object_CustomData;return n?n.target===e.WebGlConstants.TEXTURE_2D_ARRAY.name||n.target===e.WebGlConstants.TEXTURE_3D.name?0:n.length:0},n.prototype.update=function(e,t,n){if(e.arguments.length>=2&&0!==e.arguments[1])return 0;var a=this.getCustomData(e,t,n);if(!a)return 0;var r=n.__SPECTOR_Object_CustomData?n.__SPECTOR_Object_CustomData.length:0,o=\"TEXTURE_2D\"===t?1:6;return a.length=a.width*a.height*o*this.getByteSizeForInternalFormat(a.internalFormat),n.__SPECTOR_Object_CustomData=a,a.length-r},n.prototype.getCustomData=function(e,t,n){return\"texImage2D\"===e.name?this.getTexImage2DCustomData(e,t,n):\"compressedTexImage2D\"===e.name?this.getCompressedTexImage2DCustomData(e,t,n):\"texStorage2D\"===e.name?this.getTexStorage2DCustomData(e,t,n):void 0},n.prototype.getTexStorage2DCustomData=function(e,t,n){var a;return 5===e.arguments.length&&(a={target:t,internalFormat:e.arguments[2],width:e.arguments[3],height:e.arguments[4],length:0}),a},n.prototype.getCompressedTexImage2DCustomData=function(e,t,n){if(0===e.arguments[1]){var a;return e.arguments.length>=7&&(a={target:t,internalFormat:e.arguments[2],width:e.arguments[3],height:e.arguments[4],length:0}),a}},n.prototype.getTexImage2DCustomData=function(e,t,n){if(0===e.arguments[1]){var a;return e.arguments.length>=8?a={target:t,internalFormat:e.arguments[2],width:e.arguments[3],height:e.arguments[4],format:e.arguments[6],type:e.arguments[7],length:0}:6===e.arguments.length&&(a={target:t,internalFormat:e.arguments[2],width:e.arguments[5].width,height:e.arguments[5].height,format:e.arguments[3],type:e.arguments[4],length:0}),a}},n}(t.BaseRecorder);n=r([e.Decorators.recorder(\"Texture2d\")],n),t.Texture2DRecorder=n}(e.Recorders||(e.Recorders={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return a(n,t),n.prototype.getCreateCommandNames=function(){return[\"createTexture\"]},n.prototype.getUpdateCommandNames=function(){return[\"texImage3D\",\"compressedTexImage3D\",\"texStorage3D\"]},n.prototype.getDeleteCommandNames=function(){return[\"deleteTexture\"]},n.prototype.getBoundInstance=function(t){var n=this.options.context;return t===e.WebGlConstants.TEXTURE_2D_ARRAY.value?n.getParameter(e.WebGlConstants.TEXTURE_BINDING_2D_ARRAY.value):t===e.WebGlConstants.TEXTURE_3D.value?n.getParameter(e.WebGlConstants.TEXTURE_BINDING_3D.value):void 0},n.prototype.delete=function(t){var n=t.__SPECTOR_Object_CustomData;return n?n.target!==e.WebGlConstants.TEXTURE_2D_ARRAY.name&&n.target!==e.WebGlConstants.TEXTURE_3D.name?0:n.length:0},n.prototype.update=function(e,t,n){if(e.arguments.length>=2&&0!==e.arguments[1])return 0;var a=this.getCustomData(e,t,n);if(!a)return 0;var r=n.__SPECTOR_Object_CustomData?n.__SPECTOR_Object_CustomData.length:0;return a.length=a.width*a.height*a.depth*this.getByteSizeForInternalFormat(a.internalFormat),a&&(n.__SPECTOR_Object_CustomData=a),a.length-r},n.prototype.getCustomData=function(e,t,n){return\"texImage3D\"===e.name?this.getTexImage3DCustomData(e,t,n):\"compressedTexImage3D\"===e.name?this.getCompressedTexImage3DCustomData(e,t,n):\"texStorage3D\"===e.name?this.getTexStorage3DCustomData(e,t,n):void 0},n.prototype.getTexStorage3DCustomData=function(e,t,n){var a;return 6===e.arguments.length&&(a={target:t,internalFormat:e.arguments[2],width:e.arguments[3],height:e.arguments[4],depth:e.arguments[5],length:0}),a},n.prototype.getCompressedTexImage3DCustomData=function(e,t,n){if(0===e.arguments[1]){var a;return e.arguments.length>=8&&(a={target:t,internalFormat:e.arguments[2],width:e.arguments[3],height:e.arguments[4],depth:e.arguments[5],length:0}),a}},n.prototype.getTexImage3DCustomData=function(e,t,n){if(0===e.arguments[1]){var a;return e.arguments.length>=9&&(a={target:t,internalFormat:e.arguments[2],width:e.arguments[3],height:e.arguments[4],depth:e.arguments[5],format:e.arguments[7],type:e.arguments[8],length:0}),a}},n}(t.BaseRecorder);n=r([e.Decorators.recorder(\"Texture3d\")],n),t.Texture3DRecorder=n}(e.Recorders||(e.Recorders={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return a(n,t),n.prototype.getCreateCommandNames=function(){return[\"createBuffer\"]},n.prototype.getUpdateCommandNames=function(){return[\"bufferData\"]},n.prototype.getDeleteCommandNames=function(){return[\"deleteBuffer\"]},n.prototype.getBoundInstance=function(t){var n=this.options.context;return t===e.WebGlConstants.ARRAY_BUFFER.value?n.getParameter(e.WebGlConstants.ARRAY_BUFFER_BINDING.value):t===e.WebGlConstants.ELEMENT_ARRAY_BUFFER.value?n.getParameter(e.WebGlConstants.ELEMENT_ARRAY_BUFFER_BINDING.value):t===e.WebGlConstants.COPY_READ_BUFFER.value?n.getParameter(e.WebGlConstants.COPY_READ_BUFFER_BINDING.value):t===e.WebGlConstants.COPY_WRITE_BUFFER.value?n.getParameter(e.WebGlConstants.COPY_WRITE_BUFFER_BINDING.value):t===e.WebGlConstants.TRANSFORM_FEEDBACK_BUFFER.value?n.getParameter(e.WebGlConstants.TRANSFORM_FEEDBACK_BUFFER_BINDING.value):t===e.WebGlConstants.UNIFORM_BUFFER.value?n.getParameter(e.WebGlConstants.UNIFORM_BUFFER_BINDING.value):t===e.WebGlConstants.PIXEL_PACK_BUFFER.value?n.getParameter(e.WebGlConstants.PIXEL_PACK_BUFFER_BINDING.value):t===e.WebGlConstants.PIXEL_UNPACK_BUFFER.value?n.getParameter(e.WebGlConstants.PIXEL_UNPACK_BUFFER_BINDING.value):void 0},n.prototype.delete=function(e){var t=e.__SPECTOR_Object_CustomData;return t?t.length:0},n.prototype.update=function(e,t,n){var a=this.getCustomData(t,e);if(!a)return 0;var r=n.__SPECTOR_Object_CustomData?n.__SPECTOR_Object_CustomData.length:0;return n.__SPECTOR_Object_CustomData=a,a.length-r},n.prototype.getCustomData=function(e,t){var n=this.getLength(t);return t.arguments.length>=4?{target:e,length:n,usage:t.arguments[2],offset:t.arguments[3],sourceLength:t.arguments[1]?t.arguments[1].length:-1}:3===t.arguments.length?{target:e,length:n,usage:t.arguments[2]}:void 0},n.prototype.getLength=function(e){var t=-1;return 5===e.arguments.length&&(t=e.arguments[4]),t<=0&&(t=\"number\"==typeof e.arguments[1]?e.arguments[1]:e.arguments[1]?e.arguments[1].buffer?e.arguments[1].buffer.byteLength:e.arguments[1].byteLength||e.arguments[1].length||0:0),t},n}(t.BaseRecorder);n=r([e.Decorators.recorder(\"Buffer\")],n),t.BufferRecorder=n}(e.Recorders||(e.Recorders={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return a(n,t),n.prototype.getCreateCommandNames=function(){return[\"createRenderbuffer\"]},n.prototype.getUpdateCommandNames=function(){return[\"renderbufferStorage\"]},n.prototype.getDeleteCommandNames=function(){return[\"deleteRenderbuffer\"]},n.prototype.getBoundInstance=function(t){var n=this.options.context;if(t===e.WebGlConstants.RENDERBUFFER.value)return n.getParameter(e.WebGlConstants.RENDERBUFFER_BINDING.value)},n.prototype.delete=function(e){var t=e.__SPECTOR_Object_CustomData;return t?t.length:0},n.prototype.update=function(e,t,n){var a=this.getCustomData(e,t);if(!a)return 0;var r=n.__SPECTOR_Object_CustomData?n.__SPECTOR_Object_CustomData.length:0;return a.length=a.width*a.height*this.getByteSizeForInternalFormat(a.internalFormat),n.__SPECTOR_Object_CustomData=a,a.length-r},n.prototype.getCustomData=function(e,t){return{target:t,internalFormat:e.arguments[1],width:e.arguments[2],height:e.arguments[3],length:0}},n}(t.BaseRecorder);n=r([e.Decorators.recorder(\"Renderbuffer\")],n),t.RenderBufferRecorder=n}(e.Recorders||(e.Recorders={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(){function t(e,t){this.options=e,this.logger=t,this.recorders={},this.recorderConstructors={},this.onCommandCallbacks={},this.contextInformation=e.contextInformation,this.time=new e.timeConstructor,this.initAvailableRecorders(),this.initRecorders()}return t.prototype.recordCommand=function(e){var t=this.onCommandCallbacks[e.name];if(t)for(var n=0,a=t;n<a.length;n++){var r=a[n];r(e)}},t.prototype.startCapture=function(){for(var e in this.recorders)if(this.recorders.hasOwnProperty(e)){var t=this.recorders[e];t.startCapture()}},t.prototype.stopCapture=function(){for(var e in this.recorders)if(this.recorders.hasOwnProperty(e)){var t=this.recorders[e];t.stopCapture()}},t.prototype.appendRecordedInformation=function(e){for(var t in this.recorders)if(this.recorders.hasOwnProperty(t)){var n=this.recorders[t];n.appendRecordedInformation(e)}},t.prototype.initAvailableRecorders=function(){for(var t in this.options.recorderNamespace)if(this.options.recorderNamespace.hasOwnProperty(t)){var n=this.options.recorderNamespace[t],a=e.Decorators.getRecorderName(n);a&&(this.recorderConstructors[a]=n)}},t.prototype.initRecorders=function(){for(var t in this.recorderConstructors)if(this.recorderConstructors.hasOwnProperty(t)){var n=e.merge({objectName:t,time:this.time},this.contextInformation),a=new this.recorderConstructors[t](n,this.logger);this.recorders[t]=a,a.registerCallbacks(this.onCommandCallbacks)}},t}();t.RecorderSpy=n}(e.Spies||(e.Spies={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(){function t(e,t){this.options=e,this.logger=t,this.stateTrackers={},this.onCommandCapturedCallbacks={},this.stateConstructors={},this.contextInformation=e.contextInformation,this.initAvailableStateTrackers(),this.initStateTrackers()}return t.prototype.startCapture=function(e){for(var t in this.stateTrackers)if(this.stateTrackers.hasOwnProperty(t)){var n=this.stateTrackers[t],a=n.startCapture();n.requireStartAndStopStates&&(e.initState[t]=a)}},t.prototype.stopCapture=function(e){for(var t in this.stateTrackers)if(this.stateTrackers.hasOwnProperty(t)){var n=this.stateTrackers[t],a=n.stopCapture();n.requireStartAndStopStates&&(e.endState[t]=a)}},t.prototype.captureState=function(e){var t=this.onCommandCapturedCallbacks[e.name];if(t)for(var n=0,a=t;n<a.length;n++){var r=a[n];r(e)}},t.prototype.initAvailableStateTrackers=function(){for(var t in this.options.stateNamespace)if(this.options.stateNamespace.hasOwnProperty(t)){var n=this.options.stateNamespace[t],a=e.Decorators.getStateName(n);a&&(this.stateConstructors[a]=n)}},t.prototype.initStateTrackers=function(){for(var t in this.stateConstructors)if(this.stateConstructors.hasOwnProperty(t)){var n=e.merge({stateName:t},this.contextInformation),a=new this.stateConstructors[t](n,this.logger);this.stateTrackers[t]=a,a.registerCallbacks(this.onCommandCapturedCallbacks)}},t}();t.StateSpy=n}(e.Spies||(e.Spies={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(){function t(e,t){this.options=e,this.logger=t,this.webGlObjectConstructors={},this.webGlObjects={},this.contextInformation=e.contextInformation,this.initAvailableWebglObjects(),this.initWebglObjects()}return t.prototype.tagWebGlObjects=function(e){for(var t in this.webGlObjects)if(this.webGlObjects.hasOwnProperty(t)){for(var n=this.webGlObjects[t],a=0;a<e.arguments.length;a++){var r=e.arguments[a];if(n.tagWebGlObject(r))break}if(n.tagWebGlObject(e.result))break}},t.prototype.tagWebGlObject=function(e){for(var t in this.webGlObjects)if(this.webGlObjects.hasOwnProperty(t)){var n=this.webGlObjects[t],a=n.tagWebGlObject(e);if(a)return a}},t.prototype.initAvailableWebglObjects=function(){for(var t in this.options.webGlObjectNamespace)if(this.options.webGlObjectNamespace.hasOwnProperty(t)){var n=this.options.webGlObjectNamespace[t],a=e.Decorators.getWebGlObjectName(n),r=e.Decorators.getWebGlObjectType(n);a&&r&&(this.webGlObjectConstructors[a]={ctor:n,type:r})}},t.prototype.initWebglObjects=function(){for(var t in this.webGlObjectConstructors)if(this.webGlObjectConstructors.hasOwnProperty(t)){var n=e.merge({typeName:t,type:this.webGlObjectConstructors[t].type},this.contextInformation),a=new this.webGlObjectConstructors[t].ctor(n,this.logger);this.webGlObjects[t]=a}},t}();t.WebGlObjectSpy=n}(e.Spies||(e.Spies={}))}(n||(n={}));var n;!function(e){!function(t){t.drawCommands=[\"drawArrays\",\"drawElements\",\"drawArraysInstanced\",\"drawElementsInstanced\",\"drawElementsInstancedANGLE\",\"drawRangeElements\"];var n=function(){function t(e,t){this.options=e,this.logger=t,this.context=e.context,this.contextVersion=e.contextVersion,this.extensions=e.extensions,this.toggleCapture=e.toggleCapture,this.stateName=e.stateName,this.consumeCommands=this.getConsumeCommands(),this.changeCommandsByState=this.getChangeCommandsByState(),this.commandNameToStates=this.getCommandNameToStates()}return Object.defineProperty(t.prototype,\"requireStartAndStopStates\",{get:function(){return!0},enumerable:!0,configurable:!0}),t.prototype.startCapture=function(e){return void 0===e&&(e=!0),this.capturedCommandsByState={},e&&this.requireStartAndStopStates&&(this.currentState={},this.readFromContextNoSideEffects()),this.copyCurrentStateToPrevious(),this.currentState={},this.previousState},t.prototype.stopCapture=function(){return this.requireStartAndStopStates&&this.readFromContextNoSideEffects(),this.analyse(void 0),this.currentState},t.prototype.registerCallbacks=function(e){for(var t in this.changeCommandsByState)if(this.changeCommandsByState.hasOwnProperty(t))for(var n=0,a=this.changeCommandsByState[t];n<a.length;n++){var r=a[n];e[r]=e[r]||[],e[r].push(this.onChangeCommand.bind(this))}for(var o=0,i=this.consumeCommands;o<i.length;o++){var s=i[o];e[s]=e[s]||[],e[s].push(this.onConsumeCommand.bind(this))}},t.prototype.getStateData=function(){return this.currentState},t.prototype.getConsumeCommands=function(){return[]},t.prototype.getChangeCommandsByState=function(){return{}},t.prototype.copyCurrentStateToPrevious=function(){this.currentState&&(this.previousState=this.currentState)},t.prototype.onChangeCommand=function(e){for(var t=this.commandNameToStates[e.name],n=0,a=t;n<a.length;n++){var r=a[n];if(!this.isValidChangeCommand(e,r))return;this.capturedCommandsByState[r]=this.capturedCommandsByState[r]||[],this.capturedCommandsByState[r].push(e)}},t.prototype.isValidChangeCommand=function(e,t){return!0},t.prototype.onConsumeCommand=function(e){this.isValidConsumeCommand(e)&&(this.readFromContextNoSideEffects(),this.analyse(e),this.storeCommandIds(),e[this.stateName]=this.currentState,this.startCapture(!1))},t.prototype.isValidConsumeCommand=function(e){return!0},t.prototype.analyse=function(e){for(var t in this.capturedCommandsByState)if(this.capturedCommandsByState.hasOwnProperty(t)){var n=this.capturedCommandsByState[t],a=n.length-1;if(a>=0)if(e){for(var r=0;r<a;r++){var o=n[r];o.consumeCommandId=e.id,this.changeCommandCaptureStatus(o,30)}var i=this.isStateEnableNoSideEffects(t,e.commandArguments),s=n[a];s.consumeCommandId=e.id,this.areStatesEquals(this.currentState[t],this.previousState[t])?this.changeCommandCaptureStatus(s,30):i?this.changeCommandCaptureStatus(s,40):this.changeCommandCaptureStatus(s,20)}else for(var r=0;r<n.length;r++){var s=n[r];this.changeCommandCaptureStatus(s,10)}}},t.prototype.storeCommandIds=function(){for(var e=[\"unusedCommandIds\",\"disabledCommandIds\",\"redundantCommandIds\",\"validCommandIds\"],t=0,n=e;t<n.length;t++){var a=n[t];this.currentState[a]=[]}for(var r in this.capturedCommandsByState)if(this.capturedCommandsByState.hasOwnProperty(r))for(var o=this.capturedCommandsByState[r],i=0,s=o;i<s.length;i++){var u=s[i];switch(u.status){case 10:this.currentState.unusedCommandIds.push(u.id);break;case 20:this.currentState.disabledCommandIds.push(u.id);break;case 30:this.currentState.redundantCommandIds.push(u.id);break;case 40:this.currentState.validCommandIds.push(u.id)}}for(var l=0,c=e;l<c.length;l++){var a=c[l];this.currentState[a].length||delete this.currentState[a]}},t.prototype.changeCommandCaptureStatus=function(e,t){return e.status<t&&(e.status=t,!0)},t.prototype.areStatesEquals=function(e,t){if(typeof e!=typeof t)return!1;if(e&&!t)return!1;if(t&&!e)return!1;if(void 0===e||null===e)return!0;if(e.length&&t.length&&\"string\"!=typeof e){if(e.length!==t.length)return!1;for(var n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}return e===t},t.prototype.isStateEnable=function(e,t){return!0},t.prototype.getSpectorData=function(t){if(t)return{__SPECTOR_Object_TAG:e.WebGlObjects.getWebGlObjectTag(t)||this.options.tagWebGlObject(t),__SPECTOR_Object_CustomData:t.__SPECTOR_Object_CustomData,__SPECTOR_Metadata:t.__SPECTOR_Metadata}},t.prototype.readFromContextNoSideEffects=function(){this.toggleCapture(!1),this.readFromContext(),this.toggleCapture(!0)},t.prototype.isStateEnableNoSideEffects=function(e,t){this.toggleCapture(!1);var n=this.isStateEnable(e,t);return this.toggleCapture(!0),n},t.prototype.getCommandNameToStates=function(){var e={};for(var t in this.changeCommandsByState)if(this.changeCommandsByState.hasOwnProperty(t))for(var n=0,a=this.changeCommandsByState[t];n<a.length;n++){var r=a[n];e[r]=e[r]||[],e[r].push(t)}return e},t}();t.BaseState=n}(e.States||(e.States={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return a(n,t),n.prototype.getWebgl1Parameters=function(){return[]},n.prototype.getWebgl2Parameters=function(){return[]},n.prototype.getChangeCommandsByState=function(){this.parameters=[],this.parameters.push(this.getWebgl1Parameters()),this.contextVersion>1&&this.parameters.push(this.getWebgl2Parameters());for(var e={},t=1;t<=this.contextVersion&&!(t>this.parameters.length);t++)if(this.parameters[t-1])for(var n=0,a=this.parameters[t-1];n<a.length;n++){var r=a[n];if(r.changeCommands)for(var o=0,i=r.changeCommands;o<i.length;o++){var s=i[o];e[r.constant.name]=e[r.constant.name]||[],e[r.constant.name].push(s)}}return e},n.prototype.readFromContext=function(){for(var t=1;t<=this.contextVersion&&!(t>this.parameters.length);t++)for(var n=0,a=this.parameters[t-1];n<a.length;n++){var r=a[n],o=this.readParameterFromContext(r),i=e.WebGlObjects.getWebGlObjectTag(o);if(i)this.currentState[r.constant.name]=i;else{var s=this.stringifyParameterValue(o,r);this.currentState[r.constant.name]=s}}},n.prototype.readParameterFromContext=function(e){return e.constant.extensionName&&!this.extensions[e.constant.extensionName]?\"Extension \"+e.constant.extensionName+\" is unavailble.\":this.context.getParameter(e.constant.value)},n.prototype.stringifyParameterValue=function(t,n){if(null===t)return\"null\";if(void 0===t)return\"undefined\";if(30===n.returnType)return t=t.toString(2),t=\"00000000000000000000000000000000\".substr(t.length)+t;if(\"number\"==typeof t&&e.WebGlConstants.isWebGlConstant(t)){if(20===n.returnType){var a=n.changeCommands?n.changeCommands[0]||\"\":\"\";return t=e.WebGlConstants.stringifyWebGlConstant(t,a)}return t}if(t.length&&\"string\"!=typeof t){for(var r=[],o=0;o<t.length;o++)r.push(t[o]);return r}return t},n}(t.BaseState);t.ParameterState=n}(e.States||(e.States={}))}(n||(n={}));var n;!function(e){!function(t){!function(n){var r=function(t){function n(e,n){var a=t.call(this,e,n)||this;return a.currentState=a.startCapture(),a}return a(n,t),n.prototype.getWebgl1Parameters=function(){return[{constant:e.WebGlConstants.RENDERER},{constant:e.WebGlConstants.VENDOR},{constant:e.WebGlConstants.VERSION},{constant:e.WebGlConstants.SHADING_LANGUAGE_VERSION},{constant:e.WebGlConstants.SAMPLES},{constant:e.WebGlConstants.SAMPLE_BUFFERS},{constant:e.WebGlConstants.RED_BITS},{constant:e.WebGlConstants.GREEN_BITS},{constant:e.WebGlConstants.BLUE_BITS},{constant:e.WebGlConstants.ALPHA_BITS},{constant:e.WebGlConstants.DEPTH_BITS},{constant:e.WebGlConstants.STENCIL_BITS},{constant:e.WebGlConstants.SUBPIXEL_BITS},{constant:e.WebGlConstants.LINE_WIDTH},{constant:e.WebGlConstants.ALIASED_LINE_WIDTH_RANGE},{constant:e.WebGlConstants.ALIASED_POINT_SIZE_RANGE},{constant:e.WebGlConstants.IMPLEMENTATION_COLOR_READ_FORMAT,returnType:20},{constant:e.WebGlConstants.IMPLEMENTATION_COLOR_READ_TYPE,returnType:20},{constant:e.WebGlConstants.MAX_COMBINED_TEXTURE_IMAGE_UNITS},{constant:e.WebGlConstants.MAX_CUBE_MAP_TEXTURE_SIZE},{constant:e.WebGlConstants.MAX_FRAGMENT_UNIFORM_VECTORS},{constant:e.WebGlConstants.MAX_RENDERBUFFER_SIZE},{constant:e.WebGlConstants.MAX_TEXTURE_IMAGE_UNITS},{constant:e.WebGlConstants.MAX_TEXTURE_SIZE},{constant:e.WebGlConstants.MAX_VARYING_VECTORS},{constant:e.WebGlConstants.MAX_VERTEX_ATTRIBS},{constant:e.WebGlConstants.MAX_VERTEX_TEXTURE_IMAGE_UNITS},{constant:e.WebGlConstants.MAX_VERTEX_UNIFORM_VECTORS},{constant:e.WebGlConstants.MAX_VIEWPORT_DIMS},{constant:e.WebGlConstants.MAX_TEXTURE_MAX_ANISOTROPY_EXT},{constant:e.WebGlConstants.MAX_COLOR_ATTACHMENTS_WEBGL},{constant:e.WebGlConstants.MAX_DRAW_BUFFERS_WEBGL}]},n.prototype.getWebgl2Parameters=function(){return[{constant:e.WebGlConstants.MAX_3D_TEXTURE_SIZE},{constant:e.WebGlConstants.MAX_ARRAY_TEXTURE_LAYERS},{constant:e.WebGlConstants.MAX_CLIENT_WAIT_TIMEOUT_WEBGL},{constant:e.WebGlConstants.MAX_COLOR_ATTACHMENTS},{constant:e.WebGlConstants.MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS},{constant:e.WebGlConstants.MAX_COMBINED_UNIFORM_BLOCKS},{constant:e.WebGlConstants.MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS},{constant:e.WebGlConstants.MAX_DRAW_BUFFERS},{constant:e.WebGlConstants.MAX_ELEMENT_INDEX},{constant:e.WebGlConstants.MAX_ELEMENTS_INDICES},{constant:e.WebGlConstants.MAX_ELEMENTS_VERTICES},{constant:e.WebGlConstants.MAX_FRAGMENT_INPUT_COMPONENTS},{constant:e.WebGlConstants.MAX_FRAGMENT_UNIFORM_BLOCKS},{constant:e.WebGlConstants.MAX_FRAGMENT_UNIFORM_COMPONENTS},{constant:e.WebGlConstants.MAX_PROGRAM_TEXEL_OFFSET},{constant:e.WebGlConstants.MAX_SAMPLES},{constant:e.WebGlConstants.MAX_SERVER_WAIT_TIMEOUT},{constant:e.WebGlConstants.MAX_TEXTURE_LOD_BIAS},{constant:e.WebGlConstants.MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS},{constant:e.WebGlConstants.MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS},{constant:e.WebGlConstants.MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS},{constant:e.WebGlConstants.MAX_UNIFORM_BLOCK_SIZE},{constant:e.WebGlConstants.MAX_UNIFORM_BUFFER_BINDINGS},{constant:e.WebGlConstants.MAX_VARYING_COMPONENTS},{constant:e.WebGlConstants.MAX_VERTEX_OUTPUT_COMPONENTS},{constant:e.WebGlConstants.MAX_VERTEX_UNIFORM_BLOCKS},{constant:e.WebGlConstants.MAX_VERTEX_UNIFORM_COMPONENTS},{constant:e.WebGlConstants.MIN_PROGRAM_TEXEL_OFFSET}]},n}(t.ParameterState);n.Capabilities=r}(t.Information||(t.Information={}))}(e.States||(e.States={}))}(n||(n={}));var n;!function(e){!function(t){!function(n){var r=function(t){function n(e,n){var a=t.call(this,e,n)||this;return a.currentState=a.startCapture(),a}return a(n,t),n.prototype.getWebgl1Parameters=function(){return[{constant:e.WebGlConstants.COMPRESSED_TEXTURE_FORMATS}]},n.prototype.stringifyParameterValue=function(t,n){for(var a=[],r=0,o=t;r<o.length;r++){var i=o[r];a.push(e.WebGlConstants.stringifyWebGlConstant(i,\"getParameter\"))}return a},n}(t.ParameterState);n.CompressedTextures=r}(t.Information||(t.Information={}))}(e.States||(e.States={}))}(n||(n={}));var n;!function(e){!function(e){!function(t){var n=function(e){function t(t,n){var a=e.call(this,t,n)||this;return a.extensionDefinition=[[{name:\"ANGLE_instanced_arrays\",description:\"\"},{name:\"EXT_blend_minmax\",description:\"\"},{name:\"EXT_color_buffer_float\",description:\"\"},{name:\"EXT_color_buffer_half_float\",description:\"\"},{name:\"EXT_disjoint_timer_query\",description:\"\"},{name:\"EXT_frag_depth\",description:\"\"},{name:\"EXT_sRGB\",description:\"\"},{name:\"EXT_shader_texture_lod\",description:\"\"},{name:\"EXT_texture_filter_anisotropic\",description:\"\"},{name:\"OES_element_index_uint\",description:\"\"},{name:\"OES_standard_derivatives\",description:\"\"},{name:\"OES_texture_float\",description:\"\"},{name:\"OES_texture_float_linear\",description:\"\"},{name:\"OES_texture_half_float\",description:\"\"},{name:\"OES_texture_half_float_linear\",description:\"\"},{name:\"OES_vertex_array_object\",description:\"\"},{name:\"WEBGL_color_buffer_float\",description:\"\"},{name:\"WEBGL_compressed_texture_astc\",description:\"\"},{name:\"WEBGL_compressed_texture_atc\",description:\"\"},{name:\"WEBGL_compressed_texture_etc\",description:\"\"},{name:\"WEBGL_compressed_texture_etc1\",description:\"\"},{name:\"WEBGL_compressed_texture_s3tc\",description:\"\"},{name:\"WEBGL_depth_texture\",description:\"\"},{name:\"WEBGL_draw_buffers\",description:\"\"}]],a.currentState=a.startCapture(),a}return a(t,e),t.prototype.getExtensions=function(){return this.extensions},t.prototype.readFromContext=function(){for(var e=1;e<=this.contextVersion&&!(e>this.extensionDefinition.length);e++)for(var t=0,n=this.extensionDefinition[e-1];t<n.length;t++){var a=n[t],r=this.context.getExtension(a.name);r?(this.currentState[a.name]=!0,this.extensions[a.name]=r):this.currentState[a.name]=!1}},t}(e.BaseState);t.Extensions=n}(e.Information||(e.Information={}))}(e.States||(e.States={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return a(n,t),n.prototype.getWebgl1Parameters=function(){return[{constant:e.WebGlConstants.PACK_ALIGNMENT,changeCommands:[\"pixelStorei\"]},{constant:e.WebGlConstants.UNPACK_ALIGNMENT,changeCommands:[\"pixelStorei\"]},{constant:e.WebGlConstants.UNPACK_COLORSPACE_CONVERSION_WEBGL,returnType:20,changeCommands:[\"pixelStorei\"]},{constant:e.WebGlConstants.UNPACK_FLIP_Y_WEBGL,changeCommands:[\"pixelStorei\"]},{constant:e.WebGlConstants.UNPACK_PREMULTIPLY_ALPHA_WEBGL,changeCommands:[\"pixelStorei\"]}]},n.prototype.getWebgl2Parameters=function(){return[{constant:e.WebGlConstants.PACK_ROW_LENGTH,changeCommands:[\"pixelStorei\"]},{constant:e.WebGlConstants.PACK_SKIP_PIXELS,changeCommands:[\"pixelStorei\"]},{constant:e.WebGlConstants.PACK_SKIP_ROWS,changeCommands:[\"pixelStorei\"]},{constant:e.WebGlConstants.UNPACK_IMAGE_HEIGHT,changeCommands:[\"pixelStorei\"]},{constant:e.WebGlConstants.UNPACK_SKIP_PIXELS,changeCommands:[\"pixelStorei\"]},{constant:e.WebGlConstants.UNPACK_SKIP_ROWS,changeCommands:[\"pixelStorei\"]},{constant:e.WebGlConstants.UNPACK_SKIP_IMAGES,changeCommands:[\"pixelStorei\"]}]},n.prototype.getConsumeCommands=function(){return[\"readPixels\",\"texImage2D\",\"texSubImage2D\"]},n.prototype.isValidChangeCommand=function(t,n){return e.WebGlConstantsByName[n].value===t.commandArguments[0]},n}(t.ParameterState);n=r([e.Decorators.state(\"AlignmentState\")],n),t.AlignmentState=n}(e.States||(e.States={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(n){function r(){return null!==n&&n.apply(this,arguments)||this}return a(r,n),r.prototype.getWebgl1Parameters=function(){return[{constant:e.WebGlConstants.BLEND,changeCommands:[\"enable\",\"disable\"]},{constant:e.WebGlConstants.BLEND_COLOR,changeCommands:[\"blendColor\"]},{constant:e.WebGlConstants.BLEND_DST_ALPHA,returnType:20,changeCommands:[\"blendFunc\",\"blendFuncSeparate\"]},{constant:e.WebGlConstants.BLEND_DST_RGB,returnType:20,changeCommands:[\"blendFunc\",\"blendFuncSeparate\"]},{constant:e.WebGlConstants.BLEND_EQUATION_ALPHA,returnType:20,changeCommands:[\"blendEquation\",\"blendEquationSeparate\"]},{constant:e.WebGlConstants.BLEND_EQUATION_RGB,returnType:20,changeCommands:[\"blendEquation\",\"blendEquationSeparate\"]},{constant:e.WebGlConstants.BLEND_SRC_ALPHA,returnType:20,changeCommands:[\"blendFunc\",\"blendFuncSeparate\"]},{constant:e.WebGlConstants.BLEND_SRC_RGB,returnType:20,changeCommands:[\"blendFunc\",\"blendFuncSeparate\"]}]},r.prototype.isValidChangeCommand=function(t,n){return\"enable\"!==t.name&&\"disable\"!==t.name||t.commandArguments[0]===e.WebGlConstants.BLEND.value},r.prototype.getConsumeCommands=function(){return t.drawCommands},r.prototype.isStateEnable=function(t,n){return this.context.isEnabled(e.WebGlConstants.BLEND.value)},r}(t.ParameterState);n=r([e.Decorators.state(\"BlendState\")],n),t.BlendState=n}(e.States||(e.States={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return a(n,t),n.prototype.getWebgl1Parameters=function(){return[{constant:e.WebGlConstants.COLOR_CLEAR_VALUE,changeCommands:[\"clearColor\"]},{constant:e.WebGlConstants.DEPTH_CLEAR_VALUE,changeCommands:[\"clearDepth\"]},{constant:e.WebGlConstants.STENCIL_CLEAR_VALUE,changeCommands:[\"clearStencil\"]}]},n.prototype.getConsumeCommands=function(){return[\"clear\"]},n.prototype.isStateEnable=function(t,n){switch(t){case e.WebGlConstants.COLOR_CLEAR_VALUE.name:return e.WebGlConstants.COLOR_BUFFER_BIT.value===(n[0]&e.WebGlConstants.COLOR_BUFFER_BIT.value);case e.WebGlConstants.DEPTH_CLEAR_VALUE.name:return e.WebGlConstants.DEPTH_BUFFER_BIT.value===(n[0]&e.WebGlConstants.DEPTH_BUFFER_BIT.value);case e.WebGlConstants.STENCIL_CLEAR_VALUE.name:return e.WebGlConstants.STENCIL_BUFFER_BIT.value===(n[0]&e.WebGlConstants.STENCIL_BUFFER_BIT.value)}return!1},n}(t.ParameterState);n=r([e.Decorators.state(\"ClearState\")],n),t.ClearState=n}(e.States||(e.States={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(n){function r(){return null!==n&&n.apply(this,arguments)||this}return a(r,n),r.prototype.getWebgl1Parameters=function(){return[{constant:e.WebGlConstants.COLOR_WRITEMASK,changeCommands:[\"colorMask\"]}]},r.prototype.getConsumeCommands=function(){return t.drawCommands},r}(t.ParameterState);n=r([e.Decorators.state(\"ColorState\")],n),t.ColorState=n}(e.States||(e.States={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(n){function r(){return null!==n&&n.apply(this,arguments)||this}return a(r,n),r.prototype.getWebgl1Parameters=function(){return[{constant:e.WebGlConstants.SAMPLE_COVERAGE_VALUE,changeCommands:[\"sampleCoverage\"]},{constant:e.WebGlConstants.SAMPLE_COVERAGE_INVERT,changeCommands:[\"sampleCoverage\"]}]},r.prototype.getWebgl2Parameters=function(){return[{constant:e.WebGlConstants.SAMPLE_COVERAGE,changeCommands:[\"enable\",\"disable\"]},{constant:e.WebGlConstants.SAMPLE_ALPHA_TO_COVERAGE,changeCommands:[\"enable\",\"disable\"]}]},r.prototype.isValidChangeCommand=function(t,n){return\"enable\"!==t.name&&\"disable\"!==t.name||(t.commandArguments[0]===e.WebGlConstants.SAMPLE_COVERAGE.value?n===e.WebGlConstants.SAMPLE_COVERAGE.name:t.commandArguments[0]===e.WebGlConstants.SAMPLE_ALPHA_TO_COVERAGE.value&&n===e.WebGlConstants.SAMPLE_ALPHA_TO_COVERAGE.name)},r.prototype.getConsumeCommands=function(){return t.drawCommands},r.prototype.isStateEnable=function(t,n){return 2===this.contextVersion&&this.context.isEnabled(e.WebGlConstants.SAMPLE_COVERAGE.value)},r}(t.ParameterState);n=r([e.Decorators.state(\"CoverageState\")],n),t.CoverageState=n}(e.States||(e.States={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(n){function r(){return null!==n&&n.apply(this,arguments)||this}return a(r,n),r.prototype.getWebgl1Parameters=function(){return[{constant:e.WebGlConstants.CULL_FACE,changeCommands:[\"enable\",\"disable\"]},{constant:e.WebGlConstants.CULL_FACE_MODE,returnType:20,changeCommands:[\"cullFace\"]}]},r.prototype.getConsumeCommands=function(){return t.drawCommands},r.prototype.isValidChangeCommand=function(t,n){return\"enable\"!==t.name&&\"disable\"!==t.name||t.commandArguments[0]===e.WebGlConstants.CULL_FACE.value},r.prototype.isStateEnable=function(t,n){return this.context.isEnabled(e.WebGlConstants.CULL_FACE.value)},r}(t.ParameterState);n=r([e.Decorators.state(\"CullState\")],n),t.CullState=n}(e.States||(e.States={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(n){function r(){return null!==n&&n.apply(this,arguments)||this}return a(r,n),r.prototype.getWebgl1Parameters=function(){return[{constant:e.WebGlConstants.DEPTH_TEST,changeCommands:[\"enable\",\"disable\"]},{constant:e.WebGlConstants.DEPTH_FUNC,returnType:20,changeCommands:[\"depthFunc\"]},{constant:e.WebGlConstants.DEPTH_RANGE,changeCommands:[\"depthMask\"]},{constant:e.WebGlConstants.DEPTH_WRITEMASK,changeCommands:[\"depthRange\"]}]},r.prototype.getConsumeCommands=function(){return t.drawCommands},r.prototype.isValidChangeCommand=function(t,n){return\"enable\"!==t.name&&\"disable\"!==t.name||t.commandArguments[0]===e.WebGlConstants.DEPTH_TEST.value},r.prototype.isStateEnable=function(t,n){return this.context.isEnabled(e.WebGlConstants.DEPTH_TEST.value)},r}(t.ParameterState);n=r([e.Decorators.state(\"DepthState\")],n),t.DepthState=n}(e.States||(e.States={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(n){function r(){return null!==n&&n.apply(this,arguments)||this}return a(r,n),r.prototype.getWebgl1Parameters=function(){return[{constant:e.WebGlConstants.DITHER,changeCommands:[\"enable\",\"disable\"]},{constant:e.WebGlConstants.VIEWPORT,changeCommands:[\"viewPort\"]},{constant:e.WebGlConstants.FRONT_FACE,returnType:20,changeCommands:[\"frontFace\"]},{constant:e.WebGlConstants.FRAGMENT_SHADER_DERIVATIVE_HINT_OES,changeCommands:[\"hint\"]}]},r.prototype.getWebgl2Parameters=function(){return[{constant:e.WebGlConstants.RASTERIZER_DISCARD,changeCommands:[\"enable\",\"disable\"]},{constant:e.WebGlConstants.FRAGMENT_SHADER_DERIVATIVE_HINT,changeCommands:[\"hint\"]}]},r.prototype.isValidChangeCommand=function(t,n){return\"enable\"===t.name||\"disable\"===t.name?t.commandArguments[0]===e.WebGlConstants.DITHER.value?n===e.WebGlConstants.DITHER.name:t.commandArguments[0]===e.WebGlConstants.RASTERIZER_DISCARD.value&&n===e.WebGlConstants.RASTERIZER_DISCARD.name:\"hint\"!==t.name||(t.commandArguments[0]===e.WebGlConstants.FRAGMENT_SHADER_DERIVATIVE_HINT_OES.value?n===e.WebGlConstants.FRAGMENT_SHADER_DERIVATIVE_HINT_OES.name:t.commandArguments[0]===e.WebGlConstants.FRAGMENT_SHADER_DERIVATIVE_HINT.value&&n===e.WebGlConstants.FRAGMENT_SHADER_DERIVATIVE_HINT.name)},r.prototype.getConsumeCommands=function(){return t.drawCommands},r.prototype.isStateEnable=function(t,n){switch(t){case e.WebGlConstants.DITHER.name:return this.context.isEnabled(e.WebGlConstants.DITHER.value);case e.WebGlConstants.RASTERIZER_DISCARD.name:return this.context.isEnabled(e.WebGlConstants.RASTERIZER_DISCARD.value)}return!0},r}(t.ParameterState);n=r([e.Decorators.state(\"DrawState\")],n),t.DrawState=n}(e.States||(e.States={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return a(n,t),n.prototype.getWebgl1Parameters=function(){return[{constant:e.WebGlConstants.GENERATE_MIPMAP_HINT,changeCommands:[\"hint\"]}]},n.prototype.getConsumeCommands=function(){return[\"generateMipmap\"]},n}(t.ParameterState);n=r([e.Decorators.state(\"MipmapHintState\")],n),t.MipmapHintState=n}(e.States||(e.States={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(n){function r(){return null!==n&&n.apply(this,arguments)||this}return a(r,n),r.prototype.getWebgl1Parameters=function(){return[{constant:e.WebGlConstants.POLYGON_OFFSET_FILL,changeCommands:[\"enable\",\"disable\"]},{constant:e.WebGlConstants.POLYGON_OFFSET_FACTOR,changeCommands:[\"polygonOffset\"]},{constant:e.WebGlConstants.POLYGON_OFFSET_UNITS,changeCommands:[\"polygonOffset\"]}]},r.prototype.isValidChangeCommand=function(t,n){return\"enable\"!==t.name&&\"disable\"!==t.name||t.commandArguments[0]===e.WebGlConstants.POLYGON_OFFSET_FILL.value},r.prototype.getConsumeCommands=function(){return t.drawCommands},r.prototype.isStateEnable=function(t,n){return this.context.isEnabled(e.WebGlConstants.POLYGON_OFFSET_FILL.value)},r}(t.ParameterState);n=r([e.Decorators.state(\"PolygonOffsetState\")],n),t.PolygonOffsetState=n}(e.States||(e.States={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(n){function r(){return null!==n&&n.apply(this,arguments)||this}return a(r,n),r.prototype.getWebgl1Parameters=function(){return[{constant:e.WebGlConstants.SCISSOR_TEST,changeCommands:[\"enable\",\"disable\"]},{constant:e.WebGlConstants.SCISSOR_BOX,changeCommands:[\"scissor\"]}]},r.prototype.isValidChangeCommand=function(t,n){return\"enable\"!==t.name&&\"disable\"!==t.name||t.commandArguments[0]===e.WebGlConstants.SCISSOR_TEST.value},r.prototype.getConsumeCommands=function(){return t.drawCommands},r.prototype.isStateEnable=function(t,n){return this.context.isEnabled(e.WebGlConstants.SCISSOR_TEST.value)},r}(t.ParameterState);n=r([e.Decorators.state(\"ScissorState\")],n),t.ScissorState=n}(e.States||(e.States={}))}(n||(n={}));var n;!function(e){!function(t){var n=o=function(n){function r(){return null!==n&&n.apply(this,arguments)||this}return a(r,n),r.prototype.getWebgl1Parameters=function(){return[{constant:e.WebGlConstants.STENCIL_TEST,changeCommands:[\"enable\",\"disable\"]},{constant:e.WebGlConstants.STENCIL_BACK_FAIL,returnType:20,changeCommands:[\"stencilOp\",\"stencilOpSeparate\"]},{constant:e.WebGlConstants.STENCIL_BACK_FUNC,returnType:20,changeCommands:[\"stencilFunc\",\"stencilFuncSeparate\"]},{constant:e.WebGlConstants.STENCIL_BACK_PASS_DEPTH_FAIL,returnType:20,changeCommands:[\"stencilOp\",\"stencilOpSeparate\"]},{constant:e.WebGlConstants.STENCIL_BACK_PASS_DEPTH_PASS,returnType:20,changeCommands:[\"stencilOp\",\"stencilOpSeparate\"]},{constant:e.WebGlConstants.STENCIL_BACK_REF,changeCommands:[\"stencilFunc\",\"stencilFuncSeparate\"]},{constant:e.WebGlConstants.STENCIL_BACK_VALUE_MASK,returnType:30,changeCommands:[\"stencilFunc\",\"stencilFuncSeparate\"]},{constant:e.WebGlConstants.STENCIL_BACK_WRITEMASK,returnType:30,changeCommands:[\"stencilMask\",\"stencilMaskSeparate\"]},{constant:e.WebGlConstants.STENCIL_FAIL,returnType:20,changeCommands:[\"stencilOp\",\"stencilOpSeparate\"]},{constant:e.WebGlConstants.STENCIL_FUNC,returnType:20,changeCommands:[\"stencilFunc\",\"stencilFuncSeparate\"]},{constant:e.WebGlConstants.STENCIL_PASS_DEPTH_FAIL,returnType:20,changeCommands:[\"stencilOp\",\"stencilOpSeparate\"]},{constant:e.WebGlConstants.STENCIL_PASS_DEPTH_PASS,returnType:20,changeCommands:[\"stencilOp\",\"stencilOpSeparate\"]},{constant:e.WebGlConstants.STENCIL_REF,changeCommands:[\"stencilFunc\",\"stencilFuncSeparate\"]},{constant:e.WebGlConstants.STENCIL_VALUE_MASK,returnType:30,changeCommands:[\"stencilFunc\",\"stencilFuncSeparate\"]},{constant:e.WebGlConstants.STENCIL_WRITEMASK,returnType:30,changeCommands:[\"stencilMask\",\"stencilMaskSeparate\"]}]},r.prototype.isValidChangeCommand=function(t,n){return\"enable\"===t.name||\"disable\"===t.name?t.commandArguments[0]===e.WebGlConstants.STENCIL_TEST.value:\"stencilOp\"===t.name||\"stencilOpSeparate\"===t.name?o.stencilOpStates.indexOf(t.commandArguments[0])>0:\"stencilFunc\"===t.name||\"stencilFuncSeparate\"===t.name?o.stencilFuncStates.indexOf(t.commandArguments[0])>0:\"stencilMask\"!==t.name&&\"stencilMaskSeparate\"!==t.name||o.stencilMaskStates.indexOf(t.commandArguments[0])>0},r.prototype.getConsumeCommands=function(){return t.drawCommands},r.prototype.isStateEnable=function(t,n){return this.context.isEnabled(e.WebGlConstants.STENCIL_TEST.value)},r}(t.ParameterState);n.stencilOpStates=[e.WebGlConstants.STENCIL_BACK_FAIL.value,e.WebGlConstants.STENCIL_BACK_PASS_DEPTH_FAIL.value,e.WebGlConstants.STENCIL_BACK_PASS_DEPTH_PASS.value,e.WebGlConstants.STENCIL_FAIL.value,e.WebGlConstants.STENCIL_PASS_DEPTH_FAIL.value,e.WebGlConstants.STENCIL_PASS_DEPTH_PASS.value],n.stencilFuncStates=[e.WebGlConstants.STENCIL_BACK_FUNC.value,e.WebGlConstants.STENCIL_BACK_REF.value,e.WebGlConstants.STENCIL_BACK_VALUE_MASK.value,e.WebGlConstants.STENCIL_FUNC.value,e.WebGlConstants.STENCIL_REF.value,e.WebGlConstants.STENCIL_VALUE_MASK.value],n.stencilMaskStates=[e.WebGlConstants.STENCIL_BACK_WRITEMASK.value,e.WebGlConstants.STENCIL_WRITEMASK.value],n=o=r([e.Decorators.state(\"StencilState\")],n),t.StencilState=n;var o}(e.States||(e.States={}))}(n||(n={}));var n;!function(e){!function(t){var n=o=function(n){function r(e,t){var a=n.call(this,e,t)||this;return a.captureFrameBuffer=e.context.createFramebuffer(),a.workingCanvas=document.createElement(\"canvas\"),a.workingContext2D=a.workingCanvas.getContext(\"2d\"),a.captureCanvas=document.createElement(\"canvas\"),a.captureContext2D=a.captureCanvas.getContext(\"2d\"),a.captureContext2D.imageSmoothingEnabled=!0,a.captureContext2D.mozImageSmoothingEnabled=!0,a.captureContext2D.oImageSmoothingEnabled=!0,a.captureContext2D.webkitImageSmoothingEnabled=!0,a.captureContext2D.msImageSmoothingEnabled=!0,a}return a(r,n),r.prototype.getConsumeCommands=function(){return[\"clear\",\"clearBufferfv\",\"clearBufferiv\",\"clearBufferuiv\",\"clearBufferfi\"].concat(t.drawCommands)},r.prototype.readFromContext=function(){var t=this.context;this.currentState.Attachments=[];var n=this.context.getParameter(e.WebGlConstants.FRAMEBUFFER_BINDING.value);if(!n)return this.currentState.FrameBuffer=null,void this.getCapture(t,\"Canvas COLOR_ATTACHMENT\",0,0,t.drawingBufferWidth,t.drawingBufferHeight,0,0,e.WebGlConstants.UNSIGNED_BYTE.value);var a=t.getParameter(t.VIEWPORT),r=a[0],o=a[1],i=a[2],s=a[3];this.currentState.FrameBuffer=this.getSpectorData(n);var u=this.context.checkFramebufferStatus(e.WebGlConstants.FRAMEBUFFER.value);if(this.currentState.FrameBufferStatus=e.WebGlConstantsByValue[u].name,u===e.WebGlConstants.FRAMEBUFFER_COMPLETE.value){if(this.extensions[e.WebGlConstants.MAX_DRAW_BUFFERS_WEBGL.extensionName])for(var l=this.context.getParameter(e.WebGlConstants.MAX_DRAW_BUFFERS_WEBGL.value),c=0;c<l;c++)this.readFrameBufferAttachmentFromContext(this.context,n,e.WebGlConstantsByName[\"COLOR_ATTACHMENT\"+c+\"_WEBGL\"],r,o,i,s);else if(this.contextVersion>1)for(var m=this.context,l=m.getParameter(e.WebGlConstants.MAX_DRAW_BUFFERS.value),c=0;c<l;c++)this.readFrameBufferAttachmentFromContext(this.context,n,e.WebGlConstantsByName[\"COLOR_ATTACHMENT\"+c],r,o,i,s);else this.readFrameBufferAttachmentFromContext(this.context,n,e.WebGlConstantsByName.COLOR_ATTACHMENT0,r,o,i,s)}},r.prototype.readFrameBufferAttachmentFromContext=function(t,n,a,r,o,i,s){var u=e.WebGlConstants.FRAMEBUFFER.value,l=this.context.getFramebufferAttachmentParameter(u,a.value,e.WebGlConstants.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE.value);if(l!==e.WebGlConstants.NONE.value){var c=this.context.getFramebufferAttachmentParameter(u,a.value,e.WebGlConstants.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME.value);if(c){var m=this.contextVersion>1?this.context.getFramebufferAttachmentParameter(u,a.value,e.WebGlConstants.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE.value):e.WebGlConstants.UNSIGNED_BYTE.value;if(l===e.WebGlConstants.RENDERBUFFER.value){if(t.bindFramebuffer(e.WebGlConstants.FRAMEBUFFER.value,this.captureFrameBuffer),t.framebufferRenderbuffer(e.WebGlConstants.FRAMEBUFFER.value,e.WebGlConstants.COLOR_ATTACHMENT0.value,e.WebGlConstants.RENDERBUFFER.value,c),c.__SPECTOR_Object_CustomData){var d=c.__SPECTOR_Object_CustomData;if(i=d.width,s=d.height,!e.ReadPixelsHelper.isSupportedCombination(m,e.WebGlConstants.RGBA.value,d.internalFormat))return}this.getCapture(t,a.name,r,o,i,s,0,0,m),t.bindFramebuffer(e.WebGlConstants.FRAMEBUFFER.value,n)}else if(l===e.WebGlConstants.TEXTURE.value){var p=0;this.contextVersion>1&&(p=this.context.getFramebufferAttachmentParameter(u,a.value,e.WebGlConstants.FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER.value));var E=this.context.getFramebufferAttachmentParameter(u,a.value,e.WebGlConstants.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL.value),C=this.context.getFramebufferAttachmentParameter(u,a.value,e.WebGlConstants.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE.value),_=(C>0?e.WebGlConstantsByValue[C].name:e.WebGlConstants.TEXTURE_2D.name,m);if(c.__SPECTOR_Object_CustomData){var d=c.__SPECTOR_Object_CustomData;if(i=d.width,s=d.height,_=d.type,!e.ReadPixelsHelper.isSupportedCombination(d.type,d.format,d.internalFormat))return}t.bindFramebuffer(e.WebGlConstants.FRAMEBUFFER.value,this.captureFrameBuffer),0===p?t.framebufferTexture2D(e.WebGlConstants.FRAMEBUFFER.value,e.WebGlConstants.COLOR_ATTACHMENT0.value,C||e.WebGlConstants.TEXTURE_2D.value,c,E):t.framebufferTextureLayer(e.WebGlConstants.FRAMEBUFFER.value,e.WebGlConstants.COLOR_ATTACHMENT0.value,c,E,p);var h=this.context.checkFramebufferStatus(e.WebGlConstants.FRAMEBUFFER.value);h===e.WebGlConstants.FRAMEBUFFER_COMPLETE.value&&this.getCapture(t,a.name,r,o,i,s,C,p,_),t.bindFramebuffer(e.WebGlConstants.FRAMEBUFFER.value,n)}}}},r.prototype.getCapture=function(t,n,a,r,i,s,u,l,c){var m={attachmentName:n,src:null,textureCubeMapFace:u?e.WebGlConstantsByValue[u].name:null,textureLayer:l};try{var d=e.ReadPixelsHelper.readPixels(t,a,r,i,s,c);if(d){this.workingCanvas.width=i,this.workingCanvas.height=s;var p=this.workingContext2D.createImageData(i,s);p.data.set(d),this.workingContext2D.putImageData(p,0,0);var E=i/s;E<1?(this.captureCanvas.width=o.captureBaseSize*E,this.captureCanvas.height=o.captureBaseSize):E>1?(this.captureCanvas.width=o.captureBaseSize,this.captureCanvas.height=o.captureBaseSize/E):(this.captureCanvas.width=o.captureBaseSize,this.captureCanvas.height=o.captureBaseSize),this.captureCanvas.width=Math.max(this.captureCanvas.width,1),this.captureCanvas.height=Math.max(this.captureCanvas.height,1),this.captureContext2D.globalCompositeOperation=\"copy\",this.captureContext2D.scale(1,-1),this.captureContext2D.translate(0,-this.captureCanvas.height),this.captureContext2D.drawImage(this.workingCanvas,0,0,i,s,0,0,this.captureCanvas.width,this.captureCanvas.height),this.captureContext2D.setTransform(1,0,0,1,0,0),this.captureContext2D.globalCompositeOperation=\"source-over\",m.src=this.captureCanvas.toDataURL()}}catch(e){}this.currentState.Attachments.push(m)},r.prototype.analyse=function(e){},r}(t.BaseState);n.captureBaseSize=256,n=o=r([e.Decorators.state(\"VisualState\")],n),t.VisualState=n;var o}(e.States||(e.States={}))}(n||(n={}));var n;!function(e){!function(t){var n=o=function(n){function r(e,a){var r=n.call(this,e,a)||this;return r.drawCallTextureInputState=new t.DrawCallTextureInputState(e,a),r.drawCallUboInputState=new t.DrawCallUboInputState(e,a),r}return a(r,n),Object.defineProperty(r.prototype,\"requireStartAndStopStates\",{get:function(){return!1},enumerable:!0,configurable:!0}),r.prototype.getConsumeCommands=function(){return t.drawCommands},r.prototype.getChangeCommandsByState=function(){return{}},r.prototype.readFromContext=function(){var t=this.context.getParameter(e.WebGlConstants.CURRENT_PROGRAM.value);if(t){this.currentState.frameBuffer=this.readFrameBufferFromContext(),this.currentState.programStatus={program:this.getSpectorData(t),DELETE_STATUS:this.context.getProgramParameter(t,e.WebGlConstants.DELETE_STATUS.value),LINK_STATUS:this.context.getProgramParameter(t,e.WebGlConstants.LINK_STATUS.value),VALIDATE_STATUS:this.context.getProgramParameter(t,e.WebGlConstants.VALIDATE_STATUS.value)};var n=this.context.getAttachedShaders(t);this.currentState.shaders=[];for(var a=0,r=n;a<r.length;a++){var i=r[a],s=this.readShaderFromContext(i);this.currentState.shaders.push(s)}var u=this.context.getProgramParameter(t,e.WebGlConstants.ACTIVE_ATTRIBUTES.value);this.currentState.attributes=[];for(var l=0;l<u;l++){var c=this.readAttributeFromContext(t,l);this.currentState.attributes.push(c)}var m=this.context.getProgramParameter(t,e.WebGlConstants.ACTIVE_UNIFORMS.value);this.currentState.uniforms=[];for(var d=[],l=0;l<m;l++){d.push(l);var p=this.readUniformFromContext(t,l);this.currentState.uniforms.push(p)}if(this.contextVersion>1){this.readUniformsFromContextIntoState(t,d,this.currentState.uniforms);var E=this.context.getProgramParameter(t,e.WebGlConstants.ACTIVE_UNIFORM_BLOCKS.value);this.currentState.uniformBlocks=[];for(var l=0;l<E;l++){var C=this.readUniformBlockFromContext(t,l);this.currentState.uniformBlocks.push(C)}if(this.context.getParameter(e.WebGlConstants.TRANSFORM_FEEDBACK_ACTIVE.value)){var _=this.context.getProgramParameter(t,e.WebGlConstants.TRANSFORM_FEEDBACK_BUFFER_MODE.value);this.currentState.transformFeedbackMode=this.getWebGlConstant(_),this.currentState.transformFeedbacks=[];for(var h=this.context.getProgramParameter(t,e.WebGlConstants.TRANSFORM_FEEDBACK_VARYINGS.value),l=0;l<h;l++){var f=this.readTransformFeedbackFromContext(t,l);this.currentState.transformFeedbacks.push(f)}}}for(var l=0;l<d.length;l++){var p=this.currentState.uniforms[l];if(null!==p.value&&void 0!==p.value){var T=o.samplerTypes[p.typeValue];if(T)if(p.value.length){p.textures=[];for(var v=0;v<p.value.length;v++)p.textures.push(this.readTextureFromContext(p.value[v],T))}else p.texture=this.readTextureFromContext(p.value,T)}delete p.typeValue}}},r.prototype.readFrameBufferFromContext=function(){var t=this.context.getParameter(e.WebGlConstants.FRAMEBUFFER_BINDING.value);if(!t)return null;var n={};if(n.frameBuffer=this.getSpectorData(t),this.readFrameBufferAttachmentFromContext(e.WebGlConstants.DEPTH_ATTACHMENT.value)&&(n.depthAttachment=this.readFrameBufferAttachmentFromContext(e.WebGlConstants.DEPTH_ATTACHMENT.value)),this.readFrameBufferAttachmentFromContext(e.WebGlConstants.STENCIL_ATTACHMENT.value)&&(n.stencilAttachment=this.readFrameBufferAttachmentFromContext(e.WebGlConstants.STENCIL_ATTACHMENT.value)),this.extensions[e.WebGlConstants.MAX_DRAW_BUFFERS_WEBGL.extensionName]){n.colorAttachments=[];for(var a=this.context.getParameter(e.WebGlConstants.MAX_DRAW_BUFFERS_WEBGL.value),r=0;r<a;r++){var o=this.readFrameBufferAttachmentFromContext(e.WebGlConstantsByName[\"COLOR_ATTACHMENT\"+r+\"_WEBGL\"].value);o&&n.colorAttachments.push(o)}}else if(this.contextVersion>1){var i=this.context;n.colorAttachments=[];for(var a=i.getParameter(e.WebGlConstants.MAX_DRAW_BUFFERS.value),r=0;r<a;r++){var o=this.readFrameBufferAttachmentFromContext(e.WebGlConstantsByName[\"COLOR_ATTACHMENT\"+r].value);o&&n.colorAttachments.push(o)}}else{var o=this.readFrameBufferAttachmentFromContext(e.WebGlConstantsByName.COLOR_ATTACHMENT0.value);o&&(n.colorAttachments=[o])}return n},r.prototype.readFrameBufferAttachmentFromContext=function(t){var n=e.WebGlConstants.FRAMEBUFFER.value,a=this.context.getFramebufferAttachmentParameter(n,t,e.WebGlConstants.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE.value);if(a!==e.WebGlConstants.NONE.value){var r={},o=this.context.getFramebufferAttachmentParameter(n,t,e.WebGlConstants.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME.value);if(a===e.WebGlConstants.RENDERBUFFER.value){if(r.type=\"RENDERBUFFER\",r.buffer=this.getSpectorData(o),o){var i=o.__SPECTOR_Object_CustomData;i&&(i.internalFormat&&(r.internalFormat=this.getWebGlConstant(i.internalFormat)),r.width=i.width,r.height=i.height)}}else if(a===e.WebGlConstants.TEXTURE.value){r.type=\"TEXTURE\",r.texture=this.getSpectorData(o),r.textureLevel=this.context.getFramebufferAttachmentParameter(n,t,e.WebGlConstants.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL.value);var s=this.context.getFramebufferAttachmentParameter(n,t,e.WebGlConstants.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE.value);r.textureCubeMapFace=this.getWebGlConstant(s),this.drawCallTextureInputState.appendTextureState(r,o)}return this.extensions.EXT_sRGB&&(r.encoding=this.getWebGlConstant(this.context.getFramebufferAttachmentParameter(n,t,e.WebGlConstants.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT.value))),this.contextVersion>1&&(r.alphaSize=this.context.getFramebufferAttachmentParameter(n,t,e.WebGlConstants.FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE.value),r.blueSize=this.context.getFramebufferAttachmentParameter(n,t,e.WebGlConstants.FRAMEBUFFER_ATTACHMENT_BLUE_SIZE.value),r.encoding=this.getWebGlConstant(this.context.getFramebufferAttachmentParameter(n,t,e.WebGlConstants.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING.value)),r.componentType=this.getWebGlConstant(this.context.getFramebufferAttachmentParameter(n,t,e.WebGlConstants.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE.value)),r.depthSize=this.context.getFramebufferAttachmentParameter(n,t,e.WebGlConstants.FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE.value),r.greenSize=this.context.getFramebufferAttachmentParameter(n,t,e.WebGlConstants.FRAMEBUFFER_ATTACHMENT_GREEN_SIZE.value),r.redSize=this.context.getFramebufferAttachmentParameter(n,t,e.WebGlConstants.FRAMEBUFFER_ATTACHMENT_RED_SIZE.value),r.stencilSize=this.context.getFramebufferAttachmentParameter(n,t,e.WebGlConstants.FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE.value),a===e.WebGlConstants.TEXTURE.value&&(r.textureLayer=this.context.getFramebufferAttachmentParameter(n,t,e.WebGlConstants.FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER.value))),r}},r.prototype.readShaderFromContext=function(t){return{shader:this.getSpectorData(t),COMPILE_STATUS:this.context.getShaderParameter(t,e.WebGlConstants.COMPILE_STATUS.value),DELETE_STATUS:this.context.getShaderParameter(t,e.WebGlConstants.DELETE_STATUS.value),SHADER_TYPE:this.getWebGlConstant(this.context.getShaderParameter(t,e.WebGlConstants.SHADER_TYPE.value)),source:this.context.getShaderSource(t)}},r.prototype.readAttributeFromContext=function(t,n){var a=this.context.getActiveAttrib(t,n),r=this.context.getAttribLocation(t,a.name);if(-1===r)return{name:a.name,size:a.size,type:this.getWebGlConstant(a.type),location:-1};var o=this.context.getVertexAttrib(r,e.WebGlConstants.CURRENT_VERTEX_ATTRIB.value),i=this.context.getVertexAttrib(r,e.WebGlConstants.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING.value),s={name:a.name,size:a.size,type:this.getWebGlConstant(a.type),location:r,offsetPointer:this.context.getVertexAttribOffset(r,e.WebGlConstants.VERTEX_ATTRIB_ARRAY_POINTER.value),bufferBinding:this.getSpectorData(i),enabled:this.context.getVertexAttrib(r,e.WebGlConstants.VERTEX_ATTRIB_ARRAY_ENABLED.value),arraySize:this.context.getVertexAttrib(r,e.WebGlConstants.VERTEX_ATTRIB_ARRAY_SIZE.value),stride:this.context.getVertexAttrib(r,e.WebGlConstants.VERTEX_ATTRIB_ARRAY_STRIDE.value),arrayType:this.getWebGlConstant(this.context.getVertexAttrib(r,e.WebGlConstants.VERTEX_ATTRIB_ARRAY_TYPE.value)),normalized:this.context.getVertexAttrib(r,e.WebGlConstants.VERTEX_ATTRIB_ARRAY_NORMALIZED.value),vertexAttrib:Array.prototype.slice.call(o)};return this.extensions[e.WebGlConstants.VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE.extensionName]?s.divisor=this.context.getVertexAttrib(r,e.WebGlConstants.VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE.value):this.contextVersion>1&&(s.integer=this.context.getVertexAttrib(r,e.WebGlConstants.VERTEX_ATTRIB_ARRAY_INTEGER.value),s.divisor=this.context.getVertexAttrib(r,e.WebGlConstants.VERTEX_ATTRIB_ARRAY_DIVISOR.value)),this.appendBufferCustomData(s,i),s},r.prototype.readUniformFromContext=function(e,t){var n=this.context.getActiveUniform(e,t),a=this.context.getUniformLocation(e,n.name);if(a){var r=this.context.getUniform(e,a);r.length&&(r=Array.prototype.slice.call(r));var o={name:n.name,size:n.size,type:this.getWebGlConstant(n.type),typeValue:n.type,location:this.getSpectorData(a),value:r};return o}var o={name:n.name,size:n.size,type:this.getWebGlConstant(n.type),typeValue:n.type};return o},r.prototype.readTextureFromContext=function(t,n){var a=this.context.getParameter(e.WebGlConstants.ACTIVE_TEXTURE.value);this.context.activeTexture(e.WebGlConstants.TEXTURE0.value+t);var r={magFilter:this.getWebGlConstant(this.context.getTexParameter(n.value,e.WebGlConstants.TEXTURE_MAG_FILTER.value)),minFilter:this.getWebGlConstant(this.context.getTexParameter(n.value,e.WebGlConstants.TEXTURE_MIN_FILTER.value)),wrapS:this.getWebGlConstant(this.context.getTexParameter(n.value,e.WebGlConstants.TEXTURE_WRAP_S.value)),wrapT:this.getWebGlConstant(this.context.getTexParameter(n.value,e.WebGlConstants.TEXTURE_WRAP_T.value))};if(this.extensions[e.WebGlConstants.TEXTURE_MAX_ANISOTROPY_EXT.extensionName]&&(r.anisotropy=this.context.getTexParameter(n.value,e.WebGlConstants.TEXTURE_MAX_ANISOTROPY_EXT.value)),this.contextVersion>1){r.baseLevel=this.context.getTexParameter(n.value,e.WebGlConstants.TEXTURE_BASE_LEVEL.value),r.immutable=this.context.getTexParameter(n.value,e.WebGlConstants.TEXTURE_IMMUTABLE_FORMAT.value),r.immutableLevels=this.context.getTexParameter(n.value,e.WebGlConstants.TEXTURE_IMMUTABLE_LEVELS.value),r.maxLevel=this.context.getTexParameter(n.value,e.WebGlConstants.TEXTURE_IMMUTABLE_LEVELS.value);var o=this.context.getParameter(e.WebGlConstants.SAMPLER_BINDING.value);if(o){r.sampler=this.getSpectorData(o);var i=this.context;r.samplerMaxLod=i.getSamplerParameter(o,e.WebGlConstants.TEXTURE_IMMUTABLE_LEVELS.value),r.samplerMinLod=i.getSamplerParameter(o,e.WebGlConstants.TEXTURE_IMMUTABLE_LEVELS.value),r.samplerCompareFunc=this.getWebGlConstant(i.getSamplerParameter(o,e.WebGlConstants.TEXTURE_COMPARE_FUNC.value)),r.samplerCompareMode=this.getWebGlConstant(i.getSamplerParameter(o,e.WebGlConstants.TEXTURE_COMPARE_MODE.value)),r.samplerWrapS=this.getWebGlConstant(i.getSamplerParameter(o,e.WebGlConstants.TEXTURE_WRAP_S.value)),r.samplerWrapT=this.getWebGlConstant(i.getSamplerParameter(o,e.WebGlConstants.TEXTURE_WRAP_T.value)),r.samplerWrapR=this.getWebGlConstant(i.getSamplerParameter(o,e.WebGlConstants.TEXTURE_IMMUTABLE_LEVELS.value)),r.samplerMagFilter=this.getWebGlConstant(i.getSamplerParameter(o,e.WebGlConstants.TEXTURE_MAG_FILTER.value)),r.samplerMinFilter=this.getWebGlConstant(i.getSamplerParameter(o,e.WebGlConstants.TEXTURE_MIN_FILTER.value))}else r.maxLod=this.context.getTexParameter(n.value,e.WebGlConstants.TEXTURE_IMMUTABLE_LEVELS.value),r.minLod=this.context.getTexParameter(n.value,e.WebGlConstants.TEXTURE_IMMUTABLE_LEVELS.value),r.compareFunc=this.getWebGlConstant(this.context.getTexParameter(n.value,e.WebGlConstants.TEXTURE_COMPARE_FUNC.value)),r.compareMode=this.getWebGlConstant(this.context.getTexParameter(n.value,e.WebGlConstants.TEXTURE_COMPARE_MODE.value)),r.wrapR=this.getWebGlConstant(this.context.getTexParameter(n.value,e.WebGlConstants.TEXTURE_IMMUTABLE_LEVELS.value))}var s=this.getTextureStorage(n);return s&&this.drawCallTextureInputState.appendTextureState(r,s,n),this.context.activeTexture(a),r},r.prototype.getTextureStorage=function(t){return t===e.WebGlConstants.TEXTURE_2D?this.context.getParameter(e.WebGlConstants.TEXTURE_BINDING_2D.value):t===e.WebGlConstants.TEXTURE_CUBE_MAP?this.context.getParameter(e.WebGlConstants.TEXTURE_BINDING_CUBE_MAP.value):t===e.WebGlConstants.TEXTURE_3D?this.context.getParameter(e.WebGlConstants.TEXTURE_BINDING_3D.value):t===e.WebGlConstants.TEXTURE_2D_ARRAY?this.context.getParameter(e.WebGlConstants.TEXTURE_BINDING_2D_ARRAY.value):void 0},r.prototype.readUniformsFromContextIntoState=function(t,n,a){for(var r=this.context,o=r.getActiveUniforms(t,n,e.WebGlConstants.UNIFORM_TYPE.value),i=r.getActiveUniforms(t,n,e.WebGlConstants.UNIFORM_SIZE.value),s=r.getActiveUniforms(t,n,e.WebGlConstants.UNIFORM_BLOCK_INDEX.value),u=r.getActiveUniforms(t,n,e.WebGlConstants.UNIFORM_OFFSET.value),l=r.getActiveUniforms(t,n,e.WebGlConstants.UNIFORM_ARRAY_STRIDE.value),c=r.getActiveUniforms(t,n,e.WebGlConstants.UNIFORM_MATRIX_STRIDE.value),m=r.getActiveUniforms(t,n,e.WebGlConstants.UNIFORM_IS_ROW_MAJOR.value),d=0;d<n.length;d++){var p=a[d];p.type=this.getWebGlConstant(o[d]),p.size=i[d],p.blockIndice=s[d],p.blockIndice>-1&&(p.blockName=r.getActiveUniformBlockName(t,p.blockIndice)),p.offset=u[d],p.arrayStride=l[d],p.matrixStride=c[d],p.rowMajor=m[d],p.blockIndice>-1&&(p.value=this.drawCallUboInputState.getUboValue(s[d],p.offset,p.size,o[d]))}},r.prototype.readTransformFeedbackFromContext=function(t,n){var a=this.context,r=a.getTransformFeedbackVarying(t,n),o=a.getIndexedParameter(e.WebGlConstants.TRANSFORM_FEEDBACK_BUFFER_BINDING.value,n),i={name:r.name,size:r.size,type:this.getWebGlConstant(r.type),buffer:this.getSpectorData(o),bufferSize:a.getIndexedParameter(e.WebGlConstants.TRANSFORM_FEEDBACK_BUFFER_SIZE.value,n),bufferStart:a.getIndexedParameter(e.WebGlConstants.TRANSFORM_FEEDBACK_BUFFER_START.value,n)};return this.appendBufferCustomData(i,o),i},r.prototype.readUniformBlockFromContext=function(t,n){var a=this.context,r=a.getActiveUniformBlockParameter(t,n,e.WebGlConstants.UNIFORM_BLOCK_BINDING.value),o=a.getIndexedParameter(e.WebGlConstants.UNIFORM_BUFFER_BINDING.value,r),i={name:a.getActiveUniformBlockName(t,n),bindingPoint:r,size:a.getActiveUniformBlockParameter(t,n,e.WebGlConstants.UNIFORM_BLOCK_DATA_SIZE.value),activeUniformCount:a.getActiveUniformBlockParameter(t,n,e.WebGlConstants.UNIFORM_BLOCK_ACTIVE_UNIFORMS.value),vertex:a.getActiveUniformBlockParameter(t,n,e.WebGlConstants.UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER.value),fragment:a.getActiveUniformBlockParameter(t,n,e.WebGlConstants.UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER.value),buffer:this.getSpectorData(o)};return this.appendBufferCustomData(i,o),i},r.prototype.appendBufferCustomData=function(e,t){if(t){var n=t.__SPECTOR_Object_CustomData;n&&(n.usage&&(e.bufferUsage=this.getWebGlConstant(n.usage)),e.bufferLength=n.length,n.offset&&(e.bufferOffset=n.offset),n.sourceLength&&(e.bufferSourceLength=n.sourceLength))}},r.prototype.getWebGlConstant=function(t){var n=e.WebGlConstantsByValue[t];return n?n.name:t},r}(t.BaseState);n.samplerTypes=(i={},i[e.WebGlConstants.SAMPLER_2D.value]=e.WebGlConstants.TEXTURE_2D,i[e.WebGlConstants.SAMPLER_CUBE.value]=e.WebGlConstants.TEXTURE_CUBE_MAP,i[e.WebGlConstants.SAMPLER_3D.value]=e.WebGlConstants.TEXTURE_3D,i[e.WebGlConstants.SAMPLER_2D_SHADOW.value]=e.WebGlConstants.TEXTURE_2D,i[e.WebGlConstants.SAMPLER_2D_ARRAY.value]=e.WebGlConstants.TEXTURE_2D_ARRAY,i[e.WebGlConstants.SAMPLER_2D_ARRAY_SHADOW.value]=e.WebGlConstants.TEXTURE_2D_ARRAY,i[e.WebGlConstants.SAMPLER_CUBE_SHADOW.value]=e.WebGlConstants.TEXTURE_CUBE_MAP,i[e.WebGlConstants.INT_SAMPLER_2D.value]=e.WebGlConstants.TEXTURE_2D,i[e.WebGlConstants.INT_SAMPLER_3D.value]=e.WebGlConstants.TEXTURE_3D,i[e.WebGlConstants.INT_SAMPLER_CUBE.value]=e.WebGlConstants.TEXTURE_CUBE_MAP,i[e.WebGlConstants.INT_SAMPLER_2D_ARRAY.value]=e.WebGlConstants.TEXTURE_2D_ARRAY,i[e.WebGlConstants.UNSIGNED_INT_SAMPLER_2D.value]=e.WebGlConstants.TEXTURE_2D,i[e.WebGlConstants.UNSIGNED_INT_SAMPLER_3D.value]=e.WebGlConstants.TEXTURE_3D,i[e.WebGlConstants.UNSIGNED_INT_SAMPLER_CUBE.value]=e.WebGlConstants.TEXTURE_CUBE_MAP,i[e.WebGlConstants.UNSIGNED_INT_SAMPLER_2D_ARRAY.value]=e.WebGlConstants.TEXTURE_2D_ARRAY,i),n=o=r([e.Decorators.state(\"DrawCall\")],n),t.DrawCallState=n;var o,i}(e.States||(e.States={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(){function n(e,t){this.logger=t,this.context=e.context,this.captureFrameBuffer=e.context.createFramebuffer(),this.workingCanvas=document.createElement(\"canvas\"),this.workingContext2D=this.workingCanvas.getContext(\"2d\"),this.captureCanvas=document.createElement(\"canvas\"),this.captureContext2D=this.captureCanvas.getContext(\"2d\"),this.captureContext2D.imageSmoothingEnabled=!0,this.captureContext2D.mozImageSmoothingEnabled=!0,this.captureContext2D.oImageSmoothingEnabled=!0,this.captureContext2D.webkitImageSmoothingEnabled=!0,this.captureContext2D.msImageSmoothingEnabled=!0}return n.prototype.appendTextureState=function(e,t,n){if(void 0===n&&(n=null),t){var a=t.__SPECTOR_Object_CustomData;a&&(a.type&&(e.type=this.getWebGlConstant(a.type)),a.format&&(e.format=this.getWebGlConstant(a.format)),a.internalFormat&&(e.internalFormat=this.getWebGlConstant(a.internalFormat)),e.width=a.width,e.height=a.height,a.depth&&(e.depth=a.depth),n&&(e.visual=this.getTextureVisualState(n,t,a)))}},n.prototype.getTextureVisualState=function(t,a,r){try{var o=this.context,i={};if(!e.ReadPixelsHelper.isSupportedCombination(r.type,r.format,r.internalFormat))return i;var s=this.context.getParameter(e.WebGlConstants.FRAMEBUFFER_BINDING.value);o.bindFramebuffer(e.WebGlConstants.FRAMEBUFFER.value,this.captureFrameBuffer);try{var u=r.width,l=r.height;if(t===e.WebGlConstants.TEXTURE_3D&&r.depth)for(var c=o,m=0;m<r.depth;m++)m>2&&m<r.depth-3||(c.framebufferTextureLayer(e.WebGlConstants.FRAMEBUFFER.value,e.WebGlConstants.COLOR_ATTACHMENT0.value,a,0,m),i[\"3D Layer \"+m]=this.getCapture(o,0,0,u,l,r.type));else if(t===e.WebGlConstants.TEXTURE_2D_ARRAY&&r.depth)for(var c=o,m=0;m<r.depth;m++)m>2&&m<r.depth-3||(c.framebufferTextureLayer(e.WebGlConstants.FRAMEBUFFER.value,e.WebGlConstants.COLOR_ATTACHMENT0.value,a,0,m),i[\"Layer \"+m]=this.getCapture(o,0,0,u,l,r.type));else if(t===e.WebGlConstants.TEXTURE_CUBE_MAP)for(var d=0,p=n.cubeMapFaces;d<p.length;d++){var E=p[d];o.framebufferTexture2D(e.WebGlConstants.FRAMEBUFFER.value,e.WebGlConstants.COLOR_ATTACHMENT0.value,E.value,a,0),i[E.name]=this.getCapture(o,0,0,u,l,r.type)}else o.framebufferTexture2D(e.WebGlConstants.FRAMEBUFFER.value,e.WebGlConstants.COLOR_ATTACHMENT0.value,e.WebGlConstants.TEXTURE_2D.value,a,0),i[e.WebGlConstants.TEXTURE_2D.name]=this.getCapture(o,0,0,u,l,r.type)}catch(e){}return o.bindFramebuffer(e.WebGlConstants.FRAMEBUFFER.value,s),i}catch(e){}},n.prototype.getCapture=function(n,a,r,o,i,s){try{if(this.context.checkFramebufferStatus(e.WebGlConstants.FRAMEBUFFER.value)!==e.WebGlConstants.FRAMEBUFFER_COMPLETE.value)return;s=s||e.WebGlConstants.UNSIGNED_BYTE.value;var u=e.ReadPixelsHelper.readPixels(n,a,r,o,i,s);if(!u)return;this.workingCanvas.width=o,this.workingCanvas.height=i;var l=this.workingContext2D.createImageData(o,i);l.data.set(u),this.workingContext2D.putImageData(l,0,0);var c=o/i;c<1?(this.captureCanvas.width=t.VisualState.captureBaseSize*c,this.captureCanvas.height=t.VisualState.captureBaseSize):c>1?(this.captureCanvas.width=t.VisualState.captureBaseSize,this.captureCanvas.height=t.VisualState.captureBaseSize/c):(this.captureCanvas.width=t.VisualState.captureBaseSize,this.captureCanvas.height=t.VisualState.captureBaseSize),this.captureCanvas.width=Math.max(this.captureCanvas.width,1),this.captureCanvas.height=Math.max(this.captureCanvas.height,1),this.captureContext2D.globalCompositeOperation=\"copy\",this.captureContext2D.scale(1,-1),this.captureContext2D.translate(0,-this.captureCanvas.height),this.captureContext2D.drawImage(this.workingCanvas,0,0,o,i,0,0,this.captureCanvas.width,this.captureCanvas.height),this.captureContext2D.setTransform(1,0,0,1,0,0),this.captureContext2D.globalCompositeOperation=\"source-over\";return this.captureCanvas.toDataURL()}catch(e){}},n.prototype.getWebGlConstant=function(t){var n=e.WebGlConstantsByValue[t];return n?n.name:t+\"\"},n}();n.captureBaseSize=64,n.cubeMapFaces=[e.WebGlConstants.TEXTURE_CUBE_MAP_POSITIVE_X,e.WebGlConstants.TEXTURE_CUBE_MAP_POSITIVE_Y,e.WebGlConstants.TEXTURE_CUBE_MAP_POSITIVE_Z,e.WebGlConstants.TEXTURE_CUBE_MAP_NEGATIVE_X,e.WebGlConstants.TEXTURE_CUBE_MAP_NEGATIVE_Y,e.WebGlConstants.TEXTURE_CUBE_MAP_NEGATIVE_Z],t.DrawCallTextureInputState=n}(e.States||(e.States={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(){function t(e,t){this.logger=t,this.context=e.context}return t.prototype.getUboValue=function(n,a,r,o){var i=t.uboTypes[o];if(i){var s=new i.arrayBufferView(r*i.lengthMultiplier),u=this.context,l=u.getIndexedParameter(e.WebGlConstants.UNIFORM_BUFFER_BINDING.value,n);if(l){var c=u.getParameter(e.WebGlConstants.UNIFORM_BUFFER_BINDING.value);try{u.bindBuffer(e.WebGlConstants.UNIFORM_BUFFER.value,l),u.getBufferSubData(e.WebGlConstants.UNIFORM_BUFFER.value,a,s)}catch(e){return}c&&u.bindBuffer(e.WebGlConstants.UNIFORM_BUFFER.value,c)}return Array.prototype.slice.call(s)}},t}();n.uboTypes=(a={},a[e.WebGlConstants.BOOL.value]={arrayBufferView:Uint8Array,lengthMultiplier:1},a[e.WebGlConstants.BOOL_VEC2.value]={arrayBufferView:Uint8Array,lengthMultiplier:2},a[e.WebGlConstants.BOOL_VEC3.value]={arrayBufferView:Uint8Array,lengthMultiplier:3},a[e.WebGlConstants.BOOL_VEC4.value]={arrayBufferView:Uint8Array,lengthMultiplier:4},a[e.WebGlConstants.INT.value]={arrayBufferView:Int32Array,lengthMultiplier:1},a[e.WebGlConstants.INT_VEC2.value]={arrayBufferView:Int32Array,lengthMultiplier:2},a[e.WebGlConstants.INT_VEC3.value]={arrayBufferView:Int32Array,lengthMultiplier:3},a[e.WebGlConstants.INT_VEC4.value]={arrayBufferView:Int32Array,lengthMultiplier:4},a[e.WebGlConstants.UNSIGNED_INT.value]={arrayBufferView:Uint32Array,lengthMultiplier:1},a[e.WebGlConstants.UNSIGNED_INT_VEC2.value]={arrayBufferView:Uint32Array,lengthMultiplier:2},a[e.WebGlConstants.UNSIGNED_INT_VEC3.value]={arrayBufferView:Uint32Array,lengthMultiplier:3},a[e.WebGlConstants.UNSIGNED_INT_VEC4.value]={arrayBufferView:Uint32Array,lengthMultiplier:4},a[e.WebGlConstants.FLOAT.value]={arrayBufferView:Float32Array,lengthMultiplier:1},a[e.WebGlConstants.FLOAT_VEC2.value]={arrayBufferView:Float32Array,lengthMultiplier:2},a[e.WebGlConstants.FLOAT_VEC3.value]={arrayBufferView:Float32Array,lengthMultiplier:3},a[e.WebGlConstants.FLOAT_VEC4.value]={arrayBufferView:Float32Array,lengthMultiplier:4},a[e.WebGlConstants.FLOAT_MAT2.value]={arrayBufferView:Float32Array,lengthMultiplier:4},a[e.WebGlConstants.FLOAT_MAT2x3.value]={arrayBufferView:Float32Array,lengthMultiplier:6},a[e.WebGlConstants.FLOAT_MAT2x4.value]={arrayBufferView:Float32Array,lengthMultiplier:8},a[e.WebGlConstants.FLOAT_MAT3.value]={arrayBufferView:Float32Array,lengthMultiplier:9},a[e.WebGlConstants.FLOAT_MAT3x2.value]={arrayBufferView:Float32Array,lengthMultiplier:6},a[e.WebGlConstants.FLOAT_MAT3x4.value]={arrayBufferView:Float32Array,lengthMultiplier:12},a[e.WebGlConstants.FLOAT_MAT4.value]={arrayBufferView:Float32Array,lengthMultiplier:16},a[e.WebGlConstants.FLOAT_MAT4x2.value]={arrayBufferView:Float32Array,lengthMultiplier:8},a[e.WebGlConstants.FLOAT_MAT4x3.value]={arrayBufferView:Float32Array,lengthMultiplier:12},a[e.WebGlConstants.SAMPLER_2D.value]={arrayBufferView:Uint8Array,lengthMultiplier:1},a[e.WebGlConstants.SAMPLER_CUBE.value]={arrayBufferView:Uint8Array,lengthMultiplier:1},a),t.DrawCallUboInputState=n;var a}(e.States||(e.States={}))}(n||(n={}));var n;!function(e){!function(e){function t(e){return e[r]}function n(e,t){t.displayText=a(t),e[r]=t}function a(e){return e?e.typeName+\" - ID: \"+e.id:\"No tag available.\"}var r=\"__SPECTOR_Object_TAG\";e.getWebGlObjectTag=t,e.attachWebGlObjectTag=n,e.stringifyWebGlObjectTag=a}(e.WebGlObjects||(e.WebGlObjects={}))}(n||(n={})),function(e){!function(e){var t=function(){function t(e,t){this.options=e,this.typeName=e.typeName,this.type=e.type,this.id=0}return t.prototype.tagWebGlObject=function(t){if(this.type){var n;if(!t)return n;if(n=e.getWebGlObjectTag(t))return n;if(t instanceof this.type){var a=this.getNextId();return n={typeName:this.typeName,id:a},e.attachWebGlObjectTag(t,n),n}return n}},t.prototype.getNextId=function(){return this.id++},t}();e.BaseWebGlObject=t}(e.WebGlObjects||(e.WebGlObjects={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t}(t.BaseWebGlObject);n=r([e.Decorators.webGlObject(\"WebGLBuffer\")],n),t.Buffer=n;var o=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t}(t.BaseWebGlObject);o=r([e.Decorators.webGlObject(\"WebGLFramebuffer\")],o),t.FrameBuffer=o;var i=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t}(t.BaseWebGlObject);i=r([e.Decorators.webGlObject(\"WebGLProgram\")],i),t.Program=i;var s=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t}(t.BaseWebGlObject);s=r([e.Decorators.webGlObject(\"WebGLQuery\")],s),t.Query=s;var u=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t}(t.BaseWebGlObject);u=r([e.Decorators.webGlObject(\"WebGLRenderbuffer\")],u),t.Renderbuffer=u;var l=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t}(t.BaseWebGlObject);l=r([e.Decorators.webGlObject(\"WebGLSampler\")],l),t.Sampler=l;var c=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t}(t.BaseWebGlObject);c=r([e.Decorators.webGlObject(\"WebGLShader\")],c),t.Shader=c;var m=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t}(t.BaseWebGlObject);m=r([e.Decorators.webGlObject(\"WebGLSync\")],m),t.Sync=m;var d=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t}(t.BaseWebGlObject);d=r([e.Decorators.webGlObject(\"WebGLTexture\")],d),t.Texture=d;var p=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t}(t.BaseWebGlObject);p=r([e.Decorators.webGlObject(\"WebGLTransformFeedback\")],p),t.TransformFeedback=p;var E=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t}(t.BaseWebGlObject);E=r([e.Decorators.webGlObject(\"WebGLUniformLocation\")],E),t.UniformLocation=E;var C=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t}(t.BaseWebGlObject);C=r([e.Decorators.webGlObject(\"WebGLVertexArrayObject\")],C),t.VertexArrayObject=C}(e.WebGlObjects||(e.WebGlObjects={}))}(n||(n={}));var n;!function(e){!function(e){var t=function(){function e(e,t){this.options=e,this.logger=t,this.analyserName=e.analyserName}return e.prototype.appendAnalysis=function(e){e.analyses=e.analyses||[];var t=this.getAnalysis(e);e.analyses.push(t)},e.prototype.getAnalysis=function(e){var t={analyserName:this.analyserName};return this.appendToAnalysis(e,t),t},e}();e.BaseAnalyser=t}(e.Analysers||(e.Analysers={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(){function t(e,t){this.options=e,this.logger=t,this.analysers={},this.analyserConstructors={},this.contextInformation=e.contextInformation,this.initAvailableAnalysers(),this.initAnalysers()}return t.prototype.appendAnalyses=function(e){for(var t in this.analysers)if(this.analysers.hasOwnProperty(t)){var n=this.analysers[t];n.appendAnalysis(e)}},t.prototype.initAvailableAnalysers=function(){for(var t in this.options.analyserNamespace)if(this.options.analyserNamespace.hasOwnProperty(t)){var n=this.options.analyserNamespace[t],a=e.Decorators.getAnalyserName(n);a&&(this.analyserConstructors[a]=n)}},t.prototype.initAnalysers=function(){for(var t in this.analyserConstructors)if(this.analyserConstructors.hasOwnProperty(t)){var n=e.merge({analyserName:t},this.contextInformation),a=new this.analyserConstructors[t](n,this.logger);this.analysers[t]=a}},t}();t.CaptureAnalyser=n}(e.Analysers||(e.Analysers={}))}(n||(n={}));var n;!function(e){!function(t){var n=o=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t.prototype.appendToAnalysis=function(e,t){if(e.commands){t.total=e.commands.length,t.draw=0,t.clear=0;for(var n=0,a=e.commands;n<a.length;n++){var r=a[n];\"clear\"===r.name?t.clear++:o.drawCommands.indexOf(r.name)>-1&&t.draw++}}},t}(t.BaseAnalyser);n.drawCommands=[\"drawArrays\",\"drawElements\",\"drawArraysInstanced\",\"drawElementsInstanced\",\"drawElementsInstancedANGLE\",\"drawRangeElements\"],n=o=r([e.Decorators.analyser(\"CommandsSummary\")],n),t.CommandsSummaryAnalyser=n;var o}(e.Analysers||(e.Analysers={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t.prototype.appendToAnalysis=function(e,t){if(e.commands){for(var n={},a=0,r=e.commands;a<r.length;a++){var o=r[a];n[o.name]=n[o.name]||0,n[o.name]++}var i=Object.keys(n).map(function(e){return[e,n[e]]});i.sort(function(e,t){var n=t[1]-e[1];return 0===n?e[0].localeCompare(t[0]):n});for(var s=0,u=i;s<u.length;s++){var l=u[s];t[l[0]]=l[1]}}},t}(t.BaseAnalyser);n=r([e.Decorators.analyser(\"Commands\")],n),t.CommandsAnalyser=n}(e.Analysers||(e.Analysers={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t.prototype.appendToAnalysis=function(e,t){if(e.commands){for(var n=0,a=0,r=e.commands;a<r.length;a++){var o=r[a];\"drawArrays\"===o.name&&o.commandArguments.length>=3?n+=o.commandArguments[2]:\"drawArraysInstanced\"===o.name&&o.commandArguments.length>=3?n+=o.commandArguments[2]:\"drawElements\"===o.name&&o.commandArguments.length>=2?n+=o.commandArguments[1]:\"drawElementsInstanced\"===o.name&&o.commandArguments.length>=2?n+=o.commandArguments[1]:\"drawElementsInstancedANGLE\"===o.name&&o.commandArguments.length>=2?n+=o.commandArguments[1]:\"drawRangeElements\"===o.name&&o.commandArguments.length>=4&&(n+=o.commandArguments[3])}t.totalDrawnPrimitives=n}},t}(t.BaseAnalyser);n=r([e.Decorators.analyser(\"Primitives\")],n),t.PrimitivesAnalyser=n}(e.Analysers||(e.Analysers={}))}(n||(n={}));var n;!function(e){!function(e){var t=function(){function e(){}return e.scrollIntoView=function(e){for(var t=e.getBoundingClientRect(),n=e.parentElement;n&&n.clientHeight===n.offsetHeight;)n=n.parentElement;var a=n.getBoundingClientRect();t.top<a.top?e.scrollIntoView(!0):t.bottom>a.bottom&&e.scrollIntoView(!1)},e}();e.ScrollIntoViewHelper=t}(e.EmbeddedFrontend||(e.EmbeddedFrontend={}))}(n||(n={}));var n;!function(e){!function(e){var t=function(){function e(e,t){this.eventConstructor=e,this.logger=t,this.dummyTextGeneratorElement=document.createElement(\"div\")}return e.prototype.createFromHtml=function(e){var t=document.createElement(\"div\");return t.innerHTML=e,t.firstElementChild},e.prototype.htmlTemplate=function(e){for(var t=this,n=[],a=1;a<arguments.length;a++)n[a-1]=arguments[a];var r=e.raw,o=\"\";return n.forEach(function(e,n){var a=r[n];Array.isArray(e)&&(e=e.join(\"\")),a&&a.length>0&&\"$\"===a[a.length-1]?a=a.slice(0,-1):e=t.htmlEscape(e),o+=a,o+=e}),o+=r[r.length-1]},e.prototype.htmlEscape=function(e){return null===e||void 0===e||0===e.length?e:(this.dummyTextGeneratorElement.innerText=e,this.dummyTextGeneratorElement.innerHTML)},e}();e.BaseNoneGenericComponent=t;var n=function(e){function t(t,n){var a=e.call(this,t,n)||this;return a.events={},a}return a(t,e),t.prototype.addEventListener=function(e,t,n){return void 0===n&&(n=null),this.events[e]?this.events[e].add(t,n):-1},t.prototype.removeEventListener=function(e,t){this.events[e]&&this.events[e].remove(t)},t.prototype.renderElementFromTemplate=function(e,t,n){var a=this.createFromHtml(e);return this.bindCommands(a,t,n),a},t.prototype.bindCommands=function(e,t,n){e.getAttribute(\"commandname\")&&this.bindCommand(e,t,n);for(var a=e.querySelectorAll(\"[commandName]\"),r=0;r<a.length;r++){var o=a[r];this.bindCommand(o,t,n)}},t.prototype.bindCommand=function(e,t,n){var a=e.getAttribute(\"commandname\"),r=e.getAttribute(\"commandeventbinding\")||\"\";0===r.length&&(r=\"click\");var o=\"true\"===e.getAttribute(\"usecapture\");this.createEvent(a),this.mapEventListener(e,r,a,t,n,o)},t.prototype.mapEventListener=function(e,t,n,a,r,o,i){void 0===o&&(o=!1),void 0===i&&(i=!1);var s=this;i?e.addEventListener(t,function(e){e.stopPropagation(),e.preventDefault(),s.triggerEvent(n,this,a,r)},o):e.addEventListener(t,function(){s.triggerEvent(n,this,a,r)},o)},t.prototype.createEvent=function(e){if(!this.events[e]){var t=new this.eventConstructor;this.events[e]=t}return this.events[e]},t.prototype.triggerEvent=function(e,t,n,a){this.events[e].trigger({sender:t,stateId:a,state:n})},t}(t);e.BaseComponent=n}(e.EmbeddedFrontend||(e.EmbeddedFrontend={}))}(n||(n={}));var n;!function(e){!function(e){var t=function(){function e(e,t,n){this.logger=n,this.placeHolder=e,this.stateStore=t}return e.prototype.compose=function(e){var t=this.stateStore.getStatesToProcess(),n=!1;for(var a in t)if(t.hasOwnProperty(a)){var r=t[a],o=this.stateStore.getLastOperation(r),i=this.stateStore.getComponentInstance(r),s=this.stateStore.getData(r);i.render(s,r,o),n=!0}if(n){var u=this.stateStore.getLastOperation(e);this.composeInContainer(this.placeHolder,Number.MAX_VALUE,e,u)}},e.prototype.composeChildren=function(e,t){if(t)for(var n=this.stateStore.getChildrenIds(e),a=0,r=0;r<n.length;r++){var o=n[r],i=this.stateStore.getLastOperation(o);this.composeInContainer(t,a,o,i),50!==i&&a++}},e.prototype.composeInContainer=function(e,t,n,a){var r=this.stateStore.getComponentInstance(n),o=r.composeInContainer(e,t,a);this.composeChildren(n,o)},e}();e.Compositor=t}(e.EmbeddedFrontend||(e.EmbeddedFrontend={}))}(n||(n={}));var n;!function(e){!function(e){var t=function(){function t(t,n){this.logger=n,this.stateStore=new e.StateStore(n),this.compositor=new e.Compositor(t,this.stateStore,n),this.willRender=!1,this.rootStateId=-1}return t.prototype.addRootState=function(t,n,a){void 0===a&&(a=!1);var r=new e.ComponentInstance(n,this.logger),o=this.stateStore.add(t,r);return this.rootStateId=o,this.setForRender(a),o},t.prototype.addChildState=function(e,t,n,a){void 0===a&&(a=!1);var r=this.insertChildState(e,t,Number.MAX_VALUE,n);return this.setForRender(a),r},t.prototype.insertChildState=function(t,n,a,r,o){void 0===o&&(o=!1);var i=new e.ComponentInstance(r,this.logger),s=this.stateStore.insertChildAt(t,a,n,i);return this.setForRender(o),s},t.prototype.updateState=function(e,t,n){void 0===n&&(n=!1),this.stateStore.update(e,t),this.setForRender(n)},t.prototype.removeState=function(e,t){void 0===t&&(t=!1),this.stateStore.remove(e),this.setForRender(t)},t.prototype.removeChildrenStates=function(e,t){void 0===t&&(t=!1),this.stateStore.removeChildren(e),this.setForRender(t)},t.prototype.getState=function(e){return this.stateStore.getData(e)},t.prototype.getGenericState=function(e){return this.getState(e)},t.prototype.getChildrenState=function(e){var t=this;return this.stateStore.getChildrenIds(e).map(function(n){return t.stateStore.getData(e)})},t.prototype.getChildrenGenericState=function(e){return this.getChildrenState(e)},t.prototype.hasChildren=function(e){return this.stateStore.hasChildren(e)},t.prototype.updateAllChildrenState=function(e,t){for(var n=this.stateStore.getChildrenIds(e),a=0,r=n;a<r.length;a++){var o=r[a],i=this.getGenericState(o);t(i),this.updateState(o,i)}},t.prototype.updateAllChildrenGenericState=function(e,t){this.updateAllChildrenState(e,t)},t.prototype.setForRender=function(e){this.willRender||(this.willRender=!0,e?this.compose():setTimeout(this.compose.bind(this),t.REFRESHRATEINMILLISECONDS))},t.prototype.compose=function(){this.willRender=!1,this.compositor.compose(this.rootStateId),this.stateStore.flushPendingOperations()},t}();t.REFRESHRATEINMILLISECONDS=100,e.MVX=t}(e.EmbeddedFrontend||(e.EmbeddedFrontend={}))}(n||(n={}));var n;!function(e){!function(e){var t=function(){function e(e,t){this.logger=t,this.component=e}return e.prototype.render=function(e,t,n){if(0!==n)return 50===n?void this.removeNode():void(this.domNode=this.component.render(e,t))},e.prototype.composeInContainer=function(e,t,n){if(50===n)return this.removeNode(),null;var a=this.cachedCurrentChildrenContainer;if(0===n)return a;var r=this.domNode,o=r.getAttribute(\"childrencontainer\")?r:r.querySelector(\"[childrenContainer]\");if(o&&a)for(var i=a.children;i.length>0;)o.appendChild(i[0]);if(this.cachedCurrentChildrenContainer=o,t>=e.children.length)e.appendChild(r),this.cachedCurrentDomNode&&40===n&&(this.cachedCurrentDomNode.remove?this.cachedCurrentDomNode.remove():this.cachedCurrentDomNode.parentNode&&this.cachedCurrentDomNode.parentNode.removeChild(this.cachedCurrentDomNode));else{var s=e.children[t];e.insertBefore(r,s),40===n&&e.removeChild(s)}return this.cachedCurrentDomNode=this.domNode,o},e.prototype.removeNode=function(){this.domNode&&this.domNode.parentElement&&(this.domNode.remove?this.domNode.remove():this.domNode.parentNode&&this.domNode.parentNode.removeChild(this.domNode)),this.cachedCurrentDomNode&&this.cachedCurrentDomNode.parentElement&&(this.cachedCurrentDomNode.remove?this.cachedCurrentDomNode.remove():this.cachedCurrentDomNode.parentNode&&this.cachedCurrentDomNode.parentNode.removeChild(this.cachedCurrentDomNode))},e}();t.idGenerator=0,e.ComponentInstance=t}(e.EmbeddedFrontend||(e.EmbeddedFrontend={}))}(n||(n={}));var n;!function(e){!function(e){var t=function(){function e(e){this.logger=e,this.store={},this.idGenerator=0,this.pendingOperation={}}return e.prototype.getLastOperation=function(e){return this.store[e].lastOperation},e.prototype.getData=function(e){return this.store[e].data},e.prototype.getComponentInstance=function(e){return this.store[e].componentInstance},e.prototype.getParentId=function(e){return this.store[e].parent?this.store[e].parent.id:-1},e.prototype.getChildrenIds=function(e){for(var t=[],n=0,a=this.store[e].children;n<a.length;n++){var r=a[n];t.push(r.id)}return t},e.prototype.hasChildren=function(e){return this.store[e].children.length>0},e.prototype.add=function(e,t){var n=this.getNewId();return this.pendingOperation[n]=n,this.store[n]={data:e,id:n,parent:null,children:[],componentInstance:t,lastOperation:20},n},e.prototype.update=function(e,t){var n=this.store[e];this.pendingOperation[e]=e,this.store[e]={data:t,id:e,parent:n.parent,children:n.children,componentInstance:n.componentInstance,lastOperation:40}},e.prototype.addChild=function(e,t,n){var a=this.store[e],r=this.add(t,n);this.pendingOperation[r]=r;var o=this.store[r];return o.parent=a,a.children.push(o),r},e.prototype.insertChildAt=function(e,t,n,a){var r=this.store[e],o=this.add(n,a);this.pendingOperation[o]=o;var i=this.store[o];return i.parent=r,t>=r.children.length?r.children.push(i):t>=0?r.children.splice(t,0,i):r.children.unshift(i),o},e.prototype.removeChildById=function(e,t){for(var n=this.store[e],a=n.children.length-1;a>=0;a--){if(n.children[a].id===t){this.removeChildAt(e,a);break}}},e.prototype.removeChildAt=function(e,t){var n,a=this.store[e];t>a.children.length-1?(n=a.children[a.children.length-1],a.children[a.children.length-1].parent=null,a.children.splice(a.children.length-1,1)):t>=0?(n=a.children[t],a.children[t].parent=null,a.children.splice(t,1)):(n=a.children[0],a.children[0].parent=null,a.children.splice(0,1)),n.parent=null,this.remove(n.id)},e.prototype.remove=function(e){var t=this.store[e];if(t.parent){this.store[t.parent.id];this.removeChildById(t.parent.id,e)}else this.removeChildren(e),this.store[e].lastOperation=50,this.pendingOperation[e]=e},e.prototype.removeChildren=function(e){for(var t=this.store[e];t.children.length;)this.remove(t.children[0].id)},e.prototype.getStatesToProcess=function(){return this.pendingOperation},e.prototype.flushPendingOperations=function(){for(var e in this.pendingOperation)this.pendingOperation[e]&&(50===this.store[e].lastOperation?delete this.store[e]:this.store[e].lastOperation=0);this.pendingOperation={}},e.prototype.getNewId=function(){return++this.idGenerator},e}();e.StateStore=t}(e.EmbeddedFrontend||(e.EmbeddedFrontend={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return a(n,t),n.prototype.render=function(t,n){var a=(r=['<div>\\n                <div childrenContainer=\"true\" class=\"captureMenuComponent ','\">\\n                </div>\\n                <div class=\"captureMenuLogComponent ','\">\\n                    <span class=\"','\">',\"<span>\\n                </div>\\n            </div>\"],r.raw=['<div>\\n                <div childrenContainer=\"true\" class=\"captureMenuComponent ','\">\\n                </div>\\n                <div class=\"captureMenuLogComponent ','\">\\n                    <span class=\"','\">',\"<span>\\n                </div>\\n            </div>\"],this.htmlTemplate(r,t?\"active\":\"\",t.logVisible?\"active\":\"\",t.logLevel===e.LogLevel.error?\"error\":\"\",t.logText));return this.renderElementFromTemplate(a,t,n);var r},n}(t.BaseComponent);t.CaptureMenuComponent=n}(e.EmbeddedFrontend||(e.EmbeddedFrontend={}))}(n||(n={}));var n;!function(e){!function(e){var t=function(e){function t(t,n){var a=e.call(this,t,n)||this;return a.onCaptureRequested=a.createEvent(\"onCaptureRequested\"),a.onPlayRequested=a.createEvent(\"onPlayRequested\"),a.onPauseRequested=a.createEvent(\"onPauseRequested\"),a.onPlayNextFrameRequested=a.createEvent(\"onPlayNextFrameRequested\"),a}return a(t,e),t.prototype.render=function(e,t){var n=(a=['\\n            <div class=\"captureMenuActionsComponent\">\\n                <div commandName=\"onCaptureRequested\">\\n                </div>\\n                $',\"\\n            </div>\"],a.raw=['\\n            <div class=\"captureMenuActionsComponent\">\\n                <div commandName=\"onCaptureRequested\">\\n                </div>\\n                $',\"\\n            </div>\"],this.htmlTemplate(a,e?'<div commandName=\"onPauseRequested\">\\n                    </div>':'<div commandName=\"onPlayRequested\">\\n                    </div>\\n                    <div commandName=\"onPlayNextFrameRequested\">\\n                    </div>'));return this.renderElementFromTemplate(n,e,t);var a},t}(e.BaseComponent);e.CaptureMenuActionsComponent=t}(e.EmbeddedFrontend||(e.EmbeddedFrontend={}))}(n||(n={}));var n;!function(e){!function(e){var t=function(e){function t(t,n){var a=e.call(this,t,n)||this;return a.onCanvasSelection=a.createEvent(\"onCanvasSelection\"),a}return a(t,e),t.prototype.render=function(e,t){var n=(a=['\\n            <div class=\"canvasListComponent\">\\n                <span commandName=\"onCanvasSelection\">\\n                    ','\\n                </span>\\n                <ul childrenContainer=\"true\" style=\"','\"></ul>\\n            </div>'],a.raw=['\\n            <div class=\"canvasListComponent\">\\n                <span commandName=\"onCanvasSelection\">\\n                    ','\\n                </span>\\n                <ul childrenContainer=\"true\" style=\"','\"></ul>\\n            </div>'],this.htmlTemplate(a,e.currentCanvasInformation?e.currentCanvasInformation.id+\" (\"+e.currentCanvasInformation.width+\"*\"+e.currentCanvasInformation.height+\")\":\"Choose Canvas...\",e.showList?\"display:block;visibility:visible\":\"display:none;visibility:hidden\"));return this.renderElementFromTemplate(n,e,t);var a},t}(e.BaseComponent);e.CanvasListComponent=t}(e.EmbeddedFrontend||(e.EmbeddedFrontend={}))}(n||(n={}));var n;!function(e){!function(e){var t=function(e){function t(t,n){var a=e.call(this,t,n)||this;return a.onCanvasSelected=a.createEvent(\"onCanvasSelected\"),a}return a(t,e),t.prototype.render=function(e,t){var n=document.createElement(\"li\"),a=document.createElement(\"span\");return a.innerText=\"Id: \"+e.id+\" - Size: \"+e.width+\"*\"+e.height,n.appendChild(a),this.mapEventListener(n,\"click\",\"onCanvasSelected\",e,t),n},t}(e.BaseComponent);e.CanvasListItemComponent=t}(e.EmbeddedFrontend||(e.EmbeddedFrontend={}))}(n||(n={}));var n;!function(e){!function(e){var t=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t.prototype.render=function(e,t){var n=document.createElement(\"span\");return n.className=\"fpsCounterComponent\",n.innerText=e.toFixed(2)+\" Fps\",n},t}(e.BaseComponent);e.FpsCounterComponent=t}(e.EmbeddedFrontend||(e.EmbeddedFrontend={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(){function n(a,r){var o=this;this.options=a,this.logger=r,this.rootPlaceHolder=a.rootPlaceHolder||document.body,this.mvx=new t.MVX(this.rootPlaceHolder,r),this.isTrackingCanvas=!1,this.onCanvasSelected=new a.eventConstructor,this.onCaptureRequested=new a.eventConstructor,this.onPauseRequested=new a.eventConstructor,this.onPlayRequested=new a.eventConstructor,this.onPlayNextFrameRequested=new a.eventConstructor,this.captureMenuComponent=new t.CaptureMenuComponent(a.eventConstructor,r),this.canvasListComponent=new t.CanvasListComponent(a.eventConstructor,r),this.canvasListItemComponent=new t.CanvasListItemComponent(this.options.eventConstructor,this.logger),this.actionsComponent=new t.CaptureMenuActionsComponent(a.eventConstructor,r),this.fpsCounterComponent=new t.FpsCounterComponent(a.eventConstructor,r),this.rootStateId=this.mvx.addRootState({visible:!0,logLevel:e.LogLevel.info,logText:n.SelectCanvasHelpText,logVisible:!this.options.hideLog},this.captureMenuComponent),this.canvasListStateId=this.mvx.addChildState(this.rootStateId,{currentCanvasInformation:null,showList:!1},this.canvasListComponent),this.actionsStateId=this.mvx.addChildState(this.rootStateId,!0,this.actionsComponent),this.fpsStateId=this.mvx.addChildState(this.rootStateId,0,this.fpsCounterComponent),this.actionsComponent.onCaptureRequested.add(function(){var t=o.getSelectedCanvasInformation();t&&o.updateMenuStateLog(e.LogLevel.info,n.PleaseWaitHelpText,!0),setTimeout(function(){o.onCaptureRequested.trigger(t)},200)}),this.actionsComponent.onPauseRequested.add(function(){o.onPauseRequested.trigger(o.getSelectedCanvasInformation()),o.mvx.updateState(o.actionsStateId,!1)}),this.actionsComponent.onPlayRequested.add(function(){o.onPlayRequested.trigger(o.getSelectedCanvasInformation()),o.mvx.updateState(o.actionsStateId,!0)}),this.actionsComponent.onPlayNextFrameRequested.add(function(){o.onPlayNextFrameRequested.trigger(o.getSelectedCanvasInformation())}),this.canvasListComponent.onCanvasSelection.add(function(t){o.mvx.updateState(o.canvasListStateId,{currentCanvasInformation:null,showList:!t.state.showList}),o.updateMenuStateLog(e.LogLevel.info,n.SelectCanvasHelpText),o.onCanvasSelected.trigger(null),o.isTrackingCanvas&&o.trackPageCanvases(),t.state.showList?o.showMenuStateLog():o.hideMenuStateLog()}),this.canvasListItemComponent.onCanvasSelected.add(function(t){o.mvx.updateState(o.canvasListStateId,{currentCanvasInformation:t.state,showList:!1}),o.onCanvasSelected.trigger(t.state),o.updateMenuStateLog(e.LogLevel.info,n.ActionsHelpText),o.showMenuStateLog()})}return n.prototype.getSelectedCanvasInformation=function(){return this.mvx.getGenericState(this.canvasListStateId).currentCanvasInformation},n.prototype.trackPageCanvases=function(){if(this.isTrackingCanvas=!0,document.body){var e=document.body.querySelectorAll(\"canvas\");this.updateCanvasesList(e)}},n.prototype.updateCanvasesList=function(e){this.updateCanvasesListInformationInternal(e,function(e){return{id:e.id,width:e.width,height:e.height,ref:e}})},n.prototype.updateCanvasesListInformation=function(e){this.updateCanvasesListInformationInternal(e,function(e){return{id:e.id,width:e.width,height:e.height,ref:e.ref}})},n.prototype.display=function(){this.updateMenuStateVisibility(!0)},n.prototype.hide=function(){this.updateMenuStateVisibility(!1)},n.prototype.captureComplete=function(t){t?this.updateMenuStateLog(e.LogLevel.error,t):this.updateMenuStateLog(e.LogLevel.info,n.ActionsHelpText)},n.prototype.setFPS=function(e){this.mvx.updateState(this.fpsStateId,e)},n.prototype.updateCanvasesListInformationInternal=function(t,a){this.mvx.removeChildrenStates(this.canvasListStateId);for(var r=[],o=0;o<t.length;o++){var i=t[o],s=a(i);r.push(s),this.mvx.addChildState(this.canvasListStateId,s,this.canvasListItemComponent)}var u=r.length,l=this.mvx.getGenericState(this.canvasListStateId),c=l.showList;if(!c)if(1===u){var m=r[0];this.mvx.updateState(this.canvasListStateId,{currentCanvasInformation:m,showList:c}),this.updateMenuStateLog(e.LogLevel.info,n.ActionsHelpText),this.onCanvasSelected.trigger(m)}else this.updateMenuStateLog(e.LogLevel.info,n.SelectCanvasHelpText),this.onCanvasSelected.trigger(null)},n.prototype.hideMenuStateLog=function(){var e=this.mvx.getGenericState(this.rootStateId);this.mvx.updateState(this.rootStateId,{visible:e.visible,logLevel:e.logLevel,logText:e.logText,logVisible:!1})},n.prototype.showMenuStateLog=function(){var e=this.mvx.getGenericState(this.rootStateId);this.mvx.updateState(this.rootStateId,{visible:e.visible,logLevel:e.logLevel,logText:e.logText,logVisible:!this.options.hideLog})},n.prototype.updateMenuStateLog=function(e,t,n){void 0===n&&(n=!1);var a=this.mvx.getGenericState(this.rootStateId);this.mvx.updateState(this.rootStateId,{visible:a.visible,logLevel:e,logText:t,logVisible:!this.options.hideLog},n)},n.prototype.updateMenuStateVisibility=function(e){var t=this.mvx.getGenericState(this.rootStateId);this.mvx.updateState(this.rootStateId,{visible:e,logLevel:t.logLevel,logText:t.logText,logVisible:t.logVisible})},n}();n.SelectCanvasHelpText=\"Please, select a canvas in the list above.\",n.ActionsHelpText=\"Record with the red button, you can also pause or continue playing the current scene.\",n.PleaseWaitHelpText=\"Capturing, be patient (this can take up to 3 minutes)...\",t.CaptureMenu=n}(e.EmbeddedFrontend||(e.EmbeddedFrontend={}))}(n||(n={}));var n;!function(e){!function(e){var t=function(e){function t(t,n){var a=e.call(this,t,n)||this;return a.onCaptureLoaded=new a.eventConstructor,a}return a(t,e),t.prototype.render=function(e,t){var n=this,a=(i=['\\n            <div class=\"captureListComponent ','\">\\n                <div class=\"openCaptureFile\">\\n                    <Span>Drag files here to open a previously saved capture.</span>\\n                </div>\\n                <ul childrenContainer=\"true\"></ul>\\n            </div>'],i.raw=['\\n            <div class=\"captureListComponent ','\">\\n                <div class=\"openCaptureFile\">\\n                    <Span>Drag files here to open a previously saved capture.</span>\\n                </div>\\n                <ul childrenContainer=\"true\"></ul>\\n            </div>'],this.htmlTemplate(i,e?\"active\":\"\")),r=this.renderElementFromTemplate(a,e,t),o=r.querySelector(\".openCaptureFile\");return o.addEventListener(\"dragenter\",function(e){return n.drag(e),!1},!1),o.addEventListener(\"dragover\",function(e){return n.drag(e),!1},!1),o.addEventListener(\"drop\",function(e){n.drop(e)},!1),r;var i},t.prototype.drag=function(e){e.stopPropagation(),e.preventDefault()},t.prototype.drop=function(e){e.stopPropagation(),e.preventDefault(),this.loadFiles(e)},t.prototype.loadFiles=function(e){var t=this,n=null;if(e&&e.dataTransfer&&e.dataTransfer.files&&(n=e.dataTransfer.files),e&&e.target&&e.target.files&&(n=e.target.files),n&&n.length>0)for(var a=0;a<n.length;a++)!function(e){var a=n[e].name.toLowerCase(),r=a.split(\".\").pop();n[e].type;if(\"json\"===r){var o=n[e],i=new FileReader;i.onerror=function(e){t.logger.error(\"Error while reading file: \"+o.name+e)},i.onload=function(e){try{var n=JSON.parse(e.target.result);t.onCaptureLoaded.trigger(n)}catch(e){t.logger.error(\"Error while reading file: \"+o.name+e)}},i.readAsText(o)}}(a)},t}(e.BaseComponent);e.CaptureListComponent=t}(e.EmbeddedFrontend||(e.EmbeddedFrontend={}))}(n||(n={}));var n;!function(e){!function(e){var t=function(e){function t(t,n){var a=e.call(this,t,n)||this;return a.onCaptureSelected=a.createEvent(\"onCaptureSelected\"),a.onSaveRequested=a.createEvent(\"onSaveRequested\"),a}return a(t,e),t.prototype.render=function(e,t){var n=document.createElement(\"li\");if(e.active&&(n.className=\"active\"),e.capture.endState.VisualState.Attachments)for(var a=0,r=e.capture.endState.VisualState.Attachments;a<r.length;a++){var o=r[a],i=document.createElement(\"img\");i.src=encodeURI(o.src),n.appendChild(i)}else{var s=document.createElement(\"span\");s.innerText=e.capture.endState.VisualState.FrameBufferStatus,n.appendChild(s)}var u=document.createElement(\"span\");u.innerText=new Date(e.capture.startTime).toTimeString().split(\" \")[0],n.appendChild(u);var l=document.createElement(\"a\");return l.href=\"#\",l.className=\"captureListItemSave\",this.mapEventListener(l,\"click\",\"onSaveRequested\",e,t,!1,!0),u.appendChild(l),this.mapEventListener(n,\"click\",\"onCaptureSelected\",e,t),n},t}(e.BaseComponent);e.CaptureListItemComponent=t}(e.EmbeddedFrontend||(e.EmbeddedFrontend={}))}(n||(n={}));var n;!function(e){!function(e){var t=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t.prototype.render=function(e,t){var n=(a=['\\n            <div class=\"visualStateListComponent\">\\n                <ul childrenContainer=\"true\"></ul>\\n            </div>'],a.raw=['\\n            <div class=\"visualStateListComponent\">\\n                <ul childrenContainer=\"true\"></ul>\\n            </div>'],this.htmlTemplate(a));return this.renderElementFromTemplate(n,e,t);var a},t}(e.BaseComponent);e.VisualStateListComponent=t}(e.EmbeddedFrontend||(e.EmbeddedFrontend={}))}(n||(n={}));var n;!function(e){!function(e){var t=function(t){function n(e,n){var a=t.call(this,e,n)||this;return a.onVisualStateSelected=a.createEvent(\"onVisualStateSelected\"),a}return a(n,t),n.prototype.render=function(t,n){var a=document.createElement(\"li\");if(t.active&&(a.className=\"active\",setTimeout(function(){e.ScrollIntoViewHelper.scrollIntoView(a)},1)),t.VisualState.Attachments)for(var r=0,o=t.VisualState.Attachments;r<o.length;r++){var i=o[r];if(i.src){var s=document.createElement(\"img\");if(s.src=encodeURI(i.src),a.appendChild(s),t.VisualState.Attachments.length>1){var u=document.createElement(\"span\");u.innerText=i.attachmentName,a.appendChild(u)}if(i.textureLayer){var l=document.createElement(\"span\");l.innerText=\"Layer: \"+i.textureLayer,a.appendChild(l)}if(i.textureCubeMapFace){var c=document.createElement(\"span\");c.innerText=i.textureCubeMapFace,a.appendChild(c)}}}else{var m=document.createElement(\"span\");m.innerText=t.VisualState.FrameBufferStatus,a.appendChild(m)}var d=document.createElement(\"span\");return d.innerText=t.VisualState.FrameBuffer?\"Frame buffer: \"+t.VisualState.FrameBuffer.__SPECTOR_Object_TAG.id:\"Canvas frame buffer\",a.appendChild(d),this.mapEventListener(a,\"click\",\"onVisualStateSelected\",t,n),a},n}(e.BaseComponent);e.VisualStateListItemComponent=t}(e.EmbeddedFrontend||(e.EmbeddedFrontend={}))}(n||(n={}));var n;!function(e){!function(e){var t=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t.prototype.render=function(e,t){var n=(a=['\\n            <div class=\"commandListComponent\">\\n                <ul childrenContainer=\"true\"></ul>\\n            </div>'],a.raw=['\\n            <div class=\"commandListComponent\">\\n                <ul childrenContainer=\"true\"></ul>\\n            </div>'],this.htmlTemplate(a));return this.renderElementFromTemplate(n,e,t);var a},t}(e.BaseComponent);e.CommandListComponent=t}(e.EmbeddedFrontend||(e.EmbeddedFrontend={}))}(n||(n={}));var n;!function(e){!function(e){var t=function(t){function n(e,n){var a=t.call(this,e,n)||this;return a.onCommandSelected=a.createEvent(\"onCommandSelected\"),a}return a(n,t),n.prototype.render=function(t,n){var a=document.createElement(\"li\"),r=\"unknown\";switch(t.capture.status){case 50:r=\"deprecated\";break;case 10:r=\"unused\";break;case 20:r=\"disabled\";break;case 30:r=\"redundant\";break;case 40:r=\"valid\"}t.capture.VisualState&&(a.className=\" drawCall\"),t.active&&(a.className=\" active\",setTimeout(function(){e.ScrollIntoViewHelper.scrollIntoView(a)},1));var o=document.createElement(\"span\"),i=t.capture.text;return i=i.replace(t.capture.name,'<span class=\" '+r+' important\">'+t.capture.name+\"</span>\"),o.innerHTML=i,a.appendChild(o),this.mapEventListener(a,\"click\",\"onCommandSelected\",t,n),a},n}(e.BaseComponent);e.CommandListItemComponent=t}(e.EmbeddedFrontend||(e.EmbeddedFrontend={}))}(n||(n={}));var n;!function(e){!function(e){var t=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t.prototype.render=function(e,t){var n=(a=['\\n            <div class=\"commandDetailComponent\" childrenContainer=\"true\">\\n            </div>'],a.raw=['\\n            <div class=\"commandDetailComponent\" childrenContainer=\"true\">\\n            </div>'],this.htmlTemplate(a));return this.renderElementFromTemplate(n,e,t);var a},t}(e.BaseComponent);e.CommandDetailComponent=t}(e.EmbeddedFrontend||(e.EmbeddedFrontend={}))}(n||(n={}));var n;!function(e){!function(e){var t=function(){function e(){}return e.getMDNLink=function(t){var n=e.WebGL2Functions[t];if(n)return e.WebGL2RootUrl+n;var a=e.WebGLFunctions[t];return a?e.WebGLRootUrl+a:e.WebGLRootUrl+t},e}();t.WebGL2RootUrl=\"https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/\",t.WebGLRootUrl=\"https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/\",t.WebGL2Functions={beginQuery:\"beginQuery\",beginTransformFeedback:\"beginTransformFeedback\",bindBufferBase:\"bindBufferBase\",bindBufferRange:\"bindBufferRange\",bindSampler:\"bindSampler\",bindTransformFeedback:\"bindTransformFeedback\",bindVertexArray:\"bindVertexArray\",blitFramebuffer:\"blitFramebuffer\",clearBufferfv:\"clearBuffer\",clearBufferiv:\"clearBuffer\",clearBufferuiv:\"clearBuffer\",clearBufferfi:\"clearBuffer\",clientWaitSync:\"clientWaitSync\",compressedTexImage3D:\"compressedTexImage3D\",compressedTexSubImage3D:\"compressedTexSubImage3D\",copyBufferSubData:\"copyBufferSubData\",copyTexSubImage3D:\"copyTexSubImage3D\",createQuery:\"createQuery\",createSampler:\"createSampler\",createTransformFeedback:\"createTransformFeedback\",createVertexArray:\"createVertexArray\",deleteQuery:\"deleteQuery\",deleteSampler:\"deleteSampler\",deleteSync:\"deleteSync\",deleteTransformFeedback:\"deleteTransformFeedback\",deleteVertexArray:\"deleteVertexArray\",drawArraysInstanced:\"drawArraysInstanced\",drawBuffers:\"drawBuffers\",drawElementsInstanced:\"drawElementsInstanced\",drawRangeElements:\"drawRangeElements\",endQuery:\"endQuery\",endTransformFeedback:\"endTransformFeedback\",fenceSync:\"fenceSync\",framebufferTextureLayer:\"framebufferTextureLayer\",getActiveUniformBlockName:\"getActiveUniformBlockName\",getActiveUniformBlockParameter:\"getActiveUniformBlockParameter\",getActiveUniforms:\"getActiveUniforms\",getBufferSubData:\"getBufferSubData\",getFragDataLocation:\"getFragDataLocation\",getIndexedParameter:\"getIndexedParameter\",getInternalformatParameter:\"getInternalformatParameter\",getQuery:\"getQuery\",getQueryParameter:\"getQueryParameter\",getSamplerParameter:\"getSamplerParameter\",getSyncParameter:\"getSyncParameter\",getTransformFeedbackVarying:\"getTransformFeedbackVarying\",getUniformBlockIndex:\"getUniformBlockIndex\",getUniformIndices:\"getUniformIndices\",invalidateFramebuffer:\"invalidateFramebuffer\",invalidateSubFramebuffer:\"invalidateSubFramebuffer\",isQuery:\"isQuery\",isSampler:\"isSampler\",isSync:\"isSync\",isTransformFeedback:\"isTransformFeedback\",isVertexArray:\"isVertexArray\",pauseTransformFeedback:\"pauseTransformFeedback\",readBuffer:\"readBuffer\",renderbufferStorageMultisample:\"renderbufferStorageMultisample\",resumeTransformFeedback:\"resumeTransformFeedback\",samplerParameteri:\"samplerParameter\",samplerParameterf:\"samplerParameter\",texImage3D:\"texImage3D\",texStorage2D:\"texStorage2D\",texStorage3D:\"texStorage3D\",texSubImage3D:\"texSubImage3D\",transformFeedbackVaryings:\"transformFeedbackVaryings\",uniform1ui:\"uniform\",uniform2ui:\"uniform\",uniform3ui:\"uniform\",uniform4ui:\"uniform\",uniform1fv:\"uniform\",uniform2fv:\"uniform\",uniform3fv:\"uniform\",uniform4fv:\"uniform\",uniform1iv:\"uniform\",uniform2iv:\"uniform\",uniform3iv:\"uniform\",uniform4iv:\"uniform\",uniform1uiv:\"uniform\",uniform2uiv:\"uniform\",uniform3uiv:\"uniform\",uniform4uiv:\"uniform\",uniformBlockBinding:\"uniformBlockBinding\",uniformMatrix2fv:\"uniformMatrix\",uniformMatrix3x2fv:\"uniformMatrix\",uniformMatrix4x2fv:\"uniformMatrix\",uniformMatrix2x3fv:\"uniformMatrix\",uniformMatrix3fv:\"uniformMatrix\",uniformMatrix4x3fv:\"uniformMatrix\",uniformMatrix2x4fv:\"uniformMatrix\",uniformMatrix3x4fv:\"uniformMatrix\",uniformMatrix4fv:\"uniformMatrix\",vertexAttribDivisor:\"vertexAttribDivisor\",vertexAttribI4i:\"vertexAttribI\",vertexAttribI4ui:\"vertexAttribI\",vertexAttribI4iv:\"vertexAttribI\",vertexAttribI4uiv:\"vertexAttribI\",vertexAttribIPointer:\"vertexAttribIPointer\",waitSync:\"waitSync\"},t.WebGLFunctions={uniform1f:\"uniform\",uniform1fv:\"uniform\",uniform1i:\"uniform\",uniform1iv:\"uniform\",uniform2f:\"uniform\",uniform2fv:\"uniform\",uniform2i:\"uniform\",uniform2iv:\"uniform\",uniform3f:\"uniform\",uniform3i:\"uniform\",uniform3iv:\"uniform\",uniform4f:\"uniform\",uniform4fv:\"uniform\",uniform4i:\"uniform\",uniform4iv:\"uniform\",uniformMatrix2fv:\"uniformMatrix\",uniformMatrix3fv:\"uniformMatrix\",uniformMatrix4fv:\"uniformMatrix\",vertexAttrib1f:\"vertexAttrib\",vertexAttrib2f:\"vertexAttrib\",vertexAttrib3f:\"vertexAttrib\",vertexAttrib4f:\"vertexAttrib\",vertexAttrib1fv:\"vertexAttrib\",vertexAttrib2fv:\"vertexAttrib\",vertexAttrib3fv:\"vertexAttrib\",vertexAttrib4fv:\"vertexAttrib\"},e.MDNCommandLinkHelper=t}(e.EmbeddedFrontend||(e.EmbeddedFrontend={}))}(n||(n={}));var n;!function(e){!function(e){var t=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t.prototype.render=function(e,t){var n=(a=['\\n            <div class=\"jsonContentComponent\" childrenContainer=\"true\">\\n            </div>'],a.raw=['\\n            <div class=\"jsonContentComponent\" childrenContainer=\"true\">\\n            </div>'],this.htmlTemplate(a));return this.renderElementFromTemplate(n,e,t);var a},t}(e.BaseComponent);e.JSONContentComponent=t}(e.EmbeddedFrontend||(e.EmbeddedFrontend={}))}(n||(n={}));var n;!function(e){!function(e){var t=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t.prototype.render=function(e,t){var n=(a=['\\n            <div class=\"jsonGroupComponent\">\\n                <div class=\"jsonGroupComponentTitle\">','</div>\\n                <ul childrenContainer=\"true\"></ul>\\n            </div>'],a.raw=['\\n            <div class=\"jsonGroupComponent\">\\n                <div class=\"jsonGroupComponentTitle\">','</div>\\n                <ul childrenContainer=\"true\"></ul>\\n            </div>'],this.htmlTemplate(a,e?e.replace(/([A-Z])/g,\" $1\").trim():\"\"));return this.renderElementFromTemplate(n,e,t);var a},t}(e.BaseComponent);e.JSONGroupComponent=t}(e.EmbeddedFrontend||(e.EmbeddedFrontend={}))}(n||(n={}));var n;!function(e){!function(e){var t=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t.prototype.render=function(e,t){var n=(a=['\\n            <li><span class=\"jsonItemComponentKey\">',': </span><span class=\"jsonItemComponentValue\">',\"</span><li>\"],a.raw=['\\n            <li><span class=\"jsonItemComponentKey\">',': </span><span class=\"jsonItemComponentValue\">',\"</span><li>\"],this.htmlTemplate(a,e.key,e.value));return this.renderElementFromTemplate(n,e,t);var a},t}(e.BaseComponent);e.JSONItemComponent=t}(e.EmbeddedFrontend||(e.EmbeddedFrontend={}))}(n||(n={}));var n;!function(e){!function(e){var t=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t.prototype.render=function(e,t){var n=(a=['\\n            <li class=\"jsonItemImageHolder\"><div class=\"jsonItemImage\"><img src=\"','\"/><span>',\"</span></div></li>\"],a.raw=['\\n            <li class=\"jsonItemImageHolder\"><div class=\"jsonItemImage\"><img src=\"','\"/><span>',\"</span></div></li>\"],this.htmlTemplate(a,e.value,e.key));return this.renderElementFromTemplate(n,e,t);var a},t}(e.BaseComponent);e.JSONImageItemComponent=t}(e.EmbeddedFrontend||(e.EmbeddedFrontend={}))}(n||(n={}));var n;!function(e){!function(e){var t=function(e){function t(t,n){var a=e.call(this,t,n)||this;return a.onOpenSourceClicked=a.createEvent(\"onOpenSourceClicked\"),a}return a(t,e),t.prototype.render=function(e,t){var n=(a=['\\n            <li commandName=\"onOpenSourceClicked\"><span class=\"jsonItemComponentKey\">',': </span><span class=\"jsonSourceItemComponentOpen\">Click to Open.</span><li>'],a.raw=['\\n            <li commandName=\"onOpenSourceClicked\"><span class=\"jsonItemComponentKey\">',': </span><span class=\"jsonSourceItemComponentOpen\">Click to Open.</span><li>'],this.htmlTemplate(a,e.key));return this.renderElementFromTemplate(n,e,t);var a},t}(e.BaseComponent);e.JSONSourceItemComponent=t}(e.EmbeddedFrontend||(e.EmbeddedFrontend={}))}(n||(n={}));var n;!function(e){!function(e){var t=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t.prototype.render=function(e,t){var n=(a=['\\n            <li><span class=\"jsonItemComponentKey\">',': </span>\\n                <span class=\"jsonItemComponentValue\">',' (<a href=\"','\" target=\"_blank\" class=\"jsonSourceItemComponentOpen\">Open help page</a>)\\n                </span>\\n            <li>'],a.raw=['\\n            <li><span class=\"jsonItemComponentKey\">',': </span>\\n                <span class=\"jsonItemComponentValue\">',' (<a href=\"','\" target=\"_blank\" class=\"jsonSourceItemComponentOpen\">Open help page</a>)\\n                </span>\\n            <li>'],this.htmlTemplate(a,e.key,e.value,e.help));return this.renderElementFromTemplate(n,e,t);var a},t}(e.BaseComponent);e.JSONHelpItemComponent=t}(e.EmbeddedFrontend||(e.EmbeddedFrontend={}))}(n||(n={}));var n;!function(e){!function(e){var t=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t.prototype.render=function(e,t){var n=document.createElement(\"div\");if(n.className=\"jsonVisualStateItemComponent\",e.Attachments)for(var a=0,r=e.Attachments;a<r.length;a++){var o=r[a];if(o.src){var i=document.createElement(\"img\");if(i.src=encodeURI(o.src),n.appendChild(i),e.Attachments.length>1){var s=document.createElement(\"span\");s.innerText=o.attachmentName,n.appendChild(s)}}}else{var u=document.createElement(\"span\");u.innerText=e.FrameBufferStatus,n.appendChild(u)}var l=document.createElement(\"span\");return l.innerText=e.FrameBuffer?e.FrameBuffer.__SPECTOR_Object_TAG.displayText:\"Canvas frame buffer\",n.appendChild(l),n},t}(e.BaseComponent);e.JSONVisualStateItemComponent=t}(e.EmbeddedFrontend||(e.EmbeddedFrontend={}))}(n||(n={}));var n;!function(e){!function(e){var t=function(e){function t(t,n){var a=e.call(this,t,n)||this;return a.onCapturesClicked=a.createEvent(\"onCapturesClicked\"),a.onCommandsClicked=a.createEvent(\"onCommandsClicked\"),a.onInformationClicked=a.createEvent(\"onInformationClicked\"),a.onInitStateClicked=a.createEvent(\"onInitStateClicked\"),a.onEndStateClicked=a.createEvent(\"onEndStateClicked\"),a.onCloseClicked=a.createEvent(\"onCloseClicked\"),a.onSearchTextChanged=a.createEvent(\"onSearchTextChanged\"),a.onSearchTextCleared=a.createEvent(\"onSearchTextCleared\"),a}return a(t,e),t.prototype.render=function(e,t){var n=(i=['<ul class=\"resultViewMenuComponent\">\\n                <li class=\"resultViewMenuOpen resultViewMenuSmall\"><a href=\"#\" role=\"button\">Menu</a></li>\\n\\n                <li class=\"searchContainer\">\\n                    <input type=\"text\" placeHolder=\"Search...\" value=\"','\" commandName=\"onSearchTextChanged\" commandEventBinding=\"change\">\\n                    <a class=\"clearSearch\" href=\"#\" CommandName=\"onSearchTextCleared\">X</a>\\n                </li>\\n                <li><a class=\"',' href=\"#\" role=\"button\" commandName=\"onCapturesClicked\">Captures</a></li>\\n                <li><a class=\"',' href=\"#\" role=\"button\" commandName=\"onInformationClicked\">Information</a></li>\\n                <li><a class=\"',' href=\"#\" role=\"button\" commandName=\"onInitStateClicked\">Init State</a></li>\\n                <li>\\n                    <a class=\"',' href=\"#\" role=\"button\" commandName=\"onCommandsClicked\">\\n                        Commands','\\n                    </a>\\n                </li>\\n                <li><a class=\"',' href=\"#\" role=\"button\" commandName=\"onEndStateClicked\">End State</a></li>\\n                <li><a href=\"#\" role=\"button\" commandName=\"onCloseClicked\">Close</a></li>\\n            </ul>'],i.raw=['<ul class=\"resultViewMenuComponent\">\\n                <li class=\"resultViewMenuOpen resultViewMenuSmall\"><a href=\"#\" role=\"button\">Menu</a></li>\\n\\n                <li class=\"searchContainer\">\\n                    <input type=\"text\" placeHolder=\"Search...\" value=\"','\" commandName=\"onSearchTextChanged\" commandEventBinding=\"change\">\\n                    <a class=\"clearSearch\" href=\"#\" CommandName=\"onSearchTextCleared\">X</a>\\n                </li>\\n                <li><a class=\"',' href=\"#\" role=\"button\" commandName=\"onCapturesClicked\">Captures</a></li>\\n                <li><a class=\"',' href=\"#\" role=\"button\" commandName=\"onInformationClicked\">Information</a></li>\\n                <li><a class=\"',' href=\"#\" role=\"button\" commandName=\"onInitStateClicked\">Init State</a></li>\\n                <li>\\n                    <a class=\"',' href=\"#\" role=\"button\" commandName=\"onCommandsClicked\">\\n                        Commands','\\n                    </a>\\n                </li>\\n                <li><a class=\"',' href=\"#\" role=\"button\" commandName=\"onEndStateClicked\">End State</a></li>\\n                <li><a href=\"#\" role=\"button\" commandName=\"onCloseClicked\">Close</a></li>\\n            </ul>'],this.htmlTemplate(i,e.searchText,0===e.status?\"active\":\"\",10===e.status?\"active\":\"\",20===e.status?\"active\":\"\",40===e.status?\"active\":\"\",e.commandCount>0?\" (\"+e.commandCount+\")\":\"\",30===e.status?\"active\":\"\")),a=this.renderElementFromTemplate(n,e,t),r=a.querySelector(\".resultViewMenuOpen\"),o=a.querySelectorAll(\"li:not(.resultViewMenuSmall)\");return r.addEventListener(\"click\",function(e){if(\"true\"===r.getAttribute(\"open\")){r.setAttribute(\"open\",\"false\");for(var t=0;t<o.length;t++)o[t].style.display=\"none\",o[t].style.visibility=\"hidden\"}else{r.setAttribute(\"open\",\"true\");for(var t=0;t<o.length;t++)o[t].style.display=\"block\",o[t].style.visibility=\"visible\"}}),a;var i},t}(e.BaseComponent);e.ResultViewMenuComponent=t}(e.EmbeddedFrontend||(e.EmbeddedFrontend={}))}(n||(n={}));var n;!function(e){!function(e){var t=function(e){function t(t,n){return e.call(this,t,n)||this}return a(t,e),t.prototype.render=function(e,t){return this.renderElementFromTemplate('<div childrenContainer=\"true\" class=\"resultViewContentComponent\"></div>',e,t)},t}(e.BaseComponent);e.ResultViewContentComponent=t}(e.EmbeddedFrontend||(e.EmbeddedFrontend={}))}(n||(n={}));var n;!function(e){!function(e){var t=function(e){function t(t,n){return e.call(this,t,n)||this}return a(t,e),t.prototype.render=function(e,t){var n=(a=['\\n                <div childrenContainer=\"true\" class=\"','\"></div>'],a.raw=['\\n                <div childrenContainer=\"true\" class=\"','\"></div>'],this.htmlTemplate(a,e?\"informationColumnLeftComponent\":\"informationColumnRightComponent\"));return this.renderElementFromTemplate(n,e,t);var a},t}(e.BaseComponent);e.InformationColumnComponent=t}(e.EmbeddedFrontend||(e.EmbeddedFrontend={}))}(n||(n={}));var n;!function(e){!function(e){var t=function(e){function t(t,n){return e.call(this,t,n)||this}return a(t,e),t.prototype.render=function(e,t){var n=(a=['\\n            <div childrenContainer=\"true\" class=\"resultViewComponent ','\">\\n            </div>'],a.raw=['\\n            <div childrenContainer=\"true\" class=\"resultViewComponent ','\">\\n            </div>'],this.htmlTemplate(a,e?\"active\":\"\"));return this.renderElementFromTemplate(n,e,t);var a},t}(e.BaseComponent);e.ResultViewComponent=t}(e.EmbeddedFrontend||(e.EmbeddedFrontend={}))}(n||(n={}));var n;!function(e){!function(e){var t=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t.prototype.render=function(e,t){var n=e.source?this._indentIfdef(this._beautify(e.source)):\"\",a=(o=['\\n            <div class=\"sourceCodeComponent\">\\n                <span class=\"sourceCodeComponentTitle\">','</span>\\n                <pre class=\"language-glsl\"><code>',\"</code></pre>\\n            </div>\"],o.raw=['\\n            <div class=\"sourceCodeComponent\">\\n                <span class=\"sourceCodeComponentTitle\">','</span>\\n                <pre class=\"language-glsl\"><code>',\"</code></pre>\\n            </div>\"],this.htmlTemplate(o,e.description,n)),r=this.renderElementFromTemplate(a.replace(/<br>/g,\"\\n\"),e,t);return Prism.highlightElement(r.querySelector(\"pre\")),r;var o},t.prototype._getBracket=function(e,t){void 0===t&&(t=-1);for(var n=e.indexOf(\"{\",t),a=e.substr(n+1).split(\"\"),r=1,o=n,i=0,s=0,u=a;s<u.length;s++){var l=u[s];if(o++,\"{\"===l&&r++,\"}\"===l&&r--,0===r){i=o;break}}return n>-1&&0===i?this._getBracket(e,n+1):{firstIteration:n,lastIteration:i}},t.prototype._beautify=function(e,t){void 0===t&&(t=0),e=e.trim();for(var n=this._getBracket(e),a=n.firstIteration,r=n.lastIteration,o=\"\",i=0;i<t;i++)o+=\"    \";if(-1===a)return e=o+e,e=e.replace(/;(?![^\\(]*\\))\\s*/g,\";\\n\"),e=e.replace(/\\s*([*+-\\/=><\\s]*=)\\s*/g,function(e){return\" \"+e.trim()+\" \"}),e=e.replace(/\\s*(,)\\s*/g,function(e){return e.trim()+\" \"}),e=e.replace(/\\n[ \\t]+/g,\"\\n\"),e=e.replace(/\\n/g,\"\\n\"+o),e=e.replace(/\\s+$/g,\"\"),e=e.replace(/\\n+$/g,\"\");var s=e.substr(0,a),u=e.substr(r+1,e.length),l=e.substr(a+1,r-a-1).trim(),c=this._beautify(l,t+1);return(this._beautify(s,t)+\" {\\n\"+c+\"\\n\"+o+\"}\\n\"+this._beautify(u,t)).replace(/\\s*\\n+\\s*;/g,\";\")},t.prototype._indentIfdef=function(e){for(var t=0,n=e.split(\"\\n\"),a=0;a<n.length;a++){var r=n[a];-1!==r.indexOf(\"#endif\")&&t--,-1!==r.indexOf(\"#else\")&&t--;for(var o=\"\",i=0;i<t;i++)o+=\"    \";n[a]=o+r,-1===r.indexOf(\"#if\")&&-1===r.indexOf(\"#else\")||t++}return n.join(\"\\n\")},t}(e.BaseComponent);e.SourceCodeComponent=t}(e.EmbeddedFrontend||(e.EmbeddedFrontend={}))}(n||(n={}));var n;!function(e){!function(e){var t=function(){function t(t,n){var a=this;this.options=t,this.logger=n,this.rootPlaceHolder=t.rootPlaceHolder||document.body,this.mvx=new e.MVX(this.rootPlaceHolder,n),this.searchText=\"\",this.currentCommandId=-1,this.visible=!1,this.commandCount=0,this.commandListStateId=-1,this.commandDetailStateId=-1,this.currentCaptureStateId=-1,this.currentCommandStateId=-1,this.currentVisualStateId=-1,this.visualStateListStateId=-1,this.initVisualStateId=-1,this.captureListComponent=new e.CaptureListComponent(t.eventConstructor,n),this.captureListItemComponent=new e.CaptureListItemComponent(t.eventConstructor,n),this.visualStateListComponent=new e.VisualStateListComponent(t.eventConstructor,n),this.visualStateListItemComponent=new e.VisualStateListItemComponent(t.eventConstructor,n),this.commandListComponent=new e.CommandListComponent(t.eventConstructor,n),this.commandListItemComponent=new e.CommandListItemComponent(t.eventConstructor,n),this.commandDetailComponent=new e.CommandDetailComponent(t.eventConstructor,n),this.jsonContentComponent=new e.JSONContentComponent(t.eventConstructor,n),this.jsonGroupComponent=new e.JSONGroupComponent(t.eventConstructor,n),this.jsonItemComponent=new e.JSONItemComponent(t.eventConstructor,n),this.jsonImageItemComponent=new e.JSONImageItemComponent(t.eventConstructor,n),this.jsonSourceItemComponent=new e.JSONSourceItemComponent(t.eventConstructor,n),this.jsonHelpItemComponent=new e.JSONHelpItemComponent(t.eventConstructor,n),this.jsonVisualStateItemComponent=new e.JSONVisualStateItemComponent(t.eventConstructor,n),this.resultViewMenuComponent=new e.ResultViewMenuComponent(t.eventConstructor,n),this.resultViewContentComponent=new e.ResultViewContentComponent(t.eventConstructor,n),this.resultViewComponent=new e.ResultViewComponent(t.eventConstructor,n),this.sourceCodeComponent=new e.SourceCodeComponent(t.eventConstructor,n),this.informationColumnComponent=new e.InformationColumnComponent(t.eventConstructor,n),this.rootStateId=this.mvx.addRootState(null,this.resultViewComponent),this.menuStateId=this.mvx.addChildState(this.rootStateId,null,this.resultViewMenuComponent),this.contentStateId=this.mvx.addChildState(this.rootStateId,null,this.resultViewContentComponent),this.captureListStateId=this.mvx.addChildState(this.rootStateId,!1,this.captureListComponent),this.initMenuComponent(),this.captureListComponent.onCaptureLoaded.add(function(e){a.addCapture(e)}),this.captureListItemComponent.onCaptureSelected.add(function(e){a.selectCapture(e.stateId)}),this.captureListItemComponent.onSaveRequested.add(function(e){a.saveCapture(e.state.capture)}),this.commandListItemComponent.onCommandSelected.add(function(e){a.selectCommand(e.stateId)}),this.visualStateListItemComponent.onVisualStateSelected.add(function(e){a.selectVisualState(e.stateId)}),this.jsonSourceItemComponent.onOpenSourceClicked.add(function(e){a.mvx.removeChildrenStates(a.contentStateId);a.mvx.addChildState(a.contentStateId,{description:\"WebGl Shader Source Code:\",source:e.state.value},a.sourceCodeComponent)}),this.updateViewState()}return t.prototype.saveCapture=function(e){var t=document.createElement(\"a\"),n=JSON.stringify(e,null,4),a=new Blob([n],{type:\"octet/stream\"}),r=window.URL.createObjectURL(a);t.setAttribute(\"href\",r),t.setAttribute(\"download\",\"capture \"+new Date(e.startTime).toTimeString().split(\" \")[0]+\".json\"),t.click()},t.prototype.selectCapture=function(e){this.currentCommandId=-1,this.currentCaptureStateId=e,this.displayCurrentCapture()},t.prototype.selectCommand=function(e){this.currentCommandStateId=e,this.currentVisualStateId=this.displayCurrentCommand(),this.displayCurrentVisualState()},t.prototype.selectVisualState=function(e){this.currentVisualStateId=e,this.currentCommandStateId=this.displayCurrentVisualState(),this.displayCurrentCommand()},t.prototype.display=function(){this.visible=!0,this.updateViewState()},t.prototype.hide=function(){this.visible=!1,this.updateViewState()},t.prototype.addCapture=function(e){var t=this.mvx.insertChildState(this.captureListStateId,{capture:e,active:!1},0,this.captureListItemComponent);return this.selectCapture(t),t},t.prototype.initMenuComponent=function(){var e=this;this.mvx.updateState(this.menuStateId,{status:0,searchText:this.searchText,commandCount:0}),this.resultViewMenuComponent.onCloseClicked.add(function(t){e.hide()}),this.resultViewMenuComponent.onCapturesClicked.add(function(t){e.displayCaptures()}),this.resultViewMenuComponent.onCommandsClicked.add(function(t){e.displayCurrentCapture()}),this.resultViewMenuComponent.onInformationClicked.add(function(t){e.displayInformation()}),this.resultViewMenuComponent.onInitStateClicked.add(function(t){e.displayInitState()}),this.resultViewMenuComponent.onEndStateClicked.add(function(t){e.displayEndState()}),this.resultViewMenuComponent.onSearchTextChanged.add(function(t){e.search(t.sender.value)}),this.resultViewMenuComponent.onSearchTextCleared.add(function(t){e.mvx.updateState(e.menuStateId,{status:t.state.status,searchText:\"\",commandCount:t.state.commandCount}),e.search(\"\")})},t.prototype.onCaptureRelatedAction=function(e){var t=this.mvx.getGenericState(this.currentCaptureStateId);return this.commandCount=t.capture.commands.length,this.mvx.removeChildrenStates(this.contentStateId),this.mvx.updateState(this.menuStateId,{status:e,searchText:this.searchText,commandCount:this.commandCount}),this.mvx.getGenericState(this.captureListStateId)&&this.mvx.updateState(this.captureListStateId,!1),t.capture},t.prototype.displayCaptures=function(){this.mvx.updateState(this.menuStateId,{status:0,searchText:this.searchText,commandCount:this.commandCount}),this.mvx.updateState(this.captureListStateId,!0)},t.prototype.displayInformation=function(){var e=this.onCaptureRelatedAction(10),t=this.mvx.addChildState(this.contentStateId,!0,this.informationColumnComponent),n=this.mvx.addChildState(this.contentStateId,!1,this.informationColumnComponent),a=this.mvx.addChildState(t,null,this.jsonContentComponent);this.displayJSONGroup(a,\"Canvas\",e.canvas),this.displayJSONGroup(a,\"Context\",e.context);for(var r=this.mvx.addChildState(n,null,this.jsonContentComponent),o=0,i=e.analyses;o<i.length;o++){var s=i[o];this.displayJSONGroup(r,s.analyserName,s)}this.displayJSONGroup(r,\"Frame Memory Changes\",e.frameMemory),this.displayJSONGroup(r,\"Total Memory (seconds since application start: bytes)\",e.memory)},t.prototype.displayJSON=function(e,t){t.VisualState&&this.mvx.addChildState(e,t.VisualState,this.jsonVisualStateItemComponent);for(var n in t)if(\"VisualState\"!==n&&\"analyserName\"!==n){var a=t[n];if(\"source\"===n)this.mvx.addChildState(e,{key:n,value:a},this.jsonSourceItemComponent);else if(\"visual\"===n)for(var r in a)a.hasOwnProperty(r)&&a[r]&&this.mvx.addChildState(e,{key:r,value:a[r]},this.jsonImageItemComponent);else{var o=this.getJSONAsString(e,n,a);if(null===o||void 0===o)continue;if(this.toFilter(n)&&this.toFilter(a))continue;this.mvx.addChildState(e,{key:n,value:o},this.jsonItemComponent)}a&&a.__SPECTOR_Metadata&&this.displayJSONGroup(e,\"Metadata\",a.__SPECTOR_Metadata)}},t.prototype.getJSONAsString=function(e,t,n){if(null===n)return\"null\";if(void 0===n)return\"undefined\";if(\"number\"==typeof n)return Math.floor(n)===n?n.toFixed(0):n.toFixed(4);if(\"string\"==typeof n)return n;if(\"boolean\"==typeof n)return n?\"true\":\"false\";if(0===n.length)return\"Empty Array\";if(n.length){for(var a=[],r=0;r<n.length;r++){var o=this.getJSONAsString(e,t+\"(\"+r.toFixed(0)+\")\",n[r]);null!==o&&a.push(o)}return 0===a.length?null:a.join(\", \")}return n.help?(this.mvx.addChildState(e,{key:t,value:n.name,help:n.help},this.jsonHelpItemComponent),null):n.__SPECTOR_Object_TAG?n.__SPECTOR_Object_TAG.displayText:n.displayText?n.displayText:(\"object\"==typeof n&&this.displayJSONGroup(e,t,n),null)},t.prototype.displayJSONGroup=function(e,t,n){if(n){var a=this.mvx.addChildState(e,t,this.jsonGroupComponent);this.displayJSON(a,n),this.mvx.hasChildren(a)||this.mvx.removeState(a)}},t.prototype.displayInitState=function(){var e=this.onCaptureRelatedAction(20),t=this.mvx.addChildState(this.contentStateId,null,this.jsonContentComponent);this.displayJSON(t,e.initState)},t.prototype.displayEndState=function(){var e=this.onCaptureRelatedAction(30),t=this.mvx.addChildState(this.contentStateId,null,this.jsonContentComponent);this.displayJSON(t,e.endState)},t.prototype.displayCurrentCapture=function(){var e=this.onCaptureRelatedAction(40);this.mvx.updateAllChildrenGenericState(this.captureListStateId,function(e){return e.active=!1,e}),this.mvx.updateState(this.currentCaptureStateId,{capture:e,active:!0}),this.createVisualStates(e),this.commandListStateId=this.mvx.addChildState(this.contentStateId,null,this.commandListComponent),this.commandDetailStateId=this.mvx.addChildState(this.contentStateId,null,this.commandDetailComponent),this.createCommands(e)},t.prototype.displayCurrentCommand=function(){if(40!==this.mvx.getGenericState(this.menuStateId).status)return-1;var t=this.mvx.getGenericState(this.currentCommandStateId),n=t.capture;this.currentCommandId=n.id,this.mvx.updateAllChildrenGenericState(this.commandListStateId,function(e){return e.active=!1,e}),this.mvx.updateState(this.currentCommandStateId,{capture:n,visualStateId:t.visualStateId,active:!0}),this.mvx.removeChildrenStates(this.commandDetailStateId);var a=this.mvx.getGenericState(t.visualStateId);this.mvx.addChildState(this.commandDetailStateId,a.VisualState,this.jsonVisualStateItemComponent);var r=\"Unknown\";switch(n.status){case 50:r=\"Deprecated\";break;case 10:r=\"Unused\";break;case 20:r=\"Disabled\";break;case 30:r=\"Redundant\";break;case 40:r=\"Valid\"}var o=e.MDNCommandLinkHelper.getMDNLink(n.name);n.result?this.displayJSONGroup(this.commandDetailStateId,\"Global\",{name:{help:o,name:n.name},duration:n.commandEndTime-n.startTime,result:n.result,status:r}):this.displayJSONGroup(this.commandDetailStateId,\"Global\",{name:{help:o,name:n.name},duration:n.commandEndTime-n.startTime,status:r});for(var i in n)\"VisualState\"!==i&&\"result\"!==i&&\"object\"==typeof n[i]&&this.displayJSONGroup(this.commandDetailStateId,i,n[i]);return t.visualStateId},t.prototype.displayCurrentVisualState=function(){if(40!==this.mvx.getGenericState(this.menuStateId).status)return null;var e=this.mvx.getGenericState(this.currentVisualStateId);return e.commandStateId===Number.MIN_VALUE?this.displayInitState():e.commandStateId===Number.MAX_VALUE&&this.displayEndState(),this.mvx.updateAllChildrenGenericState(this.visualStateListStateId,function(e){return e.active=!1,e}),e.active=!0,this.mvx.updateState(this.currentVisualStateId,e),e.commandStateId},t.prototype.createVisualStates=function(e){this.visualStateListStateId=this.mvx.addChildState(this.contentStateId,null,this.visualStateListComponent),this.mvx.removeChildrenStates(this.visualStateListStateId),this.initVisualStateId=this.mvx.addChildState(this.visualStateListStateId,{VisualState:e.initState.VisualState,time:e.startTime,commandStateId:Number.MIN_VALUE,active:!1},this.visualStateListItemComponent)},t.prototype.createCommands=function(e){this.mvx.removeChildrenStates(this.commandListStateId);for(var t=this.initVisualStateId,n=!1,a=0;a<e.commands.length;a++){var r=e.commands[a];if(!this.toFilter(r.name)||r.id===this.currentCommandId){var o=this.mvx.addChildState(this.commandListStateId,{capture:r,active:!1},this.commandListItemComponent);if(r.VisualState)t=this.mvx.addChildState(this.visualStateListStateId,{VisualState:r.VisualState,time:r.endTime,commandStateId:o,active:!1},this.visualStateListItemComponent),n=!0;else if(!n){var i=this.mvx.getGenericState(this.initVisualStateId);i.commandStateId=o,this.mvx.updateState(this.initVisualStateId,i),n=!0}this.mvx.updateState(o,{capture:r,active:!1,visualStateId:t}),(-1===this.currentCommandId&&0===a||this.currentCommandId===r.id)&&(this.currentCommandStateId=o,this.displayCurrentCommand(),this.currentVisualStateId=t,this.displayCurrentVisualState())}}},t.prototype.updateViewState=function(){this.mvx.updateState(this.rootStateId,this.visible)},t.prototype.toFilter=function(e){return e+=\"\",!!(this.searchText&&this.searchText.length>2&&-1===e.indexOf(this.searchText))},t.prototype.search=function(e){switch(this.searchText=e,this.mvx.getGenericState(this.menuStateId).status){case 0:case 40:this.displayCurrentCapture();break;case 30:this.displayEndState();break;case 10:this.displayInformation();break;case 20:this.displayInitState()}this.searchText=\"\"},t}();e.ResultView=t}(e.EmbeddedFrontend||(e.EmbeddedFrontend={}))}(n||(n={}));var n;!function(e){!function(t){t.DefaultInjection={WebGlObjectNamespace:e.WebGlObjects,RecorderNamespace:e.Recorders,CommandNamespace:e.Commands,StateNamespace:e.States,AnalyserNamespace:e.Analysers,StackTraceCtor:e.Utils.StackTrace,LoggerCtor:e.Utils.ConsoleLogger,EventCtor:e.Utils.Event,TimeCtor:e.Utils.Time,CanvasSpyCtor:e.Spies.CanvasSpy,CommandSpyCtor:e.Spies.CommandSpy,ContextSpyCtor:e.Spies.ContextSpy,RecorderSpyCtor:e.Spies.RecorderSpy,StateSpyCtor:e.Spies.StateSpy,TimeSpyCtor:e.Spies.TimeSpy,WebGlObjectSpyCtor:e.Spies.WebGlObjectSpy,CaptureAnalyserCtor:e.Analysers.CaptureAnalyser,ExtensionsCtor:e.States.Information.Extensions,CapabilitiesCtor:e.States.Information.Capabilities,CompressedTexturesCtor:e.States.Information.CompressedTextures,DefaultCommandCtor:e.Commands.DefaultCommand,CaptureMenuConstructor:e.EmbeddedFrontend.CaptureMenu,ResultViewConstructor:e.EmbeddedFrontend.ResultView}}(e.ProvidedInjection||(e.ProvidedInjection={}))}(n||(n={}));var n;!function(e){var t=function(){function t(t){void 0===t&&(t={}),this.options=t,this.noFrameTimeout=-1,this.injection=t.injection||e.ProvidedInjection.DefaultInjection,this.captureNextFrames=0,this.retry=0,this.contexts=[],this.logger=new this.injection.LoggerCtor,this.time=new this.injection.TimeCtor,this.timeSpy=new this.injection.TimeSpyCtor({eventConstructor:this.injection.EventCtor,timeConstructor:this.injection.TimeCtor},this.logger),this.onCaptureStarted=new this.injection.EventCtor,this.onCapture=new this.injection.EventCtor,this.onError=new this.injection.EventCtor,this.timeSpy.onFrameStart.add(this.onFrameStart,this),this.timeSpy.onFrameEnd.add(this.onFrameEnd,this),this.timeSpy.onError.add(this.onErrorInternal,this)}return t.getFirstAvailable3dContext=function(e){return this.tryGetContextFromHelperField(e)||this.tryGetContextFromCanvas(e,\"webgl\")||this.tryGetContextFromCanvas(e,\"experimental-webgl\")||this.tryGetContextFromCanvas(e,\"webgl2\")||this.tryGetContextFromCanvas(e,\"experimental-webgl2\")},t.tryGetContextFromHelperField=function(e){var t=e.getAttribute(\"__spector_context_type\");if(t)return this.tryGetContextFromCanvas(e,t)},t.tryGetContextFromCanvas=function(e,t){var n;try{n=e.getContext(t)}catch(e){}return n},t.prototype.displayUI=function(){var e=this;this.captureMenu||(this.getCaptureUI(),this.captureMenu.onPauseRequested.add(this.pause,this),this.captureMenu.onPlayRequested.add(this.play,this),this.captureMenu.onPlayNextFrameRequested.add(this.playNextFrame,this),this.captureMenu.onCaptureRequested.add(function(t){t&&e.captureCanvas(t.ref)},this),setInterval(function(){e.captureMenu.setFPS(e.getFps())},1e3),this.captureMenu.trackPageCanvases(),this.captureMenu.display()),this.resultView||(this.getResultUI(),this.onCapture.add(function(t){e.resultView.display(),e.resultView.addCapture(t)}))},t.prototype.getResultUI=function(){return this.resultView||(this.resultView=new this.injection.ResultViewConstructor({eventConstructor:this.injection.EventCtor},this.logger)),this.resultView},t.prototype.getCaptureUI=function(){return this.captureMenu||(this.captureMenu=new this.injection.CaptureMenuConstructor({eventConstructor:this.injection.EventCtor},this.logger)),this.captureMenu},t.prototype.pause=function(){this.timeSpy.changeSpeedRatio(0)},t.prototype.play=function(){this.timeSpy.changeSpeedRatio(1)},t.prototype.playNextFrame=function(){this.timeSpy.playNextFrame()},t.prototype.drawOnlyEveryXFrame=function(e){this.timeSpy.changeSpeedRatio(e)},t.prototype.getFps=function(){return this.timeSpy.getFps()},t.prototype.spyCanvases=function(){if(this.canvasSpy)return void this.onErrorInternal(\"Already spying canvas.\");this.canvasSpy=new this.injection.CanvasSpyCtor({eventConstructor:this.injection.EventCtor},this.logger),this.canvasSpy.onContextRequested.add(this.spyContext,this)},t.prototype.spyCanvas=function(e){if(this.canvasSpy)return void this.onErrorInternal(\"Already spying canvas.\");this.canvasSpy=new this.injection.CanvasSpyCtor({eventConstructor:this.injection.EventCtor,canvas:e},this.logger),this.canvasSpy.onContextRequested.add(this.spyContext,this)},t.prototype.getAvailableContexts=function(){return this.getAvailableContexts()},t.prototype.captureCanvas=function(e){var n=this.getAvailableContextSpyByCanvas(e);if(n)this.captureContextSpy(n);else{var a=t.getFirstAvailable3dContext(e);a?this.captureContext(a):this.logger.error(\"No webgl context available on the chosen canvas.\")}},t.prototype.captureContext=function(e){var t=this.getAvailableContextSpyByCanvas(e.canvas);t||(t=e.getIndexedParameter?new this.injection.ContextSpyCtor({context:e,version:2,recordAlways:!1,injection:this.injection},this.time,this.logger):new this.injection.ContextSpyCtor({context:e,version:1,recordAlways:!1,injection:this.injection},this.time,this.logger),this.contexts.push({canvas:t.context.canvas,contextSpy:t})),t&&this.captureContextSpy(t)},t.prototype.captureContextSpy=function(e){var t=this;this.capturingContext?this.onErrorInternal(\"Already capturing a context.\"):(this.retry=0,this.capturingContext=e,this.capture(),this.noFrameTimeout=setTimeout(function(){t.capturingContext&&t.retry>1?t.onErrorInternal(\"No frames with gl commands detected. Try moving the camera.\"):t.onErrorInternal(\"No frames detected. Try moving the camera or implementing animationRequestFrame.\")},1e4))},t.prototype.capture=function(e){void 0===e&&(e=1),this.captureNextFrames=e,this.playNextFrame()},t.prototype.spyContext=function(e){var t=this.getAvailableContextSpyByCanvas(e.context.canvas);t||(t=new this.injection.ContextSpyCtor({context:e.context,version:e.contextVersion,recordAlways:!0,injection:this.injection},this.time,this.logger),this.contexts.push({canvas:t.context.canvas,contextSpy:t})),t.spy()},t.prototype.getAvailableContextSpyByCanvas=function(e){for(var t=0,n=this.contexts;t<n.length;t++){var a=n[t];if(a.canvas===e)return a.contextSpy}},t.prototype.onFrameStart=function(){this.captureNextFrames>0?(this.capturingContext&&(this.onCaptureStarted.trigger(void 0),this.capturingContext.startCapture()),this.captureNextFrames--):this.capturingContext=void 0},t.prototype.onFrameEnd=function(){if(this.capturingContext&&0===this.captureNextFrames){var e=this.capturingContext.stopCapture();e.commands.length>0?(this.noFrameTimeout>-1&&clearTimeout(this.noFrameTimeout),this.triggerCapture(e)):(this.retry++,this.capture(1))}},t.prototype.triggerCapture=function(e){this.captureMenu&&this.captureMenu.captureComplete(null),this.onCapture.trigger(e)},t.prototype.onErrorInternal=function(e){if(this.logger.error(e),this.noFrameTimeout>-1&&clearTimeout(this.noFrameTimeout),!this.capturingContext)throw e;this.capturingContext=void 0,this.captureNextFrames=0,this.retry=0,this.captureMenu&&this.captureMenu.captureComplete(e),this.onError.trigger(e)},t}();e.Spector=t}(n||(n={})),e.exports=n},function(e,t,n){var a=n(6);\"string\"==typeof a&&(a=[[e.i,a,\"\"]]);n(1)(a,{insertInto:\"html\"});a.locals&&(e.exports=a.locals)},function(e,t,n){var a=n(7);\"string\"==typeof a&&(a=[[e.i,a,\"\"]]);n(1)(a,{insertInto:\"html\"});a.locals&&(e.exports=a.locals)},function(e,t,n){t=e.exports=n(0)(void 0),t.push([e.i,\"code[class*=language-],pre[class*=language-]{color:#f8f8f2;background:none;text-shadow:0 1px rgba(0,0,0,.3);font-family:Consolas,Monaco,Andale Mono,Ubuntu Mono,monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none}pre[class*=language-]{padding:1em;margin:.5em 0;overflow:auto;border-radius:.3em}:not(pre)>code[class*=language-]{padding:.1em;border-radius:.3em;white-space:normal}.token.cdata,.token.comment,.token.doctype,.token.prolog{color:#708090}.token.punctuation{color:#f8f8f2}.namespace{opacity:.7}.token.constant,.token.deleted,.token.property,.token.symbol,.token.tag{color:#f92672}.token.boolean,.token.number{color:#ae81ff}.token.attr-name,.token.builtin,.token.char,.token.inserted,.token.selector,.token.string{color:#a6e22e}.language-css .token.string,.style .token.string,.token.entity,.token.operator,.token.url,.token.variable{color:#f8f8f2}.token.atrule,.token.attr-value,.token.function{color:#e6db74}.token.keyword{color:#66d9ef}.token.important,.token.regex{color:#fd971f}.token.bold,.token.important{font-weight:700}.token.italic{font-style:italic}.token.entity{cursor:help}\",\"\"])},function(e,t,n){t=e.exports=n(0)(void 0),t.push([e.i,\"@import url(https://fonts.googleapis.com/css?family=Montserrat:300,400);\",\"\"]),t.push([e.i,'.resultViewComponent{position:absolute;z-index:99999;border:1px solid #000;top:0;left:0;bottom:0;right:0;background-color:#222;opacity:1;visibility:hidden;display:none;color:#f9f9f9;font-family:Consolas,monaco,monospace;font-size:14px;font-weight:500}.resultViewComponent.active{visibility:visible;display:block}.resultViewComponent,.resultViewComponent:after,.resultViewComponent:before{box-sizing:content-box}.resultViewMenuComponent{font-family:Montserrat,sans-serif;font-size:13px;font-weight:300;line-height:40px;flex:1 100%;height:40px;outline:0 none;border-bottom:2px solid #222;box-sizing:border-box;list-style:none;margin:0;background:#2c2c2c;display:-webkit-box;display:-moz-box;display:-ms-flexbox;display:-webkit-flex;display:flex;-webkit-flex-flow:row wrap;flex-flow:row wrap;justify-content:flex-end}.resultViewMenuComponent .resultViewMenuOpen{display:none;visibility:hidden}.resultViewMenuComponent a{outline:0 none;text-decoration:none;display:block;padding:0 20px;color:#ccc;background:#2c2c2c;box-sizing:border-box;height:100%}.resultViewMenuComponent a.active{background:#222;color:#fff;font-weight:400;border-bottom:2px solid #f0640d}.resultViewMenuComponent a:hover{background:#222;color:#c9c9c9;cursor:pointer;transition:color .3s;-webkit-transition:color .3s;-moz-transition:color .3s}.resultViewMenuComponent a:hover.active{color:#f0640d;transition:color 0;-webkit-transition:color 0;-moz-transition:color 0}.resultViewMenuComponent a.clearSearch{display:inline-block;padding:0;margin-left:-30px;margin-right:20px;z-index:9000;color:#f9f9f9}.resultViewMenuComponent a.clearSearch:hover{background:#2c2c2c;color:#f0640d}@media (max-width:1024px){.resultViewMenuComponent{padding:0;position:absolute;overflow-y:visible;top:0;left:0;right:0;bottom:0;z-index:999999;display:block}.resultViewMenuComponent .resultViewMenuOpen{display:block;visibility:visible}.resultViewMenuComponent li:not(.resultViewMenuSmall){display:none;visibility:hidden}.resultViewMenuComponent li{background:#2c2c2c}.resultViewMenuComponent li.searchContainer{background:#464646}.resultViewMenuComponent a.active{background:#2c2c2c}}.resultViewMenuComponent input{border:0;font-family:Montserrat,sans-serif;font-weight:300;padding:0 20px;background:#464646;color:#f9f9f9;height:100%;position:relative;top:-1px;box-sizing:border-box}.resultViewMenuComponent input:focus{border:0;outline:0 none}.resultViewMenuComponent .clearSearch{position:relative;background:transparent;display:inline;padding:0;margin-left:-30px;z-index:9000;color:#f0640d}.resultViewMenuComponent .clearSearch:hover{background:transparent!important}.resultViewMenuComponent ::-webkit-input-placeholder{color:#ccc}.resultViewMenuComponent :-moz-placeholder,.resultViewMenuComponent ::-moz-placeholder{color:#ccc}.resultViewMenuComponent :-ms-input-placeholder{color:#ccc}.resultViewContentComponent{position:absolute;top:40px;left:0;bottom:0;right:0}.informationColumnLeftComponent{left:0;right:50%}.informationColumnLeftComponent,.informationColumnRightComponent{position:absolute;top:0;bottom:0;overflow:auto;overflow-x:hidden;overflow-y:visible}.informationColumnRightComponent{left:50%;right:0}.captureListComponent{position:absolute;top:40px;left:0;bottom:0;right:0;background:#222;z-index:9000;display:none;visibility:hidden;overflow-y:visible;overflow-x:hidden}.captureListComponent.active{display:block;visibility:visible}.captureListComponent .openCaptureFile{border:1px dashed #f9f9f9;display:block;margin:5px;padding:5px;text-align:center;font-style:italic}.captureListComponent .openCaptureFile span{line-height:100%;vertical-align:middle}.captureListComponent ul{margin:0;padding:0;list-style:none;display:-webkit-box;display:-moz-box;display:-ms-flexbox;display:-webkit-flex;display:flex;-webkit-flex-flow:row wrap;flex-flow:row wrap;justify-content:flex-start}.captureListComponent ul li{margin:5px;border:1px solid #606060}.captureListComponent ul li img{width:295px;background-image:-moz-linear-gradient(45deg,#d9d9d9 25%,transparent 25%),-moz-linear-gradient(-45deg,#d9d9d9 25%,transparent 25%),-moz-linear-gradient(45deg,transparent 75%,#d9d9d9 75%),-moz-linear-gradient(-45deg,transparent 75%,#d9d9d9 75%);background-image:-webkit-gradient(linear,0 100%,100% 0,color-stop(.25,#c9c9c9),color-stop(.25,transparent)),-webkit-gradient(linear,0 0,100% 100%,color-stop(.25,#c9c9c9),color-stop(.25,transparent)),-webkit-gradient(linear,0 100%,100% 0,color-stop(.75,transparent),color-stop(.75,#c9c9c9)),-webkit-gradient(linear,0 0,100% 100%,color-stop(.75,transparent),color-stop(.75,#c9c9c9));-moz-background-size:50px 50px;background-size:50px 50px;-webkit-background-size:50px 51px;background-position:0 0,25px 0,25px -25px,0 25px;display:block}.captureListComponent ul li span{display:block;text-align:center;border:5px solid #222}.captureListComponent ul li span .captureListItemSave{color:#f9f9f9;font-size:16px;margin-left:10px;position:relative;padding:3px 8px 3px 32px}.captureListComponent ul li span .captureListItemSave:after,.captureListComponent ul li span .captureListItemSave:before{box-sizing:border-box;content:\"\";position:absolute}.captureListComponent ul li span .captureListItemSave:before{background:#d9d9d9;border-color:#f9f9f9;border-style:solid;border-width:7px 2px 1px;border-radius:1px;height:16px;left:8px;top:5px;width:16px}.captureListComponent ul li span .captureListItemSave:after{background:#f9f9f9;border-color:#d9d9d9;border-style:solid;border-width:1px 1px 1px 4px;height:5px;left:13px;top:5px;width:7px}.captureListComponent ul li:hover{cursor:pointer}.captureListComponent ul li.active span{background:#f0640d;border:5px solid #f0640d}.captureListComponent ul li.active span .captureListItemSave:before{background:#f0640d}.captureListComponent ul li.active span .captureListItemSave:after{border-color:#f0640d}.visualStateListComponent{position:absolute;top:0;left:0;bottom:0;padding:5px;right:80%;overflow-y:visible;overflow-x:hidden}.visualStateListComponent ul{margin:0;padding:0;list-style:none}.visualStateListComponent ul li{margin:20px 15px 0;border:1px solid #606060}.visualStateListComponent ul li img{display:block;width:100%;margin:0;padding:0;box-sizing:border-box;background-image:-moz-linear-gradient(45deg,#d9d9d9 25%,transparent 25%),-moz-linear-gradient(-45deg,#d9d9d9 25%,transparent 25%),-moz-linear-gradient(45deg,transparent 75%,#d9d9d9 75%),-moz-linear-gradient(-45deg,transparent 75%,#d9d9d9 75%);background-image:-webkit-gradient(linear,0 100%,100% 0,color-stop(.25,#c9c9c9),color-stop(.25,transparent)),-webkit-gradient(linear,0 0,100% 100%,color-stop(.25,#c9c9c9),color-stop(.25,transparent)),-webkit-gradient(linear,0 100%,100% 0,color-stop(.75,transparent),color-stop(.75,#c9c9c9)),-webkit-gradient(linear,0 0,100% 100%,color-stop(.75,transparent),color-stop(.75,#c9c9c9));-moz-background-size:50px 50px;background-size:50px 50px;-webkit-background-size:50px 51px;background-position:0 0,25px 0,25px -25px,0 25px}.visualStateListComponent ul li:hover{cursor:pointer}.visualStateListComponent ul li span{border:5px solid #222;background:#222;box-sizing:border-box;display:inline-block;width:100%;margin:0;padding:5px;word-wrap:break-word}.visualStateListComponent ul li.active{border:2px solid #f0640d}.commandListComponent{position:absolute;top:0;left:20%;right:40%;bottom:0;color:#d3d3d3}.commandListComponent ul{margin:0;padding:0;list-style:none;overflow-y:visible;overflow-x:hidden;height:100%}.commandListComponent ul li{padding:8px}.commandListComponent ul li span{word-wrap:break-word}.commandListComponent ul li:hover{color:#f9f9f9;cursor:pointer;transition:color .3s;-webkit-transition:color .3s;-moz-transition:color .3s}.commandListComponent ul li:nth-child(2n){background:#2c2c2c}.commandListComponent ul li:nth-child(odd){background:#222}.commandListComponent ul li .important{font-weight:800}.commandListComponent ul li .important.deprecated{color:red}.commandListComponent ul li .important.unused{color:#ff0}.commandListComponent ul li .important.disabled{color:gray}.commandListComponent ul li .important.redundant{color:orange}.commandListComponent ul li .important.valid{color:#adff2f}.commandListComponent ul li.active{background:#f37628;color:#222}.commandListComponent ul li.drawCall{background:#5db0d7;color:#222}.commandDetailComponent{position:absolute;top:0;left:60%;right:0;bottom:0;overflow-y:visible;overflow-x:hidden}.jsonGroupComponent{display:block;margin:10px;padding:10px;padding-bottom:5px}.jsonGroupComponent .jsonGroupComponentTitle{display:block;font-size:16px;color:#5db0d7;border-bottom:1px solid #5db0d7;padding-bottom:5px;margin-bottom:5px;text-transform:capitalize}.jsonGroupComponent ul{margin:0;padding:0;list-style:none}.jsonGroupComponent ul li:nth-child(2n),.jsonGroupComponent ul li:nth-child(odd){background:#222}.jsonItemComponentKey{color:#f0640d}.jsonItemComponentValue{white-space:pre-wrap}.jsonItemImageHolder{width:50%;margin:auto}.jsonItemImageHolder .jsonItemImage{margin:5px;display:block;border:1px solid #606060;width:100%}.jsonItemImageHolder .jsonItemImage img{width:100%;display:block;margin:auto;max-width:256px;background-image:-moz-linear-gradient(45deg,#d9d9d9 25%,transparent 25%),-moz-linear-gradient(-45deg,#d9d9d9 25%,transparent 25%),-moz-linear-gradient(45deg,transparent 75%,#d9d9d9 75%),-moz-linear-gradient(-45deg,transparent 75%,#d9d9d9 75%);background-image:-webkit-gradient(linear,0 100%,100% 0,color-stop(.25,#c9c9c9),color-stop(.25,transparent)),-webkit-gradient(linear,0 0,100% 100%,color-stop(.25,#c9c9c9),color-stop(.25,transparent)),-webkit-gradient(linear,0 100%,100% 0,color-stop(.75,transparent),color-stop(.75,#c9c9c9)),-webkit-gradient(linear,0 0,100% 100%,color-stop(.75,transparent),color-stop(.75,#c9c9c9));-moz-background-size:50px 50px;background-size:50px 50px;-webkit-background-size:50px 51px;background-position:0 0,25px 0,25px -25px,0 25px}.jsonItemImageHolder .jsonItemImage span{margin:0;padding:5px;word-wrap:break-word;display:inline-block;width:100%;box-sizing:border-box}[commandName=onOpenSourceClicked]:hover{color:#f9f9f9;cursor:pointer;transition:color .3s;-webkit-transition:color .3s;-moz-transition:color .3s}.jsonVisualStateItemComponent{text-align:center;padding:10px}.jsonVisualStateItemComponent img{border:1px solid #606060;margin:5px;background-image:-moz-linear-gradient(45deg,#d9d9d9 25%,transparent 25%),-moz-linear-gradient(-45deg,#d9d9d9 25%,transparent 25%),-moz-linear-gradient(45deg,transparent 75%,#d9d9d9 75%),-moz-linear-gradient(-45deg,transparent 75%,#d9d9d9 75%);background-image:-webkit-gradient(linear,0 100%,100% 0,color-stop(.25,#c9c9c9),color-stop(.25,transparent)),-webkit-gradient(linear,0 0,100% 100%,color-stop(.25,#c9c9c9),color-stop(.25,transparent)),-webkit-gradient(linear,0 100%,100% 0,color-stop(.75,transparent),color-stop(.75,#c9c9c9)),-webkit-gradient(linear,0 0,100% 100%,color-stop(.75,transparent),color-stop(.75,#c9c9c9));-moz-background-size:50px 50px;background-size:50px 50px;-webkit-background-size:50px 51px;background-position:0 0,25px 0,25px -25px,0 25px;width:100%;max-width:512px}.jsonVisualStateItemComponent span{display:block}.jsonContentComponent{position:absolute;top:0;left:0;right:0;bottom:0;padding:10px;overflow-y:visible;overflow-x:hidden}.jsonItemComponentValue{word-break:break-all;white-space:normal}.jsonSourceItemComponentOpen{font-weight:700;color:#5db0d7;text-decoration:underline}.sourceCodeComponent{position:absolute;top:0;left:0;bottom:0;right:0;height:100%;background:#222;z-index:9000;overflow-x:visible;overflow:auto}.sourceCodeComponent .sourceCodeComponentTitle{font-size:16px;font-weight:800;line-height:50px;color:#f0640d;padding:1em;margin:.5em 0}.captureMenuComponent{position:absolute;padding:7px;z-index:99999;top:10px;left:50%;margin-left:-209px;height:40px;width:400px;border:2px solid #222;background-color:#2c2c2c;visibility:hidden;display:none;color:#f9f9f9;font-family:Consolas,monaco,monospace;font-size:14px;font-weight:500}.captureMenuComponent.active{visibility:visible;display:block}.captureMenuComponent,.captureMenuComponent:after,.captureMenuComponent:before{box-sizing:content-box}.captureMenuLogComponent{position:absolute;padding:7px;z-index:80000;top:66px;left:50%;margin-left:-209px;height:40px;width:400px;border:2px solid #222;background-color:#2c2c2c;visibility:hidden;display:none;color:#f9f9f9;font-family:Consolas,monaco,monospace;font-size:14px;font-weight:500}.captureMenuLogComponent.active{visibility:visible;display:block}.captureMenuLogComponent,.captureMenuLogComponent:after,.captureMenuLogComponent:before{box-sizing:content-box}.captureMenuLogComponent span.error{color:red}.canvasListComponent{float:left;width:50%;height:100%}.canvasListComponent [commandName=onCanvasSelection]{vertical-align:center;line-height:40px;white-space:nowrap;text-overflow:ellipsis;width:190px;display:inline-block;overflow:hidden;margin:0 5px}.canvasListComponent [commandName=onCanvasSelection]:hover{color:#c9c9c9;cursor:pointer;transition:color .3s;-webkit-transition:color .3s;-moz-transition:color .3s}.canvasListComponent ul{margin:0;padding:7px;list-style:none;position:absolute;top:54px;left:-2px;width:400px;border:2px solid #222;background-color:#2c2c2c}.canvasListComponent ul li{margin:5px}.canvasListComponent ul li:hover{color:#c9c9c9;cursor:pointer;transition:color .3s;-webkit-transition:color .3s;-moz-transition:color .3s}.captureMenuActionsComponent{float:left;width:30%;height:100%;margin-top:7.5px}.captureMenuActionsComponent div{float:left}.captureMenuActionsComponent [commandName=onCaptureRequested]{border-radius:50%;background:#2c2c2c;border:2px solid red;width:21px;height:21px}.captureMenuActionsComponent [commandName=onCaptureRequested]:hover{background:red;cursor:pointer;transition:background .3s;-webkit-transition:background .3s;-moz-transition:background .3s}.captureMenuActionsComponent [commandName=onPlayNextFrameRequested],.captureMenuActionsComponent [commandName=onPlayRequested]{width:21px;height:21px;border:2px solid #f9f9f9;border-radius:50%;margin-left:9px}.captureMenuActionsComponent [commandName=onPlayNextFrameRequested]:before,.captureMenuActionsComponent [commandName=onPlayRequested]:before{content:\"\";position:absolute;display:inline-block;margin-top:6px;margin-left:4px;width:7px;height:7px;border-top:2px solid #f9f9f9;border-right:2px solid #f9f9f9;background-color:#f9f9f9;-moz-transform:rotate(45deg);-webkit-transform:rotate(45deg);transform:rotate(45deg);z-index:-20}.captureMenuActionsComponent [commandName=onPlayNextFrameRequested]:after,.captureMenuActionsComponent [commandName=onPlayRequested]:after{content:\"\";position:absolute;display:inline-block;width:8px;height:20px;background-color:#2c2c2c;z-index:-10}.captureMenuActionsComponent [commandName=onPlayNextFrameRequested]:hover,.captureMenuActionsComponent [commandName=onPlayRequested]:hover{cursor:pointer;border:2px solid #c9c9c9;transition:border .3s;-webkit-transition:border .3s;-moz-transition:border .3s}.captureMenuActionsComponent [commandName=onPauseRequested]{width:21px;height:21px;border:2px solid #f9f9f9;border-radius:50%;margin-left:9px}.captureMenuActionsComponent [commandName=onPauseRequested]:before{content:\"\";position:absolute;display:inline-block;width:2px;height:13px;margin-left:12px;margin-top:4px;background-color:#f9f9f9}.captureMenuActionsComponent [commandName=onPauseRequested]:after{content:\"\";position:absolute;display:inline-block;width:2px;height:13px;margin-left:7px;margin-top:4px;background-color:#f9f9f9}.captureMenuActionsComponent [commandName=onPauseRequested]:hover{cursor:pointer;border:2px solid #c9c9c9;transition:border .3s;-webkit-transition:border .3s;-moz-transition:border .3s}.captureMenuActionsComponent [commandName=onPlayNextFrameRequested]:before{background-color:#2c2c2c}.fpsCounterComponent{float:left;width:20%;vertical-align:center;line-height:40px;white-space:nowrap}',\"\"])},function(e,t){e.exports=function(e){var t=\"undefined\"!=typeof window&&window.location;if(!t)throw new Error(\"fixUrls requires window.location\");if(!e||\"string\"!=typeof e)return e;var n=t.protocol+\"//\"+t.host,a=n+t.pathname.replace(/\\/[^\\/]*$/,\"/\");return e.replace(/url\\s*\\(((?:[^)(]|\\((?:[^)(]+|\\([^)(]*\\))*\\))*)\\)/gi,function(e,t){var r=t.trim().replace(/^\"(.*)\"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});if(/^(#|data:|http:\\/\\/|https:\\/\\/|file:\\/\\/\\/)/i.test(r))return e;var o;return o=0===r.indexOf(\"//\")?r:0===r.indexOf(\"/\")?n+r:a+r.replace(/^\\.\\//,\"\"),\"url(\"+JSON.stringify(o)+\")\"})}},function(e,t){var n;n=function(){return this}();try{n=n||Function(\"return this\")()||(0,eval)(\"this\")}catch(e){\"object\"==typeof window&&(n=window)}e.exports=n},function(e,t,n){n(5),n(4),n(2),e.exports=n(3)}])});\n\n/***/ }),\n/* 38 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nfunction stringToBuffer(binaryString) {\r\n    var array = new Uint8Array(binaryString.length);\r\n    for (var i = 0; i < binaryString.length; i++) {\r\n        array[i] = binaryString.charCodeAt(i);\r\n    }\r\n    return array.buffer;\r\n}\r\nexports.stringToBuffer = stringToBuffer;\r\n\n\n/***/ }),\n/* 39 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar chunks_1 = __webpack_require__(40);\r\nvar constants_1 = __webpack_require__(14);\r\nvar PngReader = (function () {\r\n    function PngReader(data) {\r\n        this.data = data;\r\n        this._dataView = new DataView(data);\r\n        this._signature = new Uint8Array(data, 0, constants_1.SIGN_OFFSET);\r\n        this._read();\r\n    }\r\n    Object.defineProperty(PngReader.prototype, \"header\", {\r\n        get: function () {\r\n            return this._header;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PngReader.prototype, \"palette\", {\r\n        get: function () {\r\n            return this._palette;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PngReader.prototype, \"imageData\", {\r\n        get: function () {\r\n            return this._data;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PngReader.prototype, \"imageColorComponents\", {\r\n        get: function () {\r\n            switch (this._header.colorType) {\r\n                case constants_1.ColorType.Greyscale:\r\n                case constants_1.ColorType.Indexed:\r\n                    return 1;\r\n                case constants_1.ColorType.TruecolorAlpha:\r\n                    return 4;\r\n                case constants_1.ColorType.Truecolor:\r\n                    return 3;\r\n                default:\r\n                    throw \"unsupported color format\";\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    PngReader.prototype.createPixelData = function () {\r\n        var w = this._header.width;\r\n        var h = this._header.height;\r\n        var c = this.imageColorComponents;\r\n        var bytes = w * h * c;\r\n        var pngData = this.imageData.decompress();\r\n        var data = new Uint8Array(bytes);\r\n        for (var y = 0; y < h; y++) {\r\n            for (var x = 0; x < w; x++) {\r\n                var pngOffset = y * (w * c + 1) + x * c + 1;\r\n                var pxOffset = y * (w * c) + x * c;\r\n                for (var i = 0; i < c; i++) {\r\n                    data[pxOffset + i] = pngData[pngOffset + i];\r\n                }\r\n            }\r\n        }\r\n        return data;\r\n    };\r\n    PngReader.prototype.createPaletteDataRgba = function (size) {\r\n        // rgba\r\n        var c = 4;\r\n        // rgb\r\n        var cPng = 3;\r\n        var data = new Uint8Array(size * c);\r\n        var pngData = this._palette.data;\r\n        for (var i = 0; i < this._palette.colors; i++) {\r\n            var offsetPng = cPng * i;\r\n            var offset = c * i;\r\n            data[offset] = pngData[offsetPng];\r\n            data[offset + 1] = pngData[offsetPng + 1];\r\n            data[offset + 2] = pngData[offsetPng + 2];\r\n            data[offset + 3] = 255;\r\n        }\r\n        return data;\r\n    };\r\n    PngReader.prototype._read = function () {\r\n        this._checkSignature();\r\n        this._readChunks();\r\n    };\r\n    PngReader.prototype._checkSignature = function () {\r\n        var sig = this._signature;\r\n        if (!(sig[0] == 137\r\n            && sig[1] == 80\r\n            && sig[2] == 78\r\n            && sig[3] == 71\r\n            && sig[4] == 13\r\n            && sig[5] == 10\r\n            && sig[6] == 26\r\n            && sig[7] == 10))\r\n            throw \"Data is not a png\";\r\n    };\r\n    PngReader.prototype._readChunks = function () {\r\n        var offset = constants_1.SIGN_OFFSET;\r\n        while (offset < this._dataView.byteLength) {\r\n            var chunk = this._readChunk(offset);\r\n            if (chunk) {\r\n                switch (chunk.type) {\r\n                    case constants_1.ChunkType.Header:\r\n                        this._header = chunk;\r\n                        break;\r\n                    case constants_1.ChunkType.Palette:\r\n                        this._palette = chunk;\r\n                        break;\r\n                    case constants_1.ChunkType.Data:\r\n                        this._data = chunk;\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n                offset += chunk.totalLength;\r\n            }\r\n        }\r\n    };\r\n    PngReader.prototype._readChunk = function (offset) {\r\n        var view = this._dataView;\r\n        var length = view.getUint32(offset, false);\r\n        offset += 4;\r\n        var type = view.getUint32(offset, false);\r\n        offset += 4;\r\n        var data = new Uint8Array(this._dataView.buffer, offset, length);\r\n        offset += length;\r\n        var crc = view.getUint32(offset, false);\r\n        console.log(this._chunkToString(type));\r\n        switch (type) {\r\n            case constants_1.ChunkType.Header:\r\n                return new chunks_1.HeaderChunk(length, type, data, crc);\r\n            case constants_1.ChunkType.Palette:\r\n                return new chunks_1.PaletteChunk(length, type, data, crc);\r\n            case constants_1.ChunkType.Data:\r\n                return new chunks_1.DataChunk(length, type, data, crc);\r\n            case constants_1.ChunkType.End:\r\n                return new chunks_1.EndChunk(length, type, data, crc);\r\n            default:\r\n                // unknown chunk, return generic chunk\r\n                return new chunks_1.PngChunk(length, type, data, crc);\r\n        }\r\n    };\r\n    PngReader.prototype._chunkToString = function (id) {\r\n        return [\r\n            (id >>> 24) & 0x000000FF,\r\n            (id >>> 16) & 0x000000FF,\r\n            (id >>> 8) & 0x000000FF,\r\n            (id) & 0x000000FF\r\n        ].reduce(function (p, c, i) { return p + String.fromCharCode(c); }, \"\");\r\n    };\r\n    return PngReader;\r\n}());\r\nexports.PngReader = PngReader;\r\n\n\n/***/ }),\n/* 40 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = __webpack_require__(2);\r\nvar constants_1 = __webpack_require__(14);\r\nvar pako = __webpack_require__(41);\r\nvar PngChunk = (function () {\r\n    function PngChunk(_length, _type, _data, _crc) {\r\n        this._length = _length;\r\n        this._type = _type;\r\n        this._data = _data;\r\n        this._crc = _crc;\r\n        if (_length != _data.length)\r\n            throw \"Invalid length\";\r\n    }\r\n    Object.defineProperty(PngChunk.prototype, \"dataLength\", {\r\n        get: function () {\r\n            return this._length;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PngChunk.prototype, \"totalLength\", {\r\n        get: function () {\r\n            return this._length + constants_1.LENGTH_LENGTH + constants_1.TYPE_LENGTH + constants_1.CRC_LENGTH;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PngChunk.prototype, \"type\", {\r\n        get: function () {\r\n            return this._type;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PngChunk.prototype, \"crc\", {\r\n        get: function () {\r\n            return this._crc;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PngChunk.prototype, \"data\", {\r\n        get: function () {\r\n            return this._data;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return PngChunk;\r\n}());\r\nexports.PngChunk = PngChunk;\r\nvar HeaderChunk = (function (_super) {\r\n    tslib_1.__extends(HeaderChunk, _super);\r\n    function HeaderChunk(length, type, data, crc) {\r\n        var _this = _super.call(this, length, type, data, crc) || this;\r\n        if (type != constants_1.ChunkType.Header)\r\n            throw \"Not a header chunk\";\r\n        _this._read();\r\n        return _this;\r\n    }\r\n    HeaderChunk.prototype._read = function () {\r\n        var view = new DataView(this._data.buffer, this._data.byteOffset, this._data.byteLength);\r\n        this._width = view.getUint32(0, false);\r\n        this._height = view.getUint32(4, false);\r\n        this._bitDepth = view.getUint8(8);\r\n        this._colorType = view.getUint8(9);\r\n        this._compressionMethod = view.getUint8(10);\r\n        this._filterMethod = view.getUint8(11);\r\n        this._interlace = view.getUint8(12) == 1 ? true : false;\r\n    };\r\n    Object.defineProperty(HeaderChunk.prototype, \"width\", {\r\n        get: function () {\r\n            return this._width;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(HeaderChunk.prototype, \"height\", {\r\n        get: function () {\r\n            return this._height;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(HeaderChunk.prototype, \"bitDepth\", {\r\n        get: function () {\r\n            return this._bitDepth;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(HeaderChunk.prototype, \"colorType\", {\r\n        get: function () {\r\n            return this._colorType;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(HeaderChunk.prototype, \"interlaced\", {\r\n        get: function () {\r\n            return this._interlace;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return HeaderChunk;\r\n}(PngChunk));\r\nexports.HeaderChunk = HeaderChunk;\r\nvar PaletteChunk = (function (_super) {\r\n    tslib_1.__extends(PaletteChunk, _super);\r\n    function PaletteChunk(length, type, data, crc) {\r\n        var _this = _super.call(this, length, type, data, crc) || this;\r\n        if (type != constants_1.ChunkType.Palette)\r\n            throw \"Not a palette chunk\";\r\n        if (data.length % 3 != 0)\r\n            throw \"Invalid palette length\";\r\n        return _this;\r\n    }\r\n    Object.defineProperty(PaletteChunk.prototype, \"colors\", {\r\n        get: function () {\r\n            return this._data.length / 3;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    PaletteChunk.prototype.getColor = function (id) {\r\n        return new Uint8Array(this._data.buffer, this._data.byteOffset + id * 3, 3);\r\n    };\r\n    return PaletteChunk;\r\n}(PngChunk));\r\nexports.PaletteChunk = PaletteChunk;\r\nvar DataChunk = (function (_super) {\r\n    tslib_1.__extends(DataChunk, _super);\r\n    function DataChunk(length, type, data, crc) {\r\n        var _this = _super.call(this, length, type, data, crc) || this;\r\n        if (type != constants_1.ChunkType.Data)\r\n            throw \"Not a data chunk\";\r\n        return _this;\r\n    }\r\n    DataChunk.prototype.decompress = function () {\r\n        return pako.inflate(this._data);\r\n    };\r\n    return DataChunk;\r\n}(PngChunk));\r\nexports.DataChunk = DataChunk;\r\nvar EndChunk = (function (_super) {\r\n    tslib_1.__extends(EndChunk, _super);\r\n    function EndChunk(length, type, data, crc) {\r\n        var _this = _super.call(this, length, type, data, crc) || this;\r\n        if (type != constants_1.ChunkType.End)\r\n            throw \"Not a end chunk\";\r\n        return _this;\r\n    }\r\n    return EndChunk;\r\n}(PngChunk));\r\nexports.EndChunk = EndChunk;\r\n\n\n/***/ }),\n/* 41 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n// Top level file is just a mixin of submodules & constants\n\n\nvar assign    = __webpack_require__(3).assign;\n\nvar deflate   = __webpack_require__(42);\nvar inflate   = __webpack_require__(45);\nvar constants = __webpack_require__(19);\n\nvar pako = {};\n\nassign(pako, deflate, inflate, constants);\n\nmodule.exports = pako;\n\n\n/***/ }),\n/* 42 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n\nvar zlib_deflate = __webpack_require__(43);\nvar utils        = __webpack_require__(3);\nvar strings      = __webpack_require__(17);\nvar msg          = __webpack_require__(9);\nvar ZStream      = __webpack_require__(18);\n\nvar toString = Object.prototype.toString;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nvar Z_NO_FLUSH      = 0;\nvar Z_FINISH        = 4;\n\nvar Z_OK            = 0;\nvar Z_STREAM_END    = 1;\nvar Z_SYNC_FLUSH    = 2;\n\nvar Z_DEFAULT_COMPRESSION = -1;\n\nvar Z_DEFAULT_STRATEGY    = 0;\n\nvar Z_DEFLATED  = 8;\n\n/* ===========================================================================*/\n\n\n/**\n * class Deflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[deflate]],\n * [[deflateRaw]] and [[gzip]].\n **/\n\n/* internal\n * Deflate.chunks -> Array\n *\n * Chunks of output data, if [[Deflate#onData]] not overriden.\n **/\n\n/**\n * Deflate.result -> Uint8Array|Array\n *\n * Compressed result, generated by default [[Deflate#onData]]\n * and [[Deflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Deflate#push]] with `Z_FINISH` / `true` param)  or if you\n * push a chunk with explicit flush (call [[Deflate#push]] with\n * `Z_SYNC_FLUSH` param).\n **/\n\n/**\n * Deflate.err -> Number\n *\n * Error code after deflate finished. 0 (Z_OK) on success.\n * You will not need it in real life, because deflate errors\n * are possible only on wrong options or bad `onData` / `onEnd`\n * custom handlers.\n **/\n\n/**\n * Deflate.msg -> String\n *\n * Error message, if [[Deflate.err]] != 0\n **/\n\n\n/**\n * new Deflate(options)\n * - options (Object): zlib deflate options.\n *\n * Creates new deflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `level`\n * - `windowBits`\n * - `memLevel`\n * - `strategy`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw deflate\n * - `gzip` (Boolean) - create gzip wrapper\n * - `to` (String) - if equal to 'string', then result will be \"binary string\"\n *    (each char code [0..255])\n * - `header` (Object) - custom header for gzip\n *   - `text` (Boolean) - true if compressed data believed to be text\n *   - `time` (Number) - modification time, unix timestamp\n *   - `os` (Number) - operation system code\n *   - `extra` (Array) - array of bytes with extra data (max 65536)\n *   - `name` (String) - file name (binary string)\n *   - `comment` (String) - comment (binary string)\n *   - `hcrc` (Boolean) - true if header crc should be added\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])\n *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * var deflate = new pako.Deflate({ level: 3});\n *\n * deflate.push(chunk1, false);\n * deflate.push(chunk2, true);  // true -> last chunk\n *\n * if (deflate.err) { throw new Error(deflate.err); }\n *\n * console.log(deflate.result);\n * ```\n **/\nfunction Deflate(options) {\n  if (!(this instanceof Deflate)) return new Deflate(options);\n\n  this.options = utils.assign({\n    level: Z_DEFAULT_COMPRESSION,\n    method: Z_DEFLATED,\n    chunkSize: 16384,\n    windowBits: 15,\n    memLevel: 8,\n    strategy: Z_DEFAULT_STRATEGY,\n    to: ''\n  }, options || {});\n\n  var opt = this.options;\n\n  if (opt.raw && (opt.windowBits > 0)) {\n    opt.windowBits = -opt.windowBits;\n  }\n\n  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {\n    opt.windowBits += 16;\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm = new ZStream();\n  this.strm.avail_out = 0;\n\n  var status = zlib_deflate.deflateInit2(\n    this.strm,\n    opt.level,\n    opt.method,\n    opt.windowBits,\n    opt.memLevel,\n    opt.strategy\n  );\n\n  if (status !== Z_OK) {\n    throw new Error(msg[status]);\n  }\n\n  if (opt.header) {\n    zlib_deflate.deflateSetHeader(this.strm, opt.header);\n  }\n\n  if (opt.dictionary) {\n    var dict;\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      // If we need to compress text, change encoding to utf8.\n      dict = strings.string2buf(opt.dictionary);\n    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n      dict = new Uint8Array(opt.dictionary);\n    } else {\n      dict = opt.dictionary;\n    }\n\n    status = zlib_deflate.deflateSetDictionary(this.strm, dict);\n\n    if (status !== Z_OK) {\n      throw new Error(msg[status]);\n    }\n\n    this._dict_set = true;\n  }\n}\n\n/**\n * Deflate#push(data[, mode]) -> Boolean\n * - data (Uint8Array|Array|ArrayBuffer|String): input data. Strings will be\n *   converted to utf8 byte sequence.\n * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` meansh Z_FINISH.\n *\n * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with\n * new compressed chunks. Returns `true` on success. The last data block must have\n * mode Z_FINISH (or `true`). That will flush internal pending buffers and call\n * [[Deflate#onEnd]]. For interim explicit flushes (without ending the stream) you\n * can use mode Z_SYNC_FLUSH, keeping the compression context.\n *\n * On fail call [[Deflate#onEnd]] with error code and return false.\n *\n * We strongly recommend to use `Uint8Array` on input for best speed (output\n * array format is detected automatically). Also, don't skip last param and always\n * use the same type in your code (boolean or number). That will improve JS speed.\n *\n * For regular `Array`-s make sure all elements are [0..255].\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nDeflate.prototype.push = function (data, mode) {\n  var strm = this.strm;\n  var chunkSize = this.options.chunkSize;\n  var status, _mode;\n\n  if (this.ended) { return false; }\n\n  _mode = (mode === ~~mode) ? mode : ((mode === true) ? Z_FINISH : Z_NO_FLUSH);\n\n  // Convert data if needed\n  if (typeof data === 'string') {\n    // If we need to compress text, change encoding to utf8.\n    strm.input = strings.string2buf(data);\n  } else if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  do {\n    if (strm.avail_out === 0) {\n      strm.output = new utils.Buf8(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n    status = zlib_deflate.deflate(strm, _mode);    /* no bad return value */\n\n    if (status !== Z_STREAM_END && status !== Z_OK) {\n      this.onEnd(status);\n      this.ended = true;\n      return false;\n    }\n    if (strm.avail_out === 0 || (strm.avail_in === 0 && (_mode === Z_FINISH || _mode === Z_SYNC_FLUSH))) {\n      if (this.options.to === 'string') {\n        this.onData(strings.buf2binstring(utils.shrinkBuf(strm.output, strm.next_out)));\n      } else {\n        this.onData(utils.shrinkBuf(strm.output, strm.next_out));\n      }\n    }\n  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== Z_STREAM_END);\n\n  // Finalize on the last chunk.\n  if (_mode === Z_FINISH) {\n    status = zlib_deflate.deflateEnd(this.strm);\n    this.onEnd(status);\n    this.ended = true;\n    return status === Z_OK;\n  }\n\n  // callback interim results if Z_SYNC_FLUSH.\n  if (_mode === Z_SYNC_FLUSH) {\n    this.onEnd(Z_OK);\n    strm.avail_out = 0;\n    return true;\n  }\n\n  return true;\n};\n\n\n/**\n * Deflate#onData(chunk) -> Void\n * - chunk (Uint8Array|Array|String): ouput data. Type of array depends\n *   on js engine support. When string output requested, each chunk\n *   will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nDeflate.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Deflate#onEnd(status) -> Void\n * - status (Number): deflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called once after you tell deflate that the input stream is\n * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)\n * or if an error happened. By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nDeflate.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === Z_OK) {\n    if (this.options.to === 'string') {\n      this.result = this.chunks.join('');\n    } else {\n      this.result = utils.flattenChunks(this.chunks);\n    }\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * deflate(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * Compress `data` with deflate algorithm and `options`.\n *\n * Supported options are:\n *\n * - level\n * - windowBits\n * - memLevel\n * - strategy\n * - dictionary\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be \"binary string\"\n *    (each char code [0..255])\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , data = Uint8Array([1,2,3,4,5,6,7,8,9]);\n *\n * console.log(pako.deflate(data));\n * ```\n **/\nfunction deflate(input, options) {\n  var deflator = new Deflate(options);\n\n  deflator.push(input, true);\n\n  // That will never happens, if you don't cheat with options :)\n  if (deflator.err) { throw deflator.msg || msg[deflator.err]; }\n\n  return deflator.result;\n}\n\n\n/**\n * deflateRaw(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction deflateRaw(input, options) {\n  options = options || {};\n  options.raw = true;\n  return deflate(input, options);\n}\n\n\n/**\n * gzip(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but create gzip wrapper instead of\n * deflate one.\n **/\nfunction gzip(input, options) {\n  options = options || {};\n  options.gzip = true;\n  return deflate(input, options);\n}\n\n\nexports.Deflate = Deflate;\nexports.deflate = deflate;\nexports.deflateRaw = deflateRaw;\nexports.gzip = gzip;\n\n\n/***/ }),\n/* 43 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar utils   = __webpack_require__(3);\nvar trees   = __webpack_require__(44);\nvar adler32 = __webpack_require__(15);\nvar crc32   = __webpack_require__(16);\nvar msg     = __webpack_require__(9);\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n/* Allowed flush values; see deflate() and inflate() below for details */\nvar Z_NO_FLUSH      = 0;\nvar Z_PARTIAL_FLUSH = 1;\n//var Z_SYNC_FLUSH    = 2;\nvar Z_FULL_FLUSH    = 3;\nvar Z_FINISH        = 4;\nvar Z_BLOCK         = 5;\n//var Z_TREES         = 6;\n\n\n/* Return codes for the compression/decompression functions. Negative values\n * are errors, positive values are used for special but normal events.\n */\nvar Z_OK            = 0;\nvar Z_STREAM_END    = 1;\n//var Z_NEED_DICT     = 2;\n//var Z_ERRNO         = -1;\nvar Z_STREAM_ERROR  = -2;\nvar Z_DATA_ERROR    = -3;\n//var Z_MEM_ERROR     = -4;\nvar Z_BUF_ERROR     = -5;\n//var Z_VERSION_ERROR = -6;\n\n\n/* compression levels */\n//var Z_NO_COMPRESSION      = 0;\n//var Z_BEST_SPEED          = 1;\n//var Z_BEST_COMPRESSION    = 9;\nvar Z_DEFAULT_COMPRESSION = -1;\n\n\nvar Z_FILTERED            = 1;\nvar Z_HUFFMAN_ONLY        = 2;\nvar Z_RLE                 = 3;\nvar Z_FIXED               = 4;\nvar Z_DEFAULT_STRATEGY    = 0;\n\n/* Possible values of the data_type field (though see inflate()) */\n//var Z_BINARY              = 0;\n//var Z_TEXT                = 1;\n//var Z_ASCII               = 1; // = Z_TEXT\nvar Z_UNKNOWN             = 2;\n\n\n/* The deflate compression method */\nvar Z_DEFLATED  = 8;\n\n/*============================================================================*/\n\n\nvar MAX_MEM_LEVEL = 9;\n/* Maximum value for memLevel in deflateInit2 */\nvar MAX_WBITS = 15;\n/* 32K LZ77 window */\nvar DEF_MEM_LEVEL = 8;\n\n\nvar LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\nvar LITERALS      = 256;\n/* number of literal bytes 0..255 */\nvar L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\nvar D_CODES       = 30;\n/* number of distance codes */\nvar BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\nvar HEAP_SIZE     = 2 * L_CODES + 1;\n/* maximum heap size */\nvar MAX_BITS  = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nvar MIN_MATCH = 3;\nvar MAX_MATCH = 258;\nvar MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);\n\nvar PRESET_DICT = 0x20;\n\nvar INIT_STATE = 42;\nvar EXTRA_STATE = 69;\nvar NAME_STATE = 73;\nvar COMMENT_STATE = 91;\nvar HCRC_STATE = 103;\nvar BUSY_STATE = 113;\nvar FINISH_STATE = 666;\n\nvar BS_NEED_MORE      = 1; /* block not completed, need more input or more output */\nvar BS_BLOCK_DONE     = 2; /* block flush performed */\nvar BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */\nvar BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */\n\nvar OS_CODE = 0x03; // Unix :) . Don't detect, use this default.\n\nfunction err(strm, errorCode) {\n  strm.msg = msg[errorCode];\n  return errorCode;\n}\n\nfunction rank(f) {\n  return ((f) << 1) - ((f) > 4 ? 9 : 0);\n}\n\nfunction zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }\n\n\n/* =========================================================================\n * Flush as much pending output as possible. All deflate() output goes\n * through this function so some applications may wish to modify it\n * to avoid allocating a large strm->output buffer and copying into it.\n * (See also read_buf()).\n */\nfunction flush_pending(strm) {\n  var s = strm.state;\n\n  //_tr_flush_bits(s);\n  var len = s.pending;\n  if (len > strm.avail_out) {\n    len = strm.avail_out;\n  }\n  if (len === 0) { return; }\n\n  utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);\n  strm.next_out += len;\n  s.pending_out += len;\n  strm.total_out += len;\n  strm.avail_out -= len;\n  s.pending -= len;\n  if (s.pending === 0) {\n    s.pending_out = 0;\n  }\n}\n\n\nfunction flush_block_only(s, last) {\n  trees._tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);\n  s.block_start = s.strstart;\n  flush_pending(s.strm);\n}\n\n\nfunction put_byte(s, b) {\n  s.pending_buf[s.pending++] = b;\n}\n\n\n/* =========================================================================\n * Put a short in the pending buffer. The 16-bit value is put in MSB order.\n * IN assertion: the stream state is correct and there is enough room in\n * pending_buf.\n */\nfunction putShortMSB(s, b) {\n//  put_byte(s, (Byte)(b >> 8));\n//  put_byte(s, (Byte)(b & 0xff));\n  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;\n  s.pending_buf[s.pending++] = b & 0xff;\n}\n\n\n/* ===========================================================================\n * Read a new buffer from the current input stream, update the adler32\n * and total number of bytes read.  All deflate() input goes through\n * this function so some applications may wish to modify it to avoid\n * allocating a large strm->input buffer and copying from it.\n * (See also flush_pending()).\n */\nfunction read_buf(strm, buf, start, size) {\n  var len = strm.avail_in;\n\n  if (len > size) { len = size; }\n  if (len === 0) { return 0; }\n\n  strm.avail_in -= len;\n\n  // zmemcpy(buf, strm->next_in, len);\n  utils.arraySet(buf, strm.input, strm.next_in, len, start);\n  if (strm.state.wrap === 1) {\n    strm.adler = adler32(strm.adler, buf, len, start);\n  }\n\n  else if (strm.state.wrap === 2) {\n    strm.adler = crc32(strm.adler, buf, len, start);\n  }\n\n  strm.next_in += len;\n  strm.total_in += len;\n\n  return len;\n}\n\n\n/* ===========================================================================\n * Set match_start to the longest match starting at the given string and\n * return its length. Matches shorter or equal to prev_length are discarded,\n * in which case the result is equal to prev_length and match_start is\n * garbage.\n * IN assertions: cur_match is the head of the hash chain for the current\n *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1\n * OUT assertion: the match length is not greater than s->lookahead.\n */\nfunction longest_match(s, cur_match) {\n  var chain_length = s.max_chain_length;      /* max hash chain length */\n  var scan = s.strstart; /* current string */\n  var match;                       /* matched string */\n  var len;                           /* length of current match */\n  var best_len = s.prev_length;              /* best match length so far */\n  var nice_match = s.nice_match;             /* stop if match long enough */\n  var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?\n      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;\n\n  var _win = s.window; // shortcut\n\n  var wmask = s.w_mask;\n  var prev  = s.prev;\n\n  /* Stop when cur_match becomes <= limit. To simplify the code,\n   * we prevent matches with the string of window index 0.\n   */\n\n  var strend = s.strstart + MAX_MATCH;\n  var scan_end1  = _win[scan + best_len - 1];\n  var scan_end   = _win[scan + best_len];\n\n  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.\n   * It is easy to get rid of this optimization if necessary.\n   */\n  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, \"Code too clever\");\n\n  /* Do not waste too much time if we already have a good match: */\n  if (s.prev_length >= s.good_match) {\n    chain_length >>= 2;\n  }\n  /* Do not look for matches beyond the end of the input. This is necessary\n   * to make deflate deterministic.\n   */\n  if (nice_match > s.lookahead) { nice_match = s.lookahead; }\n\n  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, \"need lookahead\");\n\n  do {\n    // Assert(cur_match < s->strstart, \"no future\");\n    match = cur_match;\n\n    /* Skip to next match if the match length cannot increase\n     * or if the match length is less than 2.  Note that the checks below\n     * for insufficient lookahead only occur occasionally for performance\n     * reasons.  Therefore uninitialized memory will be accessed, and\n     * conditional jumps will be made that depend on those values.\n     * However the length of the match is limited to the lookahead, so\n     * the output of deflate is not affected by the uninitialized values.\n     */\n\n    if (_win[match + best_len]     !== scan_end  ||\n        _win[match + best_len - 1] !== scan_end1 ||\n        _win[match]                !== _win[scan] ||\n        _win[++match]              !== _win[scan + 1]) {\n      continue;\n    }\n\n    /* The check at best_len-1 can be removed because it will be made\n     * again later. (This heuristic is not always a win.)\n     * It is not necessary to compare scan[2] and match[2] since they\n     * are always equal when the other bytes match, given that\n     * the hash keys are equal and that HASH_BITS >= 8.\n     */\n    scan += 2;\n    match++;\n    // Assert(*scan == *match, \"match[2]?\");\n\n    /* We check for insufficient lookahead only every 8th comparison;\n     * the 256th check will be made at strstart+258.\n     */\n    do {\n      /*jshint noempty:false*/\n    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             scan < strend);\n\n    // Assert(scan <= s->window+(unsigned)(s->window_size-1), \"wild scan\");\n\n    len = MAX_MATCH - (strend - scan);\n    scan = strend - MAX_MATCH;\n\n    if (len > best_len) {\n      s.match_start = cur_match;\n      best_len = len;\n      if (len >= nice_match) {\n        break;\n      }\n      scan_end1  = _win[scan + best_len - 1];\n      scan_end   = _win[scan + best_len];\n    }\n  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);\n\n  if (best_len <= s.lookahead) {\n    return best_len;\n  }\n  return s.lookahead;\n}\n\n\n/* ===========================================================================\n * Fill the window when the lookahead becomes insufficient.\n * Updates strstart and lookahead.\n *\n * IN assertion: lookahead < MIN_LOOKAHEAD\n * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD\n *    At least one byte has been read, or avail_in == 0; reads are\n *    performed for at least two bytes (required for the zip translate_eol\n *    option -- not supported here).\n */\nfunction fill_window(s) {\n  var _w_size = s.w_size;\n  var p, n, m, more, str;\n\n  //Assert(s->lookahead < MIN_LOOKAHEAD, \"already enough lookahead\");\n\n  do {\n    more = s.window_size - s.lookahead - s.strstart;\n\n    // JS ints have 32 bit, block below not needed\n    /* Deal with !@#$% 64K limit: */\n    //if (sizeof(int) <= 2) {\n    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {\n    //        more = wsize;\n    //\n    //  } else if (more == (unsigned)(-1)) {\n    //        /* Very unlikely, but possible on 16 bit machine if\n    //         * strstart == 0 && lookahead == 1 (input done a byte at time)\n    //         */\n    //        more--;\n    //    }\n    //}\n\n\n    /* If the window is almost full and there is insufficient lookahead,\n     * move the upper half to the lower one to make room in the upper half.\n     */\n    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {\n\n      utils.arraySet(s.window, s.window, _w_size, _w_size, 0);\n      s.match_start -= _w_size;\n      s.strstart -= _w_size;\n      /* we now have strstart >= MAX_DIST */\n      s.block_start -= _w_size;\n\n      /* Slide the hash table (could be avoided with 32 bit values\n       at the expense of memory usage). We slide even when level == 0\n       to keep the hash table consistent if we switch back to level > 0\n       later. (Using level 0 permanently is not an optimal usage of\n       zlib, so we don't care about this pathological case.)\n       */\n\n      n = s.hash_size;\n      p = n;\n      do {\n        m = s.head[--p];\n        s.head[p] = (m >= _w_size ? m - _w_size : 0);\n      } while (--n);\n\n      n = _w_size;\n      p = n;\n      do {\n        m = s.prev[--p];\n        s.prev[p] = (m >= _w_size ? m - _w_size : 0);\n        /* If n is not on any hash chain, prev[n] is garbage but\n         * its value will never be used.\n         */\n      } while (--n);\n\n      more += _w_size;\n    }\n    if (s.strm.avail_in === 0) {\n      break;\n    }\n\n    /* If there was no sliding:\n     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&\n     *    more == window_size - lookahead - strstart\n     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)\n     * => more >= window_size - 2*WSIZE + 2\n     * In the BIG_MEM or MMAP case (not yet supported),\n     *   window_size == input_size + MIN_LOOKAHEAD  &&\n     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.\n     * Otherwise, window_size == 2*WSIZE so more >= 2.\n     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.\n     */\n    //Assert(more >= 2, \"more < 2\");\n    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);\n    s.lookahead += n;\n\n    /* Initialize the hash value now that we have some input: */\n    if (s.lookahead + s.insert >= MIN_MATCH) {\n      str = s.strstart - s.insert;\n      s.ins_h = s.window[str];\n\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;\n//#if MIN_MATCH != 3\n//        Call update_hash() MIN_MATCH-3 more times\n//#endif\n      while (s.insert) {\n        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;\n\n        s.prev[str & s.w_mask] = s.head[s.ins_h];\n        s.head[s.ins_h] = str;\n        str++;\n        s.insert--;\n        if (s.lookahead + s.insert < MIN_MATCH) {\n          break;\n        }\n      }\n    }\n    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,\n     * but this is not important since only literal bytes will be emitted.\n     */\n\n  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);\n\n  /* If the WIN_INIT bytes after the end of the current data have never been\n   * written, then zero those bytes in order to avoid memory check reports of\n   * the use of uninitialized (or uninitialised as Julian writes) bytes by\n   * the longest match routines.  Update the high water mark for the next\n   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match\n   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.\n   */\n//  if (s.high_water < s.window_size) {\n//    var curr = s.strstart + s.lookahead;\n//    var init = 0;\n//\n//    if (s.high_water < curr) {\n//      /* Previous high water mark below current data -- zero WIN_INIT\n//       * bytes or up to end of window, whichever is less.\n//       */\n//      init = s.window_size - curr;\n//      if (init > WIN_INIT)\n//        init = WIN_INIT;\n//      zmemzero(s->window + curr, (unsigned)init);\n//      s->high_water = curr + init;\n//    }\n//    else if (s->high_water < (ulg)curr + WIN_INIT) {\n//      /* High water mark at or above current data, but below current data\n//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up\n//       * to end of window, whichever is less.\n//       */\n//      init = (ulg)curr + WIN_INIT - s->high_water;\n//      if (init > s->window_size - s->high_water)\n//        init = s->window_size - s->high_water;\n//      zmemzero(s->window + s->high_water, (unsigned)init);\n//      s->high_water += init;\n//    }\n//  }\n//\n//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,\n//    \"not enough room for search\");\n}\n\n/* ===========================================================================\n * Copy without compression as much as possible from the input stream, return\n * the current block state.\n * This function does not insert new strings in the dictionary since\n * uncompressible data is probably not useful. This function is used\n * only for the level=0 compression option.\n * NOTE: this function should be optimized to avoid extra copying from\n * window to pending_buf.\n */\nfunction deflate_stored(s, flush) {\n  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited\n   * to pending_buf_size, and each stored block has a 5 byte header:\n   */\n  var max_block_size = 0xffff;\n\n  if (max_block_size > s.pending_buf_size - 5) {\n    max_block_size = s.pending_buf_size - 5;\n  }\n\n  /* Copy as much as possible from input to output: */\n  for (;;) {\n    /* Fill the window as much as possible: */\n    if (s.lookahead <= 1) {\n\n      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||\n      //  s->block_start >= (long)s->w_size, \"slide too late\");\n//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||\n//        s.block_start >= s.w_size)) {\n//        throw  new Error(\"slide too late\");\n//      }\n\n      fill_window(s);\n      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n\n      if (s.lookahead === 0) {\n        break;\n      }\n      /* flush the current block */\n    }\n    //Assert(s->block_start >= 0L, \"block gone\");\n//    if (s.block_start < 0) throw new Error(\"block gone\");\n\n    s.strstart += s.lookahead;\n    s.lookahead = 0;\n\n    /* Emit a stored block if pending_buf will be full: */\n    var max_start = s.block_start + max_block_size;\n\n    if (s.strstart === 0 || s.strstart >= max_start) {\n      /* strstart == 0 is possible when wraparound on 16-bit machine */\n      s.lookahead = s.strstart - max_start;\n      s.strstart = max_start;\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n\n\n    }\n    /* Flush if we may have to slide, otherwise block_start may become\n     * negative and the data will be gone:\n     */\n    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n\n  s.insert = 0;\n\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n\n  if (s.strstart > s.block_start) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_NEED_MORE;\n}\n\n/* ===========================================================================\n * Compress as much as possible from the input stream, return the current\n * block state.\n * This function does not perform lazy evaluation of matches and inserts\n * new strings in the dictionary only for unmatched strings or for short\n * matches. It is used only for the fast compression options.\n */\nfunction deflate_fast(s, flush) {\n  var hash_head;        /* head of the hash chain */\n  var bflush;           /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) {\n        break; /* flush the current block */\n      }\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     * At this point we have always match_length < MIN_MATCH\n     */\n    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n    }\n    if (s.match_length >= MIN_MATCH) {\n      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only\n\n      /*** _tr_tally_dist(s, s.strstart - s.match_start,\n                     s.match_length - MIN_MATCH, bflush); ***/\n      bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n\n      /* Insert new strings in the hash table only if the match length\n       * is not too large. This saves time but degrades compression.\n       */\n      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {\n        s.match_length--; /* string at strstart already in table */\n        do {\n          s.strstart++;\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n          /* strstart never exceeds WSIZE-MAX_MATCH, so there are\n           * always MIN_MATCH bytes ahead.\n           */\n        } while (--s.match_length !== 0);\n        s.strstart++;\n      } else\n      {\n        s.strstart += s.match_length;\n        s.match_length = 0;\n        s.ins_h = s.window[s.strstart];\n        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */\n        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;\n\n//#if MIN_MATCH != 3\n//                Call UPDATE_HASH() MIN_MATCH-3 more times\n//#endif\n        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not\n         * matter since it will be recomputed at next deflate call.\n         */\n      }\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s.window[s.strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n}\n\n/* ===========================================================================\n * Same as above, but achieves better compression. We use a lazy\n * evaluation for matches: a match is finally adopted only if there is\n * no better match at the next window position.\n */\nfunction deflate_slow(s, flush) {\n  var hash_head;          /* head of hash chain */\n  var bflush;              /* set if current block must be flushed */\n\n  var max_insert;\n\n  /* Process the input block. */\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     */\n    s.prev_length = s.match_length;\n    s.prev_match = s.match_start;\n    s.match_length = MIN_MATCH - 1;\n\n    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&\n        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n\n      if (s.match_length <= 5 &&\n         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {\n\n        /* If prev_match is also MIN_MATCH, match_start is garbage\n         * but we will ignore the current match anyway.\n         */\n        s.match_length = MIN_MATCH - 1;\n      }\n    }\n    /* If there was a match at the previous step and the current\n     * match is not better, output the previous match:\n     */\n    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {\n      max_insert = s.strstart + s.lookahead - MIN_MATCH;\n      /* Do not insert strings in hash table beyond this. */\n\n      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);\n\n      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,\n                     s.prev_length - MIN_MATCH, bflush);***/\n      bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);\n      /* Insert in hash table all strings up to the end of the match.\n       * strstart-1 and strstart are already inserted. If there is not\n       * enough lookahead, the last two strings are not inserted in\n       * the hash table.\n       */\n      s.lookahead -= s.prev_length - 1;\n      s.prev_length -= 2;\n      do {\n        if (++s.strstart <= max_insert) {\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n        }\n      } while (--s.prev_length !== 0);\n      s.match_available = 0;\n      s.match_length = MIN_MATCH - 1;\n      s.strstart++;\n\n      if (bflush) {\n        /*** FLUSH_BLOCK(s, 0); ***/\n        flush_block_only(s, false);\n        if (s.strm.avail_out === 0) {\n          return BS_NEED_MORE;\n        }\n        /***/\n      }\n\n    } else if (s.match_available) {\n      /* If there was no match at the previous position, output a\n       * single literal. If there was a match but the current match\n       * is longer, truncate the previous match to a single literal.\n       */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n      bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);\n\n      if (bflush) {\n        /*** FLUSH_BLOCK_ONLY(s, 0) ***/\n        flush_block_only(s, false);\n        /***/\n      }\n      s.strstart++;\n      s.lookahead--;\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n    } else {\n      /* There is no previous match to compare with, wait for\n       * the next step to decide.\n       */\n      s.match_available = 1;\n      s.strstart++;\n      s.lookahead--;\n    }\n  }\n  //Assert (flush != Z_NO_FLUSH, \"no flush?\");\n  if (s.match_available) {\n    //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n    bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);\n\n    s.match_available = 0;\n  }\n  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_BLOCK_DONE;\n}\n\n\n/* ===========================================================================\n * For Z_RLE, simply look for runs of bytes, generate matches only of distance\n * one.  Do not maintain a hash table.  (It will be regenerated if this run of\n * deflate switches away from Z_RLE.)\n */\nfunction deflate_rle(s, flush) {\n  var bflush;            /* set if current block must be flushed */\n  var prev;              /* byte at distance one to match */\n  var scan, strend;      /* scan goes up to strend for length of run */\n\n  var _win = s.window;\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the longest run, plus one for the unrolled loop.\n     */\n    if (s.lookahead <= MAX_MATCH) {\n      fill_window(s);\n      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* See how many times the previous byte repeats */\n    s.match_length = 0;\n    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {\n      scan = s.strstart - 1;\n      prev = _win[scan];\n      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {\n        strend = s.strstart + MAX_MATCH;\n        do {\n          /*jshint noempty:false*/\n        } while (prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 scan < strend);\n        s.match_length = MAX_MATCH - (strend - scan);\n        if (s.match_length > s.lookahead) {\n          s.match_length = s.lookahead;\n        }\n      }\n      //Assert(scan <= s->window+(uInt)(s->window_size-1), \"wild scan\");\n    }\n\n    /* Emit match if have run of MIN_MATCH or longer, else emit literal */\n    if (s.match_length >= MIN_MATCH) {\n      //check_match(s, s.strstart, s.strstart - 1, s.match_length);\n\n      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/\n      bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n      s.strstart += s.match_length;\n      s.match_length = 0;\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n}\n\n/* ===========================================================================\n * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.\n * (It will be regenerated if this run of deflate switches away from Huffman.)\n */\nfunction deflate_huff(s, flush) {\n  var bflush;             /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we have a literal to write. */\n    if (s.lookahead === 0) {\n      fill_window(s);\n      if (s.lookahead === 0) {\n        if (flush === Z_NO_FLUSH) {\n          return BS_NEED_MORE;\n        }\n        break;      /* flush the current block */\n      }\n    }\n\n    /* Output a literal byte */\n    s.match_length = 0;\n    //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n    bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n    s.lookahead--;\n    s.strstart++;\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n}\n\n/* Values for max_lazy_match, good_match and max_chain_length, depending on\n * the desired pack level (0..9). The values given below have been tuned to\n * exclude worst case performance for pathological files. Better values may be\n * found for specific files.\n */\nfunction Config(good_length, max_lazy, nice_length, max_chain, func) {\n  this.good_length = good_length;\n  this.max_lazy = max_lazy;\n  this.nice_length = nice_length;\n  this.max_chain = max_chain;\n  this.func = func;\n}\n\nvar configuration_table;\n\nconfiguration_table = [\n  /*      good lazy nice chain */\n  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */\n  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */\n  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */\n  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */\n\n  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */\n  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */\n  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */\n  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */\n  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */\n  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */\n];\n\n\n/* ===========================================================================\n * Initialize the \"longest match\" routines for a new zlib stream\n */\nfunction lm_init(s) {\n  s.window_size = 2 * s.w_size;\n\n  /*** CLEAR_HASH(s); ***/\n  zero(s.head); // Fill with NIL (= 0);\n\n  /* Set the default configuration parameters:\n   */\n  s.max_lazy_match = configuration_table[s.level].max_lazy;\n  s.good_match = configuration_table[s.level].good_length;\n  s.nice_match = configuration_table[s.level].nice_length;\n  s.max_chain_length = configuration_table[s.level].max_chain;\n\n  s.strstart = 0;\n  s.block_start = 0;\n  s.lookahead = 0;\n  s.insert = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  s.ins_h = 0;\n}\n\n\nfunction DeflateState() {\n  this.strm = null;            /* pointer back to this zlib stream */\n  this.status = 0;            /* as the name implies */\n  this.pending_buf = null;      /* output still pending */\n  this.pending_buf_size = 0;  /* size of pending_buf */\n  this.pending_out = 0;       /* next pending byte to output to the stream */\n  this.pending = 0;           /* nb of bytes in the pending buffer */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n  this.gzhead = null;         /* gzip header information to write */\n  this.gzindex = 0;           /* where in extra, name, or comment */\n  this.method = Z_DEFLATED; /* can only be DEFLATED */\n  this.last_flush = -1;   /* value of flush param for previous deflate call */\n\n  this.w_size = 0;  /* LZ77 window size (32K by default) */\n  this.w_bits = 0;  /* log2(w_size)  (8..16) */\n  this.w_mask = 0;  /* w_size - 1 */\n\n  this.window = null;\n  /* Sliding window. Input bytes are read into the second half of the window,\n   * and move to the first half later to keep a dictionary of at least wSize\n   * bytes. With this organization, matches are limited to a distance of\n   * wSize-MAX_MATCH bytes, but this ensures that IO is always\n   * performed with a length multiple of the block size.\n   */\n\n  this.window_size = 0;\n  /* Actual size of window: 2*wSize, except when the user input buffer\n   * is directly used as sliding window.\n   */\n\n  this.prev = null;\n  /* Link to older string with same hash index. To limit the size of this\n   * array to 64K, this link is maintained only for the last 32K strings.\n   * An index in this array is thus a window index modulo 32K.\n   */\n\n  this.head = null;   /* Heads of the hash chains or NIL. */\n\n  this.ins_h = 0;       /* hash index of string to be inserted */\n  this.hash_size = 0;   /* number of elements in hash table */\n  this.hash_bits = 0;   /* log2(hash_size) */\n  this.hash_mask = 0;   /* hash_size-1 */\n\n  this.hash_shift = 0;\n  /* Number of bits by which ins_h must be shifted at each input\n   * step. It must be such that after MIN_MATCH steps, the oldest\n   * byte no longer takes part in the hash key, that is:\n   *   hash_shift * MIN_MATCH >= hash_bits\n   */\n\n  this.block_start = 0;\n  /* Window position at the beginning of the current output block. Gets\n   * negative when the window is moved backwards.\n   */\n\n  this.match_length = 0;      /* length of best match */\n  this.prev_match = 0;        /* previous match */\n  this.match_available = 0;   /* set if previous match exists */\n  this.strstart = 0;          /* start of string to insert */\n  this.match_start = 0;       /* start of matching string */\n  this.lookahead = 0;         /* number of valid bytes ahead in window */\n\n  this.prev_length = 0;\n  /* Length of the best match at previous step. Matches not greater than this\n   * are discarded. This is used in the lazy match evaluation.\n   */\n\n  this.max_chain_length = 0;\n  /* To speed up deflation, hash chains are never searched beyond this\n   * length.  A higher limit improves compression ratio but degrades the\n   * speed.\n   */\n\n  this.max_lazy_match = 0;\n  /* Attempt to find a better match only when the current match is strictly\n   * smaller than this value. This mechanism is used only for compression\n   * levels >= 4.\n   */\n  // That's alias to max_lazy_match, don't use directly\n  //this.max_insert_length = 0;\n  /* Insert new strings in the hash table only if the match length is not\n   * greater than this length. This saves time but degrades compression.\n   * max_insert_length is used only for compression levels <= 3.\n   */\n\n  this.level = 0;     /* compression level (1..9) */\n  this.strategy = 0;  /* favor or force Huffman coding*/\n\n  this.good_match = 0;\n  /* Use a faster search when the previous match is longer than this */\n\n  this.nice_match = 0; /* Stop searching when current match exceeds this */\n\n              /* used by trees.c: */\n\n  /* Didn't use ct_data typedef below to suppress compiler warning */\n\n  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */\n  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */\n  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */\n\n  // Use flat array of DOUBLE size, with interleaved fata,\n  // because JS does not support effective\n  this.dyn_ltree  = new utils.Buf16(HEAP_SIZE * 2);\n  this.dyn_dtree  = new utils.Buf16((2 * D_CODES + 1) * 2);\n  this.bl_tree    = new utils.Buf16((2 * BL_CODES + 1) * 2);\n  zero(this.dyn_ltree);\n  zero(this.dyn_dtree);\n  zero(this.bl_tree);\n\n  this.l_desc   = null;         /* desc. for literal tree */\n  this.d_desc   = null;         /* desc. for distance tree */\n  this.bl_desc  = null;         /* desc. for bit length tree */\n\n  //ush bl_count[MAX_BITS+1];\n  this.bl_count = new utils.Buf16(MAX_BITS + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */\n  this.heap = new utils.Buf16(2 * L_CODES + 1);  /* heap used to build the Huffman trees */\n  zero(this.heap);\n\n  this.heap_len = 0;               /* number of elements in the heap */\n  this.heap_max = 0;               /* element of largest frequency */\n  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.\n   * The same heap array is used to build all trees.\n   */\n\n  this.depth = new utils.Buf16(2 * L_CODES + 1); //uch depth[2*L_CODES+1];\n  zero(this.depth);\n  /* Depth of each subtree used as tie breaker for trees of equal frequency\n   */\n\n  this.l_buf = 0;          /* buffer index for literals or lengths */\n\n  this.lit_bufsize = 0;\n  /* Size of match buffer for literals/lengths.  There are 4 reasons for\n   * limiting lit_bufsize to 64K:\n   *   - frequencies can be kept in 16 bit counters\n   *   - if compression is not successful for the first block, all input\n   *     data is still in the window so we can still emit a stored block even\n   *     when input comes from standard input.  (This can also be done for\n   *     all blocks if lit_bufsize is not greater than 32K.)\n   *   - if compression is not successful for a file smaller than 64K, we can\n   *     even emit a stored file instead of a stored block (saving 5 bytes).\n   *     This is applicable only for zip (not gzip or zlib).\n   *   - creating new Huffman trees less frequently may not provide fast\n   *     adaptation to changes in the input data statistics. (Take for\n   *     example a binary file with poorly compressible code followed by\n   *     a highly compressible string table.) Smaller buffer sizes give\n   *     fast adaptation but have of course the overhead of transmitting\n   *     trees more frequently.\n   *   - I can't count above 4\n   */\n\n  this.last_lit = 0;      /* running index in l_buf */\n\n  this.d_buf = 0;\n  /* Buffer index for distances. To simplify the code, d_buf and l_buf have\n   * the same number of elements. To use different lengths, an extra flag\n   * array would be necessary.\n   */\n\n  this.opt_len = 0;       /* bit length of current block with optimal trees */\n  this.static_len = 0;    /* bit length of current block with static trees */\n  this.matches = 0;       /* number of string matches in current block */\n  this.insert = 0;        /* bytes at end of window left to insert */\n\n\n  this.bi_buf = 0;\n  /* Output buffer. bits are inserted starting at the bottom (least\n   * significant bits).\n   */\n  this.bi_valid = 0;\n  /* Number of valid bits in bi_buf.  All bits above the last valid bit\n   * are always zero.\n   */\n\n  // Used for window memory init. We safely ignore it for JS. That makes\n  // sense only for pointers and memory check tools.\n  //this.high_water = 0;\n  /* High water mark offset in window for initialized bytes -- bytes above\n   * this are set to zero in order to avoid memory check warnings when\n   * longest match routines access bytes past the input.  This is then\n   * updated to the new high water mark.\n   */\n}\n\n\nfunction deflateResetKeep(strm) {\n  var s;\n\n  if (!strm || !strm.state) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n  strm.total_in = strm.total_out = 0;\n  strm.data_type = Z_UNKNOWN;\n\n  s = strm.state;\n  s.pending = 0;\n  s.pending_out = 0;\n\n  if (s.wrap < 0) {\n    s.wrap = -s.wrap;\n    /* was made negative by deflate(..., Z_FINISH); */\n  }\n  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);\n  strm.adler = (s.wrap === 2) ?\n    0  // crc32(0, Z_NULL, 0)\n  :\n    1; // adler32(0, Z_NULL, 0)\n  s.last_flush = Z_NO_FLUSH;\n  trees._tr_init(s);\n  return Z_OK;\n}\n\n\nfunction deflateReset(strm) {\n  var ret = deflateResetKeep(strm);\n  if (ret === Z_OK) {\n    lm_init(strm.state);\n  }\n  return ret;\n}\n\n\nfunction deflateSetHeader(strm, head) {\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  if (strm.state.wrap !== 2) { return Z_STREAM_ERROR; }\n  strm.state.gzhead = head;\n  return Z_OK;\n}\n\n\nfunction deflateInit2(strm, level, method, windowBits, memLevel, strategy) {\n  if (!strm) { // === Z_NULL\n    return Z_STREAM_ERROR;\n  }\n  var wrap = 1;\n\n  if (level === Z_DEFAULT_COMPRESSION) {\n    level = 6;\n  }\n\n  if (windowBits < 0) { /* suppress zlib wrapper */\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n\n  else if (windowBits > 15) {\n    wrap = 2;           /* write gzip wrapper instead */\n    windowBits -= 16;\n  }\n\n\n  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||\n    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||\n    strategy < 0 || strategy > Z_FIXED) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n\n  if (windowBits === 8) {\n    windowBits = 9;\n  }\n  /* until 256-byte window bug fixed */\n\n  var s = new DeflateState();\n\n  strm.state = s;\n  s.strm = strm;\n\n  s.wrap = wrap;\n  s.gzhead = null;\n  s.w_bits = windowBits;\n  s.w_size = 1 << s.w_bits;\n  s.w_mask = s.w_size - 1;\n\n  s.hash_bits = memLevel + 7;\n  s.hash_size = 1 << s.hash_bits;\n  s.hash_mask = s.hash_size - 1;\n  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);\n\n  s.window = new utils.Buf8(s.w_size * 2);\n  s.head = new utils.Buf16(s.hash_size);\n  s.prev = new utils.Buf16(s.w_size);\n\n  // Don't need mem init magic for JS.\n  //s.high_water = 0;  /* nothing written to s->window yet */\n\n  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */\n\n  s.pending_buf_size = s.lit_bufsize * 4;\n\n  //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);\n  //s->pending_buf = (uchf *) overlay;\n  s.pending_buf = new utils.Buf8(s.pending_buf_size);\n\n  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)\n  //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);\n  s.d_buf = 1 * s.lit_bufsize;\n\n  //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;\n  s.l_buf = (1 + 2) * s.lit_bufsize;\n\n  s.level = level;\n  s.strategy = strategy;\n  s.method = method;\n\n  return deflateReset(strm);\n}\n\nfunction deflateInit(strm, level) {\n  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);\n}\n\n\nfunction deflate(strm, flush) {\n  var old_flush, s;\n  var beg, val; // for gzip header write only\n\n  if (!strm || !strm.state ||\n    flush > Z_BLOCK || flush < 0) {\n    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;\n  }\n\n  s = strm.state;\n\n  if (!strm.output ||\n      (!strm.input && strm.avail_in !== 0) ||\n      (s.status === FINISH_STATE && flush !== Z_FINISH)) {\n    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);\n  }\n\n  s.strm = strm; /* just in case */\n  old_flush = s.last_flush;\n  s.last_flush = flush;\n\n  /* Write the header */\n  if (s.status === INIT_STATE) {\n\n    if (s.wrap === 2) { // GZIP header\n      strm.adler = 0;  //crc32(0L, Z_NULL, 0);\n      put_byte(s, 31);\n      put_byte(s, 139);\n      put_byte(s, 8);\n      if (!s.gzhead) { // s->gzhead == Z_NULL\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, s.level === 9 ? 2 :\n                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                     4 : 0));\n        put_byte(s, OS_CODE);\n        s.status = BUSY_STATE;\n      }\n      else {\n        put_byte(s, (s.gzhead.text ? 1 : 0) +\n                    (s.gzhead.hcrc ? 2 : 0) +\n                    (!s.gzhead.extra ? 0 : 4) +\n                    (!s.gzhead.name ? 0 : 8) +\n                    (!s.gzhead.comment ? 0 : 16)\n                );\n        put_byte(s, s.gzhead.time & 0xff);\n        put_byte(s, (s.gzhead.time >> 8) & 0xff);\n        put_byte(s, (s.gzhead.time >> 16) & 0xff);\n        put_byte(s, (s.gzhead.time >> 24) & 0xff);\n        put_byte(s, s.level === 9 ? 2 :\n                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                     4 : 0));\n        put_byte(s, s.gzhead.os & 0xff);\n        if (s.gzhead.extra && s.gzhead.extra.length) {\n          put_byte(s, s.gzhead.extra.length & 0xff);\n          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);\n        }\n        if (s.gzhead.hcrc) {\n          strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);\n        }\n        s.gzindex = 0;\n        s.status = EXTRA_STATE;\n      }\n    }\n    else // DEFLATE header\n    {\n      var header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;\n      var level_flags = -1;\n\n      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {\n        level_flags = 0;\n      } else if (s.level < 6) {\n        level_flags = 1;\n      } else if (s.level === 6) {\n        level_flags = 2;\n      } else {\n        level_flags = 3;\n      }\n      header |= (level_flags << 6);\n      if (s.strstart !== 0) { header |= PRESET_DICT; }\n      header += 31 - (header % 31);\n\n      s.status = BUSY_STATE;\n      putShortMSB(s, header);\n\n      /* Save the adler32 of the preset dictionary: */\n      if (s.strstart !== 0) {\n        putShortMSB(s, strm.adler >>> 16);\n        putShortMSB(s, strm.adler & 0xffff);\n      }\n      strm.adler = 1; // adler32(0L, Z_NULL, 0);\n    }\n  }\n\n//#ifdef GZIP\n  if (s.status === EXTRA_STATE) {\n    if (s.gzhead.extra/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n\n      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            break;\n          }\n        }\n        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);\n        s.gzindex++;\n      }\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (s.gzindex === s.gzhead.extra.length) {\n        s.gzindex = 0;\n        s.status = NAME_STATE;\n      }\n    }\n    else {\n      s.status = NAME_STATE;\n    }\n  }\n  if (s.status === NAME_STATE) {\n    if (s.gzhead.name/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n      //int val;\n\n      do {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            val = 1;\n            break;\n          }\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.name.length) {\n          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (val === 0) {\n        s.gzindex = 0;\n        s.status = COMMENT_STATE;\n      }\n    }\n    else {\n      s.status = COMMENT_STATE;\n    }\n  }\n  if (s.status === COMMENT_STATE) {\n    if (s.gzhead.comment/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n      //int val;\n\n      do {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            val = 1;\n            break;\n          }\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.comment.length) {\n          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (val === 0) {\n        s.status = HCRC_STATE;\n      }\n    }\n    else {\n      s.status = HCRC_STATE;\n    }\n  }\n  if (s.status === HCRC_STATE) {\n    if (s.gzhead.hcrc) {\n      if (s.pending + 2 > s.pending_buf_size) {\n        flush_pending(strm);\n      }\n      if (s.pending + 2 <= s.pending_buf_size) {\n        put_byte(s, strm.adler & 0xff);\n        put_byte(s, (strm.adler >> 8) & 0xff);\n        strm.adler = 0; //crc32(0L, Z_NULL, 0);\n        s.status = BUSY_STATE;\n      }\n    }\n    else {\n      s.status = BUSY_STATE;\n    }\n  }\n//#endif\n\n  /* Flush as much pending output as possible */\n  if (s.pending !== 0) {\n    flush_pending(strm);\n    if (strm.avail_out === 0) {\n      /* Since avail_out is 0, deflate will be called again with\n       * more output space, but possibly with both pending and\n       * avail_in equal to zero. There won't be anything to do,\n       * but this is not an error situation so make sure we\n       * return OK instead of BUF_ERROR at next call of deflate:\n       */\n      s.last_flush = -1;\n      return Z_OK;\n    }\n\n    /* Make sure there is something to do and avoid duplicate consecutive\n     * flushes. For repeated and useless calls with Z_FINISH, we keep\n     * returning Z_STREAM_END instead of Z_BUF_ERROR.\n     */\n  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&\n    flush !== Z_FINISH) {\n    return err(strm, Z_BUF_ERROR);\n  }\n\n  /* User must not provide more input after the first FINISH: */\n  if (s.status === FINISH_STATE && strm.avail_in !== 0) {\n    return err(strm, Z_BUF_ERROR);\n  }\n\n  /* Start a new block or continue the current one.\n   */\n  if (strm.avail_in !== 0 || s.lookahead !== 0 ||\n    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {\n    var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :\n      (s.strategy === Z_RLE ? deflate_rle(s, flush) :\n        configuration_table[s.level].func(s, flush));\n\n    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {\n      s.status = FINISH_STATE;\n    }\n    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {\n      if (strm.avail_out === 0) {\n        s.last_flush = -1;\n        /* avoid BUF_ERROR next call, see above */\n      }\n      return Z_OK;\n      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call\n       * of deflate should use the same flush parameter to make sure\n       * that the flush is complete. So we don't have to output an\n       * empty block here, this will be done at next call. This also\n       * ensures that for a very small output buffer, we emit at most\n       * one empty block.\n       */\n    }\n    if (bstate === BS_BLOCK_DONE) {\n      if (flush === Z_PARTIAL_FLUSH) {\n        trees._tr_align(s);\n      }\n      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */\n\n        trees._tr_stored_block(s, 0, 0, false);\n        /* For a full flush, this empty block will be recognized\n         * as a special marker by inflate_sync().\n         */\n        if (flush === Z_FULL_FLUSH) {\n          /*** CLEAR_HASH(s); ***/             /* forget history */\n          zero(s.head); // Fill with NIL (= 0);\n\n          if (s.lookahead === 0) {\n            s.strstart = 0;\n            s.block_start = 0;\n            s.insert = 0;\n          }\n        }\n      }\n      flush_pending(strm);\n      if (strm.avail_out === 0) {\n        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */\n        return Z_OK;\n      }\n    }\n  }\n  //Assert(strm->avail_out > 0, \"bug2\");\n  //if (strm.avail_out <= 0) { throw new Error(\"bug2\");}\n\n  if (flush !== Z_FINISH) { return Z_OK; }\n  if (s.wrap <= 0) { return Z_STREAM_END; }\n\n  /* Write the trailer */\n  if (s.wrap === 2) {\n    put_byte(s, strm.adler & 0xff);\n    put_byte(s, (strm.adler >> 8) & 0xff);\n    put_byte(s, (strm.adler >> 16) & 0xff);\n    put_byte(s, (strm.adler >> 24) & 0xff);\n    put_byte(s, strm.total_in & 0xff);\n    put_byte(s, (strm.total_in >> 8) & 0xff);\n    put_byte(s, (strm.total_in >> 16) & 0xff);\n    put_byte(s, (strm.total_in >> 24) & 0xff);\n  }\n  else\n  {\n    putShortMSB(s, strm.adler >>> 16);\n    putShortMSB(s, strm.adler & 0xffff);\n  }\n\n  flush_pending(strm);\n  /* If avail_out is zero, the application will call deflate again\n   * to flush the rest.\n   */\n  if (s.wrap > 0) { s.wrap = -s.wrap; }\n  /* write the trailer only once! */\n  return s.pending !== 0 ? Z_OK : Z_STREAM_END;\n}\n\nfunction deflateEnd(strm) {\n  var status;\n\n  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {\n    return Z_STREAM_ERROR;\n  }\n\n  status = strm.state.status;\n  if (status !== INIT_STATE &&\n    status !== EXTRA_STATE &&\n    status !== NAME_STATE &&\n    status !== COMMENT_STATE &&\n    status !== HCRC_STATE &&\n    status !== BUSY_STATE &&\n    status !== FINISH_STATE\n  ) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n  strm.state = null;\n\n  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;\n}\n\n\n/* =========================================================================\n * Initializes the compression dictionary from the given byte\n * sequence without producing any compressed output.\n */\nfunction deflateSetDictionary(strm, dictionary) {\n  var dictLength = dictionary.length;\n\n  var s;\n  var str, n;\n  var wrap;\n  var avail;\n  var next;\n  var input;\n  var tmpDict;\n\n  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {\n    return Z_STREAM_ERROR;\n  }\n\n  s = strm.state;\n  wrap = s.wrap;\n\n  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {\n    return Z_STREAM_ERROR;\n  }\n\n  /* when using zlib wrappers, compute Adler-32 for provided dictionary */\n  if (wrap === 1) {\n    /* adler32(strm->adler, dictionary, dictLength); */\n    strm.adler = adler32(strm.adler, dictionary, dictLength, 0);\n  }\n\n  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */\n\n  /* if dictionary would fill window, just replace the history */\n  if (dictLength >= s.w_size) {\n    if (wrap === 0) {            /* already empty otherwise */\n      /*** CLEAR_HASH(s); ***/\n      zero(s.head); // Fill with NIL (= 0);\n      s.strstart = 0;\n      s.block_start = 0;\n      s.insert = 0;\n    }\n    /* use the tail */\n    // dictionary = dictionary.slice(dictLength - s.w_size);\n    tmpDict = new utils.Buf8(s.w_size);\n    utils.arraySet(tmpDict, dictionary, dictLength - s.w_size, s.w_size, 0);\n    dictionary = tmpDict;\n    dictLength = s.w_size;\n  }\n  /* insert dictionary into window and hash */\n  avail = strm.avail_in;\n  next = strm.next_in;\n  input = strm.input;\n  strm.avail_in = dictLength;\n  strm.next_in = 0;\n  strm.input = dictionary;\n  fill_window(s);\n  while (s.lookahead >= MIN_MATCH) {\n    str = s.strstart;\n    n = s.lookahead - (MIN_MATCH - 1);\n    do {\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;\n\n      s.prev[str & s.w_mask] = s.head[s.ins_h];\n\n      s.head[s.ins_h] = str;\n      str++;\n    } while (--n);\n    s.strstart = str;\n    s.lookahead = MIN_MATCH - 1;\n    fill_window(s);\n  }\n  s.strstart += s.lookahead;\n  s.block_start = s.strstart;\n  s.insert = s.lookahead;\n  s.lookahead = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  strm.next_in = next;\n  strm.input = input;\n  strm.avail_in = avail;\n  s.wrap = wrap;\n  return Z_OK;\n}\n\n\nexports.deflateInit = deflateInit;\nexports.deflateInit2 = deflateInit2;\nexports.deflateReset = deflateReset;\nexports.deflateResetKeep = deflateResetKeep;\nexports.deflateSetHeader = deflateSetHeader;\nexports.deflate = deflate;\nexports.deflateEnd = deflateEnd;\nexports.deflateSetDictionary = deflateSetDictionary;\nexports.deflateInfo = 'pako deflate (from Nodeca project)';\n\n/* Not implemented\nexports.deflateBound = deflateBound;\nexports.deflateCopy = deflateCopy;\nexports.deflateParams = deflateParams;\nexports.deflatePending = deflatePending;\nexports.deflatePrime = deflatePrime;\nexports.deflateTune = deflateTune;\n*/\n\n\n/***/ }),\n/* 44 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar utils = __webpack_require__(3);\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n//var Z_FILTERED          = 1;\n//var Z_HUFFMAN_ONLY      = 2;\n//var Z_RLE               = 3;\nvar Z_FIXED               = 4;\n//var Z_DEFAULT_STRATEGY  = 0;\n\n/* Possible values of the data_type field (though see inflate()) */\nvar Z_BINARY              = 0;\nvar Z_TEXT                = 1;\n//var Z_ASCII             = 1; // = Z_TEXT\nvar Z_UNKNOWN             = 2;\n\n/*============================================================================*/\n\n\nfunction zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }\n\n// From zutil.h\n\nvar STORED_BLOCK = 0;\nvar STATIC_TREES = 1;\nvar DYN_TREES    = 2;\n/* The three kinds of block type */\n\nvar MIN_MATCH    = 3;\nvar MAX_MATCH    = 258;\n/* The minimum and maximum match lengths */\n\n// From deflate.h\n/* ===========================================================================\n * Internal compression state.\n */\n\nvar LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\n\nvar LITERALS      = 256;\n/* number of literal bytes 0..255 */\n\nvar L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\n\nvar D_CODES       = 30;\n/* number of distance codes */\n\nvar BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\n\nvar HEAP_SIZE     = 2 * L_CODES + 1;\n/* maximum heap size */\n\nvar MAX_BITS      = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nvar Buf_size      = 16;\n/* size of bit buffer in bi_buf */\n\n\n/* ===========================================================================\n * Constants\n */\n\nvar MAX_BL_BITS = 7;\n/* Bit length codes must not exceed MAX_BL_BITS bits */\n\nvar END_BLOCK   = 256;\n/* end of block literal code */\n\nvar REP_3_6     = 16;\n/* repeat previous bit length 3-6 times (2 bits of repeat count) */\n\nvar REPZ_3_10   = 17;\n/* repeat a zero length 3-10 times  (3 bits of repeat count) */\n\nvar REPZ_11_138 = 18;\n/* repeat a zero length 11-138 times  (7 bits of repeat count) */\n\n/* eslint-disable comma-spacing,array-bracket-spacing */\nvar extra_lbits =   /* extra bits for each length code */\n  [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];\n\nvar extra_dbits =   /* extra bits for each distance code */\n  [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];\n\nvar extra_blbits =  /* extra bits for each bit length code */\n  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];\n\nvar bl_order =\n  [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];\n/* eslint-enable comma-spacing,array-bracket-spacing */\n\n/* The lengths of the bit length codes are sent in order of decreasing\n * probability, to avoid transmitting the lengths for unused bit length codes.\n */\n\n/* ===========================================================================\n * Local data. These are initialized only once.\n */\n\n// We pre-fill arrays with 0 to avoid uninitialized gaps\n\nvar DIST_CODE_LEN = 512; /* see definition of array dist_code below */\n\n// !!!! Use flat array insdead of structure, Freq = i*2, Len = i*2+1\nvar static_ltree  = new Array((L_CODES + 2) * 2);\nzero(static_ltree);\n/* The static literal tree. Since the bit lengths are imposed, there is no\n * need for the L_CODES extra codes used during heap construction. However\n * The codes 286 and 287 are needed to build a canonical tree (see _tr_init\n * below).\n */\n\nvar static_dtree  = new Array(D_CODES * 2);\nzero(static_dtree);\n/* The static distance tree. (Actually a trivial tree since all codes use\n * 5 bits.)\n */\n\nvar _dist_code    = new Array(DIST_CODE_LEN);\nzero(_dist_code);\n/* Distance codes. The first 256 values correspond to the distances\n * 3 .. 258, the last 256 values correspond to the top 8 bits of\n * the 15 bit distances.\n */\n\nvar _length_code  = new Array(MAX_MATCH - MIN_MATCH + 1);\nzero(_length_code);\n/* length code for each normalized match length (0 == MIN_MATCH) */\n\nvar base_length   = new Array(LENGTH_CODES);\nzero(base_length);\n/* First normalized length for each code (0 = MIN_MATCH) */\n\nvar base_dist     = new Array(D_CODES);\nzero(base_dist);\n/* First normalized distance for each code (0 = distance of 1) */\n\n\nfunction StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {\n\n  this.static_tree  = static_tree;  /* static tree or NULL */\n  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */\n  this.extra_base   = extra_base;   /* base index for extra_bits */\n  this.elems        = elems;        /* max number of elements in the tree */\n  this.max_length   = max_length;   /* max bit length for the codes */\n\n  // show if `static_tree` has data or dummy - needed for monomorphic objects\n  this.has_stree    = static_tree && static_tree.length;\n}\n\n\nvar static_l_desc;\nvar static_d_desc;\nvar static_bl_desc;\n\n\nfunction TreeDesc(dyn_tree, stat_desc) {\n  this.dyn_tree = dyn_tree;     /* the dynamic tree */\n  this.max_code = 0;            /* largest code with non zero frequency */\n  this.stat_desc = stat_desc;   /* the corresponding static tree */\n}\n\n\n\nfunction d_code(dist) {\n  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];\n}\n\n\n/* ===========================================================================\n * Output a short LSB first on the stream.\n * IN assertion: there is enough room in pendingBuf.\n */\nfunction put_short(s, w) {\n//    put_byte(s, (uch)((w) & 0xff));\n//    put_byte(s, (uch)((ush)(w) >> 8));\n  s.pending_buf[s.pending++] = (w) & 0xff;\n  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;\n}\n\n\n/* ===========================================================================\n * Send a value on a given number of bits.\n * IN assertion: length <= 16 and value fits in length bits.\n */\nfunction send_bits(s, value, length) {\n  if (s.bi_valid > (Buf_size - length)) {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    put_short(s, s.bi_buf);\n    s.bi_buf = value >> (Buf_size - s.bi_valid);\n    s.bi_valid += length - Buf_size;\n  } else {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    s.bi_valid += length;\n  }\n}\n\n\nfunction send_code(s, c, tree) {\n  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);\n}\n\n\n/* ===========================================================================\n * Reverse the first len bits of a code, using straightforward code (a faster\n * method would use a table)\n * IN assertion: 1 <= len <= 15\n */\nfunction bi_reverse(code, len) {\n  var res = 0;\n  do {\n    res |= code & 1;\n    code >>>= 1;\n    res <<= 1;\n  } while (--len > 0);\n  return res >>> 1;\n}\n\n\n/* ===========================================================================\n * Flush the bit buffer, keeping at most 7 bits in it.\n */\nfunction bi_flush(s) {\n  if (s.bi_valid === 16) {\n    put_short(s, s.bi_buf);\n    s.bi_buf = 0;\n    s.bi_valid = 0;\n\n  } else if (s.bi_valid >= 8) {\n    s.pending_buf[s.pending++] = s.bi_buf & 0xff;\n    s.bi_buf >>= 8;\n    s.bi_valid -= 8;\n  }\n}\n\n\n/* ===========================================================================\n * Compute the optimal bit lengths for a tree and update the total bit length\n * for the current block.\n * IN assertion: the fields freq and dad are set, heap[heap_max] and\n *    above are the tree nodes sorted by increasing frequency.\n * OUT assertions: the field len is set to the optimal bit length, the\n *     array bl_count contains the frequencies for each bit length.\n *     The length opt_len is updated; static_len is also updated if stree is\n *     not null.\n */\nfunction gen_bitlen(s, desc)\n//    deflate_state *s;\n//    tree_desc *desc;    /* the tree descriptor */\n{\n  var tree            = desc.dyn_tree;\n  var max_code        = desc.max_code;\n  var stree           = desc.stat_desc.static_tree;\n  var has_stree       = desc.stat_desc.has_stree;\n  var extra           = desc.stat_desc.extra_bits;\n  var base            = desc.stat_desc.extra_base;\n  var max_length      = desc.stat_desc.max_length;\n  var h;              /* heap index */\n  var n, m;           /* iterate over the tree elements */\n  var bits;           /* bit length */\n  var xbits;          /* extra bits */\n  var f;              /* frequency */\n  var overflow = 0;   /* number of elements with bit length too large */\n\n  for (bits = 0; bits <= MAX_BITS; bits++) {\n    s.bl_count[bits] = 0;\n  }\n\n  /* In a first pass, compute the optimal bit lengths (which may\n   * overflow in the case of the bit length tree).\n   */\n  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */\n\n  for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {\n    n = s.heap[h];\n    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;\n    if (bits > max_length) {\n      bits = max_length;\n      overflow++;\n    }\n    tree[n * 2 + 1]/*.Len*/ = bits;\n    /* We overwrite tree[n].Dad which is no longer needed */\n\n    if (n > max_code) { continue; } /* not a leaf node */\n\n    s.bl_count[bits]++;\n    xbits = 0;\n    if (n >= base) {\n      xbits = extra[n - base];\n    }\n    f = tree[n * 2]/*.Freq*/;\n    s.opt_len += f * (bits + xbits);\n    if (has_stree) {\n      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);\n    }\n  }\n  if (overflow === 0) { return; }\n\n  // Trace((stderr,\"\\nbit length overflow\\n\"));\n  /* This happens for example on obj2 and pic of the Calgary corpus */\n\n  /* Find the first bit length which could increase: */\n  do {\n    bits = max_length - 1;\n    while (s.bl_count[bits] === 0) { bits--; }\n    s.bl_count[bits]--;      /* move one leaf down the tree */\n    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */\n    s.bl_count[max_length]--;\n    /* The brother of the overflow item also moves one step up,\n     * but this does not affect bl_count[max_length]\n     */\n    overflow -= 2;\n  } while (overflow > 0);\n\n  /* Now recompute all bit lengths, scanning in increasing frequency.\n   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all\n   * lengths instead of fixing only the wrong ones. This idea is taken\n   * from 'ar' written by Haruhiko Okumura.)\n   */\n  for (bits = max_length; bits !== 0; bits--) {\n    n = s.bl_count[bits];\n    while (n !== 0) {\n      m = s.heap[--h];\n      if (m > max_code) { continue; }\n      if (tree[m * 2 + 1]/*.Len*/ !== bits) {\n        // Trace((stderr,\"code %d bits %d->%d\\n\", m, tree[m].Len, bits));\n        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;\n        tree[m * 2 + 1]/*.Len*/ = bits;\n      }\n      n--;\n    }\n  }\n}\n\n\n/* ===========================================================================\n * Generate the codes for a given tree and bit counts (which need not be\n * optimal).\n * IN assertion: the array bl_count contains the bit length statistics for\n * the given tree and the field len is set for all tree elements.\n * OUT assertion: the field code is set for all tree elements of non\n *     zero code length.\n */\nfunction gen_codes(tree, max_code, bl_count)\n//    ct_data *tree;             /* the tree to decorate */\n//    int max_code;              /* largest code with non zero frequency */\n//    ushf *bl_count;            /* number of codes at each bit length */\n{\n  var next_code = new Array(MAX_BITS + 1); /* next code value for each bit length */\n  var code = 0;              /* running code value */\n  var bits;                  /* bit index */\n  var n;                     /* code index */\n\n  /* The distribution counts are first used to generate the code values\n   * without bit reversal.\n   */\n  for (bits = 1; bits <= MAX_BITS; bits++) {\n    next_code[bits] = code = (code + bl_count[bits - 1]) << 1;\n  }\n  /* Check that the bit counts in bl_count are consistent. The last code\n   * must be all ones.\n   */\n  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,\n  //        \"inconsistent bit counts\");\n  //Tracev((stderr,\"\\ngen_codes: max_code %d \", max_code));\n\n  for (n = 0;  n <= max_code; n++) {\n    var len = tree[n * 2 + 1]/*.Len*/;\n    if (len === 0) { continue; }\n    /* Now reverse the bits */\n    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);\n\n    //Tracecv(tree != static_ltree, (stderr,\"\\nn %3d %c l %2d c %4x (%x) \",\n    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));\n  }\n}\n\n\n/* ===========================================================================\n * Initialize the various 'constant' tables.\n */\nfunction tr_static_init() {\n  var n;        /* iterates over tree elements */\n  var bits;     /* bit counter */\n  var length;   /* length value */\n  var code;     /* code value */\n  var dist;     /* distance index */\n  var bl_count = new Array(MAX_BITS + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  // do check in _tr_init()\n  //if (static_init_done) return;\n\n  /* For some embedded targets, global variables are not initialized: */\n/*#ifdef NO_INIT_GLOBAL_POINTERS\n  static_l_desc.static_tree = static_ltree;\n  static_l_desc.extra_bits = extra_lbits;\n  static_d_desc.static_tree = static_dtree;\n  static_d_desc.extra_bits = extra_dbits;\n  static_bl_desc.extra_bits = extra_blbits;\n#endif*/\n\n  /* Initialize the mapping length (0..255) -> length code (0..28) */\n  length = 0;\n  for (code = 0; code < LENGTH_CODES - 1; code++) {\n    base_length[code] = length;\n    for (n = 0; n < (1 << extra_lbits[code]); n++) {\n      _length_code[length++] = code;\n    }\n  }\n  //Assert (length == 256, \"tr_static_init: length != 256\");\n  /* Note that the length 255 (match length 258) can be represented\n   * in two different ways: code 284 + 5 bits or code 285, so we\n   * overwrite length_code[255] to use the best encoding:\n   */\n  _length_code[length - 1] = code;\n\n  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */\n  dist = 0;\n  for (code = 0; code < 16; code++) {\n    base_dist[code] = dist;\n    for (n = 0; n < (1 << extra_dbits[code]); n++) {\n      _dist_code[dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: dist != 256\");\n  dist >>= 7; /* from now on, all distances are divided by 128 */\n  for (; code < D_CODES; code++) {\n    base_dist[code] = dist << 7;\n    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {\n      _dist_code[256 + dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: 256+dist != 512\");\n\n  /* Construct the codes of the static literal tree */\n  for (bits = 0; bits <= MAX_BITS; bits++) {\n    bl_count[bits] = 0;\n  }\n\n  n = 0;\n  while (n <= 143) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  while (n <= 255) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 9;\n    n++;\n    bl_count[9]++;\n  }\n  while (n <= 279) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 7;\n    n++;\n    bl_count[7]++;\n  }\n  while (n <= 287) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  /* Codes 286 and 287 do not exist, but we must include them in the\n   * tree construction to get a canonical Huffman tree (longest code\n   * all ones)\n   */\n  gen_codes(static_ltree, L_CODES + 1, bl_count);\n\n  /* The static distance tree is trivial: */\n  for (n = 0; n < D_CODES; n++) {\n    static_dtree[n * 2 + 1]/*.Len*/ = 5;\n    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);\n  }\n\n  // Now data ready and we can init static trees\n  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);\n  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);\n  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);\n\n  //static_init_done = true;\n}\n\n\n/* ===========================================================================\n * Initialize a new block.\n */\nfunction init_block(s) {\n  var n; /* iterates over tree elements */\n\n  /* Initialize the trees. */\n  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }\n\n  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;\n  s.opt_len = s.static_len = 0;\n  s.last_lit = s.matches = 0;\n}\n\n\n/* ===========================================================================\n * Flush the bit buffer and align the output on a byte boundary\n */\nfunction bi_windup(s)\n{\n  if (s.bi_valid > 8) {\n    put_short(s, s.bi_buf);\n  } else if (s.bi_valid > 0) {\n    //put_byte(s, (Byte)s->bi_buf);\n    s.pending_buf[s.pending++] = s.bi_buf;\n  }\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n}\n\n/* ===========================================================================\n * Copy a stored block, storing first the length and its\n * one's complement if requested.\n */\nfunction copy_block(s, buf, len, header)\n//DeflateState *s;\n//charf    *buf;    /* the input data */\n//unsigned len;     /* its length */\n//int      header;  /* true if block header must be written */\n{\n  bi_windup(s);        /* align on byte boundary */\n\n  if (header) {\n    put_short(s, len);\n    put_short(s, ~len);\n  }\n//  while (len--) {\n//    put_byte(s, *buf++);\n//  }\n  utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);\n  s.pending += len;\n}\n\n/* ===========================================================================\n * Compares to subtrees, using the tree depth as tie breaker when\n * the subtrees have equal frequency. This minimizes the worst case length.\n */\nfunction smaller(tree, n, m, depth) {\n  var _n2 = n * 2;\n  var _m2 = m * 2;\n  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||\n         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));\n}\n\n/* ===========================================================================\n * Restore the heap property by moving down the tree starting at node k,\n * exchanging a node with the smallest of its two sons if necessary, stopping\n * when the heap property is re-established (each father smaller than its\n * two sons).\n */\nfunction pqdownheap(s, tree, k)\n//    deflate_state *s;\n//    ct_data *tree;  /* the tree to restore */\n//    int k;               /* node to move down */\n{\n  var v = s.heap[k];\n  var j = k << 1;  /* left son of k */\n  while (j <= s.heap_len) {\n    /* Set j to the smallest of the two sons: */\n    if (j < s.heap_len &&\n      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {\n      j++;\n    }\n    /* Exit if v is smaller than both sons */\n    if (smaller(tree, v, s.heap[j], s.depth)) { break; }\n\n    /* Exchange v with the smallest son */\n    s.heap[k] = s.heap[j];\n    k = j;\n\n    /* And continue down the tree, setting j to the left son of k */\n    j <<= 1;\n  }\n  s.heap[k] = v;\n}\n\n\n// inlined manually\n// var SMALLEST = 1;\n\n/* ===========================================================================\n * Send the block data compressed using the given Huffman trees\n */\nfunction compress_block(s, ltree, dtree)\n//    deflate_state *s;\n//    const ct_data *ltree; /* literal tree */\n//    const ct_data *dtree; /* distance tree */\n{\n  var dist;           /* distance of matched string */\n  var lc;             /* match length or unmatched char (if dist == 0) */\n  var lx = 0;         /* running index in l_buf */\n  var code;           /* the code to send */\n  var extra;          /* number of extra bits to send */\n\n  if (s.last_lit !== 0) {\n    do {\n      dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);\n      lc = s.pending_buf[s.l_buf + lx];\n      lx++;\n\n      if (dist === 0) {\n        send_code(s, lc, ltree); /* send a literal byte */\n        //Tracecv(isgraph(lc), (stderr,\" '%c' \", lc));\n      } else {\n        /* Here, lc is the match length - MIN_MATCH */\n        code = _length_code[lc];\n        send_code(s, code + LITERALS + 1, ltree); /* send the length code */\n        extra = extra_lbits[code];\n        if (extra !== 0) {\n          lc -= base_length[code];\n          send_bits(s, lc, extra);       /* send the extra length bits */\n        }\n        dist--; /* dist is now the match distance - 1 */\n        code = d_code(dist);\n        //Assert (code < D_CODES, \"bad d_code\");\n\n        send_code(s, code, dtree);       /* send the distance code */\n        extra = extra_dbits[code];\n        if (extra !== 0) {\n          dist -= base_dist[code];\n          send_bits(s, dist, extra);   /* send the extra distance bits */\n        }\n      } /* literal or match pair ? */\n\n      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */\n      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,\n      //       \"pendingBuf overflow\");\n\n    } while (lx < s.last_lit);\n  }\n\n  send_code(s, END_BLOCK, ltree);\n}\n\n\n/* ===========================================================================\n * Construct one Huffman tree and assigns the code bit strings and lengths.\n * Update the total bit length for the current block.\n * IN assertion: the field freq is set for all tree elements.\n * OUT assertions: the fields len and code are set to the optimal bit length\n *     and corresponding code. The length opt_len is updated; static_len is\n *     also updated if stree is not null. The field max_code is set.\n */\nfunction build_tree(s, desc)\n//    deflate_state *s;\n//    tree_desc *desc; /* the tree descriptor */\n{\n  var tree     = desc.dyn_tree;\n  var stree    = desc.stat_desc.static_tree;\n  var has_stree = desc.stat_desc.has_stree;\n  var elems    = desc.stat_desc.elems;\n  var n, m;          /* iterate over heap elements */\n  var max_code = -1; /* largest code with non zero frequency */\n  var node;          /* new node being created */\n\n  /* Construct the initial heap, with least frequent element in\n   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].\n   * heap[0] is not used.\n   */\n  s.heap_len = 0;\n  s.heap_max = HEAP_SIZE;\n\n  for (n = 0; n < elems; n++) {\n    if (tree[n * 2]/*.Freq*/ !== 0) {\n      s.heap[++s.heap_len] = max_code = n;\n      s.depth[n] = 0;\n\n    } else {\n      tree[n * 2 + 1]/*.Len*/ = 0;\n    }\n  }\n\n  /* The pkzip format requires that at least one distance code exists,\n   * and that at least one bit should be sent even if there is only one\n   * possible code. So to avoid special checks later on we force at least\n   * two codes of non zero frequency.\n   */\n  while (s.heap_len < 2) {\n    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);\n    tree[node * 2]/*.Freq*/ = 1;\n    s.depth[node] = 0;\n    s.opt_len--;\n\n    if (has_stree) {\n      s.static_len -= stree[node * 2 + 1]/*.Len*/;\n    }\n    /* node is 0 or 1 so it does not have extra bits */\n  }\n  desc.max_code = max_code;\n\n  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,\n   * establish sub-heaps of increasing lengths:\n   */\n  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }\n\n  /* Construct the Huffman tree by repeatedly combining the least two\n   * frequent nodes.\n   */\n  node = elems;              /* next internal node of the tree */\n  do {\n    //pqremove(s, tree, n);  /* n = node of least frequency */\n    /*** pqremove ***/\n    n = s.heap[1/*SMALLEST*/];\n    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n    /***/\n\n    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */\n\n    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */\n    s.heap[--s.heap_max] = m;\n\n    /* Create a new node father of n and m */\n    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;\n    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;\n    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;\n\n    /* and insert the new node in the heap */\n    s.heap[1/*SMALLEST*/] = node++;\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n\n  } while (s.heap_len >= 2);\n\n  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];\n\n  /* At this point, the fields freq and dad are set. We can now\n   * generate the bit lengths.\n   */\n  gen_bitlen(s, desc);\n\n  /* The field len is now set, we can generate the bit codes */\n  gen_codes(tree, max_code, s.bl_count);\n}\n\n\n/* ===========================================================================\n * Scan a literal or distance tree to determine the frequencies of the codes\n * in the bit length tree.\n */\nfunction scan_tree(s, tree, max_code)\n//    deflate_state *s;\n//    ct_data *tree;   /* the tree to be scanned */\n//    int max_code;    /* and its largest code of non zero frequency */\n{\n  var n;                     /* iterates over all tree elements */\n  var prevlen = -1;          /* last emitted length */\n  var curlen;                /* length of current code */\n\n  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  var count = 0;             /* repeat count of the current code */\n  var max_count = 7;         /* max repeat count */\n  var min_count = 4;         /* min repeat count */\n\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      s.bl_tree[curlen * 2]/*.Freq*/ += count;\n\n    } else if (curlen !== 0) {\n\n      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }\n      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;\n\n    } else if (count <= 10) {\n      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;\n\n    } else {\n      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;\n    }\n\n    count = 0;\n    prevlen = curlen;\n\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n}\n\n\n/* ===========================================================================\n * Send a literal or distance tree in compressed form, using the codes in\n * bl_tree.\n */\nfunction send_tree(s, tree, max_code)\n//    deflate_state *s;\n//    ct_data *tree; /* the tree to be scanned */\n//    int max_code;       /* and its largest code of non zero frequency */\n{\n  var n;                     /* iterates over all tree elements */\n  var prevlen = -1;          /* last emitted length */\n  var curlen;                /* length of current code */\n\n  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  var count = 0;             /* repeat count of the current code */\n  var max_count = 7;         /* max repeat count */\n  var min_count = 4;         /* min repeat count */\n\n  /* tree[max_code+1].Len = -1; */  /* guard already set */\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);\n\n    } else if (curlen !== 0) {\n      if (curlen !== prevlen) {\n        send_code(s, curlen, s.bl_tree);\n        count--;\n      }\n      //Assert(count >= 3 && count <= 6, \" 3_6?\");\n      send_code(s, REP_3_6, s.bl_tree);\n      send_bits(s, count - 3, 2);\n\n    } else if (count <= 10) {\n      send_code(s, REPZ_3_10, s.bl_tree);\n      send_bits(s, count - 3, 3);\n\n    } else {\n      send_code(s, REPZ_11_138, s.bl_tree);\n      send_bits(s, count - 11, 7);\n    }\n\n    count = 0;\n    prevlen = curlen;\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n}\n\n\n/* ===========================================================================\n * Construct the Huffman tree for the bit lengths and return the index in\n * bl_order of the last bit length code to send.\n */\nfunction build_bl_tree(s) {\n  var max_blindex;  /* index of last bit length code of non zero freq */\n\n  /* Determine the bit length frequencies for literal and distance trees */\n  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);\n  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);\n\n  /* Build the bit length tree: */\n  build_tree(s, s.bl_desc);\n  /* opt_len now includes the length of the tree representations, except\n   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.\n   */\n\n  /* Determine the number of bit length codes to send. The pkzip format\n   * requires that at least 4 bit length codes be sent. (appnote.txt says\n   * 3 but the actual value used is 4.)\n   */\n  for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {\n    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {\n      break;\n    }\n  }\n  /* Update opt_len to include the bit length tree and counts */\n  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;\n  //Tracev((stderr, \"\\ndyn trees: dyn %ld, stat %ld\",\n  //        s->opt_len, s->static_len));\n\n  return max_blindex;\n}\n\n\n/* ===========================================================================\n * Send the header for a block using dynamic Huffman trees: the counts, the\n * lengths of the bit length codes, the literal tree and the distance tree.\n * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.\n */\nfunction send_all_trees(s, lcodes, dcodes, blcodes)\n//    deflate_state *s;\n//    int lcodes, dcodes, blcodes; /* number of codes for each tree */\n{\n  var rank;                    /* index in bl_order */\n\n  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, \"not enough codes\");\n  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,\n  //        \"too many codes\");\n  //Tracev((stderr, \"\\nbl counts: \"));\n  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */\n  send_bits(s, dcodes - 1,   5);\n  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */\n  for (rank = 0; rank < blcodes; rank++) {\n    //Tracev((stderr, \"\\nbl code %2d \", bl_order[rank]));\n    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);\n  }\n  //Tracev((stderr, \"\\nbl tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */\n  //Tracev((stderr, \"\\nlit tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */\n  //Tracev((stderr, \"\\ndist tree: sent %ld\", s->bits_sent));\n}\n\n\n/* ===========================================================================\n * Check if the data type is TEXT or BINARY, using the following algorithm:\n * - TEXT if the two conditions below are satisfied:\n *    a) There are no non-portable control characters belonging to the\n *       \"black list\" (0..6, 14..25, 28..31).\n *    b) There is at least one printable character belonging to the\n *       \"white list\" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).\n * - BINARY otherwise.\n * - The following partially-portable control characters form a\n *   \"gray list\" that is ignored in this detection algorithm:\n *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).\n * IN assertion: the fields Freq of dyn_ltree are set.\n */\nfunction detect_data_type(s) {\n  /* black_mask is the bit mask of black-listed bytes\n   * set bits 0..6, 14..25, and 28..31\n   * 0xf3ffc07f = binary 11110011111111111100000001111111\n   */\n  var black_mask = 0xf3ffc07f;\n  var n;\n\n  /* Check for non-textual (\"black-listed\") bytes. */\n  for (n = 0; n <= 31; n++, black_mask >>>= 1) {\n    if ((black_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {\n      return Z_BINARY;\n    }\n  }\n\n  /* Check for textual (\"white-listed\") bytes. */\n  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||\n      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {\n    return Z_TEXT;\n  }\n  for (n = 32; n < LITERALS; n++) {\n    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {\n      return Z_TEXT;\n    }\n  }\n\n  /* There are no \"black-listed\" or \"white-listed\" bytes:\n   * this stream either is empty or has tolerated (\"gray-listed\") bytes only.\n   */\n  return Z_BINARY;\n}\n\n\nvar static_init_done = false;\n\n/* ===========================================================================\n * Initialize the tree data structures for a new zlib stream.\n */\nfunction _tr_init(s)\n{\n\n  if (!static_init_done) {\n    tr_static_init();\n    static_init_done = true;\n  }\n\n  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);\n  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);\n  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);\n\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n\n  /* Initialize the first block of the first file: */\n  init_block(s);\n}\n\n\n/* ===========================================================================\n * Send a stored block\n */\nfunction _tr_stored_block(s, buf, stored_len, last)\n//DeflateState *s;\n//charf *buf;       /* input block */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n{\n  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */\n  copy_block(s, buf, stored_len, true); /* with header */\n}\n\n\n/* ===========================================================================\n * Send one empty static block to give enough lookahead for inflate.\n * This takes 10 bits, of which 7 may remain in the bit buffer.\n */\nfunction _tr_align(s) {\n  send_bits(s, STATIC_TREES << 1, 3);\n  send_code(s, END_BLOCK, static_ltree);\n  bi_flush(s);\n}\n\n\n/* ===========================================================================\n * Determine the best encoding for the current block: dynamic trees, static\n * trees or store, and output the encoded block to the zip file.\n */\nfunction _tr_flush_block(s, buf, stored_len, last)\n//DeflateState *s;\n//charf *buf;       /* input block, or NULL if too old */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n{\n  var opt_lenb, static_lenb;  /* opt_len and static_len in bytes */\n  var max_blindex = 0;        /* index of last bit length code of non zero freq */\n\n  /* Build the Huffman trees unless a stored block is forced */\n  if (s.level > 0) {\n\n    /* Check if the file is binary or text */\n    if (s.strm.data_type === Z_UNKNOWN) {\n      s.strm.data_type = detect_data_type(s);\n    }\n\n    /* Construct the literal and distance trees */\n    build_tree(s, s.l_desc);\n    // Tracev((stderr, \"\\nlit data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n\n    build_tree(s, s.d_desc);\n    // Tracev((stderr, \"\\ndist data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n    /* At this point, opt_len and static_len are the total bit lengths of\n     * the compressed block data, excluding the tree representations.\n     */\n\n    /* Build the bit length tree for the above two trees, and get the index\n     * in bl_order of the last bit length code to send.\n     */\n    max_blindex = build_bl_tree(s);\n\n    /* Determine the best encoding. Compute the block lengths in bytes. */\n    opt_lenb = (s.opt_len + 3 + 7) >>> 3;\n    static_lenb = (s.static_len + 3 + 7) >>> 3;\n\n    // Tracev((stderr, \"\\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u \",\n    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,\n    //        s->last_lit));\n\n    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }\n\n  } else {\n    // Assert(buf != (char*)0, \"lost buf\");\n    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */\n  }\n\n  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {\n    /* 4: two words for the lengths */\n\n    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.\n     * Otherwise we can't have processed more than WSIZE input bytes since\n     * the last block flush, because compression would have been\n     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to\n     * transform a block into a stored block.\n     */\n    _tr_stored_block(s, buf, stored_len, last);\n\n  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {\n\n    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);\n    compress_block(s, static_ltree, static_dtree);\n\n  } else {\n    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);\n    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);\n    compress_block(s, s.dyn_ltree, s.dyn_dtree);\n  }\n  // Assert (s->compressed_len == s->bits_sent, \"bad compressed size\");\n  /* The above check is made mod 2^32, for files larger than 512 MB\n   * and uLong implemented on 32 bits.\n   */\n  init_block(s);\n\n  if (last) {\n    bi_windup(s);\n  }\n  // Tracev((stderr,\"\\ncomprlen %lu(%lu) \", s->compressed_len>>3,\n  //       s->compressed_len-7*last));\n}\n\n/* ===========================================================================\n * Save the match info and tally the frequency counts. Return true if\n * the current block must be flushed.\n */\nfunction _tr_tally(s, dist, lc)\n//    deflate_state *s;\n//    unsigned dist;  /* distance of matched string */\n//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */\n{\n  //var out_length, in_length, dcode;\n\n  s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;\n  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;\n\n  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;\n  s.last_lit++;\n\n  if (dist === 0) {\n    /* lc is the unmatched char */\n    s.dyn_ltree[lc * 2]/*.Freq*/++;\n  } else {\n    s.matches++;\n    /* Here, lc is the match length - MIN_MATCH */\n    dist--;             /* dist = match distance - 1 */\n    //Assert((ush)dist < (ush)MAX_DIST(s) &&\n    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&\n    //       (ush)d_code(dist) < (ush)D_CODES,  \"_tr_tally: bad match\");\n\n    s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]/*.Freq*/++;\n    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;\n  }\n\n// (!) This block is disabled in zlib defailts,\n// don't enable it for binary compatibility\n\n//#ifdef TRUNCATE_BLOCK\n//  /* Try to guess if it is profitable to stop the current block here */\n//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {\n//    /* Compute an upper bound for the compressed length */\n//    out_length = s.last_lit*8;\n//    in_length = s.strstart - s.block_start;\n//\n//    for (dcode = 0; dcode < D_CODES; dcode++) {\n//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);\n//    }\n//    out_length >>>= 3;\n//    //Tracev((stderr,\"\\nlast_lit %u, in %ld, out ~%ld(%ld%%) \",\n//    //       s->last_lit, in_length, out_length,\n//    //       100L - out_length*100L/in_length));\n//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {\n//      return true;\n//    }\n//  }\n//#endif\n\n  return (s.last_lit === s.lit_bufsize - 1);\n  /* We avoid equality with lit_bufsize because of wraparound at 64K\n   * on 16 bit machines and because stored blocks are restricted to\n   * 64K-1 bytes.\n   */\n}\n\nexports._tr_init  = _tr_init;\nexports._tr_stored_block = _tr_stored_block;\nexports._tr_flush_block  = _tr_flush_block;\nexports._tr_tally = _tr_tally;\nexports._tr_align = _tr_align;\n\n\n/***/ }),\n/* 45 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n\nvar zlib_inflate = __webpack_require__(46);\nvar utils        = __webpack_require__(3);\nvar strings      = __webpack_require__(17);\nvar c            = __webpack_require__(19);\nvar msg          = __webpack_require__(9);\nvar ZStream      = __webpack_require__(18);\nvar GZheader     = __webpack_require__(49);\n\nvar toString = Object.prototype.toString;\n\n/**\n * class Inflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[inflate]]\n * and [[inflateRaw]].\n **/\n\n/* internal\n * inflate.chunks -> Array\n *\n * Chunks of output data, if [[Inflate#onData]] not overriden.\n **/\n\n/**\n * Inflate.result -> Uint8Array|Array|String\n *\n * Uncompressed result, generated by default [[Inflate#onData]]\n * and [[Inflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Inflate#push]] with `Z_FINISH` / `true` param) or if you\n * push a chunk with explicit flush (call [[Inflate#push]] with\n * `Z_SYNC_FLUSH` param).\n **/\n\n/**\n * Inflate.err -> Number\n *\n * Error code after inflate finished. 0 (Z_OK) on success.\n * Should be checked if broken data possible.\n **/\n\n/**\n * Inflate.msg -> String\n *\n * Error message, if [[Inflate.err]] != 0\n **/\n\n\n/**\n * new Inflate(options)\n * - options (Object): zlib inflate options.\n *\n * Creates new inflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `windowBits`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw inflate\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n * By default, when no options set, autodetect deflate/gzip data format via\n * wrapper header.\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])\n *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * var inflate = new pako.Inflate({ level: 3});\n *\n * inflate.push(chunk1, false);\n * inflate.push(chunk2, true);  // true -> last chunk\n *\n * if (inflate.err) { throw new Error(inflate.err); }\n *\n * console.log(inflate.result);\n * ```\n **/\nfunction Inflate(options) {\n  if (!(this instanceof Inflate)) return new Inflate(options);\n\n  this.options = utils.assign({\n    chunkSize: 16384,\n    windowBits: 0,\n    to: ''\n  }, options || {});\n\n  var opt = this.options;\n\n  // Force window size for `raw` data, if not set directly,\n  // because we have no header for autodetect.\n  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {\n    opt.windowBits = -opt.windowBits;\n    if (opt.windowBits === 0) { opt.windowBits = -15; }\n  }\n\n  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate\n  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&\n      !(options && options.windowBits)) {\n    opt.windowBits += 32;\n  }\n\n  // Gzip header has no info about windows size, we can do autodetect only\n  // for deflate. So, if window size not set, force it to max when gzip possible\n  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {\n    // bit 3 (16) -> gzipped data\n    // bit 4 (32) -> autodetect gzip/deflate\n    if ((opt.windowBits & 15) === 0) {\n      opt.windowBits |= 15;\n    }\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm   = new ZStream();\n  this.strm.avail_out = 0;\n\n  var status  = zlib_inflate.inflateInit2(\n    this.strm,\n    opt.windowBits\n  );\n\n  if (status !== c.Z_OK) {\n    throw new Error(msg[status]);\n  }\n\n  this.header = new GZheader();\n\n  zlib_inflate.inflateGetHeader(this.strm, this.header);\n}\n\n/**\n * Inflate#push(data[, mode]) -> Boolean\n * - data (Uint8Array|Array|ArrayBuffer|String): input data\n * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` meansh Z_FINISH.\n *\n * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with\n * new output chunks. Returns `true` on success. The last data block must have\n * mode Z_FINISH (or `true`). That will flush internal pending buffers and call\n * [[Inflate#onEnd]]. For interim explicit flushes (without ending the stream) you\n * can use mode Z_SYNC_FLUSH, keeping the decompression context.\n *\n * On fail call [[Inflate#onEnd]] with error code and return false.\n *\n * We strongly recommend to use `Uint8Array` on input for best speed (output\n * format is detected automatically). Also, don't skip last param and always\n * use the same type in your code (boolean or number). That will improve JS speed.\n *\n * For regular `Array`-s make sure all elements are [0..255].\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nInflate.prototype.push = function (data, mode) {\n  var strm = this.strm;\n  var chunkSize = this.options.chunkSize;\n  var dictionary = this.options.dictionary;\n  var status, _mode;\n  var next_out_utf8, tail, utf8str;\n  var dict;\n\n  // Flag to properly process Z_BUF_ERROR on testing inflate call\n  // when we check that all output data was flushed.\n  var allowBufError = false;\n\n  if (this.ended) { return false; }\n  _mode = (mode === ~~mode) ? mode : ((mode === true) ? c.Z_FINISH : c.Z_NO_FLUSH);\n\n  // Convert data if needed\n  if (typeof data === 'string') {\n    // Only binary strings can be decompressed on practice\n    strm.input = strings.binstring2buf(data);\n  } else if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  do {\n    if (strm.avail_out === 0) {\n      strm.output = new utils.Buf8(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n\n    status = zlib_inflate.inflate(strm, c.Z_NO_FLUSH);    /* no bad return value */\n\n    if (status === c.Z_NEED_DICT && dictionary) {\n      // Convert data if needed\n      if (typeof dictionary === 'string') {\n        dict = strings.string2buf(dictionary);\n      } else if (toString.call(dictionary) === '[object ArrayBuffer]') {\n        dict = new Uint8Array(dictionary);\n      } else {\n        dict = dictionary;\n      }\n\n      status = zlib_inflate.inflateSetDictionary(this.strm, dict);\n\n    }\n\n    if (status === c.Z_BUF_ERROR && allowBufError === true) {\n      status = c.Z_OK;\n      allowBufError = false;\n    }\n\n    if (status !== c.Z_STREAM_END && status !== c.Z_OK) {\n      this.onEnd(status);\n      this.ended = true;\n      return false;\n    }\n\n    if (strm.next_out) {\n      if (strm.avail_out === 0 || status === c.Z_STREAM_END || (strm.avail_in === 0 && (_mode === c.Z_FINISH || _mode === c.Z_SYNC_FLUSH))) {\n\n        if (this.options.to === 'string') {\n\n          next_out_utf8 = strings.utf8border(strm.output, strm.next_out);\n\n          tail = strm.next_out - next_out_utf8;\n          utf8str = strings.buf2string(strm.output, next_out_utf8);\n\n          // move tail\n          strm.next_out = tail;\n          strm.avail_out = chunkSize - tail;\n          if (tail) { utils.arraySet(strm.output, strm.output, next_out_utf8, tail, 0); }\n\n          this.onData(utf8str);\n\n        } else {\n          this.onData(utils.shrinkBuf(strm.output, strm.next_out));\n        }\n      }\n    }\n\n    // When no more input data, we should check that internal inflate buffers\n    // are flushed. The only way to do it when avail_out = 0 - run one more\n    // inflate pass. But if output data not exists, inflate return Z_BUF_ERROR.\n    // Here we set flag to process this error properly.\n    //\n    // NOTE. Deflate does not return error in this case and does not needs such\n    // logic.\n    if (strm.avail_in === 0 && strm.avail_out === 0) {\n      allowBufError = true;\n    }\n\n  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== c.Z_STREAM_END);\n\n  if (status === c.Z_STREAM_END) {\n    _mode = c.Z_FINISH;\n  }\n\n  // Finalize on the last chunk.\n  if (_mode === c.Z_FINISH) {\n    status = zlib_inflate.inflateEnd(this.strm);\n    this.onEnd(status);\n    this.ended = true;\n    return status === c.Z_OK;\n  }\n\n  // callback interim results if Z_SYNC_FLUSH.\n  if (_mode === c.Z_SYNC_FLUSH) {\n    this.onEnd(c.Z_OK);\n    strm.avail_out = 0;\n    return true;\n  }\n\n  return true;\n};\n\n\n/**\n * Inflate#onData(chunk) -> Void\n * - chunk (Uint8Array|Array|String): ouput data. Type of array depends\n *   on js engine support. When string output requested, each chunk\n *   will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nInflate.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Inflate#onEnd(status) -> Void\n * - status (Number): inflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called either after you tell inflate that the input stream is\n * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)\n * or if an error happened. By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nInflate.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === c.Z_OK) {\n    if (this.options.to === 'string') {\n      // Glue & convert here, until we teach pako to send\n      // utf8 alligned strings to onData\n      this.result = this.chunks.join('');\n    } else {\n      this.result = utils.flattenChunks(this.chunks);\n    }\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * inflate(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Decompress `data` with inflate/ungzip and `options`. Autodetect\n * format via wrapper header by default. That's why we don't provide\n * separate `ungzip` method.\n *\n * Supported options are:\n *\n * - windowBits\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , input = pako.deflate([1,2,3,4,5,6,7,8,9])\n *   , output;\n *\n * try {\n *   output = pako.inflate(input);\n * } catch (err)\n *   console.log(err);\n * }\n * ```\n **/\nfunction inflate(input, options) {\n  var inflator = new Inflate(options);\n\n  inflator.push(input, true);\n\n  // That will never happens, if you don't cheat with options :)\n  if (inflator.err) { throw inflator.msg || msg[inflator.err]; }\n\n  return inflator.result;\n}\n\n\n/**\n * inflateRaw(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * The same as [[inflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction inflateRaw(input, options) {\n  options = options || {};\n  options.raw = true;\n  return inflate(input, options);\n}\n\n\n/**\n * ungzip(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Just shortcut to [[inflate]], because it autodetects format\n * by header.content. Done for convenience.\n **/\n\n\nexports.Inflate = Inflate;\nexports.inflate = inflate;\nexports.inflateRaw = inflateRaw;\nexports.ungzip  = inflate;\n\n\n/***/ }),\n/* 46 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar utils         = __webpack_require__(3);\nvar adler32       = __webpack_require__(15);\nvar crc32         = __webpack_require__(16);\nvar inflate_fast  = __webpack_require__(47);\nvar inflate_table = __webpack_require__(48);\n\nvar CODES = 0;\nvar LENS = 1;\nvar DISTS = 2;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n/* Allowed flush values; see deflate() and inflate() below for details */\n//var Z_NO_FLUSH      = 0;\n//var Z_PARTIAL_FLUSH = 1;\n//var Z_SYNC_FLUSH    = 2;\n//var Z_FULL_FLUSH    = 3;\nvar Z_FINISH        = 4;\nvar Z_BLOCK         = 5;\nvar Z_TREES         = 6;\n\n\n/* Return codes for the compression/decompression functions. Negative values\n * are errors, positive values are used for special but normal events.\n */\nvar Z_OK            = 0;\nvar Z_STREAM_END    = 1;\nvar Z_NEED_DICT     = 2;\n//var Z_ERRNO         = -1;\nvar Z_STREAM_ERROR  = -2;\nvar Z_DATA_ERROR    = -3;\nvar Z_MEM_ERROR     = -4;\nvar Z_BUF_ERROR     = -5;\n//var Z_VERSION_ERROR = -6;\n\n/* The deflate compression method */\nvar Z_DEFLATED  = 8;\n\n\n/* STATES ====================================================================*/\n/* ===========================================================================*/\n\n\nvar    HEAD = 1;       /* i: waiting for magic header */\nvar    FLAGS = 2;      /* i: waiting for method and flags (gzip) */\nvar    TIME = 3;       /* i: waiting for modification time (gzip) */\nvar    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */\nvar    EXLEN = 5;      /* i: waiting for extra length (gzip) */\nvar    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */\nvar    NAME = 7;       /* i: waiting for end of file name (gzip) */\nvar    COMMENT = 8;    /* i: waiting for end of comment (gzip) */\nvar    HCRC = 9;       /* i: waiting for header crc (gzip) */\nvar    DICTID = 10;    /* i: waiting for dictionary check value */\nvar    DICT = 11;      /* waiting for inflateSetDictionary() call */\nvar        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */\nvar        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */\nvar        STORED = 14;    /* i: waiting for stored size (length and complement) */\nvar        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */\nvar        COPY = 16;      /* i/o: waiting for input or output to copy stored block */\nvar        TABLE = 17;     /* i: waiting for dynamic block table lengths */\nvar        LENLENS = 18;   /* i: waiting for code length code lengths */\nvar        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */\nvar            LEN_ = 20;      /* i: same as LEN below, but only first time in */\nvar            LEN = 21;       /* i: waiting for length/lit/eob code */\nvar            LENEXT = 22;    /* i: waiting for length extra bits */\nvar            DIST = 23;      /* i: waiting for distance code */\nvar            DISTEXT = 24;   /* i: waiting for distance extra bits */\nvar            MATCH = 25;     /* o: waiting for output space to copy string */\nvar            LIT = 26;       /* o: waiting for output space to write literal */\nvar    CHECK = 27;     /* i: waiting for 32-bit check value */\nvar    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */\nvar    DONE = 29;      /* finished check, done -- remain here until reset */\nvar    BAD = 30;       /* got a data error -- remain here until reset */\nvar    MEM = 31;       /* got an inflate() memory error -- remain here until reset */\nvar    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */\n\n/* ===========================================================================*/\n\n\n\nvar ENOUGH_LENS = 852;\nvar ENOUGH_DISTS = 592;\n//var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);\n\nvar MAX_WBITS = 15;\n/* 32K LZ77 window */\nvar DEF_WBITS = MAX_WBITS;\n\n\nfunction zswap32(q) {\n  return  (((q >>> 24) & 0xff) +\n          ((q >>> 8) & 0xff00) +\n          ((q & 0xff00) << 8) +\n          ((q & 0xff) << 24));\n}\n\n\nfunction InflateState() {\n  this.mode = 0;             /* current inflate mode */\n  this.last = false;          /* true if processing last block */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n  this.havedict = false;      /* true if dictionary provided */\n  this.flags = 0;             /* gzip header method and flags (0 if zlib) */\n  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */\n  this.check = 0;             /* protected copy of check value */\n  this.total = 0;             /* protected copy of output count */\n  // TODO: may be {}\n  this.head = null;           /* where to save gzip header information */\n\n  /* sliding window */\n  this.wbits = 0;             /* log base 2 of requested window size */\n  this.wsize = 0;             /* window size or zero if not using window */\n  this.whave = 0;             /* valid bytes in the window */\n  this.wnext = 0;             /* window write index */\n  this.window = null;         /* allocated sliding window, if needed */\n\n  /* bit accumulator */\n  this.hold = 0;              /* input bit accumulator */\n  this.bits = 0;              /* number of bits in \"in\" */\n\n  /* for string and stored block copying */\n  this.length = 0;            /* literal or length of data to copy */\n  this.offset = 0;            /* distance back to copy string from */\n\n  /* for table and code decoding */\n  this.extra = 0;             /* extra bits needed */\n\n  /* fixed and dynamic code tables */\n  this.lencode = null;          /* starting table for length/literal codes */\n  this.distcode = null;         /* starting table for distance codes */\n  this.lenbits = 0;           /* index bits for lencode */\n  this.distbits = 0;          /* index bits for distcode */\n\n  /* dynamic table building */\n  this.ncode = 0;             /* number of code length code lengths */\n  this.nlen = 0;              /* number of length code lengths */\n  this.ndist = 0;             /* number of distance code lengths */\n  this.have = 0;              /* number of code lengths in lens[] */\n  this.next = null;              /* next available space in codes[] */\n\n  this.lens = new utils.Buf16(320); /* temporary storage for code lengths */\n  this.work = new utils.Buf16(288); /* work area for code table building */\n\n  /*\n   because we don't have pointers in js, we use lencode and distcode directly\n   as buffers so we don't need codes\n  */\n  //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */\n  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */\n  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */\n  this.sane = 0;                   /* if false, allow invalid distance too far */\n  this.back = 0;                   /* bits back of last unprocessed length/lit */\n  this.was = 0;                    /* initial length of match */\n}\n\nfunction inflateResetKeep(strm) {\n  var state;\n\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  state = strm.state;\n  strm.total_in = strm.total_out = state.total = 0;\n  strm.msg = ''; /*Z_NULL*/\n  if (state.wrap) {       /* to support ill-conceived Java test suite */\n    strm.adler = state.wrap & 1;\n  }\n  state.mode = HEAD;\n  state.last = 0;\n  state.havedict = 0;\n  state.dmax = 32768;\n  state.head = null/*Z_NULL*/;\n  state.hold = 0;\n  state.bits = 0;\n  //state.lencode = state.distcode = state.next = state.codes;\n  state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);\n  state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);\n\n  state.sane = 1;\n  state.back = -1;\n  //Tracev((stderr, \"inflate: reset\\n\"));\n  return Z_OK;\n}\n\nfunction inflateReset(strm) {\n  var state;\n\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  state = strm.state;\n  state.wsize = 0;\n  state.whave = 0;\n  state.wnext = 0;\n  return inflateResetKeep(strm);\n\n}\n\nfunction inflateReset2(strm, windowBits) {\n  var wrap;\n  var state;\n\n  /* get the state */\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  state = strm.state;\n\n  /* extract wrap request from windowBits parameter */\n  if (windowBits < 0) {\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n  else {\n    wrap = (windowBits >> 4) + 1;\n    if (windowBits < 48) {\n      windowBits &= 15;\n    }\n  }\n\n  /* set number of window bits, free window if different */\n  if (windowBits && (windowBits < 8 || windowBits > 15)) {\n    return Z_STREAM_ERROR;\n  }\n  if (state.window !== null && state.wbits !== windowBits) {\n    state.window = null;\n  }\n\n  /* update state and reset the rest of it */\n  state.wrap = wrap;\n  state.wbits = windowBits;\n  return inflateReset(strm);\n}\n\nfunction inflateInit2(strm, windowBits) {\n  var ret;\n  var state;\n\n  if (!strm) { return Z_STREAM_ERROR; }\n  //strm.msg = Z_NULL;                 /* in case we return an error */\n\n  state = new InflateState();\n\n  //if (state === Z_NULL) return Z_MEM_ERROR;\n  //Tracev((stderr, \"inflate: allocated\\n\"));\n  strm.state = state;\n  state.window = null/*Z_NULL*/;\n  ret = inflateReset2(strm, windowBits);\n  if (ret !== Z_OK) {\n    strm.state = null/*Z_NULL*/;\n  }\n  return ret;\n}\n\nfunction inflateInit(strm) {\n  return inflateInit2(strm, DEF_WBITS);\n}\n\n\n/*\n Return state with length and distance decoding tables and index sizes set to\n fixed code decoding.  Normally this returns fixed tables from inffixed.h.\n If BUILDFIXED is defined, then instead this routine builds the tables the\n first time it's called, and returns those tables the first time and\n thereafter.  This reduces the size of the code by about 2K bytes, in\n exchange for a little execution time.  However, BUILDFIXED should not be\n used for threaded applications, since the rewriting of the tables and virgin\n may not be thread-safe.\n */\nvar virgin = true;\n\nvar lenfix, distfix; // We have no pointers in JS, so keep tables separate\n\nfunction fixedtables(state) {\n  /* build fixed huffman tables if first call (may not be thread safe) */\n  if (virgin) {\n    var sym;\n\n    lenfix = new utils.Buf32(512);\n    distfix = new utils.Buf32(32);\n\n    /* literal/length table */\n    sym = 0;\n    while (sym < 144) { state.lens[sym++] = 8; }\n    while (sym < 256) { state.lens[sym++] = 9; }\n    while (sym < 280) { state.lens[sym++] = 7; }\n    while (sym < 288) { state.lens[sym++] = 8; }\n\n    inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });\n\n    /* distance table */\n    sym = 0;\n    while (sym < 32) { state.lens[sym++] = 5; }\n\n    inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });\n\n    /* do this just once */\n    virgin = false;\n  }\n\n  state.lencode = lenfix;\n  state.lenbits = 9;\n  state.distcode = distfix;\n  state.distbits = 5;\n}\n\n\n/*\n Update the window with the last wsize (normally 32K) bytes written before\n returning.  If window does not exist yet, create it.  This is only called\n when a window is already in use, or when output has been written during this\n inflate call, but the end of the deflate stream has not been reached yet.\n It is also called to create a window for dictionary data when a dictionary\n is loaded.\n\n Providing output buffers larger than 32K to inflate() should provide a speed\n advantage, since only the last 32K of output is copied to the sliding window\n upon return from inflate(), and since all distances after the first 32K of\n output will fall in the output data, making match copies simpler and faster.\n The advantage may be dependent on the size of the processor's data caches.\n */\nfunction updatewindow(strm, src, end, copy) {\n  var dist;\n  var state = strm.state;\n\n  /* if it hasn't been done already, allocate space for the window */\n  if (state.window === null) {\n    state.wsize = 1 << state.wbits;\n    state.wnext = 0;\n    state.whave = 0;\n\n    state.window = new utils.Buf8(state.wsize);\n  }\n\n  /* copy state->wsize or less output bytes into the circular window */\n  if (copy >= state.wsize) {\n    utils.arraySet(state.window, src, end - state.wsize, state.wsize, 0);\n    state.wnext = 0;\n    state.whave = state.wsize;\n  }\n  else {\n    dist = state.wsize - state.wnext;\n    if (dist > copy) {\n      dist = copy;\n    }\n    //zmemcpy(state->window + state->wnext, end - copy, dist);\n    utils.arraySet(state.window, src, end - copy, dist, state.wnext);\n    copy -= dist;\n    if (copy) {\n      //zmemcpy(state->window, end - copy, copy);\n      utils.arraySet(state.window, src, end - copy, copy, 0);\n      state.wnext = copy;\n      state.whave = state.wsize;\n    }\n    else {\n      state.wnext += dist;\n      if (state.wnext === state.wsize) { state.wnext = 0; }\n      if (state.whave < state.wsize) { state.whave += dist; }\n    }\n  }\n  return 0;\n}\n\nfunction inflate(strm, flush) {\n  var state;\n  var input, output;          // input/output buffers\n  var next;                   /* next input INDEX */\n  var put;                    /* next output INDEX */\n  var have, left;             /* available input and output */\n  var hold;                   /* bit buffer */\n  var bits;                   /* bits in bit buffer */\n  var _in, _out;              /* save starting available input and output */\n  var copy;                   /* number of stored or match bytes to copy */\n  var from;                   /* where to copy match bytes from */\n  var from_source;\n  var here = 0;               /* current decoding table entry */\n  var here_bits, here_op, here_val; // paked \"here\" denormalized (JS specific)\n  //var last;                   /* parent table entry */\n  var last_bits, last_op, last_val; // paked \"last\" denormalized (JS specific)\n  var len;                    /* length to copy for repeats, bits to drop */\n  var ret;                    /* return code */\n  var hbuf = new utils.Buf8(4);    /* buffer for gzip header crc calculation */\n  var opts;\n\n  var n; // temporary var for NEED_BITS\n\n  var order = /* permutation of code lengths */\n    [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];\n\n\n  if (!strm || !strm.state || !strm.output ||\n      (!strm.input && strm.avail_in !== 0)) {\n    return Z_STREAM_ERROR;\n  }\n\n  state = strm.state;\n  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */\n\n\n  //--- LOAD() ---\n  put = strm.next_out;\n  output = strm.output;\n  left = strm.avail_out;\n  next = strm.next_in;\n  input = strm.input;\n  have = strm.avail_in;\n  hold = state.hold;\n  bits = state.bits;\n  //---\n\n  _in = have;\n  _out = left;\n  ret = Z_OK;\n\n  inf_leave: // goto emulation\n  for (;;) {\n    switch (state.mode) {\n    case HEAD:\n      if (state.wrap === 0) {\n        state.mode = TYPEDO;\n        break;\n      }\n      //=== NEEDBITS(16);\n      while (bits < 16) {\n        if (have === 0) { break inf_leave; }\n        have--;\n        hold += input[next++] << bits;\n        bits += 8;\n      }\n      //===//\n      if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */\n        state.check = 0/*crc32(0L, Z_NULL, 0)*/;\n        //=== CRC2(state.check, hold);\n        hbuf[0] = hold & 0xff;\n        hbuf[1] = (hold >>> 8) & 0xff;\n        state.check = crc32(state.check, hbuf, 2, 0);\n        //===//\n\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = FLAGS;\n        break;\n      }\n      state.flags = 0;           /* expect zlib header */\n      if (state.head) {\n        state.head.done = false;\n      }\n      if (!(state.wrap & 1) ||   /* check if zlib header allowed */\n        (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {\n        strm.msg = 'incorrect header check';\n        state.mode = BAD;\n        break;\n      }\n      if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {\n        strm.msg = 'unknown compression method';\n        state.mode = BAD;\n        break;\n      }\n      //--- DROPBITS(4) ---//\n      hold >>>= 4;\n      bits -= 4;\n      //---//\n      len = (hold & 0x0f)/*BITS(4)*/ + 8;\n      if (state.wbits === 0) {\n        state.wbits = len;\n      }\n      else if (len > state.wbits) {\n        strm.msg = 'invalid window size';\n        state.mode = BAD;\n        break;\n      }\n      state.dmax = 1 << len;\n      //Tracev((stderr, \"inflate:   zlib header ok\\n\"));\n      strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n      state.mode = hold & 0x200 ? DICTID : TYPE;\n      //=== INITBITS();\n      hold = 0;\n      bits = 0;\n      //===//\n      break;\n    case FLAGS:\n      //=== NEEDBITS(16); */\n      while (bits < 16) {\n        if (have === 0) { break inf_leave; }\n        have--;\n        hold += input[next++] << bits;\n        bits += 8;\n      }\n      //===//\n      state.flags = hold;\n      if ((state.flags & 0xff) !== Z_DEFLATED) {\n        strm.msg = 'unknown compression method';\n        state.mode = BAD;\n        break;\n      }\n      if (state.flags & 0xe000) {\n        strm.msg = 'unknown header flags set';\n        state.mode = BAD;\n        break;\n      }\n      if (state.head) {\n        state.head.text = ((hold >> 8) & 1);\n      }\n      if (state.flags & 0x0200) {\n        //=== CRC2(state.check, hold);\n        hbuf[0] = hold & 0xff;\n        hbuf[1] = (hold >>> 8) & 0xff;\n        state.check = crc32(state.check, hbuf, 2, 0);\n        //===//\n      }\n      //=== INITBITS();\n      hold = 0;\n      bits = 0;\n      //===//\n      state.mode = TIME;\n      /* falls through */\n    case TIME:\n      //=== NEEDBITS(32); */\n      while (bits < 32) {\n        if (have === 0) { break inf_leave; }\n        have--;\n        hold += input[next++] << bits;\n        bits += 8;\n      }\n      //===//\n      if (state.head) {\n        state.head.time = hold;\n      }\n      if (state.flags & 0x0200) {\n        //=== CRC4(state.check, hold)\n        hbuf[0] = hold & 0xff;\n        hbuf[1] = (hold >>> 8) & 0xff;\n        hbuf[2] = (hold >>> 16) & 0xff;\n        hbuf[3] = (hold >>> 24) & 0xff;\n        state.check = crc32(state.check, hbuf, 4, 0);\n        //===\n      }\n      //=== INITBITS();\n      hold = 0;\n      bits = 0;\n      //===//\n      state.mode = OS;\n      /* falls through */\n    case OS:\n      //=== NEEDBITS(16); */\n      while (bits < 16) {\n        if (have === 0) { break inf_leave; }\n        have--;\n        hold += input[next++] << bits;\n        bits += 8;\n      }\n      //===//\n      if (state.head) {\n        state.head.xflags = (hold & 0xff);\n        state.head.os = (hold >> 8);\n      }\n      if (state.flags & 0x0200) {\n        //=== CRC2(state.check, hold);\n        hbuf[0] = hold & 0xff;\n        hbuf[1] = (hold >>> 8) & 0xff;\n        state.check = crc32(state.check, hbuf, 2, 0);\n        //===//\n      }\n      //=== INITBITS();\n      hold = 0;\n      bits = 0;\n      //===//\n      state.mode = EXLEN;\n      /* falls through */\n    case EXLEN:\n      if (state.flags & 0x0400) {\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.length = hold;\n        if (state.head) {\n          state.head.extra_len = hold;\n        }\n        if (state.flags & 0x0200) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32(state.check, hbuf, 2, 0);\n          //===//\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n      }\n      else if (state.head) {\n        state.head.extra = null/*Z_NULL*/;\n      }\n      state.mode = EXTRA;\n      /* falls through */\n    case EXTRA:\n      if (state.flags & 0x0400) {\n        copy = state.length;\n        if (copy > have) { copy = have; }\n        if (copy) {\n          if (state.head) {\n            len = state.head.extra_len - state.length;\n            if (!state.head.extra) {\n              // Use untyped array for more conveniend processing later\n              state.head.extra = new Array(state.head.extra_len);\n            }\n            utils.arraySet(\n              state.head.extra,\n              input,\n              next,\n              // extra field is limited to 65536 bytes\n              // - no need for additional size check\n              copy,\n              /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/\n              len\n            );\n            //zmemcpy(state.head.extra + len, next,\n            //        len + copy > state.head.extra_max ?\n            //        state.head.extra_max - len : copy);\n          }\n          if (state.flags & 0x0200) {\n            state.check = crc32(state.check, input, copy, next);\n          }\n          have -= copy;\n          next += copy;\n          state.length -= copy;\n        }\n        if (state.length) { break inf_leave; }\n      }\n      state.length = 0;\n      state.mode = NAME;\n      /* falls through */\n    case NAME:\n      if (state.flags & 0x0800) {\n        if (have === 0) { break inf_leave; }\n        copy = 0;\n        do {\n          // TODO: 2 or 1 bytes?\n          len = input[next + copy++];\n          /* use constant limit because in js we should not preallocate memory */\n          if (state.head && len &&\n              (state.length < 65536 /*state.head.name_max*/)) {\n            state.head.name += String.fromCharCode(len);\n          }\n        } while (len && copy < have);\n\n        if (state.flags & 0x0200) {\n          state.check = crc32(state.check, input, copy, next);\n        }\n        have -= copy;\n        next += copy;\n        if (len) { break inf_leave; }\n      }\n      else if (state.head) {\n        state.head.name = null;\n      }\n      state.length = 0;\n      state.mode = COMMENT;\n      /* falls through */\n    case COMMENT:\n      if (state.flags & 0x1000) {\n        if (have === 0) { break inf_leave; }\n        copy = 0;\n        do {\n          len = input[next + copy++];\n          /* use constant limit because in js we should not preallocate memory */\n          if (state.head && len &&\n              (state.length < 65536 /*state.head.comm_max*/)) {\n            state.head.comment += String.fromCharCode(len);\n          }\n        } while (len && copy < have);\n        if (state.flags & 0x0200) {\n          state.check = crc32(state.check, input, copy, next);\n        }\n        have -= copy;\n        next += copy;\n        if (len) { break inf_leave; }\n      }\n      else if (state.head) {\n        state.head.comment = null;\n      }\n      state.mode = HCRC;\n      /* falls through */\n    case HCRC:\n      if (state.flags & 0x0200) {\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (hold !== (state.check & 0xffff)) {\n          strm.msg = 'header crc mismatch';\n          state.mode = BAD;\n          break;\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n      }\n      if (state.head) {\n        state.head.hcrc = ((state.flags >> 9) & 1);\n        state.head.done = true;\n      }\n      strm.adler = state.check = 0;\n      state.mode = TYPE;\n      break;\n    case DICTID:\n      //=== NEEDBITS(32); */\n      while (bits < 32) {\n        if (have === 0) { break inf_leave; }\n        have--;\n        hold += input[next++] << bits;\n        bits += 8;\n      }\n      //===//\n      strm.adler = state.check = zswap32(hold);\n      //=== INITBITS();\n      hold = 0;\n      bits = 0;\n      //===//\n      state.mode = DICT;\n      /* falls through */\n    case DICT:\n      if (state.havedict === 0) {\n        //--- RESTORE() ---\n        strm.next_out = put;\n        strm.avail_out = left;\n        strm.next_in = next;\n        strm.avail_in = have;\n        state.hold = hold;\n        state.bits = bits;\n        //---\n        return Z_NEED_DICT;\n      }\n      strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n      state.mode = TYPE;\n      /* falls through */\n    case TYPE:\n      if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }\n      /* falls through */\n    case TYPEDO:\n      if (state.last) {\n        //--- BYTEBITS() ---//\n        hold >>>= bits & 7;\n        bits -= bits & 7;\n        //---//\n        state.mode = CHECK;\n        break;\n      }\n      //=== NEEDBITS(3); */\n      while (bits < 3) {\n        if (have === 0) { break inf_leave; }\n        have--;\n        hold += input[next++] << bits;\n        bits += 8;\n      }\n      //===//\n      state.last = (hold & 0x01)/*BITS(1)*/;\n      //--- DROPBITS(1) ---//\n      hold >>>= 1;\n      bits -= 1;\n      //---//\n\n      switch ((hold & 0x03)/*BITS(2)*/) {\n      case 0:                             /* stored block */\n        //Tracev((stderr, \"inflate:     stored block%s\\n\",\n        //        state.last ? \" (last)\" : \"\"));\n        state.mode = STORED;\n        break;\n      case 1:                             /* fixed block */\n        fixedtables(state);\n        //Tracev((stderr, \"inflate:     fixed codes block%s\\n\",\n        //        state.last ? \" (last)\" : \"\"));\n        state.mode = LEN_;             /* decode codes */\n        if (flush === Z_TREES) {\n          //--- DROPBITS(2) ---//\n          hold >>>= 2;\n          bits -= 2;\n          //---//\n          break inf_leave;\n        }\n        break;\n      case 2:                             /* dynamic block */\n        //Tracev((stderr, \"inflate:     dynamic codes block%s\\n\",\n        //        state.last ? \" (last)\" : \"\"));\n        state.mode = TABLE;\n        break;\n      case 3:\n        strm.msg = 'invalid block type';\n        state.mode = BAD;\n      }\n      //--- DROPBITS(2) ---//\n      hold >>>= 2;\n      bits -= 2;\n      //---//\n      break;\n    case STORED:\n      //--- BYTEBITS() ---// /* go to byte boundary */\n      hold >>>= bits & 7;\n      bits -= bits & 7;\n      //---//\n      //=== NEEDBITS(32); */\n      while (bits < 32) {\n        if (have === 0) { break inf_leave; }\n        have--;\n        hold += input[next++] << bits;\n        bits += 8;\n      }\n      //===//\n      if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {\n        strm.msg = 'invalid stored block lengths';\n        state.mode = BAD;\n        break;\n      }\n      state.length = hold & 0xffff;\n      //Tracev((stderr, \"inflate:       stored length %u\\n\",\n      //        state.length));\n      //=== INITBITS();\n      hold = 0;\n      bits = 0;\n      //===//\n      state.mode = COPY_;\n      if (flush === Z_TREES) { break inf_leave; }\n      /* falls through */\n    case COPY_:\n      state.mode = COPY;\n      /* falls through */\n    case COPY:\n      copy = state.length;\n      if (copy) {\n        if (copy > have) { copy = have; }\n        if (copy > left) { copy = left; }\n        if (copy === 0) { break inf_leave; }\n        //--- zmemcpy(put, next, copy); ---\n        utils.arraySet(output, input, next, copy, put);\n        //---//\n        have -= copy;\n        next += copy;\n        left -= copy;\n        put += copy;\n        state.length -= copy;\n        break;\n      }\n      //Tracev((stderr, \"inflate:       stored end\\n\"));\n      state.mode = TYPE;\n      break;\n    case TABLE:\n      //=== NEEDBITS(14); */\n      while (bits < 14) {\n        if (have === 0) { break inf_leave; }\n        have--;\n        hold += input[next++] << bits;\n        bits += 8;\n      }\n      //===//\n      state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;\n      //--- DROPBITS(5) ---//\n      hold >>>= 5;\n      bits -= 5;\n      //---//\n      state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;\n      //--- DROPBITS(5) ---//\n      hold >>>= 5;\n      bits -= 5;\n      //---//\n      state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;\n      //--- DROPBITS(4) ---//\n      hold >>>= 4;\n      bits -= 4;\n      //---//\n//#ifndef PKZIP_BUG_WORKAROUND\n      if (state.nlen > 286 || state.ndist > 30) {\n        strm.msg = 'too many length or distance symbols';\n        state.mode = BAD;\n        break;\n      }\n//#endif\n      //Tracev((stderr, \"inflate:       table sizes ok\\n\"));\n      state.have = 0;\n      state.mode = LENLENS;\n      /* falls through */\n    case LENLENS:\n      while (state.have < state.ncode) {\n        //=== NEEDBITS(3);\n        while (bits < 3) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);\n        //--- DROPBITS(3) ---//\n        hold >>>= 3;\n        bits -= 3;\n        //---//\n      }\n      while (state.have < 19) {\n        state.lens[order[state.have++]] = 0;\n      }\n      // We have separate tables & no pointers. 2 commented lines below not needed.\n      //state.next = state.codes;\n      //state.lencode = state.next;\n      // Switch to use dynamic table\n      state.lencode = state.lendyn;\n      state.lenbits = 7;\n\n      opts = { bits: state.lenbits };\n      ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);\n      state.lenbits = opts.bits;\n\n      if (ret) {\n        strm.msg = 'invalid code lengths set';\n        state.mode = BAD;\n        break;\n      }\n      //Tracev((stderr, \"inflate:       code lengths ok\\n\"));\n      state.have = 0;\n      state.mode = CODELENS;\n      /* falls through */\n    case CODELENS:\n      while (state.have < state.nlen + state.ndist) {\n        for (;;) {\n          here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if ((here_bits) <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        if (here_val < 16) {\n          //--- DROPBITS(here.bits) ---//\n          hold >>>= here_bits;\n          bits -= here_bits;\n          //---//\n          state.lens[state.have++] = here_val;\n        }\n        else {\n          if (here_val === 16) {\n            //=== NEEDBITS(here.bits + 2);\n            n = here_bits + 2;\n            while (bits < n) {\n              if (have === 0) { break inf_leave; }\n              have--;\n              hold += input[next++] << bits;\n              bits += 8;\n            }\n            //===//\n            //--- DROPBITS(here.bits) ---//\n            hold >>>= here_bits;\n            bits -= here_bits;\n            //---//\n            if (state.have === 0) {\n              strm.msg = 'invalid bit length repeat';\n              state.mode = BAD;\n              break;\n            }\n            len = state.lens[state.have - 1];\n            copy = 3 + (hold & 0x03);//BITS(2);\n            //--- DROPBITS(2) ---//\n            hold >>>= 2;\n            bits -= 2;\n            //---//\n          }\n          else if (here_val === 17) {\n            //=== NEEDBITS(here.bits + 3);\n            n = here_bits + 3;\n            while (bits < n) {\n              if (have === 0) { break inf_leave; }\n              have--;\n              hold += input[next++] << bits;\n              bits += 8;\n            }\n            //===//\n            //--- DROPBITS(here.bits) ---//\n            hold >>>= here_bits;\n            bits -= here_bits;\n            //---//\n            len = 0;\n            copy = 3 + (hold & 0x07);//BITS(3);\n            //--- DROPBITS(3) ---//\n            hold >>>= 3;\n            bits -= 3;\n            //---//\n          }\n          else {\n            //=== NEEDBITS(here.bits + 7);\n            n = here_bits + 7;\n            while (bits < n) {\n              if (have === 0) { break inf_leave; }\n              have--;\n              hold += input[next++] << bits;\n              bits += 8;\n            }\n            //===//\n            //--- DROPBITS(here.bits) ---//\n            hold >>>= here_bits;\n            bits -= here_bits;\n            //---//\n            len = 0;\n            copy = 11 + (hold & 0x7f);//BITS(7);\n            //--- DROPBITS(7) ---//\n            hold >>>= 7;\n            bits -= 7;\n            //---//\n          }\n          if (state.have + copy > state.nlen + state.ndist) {\n            strm.msg = 'invalid bit length repeat';\n            state.mode = BAD;\n            break;\n          }\n          while (copy--) {\n            state.lens[state.have++] = len;\n          }\n        }\n      }\n\n      /* handle error breaks in while */\n      if (state.mode === BAD) { break; }\n\n      /* check for end-of-block code (better have one) */\n      if (state.lens[256] === 0) {\n        strm.msg = 'invalid code -- missing end-of-block';\n        state.mode = BAD;\n        break;\n      }\n\n      /* build code tables -- note: do not change the lenbits or distbits\n         values here (9 and 6) without reading the comments in inftrees.h\n         concerning the ENOUGH constants, which depend on those values */\n      state.lenbits = 9;\n\n      opts = { bits: state.lenbits };\n      ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);\n      // We have separate tables & no pointers. 2 commented lines below not needed.\n      // state.next_index = opts.table_index;\n      state.lenbits = opts.bits;\n      // state.lencode = state.next;\n\n      if (ret) {\n        strm.msg = 'invalid literal/lengths set';\n        state.mode = BAD;\n        break;\n      }\n\n      state.distbits = 6;\n      //state.distcode.copy(state.codes);\n      // Switch to use dynamic table\n      state.distcode = state.distdyn;\n      opts = { bits: state.distbits };\n      ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);\n      // We have separate tables & no pointers. 2 commented lines below not needed.\n      // state.next_index = opts.table_index;\n      state.distbits = opts.bits;\n      // state.distcode = state.next;\n\n      if (ret) {\n        strm.msg = 'invalid distances set';\n        state.mode = BAD;\n        break;\n      }\n      //Tracev((stderr, 'inflate:       codes ok\\n'));\n      state.mode = LEN_;\n      if (flush === Z_TREES) { break inf_leave; }\n      /* falls through */\n    case LEN_:\n      state.mode = LEN;\n      /* falls through */\n    case LEN:\n      if (have >= 6 && left >= 258) {\n        //--- RESTORE() ---\n        strm.next_out = put;\n        strm.avail_out = left;\n        strm.next_in = next;\n        strm.avail_in = have;\n        state.hold = hold;\n        state.bits = bits;\n        //---\n        inflate_fast(strm, _out);\n        //--- LOAD() ---\n        put = strm.next_out;\n        output = strm.output;\n        left = strm.avail_out;\n        next = strm.next_in;\n        input = strm.input;\n        have = strm.avail_in;\n        hold = state.hold;\n        bits = state.bits;\n        //---\n\n        if (state.mode === TYPE) {\n          state.back = -1;\n        }\n        break;\n      }\n      state.back = 0;\n      for (;;) {\n        here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/\n        here_bits = here >>> 24;\n        here_op = (here >>> 16) & 0xff;\n        here_val = here & 0xffff;\n\n        if (here_bits <= bits) { break; }\n        //--- PULLBYTE() ---//\n        if (have === 0) { break inf_leave; }\n        have--;\n        hold += input[next++] << bits;\n        bits += 8;\n        //---//\n      }\n      if (here_op && (here_op & 0xf0) === 0) {\n        last_bits = here_bits;\n        last_op = here_op;\n        last_val = here_val;\n        for (;;) {\n          here = state.lencode[last_val +\n                  ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if ((last_bits + here_bits) <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        //--- DROPBITS(last.bits) ---//\n        hold >>>= last_bits;\n        bits -= last_bits;\n        //---//\n        state.back += last_bits;\n      }\n      //--- DROPBITS(here.bits) ---//\n      hold >>>= here_bits;\n      bits -= here_bits;\n      //---//\n      state.back += here_bits;\n      state.length = here_val;\n      if (here_op === 0) {\n        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n        //        \"inflate:         literal '%c'\\n\" :\n        //        \"inflate:         literal 0x%02x\\n\", here.val));\n        state.mode = LIT;\n        break;\n      }\n      if (here_op & 32) {\n        //Tracevv((stderr, \"inflate:         end of block\\n\"));\n        state.back = -1;\n        state.mode = TYPE;\n        break;\n      }\n      if (here_op & 64) {\n        strm.msg = 'invalid literal/length code';\n        state.mode = BAD;\n        break;\n      }\n      state.extra = here_op & 15;\n      state.mode = LENEXT;\n      /* falls through */\n    case LENEXT:\n      if (state.extra) {\n        //=== NEEDBITS(state.extra);\n        n = state.extra;\n        while (bits < n) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n        //--- DROPBITS(state.extra) ---//\n        hold >>>= state.extra;\n        bits -= state.extra;\n        //---//\n        state.back += state.extra;\n      }\n      //Tracevv((stderr, \"inflate:         length %u\\n\", state.length));\n      state.was = state.length;\n      state.mode = DIST;\n      /* falls through */\n    case DIST:\n      for (;;) {\n        here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/\n        here_bits = here >>> 24;\n        here_op = (here >>> 16) & 0xff;\n        here_val = here & 0xffff;\n\n        if ((here_bits) <= bits) { break; }\n        //--- PULLBYTE() ---//\n        if (have === 0) { break inf_leave; }\n        have--;\n        hold += input[next++] << bits;\n        bits += 8;\n        //---//\n      }\n      if ((here_op & 0xf0) === 0) {\n        last_bits = here_bits;\n        last_op = here_op;\n        last_val = here_val;\n        for (;;) {\n          here = state.distcode[last_val +\n                  ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if ((last_bits + here_bits) <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        //--- DROPBITS(last.bits) ---//\n        hold >>>= last_bits;\n        bits -= last_bits;\n        //---//\n        state.back += last_bits;\n      }\n      //--- DROPBITS(here.bits) ---//\n      hold >>>= here_bits;\n      bits -= here_bits;\n      //---//\n      state.back += here_bits;\n      if (here_op & 64) {\n        strm.msg = 'invalid distance code';\n        state.mode = BAD;\n        break;\n      }\n      state.offset = here_val;\n      state.extra = (here_op) & 15;\n      state.mode = DISTEXT;\n      /* falls through */\n    case DISTEXT:\n      if (state.extra) {\n        //=== NEEDBITS(state.extra);\n        n = state.extra;\n        while (bits < n) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n        //--- DROPBITS(state.extra) ---//\n        hold >>>= state.extra;\n        bits -= state.extra;\n        //---//\n        state.back += state.extra;\n      }\n//#ifdef INFLATE_STRICT\n      if (state.offset > state.dmax) {\n        strm.msg = 'invalid distance too far back';\n        state.mode = BAD;\n        break;\n      }\n//#endif\n      //Tracevv((stderr, \"inflate:         distance %u\\n\", state.offset));\n      state.mode = MATCH;\n      /* falls through */\n    case MATCH:\n      if (left === 0) { break inf_leave; }\n      copy = _out - left;\n      if (state.offset > copy) {         /* copy from window */\n        copy = state.offset - copy;\n        if (copy > state.whave) {\n          if (state.sane) {\n            strm.msg = 'invalid distance too far back';\n            state.mode = BAD;\n            break;\n          }\n// (!) This block is disabled in zlib defailts,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//          Trace((stderr, \"inflate.c too far\\n\"));\n//          copy -= state.whave;\n//          if (copy > state.length) { copy = state.length; }\n//          if (copy > left) { copy = left; }\n//          left -= copy;\n//          state.length -= copy;\n//          do {\n//            output[put++] = 0;\n//          } while (--copy);\n//          if (state.length === 0) { state.mode = LEN; }\n//          break;\n//#endif\n        }\n        if (copy > state.wnext) {\n          copy -= state.wnext;\n          from = state.wsize - copy;\n        }\n        else {\n          from = state.wnext - copy;\n        }\n        if (copy > state.length) { copy = state.length; }\n        from_source = state.window;\n      }\n      else {                              /* copy from output */\n        from_source = output;\n        from = put - state.offset;\n        copy = state.length;\n      }\n      if (copy > left) { copy = left; }\n      left -= copy;\n      state.length -= copy;\n      do {\n        output[put++] = from_source[from++];\n      } while (--copy);\n      if (state.length === 0) { state.mode = LEN; }\n      break;\n    case LIT:\n      if (left === 0) { break inf_leave; }\n      output[put++] = state.length;\n      left--;\n      state.mode = LEN;\n      break;\n    case CHECK:\n      if (state.wrap) {\n        //=== NEEDBITS(32);\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          // Use '|' insdead of '+' to make sure that result is signed\n          hold |= input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        _out -= left;\n        strm.total_out += _out;\n        state.total += _out;\n        if (_out) {\n          strm.adler = state.check =\n              /*UPDATE(state.check, put - _out, _out);*/\n              (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));\n\n        }\n        _out = left;\n        // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too\n        if ((state.flags ? hold : zswap32(hold)) !== state.check) {\n          strm.msg = 'incorrect data check';\n          state.mode = BAD;\n          break;\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        //Tracev((stderr, \"inflate:   check matches trailer\\n\"));\n      }\n      state.mode = LENGTH;\n      /* falls through */\n    case LENGTH:\n      if (state.wrap && state.flags) {\n        //=== NEEDBITS(32);\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (hold !== (state.total & 0xffffffff)) {\n          strm.msg = 'incorrect length check';\n          state.mode = BAD;\n          break;\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        //Tracev((stderr, \"inflate:   length matches trailer\\n\"));\n      }\n      state.mode = DONE;\n      /* falls through */\n    case DONE:\n      ret = Z_STREAM_END;\n      break inf_leave;\n    case BAD:\n      ret = Z_DATA_ERROR;\n      break inf_leave;\n    case MEM:\n      return Z_MEM_ERROR;\n    case SYNC:\n      /* falls through */\n    default:\n      return Z_STREAM_ERROR;\n    }\n  }\n\n  // inf_leave <- here is real place for \"goto inf_leave\", emulated via \"break inf_leave\"\n\n  /*\n     Return from inflate(), updating the total counts and the check value.\n     If there was no progress during the inflate() call, return a buffer\n     error.  Call updatewindow() to create and/or update the window state.\n     Note: a memory error from inflate() is non-recoverable.\n   */\n\n  //--- RESTORE() ---\n  strm.next_out = put;\n  strm.avail_out = left;\n  strm.next_in = next;\n  strm.avail_in = have;\n  state.hold = hold;\n  state.bits = bits;\n  //---\n\n  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&\n                      (state.mode < CHECK || flush !== Z_FINISH))) {\n    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {\n      state.mode = MEM;\n      return Z_MEM_ERROR;\n    }\n  }\n  _in -= strm.avail_in;\n  _out -= strm.avail_out;\n  strm.total_in += _in;\n  strm.total_out += _out;\n  state.total += _out;\n  if (state.wrap && _out) {\n    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/\n      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));\n  }\n  strm.data_type = state.bits + (state.last ? 64 : 0) +\n                    (state.mode === TYPE ? 128 : 0) +\n                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);\n  if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {\n    ret = Z_BUF_ERROR;\n  }\n  return ret;\n}\n\nfunction inflateEnd(strm) {\n\n  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {\n    return Z_STREAM_ERROR;\n  }\n\n  var state = strm.state;\n  if (state.window) {\n    state.window = null;\n  }\n  strm.state = null;\n  return Z_OK;\n}\n\nfunction inflateGetHeader(strm, head) {\n  var state;\n\n  /* check state */\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  state = strm.state;\n  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }\n\n  /* save header structure */\n  state.head = head;\n  head.done = false;\n  return Z_OK;\n}\n\nfunction inflateSetDictionary(strm, dictionary) {\n  var dictLength = dictionary.length;\n\n  var state;\n  var dictid;\n  var ret;\n\n  /* check state */\n  if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) { return Z_STREAM_ERROR; }\n  state = strm.state;\n\n  if (state.wrap !== 0 && state.mode !== DICT) {\n    return Z_STREAM_ERROR;\n  }\n\n  /* check for correct dictionary identifier */\n  if (state.mode === DICT) {\n    dictid = 1; /* adler32(0, null, 0)*/\n    /* dictid = adler32(dictid, dictionary, dictLength); */\n    dictid = adler32(dictid, dictionary, dictLength, 0);\n    if (dictid !== state.check) {\n      return Z_DATA_ERROR;\n    }\n  }\n  /* copy dictionary to window using updatewindow(), which will amend the\n   existing dictionary if appropriate */\n  ret = updatewindow(strm, dictionary, dictLength, dictLength);\n  if (ret) {\n    state.mode = MEM;\n    return Z_MEM_ERROR;\n  }\n  state.havedict = 1;\n  // Tracev((stderr, \"inflate:   dictionary set\\n\"));\n  return Z_OK;\n}\n\nexports.inflateReset = inflateReset;\nexports.inflateReset2 = inflateReset2;\nexports.inflateResetKeep = inflateResetKeep;\nexports.inflateInit = inflateInit;\nexports.inflateInit2 = inflateInit2;\nexports.inflate = inflate;\nexports.inflateEnd = inflateEnd;\nexports.inflateGetHeader = inflateGetHeader;\nexports.inflateSetDictionary = inflateSetDictionary;\nexports.inflateInfo = 'pako inflate (from Nodeca project)';\n\n/* Not implemented\nexports.inflateCopy = inflateCopy;\nexports.inflateGetDictionary = inflateGetDictionary;\nexports.inflateMark = inflateMark;\nexports.inflatePrime = inflatePrime;\nexports.inflateSync = inflateSync;\nexports.inflateSyncPoint = inflateSyncPoint;\nexports.inflateUndermine = inflateUndermine;\n*/\n\n\n/***/ }),\n/* 47 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// See state defs from inflate.js\nvar BAD = 30;       /* got a data error -- remain here until reset */\nvar TYPE = 12;      /* i: waiting for type bits, including last-flag bit */\n\n/*\n   Decode literal, length, and distance codes and write out the resulting\n   literal and match bytes until either not enough input or output is\n   available, an end-of-block is encountered, or a data error is encountered.\n   When large enough input and output buffers are supplied to inflate(), for\n   example, a 16K input buffer and a 64K output buffer, more than 95% of the\n   inflate execution time is spent in this routine.\n\n   Entry assumptions:\n\n        state.mode === LEN\n        strm.avail_in >= 6\n        strm.avail_out >= 258\n        start >= strm.avail_out\n        state.bits < 8\n\n   On return, state.mode is one of:\n\n        LEN -- ran out of enough output space or enough available input\n        TYPE -- reached end of block code, inflate() to interpret next block\n        BAD -- error in block data\n\n   Notes:\n\n    - The maximum input bits used by a length/distance pair is 15 bits for the\n      length code, 5 bits for the length extra, 15 bits for the distance code,\n      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.\n      Therefore if strm.avail_in >= 6, then there is enough input to avoid\n      checking for available input while decoding.\n\n    - The maximum bytes that a single length/distance pair can output is 258\n      bytes, which is the maximum length that can be coded.  inflate_fast()\n      requires strm.avail_out >= 258 for each loop to avoid checking for\n      output space.\n */\nmodule.exports = function inflate_fast(strm, start) {\n  var state;\n  var _in;                    /* local strm.input */\n  var last;                   /* have enough input while in < last */\n  var _out;                   /* local strm.output */\n  var beg;                    /* inflate()'s initial strm.output */\n  var end;                    /* while out < end, enough space available */\n//#ifdef INFLATE_STRICT\n  var dmax;                   /* maximum distance from zlib header */\n//#endif\n  var wsize;                  /* window size or zero if not using window */\n  var whave;                  /* valid bytes in the window */\n  var wnext;                  /* window write index */\n  // Use `s_window` instead `window`, avoid conflict with instrumentation tools\n  var s_window;               /* allocated sliding window, if wsize != 0 */\n  var hold;                   /* local strm.hold */\n  var bits;                   /* local strm.bits */\n  var lcode;                  /* local strm.lencode */\n  var dcode;                  /* local strm.distcode */\n  var lmask;                  /* mask for first level of length codes */\n  var dmask;                  /* mask for first level of distance codes */\n  var here;                   /* retrieved table entry */\n  var op;                     /* code bits, operation, extra bits, or */\n                              /*  window position, window bytes to copy */\n  var len;                    /* match length, unused bytes */\n  var dist;                   /* match distance */\n  var from;                   /* where to copy match from */\n  var from_source;\n\n\n  var input, output; // JS specific, because we have no pointers\n\n  /* copy state to local variables */\n  state = strm.state;\n  //here = state.here;\n  _in = strm.next_in;\n  input = strm.input;\n  last = _in + (strm.avail_in - 5);\n  _out = strm.next_out;\n  output = strm.output;\n  beg = _out - (start - strm.avail_out);\n  end = _out + (strm.avail_out - 257);\n//#ifdef INFLATE_STRICT\n  dmax = state.dmax;\n//#endif\n  wsize = state.wsize;\n  whave = state.whave;\n  wnext = state.wnext;\n  s_window = state.window;\n  hold = state.hold;\n  bits = state.bits;\n  lcode = state.lencode;\n  dcode = state.distcode;\n  lmask = (1 << state.lenbits) - 1;\n  dmask = (1 << state.distbits) - 1;\n\n\n  /* decode literals and length/distances until end-of-block or not enough\n     input data or output space */\n\n  top:\n  do {\n    if (bits < 15) {\n      hold += input[_in++] << bits;\n      bits += 8;\n      hold += input[_in++] << bits;\n      bits += 8;\n    }\n\n    here = lcode[hold & lmask];\n\n    dolen:\n    for (;;) { // Goto emulation\n      op = here >>> 24/*here.bits*/;\n      hold >>>= op;\n      bits -= op;\n      op = (here >>> 16) & 0xff/*here.op*/;\n      if (op === 0) {                          /* literal */\n        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n        //        \"inflate:         literal '%c'\\n\" :\n        //        \"inflate:         literal 0x%02x\\n\", here.val));\n        output[_out++] = here & 0xffff/*here.val*/;\n      }\n      else if (op & 16) {                     /* length base */\n        len = here & 0xffff/*here.val*/;\n        op &= 15;                           /* number of extra bits */\n        if (op) {\n          if (bits < op) {\n            hold += input[_in++] << bits;\n            bits += 8;\n          }\n          len += hold & ((1 << op) - 1);\n          hold >>>= op;\n          bits -= op;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", len));\n        if (bits < 15) {\n          hold += input[_in++] << bits;\n          bits += 8;\n          hold += input[_in++] << bits;\n          bits += 8;\n        }\n        here = dcode[hold & dmask];\n\n        dodist:\n        for (;;) { // goto emulation\n          op = here >>> 24/*here.bits*/;\n          hold >>>= op;\n          bits -= op;\n          op = (here >>> 16) & 0xff/*here.op*/;\n\n          if (op & 16) {                      /* distance base */\n            dist = here & 0xffff/*here.val*/;\n            op &= 15;                       /* number of extra bits */\n            if (bits < op) {\n              hold += input[_in++] << bits;\n              bits += 8;\n              if (bits < op) {\n                hold += input[_in++] << bits;\n                bits += 8;\n              }\n            }\n            dist += hold & ((1 << op) - 1);\n//#ifdef INFLATE_STRICT\n            if (dist > dmax) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD;\n              break top;\n            }\n//#endif\n            hold >>>= op;\n            bits -= op;\n            //Tracevv((stderr, \"inflate:         distance %u\\n\", dist));\n            op = _out - beg;                /* max distance in output */\n            if (dist > op) {                /* see if copy from window */\n              op = dist - op;               /* distance back in window */\n              if (op > whave) {\n                if (state.sane) {\n                  strm.msg = 'invalid distance too far back';\n                  state.mode = BAD;\n                  break top;\n                }\n\n// (!) This block is disabled in zlib defailts,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//                if (len <= op - whave) {\n//                  do {\n//                    output[_out++] = 0;\n//                  } while (--len);\n//                  continue top;\n//                }\n//                len -= op - whave;\n//                do {\n//                  output[_out++] = 0;\n//                } while (--op > whave);\n//                if (op === 0) {\n//                  from = _out - dist;\n//                  do {\n//                    output[_out++] = output[from++];\n//                  } while (--len);\n//                  continue top;\n//                }\n//#endif\n              }\n              from = 0; // window index\n              from_source = s_window;\n              if (wnext === 0) {           /* very common case */\n                from += wsize - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              else if (wnext < op) {      /* wrap around window */\n                from += wsize + wnext - op;\n                op -= wnext;\n                if (op < len) {         /* some from end of window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = 0;\n                  if (wnext < len) {  /* some from start of window */\n                    op = wnext;\n                    len -= op;\n                    do {\n                      output[_out++] = s_window[from++];\n                    } while (--op);\n                    from = _out - dist;      /* rest from output */\n                    from_source = output;\n                  }\n                }\n              }\n              else {                      /* contiguous in window */\n                from += wnext - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              while (len > 2) {\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                len -= 3;\n              }\n              if (len) {\n                output[_out++] = from_source[from++];\n                if (len > 1) {\n                  output[_out++] = from_source[from++];\n                }\n              }\n            }\n            else {\n              from = _out - dist;          /* copy direct from output */\n              do {                        /* minimum length is three */\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                len -= 3;\n              } while (len > 2);\n              if (len) {\n                output[_out++] = output[from++];\n                if (len > 1) {\n                  output[_out++] = output[from++];\n                }\n              }\n            }\n          }\n          else if ((op & 64) === 0) {          /* 2nd level distance code */\n            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n            continue dodist;\n          }\n          else {\n            strm.msg = 'invalid distance code';\n            state.mode = BAD;\n            break top;\n          }\n\n          break; // need to emulate goto via \"continue\"\n        }\n      }\n      else if ((op & 64) === 0) {              /* 2nd level length code */\n        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n        continue dolen;\n      }\n      else if (op & 32) {                     /* end-of-block */\n        //Tracevv((stderr, \"inflate:         end of block\\n\"));\n        state.mode = TYPE;\n        break top;\n      }\n      else {\n        strm.msg = 'invalid literal/length code';\n        state.mode = BAD;\n        break top;\n      }\n\n      break; // need to emulate goto via \"continue\"\n    }\n  } while (_in < last && _out < end);\n\n  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */\n  len = bits >> 3;\n  _in -= len;\n  bits -= len << 3;\n  hold &= (1 << bits) - 1;\n\n  /* update state and return */\n  strm.next_in = _in;\n  strm.next_out = _out;\n  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));\n  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));\n  state.hold = hold;\n  state.bits = bits;\n  return;\n};\n\n\n/***/ }),\n/* 48 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar utils = __webpack_require__(3);\n\nvar MAXBITS = 15;\nvar ENOUGH_LENS = 852;\nvar ENOUGH_DISTS = 592;\n//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);\n\nvar CODES = 0;\nvar LENS = 1;\nvar DISTS = 2;\n\nvar lbase = [ /* Length codes 257..285 base */\n  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,\n  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0\n];\n\nvar lext = [ /* Length codes 257..285 extra */\n  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,\n  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78\n];\n\nvar dbase = [ /* Distance codes 0..29 base */\n  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,\n  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,\n  8193, 12289, 16385, 24577, 0, 0\n];\n\nvar dext = [ /* Distance codes 0..29 extra */\n  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,\n  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,\n  28, 28, 29, 29, 64, 64\n];\n\nmodule.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts)\n{\n  var bits = opts.bits;\n      //here = opts.here; /* table entry for duplication */\n\n  var len = 0;               /* a code's length in bits */\n  var sym = 0;               /* index of code symbols */\n  var min = 0, max = 0;          /* minimum and maximum code lengths */\n  var root = 0;              /* number of index bits for root table */\n  var curr = 0;              /* number of index bits for current table */\n  var drop = 0;              /* code bits to drop for sub-table */\n  var left = 0;                   /* number of prefix codes available */\n  var used = 0;              /* code entries in table used */\n  var huff = 0;              /* Huffman code */\n  var incr;              /* for incrementing code, index */\n  var fill;              /* index for replicating entries */\n  var low;               /* low bits for current root entry */\n  var mask;              /* mask for low root bits */\n  var next;             /* next available space in table */\n  var base = null;     /* base value table to use */\n  var base_index = 0;\n//  var shoextra;    /* extra bits table to use */\n  var end;                    /* use base and extra for symbol > end */\n  var count = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */\n  var offs = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */\n  var extra = null;\n  var extra_index = 0;\n\n  var here_bits, here_op, here_val;\n\n  /*\n   Process a set of code lengths to create a canonical Huffman code.  The\n   code lengths are lens[0..codes-1].  Each length corresponds to the\n   symbols 0..codes-1.  The Huffman code is generated by first sorting the\n   symbols by length from short to long, and retaining the symbol order\n   for codes with equal lengths.  Then the code starts with all zero bits\n   for the first code of the shortest length, and the codes are integer\n   increments for the same length, and zeros are appended as the length\n   increases.  For the deflate format, these bits are stored backwards\n   from their more natural integer increment ordering, and so when the\n   decoding tables are built in the large loop below, the integer codes\n   are incremented backwards.\n\n   This routine assumes, but does not check, that all of the entries in\n   lens[] are in the range 0..MAXBITS.  The caller must assure this.\n   1..MAXBITS is interpreted as that code length.  zero means that that\n   symbol does not occur in this code.\n\n   The codes are sorted by computing a count of codes for each length,\n   creating from that a table of starting indices for each length in the\n   sorted table, and then entering the symbols in order in the sorted\n   table.  The sorted table is work[], with that space being provided by\n   the caller.\n\n   The length counts are used for other purposes as well, i.e. finding\n   the minimum and maximum length codes, determining if there are any\n   codes at all, checking for a valid set of lengths, and looking ahead\n   at length counts to determine sub-table sizes when building the\n   decoding tables.\n   */\n\n  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */\n  for (len = 0; len <= MAXBITS; len++) {\n    count[len] = 0;\n  }\n  for (sym = 0; sym < codes; sym++) {\n    count[lens[lens_index + sym]]++;\n  }\n\n  /* bound code lengths, force root to be within code lengths */\n  root = bits;\n  for (max = MAXBITS; max >= 1; max--) {\n    if (count[max] !== 0) { break; }\n  }\n  if (root > max) {\n    root = max;\n  }\n  if (max === 0) {                     /* no symbols to code at all */\n    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */\n    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;\n    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n\n    //table.op[opts.table_index] = 64;\n    //table.bits[opts.table_index] = 1;\n    //table.val[opts.table_index++] = 0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n    opts.bits = 1;\n    return 0;     /* no symbols, but wait for decoding to report error */\n  }\n  for (min = 1; min < max; min++) {\n    if (count[min] !== 0) { break; }\n  }\n  if (root < min) {\n    root = min;\n  }\n\n  /* check for an over-subscribed or incomplete set of lengths */\n  left = 1;\n  for (len = 1; len <= MAXBITS; len++) {\n    left <<= 1;\n    left -= count[len];\n    if (left < 0) {\n      return -1;\n    }        /* over-subscribed */\n  }\n  if (left > 0 && (type === CODES || max !== 1)) {\n    return -1;                      /* incomplete set */\n  }\n\n  /* generate offsets into symbol table for each length for sorting */\n  offs[1] = 0;\n  for (len = 1; len < MAXBITS; len++) {\n    offs[len + 1] = offs[len] + count[len];\n  }\n\n  /* sort symbols by length, by symbol order within each length */\n  for (sym = 0; sym < codes; sym++) {\n    if (lens[lens_index + sym] !== 0) {\n      work[offs[lens[lens_index + sym]]++] = sym;\n    }\n  }\n\n  /*\n   Create and fill in decoding tables.  In this loop, the table being\n   filled is at next and has curr index bits.  The code being used is huff\n   with length len.  That code is converted to an index by dropping drop\n   bits off of the bottom.  For codes where len is less than drop + curr,\n   those top drop + curr - len bits are incremented through all values to\n   fill the table with replicated entries.\n\n   root is the number of index bits for the root table.  When len exceeds\n   root, sub-tables are created pointed to by the root entry with an index\n   of the low root bits of huff.  This is saved in low to check for when a\n   new sub-table should be started.  drop is zero when the root table is\n   being filled, and drop is root when sub-tables are being filled.\n\n   When a new sub-table is needed, it is necessary to look ahead in the\n   code lengths to determine what size sub-table is needed.  The length\n   counts are used for this, and so count[] is decremented as codes are\n   entered in the tables.\n\n   used keeps track of how many table entries have been allocated from the\n   provided *table space.  It is checked for LENS and DIST tables against\n   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in\n   the initial root table size constants.  See the comments in inftrees.h\n   for more information.\n\n   sym increments through all symbols, and the loop terminates when\n   all codes of length max, i.e. all codes, have been processed.  This\n   routine permits incomplete codes, so another loop after this one fills\n   in the rest of the decoding tables with invalid code markers.\n   */\n\n  /* set up for code type */\n  // poor man optimization - use if-else instead of switch,\n  // to avoid deopts in old v8\n  if (type === CODES) {\n    base = extra = work;    /* dummy value--not used */\n    end = 19;\n\n  } else if (type === LENS) {\n    base = lbase;\n    base_index -= 257;\n    extra = lext;\n    extra_index -= 257;\n    end = 256;\n\n  } else {                    /* DISTS */\n    base = dbase;\n    extra = dext;\n    end = -1;\n  }\n\n  /* initialize opts for loop */\n  huff = 0;                   /* starting code */\n  sym = 0;                    /* starting code symbol */\n  len = min;                  /* starting code length */\n  next = table_index;              /* current table to fill in */\n  curr = root;                /* current table index bits */\n  drop = 0;                   /* current bits to drop from code for index */\n  low = -1;                   /* trigger new sub-table when len > root */\n  used = 1 << root;          /* use root table entries */\n  mask = used - 1;            /* mask for comparing low */\n\n  /* check available table space */\n  if ((type === LENS && used > ENOUGH_LENS) ||\n    (type === DISTS && used > ENOUGH_DISTS)) {\n    return 1;\n  }\n\n  /* process all codes and make table entries */\n  for (;;) {\n    /* create table entry */\n    here_bits = len - drop;\n    if (work[sym] < end) {\n      here_op = 0;\n      here_val = work[sym];\n    }\n    else if (work[sym] > end) {\n      here_op = extra[extra_index + work[sym]];\n      here_val = base[base_index + work[sym]];\n    }\n    else {\n      here_op = 32 + 64;         /* end of block */\n      here_val = 0;\n    }\n\n    /* replicate for those indices with low len bits equal to huff */\n    incr = 1 << (len - drop);\n    fill = 1 << curr;\n    min = fill;                 /* save offset to next table */\n    do {\n      fill -= incr;\n      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;\n    } while (fill !== 0);\n\n    /* backwards increment the len-bit code huff */\n    incr = 1 << (len - 1);\n    while (huff & incr) {\n      incr >>= 1;\n    }\n    if (incr !== 0) {\n      huff &= incr - 1;\n      huff += incr;\n    } else {\n      huff = 0;\n    }\n\n    /* go to next symbol, update count, len */\n    sym++;\n    if (--count[len] === 0) {\n      if (len === max) { break; }\n      len = lens[lens_index + work[sym]];\n    }\n\n    /* create new sub-table if needed */\n    if (len > root && (huff & mask) !== low) {\n      /* if first time, transition to sub-tables */\n      if (drop === 0) {\n        drop = root;\n      }\n\n      /* increment past last table */\n      next += min;            /* here min is 1 << curr */\n\n      /* determine length of next table */\n      curr = len - drop;\n      left = 1 << curr;\n      while (curr + drop < max) {\n        left -= count[curr + drop];\n        if (left <= 0) { break; }\n        curr++;\n        left <<= 1;\n      }\n\n      /* check for enough space */\n      used += 1 << curr;\n      if ((type === LENS && used > ENOUGH_LENS) ||\n        (type === DISTS && used > ENOUGH_DISTS)) {\n        return 1;\n      }\n\n      /* point entry in root table to sub-table */\n      low = huff & mask;\n      /*table.op[low] = curr;\n      table.bits[low] = root;\n      table.val[low] = next - opts.table_index;*/\n      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;\n    }\n  }\n\n  /* fill in remaining table entry if code is incomplete (guaranteed to have\n   at most one remaining entry, since if the code is incomplete, the\n   maximum code length that was allowed to get this far is one bit) */\n  if (huff !== 0) {\n    //table.op[next + huff] = 64;            /* invalid code marker */\n    //table.bits[next + huff] = len - drop;\n    //table.val[next + huff] = 0;\n    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;\n  }\n\n  /* set return parameters */\n  //opts.table_index += used;\n  opts.bits = root;\n  return 0;\n};\n\n\n/***/ }),\n/* 49 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction GZheader() {\n  /* true if compressed data believed to be text */\n  this.text       = 0;\n  /* modification time */\n  this.time       = 0;\n  /* extra flags (not used when writing a gzip file) */\n  this.xflags     = 0;\n  /* operating system */\n  this.os         = 0;\n  /* pointer to extra field or Z_NULL if none */\n  this.extra      = null;\n  /* extra field length (valid if extra != Z_NULL) */\n  this.extra_len  = 0; // Actually, we don't need it in JS,\n                       // but leave for few code modifications\n\n  //\n  // Setup limits is not necessary because in js we should not preallocate memory\n  // for inflate use constant limit in 65536 bytes\n  //\n\n  /* space at extra (only when reading header) */\n  // this.extra_max  = 0;\n  /* pointer to zero-terminated file name or Z_NULL */\n  this.name       = '';\n  /* space at name (only when reading header) */\n  // this.name_max   = 0;\n  /* pointer to zero-terminated comment or Z_NULL */\n  this.comment    = '';\n  /* space at comment (only when reading header) */\n  // this.comm_max   = 0;\n  /* true if there was or will be a header crc */\n  this.hcrc       = 0;\n  /* true when done reading gzip header (not used when writing a gzip file) */\n  this.done       = false;\n}\n\nmodule.exports = GZheader;\n\n\n/***/ }),\n/* 50 */\n/***/ (function(module, exports) {\n\nmodule.exports = \"attribute vec4 position;\\r\\nattribute float z_index;\\r\\nattribute float pal_shift;\\r\\nattribute vec2 texcoord;\\r\\n\\r\\nuniform mat4 matrix;\\r\\n\\r\\nvarying vec2 v_uv;\\r\\nvarying float v_pal;\\r\\n\\r\\nconst float HALF_PX = 0.001953125; \\r\\nconst float PX = 0.00390625;\\r\\n\\r\\nvoid main() {\\r\\n    v_uv = texcoord * PX + HALF_PX;// vec2(PX * texcoord.x + HALF_PX, PX * texcoord.y + HALF_PX);//(texcoord - tweak2);\\r\\n    v_pal = pal_shift;\\r\\n    vec4 res = matrix * vec4(position.xy, z_index, 1.0);\\r\\n    //res.z =  -(z_index / 128.0) + 1.0;\\r\\n    //res.w = res.w * res.z;\\r\\n    gl_Position = res;\\r\\n}\"\n\n/***/ }),\n/* 51 */\n/***/ (function(module, exports) {\n\nmodule.exports = \"precision mediump float;\\r\\n\\r\\nuniform sampler2D texture;\\r\\nuniform sampler2D palette;\\r\\nuniform float pal_offset;\\r\\n\\r\\nconst float HALF_PX = 0.001953125; \\r\\nconst float PX = 0.00390625;\\r\\n\\r\\nvarying vec2 v_uv;\\r\\nvarying float v_pal;\\r\\n\\r\\nvoid main() {\\r\\n    // get palette index.\\r\\n    float lookup = texture2D(texture, v_uv).r;\\r\\n    \\r\\n    // create uv from palette index and palette offset\\r\\n    vec2 palUv = vec2(lookup+v_pal,pal_offset);\\r\\n    \\r\\n    //lookup color and discard if alpha is present.\\r\\n    vec4 res = texture2D(palette, palUv);\\r\\n    if(res.a < 1.0)\\r\\n         discard;\\r\\n    else\\r\\n        gl_FragColor = res;\\r\\n}\\r\\n\"\n\n/***/ }),\n/* 52 */\n/***/ (function(module, exports) {\n\nmodule.exports = \"PNG\\r\\n\\u001a\\n\\u0000\\u0000\\u0000\\rIHDR\\u0000\\u0000\\u0001\\u0000\\u0000\\u0000\\u0001\\u0000\\b\\u0003\\u0000\\u0000\\u0000k¬XT\\u0000\\u0000\\u0000\\tpHYs\\u0000\\u0000\\u000b\\u0013\\u0000\\u0000\\u000b\\u0013\\u0001\\u0000\\u0018\\u0000\\u0000\\nOiCCPPhotoshop ICC profile\\u0000\\u0000xÚSgTSé\\u0016=÷ÞôBKKoR\\u0015\\b RB\\u0014&*!\\t\\u0010J!¡Ù\\u0015QÁ\\u0011EE\\u0004\\u001bÈ \\u0003\\u0015Q,\\f\\nØ\\u0007ä!¢£Êûá{£kÖ¼÷æÍþµ×>ç¬ó³Ï\\u0007À\\b\\fH3Q5\\f©B\\u001e\\u0011àÇÄÆáä.@\\n$p\\u0000\\u0010\\b³d!sý#\\u0001\\u0000ø~<<+\\\"À\\u0007¾\\u0000\\u0001xÓ\\u000b\\b\\u0000ÀMÀ0\\u001cÿ\\u000fêB\\\\\\u0001\\u0001Àt8K\\b\\u0014\\u0000@zB¦\\u0000@F\\u0001&S\\u0000 \\u0004\\u0000`Ëcbã\\u0000P-\\u0000`'æÓ\\u0000ø{\\u0001\\u0000[!\\u0015\\u0001 \\u0000 \\u0013eD\\u0000h;\\u0000¬ÏVE\\u0000X0\\u0000\\u0014fKÄ9\\u0000Ø-\\u00000IWfH\\u0000°·\\u0000ÀÎ\\u0010\\u000b²\\u0000\\b\\f\\u00000Q)\\u0000\\u0004{\\u0000`È##x\\u0000\\u0000\\u0014FòW<ñ+®\\u0010ç*\\u0000\\u0000x²<¹$9E[\\b-q\\u0007WW.\\u001e(ÎI\\u0017+\\u00146a\\u0002a@.Ây\\u001924\\u000fàóÌ\\u0000\\u0000 \\u0015\\u0011àóýxÎ\\u000e®ÎÎ6¶\\u000e_-ê¿\\u0006ÿ\\\"bbãþåÏ«p@\\u0000\\u0000át~Ñþ,/³\\u001a;\\u0006mþ¢%î\\u0004h^\\u000b u÷f²\\u000f@µ\\u0000 éÚWópø~<<E¡¹ÙÙåääØJÄB[aÊW}þgÂ_ÀWýlù~<ü÷õà¾â$2]G\\u0004øàÂÌôL¥\\u001cÏ\\tbÜæGü·\\u000bÿü\\u001dÓ\\\"ÄIb¹X*\\u0014ãQ\\u0012qDó2¥\\\"B)Å%Òÿdâß,û\\u0003>ß5\\u0000°j>\\u0001{-¨]c\\u0003öK'\\u0010XtÀâ÷\\u0000\\u0000ò»oÁÔ(\\b\\u0003háÏwÿï?ýG %\\u0000fIq\\u0000\\u0000^D$.TÊ³?Ç\\b\\u0000\\u0000D *°A\\u001bôÁ\\u0018,À\\u0006\\u001cÁ\\u0005ÜÁ\\u000bü`6B$ÄÂB\\u0010B\\nd\\u001cr`)¬B(Í°\\u001d*`/Ô@\\u001d4ÀQhp\\u000e.ÂU¸\\u000e=p\\u000fúa\\bÁ(¼\\t\\u0004AÈ\\b\\u0013a!Ú\\u0001bX#\\b\\u0017ø!ÁH\\u0004\\u0012$ É\\u0014Q\\\"K5H1RT UH\\u001dò=r\\u00029\\\\Fº;È\\u00002ü¼G1²Q=Ô\\fµC¹¨7\\u001aF¢\\u000bÐdt1\\u0016 Ðr´\\u001a=6¡çÐ«h\\u000fÚ>CÇ0Àè\\u0018\\u00073Äl0.ÆÃB±8,\\tcË±\\\"¬\\f«Æ\\u001a°V¬\\u0003»õcÏ±w\\u0004\\u0012EÀ\\t6\\u0004wB a\\u001eAHXLXNØH¨ \\u001c$4\\u0011Ú\\t7\\t\\u0003QÂ'\\\"¨K´&º\\u0011ùÄ\\u0018b21XH,#Ö\\u0012\\u0013/\\u0010{CÄ7$\\u0012C2'¹\\u0002I±¤TÒ\\u0012ÒFÒnR#é,©4H\\u001a#ÉÚdk²\\u00079, +ÈääÃä3ä\\u001bä!ò[\\nb@q¤øSâ(RÊjJ\\u0019å\\u0010å4å\\u0006e2AU£RÝ¨¡T\\u00115ZB­¡¶R¯Q¨\\u00134u9Í\\u0016IK¥­¢Ó\\u001ah\\u0017h÷i¯ètº\\u0011Ý\\u001eNÐWÒËéGèè\\u0003ôw\\f\\r\\u0015Çg(\\u0019\\u0018\\u0007\\u0018g\\u0019w\\u0018¯L¦\\u0019Ó\\u0019ÇT071ëç\\u000foUX*¶*|\\u0015Ê\\nJ&\\u001b*/T©ª¦ªÞª\\u000bUóUËT©^S}®FU3Sã©\\tÔ«UªPëS\\u001bSg©;¨ªg¨oT?¤~Yý\\u0006YÃLÃOC¤Q ±_ã¼Æ \\u000bc\\u0019³x,!k\\r«u5Ä&±ÍÙ|v*»ý\\u001d»=ª©¡9C3J3W³Róf?\\u0007ãqøtN\\tç(§ó~Þ\\u0014ï)â)\\u001b¦4L¹1e\\\\kªX«H«Q«Gë½6®í§¦½E»Yû\\u000eAÇJ'\\\\'GgÎ\\u0005çSÙSÝ§\\n§\\u0016M=:õ®.ªk¥\\u001b¡»Dw¿n§î¾^Lo§Þy½çú\\u001c}/ýTýmú§õG\\fX\\u0006³\\f$\\u0006Û\\fÎ\\u0018<Å5qo<\\u001d/ÇÛñQC]Ã@C¥aaá¹Ñ<£ÕFF\\u000fiÆ\\\\ã$ãmÆmÆ£&\\u0006&!&KMêMîRM¹¦)¦;L;LÇÍÌÍ¢ÍÖ5=1×2çç×ß·`ZxZ,¶¨¶¸eI²äZ¦Yî¶¼nZ9Y¥XUZ]³F­­%Ö»­»§\\u0011§¹NN«ÖgÃ°ñ¶É¶©·\\u0019°åØ\\u0006Û®¶m¶}agb\\u0017g·Å®Ãî½}º}ý=\\u0007\\rÙ\\u000e«\\u001dZ\\u001d~s´r\\u0014:V:ÞÎî?}Åôé/gXÏ\\u0010ÏØ3ã¶\\u0013Ë)ÄiSÓGg\\u0017g¹sóKË.>.\\u001bÆÝÈ½äJtõq]ázÒõ³Âí¨Û¯î6îiîÜÌ4)Y3sÐÃÈCàQåÑ?\\u000b0kß¬~OCOgµç#/c/W­×°·¥wª÷aï\\u0017>ö>rã>ã<7Þ2ÞY_Ì7À·È·ËOÃo_ßC#ÿdÿzÿÑ\\u0000§%\\u0001g\\u0003A[\\u0002ûøz|!¿?:Ûeö²ÙíA ¹A\\u0015A­åÁ­!hÈì­!÷çÎÎi\\u000eP~èÖÐ\\u0007aæaÃ~\\f'W?pX\\u001aÑ15wÑÜCsßDúDDÞg1O9¯-J5*>ª.j<Ú7º4º?Æ.fYÌÕXXIlK\\u001c9.*®6nl¾ßüíóââ\\u000bã{\\u0017/È]py¡ÎÂô§\\u0016©.\\u0012,:@LN8ðA\\u0010*¨\\u0016%ò\\u0013w%\\nyÂ\\u001dÂg\\\"/Ñ6ÑØC\\\\*\\u001eNòH*Mzì¼5y$Å3¥,å¹'©¼L\\rLÝ:\\u0016v m2=:½1qBª!M¶gêgæfvË¬e²þÅn·/\\u001e\\u0007Ék³¬\\u0005Y-\\n¶B¦èTZ(×*\\u0007²geWf¿ÍÊ9«+ÍíÌ³ÊÛ7ïÿí\\u0012Â\\u0012á¶¥KW-\\u001dXæ½¬j9²<qyÛ\\nã\\u0015\\u0005+V\\u0006¬<¸¶*mÕO«íW®~½&zMk^ÁÊÁµ\\u0001kë\\u000bU\\nå}ëÜ×í]OX/Yßµaú\\u001b>\\u0015®\\u0014Û\\u0017\\u0015Ø(Üxå\\u001boÊ¿Ü´©«Ä¹dÏfÒféæÞ-[\\u000eªæ\\u000en\\rÙÚ´\\rßV´íõöEÛ/Í(Û»¶C¹£¿<¸¼e§ÉÎÍ;?T¤TôTúT6îÒÝµa×ønÑî\\u001b{¼ö4ìÕÛ[¼÷ý>É¾ÛU\\u0001UMÕfÕeûIû³÷?®ªéøûm]­NmqíÇ\\u0003Ò\\u0003ý\\u0007#\\u000e¶×¹ÔÕ\\u001dÒ=TRÖ+ëG\\u000eÇ\\u001f¾þïw-\\r6\\rUÆâ#pDyäé÷\\tß÷\\u001e\\r:Úv{¬á\\u0007Ó\\u001fv\\u001dg\\u001d/jBòFSû[b[ºOÌ>ÑÖêÞzüGÛ\\u001f\\u000f4<YyJóTÉiÚéÓgòÏ}~.ùÜ`Û¢¶{çcÎßj\\u000foïº\\u0010táÒEÿç;¼;Î\\\\ò¸tò²Ûå\\u0013W¸W¯:_mêtê<þÓOÇ»»®¹\\\\k¹îz½µ{f÷é\\u001b7ÎÝô½yñ\\u0016ÿÖÕ9=Ý½ózo÷Å÷õß\\u0016Ý~r'ýÎË»Ùw'î­¼O¼_ô@íAÙCÝÕ?[þÜØïÜjÀw óÑÜG÷\\u0006Ïþõ\\u000fC\\u0005Ë\\rë8>99â?rýéü§CÏdÏ&\\u0017þ¢þË®\\u0017\\u0016/~øÕë×ÎÑÑ¡ò¿m|¥ýêÀë\\u0019¯ÛÆÂÆ\\u001e¾Éx31^ôVûíÁwÜw\\u001dï£ß\\u000fOä| (ÿhù±õSÐ§û\\u0019ÿ\\u0004\\u0003óüc3-Û\\u0000\\u0000\\u0000 cHRM\\u0000\\u0000z%\\u0000\\u0000\\u0000\\u0000ùÿ\\u0000\\u0000é\\u0000\\u0000u0\\u0000\\u0000ê`\\u0000\\u0000:\\u0000\\u0000\\u0017o_ÅF\\u0000\\u0000\\u0003\\u0000PLTE-O-$-È`ø3\\u0000ÌGhÙ5ÁÙP°x©á¹ùáhñ±GèÀ¨øxPÿÿÿ\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u00001Öä}\\u0000\\u0000\\u0000\\rtRNSÿÿÿÿÿÿÿÿÿÿÿÿ\\u0000=è\\\"\\u0000\\u0000\\u0001ÆIDATxÚì×±n@\\u0010\\u0004Ð#Füÿ\\u0012LÌ)ioÏ[$¿j{ÆÃwäûÎ6q«¥M<Ö­MÜ÷¥Mü¦×ø:æ6QâZ7¼\\u0002ä>ÖÜkî{î¥{áxä~¿\\u0018ÀôæÃÙ½§ÜrßÜÎ«>s/öþ\\u0018û\\u000fgçÑ\\u0001Ô-÷uÉ}ï\\u0000J÷â#,À\\u0002,À\\u0002,À\\u0002,À\\u0002,À\\u0002,à\\u000b8£M\\u0012mbÛ¢M,K´Z£MÌs´¹Ü½ü\\u001dþ´\\u001b\\u0003\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000x{Ó§=x·\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000à\\u0000ÖÙb\\u0007\\u0010va\\u0000\\u0000\\u0000\\u0000IEND®B`\"\n\n/***/ }),\n/* 53 */\n/***/ (function(module, exports) {\n\nmodule.exports = \"PNG\\r\\n\\u001a\\n\\u0000\\u0000\\u0000\\rIHDR\\u0000\\u0000\\u0001\\u0000\\u0000\\u0000\\u0001\\u0000\\b\\u0003\\u0000\\u0000\\u0000k¬XT\\u0000\\u0000\\u0000\\tpHYs\\u0000\\u0000\\nï\\u0000\\u0000\\nï\\u0001}vH\\u0000\\u0000\\nOiCCPPhotoshop ICC profile\\u0000\\u0000xÚSgTSé\\u0016=÷ÞôBKKoR\\u0015\\b RB\\u0014&*!\\t\\u0010J!¡Ù\\u0015QÁ\\u0011EE\\u0004\\u001bÈ \\u0003\\u0015Q,\\f\\nØ\\u0007ä!¢£Êûá{£kÖ¼÷æÍþµ×>ç¬ó³Ï\\u0007À\\b\\fH3Q5\\f©B\\u001e\\u0011àÇÄÆáä.@\\n$p\\u0000\\u0010\\b³d!sý#\\u0001\\u0000ø~<<+\\\"À\\u0007¾\\u0000\\u0001xÓ\\u000b\\b\\u0000ÀMÀ0\\u001cÿ\\u000fêB\\\\\\u0001\\u0001Àt8K\\b\\u0014\\u0000@zB¦\\u0000@F\\u0001&S\\u0000 \\u0004\\u0000`Ëcbã\\u0000P-\\u0000`'æÓ\\u0000ø{\\u0001\\u0000[!\\u0015\\u0001 \\u0000 \\u0013eD\\u0000h;\\u0000¬ÏVE\\u0000X0\\u0000\\u0014fKÄ9\\u0000Ø-\\u00000IWfH\\u0000°·\\u0000ÀÎ\\u0010\\u000b²\\u0000\\b\\f\\u00000Q)\\u0000\\u0004{\\u0000`È##x\\u0000\\u0000\\u0014FòW<ñ+®\\u0010ç*\\u0000\\u0000x²<¹$9E[\\b-q\\u0007WW.\\u001e(ÎI\\u0017+\\u00146a\\u0002a@.Ây\\u001924\\u000fàóÌ\\u0000\\u0000 \\u0015\\u0011àóýxÎ\\u000e®ÎÎ6¶\\u000e_-ê¿\\u0006ÿ\\\"bbãþåÏ«p@\\u0000\\u0000át~Ñþ,/³\\u001a;\\u0006mþ¢%î\\u0004h^\\u000b u÷f²\\u000f@µ\\u0000 éÚWópø~<<E¡¹ÙÙåääØJÄB[aÊW}þgÂ_ÀWýlù~<ü÷õà¾â$2]G\\u0004øàÂÌôL¥\\u001cÏ\\tbÜæGü·\\u000bÿü\\u001dÓ\\\"ÄIb¹X*\\u0014ãQ\\u0012qDó2¥\\\"B)Å%Òÿdâß,û\\u0003>ß5\\u0000°j>\\u0001{-¨]c\\u0003öK'\\u0010XtÀâ÷\\u0000\\u0000ò»oÁÔ(\\b\\u0003háÏwÿï?ýG %\\u0000fIq\\u0000\\u0000^D$.TÊ³?Ç\\b\\u0000\\u0000D *°A\\u001bôÁ\\u0018,À\\u0006\\u001cÁ\\u0005ÜÁ\\u000bü`6B$ÄÂB\\u0010B\\nd\\u001cr`)¬B(Í°\\u001d*`/Ô@\\u001d4ÀQhp\\u000e.ÂU¸\\u000e=p\\u000fúa\\bÁ(¼\\t\\u0004AÈ\\b\\u0013a!Ú\\u0001bX#\\b\\u0017ø!ÁH\\u0004\\u0012$ É\\u0014Q\\\"K5H1RT UH\\u001dò=r\\u00029\\\\Fº;È\\u00002ü¼G1²Q=Ô\\fµC¹¨7\\u001aF¢\\u000bÐdt1\\u0016 Ðr´\\u001a=6¡çÐ«h\\u000fÚ>CÇ0Àè\\u0018\\u00073Äl0.ÆÃB±8,\\tcË±\\\"¬\\f«Æ\\u001a°V¬\\u0003»õcÏ±w\\u0004\\u0012EÀ\\t6\\u0004wB a\\u001eAHXLXNØH¨ \\u001c$4\\u0011Ú\\t7\\t\\u0003QÂ'\\\"¨K´&º\\u0011ùÄ\\u0018b21XH,#Ö\\u0012\\u0013/\\u0010{CÄ7$\\u0012C2'¹\\u0002I±¤TÒ\\u0012ÒFÒnR#é,©4H\\u001a#ÉÚdk²\\u00079, +ÈääÃä3ä\\u001bä!ò[\\nb@q¤øSâ(RÊjJ\\u0019å\\u0010å4å\\u0006e2AU£RÝ¨¡T\\u00115ZB­¡¶R¯Q¨\\u00134u9Í\\u0016IK¥­¢Ó\\u001ah\\u0017h÷i¯ètº\\u0011Ý\\u001eNÐWÒËéGèè\\u0003ôw\\f\\r\\u0015Çg(\\u0019\\u0018\\u0007\\u0018g\\u0019w\\u0018¯L¦\\u0019Ó\\u0019ÇT071ëç\\u000foUX*¶*|\\u0015Ê\\nJ&\\u001b*/T©ª¦ªÞª\\u000bUóUËT©^S}®FU3Sã©\\tÔ«UªPëS\\u001bSg©;¨ªg¨oT?¤~Yý\\u0006YÃLÃOC¤Q ±_ã¼Æ \\u000bc\\u0019³x,!k\\r«u5Ä&±ÍÙ|v*»ý\\u001d»=ª©¡9C3J3W³Róf?\\u0007ãqøtN\\tç(§ó~Þ\\u0014ï)â)\\u001b¦4L¹1e\\\\kªX«H«Q«Gë½6®í§¦½E»Yû\\u000eAÇJ'\\\\'GgÎ\\u0005çSÙSÝ§\\n§\\u0016M=:õ®.ªk¥\\u001b¡»Dw¿n§î¾^Lo§Þy½çú\\u001c}/ýTýmú§õG\\fX\\u0006³\\f$\\u0006Û\\fÎ\\u0018<Å5qo<\\u001d/ÇÛñQC]Ã@C¥aaá¹Ñ<£ÕFF\\u000fiÆ\\\\ã$ãmÆmÆ£&\\u0006&!&KMêMîRM¹¦)¦;L;LÇÍÌÍ¢ÍÖ5=1×2çç×ß·`ZxZ,¶¨¶¸eI²äZ¦Yî¶¼nZ9Y¥XUZ]³F­­%Ö»­»§\\u0011§¹NN«ÖgÃ°ñ¶É¶©·\\u0019°åØ\\u0006Û®¶m¶}agb\\u0017g·Å®Ãî½}º}ý=\\u0007\\rÙ\\u000e«\\u001dZ\\u001d~s´r\\u0014:V:ÞÎî?}Åôé/gXÏ\\u0010ÏØ3ã¶\\u0013Ë)ÄiSÓGg\\u0017g¹sóKË.>.\\u001bÆÝÈ½äJtõq]ázÒõ³Âí¨Û¯î6îiîÜÌ4)Y3sÐÃÈCàQåÑ?\\u000b0kß¬~OCOgµç#/c/W­×°·¥wª÷aï\\u0017>ö>rã>ã<7Þ2ÞY_Ì7À·È·ËOÃo_ßC#ÿdÿzÿÑ\\u0000§%\\u0001g\\u0003A[\\u0002ûøz|!¿?:Ûeö²ÙíA ¹A\\u0015A­åÁ­!hÈì­!÷çÎÎi\\u000eP~èÖÐ\\u0007aæaÃ~\\f'W?pX\\u001aÑ15wÑÜCsßDúDDÞg1O9¯-J5*>ª.j<Ú7º4º?Æ.fYÌÕXXIlK\\u001c9.*®6nl¾ßüíóââ\\u000bã{\\u0017/È]py¡ÎÂô§\\u0016©.\\u0012,:@LN8ðA\\u0010*¨\\u0016%ò\\u0013w%\\nyÂ\\u001dÂg\\\"/Ñ6ÑØC\\\\*\\u001eNòH*Mzì¼5y$Å3¥,å¹'©¼L\\rLÝ:\\u0016v m2=:½1qBª!M¶gêgæfvË¬e²þÅn·/\\u001e\\u0007Ék³¬\\u0005Y-\\n¶B¦èTZ(×*\\u0007²geWf¿ÍÊ9«+ÍíÌ³ÊÛ7ïÿí\\u0012Â\\u0012á¶¥KW-\\u001dXæ½¬j9²<qyÛ\\nã\\u0015\\u0005+V\\u0006¬<¸¶*mÕO«íW®~½&zMk^ÁÊÁµ\\u0001kë\\u000bU\\nå}ëÜ×í]OX/Yßµaú\\u001b>\\u0015®\\u0014Û\\u0017\\u0015Ø(Üxå\\u001boÊ¿Ü´©«Ä¹dÏfÒféæÞ-[\\u000eªæ\\u000en\\rÙÚ´\\rßV´íõöEÛ/Í(Û»¶C¹£¿<¸¼e§ÉÎÍ;?T¤TôTúT6îÒÝµa×ønÑî\\u001b{¼ö4ìÕÛ[¼÷ý>É¾ÛU\\u0001UMÕfÕeûIû³÷?®ªéøûm]­NmqíÇ\\u0003Ò\\u0003ý\\u0007#\\u000e¶×¹ÔÕ\\u001dÒ=TRÖ+ëG\\u000eÇ\\u001f¾þïw-\\r6\\rUÆâ#pDyäé÷\\tß÷\\u001e\\r:Úv{¬á\\u0007Ó\\u001fv\\u001dg\\u001d/jBòFSû[b[ºOÌ>ÑÖêÞzüGÛ\\u001f\\u000f4<YyJóTÉiÚéÓgòÏ}~.ùÜ`Û¢¶{çcÎßj\\u000foïº\\u0010táÒEÿç;¼;Î\\\\ò¸tò²Ûå\\u0013W¸W¯:_mêtê<þÓOÇ»»®¹\\\\k¹îz½µ{f÷é\\u001b7ÎÝô½yñ\\u0016ÿÖÕ9=Ý½ózo÷Å÷õß\\u0016Ý~r'ýÎË»Ùw'î­¼O¼_ô@íAÙCÝÕ?[þÜØïÜjÀw óÑÜG÷\\u0006Ïþõ\\u000fC\\u0005Ë\\rë8>99â?rýéü§CÏdÏ&\\u0017þ¢þË®\\u0017\\u0016/~øÕë×ÎÑÑ¡ò¿m|¥ýêÀë\\u0019¯ÛÆÂÆ\\u001e¾Éx31^ôVûíÁwÜw\\u001dï£ß\\u000fOä| (ÿhù±õSÐ§û\\u0019ÿ\\u0004\\u0003óüc3-Û\\u0000\\u0000\\u0000 cHRM\\u0000\\u0000z%\\u0000\\u0000\\u0000\\u0000ùÿ\\u0000\\u0000é\\u0000\\u0000u0\\u0000\\u0000ê`\\u0000\\u0000:\\u0000\\u0000\\u0017o_ÅF\\u0000\\u0000\\u0003\\u0000PLTE\\u0018((øøàxxxÿÿÿ\\u0018((þþ\\u0000{~X\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000î\\u0015d\\u0002\\u0000\\u0000\\u0000\\u0004tRNSÿÿÿ\\u0000@*©ô\\u0000\\u0000\\u0006éIDATxÚìÛã:\\bDÁøÿÿØp\\u001ef­P¸!j%=3§Ëod]¶%B8jò³¯C\\b\\u00006/¿^yÿnmÛ\\u0000°\\u0003~­u)<Ú;JG¾_¯­öW\\u001f_«àw\\u001dá¢ñPc\\u0004\\fÈ=\\u0011Ø§\\t\\u0011\\t?»\\u0004Bú\\u000eD\\b\\fYR\\u0003D?\\u0001Ê\\u0014ÐÐW/¹Ôâ9\\u0015/¯I\\u0017Q\\u0017½ì~P*\\u001a7æ1ÛÔùÒ\\u0003øÊe+\\u0000ê#×x|Æ*¢ê´qDÈqÙK:ûÁ?>¯ÏED|r\\u0005À´ä\\\\EEô£\\t;L<ò\\u0012Ð'ÐñaÉ\\r=E¦\\u0005ÛÒ\\u0004¨Ýq\\\\´ý6\\u00063þ~dÀ¹@x»âlA¾e\\u0013ÔyË6\\u0011û¨UU\\u0014F¬?¨Öm¬Ûô||±üÈ;¾çò\\u0014\\\\ÆE#A\\u000eñÇ5èSvAõ¶4\\tX\\fiÝ\\u0017CÝôþë½ÖÏý.üÉk\\u0017¾R\\u000e\\u0013\\u0000\\u0001\\u0010ÀO¾L#Ä\\u001f1xJI@>¦ñ\\u0006®ü_ëí\\u0015ÐÀºW¹Û§]{C­\\u001anºRÿë\\u0001\\u0014; [ãÅÇüÞÌÙÔ³b»¡\\u001aÈé'Ì¬\\u0007Ó\\u0013Õ º¥é!Tº#Ä¹÷rL=·¨^$ÿA__LgdÁé«zÉ$7x>³flÁð\\u001býÚ¹\\u0003;\\t\\u0016¡\\r\\r¸D*¤PÆäÜü\\u0000\\u0000}0è¡æê­l#0§zÉùê¢+¶o\\u001cÒÎ\\u0000\\u0011\\u0015\\u0016\\u0016=BÖÏ@ð\\b<±fÛ\\u0002>í\\u0001¨ÿ/9\\u001e\\u000bU\\u000f\\u0012:òý'®AÇ\\u0019«IÝ5\\u000e\\nÌÖøT>¦5frõK\\u0012\\tæñ\\u000e\\u001e´I?{ñ¸E_Ê,¯\\u001eU\\u000fROðS¼¶ÇÃ\\u0014C\\u0004@\\u0000\\u0004ð¯óÆôM¶¢í8å{\\u0016c%]î\\u000fKÖ^µ3²1XÊGµT1ÿ1í8ô½,¦'½ÿD</¹\\fàd6ÊÑX80Ø¤ïcÈ7ëÓ1Xn6ßÚ\\u0001G/OáhìWüBs­Åï;\\bÚ¡¤ñ~õEÓm8<Ã\\u0002«gÄoÁ\\u000e­º¨¦%!^Ä®µ0<\\u0000§zD¿\\tFö\\u0005öÇ|¯5êGZ\\u0007Cï\\u0000ª\\u0001\\u0005x2V_£:Ø\\fÒÙU\\u001f1àã|2\\u001d\\u0000ÜðÃ\\u001e\\b¸¦[@:¬y\\bÒX&PÚó¨Ïë;\\u0015ÞÔpü/1èõX÷'üXð?\\u0004¸k{õ¥òXÊ\\u0011}PÑÿÝ\\u0012´K~ôE\\bÕ \\u0001P\\u000eÿS\\u000fï¬ß\\u001fÕ«zÿ&?Æ\\u000ez|9-èPèMåbÉ{o;«z¿÷¿7 ?qk¡]\\\"[\\u0002çt>Æóþ-ë^åÒG¡\\u0017\\u001c½õ\\u000eI\\u001bÅpvv~¡Ã¦C)ÁP[s|È½\\u0003dÒª6Ì£A\\fyh\\\\ë³øÓ¤)(1ôùä\\u0000Ñ-[öóf+ðÉÙr\\u0014O¾áÀWo\\tII\\u0003Æ¿«®ÇÐ÷{A\\rxW@\\u001eF\\u000eÿµIípo\\nG©æçý¹\\u0006ðá9Æ\\u0010\\r\\u001e!ÑéÍ¿ê±\\u0002\\u0000U\\u0017§jôF\\u000fÀ×6FtDç\\u000fèSÏì1ÿs5¸n\\tÞí8¿üs¦p¼8þ\\u0000Êa\\u0002 \\r`:æyâ\\u0018¨/\\u0012}vý¿¾ÀX~\\u0015À¦xB\\b¬Ù)cdè¯r.\\u001e\\u001f\\fÇü\\u000f\\u001er>Öç0P±³u\\fGKV\\u001f+<Zg¾^õ\\bÅð\\u0005\\b\\f\\u0000Ë¯?áéórþ×§ËAébj§ne>>÷X¼£oï6Hj±Æo]³û\\u001eñ5¸\\u001b\\u001fÐÇ«ú^_¼k\\u001fc\\u0007ø\\u0000,¯Í·?\\u000bÛ#Pâ\\u0003îåbö\\u0007tñ\\u0001>ÉÑò\\u00173å«³XSsù½U÷ìò\\u0011UëÏøv5X^³Óz[*ý\\u0005;àoshT`ï}Dô\\u0007P\\r\\u0012\\u0000\\u0001\\u0010ÀÞ{íúé\\u0000þí\\u0019 Zõ2~ñ1EdË0\\f¿ð´ö\\u0011\\\"Þ}qòzChÐ÷£?`3@\\u0004\\u0003\\\"n&¾y\\t¬}!¢õ\\u000f\\u0012·E/ðÍÞ\\u001bó)ã5ö\\u0005-Ô>Øx½w\\u0006,n\\u001aËs2¸°\\u001c¢ßÕ¿sü5Dfz¾>3-ñý¨ó\\bàë\\u0004\\f(þ\\u0002Õ·þÕðÿ0àø77óÑPÜ\\u00039~ GqÝø\\u000bÞü\\u001a¬ï?ú\\u0007«þí\\u0019\\u0010iãßüù\\u0006ý\\u0001\\u0014C\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000o¿þ\\u001b\\u0000øq¬ç)>\\u0017\\u0000\\u0000\\u0000\\u0000IEND®B`\"\n\n/***/ }),\n/* 54 */\n/***/ (function(module, exports) {\n\nmodule.exports = {\n\t\"x\": 16,\n\t\"y\": 16,\n\t\"chars\": \" !\\\"#$%&'()°+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz\",\n\t\"widths\": [\n\t\t3,\n\t\t2,\n\t\t4,\n\t\t9,\n\t\t6,\n\t\t6,\n\t\t6,\n\t\t2,\n\t\t4,\n\t\t4,\n\t\t4,\n\t\t6,\n\t\t3,\n\t\t6,\n\t\t2,\n\t\t5,\n\t\t5,\n\t\t4,\n\t\t5,\n\t\t5,\n\t\t5,\n\t\t5,\n\t\t5,\n\t\t5,\n\t\t5,\n\t\t5,\n\t\t2,\n\t\t3,\n\t\t7,\n\t\t6,\n\t\t7,\n\t\t5,\n\t\t8,\n\t\t5,\n\t\t5,\n\t\t5,\n\t\t5,\n\t\t5,\n\t\t5,\n\t\t5,\n\t\t6,\n\t\t4,\n\t\t5,\n\t\t6,\n\t\t5,\n\t\t6,\n\t\t6,\n\t\t5,\n\t\t5,\n\t\t5,\n\t\t5,\n\t\t5,\n\t\t6,\n\t\t6,\n\t\t6,\n\t\t6,\n\t\t6,\n\t\t6,\n\t\t6,\n\t\t4,\n\t\t5,\n\t\t4,\n\t\t6,\n\t\t7,\n\t\t3,\n\t\t5,\n\t\t5,\n\t\t5,\n\t\t5,\n\t\t5,\n\t\t4,\n\t\t5,\n\t\t5,\n\t\t2,\n\t\t3,\n\t\t5,\n\t\t2,\n\t\t6,\n\t\t5,\n\t\t5,\n\t\t5,\n\t\t5,\n\t\t5,\n\t\t5,\n\t\t4,\n\t\t5,\n\t\t5,\n\t\t6,\n\t\t6,\n\t\t5,\n\t\t5\n\t]\n};\n\n/***/ })\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// dist/bundle.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 20);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap bfab07809916be91459b","import { mat4 } from \"gl-matrix\";\r\n\r\nexport const FLOAT_SIZE = 4;\r\nexport const SHORT_SIZE = 2;\r\nexport const BYTE_SIZE = 1;\r\nexport const VERTICES_QUAD = 4;\r\nexport const INDICES_QUAD = 6;\r\nexport const COMP_POS = 2;\r\nexport const COMP_Z_INDEX = 1;\r\nexport const COMP_SIZE_Z_INDEX = 1;\r\nexport const COMP_SIZE_POS = 2;\r\nexport const COMP_PAL_PAL_SHIFT = 1;\r\nexport const COMP_SIZE_PAL_SHIFT = 1;\r\nexport const COMP_UV = 2;\r\nexport const COMP_SIZE_UV = 1;\r\nexport const UV_TILE = 16;\r\nexport const TEXTURE_SIZE = 256;\r\nexport const HUGE = Number.MAX_VALUE;\r\nexport const MIN_Z = 1;\r\nexport const MAX_Z = 255;\r\nexport const COMP_RGBA = 4;\r\nexport const COMP_RGB = 3;\r\nexport const COMP_INDEXED = 1;\r\n\r\nexport const PAL_OFFSET = 1 / 256;\r\nexport const OFFSET_Z_INDEX = COMP_POS * COMP_SIZE_POS;\r\nexport const OFFSET_PAL_SHIFT = OFFSET_Z_INDEX + COMP_SIZE_Z_INDEX;\r\nexport const OFFSET_UV = OFFSET_PAL_SHIFT + COMP_SIZE_PAL_SHIFT;\r\nexport const VERTEX_SIZE = COMP_POS * COMP_SIZE_POS + COMP_UV * COMP_SIZE_UV + COMP_SIZE_Z_INDEX + COMP_SIZE_PAL_SHIFT; \r\nexport const VERTEX_SIZE_SHORT = VERTEX_SIZE >> 1; \r\nexport const QUAD_SIZE = VERTEX_SIZE * VERTICES_QUAD; \r\nexport const QUAD_SIZE_SHORT = VERTEX_SIZE_SHORT * VERTICES_QUAD; \r\nexport const MAT4_IDENT = mat4.identity(mat4.create());\r\nexport const MAX_VERTICES = (2 << 15);\r\nexport const MAX_QUADS = MAX_VERTICES / VERTICES_QUAD;\n\n\n// WEBPACK FOOTER //\n// ./src/core/constants.ts","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\n/**\n * @class Common utilities\n * @name glMatrix\n */\nvar glMatrix = {};\n\n// Configuration Constants\nglMatrix.EPSILON = 0.000001;\nglMatrix.ARRAY_TYPE = (typeof Float32Array !== 'undefined') ? Float32Array : Array;\nglMatrix.RANDOM = Math.random;\nglMatrix.ENABLE_SIMD = false;\n\n// Capability detection\nglMatrix.SIMD_AVAILABLE = (glMatrix.ARRAY_TYPE === Float32Array) && ('SIMD' in this);\nglMatrix.USE_SIMD = glMatrix.ENABLE_SIMD && glMatrix.SIMD_AVAILABLE;\n\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Type} type Array type, such as Float32Array or Array\n */\nglMatrix.setMatrixArrayType = function(type) {\n    glMatrix.ARRAY_TYPE = type;\n}\n\nvar degree = Math.PI / 180;\n\n/**\n* Convert Degree To Radian\n*\n* @param {Number} Angle in Degrees\n*/\nglMatrix.toRadian = function(a){\n     return a * degree;\n}\n\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less \n * than or equal to 1.0, and a relative tolerance is used for larger values)\n * \n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\nglMatrix.equals = function(a, b) {\n\treturn Math.abs(a - b) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a), Math.abs(b));\n}\n\nmodule.exports = glMatrix;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gl-matrix/src/gl-matrix/common.js\n// module id = 1\n// module chunks = 0","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslib/tslib.es6.js\n// module id = 2\n// module chunks = 0","'use strict';\n\n\nvar TYPED_OK =  (typeof Uint8Array !== 'undefined') &&\n                (typeof Uint16Array !== 'undefined') &&\n                (typeof Int32Array !== 'undefined');\n\n\nexports.assign = function (obj /*from1, from2, from3, ...*/) {\n  var sources = Array.prototype.slice.call(arguments, 1);\n  while (sources.length) {\n    var source = sources.shift();\n    if (!source) { continue; }\n\n    if (typeof source !== 'object') {\n      throw new TypeError(source + 'must be non-object');\n    }\n\n    for (var p in source) {\n      if (source.hasOwnProperty(p)) {\n        obj[p] = source[p];\n      }\n    }\n  }\n\n  return obj;\n};\n\n\n// reduce buffer size, avoiding mem copy\nexports.shrinkBuf = function (buf, size) {\n  if (buf.length === size) { return buf; }\n  if (buf.subarray) { return buf.subarray(0, size); }\n  buf.length = size;\n  return buf;\n};\n\n\nvar fnTyped = {\n  arraySet: function (dest, src, src_offs, len, dest_offs) {\n    if (src.subarray && dest.subarray) {\n      dest.set(src.subarray(src_offs, src_offs + len), dest_offs);\n      return;\n    }\n    // Fallback to ordinary array\n    for (var i = 0; i < len; i++) {\n      dest[dest_offs + i] = src[src_offs + i];\n    }\n  },\n  // Join array of chunks to single array.\n  flattenChunks: function (chunks) {\n    var i, l, len, pos, chunk, result;\n\n    // calculate data length\n    len = 0;\n    for (i = 0, l = chunks.length; i < l; i++) {\n      len += chunks[i].length;\n    }\n\n    // join chunks\n    result = new Uint8Array(len);\n    pos = 0;\n    for (i = 0, l = chunks.length; i < l; i++) {\n      chunk = chunks[i];\n      result.set(chunk, pos);\n      pos += chunk.length;\n    }\n\n    return result;\n  }\n};\n\nvar fnUntyped = {\n  arraySet: function (dest, src, src_offs, len, dest_offs) {\n    for (var i = 0; i < len; i++) {\n      dest[dest_offs + i] = src[src_offs + i];\n    }\n  },\n  // Join array of chunks to single array.\n  flattenChunks: function (chunks) {\n    return [].concat.apply([], chunks);\n  }\n};\n\n\n// Enable/Disable typed arrays use, for testing\n//\nexports.setTyped = function (on) {\n  if (on) {\n    exports.Buf8  = Uint8Array;\n    exports.Buf16 = Uint16Array;\n    exports.Buf32 = Int32Array;\n    exports.assign(exports, fnTyped);\n  } else {\n    exports.Buf8  = Array;\n    exports.Buf16 = Array;\n    exports.Buf32 = Array;\n    exports.assign(exports, fnUntyped);\n  }\n};\n\nexports.setTyped(TYPED_OK);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/pako/lib/utils/common.js\n// module id = 3\n// module chunks = 0","/*!\n * @license twgl.js 3.4.0 Copyright (c) 2015, Gregg Tavares All Rights Reserved.\n * Available via the MIT license.\n * see: http://github.com/greggman/twgl.js for details\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"twgl\"] = factory();\n\telse\n\t\troot[\"twgl\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1), __webpack_require__(10), __webpack_require__(11), __webpack_require__(12)], __WEBPACK_AMD_DEFINE_RESULT__ = function (twgl, m4, v3, primitives) {\n\n\t  \"use strict\";\n\n\t  twgl.m4 = m4;\n\t  twgl.v3 = v3;\n\t  twgl.primitives = primitives;\n\t  return twgl;\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n\t/*\n\t * Copyright 2015, Gregg Tavares.\n\t * All rights reserved.\n\t *\n\t * Redistribution and use in source and binary forms, with or without\n\t * modification, are permitted provided that the following conditions are\n\t * met:\n\t *\n\t *     * Redistributions of source code must retain the above copyright\n\t * notice, this list of conditions and the following disclaimer.\n\t *     * Redistributions in binary form must reproduce the above\n\t * copyright notice, this list of conditions and the following disclaimer\n\t * in the documentation and/or other materials provided with the\n\t * distribution.\n\t *     * Neither the name of Gregg Tavares. nor the names of his\n\t * contributors may be used to endorse or promote products derived from\n\t * this software without specific prior written permission.\n\t *\n\t * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\t * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n\t * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n\t * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n\t * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n\t * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n\t * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n\t * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n\t * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\t * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n\t * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\t */\n\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(2), __webpack_require__(5), __webpack_require__(7), __webpack_require__(6), __webpack_require__(8), __webpack_require__(3), __webpack_require__(9), __webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function (attributes, draw, framebuffers, programs, textures, typedArrays, vertexArrays, utils) {\n\t  \"use strict\";\n\n\t  /**\n\t   * The main TWGL module.\n\t   *\n\t   * For most use cases you shouldn't need anything outside this module.\n\t   * Exceptions between the stuff added to twgl-full (v3, m4, primitives)\n\t   *\n\t   * @module twgl\n\t   * @borrows module:twgl/attributes.setAttribInfoBufferFromArray as setAttribInfoBufferFromArray\n\t   * @borrows module:twgl/attributes.createBufferInfoFromArrays as createBufferInfoFromArrays\n\t   * @borrows module:twgl/attributes.createVertexArrayInfo as createVertexArrayInfo\n\t   * @borrows module:twgl/draw.drawBufferInfo as drawBufferInfo\n\t   * @borrows module:twgl/draw.drawObjectList as drawObjectList\n\t   * @borrows module:twgl/framebuffers.createFramebufferInfo as createFramebufferInfo\n\t   * @borrows module:twgl/framebuffers.resizeFramebufferInfo as resizeFramebufferInfo\n\t   * @borrows module:twgl/framebuffers.bindFramebufferInfo as bindFramebufferInfo\n\t   * @borrows module:twgl/programs.createProgramInfo as createProgramInfo\n\t   * @borrows module:twgl/programs.createUniformBlockInfo as createUniformBlockInfo\n\t   * @borrows module:twgl/programs.bindUniformBlock as bindUniformBlock\n\t   * @borrows module:twgl/programs.setUniformBlock as setUniformBlock\n\t   * @borrows module:twgl/programs.setBlockUniforms as setBlockUniforms\n\t   * @borrows module:twgl/programs.setUniforms as setUniforms\n\t   * @borrows module:twgl/programs.setBuffersAndAttributes as setBuffersAndAttributes\n\t   * @borrows module:twgl/textures.setTextureFromArray as setTextureFromArray\n\t   * @borrows module:twgl/textures.createTexture as createTexture\n\t   * @borrows module:twgl/textures.resizeTexture as resizeTexture\n\t   * @borrows module:twgl/textures.createTextures as createTextures\n\t   */\n\n\t  // make sure we don't see a global gl\n\n\t  var gl = undefined; // eslint-disable-line\n\t  var defaults = {\n\t    enableVertexArrayObjects: true\n\t  };\n\n\t  /**\n\t   * Various default settings for twgl.\n\t   *\n\t   * Note: You can call this any number of times. Example:\n\t   *\n\t   *     twgl.setDefaults({ textureColor: [1, 0, 0, 1] });\n\t   *     twgl.setDefaults({ attribPrefix: 'a_' });\n\t   *\n\t   * is equivalent to\n\t   *\n\t   *     twgl.setDefaults({\n\t   *       textureColor: [1, 0, 0, 1],\n\t   *       attribPrefix: 'a_',\n\t   *     });\n\t   *\n\t   * @typedef {Object} Defaults\n\t   * @property {string} attribPrefix The prefix to stick on attributes\n\t   *\n\t   *   When writing shaders I prefer to name attributes with `a_`, uniforms with `u_` and varyings with `v_`\n\t   *   as it makes it clear where they came from. But, when building geometry I prefer using unprefixed names.\n\t   *\n\t   *   In otherwords I'll create arrays of geometry like this\n\t   *\n\t   *       var arrays = {\n\t   *         position: ...\n\t   *         normal: ...\n\t   *         texcoord: ...\n\t   *       };\n\t   *\n\t   *   But need those mapped to attributes and my attributes start with `a_`.\n\t   *\n\t   *   Default: `\"\"`\n\t   *\n\t   * @property {number[]} textureColor Array of 4 values in the range 0 to 1\n\t   *\n\t   *   The default texture color is used when loading textures from\n\t   *   urls. Because the URL will be loaded async we'd like to be\n\t   *   able to use the texture immediately. By putting a 1x1 pixel\n\t   *   color in the texture we can start using the texture before\n\t   *   the URL has loaded.\n\t   *\n\t   *   Default: `[0.5, 0.75, 1, 1]`\n\t   *\n\t   * @property {string} crossOrigin\n\t   *\n\t   *   If not undefined sets the crossOrigin attribute on images\n\t   *   that twgl creates when downloading images for textures.\n\t   *\n\t   *   Also see {@link module:twgl.TextureOptions}.\n\t   *\n\t   * @property {bool} enableVertexArrayObjects\n\t   *\n\t   *   If true then in WebGL 1.0 will attempt to get the `OES_vertex_array_object` extension.\n\t   *   If successful it will copy create/bind/delete/isVertexArrayOES from the extension to\n\t   *   the WebGLRenderingContext removing the OES at the end which is the standard entry point\n\t   *   for WebGL 2.\n\t   *\n\t   *   Note: According to webglstats.com 90% of devices support `OES_vertex_array_object`.\n\t   *   In fact AFAICT all devices support them it's just Microsoft Edge does not.\n\t   *   If you just want to count on support I suggest using [this polyfill](https://github.com/KhronosGroup/WebGL/blob/master/sdk/demos/google/resources/OESVertexArrayObject.js)\n\t   *   or ignoring devices that don't support them.\n\t   *\n\t   *   Default: `true`\n\t   *\n\t   * @memberOf module:twgl\n\t   */\n\n\t  /**\n\t   * Sets various defaults for twgl.\n\t   *\n\t   * In the interest of terseness which is kind of the point\n\t   * of twgl I've integrated a few of the older functions here\n\t   *\n\t   * @param {module:twgl.Defaults} newDefaults The default settings.\n\t   * @memberOf module:twgl\n\t   */\n\t  function setDefaults(newDefaults) {\n\t    utils.copyExistingProperties(newDefaults, defaults);\n\t    attributes.setDefaults_(newDefaults); // eslint-disable-line\n\t    textures.setDefaults_(newDefaults); // eslint-disable-line\n\t  }\n\n\t  /**\n\t   * Adds Vertex Array Objects to WebGL 1 GL contexts if available\n\t   * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n\t   */\n\t  function addVertexArrayObjectSupport(gl) {\n\t    if (!gl || !defaults.enableVertexArrayObjects) {\n\t      return;\n\t    }\n\t    if (utils.isWebGL1(gl)) {\n\t      var ext = gl.getExtension(\"OES_vertex_array_object\");\n\t      if (ext) {\n\t        gl.createVertexArray = function () {\n\t          return ext.createVertexArrayOES();\n\t        };\n\t        gl.deleteVertexArray = function (v) {\n\t          ext.deleteVertexArrayOES(v);\n\t        };\n\t        gl.isVertexArray = function (v) {\n\t          return ext.isVertexArrayOES(v);\n\t        };\n\t        gl.bindVertexArray = function (v) {\n\t          ext.bindVertexArrayOES(v);\n\t        };\n\t        gl.VERTEX_ARRAY_BINDING = ext.VERTEX_ARRAY_BINDING_OES;\n\t      }\n\t    }\n\t  }\n\n\t  /**\n\t   * Creates a webgl context.\n\t   * @param {HTMLCanvasElement} canvas The canvas tag to get\n\t   *     context from. If one is not passed in one will be\n\t   *     created.\n\t   * @return {WebGLRenderingContext} The created context.\n\t   */\n\t  function create3DContext(canvas, opt_attribs) {\n\t    var names = [\"webgl\", \"experimental-webgl\"];\n\t    var context = null;\n\t    for (var ii = 0; ii < names.length; ++ii) {\n\t      context = canvas.getContext(names[ii], opt_attribs);\n\t      if (context) {\n\t        break;\n\t      }\n\t    }\n\t    return context;\n\t  }\n\n\t  /**\n\t   * Gets a WebGL1 context.\n\t   *\n\t   * Note: Will attempt to enable Vertex Array Objects\n\t   * and add WebGL2 entry points. (unless you first set defaults with\n\t   * `twgl.setDefaults({enableVertexArrayObjects: false})`;\n\t   *\n\t   * @param {HTMLCanvasElement} canvas a canvas element.\n\t   * @param {WebGLContextCreationAttirbutes} [opt_attribs] optional webgl context creation attributes\n\t   * @memberOf module:twgl\n\t   */\n\t  function getWebGLContext(canvas, opt_attribs) {\n\t    var gl = create3DContext(canvas, opt_attribs);\n\t    addVertexArrayObjectSupport(gl);\n\t    return gl;\n\t  }\n\n\t  /**\n\t   * Creates a webgl context.\n\t   *\n\t   * Will return a WebGL2 context if possible.\n\t   *\n\t   * You can check if it's WebGL2 with\n\t   *\n\t   *     twgl.isWebGL2(gl);\n\t   *\n\t   * @param {HTMLCanvasElement} canvas The canvas tag to get\n\t   *     context from. If one is not passed in one will be\n\t   *     created.\n\t   * @return {WebGLRenderingContext} The created context.\n\t   */\n\t  function createContext(canvas, opt_attribs) {\n\t    var names = [\"webgl2\", \"webgl\", \"experimental-webgl\"];\n\t    var context = null;\n\t    for (var ii = 0; ii < names.length; ++ii) {\n\t      context = canvas.getContext(names[ii], opt_attribs);\n\t      if (context) {\n\t        break;\n\t      }\n\t    }\n\t    return context;\n\t  }\n\n\t  /**\n\t   * Gets a WebGL context.  Will create a WebGL2 context if possible.\n\t   *\n\t   * You can check if it's WebGL2 with\n\t   *\n\t   *    function isWebGL2(gl) {\n\t   *      return gl.getParameter(gl.VERSION).indexOf(\"WebGL 2.0 \") == 0;\n\t   *    }\n\t   *\n\t   * Note: For a WebGL1 context will attempt to enable Vertex Array Objects\n\t   * and add WebGL2 entry points. (unless you first set defaults with\n\t   * `twgl.setDefaults({enableVertexArrayObjects: false})`;\n\t   *\n\t   * @param {HTMLCanvasElement} canvas a canvas element.\n\t   * @param {WebGLContextCreationAttirbutes} [opt_attribs] optional webgl context creation attributes\n\t   * @return {WebGLRenderingContext} The created context.\n\t   * @memberOf module:twgl\n\t   */\n\t  function getContext(canvas, opt_attribs) {\n\t    var gl = createContext(canvas, opt_attribs);\n\t    addVertexArrayObjectSupport(gl);\n\t    return gl;\n\t  }\n\n\t  /**\n\t   * Resize a canvas to match the size it's displayed.\n\t   * @param {HTMLCanvasElement} canvas The canvas to resize.\n\t   * @param {number} [multiplier] So you can pass in `window.devicePixelRatio` if you want to.\n\t   * @return {boolean} true if the canvas was resized.\n\t   * @memberOf module:twgl\n\t   */\n\t  function resizeCanvasToDisplaySize(canvas, multiplier) {\n\t    multiplier = multiplier || 1;\n\t    multiplier = Math.max(1, multiplier);\n\t    var width = canvas.clientWidth * multiplier | 0;\n\t    var height = canvas.clientHeight * multiplier | 0;\n\t    if (canvas.width !== width || canvas.height !== height) {\n\t      canvas.width = width;\n\t      canvas.height = height;\n\t      return true;\n\t    }\n\t    return false;\n\t  }\n\n\t  // Using quotes prevents Uglify from changing the names.\n\t  // No speed diff AFAICT.\n\t  var api = {\n\t    \"getContext\": getContext,\n\t    \"getWebGLContext\": getWebGLContext,\n\t    \"isWebGL1\": utils.isWebGL1,\n\t    \"isWebGL2\": utils.isWebGL2,\n\t    \"resizeCanvasToDisplaySize\": resizeCanvasToDisplaySize,\n\t    \"setDefaults\": setDefaults\n\t  };\n\n\t  function notPrivate(name) {\n\t    return name[name.length - 1] !== '_';\n\t  }\n\n\t  function copyPublicProperties(src, dst) {\n\t    Object.keys(src).filter(notPrivate).forEach(function (key) {\n\t      dst[key] = src[key];\n\t    });\n\t    return dst;\n\t  }\n\n\t  var apis = {\n\t    attributes: attributes,\n\t    draw: draw,\n\t    framebuffers: framebuffers,\n\t    programs: programs,\n\t    textures: textures,\n\t    typedArrays: typedArrays,\n\t    vertexArrays: vertexArrays\n\t  };\n\t  Object.keys(apis).forEach(function (name) {\n\t    var srcApi = apis[name];\n\t    copyPublicProperties(srcApi, api);\n\t    api[name] = copyPublicProperties(srcApi, {});\n\t  });\n\n\t  return api;\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n\t/*\n\t * Copyright 2015, Gregg Tavares.\n\t * All rights reserved.\n\t *\n\t * Redistribution and use in source and binary forms, with or without\n\t * modification, are permitted provided that the following conditions are\n\t * met:\n\t *\n\t *     * Redistributions of source code must retain the above copyright\n\t * notice, this list of conditions and the following disclaimer.\n\t *     * Redistributions in binary form must reproduce the above\n\t * copyright notice, this list of conditions and the following disclaimer\n\t * in the documentation and/or other materials provided with the\n\t * distribution.\n\t *     * Neither the name of Gregg Tavares. nor the names of his\n\t * contributors may be used to endorse or promote products derived from\n\t * this software without specific prior written permission.\n\t *\n\t * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\t * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n\t * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n\t * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n\t * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n\t * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n\t * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n\t * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n\t * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\t * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n\t * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\t */\n\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function (typedArrays, utils) {\n\t  \"use strict\";\n\n\t  /**\n\t   * Low level attribute and buffer related functions\n\t   *\n\t   * You should generally not need to use these functions. They are provided\n\t   * for those cases where you're doing something out of the ordinary\n\t   * and you need lower level access.\n\t   *\n\t   * For backward compatibily they are available at both `twgl.attributes` and `twgl`\n\t   * itself\n\t   *\n\t   * See {@link module:twgl} for core functions\n\t   *\n\t   * @module twgl/attributes\n\t   */\n\n\t  // make sure we don't see a global gl\n\n\t  var gl = undefined; // eslint-disable-line\n\t  var defaults = {\n\t    attribPrefix: \"\"\n\t  };\n\n\t  /**\n\t   * Sets the default attrib prefix\n\t   *\n\t   * When writing shaders I prefer to name attributes with `a_`, uniforms with `u_` and varyings with `v_`\n\t   * as it makes it clear where they came from. But, when building geometry I prefer using unprefixed names.\n\t   *\n\t   * In otherwords I'll create arrays of geometry like this\n\t   *\n\t   *     var arrays = {\n\t   *       position: ...\n\t   *       normal: ...\n\t   *       texcoord: ...\n\t   *     };\n\t   *\n\t   * But need those mapped to attributes and my attributes start with `a_`.\n\t   *\n\t   * @deprecated see {@link module:twgl.setDefaults}\n\t   * @param {string} prefix prefix for attribs\n\t   * @memberOf module:twgl/attributes\n\t   */\n\t  function setAttributePrefix(prefix) {\n\t    defaults.attribPrefix = prefix;\n\t  }\n\n\t  function setDefaults(newDefaults) {\n\t    utils.copyExistingProperties(newDefaults, defaults);\n\t  }\n\n\t  function setBufferFromTypedArray(gl, type, buffer, array, drawType) {\n\t    gl.bindBuffer(type, buffer);\n\t    gl.bufferData(type, array, drawType || gl.STATIC_DRAW);\n\t  }\n\n\t  /**\n\t   * Given typed array creates a WebGLBuffer and copies the typed array\n\t   * into it.\n\t   *\n\t   * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n\t   * @param {ArrayBuffer|ArrayBufferView|WebGLBuffer} typedArray the typed array. Note: If a WebGLBuffer is passed in it will just be returned. No action will be taken\n\t   * @param {number} [type] the GL bind type for the buffer. Default = `gl.ARRAY_BUFFER`.\n\t   * @param {number} [drawType] the GL draw type for the buffer. Default = 'gl.STATIC_DRAW`.\n\t   * @return {WebGLBuffer} the created WebGLBuffer\n\t   * @memberOf module:twgl/attributes\n\t   */\n\t  function createBufferFromTypedArray(gl, typedArray, type, drawType) {\n\t    if (typedArray instanceof WebGLBuffer) {\n\t      return typedArray;\n\t    }\n\t    type = type || gl.ARRAY_BUFFER;\n\t    var buffer = gl.createBuffer();\n\t    setBufferFromTypedArray(gl, type, buffer, typedArray, drawType);\n\t    return buffer;\n\t  }\n\n\t  function isIndices(name) {\n\t    return name === \"indices\";\n\t  }\n\n\t  // This is really just a guess. Though I can't really imagine using\n\t  // anything else? Maybe for some compression?\n\t  function getNormalizationForTypedArray(typedArray) {\n\t    if (typedArray instanceof Int8Array) {\n\t      return true;\n\t    } // eslint-disable-line\n\t    if (typedArray instanceof Uint8Array) {\n\t      return true;\n\t    } // eslint-disable-line\n\t    return false;\n\t  }\n\n\t  // This is really just a guess. Though I can't really imagine using\n\t  // anything else? Maybe for some compression?\n\t  function getNormalizationForTypedArrayType(typedArrayType) {\n\t    if (typedArrayType === Int8Array) {\n\t      return true;\n\t    } // eslint-disable-line\n\t    if (typedArrayType === Uint8Array) {\n\t      return true;\n\t    } // eslint-disable-line\n\t    return false;\n\t  }\n\n\t  function getArray(array) {\n\t    return array.length ? array : array.data;\n\t  }\n\n\t  var texcoordRE = /coord|texture/i;\n\t  var colorRE = /color|colour/i;\n\n\t  function guessNumComponentsFromName(name, length) {\n\t    var numComponents;\n\t    if (texcoordRE.test(name)) {\n\t      numComponents = 2;\n\t    } else if (colorRE.test(name)) {\n\t      numComponents = 4;\n\t    } else {\n\t      numComponents = 3; // position, normals, indices ...\n\t    }\n\n\t    if (length % numComponents > 0) {\n\t      throw \"Can not guess numComponents for attribute '\" + name + \"'. Tried \" + numComponents + \" but \" + length + \" values is not evenly divisible by \" + numComponents + \". You should specify it.\";\n\t    }\n\n\t    return numComponents;\n\t  }\n\n\t  function getNumComponents(array, arrayName) {\n\t    return array.numComponents || array.size || guessNumComponentsFromName(arrayName, getArray(array).length);\n\t  }\n\n\t  function makeTypedArray(array, name) {\n\t    if (typedArrays.isArrayBuffer(array)) {\n\t      return array;\n\t    }\n\n\t    if (typedArrays.isArrayBuffer(array.data)) {\n\t      return array.data;\n\t    }\n\n\t    if (Array.isArray(array)) {\n\t      array = {\n\t        data: array\n\t      };\n\t    }\n\n\t    var Type = array.type;\n\t    if (!Type) {\n\t      if (isIndices(name)) {\n\t        Type = Uint16Array;\n\t      } else {\n\t        Type = Float32Array;\n\t      }\n\t    }\n\t    return new Type(array.data);\n\t  }\n\n\t  /**\n\t   * The info for an attribute. This is effectively just the arguments to `gl.vertexAttribPointer` plus the WebGLBuffer\n\t   * for the attribute.\n\t   *\n\t   * @typedef {Object} AttribInfo\n\t   * @property {number} [numComponents] the number of components for this attribute.\n\t   * @property {number} [size] synonym for `numComponents`.\n\t   * @property {number} [type] the type of the attribute (eg. `gl.FLOAT`, `gl.UNSIGNED_BYTE`, etc...) Default = `gl.FLOAT`\n\t   * @property {boolean} [normalize] whether or not to normalize the data. Default = false\n\t   * @property {number} [offset] offset into buffer in bytes. Default = 0\n\t   * @property {number} [stride] the stride in bytes per element. Default = 0\n\t   * @property {WebGLBuffer} buffer the buffer that contains the data for this attribute\n\t   * @property {number} [drawType] the draw type passed to gl.bufferData. Default = gl.STATIC_DRAW\n\t   * @memberOf module:twgl\n\t   */\n\n\t  /**\n\t   * Use this type of array spec when TWGL can't guess the type or number of compoments of an array\n\t   * @typedef {Object} FullArraySpec\n\t   * @property {(number|number[]|ArrayBuffer)} data The data of the array. A number alone becomes the number of elements of type.\n\t   * @property {number} [numComponents] number of components for `vertexAttribPointer`. Default is based on the name of the array.\n\t   *    If `coord` is in the name assumes `numComponents = 2`.\n\t   *    If `color` is in the name assumes `numComponents = 4`.\n\t   *    otherwise assumes `numComponents = 3`\n\t   * @property {constructor} type The type. This is only used if `data` is a JavaScript array. It is the constructor for the typedarray. (eg. `Uint8Array`).\n\t   * For example if you want colors in a `Uint8Array` you might have a `FullArraySpec` like `{ type: Uint8Array, data: [255,0,255,255, ...], }`.\n\t   * @property {number} [size] synonym for `numComponents`.\n\t   * @property {boolean} [normalize] normalize for `vertexAttribPointer`. Default is true if type is `Int8Array` or `Uint8Array` otherwise false.\n\t   * @property {number} [stride] stride for `vertexAttribPointer`. Default = 0\n\t   * @property {number} [offset] offset for `vertexAttribPointer`. Default = 0\n\t   * @property {string} [attrib] name of attribute this array maps to. Defaults to same name as array prefixed by the default attribPrefix.\n\t   * @property {string} [name] synonym for `attrib`.\n\t   * @property {string} [attribName] synonym for `attrib`.\n\t   * @memberOf module:twgl\n\t   */\n\n\t  /**\n\t   * An individual array in {@link module:twgl.Arrays}\n\t   *\n\t   * When passed to {@link module:twgl.createBufferInfoFromArrays} if an ArraySpec is `number[]` or `ArrayBuffer`\n\t   * the types will be guessed based on the name. `indices` will be `Uint16Array`, everything else will\n\t   * be `Float32Array`. If an ArraySpec is a number it's the number of floats for an empty (zeroed) buffer.\n\t   *\n\t   * @typedef {(number|number[]|ArrayBuffer|module:twgl.FullArraySpec)} ArraySpec\n\t   * @memberOf module:twgl\n\t   */\n\n\t  /**\n\t   * This is a JavaScript object of arrays by name. The names should match your shader's attributes. If your\n\t   * attributes have a common prefix you can specify it by calling {@link module:twgl.setAttributePrefix}.\n\t   *\n\t   *     Bare JavaScript Arrays\n\t   *\n\t   *         var arrays = {\n\t   *            position: [-1, 1, 0],\n\t   *            normal: [0, 1, 0],\n\t   *            ...\n\t   *         }\n\t   *\n\t   *     Bare TypedArrays\n\t   *\n\t   *         var arrays = {\n\t   *            position: new Float32Array([-1, 1, 0]),\n\t   *            color: new Uint8Array([255, 128, 64, 255]),\n\t   *            ...\n\t   *         }\n\t   *\n\t   * *   Will guess at `numComponents` if not specified based on name.\n\t   *\n\t   *     If `coord` is in the name assumes `numComponents = 2`\n\t   *\n\t   *     If `color` is in the name assumes `numComponents = 4`\n\t   *\n\t   *     otherwise assumes `numComponents = 3`\n\t   *\n\t   * Objects with various fields. See {@link module:twgl.FullArraySpec}.\n\t   *\n\t   *     var arrays = {\n\t   *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n\t   *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n\t   *       normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },\n\t   *       indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },\n\t   *     };\n\t   *\n\t   * @typedef {Object.<string, module:twgl.ArraySpec>} Arrays\n\t   * @memberOf module:twgl\n\t   */\n\n\t  /**\n\t   * Creates a set of attribute data and WebGLBuffers from set of arrays\n\t   *\n\t   * Given\n\t   *\n\t   *      var arrays = {\n\t   *        position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n\t   *        texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n\t   *        normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },\n\t   *        color:    { numComponents: 4, data: [255, 255, 255, 255, 255, 0, 0, 255, 0, 0, 255, 255], type: Uint8Array, },\n\t   *        indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },\n\t   *      };\n\t   *\n\t   * returns something like\n\t   *\n\t   *      var attribs = {\n\t   *        position: { numComponents: 3, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },\n\t   *        texcoord: { numComponents: 2, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },\n\t   *        normal:   { numComponents: 3, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },\n\t   *        color:    { numComponents: 4, type: gl.UNSIGNED_BYTE, normalize: true,  buffer: WebGLBuffer, },\n\t   *      };\n\t   *\n\t   * notes:\n\t   *\n\t   * *   Arrays can take various forms\n\t   *\n\t   *     Bare JavaScript Arrays\n\t   *\n\t   *         var arrays = {\n\t   *            position: [-1, 1, 0],\n\t   *            normal: [0, 1, 0],\n\t   *            ...\n\t   *         }\n\t   *\n\t   *     Bare TypedArrays\n\t   *\n\t   *         var arrays = {\n\t   *            position: new Float32Array([-1, 1, 0]),\n\t   *            color: new Uint8Array([255, 128, 64, 255]),\n\t   *            ...\n\t   *         }\n\t   *\n\t   * *   Will guess at `numComponents` if not specified based on name.\n\t   *\n\t   *     If `coord` is in the name assumes `numComponents = 2`\n\t   *\n\t   *     If `color` is in the name assumes `numComponents = 4`\n\t   *\n\t   *     otherwise assumes `numComponents = 3`\n\t   *\n\t   * @param {WebGLRenderingContext} gl The webgl rendering context.\n\t   * @param {module:twgl.Arrays} arrays The arrays\n\t   * @return {Object.<string, module:twgl.AttribInfo>} the attribs\n\t   * @memberOf module:twgl/attributes\n\t   */\n\t  function createAttribsFromArrays(gl, arrays) {\n\t    var attribs = {};\n\t    Object.keys(arrays).forEach(function (arrayName) {\n\t      if (!isIndices(arrayName)) {\n\t        var array = arrays[arrayName];\n\t        var attribName = array.attrib || array.name || array.attribName || defaults.attribPrefix + arrayName;\n\t        var buffer;\n\t        var type;\n\t        var normalization;\n\t        var numComponents;\n\t        var numValues;\n\t        if (typeof array === \"number\" || typeof array.data === \"number\") {\n\t          numValues = array.data || array;\n\t          var arrayType = array.type || Float32Array;\n\t          var numBytes = numValues * arrayType.BYTES_PER_ELEMENT;\n\t          type = typedArrays.getGLTypeForTypedArrayType(arrayType);\n\t          normalization = array.normalize !== undefined ? array.normalize : getNormalizationForTypedArrayType(arrayType);\n\t          numComponents = array.numComponents || array.size || guessNumComponentsFromName(arrayName, numValues);\n\t          buffer = gl.createBuffer();\n\t          gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n\t          gl.bufferData(gl.ARRAY_BUFFER, numBytes, array.drawType || gl.STATIC_DRAW);\n\t        } else {\n\t          var typedArray = makeTypedArray(array, arrayName);\n\t          buffer = createBufferFromTypedArray(gl, typedArray, undefined, array.drawType);\n\t          type = typedArrays.getGLTypeForTypedArray(typedArray);\n\t          normalization = array.normalize !== undefined ? array.normalize : getNormalizationForTypedArray(typedArray);\n\t          numComponents = getNumComponents(array, arrayName);\n\t          numValues = typedArray.length;\n\t        }\n\t        attribs[attribName] = {\n\t          buffer: buffer,\n\t          numComponents: numComponents,\n\t          type: type,\n\t          normalize: normalization,\n\t          stride: array.stride || 0,\n\t          offset: array.offset || 0,\n\t          drawType: array.drawType\n\t        };\n\t      }\n\t    });\n\t    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n\t    return attribs;\n\t  }\n\n\t  /**\n\t   * Sets the contents of a buffer attached to an attribInfo\n\t   *\n\t   * This is helper function to dynamically update a buffer.\n\t   *\n\t   * Let's say you make a bufferInfo\n\t   *\n\t   *     var arrays = {\n\t   *        position: new Float32Array([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]),\n\t   *        texcoord: new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]),\n\t   *        normal:   new Float32Array([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]),\n\t   *        indices:  new Uint16Array([0, 1, 2, 1, 2, 3]),\n\t   *     };\n\t   *     var bufferInfo = twgl.createBufferInfoFromArrays(gl, arrays);\n\t   *\n\t   *  And you want to dynamically upate the positions. You could do this\n\t   *\n\t   *     // assuming arrays.position has already been updated with new data.\n\t   *     twgl.setAttribInfoBufferFromArray(gl, bufferInfo.attribs.position, arrays.position);\n\t   *\n\t   * @param {WebGLRenderingContext} gl\n\t   * @param {AttribInfo} attribInfo The attribInfo who's buffer contents to set. NOTE: If you have an attribute prefix\n\t   *   the name of the attribute will include the prefix.\n\t   * @param {ArraySpec} array Note: it is arguably ineffient to pass in anything but a typed array because anything\n\t   *    else will have to be converted to a typed array before it can be used by WebGL. During init time that\n\t   *    inefficiency is usually not important but if you're updating data dynamically best to be efficient.\n\t   * @param {number} [offset] an optional offset into the buffer. This is only an offset into the WebGL buffer\n\t   *    not the array. To pass in an offset into the array itself use a typed array and create an `ArrayBufferView`\n\t   *    for the portion of the array you want to use.\n\t   *\n\t   *        var someArray = new Float32Array(1000); // an array with 1000 floats\n\t   *        var someSubArray = new Float32Array(someArray.buffer, offsetInBytes, sizeInUnits); // a view into someArray\n\t   *\n\t   *    Now you can pass `someSubArray` into setAttribInfoBufferFromArray`\n\t   * @memberOf module:twgl/attributes\n\t   */\n\t  function setAttribInfoBufferFromArray(gl, attribInfo, array, offset) {\n\t    array = makeTypedArray(array);\n\t    if (offset !== undefined) {\n\t      gl.bindBuffer(gl.ARRAY_BUFFER, attribInfo.buffer);\n\t      gl.bufferSubData(gl.ARRAY_BUFFER, offset, array);\n\t    } else {\n\t      setBufferFromTypedArray(gl, gl.ARRAY_BUFFER, attribInfo.buffer, array, attribInfo.drawType);\n\t    }\n\t  }\n\n\t  function getBytesPerValueForGLType(gl, type) {\n\t    if (type === gl.BYTE) return 1; // eslint-disable-line\n\t    if (type === gl.UNSIGNED_BYTE) return 1; // eslint-disable-line\n\t    if (type === gl.SHORT) return 2; // eslint-disable-line\n\t    if (type === gl.UNSIGNED_SHORT) return 2; // eslint-disable-line\n\t    if (type === gl.INT) return 4; // eslint-disable-line\n\t    if (type === gl.UNSIGNED_INT) return 4; // eslint-disable-line\n\t    if (type === gl.FLOAT) return 4; // eslint-disable-line\n\t    return 0;\n\t  }\n\n\t  /**\n\t   * tries to get the number of elements from a set of arrays.\n\t   */\n\t  var positionKeys = ['position', 'positions', 'a_position'];\n\t  function getNumElementsFromNonIndexedArrays(arrays) {\n\t    var key;\n\t    for (var ii = 0; ii < positionKeys.length; ++ii) {\n\t      key = positionKeys[ii];\n\t      if (key in arrays) {\n\t        break;\n\t      }\n\t    }\n\t    if (ii === positionKeys.length) {\n\t      key = Object.keys(arrays)[0];\n\t    }\n\t    var array = arrays[key];\n\t    var length = getArray(array).length;\n\t    var numComponents = getNumComponents(array, key);\n\t    var numElements = length / numComponents;\n\t    if (length % numComponents > 0) {\n\t      throw \"numComponents \" + numComponents + \" not correct for length \" + length;\n\t    }\n\t    return numElements;\n\t  }\n\n\t  function getNumElementsFromAttributes(gl, attribs) {\n\t    var key;\n\t    for (var ii = 0; ii < positionKeys.length; ++ii) {\n\t      key = positionKeys[ii];\n\t      if (key in attribs) {\n\t        break;\n\t      }\n\t      key = defaults.attribPrefix + key;\n\t      if (key in attribs) {\n\t        break;\n\t      }\n\t    }\n\t    if (ii === positionKeys.length) {\n\t      key = Object.keys(attribs)[0];\n\t    }\n\t    var attrib = attribs[key];\n\t    gl.bindBuffer(gl.ARRAY_BUFFER, attrib.buffer);\n\t    var numBytes = gl.getBufferParameter(gl.ARRAY_BUFFER, gl.BUFFER_SIZE);\n\t    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n\t    var bytesPerValue = getBytesPerValueForGLType(gl, attrib.type);\n\t    var totalElements = numBytes / bytesPerValue;\n\t    var numComponents = attrib.numComponents || attrib.size;\n\t    // TODO: check stride\n\t    var numElements = totalElements / numComponents;\n\t    if (numElements % 1 !== 0) {\n\t      throw \"numComponents \" + numComponents + \" not correct for length \" + length;\n\t    }\n\t    return numElements;\n\t  }\n\n\t  /**\n\t   * @typedef {Object} BufferInfo\n\t   * @property {number} numElements The number of elements to pass to `gl.drawArrays` or `gl.drawElements`.\n\t   * @property {number} [elementType] The type of indices `UNSIGNED_BYTE`, `UNSIGNED_SHORT` etc..\n\t   * @property {WebGLBuffer} [indices] The indices `ELEMENT_ARRAY_BUFFER` if any indices exist.\n\t   * @property {Object.<string, module:twgl.AttribInfo>} [attribs] The attribs approriate to call `setAttributes`\n\t   * @memberOf module:twgl\n\t   */\n\n\t  /**\n\t   * Creates a BufferInfo from an object of arrays.\n\t   *\n\t   * This can be passed to {@link module:twgl.setBuffersAndAttributes} and to\n\t   * {@link module:twgl:drawBufferInfo}.\n\t   *\n\t   * Given an object like\n\t   *\n\t   *     var arrays = {\n\t   *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n\t   *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n\t   *       normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },\n\t   *       indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },\n\t   *     };\n\t   *\n\t   *  Creates an BufferInfo like this\n\t   *\n\t   *     bufferInfo = {\n\t   *       numElements: 4,        // or whatever the number of elements is\n\t   *       indices: WebGLBuffer,  // this property will not exist if there are no indices\n\t   *       attribs: {\n\t   *         a_position: { buffer: WebGLBuffer, numComponents: 3, },\n\t   *         a_normal:   { buffer: WebGLBuffer, numComponents: 3, },\n\t   *         a_texcoord: { buffer: WebGLBuffer, numComponents: 2, },\n\t   *       },\n\t   *     };\n\t   *\n\t   *  The properties of arrays can be JavaScript arrays in which case the number of components\n\t   *  will be guessed.\n\t   *\n\t   *     var arrays = {\n\t   *        position: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0],\n\t   *        texcoord: [0, 0, 0, 1, 1, 0, 1, 1],\n\t   *        normal:   [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],\n\t   *        indices:  [0, 1, 2, 1, 2, 3],\n\t   *     };\n\t   *\n\t   *  They can also by TypedArrays\n\t   *\n\t   *     var arrays = {\n\t   *        position: new Float32Array([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]),\n\t   *        texcoord: new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]),\n\t   *        normal:   new Float32Array([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]),\n\t   *        indices:  new Uint16Array([0, 1, 2, 1, 2, 3]),\n\t   *     };\n\t   *\n\t   *  Or augmentedTypedArrays\n\t   *\n\t   *     var positions = createAugmentedTypedArray(3, 4);\n\t   *     var texcoords = createAugmentedTypedArray(2, 4);\n\t   *     var normals   = createAugmentedTypedArray(3, 4);\n\t   *     var indices   = createAugmentedTypedArray(3, 2, Uint16Array);\n\t   *\n\t   *     positions.push([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]);\n\t   *     texcoords.push([0, 0, 0, 1, 1, 0, 1, 1]);\n\t   *     normals.push([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]);\n\t   *     indices.push([0, 1, 2, 1, 2, 3]);\n\t   *\n\t   *     var arrays = {\n\t   *        position: positions,\n\t   *        texcoord: texcoords,\n\t   *        normal:   normals,\n\t   *        indices:  indices,\n\t   *     };\n\t   *\n\t   * For the last example it is equivalent to\n\t   *\n\t   *     var bufferInfo = {\n\t   *       attribs: {\n\t   *         a_position: { numComponents: 3, buffer: gl.createBuffer(), },\n\t   *         a_texcoods: { numComponents: 2, buffer: gl.createBuffer(), },\n\t   *         a_normals: { numComponents: 3, buffer: gl.createBuffer(), },\n\t   *       },\n\t   *       indices: gl.createBuffer(),\n\t   *       numElements: 6,\n\t   *     };\n\t   *\n\t   *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.a_position.buffer);\n\t   *     gl.bufferData(gl.ARRAY_BUFFER, arrays.position, gl.STATIC_DRAW);\n\t   *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.a_texcoord.buffer);\n\t   *     gl.bufferData(gl.ARRAY_BUFFER, arrays.texcoord, gl.STATIC_DRAW);\n\t   *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.a_normal.buffer);\n\t   *     gl.bufferData(gl.ARRAY_BUFFER, arrays.normal, gl.STATIC_DRAW);\n\t   *     gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufferInfo.indices);\n\t   *     gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, arrays.indices, gl.STATIC_DRAW);\n\t   *\n\t   * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n\t   * @param {module:twgl.Arrays} arrays Your data\n\t   * @return {module:twgl.BufferInfo} A BufferInfo\n\t   * @memberOf module:twgl/attributes\n\t   */\n\t  function createBufferInfoFromArrays(gl, arrays) {\n\t    var bufferInfo = {\n\t      attribs: createAttribsFromArrays(gl, arrays)\n\t    };\n\t    var indices = arrays.indices;\n\t    if (indices) {\n\t      indices = makeTypedArray(indices, \"indices\");\n\t      bufferInfo.indices = createBufferFromTypedArray(gl, indices, gl.ELEMENT_ARRAY_BUFFER);\n\t      bufferInfo.numElements = indices.length;\n\t      bufferInfo.elementType = typedArrays.getGLTypeForTypedArray(indices);\n\t    } else {\n\t      bufferInfo.numElements = getNumElementsFromAttributes(gl, bufferInfo.attribs);\n\t    }\n\n\t    return bufferInfo;\n\t  }\n\n\t  /**\n\t   * Creates a buffer from an array, typed array, or array spec\n\t   *\n\t   * Given something like this\n\t   *\n\t   *     [1, 2, 3],\n\t   *\n\t   * or\n\t   *\n\t   *     new Uint16Array([1,2,3]);\n\t   *\n\t   * or\n\t   *\n\t   *     {\n\t   *        data: [1, 2, 3],\n\t   *        type: Uint8Array,\n\t   *     }\n\t   *\n\t   * returns a WebGLBuffer that constains the given data.\n\t   *\n\t   * @param {WebGLRenderingContext} gl A WebGLRenderingContext.\n\t   * @param {module:twgl.ArraySpec} array an array, typed array, or array spec.\n\t   * @param {string} arrayName name of array. Used to guess the type if type can not be dervied other wise.\n\t   * @return {WebGLBuffer} a WebGLBuffer containing the data in array.\n\t   * @memberOf module:twgl/attributes\n\t   */\n\t  function createBufferFromArray(gl, array, arrayName) {\n\t    var type = arrayName === \"indices\" ? gl.ELEMENT_ARRAY_BUFFER : gl.ARRAY_BUFFER;\n\t    var typedArray = makeTypedArray(array, arrayName);\n\t    return createBufferFromTypedArray(gl, typedArray, type);\n\t  }\n\n\t  /**\n\t   * Creates buffers from arrays or typed arrays\n\t   *\n\t   * Given something like this\n\t   *\n\t   *     var arrays = {\n\t   *        positions: [1, 2, 3],\n\t   *        normals: [0, 0, 1],\n\t   *     }\n\t   *\n\t   * returns something like\n\t   *\n\t   *     buffers = {\n\t   *       positions: WebGLBuffer,\n\t   *       normals: WebGLBuffer,\n\t   *     }\n\t   *\n\t   * If the buffer is named 'indices' it will be made an ELEMENT_ARRAY_BUFFER.\n\t   *\n\t   * @param {WebGLRenderingContext} gl A WebGLRenderingContext.\n\t   * @param {module:twgl.Arrays} arrays\n\t   * @return {Object<string, WebGLBuffer>} returns an object with one WebGLBuffer per array\n\t   * @memberOf module:twgl/attributes\n\t   */\n\t  function createBuffersFromArrays(gl, arrays) {\n\t    var buffers = {};\n\t    Object.keys(arrays).forEach(function (key) {\n\t      buffers[key] = createBufferFromArray(gl, arrays[key], key);\n\t    });\n\n\t    // Ugh!\n\t    if (arrays.indices) {\n\t      buffers.numElements = arrays.indices.length;\n\t      buffers.elementType = typedArrays.getGLTypeForTypedArray(makeTypedArray(arrays.indices), 'indices');\n\t    } else {\n\t      buffers.numElements = getNumElementsFromNonIndexedArrays(arrays);\n\t    }\n\n\t    return buffers;\n\t  }\n\n\t  // Using quotes prevents Uglify from changing the names.\n\t  // No speed diff AFAICT.\n\t  return {\n\t    \"createAttribsFromArrays\": createAttribsFromArrays,\n\t    \"createBuffersFromArrays\": createBuffersFromArrays,\n\t    \"createBufferFromArray\": createBufferFromArray,\n\t    \"createBufferFromTypedArray\": createBufferFromTypedArray,\n\t    \"createBufferInfoFromArrays\": createBufferInfoFromArrays,\n\t    \"setAttribInfoBufferFromArray\": setAttribInfoBufferFromArray,\n\n\t    \"setAttributePrefix\": setAttributePrefix,\n\n\t    \"setDefaults_\": setDefaults,\n\t    \"getNumComponents_\": getNumComponents,\n\t    \"getArray_\": getArray\n\t  };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\"use strict\";\n\n\t/*\n\t * Copyright 2015, Gregg Tavares.\n\t * All rights reserved.\n\t *\n\t * Redistribution and use in source and binary forms, with or without\n\t * modification, are permitted provided that the following conditions are\n\t * met:\n\t *\n\t *     * Redistributions of source code must retain the above copyright\n\t * notice, this list of conditions and the following disclaimer.\n\t *     * Redistributions in binary form must reproduce the above\n\t * copyright notice, this list of conditions and the following disclaimer\n\t * in the documentation and/or other materials provided with the\n\t * distribution.\n\t *     * Neither the name of Gregg Tavares. nor the names of his\n\t * contributors may be used to endorse or promote products derived from\n\t * this software without specific prior written permission.\n\t *\n\t * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\t * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n\t * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n\t * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n\t * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n\t * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n\t * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n\t * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n\t * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\t * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n\t * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\t */\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n\t  \"use strict\";\n\n\t  /**\n\t   * Low level shader typed array related functions\n\t   *\n\t   * You should generally not need to use these functions. They are provided\n\t   * for those cases where you're doing something out of the ordinary\n\t   * and you need lower level access.\n\t   *\n\t   * For backward compatibily they are available at both `twgl.typedArray` and `twgl`\n\t   * itself\n\t   *\n\t   * See {@link module:twgl} for core functions\n\t   *\n\t   * @module twgl/typedArray\n\t   */\n\n\t  // make sure we don't see a global gl\n\n\t  var gl = undefined; // eslint-disable-line\n\n\t  /* DataType */\n\t  var BYTE = 0x1400;\n\t  var UNSIGNED_BYTE = 0x1401;\n\t  var SHORT = 0x1402;\n\t  var UNSIGNED_SHORT = 0x1403;\n\t  var INT = 0x1404;\n\t  var UNSIGNED_INT = 0x1405;\n\t  var FLOAT = 0x1406;\n\t  var UNSIGNED_SHORT_4_4_4_4 = 0x8033;\n\t  var UNSIGNED_SHORT_5_5_5_1 = 0x8034;\n\t  var UNSIGNED_SHORT_5_6_5 = 0x8363;\n\t  var HALF_FLOAT = 0x140B;\n\t  var UNSIGNED_INT_2_10_10_10_REV = 0x8368;\n\t  var UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;\n\t  var UNSIGNED_INT_5_9_9_9_REV = 0x8C3E;\n\t  var FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;\n\t  var UNSIGNED_INT_24_8 = 0x84FA;\n\n\t  var glTypeToTypedArray = {};\n\t  {\n\t    var tt = glTypeToTypedArray;\n\t    tt[BYTE] = Int8Array;\n\t    tt[UNSIGNED_BYTE] = Uint8Array;\n\t    tt[SHORT] = Int16Array;\n\t    tt[UNSIGNED_SHORT] = Uint16Array;\n\t    tt[INT] = Int32Array;\n\t    tt[UNSIGNED_INT] = Uint32Array;\n\t    tt[FLOAT] = Float32Array;\n\t    tt[UNSIGNED_SHORT_4_4_4_4] = Uint16Array;\n\t    tt[UNSIGNED_SHORT_5_5_5_1] = Uint16Array;\n\t    tt[UNSIGNED_SHORT_5_6_5] = Uint16Array;\n\t    tt[HALF_FLOAT] = Uint16Array;\n\t    tt[UNSIGNED_INT_2_10_10_10_REV] = Uint32Array;\n\t    tt[UNSIGNED_INT_10F_11F_11F_REV] = Uint32Array;\n\t    tt[UNSIGNED_INT_5_9_9_9_REV] = Uint32Array;\n\t    tt[FLOAT_32_UNSIGNED_INT_24_8_REV] = Uint32Array;\n\t    tt[UNSIGNED_INT_24_8] = Uint32Array;\n\t  }\n\n\t  /**\n\t   * Get the GL type for a typedArray\n\t   * @param {ArrayBuffer|ArrayBufferView} typedArray a typedArray\n\t   * @return {number} the GL type for array. For example pass in an `Int8Array` and `gl.BYTE` will\n\t   *   be returned. Pass in a `Uint32Array` and `gl.UNSIGNED_INT` will be returned\n\t   * @memberOf module:twgl/typedArray\n\t   */\n\t  function getGLTypeForTypedArray(typedArray) {\n\t    if (typedArray instanceof Int8Array) {\n\t      return BYTE;\n\t    } // eslint-disable-line\n\t    if (typedArray instanceof Uint8Array) {\n\t      return UNSIGNED_BYTE;\n\t    } // eslint-disable-line\n\t    if (typedArray instanceof Uint8ClampedArray) {\n\t      return UNSIGNED_BYTE;\n\t    } // eslint-disable-line\n\t    if (typedArray instanceof Int16Array) {\n\t      return SHORT;\n\t    } // eslint-disable-line\n\t    if (typedArray instanceof Uint16Array) {\n\t      return UNSIGNED_SHORT;\n\t    } // eslint-disable-line\n\t    if (typedArray instanceof Int32Array) {\n\t      return INT;\n\t    } // eslint-disable-line\n\t    if (typedArray instanceof Uint32Array) {\n\t      return UNSIGNED_INT;\n\t    } // eslint-disable-line\n\t    if (typedArray instanceof Float32Array) {\n\t      return FLOAT;\n\t    } // eslint-disable-line\n\t    throw \"unsupported typed array type\";\n\t  }\n\n\t  /**\n\t   * Get the GL type for a typedArray type\n\t   * @param {ArrayBufferViewType} typedArrayType a typedArray constructor\n\t   * @return {number} the GL type for type. For example pass in `Int8Array` and `gl.BYTE` will\n\t   *   be returned. Pass in `Uint32Array` and `gl.UNSIGNED_INT` will be returned\n\t   * @memberOf module:twgl/typedArray\n\t   */\n\t  function getGLTypeForTypedArrayType(typedArrayType) {\n\t    if (typedArrayType === Int8Array) {\n\t      return BYTE;\n\t    } // eslint-disable-line\n\t    if (typedArrayType === Uint8Array) {\n\t      return UNSIGNED_BYTE;\n\t    } // eslint-disable-line\n\t    if (typedArrayType === Uint8ClampedArray) {\n\t      return UNSIGNED_BYTE;\n\t    } // eslint-disable-line\n\t    if (typedArrayType === Int16Array) {\n\t      return SHORT;\n\t    } // eslint-disable-line\n\t    if (typedArrayType === Uint16Array) {\n\t      return UNSIGNED_SHORT;\n\t    } // eslint-disable-line\n\t    if (typedArrayType === Int32Array) {\n\t      return INT;\n\t    } // eslint-disable-line\n\t    if (typedArrayType === Uint32Array) {\n\t      return UNSIGNED_INT;\n\t    } // eslint-disable-line\n\t    if (typedArrayType === Float32Array) {\n\t      return FLOAT;\n\t    } // eslint-disable-line\n\t    throw \"unsupported typed array type\";\n\t  }\n\n\t  /**\n\t   * Get the typed array constructor for a given GL type\n\t   * @param {number} type the GL type. (eg: `gl.UNSIGNED_INT`)\n\t   * @return {function} the constructor for a the corresponding typed array. (eg. `Uint32Array`).\n\t   * @memberOf module:twgl/typedArray\n\t   */\n\t  function getTypedArrayTypeForGLType(type) {\n\t    var CTOR = glTypeToTypedArray[type];\n\t    if (!CTOR) {\n\t      throw \"unknown gl type\";\n\t    }\n\t    return CTOR;\n\t  }\n\n\t  function isArrayBuffer(a) {\n\t    return a && a.buffer && a.buffer instanceof ArrayBuffer;\n\t  }\n\n\t  // Using quotes prevents Uglify from changing the names.\n\t  return {\n\t    \"getGLTypeForTypedArray\": getGLTypeForTypedArray,\n\t    \"getGLTypeForTypedArrayType\": getGLTypeForTypedArrayType,\n\t    \"getTypedArrayTypeForGLType\": getTypedArrayTypeForGLType,\n\t    \"isArrayBuffer\": isArrayBuffer\n\t  };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\"use strict\";\n\n\t/*\n\t * Copyright 2015, Gregg Tavares.\n\t * All rights reserved.\n\t *\n\t * Redistribution and use in source and binary forms, with or without\n\t * modification, are permitted provided that the following conditions are\n\t * met:\n\t *\n\t *     * Redistributions of source code must retain the above copyright\n\t * notice, this list of conditions and the following disclaimer.\n\t *     * Redistributions in binary form must reproduce the above\n\t * copyright notice, this list of conditions and the following disclaimer\n\t * in the documentation and/or other materials provided with the\n\t * distribution.\n\t *     * Neither the name of Gregg Tavares. nor the names of his\n\t * contributors may be used to endorse or promote products derived from\n\t * this software without specific prior written permission.\n\t *\n\t * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\t * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n\t * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n\t * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n\t * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n\t * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n\t * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n\t * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n\t * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\t * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n\t * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\t */\n\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n\t  \"use strict\";\n\n\t  /**\n\t   * Copy an object 1 level deep\n\t   * @param {object} src object to copy\n\t   * @return {object} the copy\n\t   */\n\n\t  function shallowCopy(src) {\n\t    var dst = {};\n\t    Object.keys(src).forEach(function (key) {\n\t      dst[key] = src[key];\n\t    });\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Copy named properties\n\t   *\n\t   * @param {string[]} names names of properties to copy\n\t   * @param {object} src object to copy properties from\n\t   * @param {object} dst object to copy properties to\n\t   */\n\t  function copyNamedProperties(names, src, dst) {\n\t    names.forEach(function (name) {\n\t      var value = src[name];\n\t      if (value !== undefined) {\n\t        dst[name] = value;\n\t      }\n\t    });\n\t  }\n\n\t  /**\n\t   * Copies properties from source to dest only if a matching key is in dest\n\t   *\n\t   * @param {Object.<string, ?>} src the source\n\t   * @param {Object.<string, ?>} dst the dest\n\t   */\n\t  function copyExistingProperties(src, dst) {\n\t    Object.keys(dst).forEach(function (key) {\n\t      if (dst.hasOwnProperty(key) && src.hasOwnProperty(key)) {\n\t        dst[key] = src[key];\n\t      }\n\t    });\n\t  }\n\n\t  /**\n\t   * Gets the gl version as a number\n\t   * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n\t   * @return {number} version of gl\n\t   */\n\t  //function getVersionAsNumber(gl) {\n\t  //  return parseFloat(gl.getParameter(gl.VERSION).substr(6));\n\t  //}\n\n\t  /**\n\t   * Check if context is WebGL 2.0\n\t   * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n\t   * @return {bool} true if it's WebGL 2.0\n\t   * @memberOf module:twgl\n\t   */\n\t  function isWebGL2(gl) {\n\t    // This is the correct check but it's slow\n\t    //return gl.getParameter(gl.VERSION).indexOf(\"WebGL 2.0\") === 0;\n\t    // This might also be the correct check but I'm assuming it's slow-ish\n\t    // return gl instanceof WebGL2RenderingContext;\n\t    return !!gl.texStorage2D;\n\t  }\n\n\t  /**\n\t   * Check if context is WebGL 1.0\n\t   * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n\t   * @return {bool} true if it's WebGL 1.0\n\t   * @memberOf module:twgl\n\t   */\n\t  function isWebGL1(gl) {\n\t    // This is the correct check but it's slow\n\t    //var version = getVersionAsNumber(gl);\n\t    //return version <= 1.0 && version > 0.0;  // because as of 2016/5 Edge returns 0.96\n\t    // This might also be the correct check but I'm assuming it's slow-ish\n\t    // return gl instanceof WebGLRenderingContext;\n\t    return !gl.texStorage2D;\n\t  }\n\n\t  var error = window.console && window.console.error && typeof window.console.error === \"function\" ? window.console.error.bind(window.console) : function () {};\n\n\t  var warn = window.console && window.console.warn && typeof window.console.warn === \"function\" ? window.console.warn.bind(window.console) : function () {};\n\n\t  return {\n\t    copyExistingProperties: copyExistingProperties,\n\t    copyNamedProperties: copyNamedProperties,\n\t    shallowCopy: shallowCopy,\n\t    isWebGL1: isWebGL1,\n\t    isWebGL2: isWebGL2,\n\t    error: error,\n\t    warn: warn\n\t  };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\"use strict\";\n\n\t/*\n\t * Copyright 2015, Gregg Tavares.\n\t * All rights reserved.\n\t *\n\t * Redistribution and use in source and binary forms, with or without\n\t * modification, are permitted provided that the following conditions are\n\t * met:\n\t *\n\t *     * Redistributions of source code must retain the above copyright\n\t * notice, this list of conditions and the following disclaimer.\n\t *     * Redistributions in binary form must reproduce the above\n\t * copyright notice, this list of conditions and the following disclaimer\n\t * in the documentation and/or other materials provided with the\n\t * distribution.\n\t *     * Neither the name of Gregg Tavares. nor the names of his\n\t * contributors may be used to endorse or promote products derived from\n\t * this software without specific prior written permission.\n\t *\n\t * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\t * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n\t * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n\t * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n\t * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n\t * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n\t * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n\t * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n\t * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\t * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n\t * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\t */\n\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(6)], __WEBPACK_AMD_DEFINE_RESULT__ = function (programs) {\n\t  \"use strict\";\n\n\t  /**\n\t   * Drawing related functions\n\t   *\n\t   * For backward compatibily they are available at both `twgl.draw` and `twgl`\n\t   * itself\n\t   *\n\t   * See {@link module:twgl} for core functions\n\t   *\n\t   * @module twgl/draw\n\t   */\n\n\t  /**\n\t   * Calls `gl.drawElements` or `gl.drawArrays`, whichever is appropriate\n\t   *\n\t   * normally you'd call `gl.drawElements` or `gl.drawArrays` yourself\n\t   * but calling this means if you switch from indexed data to non-indexed\n\t   * data you don't have to remember to update your draw call.\n\t   *\n\t   * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n\t   * @param {(module:twgl.BufferInfo|module:twgl.VertexArrayInfo)} bufferInfo A BufferInfo as returned from {@link module:twgl.createBufferInfoFromArrays} or\n\t   *   a VertexArrayInfo as returned from {@link module:twgl.createVertexArrayInfo}\n\t   * @param {enum} [type] eg (gl.TRIANGLES, gl.LINES, gl.POINTS, gl.TRIANGLE_STRIP, ...). Defaults to `gl.TRIANGLES`\n\t   * @param {number} [count] An optional count. Defaults to bufferInfo.numElements\n\t   * @param {number} [offset] An optional offset. Defaults to 0.\n\t   * @memberOf module:twgl/draw\n\t   */\n\n\t  function drawBufferInfo(gl, bufferInfo, type, count, offset) {\n\t    type = type === undefined ? gl.TRIANGLES : type;\n\t    var indices = bufferInfo.indices;\n\t    var elementType = bufferInfo.elementType;\n\t    var numElements = count === undefined ? bufferInfo.numElements : count;\n\t    offset = offset === undefined ? 0 : offset;\n\t    if (elementType || indices) {\n\t      gl.drawElements(type, numElements, elementType === undefined ? gl.UNSIGNED_SHORT : bufferInfo.elementType, offset);\n\t    } else {\n\t      gl.drawArrays(type, offset, numElements);\n\t    }\n\t  }\n\n\t  /**\n\t   * A DrawObject is useful for putting objects in to an array and passing them to {@link module:twgl.drawObjectList}.\n\t   *\n\t   * You need either a `BufferInfo` or a `VertexArrayInfo`.\n\t   *\n\t   * @typedef {Object} DrawObject\n\t   * @property {boolean} [active] whether or not to draw. Default = `true` (must be `false` to be not true). In otherwords `undefined` = `true`\n\t   * @property {number} [type] type to draw eg. `gl.TRIANGLES`, `gl.LINES`, etc...\n\t   * @property {module:twgl.ProgramInfo} programInfo A ProgramInfo as returned from {@link module:twgl.createProgramInfo}\n\t   * @property {module:twgl.BufferInfo} [bufferInfo] A BufferInfo as returned from {@link module:twgl.createBufferInfoFromArrays}\n\t   * @property {module:twgl.VertexArrayInfo} [vertexArrayInfo] A VertexArrayInfo as returned from {@link module:twgl.createVertexArrayInfo}\n\t   * @property {Object<string, ?>} uniforms The values for the uniforms.\n\t   *   You can pass multiple objects by putting them in an array. For example\n\t   *\n\t   *     var sharedUniforms = {\n\t   *       u_fogNear: 10,\n\t   *       u_projection: ...\n\t   *       ...\n\t   *     };\n\t   *\n\t   *     var localUniforms = {\n\t   *       u_world: ...\n\t   *       u_diffuseColor: ...\n\t   *     };\n\t   *\n\t   *     var drawObj = {\n\t   *       ...\n\t   *       uniforms: [sharedUniforms, localUniforms],\n\t   *     };\n\t   *\n\t   * @property {number} [offset] the offset to pass to `gl.drawArrays` or `gl.drawElements`. Defaults to 0.\n\t   * @property {number} [count] the count to pass to `gl.drawArrays` or `gl.drawElemnts`. Defaults to bufferInfo.numElements.\n\t   * @memberOf module:twgl\n\t   */\n\n\t  /**\n\t   * Draws a list of objects\n\t   * @param {DrawObject[]} objectsToDraw an array of objects to draw.\n\t   * @memberOf module:twgl/draw\n\t   */\n\t  function drawObjectList(gl, objectsToDraw) {\n\t    var lastUsedProgramInfo = null;\n\t    var lastUsedBufferInfo = null;\n\n\t    objectsToDraw.forEach(function (object) {\n\t      if (object.active === false) {\n\t        return;\n\t      }\n\n\t      var programInfo = object.programInfo;\n\t      var bufferInfo = object.vertexArrayInfo || object.bufferInfo;\n\t      var bindBuffers = false;\n\t      var type = object.type === undefined ? gl.TRIANGLES : object.type;\n\n\t      if (programInfo !== lastUsedProgramInfo) {\n\t        lastUsedProgramInfo = programInfo;\n\t        gl.useProgram(programInfo.program);\n\n\t        // We have to rebind buffers when changing programs because we\n\t        // only bind buffers the program uses. So if 2 programs use the same\n\t        // bufferInfo but the 1st one uses only positions the when the\n\t        // we switch to the 2nd one some of the attributes will not be on.\n\t        bindBuffers = true;\n\t      }\n\n\t      // Setup all the needed attributes.\n\t      if (bindBuffers || bufferInfo !== lastUsedBufferInfo) {\n\t        if (lastUsedBufferInfo && lastUsedBufferInfo.vertexArrayObject && !bufferInfo.vertexArrayObject) {\n\t          gl.bindVertexArray(null);\n\t        }\n\t        lastUsedBufferInfo = bufferInfo;\n\t        programs.setBuffersAndAttributes(gl, programInfo, bufferInfo);\n\t      }\n\n\t      // Set the uniforms.\n\t      programs.setUniforms(programInfo, object.uniforms);\n\n\t      // Draw\n\t      drawBufferInfo(gl, bufferInfo, type, object.count, object.offset);\n\t    });\n\n\t    if (lastUsedBufferInfo.vertexArrayObject) {\n\t      gl.bindVertexArray(null);\n\t    }\n\t  }\n\n\t  // Using quotes prevents Uglify from changing the names.\n\t  // No speed diff AFAICT.\n\t  return {\n\t    \"drawBufferInfo\": drawBufferInfo,\n\t    \"drawObjectList\": drawObjectList\n\t  };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\"use strict\";\n\n\t/*\n\t * Copyright 2015, Gregg Tavares.\n\t * All rights reserved.\n\t *\n\t * Redistribution and use in source and binary forms, with or without\n\t * modification, are permitted provided that the following conditions are\n\t * met:\n\t *\n\t *     * Redistributions of source code must retain the above copyright\n\t * notice, this list of conditions and the following disclaimer.\n\t *     * Redistributions in binary form must reproduce the above\n\t * copyright notice, this list of conditions and the following disclaimer\n\t * in the documentation and/or other materials provided with the\n\t * distribution.\n\t *     * Neither the name of Gregg Tavares. nor the names of his\n\t * contributors may be used to endorse or promote products derived from\n\t * this software without specific prior written permission.\n\t *\n\t * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\t * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n\t * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n\t * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n\t * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n\t * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n\t * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n\t * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n\t * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\t * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n\t * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\t */\n\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function (utils) {\n\t  \"use strict\";\n\n\t  /**\n\t   * Low level shader program related functions\n\t   *\n\t   * You should generally not need to use these functions. They are provided\n\t   * for those cases where you're doing something out of the ordinary\n\t   * and you need lower level access.\n\t   *\n\t   * For backward compatibily they are available at both `twgl.programs` and `twgl`\n\t   * itself\n\t   *\n\t   * See {@link module:twgl} for core functions\n\t   *\n\t   * @module twgl/programs\n\t   */\n\n\t  var error = utils.error;\n\t  var warn = utils.warn;\n\n\t  var FLOAT = 0x1406;\n\t  var FLOAT_VEC2 = 0x8B50;\n\t  var FLOAT_VEC3 = 0x8B51;\n\t  var FLOAT_VEC4 = 0x8B52;\n\t  var INT = 0x1404;\n\t  var INT_VEC2 = 0x8B53;\n\t  var INT_VEC3 = 0x8B54;\n\t  var INT_VEC4 = 0x8B55;\n\t  var BOOL = 0x8B56;\n\t  var BOOL_VEC2 = 0x8B57;\n\t  var BOOL_VEC3 = 0x8B58;\n\t  var BOOL_VEC4 = 0x8B59;\n\t  var FLOAT_MAT2 = 0x8B5A;\n\t  var FLOAT_MAT3 = 0x8B5B;\n\t  var FLOAT_MAT4 = 0x8B5C;\n\t  var SAMPLER_2D = 0x8B5E;\n\t  var SAMPLER_CUBE = 0x8B60;\n\t  var SAMPLER_3D = 0x8B5F;\n\t  var SAMPLER_2D_SHADOW = 0x8B62;\n\t  var FLOAT_MAT2x3 = 0x8B65;\n\t  var FLOAT_MAT2x4 = 0x8B66;\n\t  var FLOAT_MAT3x2 = 0x8B67;\n\t  var FLOAT_MAT3x4 = 0x8B68;\n\t  var FLOAT_MAT4x2 = 0x8B69;\n\t  var FLOAT_MAT4x3 = 0x8B6A;\n\t  var SAMPLER_2D_ARRAY = 0x8DC1;\n\t  var SAMPLER_2D_ARRAY_SHADOW = 0x8DC4;\n\t  var SAMPLER_CUBE_SHADOW = 0x8DC5;\n\t  var UNSIGNED_INT = 0x1405;\n\t  var UNSIGNED_INT_VEC2 = 0x8DC6;\n\t  var UNSIGNED_INT_VEC3 = 0x8DC7;\n\t  var UNSIGNED_INT_VEC4 = 0x8DC8;\n\t  var INT_SAMPLER_2D = 0x8DCA;\n\t  var INT_SAMPLER_3D = 0x8DCB;\n\t  var INT_SAMPLER_CUBE = 0x8DCC;\n\t  var INT_SAMPLER_2D_ARRAY = 0x8DCF;\n\t  var UNSIGNED_INT_SAMPLER_2D = 0x8DD2;\n\t  var UNSIGNED_INT_SAMPLER_3D = 0x8DD3;\n\t  var UNSIGNED_INT_SAMPLER_CUBE = 0x8DD4;\n\t  var UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7;\n\n\t  var TEXTURE_2D = 0x0DE1;\n\t  var TEXTURE_CUBE_MAP = 0x8513;\n\t  var TEXTURE_3D = 0x806F;\n\t  var TEXTURE_2D_ARRAY = 0x8C1A;\n\n\t  var typeMap = {};\n\n\t  /**\n\t   * Returns the corresponding bind point for a given sampler type\n\t   */\n\t  function getBindPointForSamplerType(gl, type) {\n\t    return typeMap[type].bindPoint;\n\t  }\n\n\t  // This kind of sucks! If you could compose functions as in `var fn = gl[name];`\n\t  // this code could be a lot smaller but that is sadly really slow (T_T)\n\n\t  function floatSetter(gl, location) {\n\t    return function (v) {\n\t      gl.uniform1f(location, v);\n\t    };\n\t  }\n\n\t  function floatArraySetter(gl, location) {\n\t    return function (v) {\n\t      gl.uniform1fv(location, v);\n\t    };\n\t  }\n\n\t  function floatVec2Setter(gl, location) {\n\t    return function (v) {\n\t      gl.uniform2fv(location, v);\n\t    };\n\t  }\n\n\t  function floatVec3Setter(gl, location) {\n\t    return function (v) {\n\t      gl.uniform3fv(location, v);\n\t    };\n\t  }\n\n\t  function floatVec4Setter(gl, location) {\n\t    return function (v) {\n\t      gl.uniform4fv(location, v);\n\t    };\n\t  }\n\n\t  function intSetter(gl, location) {\n\t    return function (v) {\n\t      gl.uniform1i(location, v);\n\t    };\n\t  }\n\n\t  function intArraySetter(gl, location) {\n\t    return function (v) {\n\t      gl.uniform1iv(location, v);\n\t    };\n\t  }\n\n\t  function intVec2Setter(gl, location) {\n\t    return function (v) {\n\t      gl.uniform2iv(location, v);\n\t    };\n\t  }\n\n\t  function intVec3Setter(gl, location) {\n\t    return function (v) {\n\t      gl.uniform3iv(location, v);\n\t    };\n\t  }\n\n\t  function intVec4Setter(gl, location) {\n\t    return function (v) {\n\t      gl.uniform4iv(location, v);\n\t    };\n\t  }\n\n\t  function uintSetter(gl, location) {\n\t    return function (v) {\n\t      gl.uniform1ui(location, v);\n\t    };\n\t  }\n\n\t  function uintArraySetter(gl, location) {\n\t    return function (v) {\n\t      gl.uniform1uiv(location, v);\n\t    };\n\t  }\n\n\t  function uintVec2Setter(gl, location) {\n\t    return function (v) {\n\t      gl.uniform2uiv(location, v);\n\t    };\n\t  }\n\n\t  function uintVec3Setter(gl, location) {\n\t    return function (v) {\n\t      gl.uniform3uiv(location, v);\n\t    };\n\t  }\n\n\t  function uintVec4Setter(gl, location) {\n\t    return function (v) {\n\t      gl.uniform4uiv(location, v);\n\t    };\n\t  }\n\n\t  function floatMat2Setter(gl, location) {\n\t    return function (v) {\n\t      gl.uniformMatrix2fv(location, false, v);\n\t    };\n\t  }\n\n\t  function floatMat3Setter(gl, location) {\n\t    return function (v) {\n\t      gl.uniformMatrix3fv(location, false, v);\n\t    };\n\t  }\n\n\t  function floatMat4Setter(gl, location) {\n\t    return function (v) {\n\t      gl.uniformMatrix4fv(location, false, v);\n\t    };\n\t  }\n\n\t  function floatMat23Setter(gl, location) {\n\t    return function (v) {\n\t      gl.uniformMatrix2x3fv(location, false, v);\n\t    };\n\t  }\n\n\t  function floatMat32Setter(gl, location) {\n\t    return function (v) {\n\t      gl.uniformMatrix3x2fv(location, false, v);\n\t    };\n\t  }\n\n\t  function floatMat24Setter(gl, location) {\n\t    return function (v) {\n\t      gl.uniformMatrix2x4fv(location, false, v);\n\t    };\n\t  }\n\n\t  function floatMat42Setter(gl, location) {\n\t    return function (v) {\n\t      gl.uniformMatrix4x2fv(location, false, v);\n\t    };\n\t  }\n\n\t  function floatMat34Setter(gl, location) {\n\t    return function (v) {\n\t      gl.uniformMatrix3x4fv(location, false, v);\n\t    };\n\t  }\n\n\t  function floatMat43Setter(gl, location) {\n\t    return function (v) {\n\t      gl.uniformMatrix4x3fv(location, false, v);\n\t    };\n\t  }\n\n\t  function samplerSetter(gl, type, unit, location) {\n\t    var bindPoint = getBindPointForSamplerType(gl, type);\n\t    return utils.isWebGL2(gl) ? function (textureOrPair) {\n\t      var texture = void 0;\n\t      var sampler = void 0;\n\t      if (textureOrPair instanceof WebGLTexture) {\n\t        texture = textureOrPair;\n\t        sampler = null;\n\t      } else {\n\t        texture = textureOrPair.texture;\n\t        sampler = textureOrPair.sampler;\n\t      }\n\t      gl.uniform1i(location, unit);\n\t      gl.activeTexture(gl.TEXTURE0 + unit);\n\t      gl.bindTexture(bindPoint, texture);\n\t      gl.bindSampler(unit, sampler);\n\t    } : function (texture) {\n\t      gl.uniform1i(location, unit);\n\t      gl.activeTexture(gl.TEXTURE0 + unit);\n\t      gl.bindTexture(bindPoint, texture);\n\t    };\n\t  }\n\n\t  function samplerArraySetter(gl, type, unit, location, size) {\n\t    var bindPoint = getBindPointForSamplerType(gl, type);\n\t    var units = new Int32Array(size);\n\t    for (var ii = 0; ii < size; ++ii) {\n\t      units[ii] = unit + ii;\n\t    }\n\n\t    return utils.isWebGL2(gl) ? function (textures) {\n\t      gl.uniform1iv(location, units);\n\t      textures.forEach(function (textureOrPair, index) {\n\t        gl.activeTexture(gl.TEXTURE0 + units[index]);\n\t        var texture = void 0;\n\t        var sampler = void 0;\n\t        if (textureOrPair instanceof WebGLTexture) {\n\t          texture = textureOrPair;\n\t          sampler = null;\n\t        } else {\n\t          texture = textureOrPair.texture;\n\t          sampler = textureOrPair.sampler;\n\t        }\n\t        gl.bindSampler(unit, sampler);\n\t        gl.bindTexture(bindPoint, texture);\n\t      });\n\t    } : function (textures) {\n\t      gl.uniform1iv(location, units);\n\t      textures.forEach(function (texture, index) {\n\t        gl.activeTexture(gl.TEXTURE0 + units[index]);\n\t        gl.bindTexture(bindPoint, texture);\n\t      });\n\t    };\n\t  }\n\n\t  typeMap[FLOAT] = { Type: Float32Array, size: 4, setter: floatSetter, arraySetter: floatArraySetter };\n\t  typeMap[FLOAT_VEC2] = { Type: Float32Array, size: 8, setter: floatVec2Setter };\n\t  typeMap[FLOAT_VEC3] = { Type: Float32Array, size: 12, setter: floatVec3Setter };\n\t  typeMap[FLOAT_VEC4] = { Type: Float32Array, size: 16, setter: floatVec4Setter };\n\t  typeMap[INT] = { Type: Int32Array, size: 4, setter: intSetter, arraySetter: intArraySetter };\n\t  typeMap[INT_VEC2] = { Type: Int32Array, size: 8, setter: intVec2Setter };\n\t  typeMap[INT_VEC3] = { Type: Int32Array, size: 12, setter: intVec3Setter };\n\t  typeMap[INT_VEC4] = { Type: Int32Array, size: 16, setter: intVec4Setter };\n\t  typeMap[UNSIGNED_INT] = { Type: Uint32Array, size: 4, setter: uintSetter, arraySetter: uintArraySetter };\n\t  typeMap[UNSIGNED_INT_VEC2] = { Type: Uint32Array, size: 8, setter: uintVec2Setter };\n\t  typeMap[UNSIGNED_INT_VEC3] = { Type: Uint32Array, size: 12, setter: uintVec3Setter };\n\t  typeMap[UNSIGNED_INT_VEC4] = { Type: Uint32Array, size: 16, setter: uintVec4Setter };\n\t  typeMap[BOOL] = { Type: Uint32Array, size: 4, setter: intSetter, arraySetter: intArraySetter };\n\t  typeMap[BOOL_VEC2] = { Type: Uint32Array, size: 8, setter: intVec2Setter };\n\t  typeMap[BOOL_VEC3] = { Type: Uint32Array, size: 12, setter: intVec3Setter };\n\t  typeMap[BOOL_VEC4] = { Type: Uint32Array, size: 16, setter: intVec4Setter };\n\t  typeMap[FLOAT_MAT2] = { Type: Float32Array, size: 16, setter: floatMat2Setter };\n\t  typeMap[FLOAT_MAT3] = { Type: Float32Array, size: 36, setter: floatMat3Setter };\n\t  typeMap[FLOAT_MAT4] = { Type: Float32Array, size: 64, setter: floatMat4Setter };\n\t  typeMap[FLOAT_MAT2x3] = { Type: Float32Array, size: 24, setter: floatMat23Setter };\n\t  typeMap[FLOAT_MAT2x4] = { Type: Float32Array, size: 32, setter: floatMat24Setter };\n\t  typeMap[FLOAT_MAT3x2] = { Type: Float32Array, size: 24, setter: floatMat32Setter };\n\t  typeMap[FLOAT_MAT3x4] = { Type: Float32Array, size: 48, setter: floatMat34Setter };\n\t  typeMap[FLOAT_MAT4x2] = { Type: Float32Array, size: 32, setter: floatMat42Setter };\n\t  typeMap[FLOAT_MAT4x3] = { Type: Float32Array, size: 48, setter: floatMat43Setter };\n\t  typeMap[SAMPLER_2D] = { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D };\n\t  typeMap[SAMPLER_CUBE] = { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP };\n\t  typeMap[SAMPLER_3D] = { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: TEXTURE_3D };\n\t  typeMap[SAMPLER_2D_SHADOW] = { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D };\n\t  typeMap[SAMPLER_2D_ARRAY] = { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY };\n\t  typeMap[SAMPLER_2D_ARRAY_SHADOW] = { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY };\n\t  typeMap[SAMPLER_CUBE_SHADOW] = { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP };\n\t  typeMap[INT_SAMPLER_2D] = { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D };\n\t  typeMap[INT_SAMPLER_3D] = { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: TEXTURE_3D };\n\t  typeMap[INT_SAMPLER_CUBE] = { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP };\n\t  typeMap[INT_SAMPLER_2D_ARRAY] = { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY };\n\t  typeMap[UNSIGNED_INT_SAMPLER_2D] = { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D };\n\t  typeMap[UNSIGNED_INT_SAMPLER_3D] = { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: TEXTURE_3D };\n\t  typeMap[UNSIGNED_INT_SAMPLER_CUBE] = { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP };\n\t  typeMap[UNSIGNED_INT_SAMPLER_2D_ARRAY] = { Type: null, size: 0, setter: samplerSetter, arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY };\n\n\t  function floatAttribSetter(gl, index) {\n\t    return function (b) {\n\t      gl.bindBuffer(gl.ARRAY_BUFFER, b.buffer);\n\t      gl.enableVertexAttribArray(index);\n\t      gl.vertexAttribPointer(index, b.numComponents || b.size, b.type || gl.FLOAT, b.normalize || false, b.stride || 0, b.offset || 0);\n\t    };\n\t  }\n\n\t  function intAttribSetter(gl, index) {\n\t    return function (b) {\n\t      gl.bindBuffer(gl.ARRAY_BUFFER, b.buffer);\n\t      gl.enableVertexAttribArray(index);\n\t      gl.vertexAttribIPointer(index, b.numComponents || b.size, b.type || gl.INT, b.stride || 0, b.offset || 0);\n\t    };\n\t  }\n\n\t  function matAttribSetter(gl, index, typeInfo) {\n\t    var defaultSize = typeInfo.size;\n\t    var count = typeInfo.count;\n\n\t    return function (b) {\n\t      gl.bindBuffer(gl.ARRAY_BUFFER, b.buffer);\n\t      var numComponents = b.size || b.numComponents || defaultSize;\n\t      var size = numComponents / count;\n\t      var type = b.type || gl.FLOAT;\n\t      var typeInfo = typeMap[type];\n\t      var stride = typeInfo.size * numComponents;\n\t      var normalize = b.normalize || false;\n\t      var offset = b.offset || 0;\n\t      var rowOffset = stride / count;\n\t      for (var i = 0; i < count; ++i) {\n\t        gl.enableVertexAttribArray(index + i);\n\t        gl.vertexAttribPointer(index + i, size, type, normalize, stride, offset + rowOffset * i);\n\t      }\n\t    };\n\t  }\n\n\t  var attrTypeMap = {};\n\t  attrTypeMap[FLOAT] = { size: 4, setter: floatAttribSetter };\n\t  attrTypeMap[FLOAT_VEC2] = { size: 8, setter: floatAttribSetter };\n\t  attrTypeMap[FLOAT_VEC3] = { size: 12, setter: floatAttribSetter };\n\t  attrTypeMap[FLOAT_VEC4] = { size: 16, setter: floatAttribSetter };\n\t  attrTypeMap[INT] = { size: 4, setter: intAttribSetter };\n\t  attrTypeMap[INT_VEC2] = { size: 8, setter: intAttribSetter };\n\t  attrTypeMap[INT_VEC3] = { size: 12, setter: intAttribSetter };\n\t  attrTypeMap[INT_VEC4] = { size: 16, setter: intAttribSetter };\n\t  attrTypeMap[UNSIGNED_INT] = { size: 4, setter: intAttribSetter };\n\t  attrTypeMap[UNSIGNED_INT_VEC2] = { size: 8, setter: intAttribSetter };\n\t  attrTypeMap[UNSIGNED_INT_VEC3] = { size: 12, setter: intAttribSetter };\n\t  attrTypeMap[UNSIGNED_INT_VEC4] = { size: 16, setter: intAttribSetter };\n\t  attrTypeMap[BOOL] = { size: 4, setter: intAttribSetter };\n\t  attrTypeMap[BOOL_VEC2] = { size: 8, setter: intAttribSetter };\n\t  attrTypeMap[BOOL_VEC3] = { size: 12, setter: intAttribSetter };\n\t  attrTypeMap[BOOL_VEC4] = { size: 16, setter: intAttribSetter };\n\t  attrTypeMap[FLOAT_MAT2] = { size: 4, setter: matAttribSetter, count: 2 };\n\t  attrTypeMap[FLOAT_MAT3] = { size: 9, setter: matAttribSetter, count: 3 };\n\t  attrTypeMap[FLOAT_MAT4] = { size: 16, setter: matAttribSetter, count: 4 };\n\n\t  // make sure we don't see a global gl\n\t  var gl = undefined; // eslint-disable-line\n\n\t  /**\n\t   * Error Callback\n\t   * @callback ErrorCallback\n\t   * @param {string} msg error message.\n\t   * @param {number} [lineOffset] amount to add to line number\n\t   * @memberOf module:twgl\n\t   */\n\n\t  function addLineNumbers(src, lineOffset) {\n\t    lineOffset = lineOffset || 0;\n\t    ++lineOffset;\n\n\t    return src.split(\"\\n\").map(function (line, ndx) {\n\t      return ndx + lineOffset + \": \" + line;\n\t    }).join(\"\\n\");\n\t  }\n\n\t  var spaceRE = /^[ \\t]*\\n/;\n\n\t  /**\n\t   * Loads a shader.\n\t   * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n\t   * @param {string} shaderSource The shader source.\n\t   * @param {number} shaderType The type of shader.\n\t   * @param {module:twgl.ErrorCallback} opt_errorCallback callback for errors.\n\t   * @return {WebGLShader} The created shader.\n\t   */\n\t  function loadShader(gl, shaderSource, shaderType, opt_errorCallback) {\n\t    var errFn = opt_errorCallback || error;\n\t    // Create the shader object\n\t    var shader = gl.createShader(shaderType);\n\n\t    // Remove the first end of line because WebGL 2.0 requires\n\t    // #version 300 es\n\t    // as the first line. No whitespace allowed before that line\n\t    // so\n\t    //\n\t    // <script>\n\t    // #version 300 es\n\t    // </script>\n\t    //\n\t    // Has one line before it which is invalid according to GLSL ES 3.00\n\t    //\n\t    var lineOffset = 0;\n\t    if (spaceRE.test(shaderSource)) {\n\t      lineOffset = 1;\n\t      shaderSource = shaderSource.replace(spaceRE, '');\n\t    }\n\n\t    // Load the shader source\n\t    gl.shaderSource(shader, shaderSource);\n\n\t    // Compile the shader\n\t    gl.compileShader(shader);\n\n\t    // Check the compile status\n\t    var compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n\t    if (!compiled) {\n\t      // Something went wrong during compilation; get the error\n\t      var lastError = gl.getShaderInfoLog(shader);\n\t      errFn(addLineNumbers(shaderSource, lineOffset) + \"\\n*** Error compiling shader: \" + lastError);\n\t      gl.deleteShader(shader);\n\t      return null;\n\t    }\n\n\t    return shader;\n\t  }\n\n\t  /**\n\t   * @typedef {Object} ProgramOptions\n\t   * @property {function(string)} [errorCallback] callback for errors\n\t   * @property {Object.<string,number>} [attribLocations] a attribute name to location map\n\t   * @property {(module:twgl.BufferInfo|Object.<string,module:twgl.AttribInfo>|string[])} [transformFeedbackVaryings] If passed\n\t   *   a BufferInfo will use the attribs names inside. If passed an object of AttribInfos will use the names from that object. Otherwise\n\t   *   you can pass an array of names.\n\t   * @property {number} [transformFeedbackMode] the mode to pass `gl.transformFeedbackVaryings`. Defaults to `SEPARATE_ATTRIBS`.\n\t   * @memberOf module:twgl\n\t   */\n\n\t  /**\n\t   * Gets the program options based on all these optional arguments\n\t   * @param {module:twgl.ProgramOptions|string[]} [opt_attribs] Options for the program or an array of attribs names. Locations will be assigned by index if not passed in\n\t   * @param {number[]} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations.\n\t   * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n\t   *        on error. If you want something else pass an callback. It's passed an error message.\n\t   * @return {module:twgl.ProgramOptions} an instance of ProgramOptions based on the arguments pased on\n\t   */\n\t  function getProgramOptions(opt_attribs, opt_locations, opt_errorCallback) {\n\t    if (typeof opt_locations === 'function') {\n\t      opt_errorCallback = opt_locations;\n\t      opt_locations = undefined;\n\t    }\n\t    if (typeof opt_attribs === 'function') {\n\t      opt_errorCallback = opt_attribs;\n\t      opt_attribs = undefined;\n\t    } else if (opt_attribs && !Array.isArray(opt_attribs)) {\n\t      // If we have an errorCallback we can just return this object\n\t      // Otherwise we need to construct one with default errorCallback\n\t      if (opt_attribs.errorCallback) {\n\t        return opt_attribs;\n\t      }\n\t      var opt = opt_attribs;\n\t      opt_errorCallback = opt.errorCallback;\n\t      opt_attribs = opt.attribLocations;\n\t      var transformFeedbackVaryings = opt.transformFeedbackVaryings;\n\t    }\n\n\t    var options = {\n\t      errorCallback: opt_errorCallback || error,\n\t      transformFeedbackVaryings: transformFeedbackVaryings\n\t    };\n\n\t    if (opt_attribs) {\n\t      var attribLocations = {};\n\t      if (Array.isArray(opt_attribs)) {\n\t        opt_attribs.forEach(function (attrib, ndx) {\n\t          attribLocations[attrib] = opt_locations ? opt_locations[ndx] : ndx;\n\t        });\n\t      } else {\n\t        attribLocations = opt_attribs;\n\t      }\n\t      options.attribLocations = attribLocations;\n\t    }\n\n\t    return options;\n\t  }\n\n\t  var defaultShaderType = [\"VERTEX_SHADER\", \"FRAGMENT_SHADER\"];\n\n\t  function getShaderTypeFromScriptType(scriptType) {\n\t    if (scriptType.indexOf(\"frag\") >= 0) {\n\t      return gl.FRAGMENT_SHADER;\n\t    } else if (scriptType.indexOf(\"vert\") >= 0) {\n\t      return gl.VERTEX_SHADER;\n\t    }\n\t    return undefined;\n\t  }\n\n\t  function deleteShaders(gl, shaders) {\n\t    shaders.forEach(function (shader) {\n\t      gl.deleteShader(shader);\n\t    });\n\t  }\n\n\t  /**\n\t   * Creates a program, attaches (and/or compiles) shaders, binds attrib locations, links the\n\t   * program and calls useProgram.\n\t   *\n\t   * NOTE: There are 4 signatures for this function\n\t   *\n\t   *     twgl.createProgram(gl, [vs, fs], options);\n\t   *     twgl.createProgram(gl, [vs, fs], opt_errFunc);\n\t   *     twgl.createProgram(gl, [vs, fs], opt_attribs, opt_errFunc);\n\t   *     twgl.createProgram(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n\t   *\n\t   * @param {WebGLShader[]|string[]} shaders The shaders to attach, or element ids for their source, or strings that contain their source\n\t   * @param {module:twgl.ProgramOptions|string[]} [opt_attribs] Options for the program or an array of attribs names. Locations will be assigned by index if not passed in\n\t   * @param {number[]} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations.\n\t   * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n\t   *        on error. If you want something else pass an callback. It's passed an error message.\n\t   * @return {WebGLProgram?} the created program or null if error.\n\t   * @memberOf module:twgl/programs\n\t   */\n\t  function createProgram(gl, shaders, opt_attribs, opt_locations, opt_errorCallback) {\n\t    var progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n\t    var realShaders = [];\n\t    var newShaders = [];\n\t    for (var ndx = 0; ndx < shaders.length; ++ndx) {\n\t      var shader = shaders[ndx];\n\t      if (typeof shader === 'string') {\n\t        var elem = document.getElementById(shader);\n\t        var src = elem ? elem.text : shader;\n\t        var type = gl[defaultShaderType[ndx]];\n\t        if (elem && elem.type) {\n\t          type = getShaderTypeFromScriptType(elem.type) || type;\n\t        }\n\t        shader = loadShader(gl, src, type, progOptions.errorCallback);\n\t        newShaders.push(shader);\n\t      }\n\t      if (shader instanceof WebGLShader) {\n\t        realShaders.push(shader);\n\t      }\n\t    }\n\n\t    if (realShaders.length !== shaders.length) {\n\t      programOptions.errorCallback(\"not enough shaders for program\");\n\t      deleteShaders(gl, newShaders);\n\t      return null;\n\t    }\n\n\t    var program = gl.createProgram();\n\t    realShaders.forEach(function (shader) {\n\t      gl.attachShader(program, shader);\n\t    });\n\t    if (progOptions.attribLocations) {\n\t      Object.keys(progOptions.attribLocations).forEach(function (attrib) {\n\t        gl.bindAttribLocation(program, progOptions.attribLocations[attrib], attrib);\n\t      });\n\t    }\n\t    var varyings = progOptions.transformFeedbackVaryings;\n\t    if (varyings) {\n\t      if (varyings.attribs) {\n\t        varyings = varyings.attribs;\n\t      }\n\t      if (!Array.isArray(varyings)) {\n\t        varyings = Object.keys(varyings);\n\t      }\n\t      gl.transformFeedbackVaryings(program, varyings, progOptions.transformFeedbackMode || gl.SEPARATE_ATTRIBS);\n\t    }\n\t    gl.linkProgram(program);\n\n\t    // Check the link status\n\t    var linked = gl.getProgramParameter(program, gl.LINK_STATUS);\n\t    if (!linked) {\n\t      // something went wrong with the link\n\t      var lastError = gl.getProgramInfoLog(program);\n\t      progOptions.errorCallback(\"Error in program linking:\" + lastError);\n\n\t      gl.deleteProgram(program);\n\t      deleteShaders(gl, newShaders);\n\t      return null;\n\t    }\n\t    return program;\n\t  }\n\n\t  /**\n\t   * Loads a shader from a script tag.\n\t   * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n\t   * @param {string} scriptId The id of the script tag.\n\t   * @param {number} [opt_shaderType] The type of shader. If not passed in it will\n\t   *     be derived from the type of the script tag.\n\t   * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors.\n\t   * @return {WebGLShader?} The created shader or null if error.\n\t   */\n\t  function createShaderFromScript(gl, scriptId, opt_shaderType, opt_errorCallback) {\n\t    var shaderSource = \"\";\n\t    var shaderScript = document.getElementById(scriptId);\n\t    if (!shaderScript) {\n\t      throw \"*** Error: unknown script element\" + scriptId;\n\t    }\n\t    shaderSource = shaderScript.text;\n\n\t    var shaderType = opt_shaderType || getShaderTypeFromScriptType(shaderScript.type);\n\t    if (!shaderType) {\n\t      throw \"*** Error: unknown shader type\";\n\t    }\n\n\t    return loadShader(gl, shaderSource, shaderType, opt_errorCallback);\n\t  }\n\n\t  /**\n\t   * Creates a program from 2 script tags.\n\t   *\n\t   * NOTE: There are 4 signatures for this function\n\t   *\n\t   *     twgl.createProgramFromScripts(gl, [vs, fs], opt_options);\n\t   *     twgl.createProgramFromScripts(gl, [vs, fs], opt_errFunc);\n\t   *     twgl.createProgramFromScripts(gl, [vs, fs], opt_attribs, opt_errFunc);\n\t   *     twgl.createProgramFromScripts(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n\t   *\n\t   * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n\t   *        to use.\n\t   * @param {string[]} shaderScriptIds Array of ids of the script\n\t   *        tags for the shaders. The first is assumed to be the\n\t   *        vertex shader, the second the fragment shader.\n\t   * @param {string[]} [opt_attribs] An array of attribs names. Locations will be assigned by index if not passed in\n\t   * @param {number[]} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations.\n\t   * @param {module:twgl.ErrorCallback} opt_errorCallback callback for errors. By default it just prints an error to the console\n\t   *        on error. If you want something else pass an callback. It's passed an error message.\n\t   * @return {WebGLProgram} The created program.\n\t   * @memberOf module:twgl/programs\n\t   */\n\t  function createProgramFromScripts(gl, shaderScriptIds, opt_attribs, opt_locations, opt_errorCallback) {\n\t    var progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n\t    var shaders = [];\n\t    for (var ii = 0; ii < shaderScriptIds.length; ++ii) {\n\t      var shader = createShaderFromScript(gl, shaderScriptIds[ii], gl[defaultShaderType[ii]], progOptions.errorCallback);\n\t      if (!shader) {\n\t        return null;\n\t      }\n\t      shaders.push(shader);\n\t    }\n\t    return createProgram(gl, shaders, progOptions);\n\t  }\n\n\t  /**\n\t   * Creates a program from 2 sources.\n\t   *\n\t   * NOTE: There are 4 signatures for this function\n\t   *\n\t   *     twgl.createProgramFromSource(gl, [vs, fs], opt_options);\n\t   *     twgl.createProgramFromSource(gl, [vs, fs], opt_errFunc);\n\t   *     twgl.createProgramFromSource(gl, [vs, fs], opt_attribs, opt_errFunc);\n\t   *     twgl.createProgramFromSource(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n\t   *\n\t   * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n\t   *        to use.\n\t   * @param {string[]} shaderSources Array of sources for the\n\t   *        shaders. The first is assumed to be the vertex shader,\n\t   *        the second the fragment shader.\n\t   * @param {string[]} [opt_attribs] An array of attribs names. Locations will be assigned by index if not passed in\n\t   * @param {number[]} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations.\n\t   * @param {module:twgl.ErrorCallback} opt_errorCallback callback for errors. By default it just prints an error to the console\n\t   *        on error. If you want something else pass an callback. It's passed an error message.\n\t   * @return {WebGLProgram} The created program.\n\t   * @memberOf module:twgl/programs\n\t   */\n\t  function createProgramFromSources(gl, shaderSources, opt_attribs, opt_locations, opt_errorCallback) {\n\t    var progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n\t    var shaders = [];\n\t    for (var ii = 0; ii < shaderSources.length; ++ii) {\n\t      var shader = loadShader(gl, shaderSources[ii], gl[defaultShaderType[ii]], progOptions.errorCallback);\n\t      if (!shader) {\n\t        return null;\n\t      }\n\t      shaders.push(shader);\n\t    }\n\t    return createProgram(gl, shaders, progOptions);\n\t  }\n\n\t  /**\n\t   * Creates setter functions for all uniforms of a shader\n\t   * program.\n\t   *\n\t   * @see {@link module:twgl.setUniforms}\n\t   *\n\t   * @param {WebGLProgram} program the program to create setters for.\n\t   * @returns {Object.<string, function>} an object with a setter by name for each uniform\n\t   * @memberOf module:twgl/programs\n\t   */\n\t  function createUniformSetters(gl, program) {\n\t    var textureUnit = 0;\n\n\t    /**\n\t     * Creates a setter for a uniform of the given program with it's\n\t     * location embedded in the setter.\n\t     * @param {WebGLProgram} program\n\t     * @param {WebGLUniformInfo} uniformInfo\n\t     * @returns {function} the created setter.\n\t     */\n\t    function createUniformSetter(program, uniformInfo) {\n\t      var location = gl.getUniformLocation(program, uniformInfo.name);\n\t      var isArray = uniformInfo.size > 1 && uniformInfo.name.substr(-3) === \"[0]\";\n\t      var type = uniformInfo.type;\n\t      var typeInfo = typeMap[type];\n\t      if (!typeInfo) {\n\t        throw \"unknown type: 0x\" + type.toString(16); // we should never get here.\n\t      }\n\t      var setter;\n\t      if (typeInfo.bindPoint) {\n\t        // it's a sampler\n\t        var unit = textureUnit;\n\t        textureUnit += uniformInfo.size;\n\t        if (isArray) {\n\t          setter = typeInfo.arraySetter(gl, type, unit, location, uniformInfo.size);\n\t        } else {\n\t          setter = typeInfo.setter(gl, type, unit, location, uniformInfo.size);\n\t        }\n\t      } else {\n\t        if (typeInfo.arraySetter && isArray) {\n\t          setter = typeInfo.arraySetter(gl, location);\n\t        } else {\n\t          setter = typeInfo.setter(gl, location);\n\t        }\n\t      }\n\t      setter.location = location;\n\t      return setter;\n\t    }\n\n\t    var uniformSetters = {};\n\t    var numUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n\n\t    for (var ii = 0; ii < numUniforms; ++ii) {\n\t      var uniformInfo = gl.getActiveUniform(program, ii);\n\t      if (!uniformInfo) {\n\t        break;\n\t      }\n\t      var name = uniformInfo.name;\n\t      // remove the array suffix.\n\t      if (name.substr(-3) === \"[0]\") {\n\t        name = name.substr(0, name.length - 3);\n\t      }\n\t      var setter = createUniformSetter(program, uniformInfo);\n\t      uniformSetters[name] = setter;\n\t    }\n\t    return uniformSetters;\n\t  }\n\n\t  /**\n\t   * @typedef {Object} TransformFeedbackInfo\n\t   * @property {number} index index of transform feedback\n\t   * @property {number} type GL type\n\t   * @property {number} size 1 - 4\n\t   * @memberOf module:twgl\n\t   */\n\n\t  /**\n\t   * Create TransformFeedbackInfo for passing to bind/unbindTransformFeedbackInfo.\n\t   * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n\t   * @param {WebGLProgram} program an existing WebGLProgram.\n\t   * @return {Object<string, module:twgl.TransformFeedbackInfo>}\n\t   * @memberOf module:twgl\n\t   */\n\t  function createTransformFeedbackInfo(gl, program) {\n\t    var info = {};\n\t    var numVaryings = gl.getProgramParameter(program, gl.TRANSFORM_FEEDBACK_VARYINGS);\n\t    for (var ii = 0; ii < numVaryings; ++ii) {\n\t      var varying = gl.getTransformFeedbackVarying(program, ii);\n\t      info[varying.name] = {\n\t        index: ii,\n\t        type: varying.type,\n\t        size: varying.size\n\t      };\n\t    }\n\t    return info;\n\t  }\n\n\t  /**\n\t   * Binds buffers for transform feedback.\n\t   *\n\t   * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n\t   * @param {(module:twgl.ProgramInfo|Object<string, module:twgl.TransformFeedbackInfo>)} transformFeedbackInfo A ProgramInfo or TransformFeedbackInfo.\n\t   * @param {(module:twgl.BufferInfo|Object<string, module:twgl.AttribInfo>)} [bufferInfo] A BufferInfo or set of AttribInfos.\n\t   * @memberOf module:twgl\n\t   */\n\t  function bindTransformFeedbackInfo(gl, transformFeedbackInfo, bufferInfo) {\n\t    if (transformFeedbackInfo.transformFeedbackInfo) {\n\t      transformFeedbackInfo = transformFeedbackInfo.transformFeedbackInfo;\n\t    }\n\t    if (bufferInfo.attribs) {\n\t      bufferInfo = bufferInfo.attribs;\n\t    }\n\t    for (var name in bufferInfo) {\n\t      var varying = transformFeedbackInfo[name];\n\t      if (varying) {\n\t        var buf = bufferInfo[name];\n\t        if (buf.offset) {\n\t          gl.bindBufferRange(gl.TRANSFORM_FEEDBACK_BUFFER, varying.index, buf.buffer, buf.offset, buf.size);\n\t        } else {\n\t          gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, varying.index, buf.buffer);\n\t        }\n\t      }\n\t    }\n\t  }\n\n\t  /**\n\t   * Unbinds buffers afetr transform feedback.\n\t   *\n\t   * Buffers can not be bound to 2 bind points so if you try to bind a buffer used\n\t   * in a transform feedback as an ARRAY_BUFFER for an attribute it will fail.\n\t   *\n\t   * This function unbinds all buffers that were bound with {@link module:twgl.bindTransformFeedbackInfo}.\n\t   *\n\t   * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n\t   * @param {(module:twgl.ProgramInfo|Object<string, module:twgl.TransformFeedbackInfo>)} transformFeedbackInfo A ProgramInfo or TransformFeedbackInfo.\n\t   * @param {(module:twgl.BufferInfo|Object<string, module:twgl.AttribInfo>)} [bufferInfo] A BufferInfo or set of AttribInfos.\n\t   */\n\t  function unbindTransformFeedbackInfo(gl, transformFeedbackInfo, bufferInfo) {\n\t    if (transformFeedbackInfo.transformFeedbackInfo) {\n\t      transformFeedbackInfo = transformFeedbackInfo.transformFeedbackInfo;\n\t    }\n\t    if (bufferInfo.attribs) {\n\t      bufferInfo = bufferInfo.attribs;\n\t    }\n\t    for (var name in bufferInfo) {\n\t      var varying = transformFeedbackInfo[name];\n\t      if (varying) {\n\t        gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, varying.index, null);\n\t      }\n\t    }\n\t  }\n\n\t  /**\n\t   * Creates a transform feedback and sets the buffers\n\t   * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n\t   * @param {module:twgl.ProgramInfo} programInfo A ProgramInfo as returned from {@link module:twgl.createProgramInfo}\n\t   * @param {(module:twgl.BufferInfo|Object<string, module:twgl.AttribInfo>)} [bufferInfo] A BufferInfo or set of AttribInfos.\n\t   * @return {WebGLTransformFeedback} the created transform feedback\n\t   * @memberOf module:twgl\n\t   */\n\t  function createTransformFeedback(gl, programInfo, bufferInfo) {\n\t    var tf = gl.createTransformFeedback();\n\t    gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, tf);\n\t    gl.useProgram(programInfo.program);\n\t    bindTransformFeedbackInfo(gl, programInfo, bufferInfo);\n\t    gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, null);\n\t    // This is only needed because of a bug in Chrome 56. Will remove\n\t    // when chrome fixes it.\n\t    unbindTransformFeedbackInfo(gl, programInfo, bufferInfo);\n\t    return tf;\n\t  }\n\n\t  /**\n\t   * @typedef {Object} UniformData\n\t   * @property {number} type The WebGL type enum for this uniform\n\t   * @property {number} size The number of elements for this uniform\n\t   * @property {number} blockNdx The block index this uniform appears in\n\t   * @property {number} offset The byte offset in the block for this uniform's value\n\t   * @memberOf module:twgl\n\t   */\n\n\t  /**\n\t   * The specification for one UniformBlockObject\n\t   *\n\t   * @typedef {Object} BlockSpec\n\t   * @property {number} index The index of the block.\n\t   * @property {number} size The size in bytes needed for the block\n\t   * @property {number[]} uniformIndices The indices of the uniforms used by the block. These indices\n\t   *    correspond to entries in a UniformData array in the {@link module:twgl.UniformBlockSpec}.\n\t   * @property {bool} usedByVertexShader Self explanitory\n\t   * @property {bool} usedByFragmentShader Self explanitory\n\t   * @property {bool} used Self explanitory\n\t   * @memberOf module:twgl\n\t   */\n\n\t  /**\n\t   * A `UniformBlockSpec` represents the data needed to create and bind\n\t   * UniformBlockObjects for a given program\n\t   *\n\t   * @typedef {Object} UniformBlockSpec\n\t   * @property {Object.<string, module:twgl.BlockSpec> blockSpecs The BlockSpec for each block by block name\n\t   * @property {UniformData[]} uniformData An array of data for each uniform by uniform index.\n\t   * @memberOf module:twgl\n\t   */\n\n\t  /**\n\t   * Creates a UniformBlockSpec for the given program.\n\t   *\n\t   * A UniformBlockSpec represents the data needed to create and bind\n\t   * UniformBlockObjects\n\t   *\n\t   * @param {WebGL2RenderingContext} gl A WebGL2 Rendering Context\n\t   * @param {WebGLProgram} program A WebGLProgram for a successfully linked program\n\t   * @return {module:twgl.UniformBlockSpec} The created UniformBlockSpec\n\t   * @memberOf module:twgl/programs\n\t   */\n\t  function createUniformBlockSpecFromProgram(gl, program) {\n\t    var numUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n\t    var uniformData = [];\n\t    var uniformIndices = [];\n\n\t    for (var ii = 0; ii < numUniforms; ++ii) {\n\t      uniformIndices.push(ii);\n\t      uniformData.push({});\n\t      var uniformInfo = gl.getActiveUniform(program, ii);\n\t      if (!uniformInfo) {\n\t        break;\n\t      }\n\t      // REMOVE [0]?\n\t      uniformData[ii].name = uniformInfo.name;\n\t    }\n\n\t    [[\"UNIFORM_TYPE\", \"type\"], [\"UNIFORM_SIZE\", \"size\"], // num elements\n\t    [\"UNIFORM_BLOCK_INDEX\", \"blockNdx\"], [\"UNIFORM_OFFSET\", \"offset\"]].forEach(function (pair) {\n\t      var pname = pair[0];\n\t      var key = pair[1];\n\t      gl.getActiveUniforms(program, uniformIndices, gl[pname]).forEach(function (value, ndx) {\n\t        uniformData[ndx][key] = value;\n\t      });\n\t    });\n\n\t    var blockSpecs = {};\n\n\t    var numUniformBlocks = gl.getProgramParameter(program, gl.ACTIVE_UNIFORM_BLOCKS);\n\t    for (ii = 0; ii < numUniformBlocks; ++ii) {\n\t      var name = gl.getActiveUniformBlockName(program, ii);\n\t      var blockSpec = {\n\t        index: ii,\n\t        usedByVertexShader: gl.getActiveUniformBlockParameter(program, ii, gl.UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER),\n\t        usedByFragmentShader: gl.getActiveUniformBlockParameter(program, ii, gl.UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER),\n\t        size: gl.getActiveUniformBlockParameter(program, ii, gl.UNIFORM_BLOCK_DATA_SIZE),\n\t        uniformIndices: gl.getActiveUniformBlockParameter(program, ii, gl.UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES)\n\t      };\n\t      blockSpec.used = blockSpec.usedByVertexSahder || blockSpec.usedByFragmentShader;\n\t      blockSpecs[name] = blockSpec;\n\t    }\n\n\t    return {\n\t      blockSpecs: blockSpecs,\n\t      uniformData: uniformData\n\t    };\n\t  }\n\n\t  var arraySuffixRE = /\\[\\d+\\]\\.$/; // better way to check?\n\n\t  /**\n\t   * Represents a UniformBlockObject including an ArrayBuffer with all the uniform values\n\t   * and a corresponding WebGLBuffer to hold those values on the GPU\n\t   *\n\t   * @typedef {Object} UniformBlockInfo\n\t   * @property {string} name The name of the block\n\t   * @property {ArrayBuffer} array The array buffer that contains the uniform values\n\t   * @property {Float32Array} asFloat A float view on the array buffer. This is useful\n\t   *    inspecting the contents of the buffer in the debugger.\n\t   * @property {WebGLBuffer} buffer A WebGL buffer that will hold a copy of the uniform values for rendering.\n\t   * @property {number} [offset] offset into buffer\n\t   * @property {Object.<string, ArrayBufferView>} uniforms A uniform name to ArrayBufferView map.\n\t   *   each Uniform has a correctly typed `ArrayBufferView` into array at the correct offset\n\t   *   and length of that uniform. So for example a float uniform would have a 1 float `Float32Array`\n\t   *   view. A single mat4 would have a 16 element `Float32Array` view. An ivec2 would have an\n\t   *   `Int32Array` view, etc.\n\t   * @memberOf module:twgl\n\t   */\n\n\t  /**\n\t   * Creates a `UniformBlockInfo` for the specified block\n\t   *\n\t   * Note: **If the blockName matches no existing blocks a warning is printed to the console and a dummy\n\t   * `UniformBlockInfo` is returned**. This is because when debugging GLSL\n\t   * it is common to comment out large portions of a shader or for example set\n\t   * the final output to a constant. When that happens blocks get optimized out.\n\t   * If this function did not create dummy blocks your code would crash when debugging.\n\t   *\n\t   * @param {WebGL2RenderingContext} gl A WebGL2RenderingContext\n\t   * @param {WebGLProgram} program A WebGLProgram\n\t   * @param {module:twgl.UniformBlockSpec} uinformBlockSpec. A UniformBlockSpec as returned\n\t   *     from {@link module:twgl.createUniformBlockSpecFromProgram}.\n\t   * @param {string} blockName The name of the block.\n\t   * @return {module:twgl.UniformBlockInfo} The created UniformBlockInfo\n\t   * @memberOf module:twgl/programs\n\t   */\n\t  function createUniformBlockInfoFromProgram(gl, program, uniformBlockSpec, blockName) {\n\t    var blockSpecs = uniformBlockSpec.blockSpecs;\n\t    var uniformData = uniformBlockSpec.uniformData;\n\t    var blockSpec = blockSpecs[blockName];\n\t    if (!blockSpec) {\n\t      warn(\"no uniform block object named:\", blockName);\n\t      return {\n\t        name: blockName,\n\t        uniforms: {}\n\t      };\n\t    }\n\t    var array = new ArrayBuffer(blockSpec.size);\n\t    var buffer = gl.createBuffer();\n\t    var uniformBufferIndex = blockSpec.index;\n\t    gl.bindBuffer(gl.UNIFORM_BUFFER, buffer);\n\t    gl.uniformBlockBinding(program, blockSpec.index, uniformBufferIndex);\n\n\t    var prefix = blockName + \".\";\n\t    if (arraySuffixRE.test(prefix)) {\n\t      prefix = prefix.replace(arraySuffixRE, \".\");\n\t    }\n\t    var uniforms = {};\n\t    blockSpec.uniformIndices.forEach(function (uniformNdx) {\n\t      var data = uniformData[uniformNdx];\n\t      var typeInfo = typeMap[data.type];\n\t      var Type = typeInfo.Type;\n\t      var length = data.size * typeInfo.size;\n\t      var name = data.name;\n\t      if (name.substr(0, prefix.length) === prefix) {\n\t        name = name.substr(prefix.length);\n\t      }\n\t      uniforms[name] = new Type(array, data.offset, length / Type.BYTES_PER_ELEMENT);\n\t    });\n\t    return {\n\t      name: blockName,\n\t      array: array,\n\t      asFloat: new Float32Array(array), // for debugging\n\t      buffer: buffer,\n\t      uniforms: uniforms\n\t    };\n\t  }\n\n\t  /**\n\t   * Creates a `UniformBlockInfo` for the specified block\n\t   *\n\t   * Note: **If the blockName matches no existing blocks a warning is printed to the console and a dummy\n\t   * `UniformBlockInfo` is returned**. This is because when debugging GLSL\n\t   * it is common to comment out large portions of a shader or for example set\n\t   * the final output to a constant. When that happens blocks get optimized out.\n\t   * If this function did not create dummy blocks your code would crash when debugging.\n\t   *\n\t   * @param {WebGL2RenderingContext} gl A WebGL2RenderingContext\n\t   * @param {module:twgl.ProgramInfo} programInfo a `ProgramInfo`\n\t   *     as returned from {@link module:twgl.createProgramInfo}\n\t   * @param {string} blockName The name of the block.\n\t   * @return {module:twgl.UniformBlockInfo} The created UniformBlockInfo\n\t   * @memberOf module:twgl/programs\n\t   */\n\t  function createUniformBlockInfo(gl, programInfo, blockName) {\n\t    return createUniformBlockInfoFromProgram(gl, programInfo.program, programInfo.uniformBlockSpec, blockName);\n\t  }\n\n\t  /**\n\t   * Binds a unform block to the matching uniform block point.\n\t   * Matches by blocks by name so blocks must have the same name not just the same\n\t   * structure.\n\t   *\n\t   * If you have changed any values and you upload the valus into the corresponding WebGLBuffer\n\t   * call {@link module:twgl.setUniformBlock} instead.\n\t   *\n\t   * @param {WebGL2RenderingContext} gl A WebGL 2 rendering context.\n\t   * @param {(module:twgl.ProgramInfo|module:twgl.UniformBlockSpec)} programInfo a `ProgramInfo`\n\t   *     as returned from {@link module:twgl.createProgramInfo} or or `UniformBlockSpec` as\n\t   *     returned from {@link module:twgl.createUniformBlockSpecFromProgram}.\n\t   * @param {module:twgl.UniformBlockInfo} uniformBlockInfo a `UniformBlockInfo` as returned from\n\t   *     {@link module:twgl.createUniformBlockInfo}.\n\t   * @return {bool} true if buffer was bound. If the programInfo has no block with the same block name\n\t   *     no buffer is bound.\n\t   * @memberOf module:twgl/programs\n\t   */\n\t  function bindUniformBlock(gl, programInfo, uniformBlockInfo) {\n\t    var uniformBlockSpec = programInfo.uniformBlockSpec || programInfo;\n\t    var blockSpec = uniformBlockSpec.blockSpecs[uniformBlockInfo.name];\n\t    if (blockSpec) {\n\t      var bufferBindIndex = blockSpec.index;\n\t      gl.bindBufferRange(gl.UNIFORM_BUFFER, bufferBindIndex, uniformBlockInfo.buffer, uniformBlockInfo.offset || 0, uniformBlockInfo.array.byteLength);\n\t      return true;\n\t    }\n\t    return false;\n\t  }\n\n\t  /**\n\t   * Uploads the current uniform values to the corresponding WebGLBuffer\n\t   * and binds that buffer to the program's corresponding bind point for the uniform block object.\n\t   *\n\t   * If you haven't changed any values and you only need to bind the uniform block object\n\t   * call {@link module:twgl.bindUniformBlock} instead.\n\t   *\n\t   * @param {WebGL2RenderingContext} gl A WebGL 2 rendering context.\n\t   * @param {(module:twgl.ProgramInfo|module:twgl.UniformBlockSpec)} programInfo a `ProgramInfo`\n\t   *     as returned from {@link module:twgl.createProgramInfo} or or `UniformBlockSpec` as\n\t   *     returned from {@link module:twgl.createUniformBlockSpecFromProgram}.\n\t   * @param {module:twgl.UniformBlockInfo} uniformBlockInfo a `UniformBlockInfo` as returned from\n\t   *     {@link module:twgl.createUniformBlockInfo}.\n\t   * @memberOf module:twgl/programs\n\t   */\n\t  function setUniformBlock(gl, programInfo, uniformBlockInfo) {\n\t    if (bindUniformBlock(gl, programInfo, uniformBlockInfo)) {\n\t      gl.bufferData(gl.UNIFORM_BUFFER, uniformBlockInfo.array, gl.DYNAMIC_DRAW);\n\t    }\n\t  }\n\n\t  /**\n\t   * Sets values of a uniform block object\n\t   *\n\t   * @param {module:twgl.UniformBlockInfo} uniformBlockInfo A UniformBlockInfo as returned by {@link module:twgl.createUniformBlockInfo}.\n\t   * @param {Object.<string, ?>} values A uniform name to value map where the value is correct for the given\n\t   *    type of uniform. So for example given a block like\n\t   *\n\t   *       uniform SomeBlock {\n\t   *         float someFloat;\n\t   *         vec2 someVec2;\n\t   *         vec3 someVec3Array[2];\n\t   *         int someInt;\n\t   *       }\n\t   *\n\t   *  You can set the values of the uniform block with\n\t   *\n\t   *       twgl.setBlockUniforms(someBlockInfo, {\n\t   *          someFloat: 12.3,\n\t   *          someVec2: [1, 2],\n\t   *          someVec3Array: [1, 2, 3, 4, 5, 6],\n\t   *          someInt: 5,\n\t   *       }\n\t   *\n\t   *  Arrays can be JavaScript arrays or typed arrays\n\t   *\n\t   *  Any name that doesn't match will be ignored\n\t   * @memberOf module:twgl/programs\n\t   */\n\t  function setBlockUniforms(uniformBlockInfo, values) {\n\t    var uniforms = uniformBlockInfo.uniforms;\n\t    for (var name in values) {\n\t      var array = uniforms[name];\n\t      if (array) {\n\t        var value = values[name];\n\t        if (value.length) {\n\t          array.set(value);\n\t        } else {\n\t          array[0] = value;\n\t        }\n\t      }\n\t    }\n\t  }\n\n\t  /**\n\t   * Set uniforms and binds related textures.\n\t   *\n\t   * example:\n\t   *\n\t   *     var programInfo = createProgramInfo(\n\t   *         gl, [\"some-vs\", \"some-fs\"]);\n\t   *\n\t   *     var tex1 = gl.createTexture();\n\t   *     var tex2 = gl.createTexture();\n\t   *\n\t   *     ... assume we setup the textures with data ...\n\t   *\n\t   *     var uniforms = {\n\t   *       u_someSampler: tex1,\n\t   *       u_someOtherSampler: tex2,\n\t   *       u_someColor: [1,0,0,1],\n\t   *       u_somePosition: [0,1,1],\n\t   *       u_someMatrix: [\n\t   *         1,0,0,0,\n\t   *         0,1,0,0,\n\t   *         0,0,1,0,\n\t   *         0,0,0,0,\n\t   *       ],\n\t   *     };\n\t   *\n\t   *     gl.useProgram(program);\n\t   *\n\t   * This will automatically bind the textures AND set the\n\t   * uniforms.\n\t   *\n\t   *     twgl.setUniforms(programInfo, uniforms);\n\t   *\n\t   * For the example above it is equivalent to\n\t   *\n\t   *     var texUnit = 0;\n\t   *     gl.activeTexture(gl.TEXTURE0 + texUnit);\n\t   *     gl.bindTexture(gl.TEXTURE_2D, tex1);\n\t   *     gl.uniform1i(u_someSamplerLocation, texUnit++);\n\t   *     gl.activeTexture(gl.TEXTURE0 + texUnit);\n\t   *     gl.bindTexture(gl.TEXTURE_2D, tex2);\n\t   *     gl.uniform1i(u_someSamplerLocation, texUnit++);\n\t   *     gl.uniform4fv(u_someColorLocation, [1, 0, 0, 1]);\n\t   *     gl.uniform3fv(u_somePositionLocation, [0, 1, 1]);\n\t   *     gl.uniformMatrix4fv(u_someMatrix, false, [\n\t   *         1,0,0,0,\n\t   *         0,1,0,0,\n\t   *         0,0,1,0,\n\t   *         0,0,0,0,\n\t   *       ]);\n\t   *\n\t   * Note it is perfectly reasonable to call `setUniforms` multiple times. For example\n\t   *\n\t   *     var uniforms = {\n\t   *       u_someSampler: tex1,\n\t   *       u_someOtherSampler: tex2,\n\t   *     };\n\t   *\n\t   *     var moreUniforms {\n\t   *       u_someColor: [1,0,0,1],\n\t   *       u_somePosition: [0,1,1],\n\t   *       u_someMatrix: [\n\t   *         1,0,0,0,\n\t   *         0,1,0,0,\n\t   *         0,0,1,0,\n\t   *         0,0,0,0,\n\t   *       ],\n\t   *     };\n\t   *\n\t   *     twgl.setUniforms(programInfo, uniforms);\n\t   *     twgl.setUniforms(programInfo, moreUniforms);\n\t   *\n\t   * You can also add WebGLSamplers to uniform samplers as in\n\t   *\n\t   *     var uniforms = {\n\t   *       u_someSampler: {\n\t   *         texture: someWebGLTexture,\n\t   *         sampler: someWebGLSampler,\n\t   *       },\n\t   *     };\n\t   *\n\t   * In which case both the sampler and texture will be bound to the\n\t   * same unit.\n\t   *\n\t   * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters a `ProgramInfo` as returned from `createProgramInfo` or the setters returned from\n\t   *        `createUniformSetters`.\n\t   * @param {Object.<string, ?>} values an object with values for the\n\t   *        uniforms.\n\t   *   You can pass multiple objects by putting them in an array or by calling with more arguments.For example\n\t   *\n\t   *     var sharedUniforms = {\n\t   *       u_fogNear: 10,\n\t   *       u_projection: ...\n\t   *       ...\n\t   *     };\n\t   *\n\t   *     var localUniforms = {\n\t   *       u_world: ...\n\t   *       u_diffuseColor: ...\n\t   *     };\n\t   *\n\t   *     twgl.setUniforms(programInfo, sharedUniforms, localUniforms);\n\t   *\n\t   *     // is the same as\n\t   *\n\t   *     twgl.setUniforms(programInfo, [sharedUniforms, localUniforms]);\n\t   *\n\t   *     // is the same as\n\t   *\n\t   *     twgl.setUniforms(programInfo, sharedUniforms);\n\t   *     twgl.setUniforms(programInfo, localUniforms};\n\t   *\n\t   * @memberOf module:twgl/programs\n\t   */\n\t  function setUniforms(setters, values) {\n\t    // eslint-disable-line\n\t    var actualSetters = setters.uniformSetters || setters;\n\t    var numArgs = arguments.length;\n\t    for (var andx = 1; andx < numArgs; ++andx) {\n\t      var vals = arguments[andx];\n\t      if (Array.isArray(vals)) {\n\t        var numValues = vals.length;\n\t        for (var ii = 0; ii < numValues; ++ii) {\n\t          setUniforms(actualSetters, vals[ii]);\n\t        }\n\t      } else {\n\t        for (var name in vals) {\n\t          var setter = actualSetters[name];\n\t          if (setter) {\n\t            setter(vals[name]);\n\t          }\n\t        }\n\t      }\n\t    }\n\t  }\n\n\t  /**\n\t   * Creates setter functions for all attributes of a shader\n\t   * program. You can pass this to {@link module:twgl.setBuffersAndAttributes} to set all your buffers and attributes.\n\t   *\n\t   * @see {@link module:twgl.setAttributes} for example\n\t   * @param {WebGLProgram} program the program to create setters for.\n\t   * @return {Object.<string, function>} an object with a setter for each attribute by name.\n\t   * @memberOf module:twgl/programs\n\t   */\n\t  function createAttributeSetters(gl, program) {\n\t    var attribSetters = {};\n\n\t    var numAttribs = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n\t    for (var ii = 0; ii < numAttribs; ++ii) {\n\t      var attribInfo = gl.getActiveAttrib(program, ii);\n\t      if (!attribInfo) {\n\t        break;\n\t      }\n\t      var index = gl.getAttribLocation(program, attribInfo.name);\n\t      var typeInfo = attrTypeMap[attribInfo.type];\n\t      var setter = typeInfo.setter(gl, index, typeInfo);\n\t      setter.location = index;\n\t      attribSetters[attribInfo.name] = setter;\n\t    }\n\n\t    return attribSetters;\n\t  }\n\n\t  /**\n\t   * Sets attributes and binds buffers (deprecated... use {@link module:twgl.setBuffersAndAttributes})\n\t   *\n\t   * Example:\n\t   *\n\t   *     var program = createProgramFromScripts(\n\t   *         gl, [\"some-vs\", \"some-fs\");\n\t   *\n\t   *     var attribSetters = createAttributeSetters(program);\n\t   *\n\t   *     var positionBuffer = gl.createBuffer();\n\t   *     var texcoordBuffer = gl.createBuffer();\n\t   *\n\t   *     var attribs = {\n\t   *       a_position: {buffer: positionBuffer, numComponents: 3},\n\t   *       a_texcoord: {buffer: texcoordBuffer, numComponents: 2},\n\t   *     };\n\t   *\n\t   *     gl.useProgram(program);\n\t   *\n\t   * This will automatically bind the buffers AND set the\n\t   * attributes.\n\t   *\n\t   *     setAttributes(attribSetters, attribs);\n\t   *\n\t   * Properties of attribs. For each attrib you can add\n\t   * properties:\n\t   *\n\t   * *   type: the type of data in the buffer. Default = gl.FLOAT\n\t   * *   normalize: whether or not to normalize the data. Default = false\n\t   * *   stride: the stride. Default = 0\n\t   * *   offset: offset into the buffer. Default = 0\n\t   *\n\t   * For example if you had 3 value float positions, 2 value\n\t   * float texcoord and 4 value uint8 colors you'd setup your\n\t   * attribs like this\n\t   *\n\t   *     var attribs = {\n\t   *       a_position: {buffer: positionBuffer, numComponents: 3},\n\t   *       a_texcoord: {buffer: texcoordBuffer, numComponents: 2},\n\t   *       a_color: {\n\t   *         buffer: colorBuffer,\n\t   *         numComponents: 4,\n\t   *         type: gl.UNSIGNED_BYTE,\n\t   *         normalize: true,\n\t   *       },\n\t   *     };\n\t   *\n\t   * @param {Object.<string, function>} setters Attribute setters as returned from createAttributeSetters\n\t   * @param {Object.<string, module:twgl.AttribInfo>} buffers AttribInfos mapped by attribute name.\n\t   * @memberOf module:twgl/programs\n\t   * @deprecated use {@link module:twgl.setBuffersAndAttributes}\n\t   */\n\t  function setAttributes(setters, buffers) {\n\t    for (var name in buffers) {\n\t      var setter = setters[name];\n\t      if (setter) {\n\t        setter(buffers[name]);\n\t      }\n\t    }\n\t  }\n\n\t  /**\n\t   * Sets attributes and buffers including the `ELEMENT_ARRAY_BUFFER` if appropriate\n\t   *\n\t   * Example:\n\t   *\n\t   *     var programInfo = createProgramInfo(\n\t   *         gl, [\"some-vs\", \"some-fs\");\n\t   *\n\t   *     var arrays = {\n\t   *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n\t   *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n\t   *     };\n\t   *\n\t   *     var bufferInfo = createBufferInfoFromArrays(gl, arrays);\n\t   *\n\t   *     gl.useProgram(programInfo.program);\n\t   *\n\t   * This will automatically bind the buffers AND set the\n\t   * attributes.\n\t   *\n\t   *     setBuffersAndAttributes(gl, programInfo, bufferInfo);\n\t   *\n\t   * For the example above it is equivilent to\n\t   *\n\t   *     gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n\t   *     gl.enableVertexAttribArray(a_positionLocation);\n\t   *     gl.vertexAttribPointer(a_positionLocation, 3, gl.FLOAT, false, 0, 0);\n\t   *     gl.bindBuffer(gl.ARRAY_BUFFER, texcoordBuffer);\n\t   *     gl.enableVertexAttribArray(a_texcoordLocation);\n\t   *     gl.vertexAttribPointer(a_texcoordLocation, 4, gl.FLOAT, false, 0, 0);\n\t   *\n\t   * @param {WebGLRenderingContext} gl A WebGLRenderingContext.\n\t   * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters A `ProgramInfo` as returned from {@link module:twgl.createProgrmaInfo} or Attribute setters as returned from {@link module:twgl.createAttributeSetters}\n\t   * @param {(module:twgl.BufferInfo|module:twgl.vertexArrayInfo)} buffers a `BufferInfo` as returned from {@link module:twgl.createBufferInfoFromArrays}.\n\t   *   or a `VertexArrayInfo` as returned from {@link module:twgl.createVertexArrayInfo}\n\t   * @memberOf module:twgl/programs\n\t   */\n\t  function setBuffersAndAttributes(gl, programInfo, buffers) {\n\t    if (buffers.vertexArrayObject) {\n\t      gl.bindVertexArray(buffers.vertexArrayObject);\n\t    } else {\n\t      setAttributes(programInfo.attribSetters || programInfo, buffers.attribs);\n\t      if (buffers.indices) {\n\t        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffers.indices);\n\t      }\n\t    }\n\t  }\n\n\t  /**\n\t   * @typedef {Object} ProgramInfo\n\t   * @property {WebGLProgram} program A shader program\n\t   * @property {Object<string, function>} uniformSetters object of setters as returned from createUniformSetters,\n\t   * @property {Object<string, function>} attribSetters object of setters as returned from createAttribSetters,\n\t   * @propetty {module:twgl.UniformBlockSpec} [uniformBlockSpace] a uniform block spec for making UniformBlockInfos with createUniformBlockInfo etc..\n\t   * @property {Object<string, module:twgl.TransformFeedbackInfo>} [transformFeedbackInfo] info for transform feedbacks\n\t   * @memberOf module:twgl\n\t   */\n\n\t  /**\n\t   * Creates a ProgramInfo from an existing program.\n\t   *\n\t   * A ProgramInfo contains\n\t   *\n\t   *     programInfo = {\n\t   *        program: WebGLProgram,\n\t   *        uniformSetters: object of setters as returned from createUniformSetters,\n\t   *        attribSetters: object of setters as returned from createAttribSetters,\n\t   *     }\n\t   *\n\t   * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n\t   *        to use.\n\t   * @param {WebGLProgram} program an existing WebGLProgram.\n\t   * @return {module:twgl.ProgramInfo} The created ProgramInfo.\n\t   * @memberOf module:twgl/programs\n\t   */\n\t  function createProgramInfoFromProgram(gl, program) {\n\t    var uniformSetters = createUniformSetters(gl, program);\n\t    var attribSetters = createAttributeSetters(gl, program);\n\t    var programInfo = {\n\t      program: program,\n\t      uniformSetters: uniformSetters,\n\t      attribSetters: attribSetters\n\t    };\n\n\t    if (utils.isWebGL2(gl)) {\n\t      programInfo.uniformBlockSpec = createUniformBlockSpecFromProgram(gl, program);\n\t      programInfo.transformFeedbackInfo = createTransformFeedbackInfo(gl, program);\n\t    }\n\n\t    return programInfo;\n\t  }\n\n\t  /**\n\t   * Creates a ProgramInfo from 2 sources.\n\t   *\n\t   * A ProgramInfo contains\n\t   *\n\t   *     programInfo = {\n\t   *        program: WebGLProgram,\n\t   *        uniformSetters: object of setters as returned from createUniformSetters,\n\t   *        attribSetters: object of setters as returned from createAttribSetters,\n\t   *     }\n\t   *\n\t   * NOTE: There are 4 signatures for this function\n\t   *\n\t   *     twgl.createProgramInfo(gl, [vs, fs], options);\n\t   *     twgl.createProgramInfo(gl, [vs, fs], opt_errFunc);\n\t   *     twgl.createProgramInfo(gl, [vs, fs], opt_attribs, opt_errFunc);\n\t   *     twgl.createProgramInfo(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n\t   *\n\t   * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n\t   *        to use.\n\t   * @param {string[]} shaderSources Array of sources for the\n\t   *        shaders or ids. The first is assumed to be the vertex shader,\n\t   *        the second the fragment shader.\n\t   * @param {module:twgl.ProgramOptions|string[]} [opt_attribs] Options for the program or an array of attribs names. Locations will be assigned by index if not passed in\n\t   * @param {number[]} [opt_locations] The locations for the attributes. A parallel array to opt_attribs letting you assign locations.\n\t   * @param {module:twgl.ErrorCallback} opt_errorCallback callback for errors. By default it just prints an error to the console\n\t   *        on error. If you want something else pass an callback. It's passed an error message.\n\t   * @return {module:twgl.ProgramInfo?} The created ProgramInfo or null if it failed to link or compile\n\t   * @memberOf module:twgl/programs\n\t   */\n\t  function createProgramInfo(gl, shaderSources, opt_attribs, opt_locations, opt_errorCallback) {\n\t    var progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n\t    var good = true;\n\t    shaderSources = shaderSources.map(function (source) {\n\t      // Lets assume if there is no \\n it's an id\n\t      if (source.indexOf(\"\\n\") < 0) {\n\t        var script = document.getElementById(source);\n\t        if (!script) {\n\t          progOptions.errorCallback(\"no element with id: \" + source);\n\t          good = false;\n\t        } else {\n\t          source = script.text;\n\t        }\n\t      }\n\t      return source;\n\t    });\n\t    if (!good) {\n\t      return null;\n\t    }\n\t    var program = createProgramFromSources(gl, shaderSources, progOptions);\n\t    if (!program) {\n\t      return null;\n\t    }\n\t    return createProgramInfoFromProgram(gl, program);\n\t  }\n\n\t  // Using quotes prevents Uglify from changing the names.\n\t  // No speed diff AFAICT.\n\t  return {\n\t    \"createAttributeSetters\": createAttributeSetters,\n\n\t    \"createProgram\": createProgram,\n\t    \"createProgramFromScripts\": createProgramFromScripts,\n\t    \"createProgramFromSources\": createProgramFromSources,\n\t    \"createProgramInfo\": createProgramInfo,\n\t    \"createProgramInfoFromProgram\": createProgramInfoFromProgram,\n\t    \"createUniformSetters\": createUniformSetters,\n\t    \"createUniformBlockSpecFromProgram\": createUniformBlockSpecFromProgram,\n\t    \"createUniformBlockInfoFromProgram\": createUniformBlockInfoFromProgram,\n\t    \"createUniformBlockInfo\": createUniformBlockInfo,\n\n\t    \"createTransformFeedback\": createTransformFeedback,\n\t    \"createTransformFeedbackInfo\": createTransformFeedbackInfo,\n\t    \"bindTransformFeedbackInfo\": bindTransformFeedbackInfo,\n\n\t    \"setAttributes\": setAttributes,\n\t    \"setBuffersAndAttributes\": setBuffersAndAttributes,\n\t    \"setUniforms\": setUniforms,\n\t    \"setUniformBlock\": setUniformBlock,\n\t    \"setBlockUniforms\": setBlockUniforms,\n\t    \"bindUniformBlock\": bindUniformBlock\n\t  };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n\t/*\n\t * Copyright 2015, Gregg Tavares.\n\t * All rights reserved.\n\t *\n\t * Redistribution and use in source and binary forms, with or without\n\t * modification, are permitted provided that the following conditions are\n\t * met:\n\t *\n\t *     * Redistributions of source code must retain the above copyright\n\t * notice, this list of conditions and the following disclaimer.\n\t *     * Redistributions in binary form must reproduce the above\n\t * copyright notice, this list of conditions and the following disclaimer\n\t * in the documentation and/or other materials provided with the\n\t * distribution.\n\t *     * Neither the name of Gregg Tavares. nor the names of his\n\t * contributors may be used to endorse or promote products derived from\n\t * this software without specific prior written permission.\n\t *\n\t * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\t * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n\t * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n\t * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n\t * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n\t * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n\t * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n\t * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n\t * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\t * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n\t * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\t */\n\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8), __webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function (textures, utils) {\n\t  \"use strict\";\n\n\t  /**\n\t   * Framebuffer related functions\n\t   *\n\t   * For backward compatibily they are available at both `twgl.framebuffer` and `twgl`\n\t   * itself\n\t   *\n\t   * See {@link module:twgl} for core functions\n\t   *\n\t   * @module twgl/framebuffers\n\t   */\n\n\t  // make sure we don't see a global gl\n\n\t  var gl = undefined; // eslint-disable-line\n\n\t  var UNSIGNED_BYTE = 0x1401;\n\n\t  /* PixelFormat */\n\t  var DEPTH_COMPONENT = 0x1902;\n\t  var RGBA = 0x1908;\n\n\t  /* Framebuffer Object. */\n\t  var RGBA4 = 0x8056;\n\t  var RGB5_A1 = 0x8057;\n\t  var RGB565 = 0x8D62;\n\t  var DEPTH_COMPONENT16 = 0x81A5;\n\t  var STENCIL_INDEX = 0x1901;\n\t  var STENCIL_INDEX8 = 0x8D48;\n\t  var DEPTH_STENCIL = 0x84F9;\n\t  var COLOR_ATTACHMENT0 = 0x8CE0;\n\t  var DEPTH_ATTACHMENT = 0x8D00;\n\t  var STENCIL_ATTACHMENT = 0x8D20;\n\t  var DEPTH_STENCIL_ATTACHMENT = 0x821A;\n\n\t  /* TextureWrapMode */\n\t  var REPEAT = 0x2901; // eslint-disable-line\n\t  var CLAMP_TO_EDGE = 0x812F;\n\t  var MIRRORED_REPEAT = 0x8370; // eslint-disable-line\n\n\t  /* TextureMagFilter */\n\t  var NEAREST = 0x2600; // eslint-disable-line\n\t  var LINEAR = 0x2601;\n\n\t  /* TextureMinFilter */\n\t  var NEAREST_MIPMAP_NEAREST = 0x2700; // eslint-disable-line\n\t  var LINEAR_MIPMAP_NEAREST = 0x2701; // eslint-disable-line\n\t  var NEAREST_MIPMAP_LINEAR = 0x2702; // eslint-disable-line\n\t  var LINEAR_MIPMAP_LINEAR = 0x2703; // eslint-disable-line\n\n\t  /**\n\t   * The options for a framebuffer attachment.\n\t   *\n\t   * Note: For a `format` that is a texture include all the texture\n\t   * options from {@link module:twgl.TextureOptions} for example\n\t   * `min`, `mag`, `clamp`, etc... Note that unlike {@link module:twgl.TextureOptions}\n\t   * `auto` defaults to `false` for attachment textures but `min` and `mag` default\n\t   * to `gl.LINEAR` and `wrap` defaults to `CLAMP_TO_EDGE`\n\t   *\n\t   * @typedef {Object} AttachmentOptions\n\t   * @property {number} [attach] The attachment point. Defaults\n\t   *   to `gl.COLOR_ATTACTMENT0 + ndx` unless type is a depth or stencil type\n\t   *   then it's gl.DEPTH_ATTACHMENT or `gl.DEPTH_STENCIL_ATTACHMENT` depending\n\t   *   on the format or attachment type.\n\t   * @property {number} [format] The format. If one of `gl.RGBA4`,\n\t   *   `gl.RGB565`, `gl.RGB5_A1`, `gl.DEPTH_COMPONENT16`,\n\t   *   `gl.STENCIL_INDEX8` or `gl.DEPTH_STENCIL` then will create a\n\t   *   renderbuffer. Otherwise will create a texture. Default = `gl.RGBA`\n\t   * @property {number} [type] The type. Used for texture. Default = `gl.UNSIGNED_BYTE`.\n\t   * @property {number} [target] The texture target for `gl.framebufferTexture2D`.\n\t   *   Defaults to `gl.TEXTURE_2D`. Set to appropriate face for cube maps.\n\t   * @property {number} [level] level for `gl.framebufferTexture2D`. Defaults to 0.\n\t   * @property {WebGLObject} [attachment] An existing renderbuffer or texture.\n\t   *    If provided will attach this Object. This allows you to share\n\t   *    attachemnts across framebuffers.\n\t   * @memberOf module:twgl\n\t   */\n\n\t  var defaultAttachments = [{ format: RGBA, type: UNSIGNED_BYTE, min: LINEAR, wrap: CLAMP_TO_EDGE }, { format: DEPTH_STENCIL }];\n\n\t  var attachmentsByFormat = {};\n\t  attachmentsByFormat[DEPTH_STENCIL] = DEPTH_STENCIL_ATTACHMENT;\n\t  attachmentsByFormat[STENCIL_INDEX] = STENCIL_ATTACHMENT;\n\t  attachmentsByFormat[STENCIL_INDEX8] = STENCIL_ATTACHMENT;\n\t  attachmentsByFormat[DEPTH_COMPONENT] = DEPTH_ATTACHMENT;\n\t  attachmentsByFormat[DEPTH_COMPONENT16] = DEPTH_ATTACHMENT;\n\n\t  function getAttachmentPointForFormat(format) {\n\t    return attachmentsByFormat[format];\n\t  }\n\n\t  var renderbufferFormats = {};\n\t  renderbufferFormats[RGBA4] = true;\n\t  renderbufferFormats[RGB5_A1] = true;\n\t  renderbufferFormats[RGB565] = true;\n\t  renderbufferFormats[DEPTH_STENCIL] = true;\n\t  renderbufferFormats[DEPTH_COMPONENT16] = true;\n\t  renderbufferFormats[STENCIL_INDEX] = true;\n\t  renderbufferFormats[STENCIL_INDEX8] = true;\n\n\t  function isRenderbufferFormat(format) {\n\t    return renderbufferFormats[format];\n\t  }\n\n\t  /**\n\t   * @typedef {Object} FramebufferInfo\n\t   * @property {WebGLFramebuffer} framebuffer The WebGLFramebuffer for this framebufferInfo\n\t   * @property {WebGLObject[]} attachments The created attachments in the same order as passed in to {@link module:twgl.createFramebufferInfo}.\n\t   * @memberOf module:twgl\n\t   */\n\n\t  /**\n\t   * Creates a framebuffer and attachments.\n\t   *\n\t   * This returns a {@link module:twgl.FramebufferInfo} because it needs to return the attachments as well as the framebuffer.\n\t   *\n\t   * The simplest usage\n\t   *\n\t   *     // create an RGBA/UNSIGNED_BYTE texture and DEPTH_STENCIL renderbuffer\n\t   *     var fbi = twgl.createFramebufferInfo(gl);\n\t   *\n\t   * More complex usage\n\t   *\n\t   *     // create an RGB565 renderbuffer and a STENCIL_INDEX8 renderbuffer\n\t   *     var attachments = [\n\t   *       { format: RGB565, mag: NEAREST },\n\t   *       { format: STENCIL_INDEX8 },\n\t   *     ]\n\t   *     var fbi = twgl.createFramebufferInfo(gl, attachments);\n\t   *\n\t   * Passing in a specific size\n\t   *\n\t   *     var width = 256;\n\t   *     var height = 256;\n\t   *     var fbi = twgl.createFramebufferInfo(gl, attachments, width, height);\n\t   *\n\t   * **Note!!** It is up to you to check if the framebuffer is renderable by calling `gl.checkFramebufferStatus`.\n\t   * [WebGL only guarantees 3 combinations of attachments work](https://www.khronos.org/registry/webgl/specs/latest/1.0/#6.6).\n\t   *\n\t   * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n\t   * @param {module:twgl.AttachmentOptions[]} [attachments] which attachments to create. If not provided the default is a framebuffer with an\n\t   *    `RGBA`, `UNSIGNED_BYTE` texture `COLOR_ATTACHMENT0` and a `DEPTH_STENCIL` renderbuffer `DEPTH_STENCIL_ATTACHMENT`.\n\t   * @param {number} [width] the width for the attachments. Default = size of drawingBuffer\n\t   * @param {number} [height] the height for the attachments. Defautt = size of drawingBuffer\n\t   * @return {module:twgl.FramebufferInfo} the framebuffer and attachments.\n\t   * @memberOf module:twgl/framebuffers\n\t   */\n\t  function createFramebufferInfo(gl, attachments, width, height) {\n\t    var target = gl.FRAMEBUFFER;\n\t    var fb = gl.createFramebuffer();\n\t    gl.bindFramebuffer(target, fb);\n\t    width = width || gl.drawingBufferWidth;\n\t    height = height || gl.drawingBufferHeight;\n\t    attachments = attachments || defaultAttachments;\n\t    var colorAttachmentCount = 0;\n\t    var framebufferInfo = {\n\t      framebuffer: fb,\n\t      attachments: [],\n\t      width: width,\n\t      height: height\n\t    };\n\t    attachments.forEach(function (attachmentOptions) {\n\t      var attachment = attachmentOptions.attachment;\n\t      var format = attachmentOptions.format;\n\t      var attachmentPoint = getAttachmentPointForFormat(format);\n\t      if (!attachmentPoint) {\n\t        attachmentPoint = COLOR_ATTACHMENT0 + colorAttachmentCount++;\n\t      }\n\t      if (!attachment) {\n\t        if (isRenderbufferFormat(format)) {\n\t          attachment = gl.createRenderbuffer();\n\t          gl.bindRenderbuffer(gl.RENDERBUFFER, attachment);\n\t          gl.renderbufferStorage(gl.RENDERBUFFER, format, width, height);\n\t        } else {\n\t          var textureOptions = utils.shallowCopy(attachmentOptions);\n\t          textureOptions.width = width;\n\t          textureOptions.height = height;\n\t          if (textureOptions.auto === undefined) {\n\t            textureOptions.auto = false;\n\t            textureOptions.min = textureOptions.min || textureOptions.minMag || gl.LINEAR;\n\t            textureOptions.mag = textureOptions.mag || textureOptions.minMag || gl.LINEAR;\n\t            textureOptions.wrapS = textureOptions.wrapS || textureOptions.wrap || gl.CLAMP_TO_EDGE;\n\t            textureOptions.wrapT = textureOptions.wrapT || textureOptions.wrap || gl.CLAMP_TO_EDGE;\n\t          }\n\t          attachment = textures.createTexture(gl, textureOptions);\n\t        }\n\t      }\n\t      if (attachment instanceof WebGLRenderbuffer) {\n\t        gl.framebufferRenderbuffer(target, attachmentPoint, gl.RENDERBUFFER, attachment);\n\t      } else if (attachment instanceof WebGLTexture) {\n\t        gl.framebufferTexture2D(target, attachmentPoint, attachmentOptions.texTarget || gl.TEXTURE_2D, attachment, attachmentOptions.level || 0);\n\t      } else {\n\t        throw \"unknown attachment type\";\n\t      }\n\t      framebufferInfo.attachments.push(attachment);\n\t    });\n\t    return framebufferInfo;\n\t  }\n\n\t  /**\n\t   * Resizes the attachments of a framebuffer.\n\t   *\n\t   * You need to pass in the same `attachments` as you passed in {@link module:twgl.createFramebufferInfo}\n\t   * because TWGL has no idea the format/type of each attachment.\n\t   *\n\t   * The simplest usage\n\t   *\n\t   *     // create an RGBA/UNSIGNED_BYTE texture and DEPTH_STENCIL renderbuffer\n\t   *     var fbi = twgl.createFramebufferInfo(gl);\n\t   *\n\t   *     ...\n\t   *\n\t   *     function render() {\n\t   *       if (twgl.resizeCanvasToDisplaySize(gl.canvas)) {\n\t   *         // resize the attachments\n\t   *         twgl.resizeFramebufferInfo(gl, fbi);\n\t   *       }\n\t   *\n\t   * More complex usage\n\t   *\n\t   *     // create an RGB565 renderbuffer and a STENCIL_INDEX8 renderbuffer\n\t   *     var attachments = [\n\t   *       { format: RGB565, mag: NEAREST },\n\t   *       { format: STENCIL_INDEX8 },\n\t   *     ]\n\t   *     var fbi = twgl.createFramebufferInfo(gl, attachments);\n\t   *\n\t   *     ...\n\t   *\n\t   *     function render() {\n\t   *       if (twgl.resizeCanvasToDisplaySize(gl.canvas)) {\n\t   *         // resize the attachments to match\n\t   *         twgl.resizeFramebufferInfo(gl, fbi, attachments);\n\t   *       }\n\t   *\n\t   * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n\t   * @param {module:twgl.FramebufferInfo} framebufferInfo a framebufferInfo as returned from {@link module:twgl.createFramebufferInfo}.\n\t   * @param {module:twgl.AttachmentOptions[]} [attachments] the same attachments options as passed to {@link module:twgl.createFramebufferInfo}.\n\t   * @param {number} [width] the width for the attachments. Default = size of drawingBuffer\n\t   * @param {number} [height] the height for the attachments. Defautt = size of drawingBuffer\n\t   * @memberOf module:twgl/framebuffers\n\t   */\n\t  function resizeFramebufferInfo(gl, framebufferInfo, attachments, width, height) {\n\t    width = width || gl.drawingBufferWidth;\n\t    height = height || gl.drawingBufferHeight;\n\t    framebufferInfo.width = width;\n\t    framebufferInfo.height = height;\n\t    attachments = attachments || defaultAttachments;\n\t    attachments.forEach(function (attachmentOptions, ndx) {\n\t      var attachment = framebufferInfo.attachments[ndx];\n\t      var format = attachmentOptions.format;\n\t      if (attachment instanceof WebGLRenderbuffer) {\n\t        gl.bindRenderbuffer(gl.RENDERBUFFER, attachment);\n\t        gl.renderbufferStorage(gl.RENDERBUFFER, format, width, height);\n\t      } else if (attachment instanceof WebGLTexture) {\n\t        textures.resizeTexture(gl, attachment, attachmentOptions, width, height);\n\t      } else {\n\t        throw \"unknown attachment type\";\n\t      }\n\t    });\n\t  }\n\n\t  /**\n\t   * Binds a framebuffer\n\t   *\n\t   * This function pretty much soley exists because I spent hours\n\t   * trying to figure out why something I wrote wasn't working only\n\t   * to realize I forget to set the viewport dimensions.\n\t   * My hope is this function will fix that.\n\t   *\n\t   * It is effectively the same as\n\t   *\n\t   *     gl.bindFramebuffer(gl.FRAMEBUFFER, someFramebufferInfo.framebuffer);\n\t   *     gl.viewport(0, 0, someFramebufferInfo.width, someFramebufferInfo.height);\n\t   *\n\t   * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n\t   * @param {module:twgl.FramebufferInfo} [framebufferInfo] a framebufferInfo as returned from {@link module:twgl.createFramebufferInfo}.\n\t   *   If not passed will bind the canvas.\n\t   * @param {number} [target] The target. If not passed `gl.FRAMEBUFFER` will be used.\n\t   * @memberOf module:twgl/framebuffers\n\t   */\n\n\t  function bindFramebufferInfo(gl, framebufferInfo, target) {\n\t    target = target || gl.FRAMEBUFFER;\n\t    if (framebufferInfo) {\n\t      gl.bindFramebuffer(target, framebufferInfo.framebuffer);\n\t      gl.viewport(0, 0, framebufferInfo.width, framebufferInfo.height);\n\t    } else {\n\t      gl.bindFramebuffer(target, null);\n\t      gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n\t    }\n\t  }\n\n\t  // Using quotes prevents Uglify from changing the names.\n\t  // No speed diff AFAICT.\n\t  return {\n\t    \"bindFramebufferInfo\": bindFramebufferInfo,\n\t    \"createFramebufferInfo\": createFramebufferInfo,\n\t    \"resizeFramebufferInfo\": resizeFramebufferInfo\n\t  };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n\t/*\n\t * Copyright 2015, Gregg Tavares.\n\t * All rights reserved.\n\t *\n\t * Redistribution and use in source and binary forms, with or without\n\t * modification, are permitted provided that the following conditions are\n\t * met:\n\t *\n\t *     * Redistributions of source code must retain the above copyright\n\t * notice, this list of conditions and the following disclaimer.\n\t *     * Redistributions in binary form must reproduce the above\n\t * copyright notice, this list of conditions and the following disclaimer\n\t * in the documentation and/or other materials provided with the\n\t * distribution.\n\t *     * Neither the name of Gregg Tavares. nor the names of his\n\t * contributors may be used to endorse or promote products derived from\n\t * this software without specific prior written permission.\n\t *\n\t * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\t * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n\t * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n\t * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n\t * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n\t * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n\t * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n\t * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n\t * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\t * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n\t * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\t */\n\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function (typedArrays, utils) {\n\t  \"use strict\";\n\n\t  /**\n\t   * Low level texture related functions\n\t   *\n\t   * You should generally not need to use these functions. They are provided\n\t   * for those cases where you're doing something out of the ordinary\n\t   * and you need lower level access.\n\t   *\n\t   * For backward compatibily they are available at both `twgl.textures` and `twgl`\n\t   * itself\n\t   *\n\t   * See {@link module:twgl} for core functions\n\t   *\n\t   * @module twgl/textures\n\t   */\n\n\t  // make sure we don't see a global gl\n\n\t  var gl = undefined; // eslint-disable-line\n\t  var defaults = {\n\t    textureColor: new Uint8Array([128, 192, 255, 255]),\n\t    textureOptions: {},\n\t    crossOrigin: undefined\n\t  };\n\t  var isArrayBuffer = typedArrays.isArrayBuffer;\n\n\t  // Should we make this on demand?\n\t  var ctx = document.createElement(\"canvas\").getContext(\"2d\");\n\n\t  /* PixelFormat */\n\t  var ALPHA = 0x1906;\n\t  var RGB = 0x1907;\n\t  var RGBA = 0x1908;\n\t  var LUMINANCE = 0x1909;\n\t  var LUMINANCE_ALPHA = 0x190A;\n\t  var DEPTH_COMPONENT = 0x1902;\n\t  var DEPTH_STENCIL = 0x84F9;\n\n\t  /* TextureWrapMode */\n\t  var REPEAT = 0x2901; // eslint-disable-line\n\t  var MIRRORED_REPEAT = 0x8370; // eslint-disable-line\n\n\t  /* TextureMagFilter */\n\t  var NEAREST = 0x2600; // eslint-disable-line\n\n\t  /* TextureMinFilter */\n\t  var NEAREST_MIPMAP_NEAREST = 0x2700; // eslint-disable-line\n\t  var LINEAR_MIPMAP_NEAREST = 0x2701; // eslint-disable-line\n\t  var NEAREST_MIPMAP_LINEAR = 0x2702; // eslint-disable-line\n\t  var LINEAR_MIPMAP_LINEAR = 0x2703; // eslint-disable-line\n\n\t  var R8 = 0x8229;\n\t  var R8_SNORM = 0x8F94;\n\t  var R16F = 0x822D;\n\t  var R32F = 0x822E;\n\t  var R8UI = 0x8232;\n\t  var R8I = 0x8231;\n\t  var RG16UI = 0x823A;\n\t  var RG16I = 0x8239;\n\t  var RG32UI = 0x823C;\n\t  var RG32I = 0x823B;\n\t  var RG8 = 0x822B;\n\t  var RG8_SNORM = 0x8F95;\n\t  var RG16F = 0x822F;\n\t  var RG32F = 0x8230;\n\t  var RG8UI = 0x8238;\n\t  var RG8I = 0x8237;\n\t  var R16UI = 0x8234;\n\t  var R16I = 0x8233;\n\t  var R32UI = 0x8236;\n\t  var R32I = 0x8235;\n\t  var RGB8 = 0x8051;\n\t  var SRGB8 = 0x8C41;\n\t  var RGB565 = 0x8D62;\n\t  var RGB8_SNORM = 0x8F96;\n\t  var R11F_G11F_B10F = 0x8C3A;\n\t  var RGB9_E5 = 0x8C3D;\n\t  var RGB16F = 0x881B;\n\t  var RGB32F = 0x8815;\n\t  var RGB8UI = 0x8D7D;\n\t  var RGB8I = 0x8D8F;\n\t  var RGB16UI = 0x8D77;\n\t  var RGB16I = 0x8D89;\n\t  var RGB32UI = 0x8D71;\n\t  var RGB32I = 0x8D83;\n\t  var RGBA8 = 0x8058;\n\t  var SRGB8_ALPHA8 = 0x8C43;\n\t  var RGBA8_SNORM = 0x8F97;\n\t  var RGB5_A1 = 0x8057;\n\t  var RGBA4 = 0x8056;\n\t  var RGB10_A2 = 0x8059;\n\t  var RGBA16F = 0x881A;\n\t  var RGBA32F = 0x8814;\n\t  var RGBA8UI = 0x8D7C;\n\t  var RGBA8I = 0x8D8E;\n\t  var RGB10_A2UI = 0x906F;\n\t  var RGBA16UI = 0x8D76;\n\t  var RGBA16I = 0x8D88;\n\t  var RGBA32I = 0x8D82;\n\t  var RGBA32UI = 0x8D70;\n\n\t  var DEPTH_COMPONENT16 = 0x81A5;\n\t  var DEPTH_COMPONENT24 = 0x81A6;\n\t  var DEPTH_COMPONENT32F = 0x8CAC;\n\t  var DEPTH32F_STENCIL8 = 0x8CAD;\n\t  var DEPTH24_STENCIL8 = 0x88F0;\n\n\t  /* DataType */\n\t  var BYTE = 0x1400;\n\t  var UNSIGNED_BYTE = 0x1401;\n\t  var SHORT = 0x1402;\n\t  var UNSIGNED_SHORT = 0x1403;\n\t  var INT = 0x1404;\n\t  var UNSIGNED_INT = 0x1405;\n\t  var FLOAT = 0x1406;\n\t  var UNSIGNED_SHORT_4_4_4_4 = 0x8033;\n\t  var UNSIGNED_SHORT_5_5_5_1 = 0x8034;\n\t  var UNSIGNED_SHORT_5_6_5 = 0x8363;\n\t  var HALF_FLOAT = 0x140B;\n\t  var HALF_FLOAT_OES = 0x8D61; // Thanks Khronos for making this different >:(\n\t  var UNSIGNED_INT_2_10_10_10_REV = 0x8368;\n\t  var UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;\n\t  var UNSIGNED_INT_5_9_9_9_REV = 0x8C3E;\n\t  var FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;\n\t  var UNSIGNED_INT_24_8 = 0x84FA;\n\n\t  var RG = 0x8227;\n\t  var RG_INTEGER = 0x8228;\n\t  var RED = 0x1903;\n\t  var RED_INTEGER = 0x8D94;\n\t  var RGB_INTEGER = 0x8D98;\n\t  var RGBA_INTEGER = 0x8D99;\n\n\t  var formatInfo = {};\n\t  {\n\t    // NOTE: this is named `numColorComponents` vs `numComponents` so we can let Uglify mangle\n\t    // the name.\n\t    var f = formatInfo;\n\t    f[ALPHA] = { numColorComponents: 1 };\n\t    f[LUMINANCE] = { numColorComponents: 1 };\n\t    f[LUMINANCE_ALPHA] = { numColorComponents: 2 };\n\t    f[RGB] = { numColorComponents: 3 };\n\t    f[RGBA] = { numColorComponents: 4 };\n\t    f[RED] = { numColorComponents: 1 };\n\t    f[RED_INTEGER] = { numColorComponents: 1 };\n\t    f[RG] = { numColorComponents: 2 };\n\t    f[RG_INTEGER] = { numColorComponents: 2 };\n\t    f[RGB] = { numColorComponents: 3 };\n\t    f[RGB_INTEGER] = { numColorComponents: 3 };\n\t    f[RGBA] = { numColorComponents: 4 };\n\t    f[RGBA_INTEGER] = { numColorComponents: 4 };\n\t    f[DEPTH_COMPONENT] = { numColorComponents: 1 };\n\t    f[DEPTH_STENCIL] = { numColorComponents: 2 };\n\t  }\n\n\t  var textureInternalFormatInfo = {};\n\t  {\n\t    (function () {\n\t      // NOTE: these properties need unique names so we can let Uglify mangle the name.\n\t      var t = textureInternalFormatInfo;\n\t      // unsized formats\n\t      t[ALPHA] = { textureFormat: ALPHA, colorRenderable: true, textureFilterable: true, bytesPerElement: [1, 2, 2, 4], type: [UNSIGNED_BYTE, HALF_FLOAT, HALF_FLOAT_OES, FLOAT] };\n\t      t[LUMINANCE] = { textureFormat: LUMINANCE, colorRenderable: true, textureFilterable: true, bytesPerElement: [1, 2, 2, 4], type: [UNSIGNED_BYTE, HALF_FLOAT, HALF_FLOAT_OES, FLOAT] };\n\t      t[LUMINANCE_ALPHA] = { textureFormat: LUMINANCE_ALPHA, colorRenderable: true, textureFilterable: true, bytesPerElement: [2, 4, 4, 8], type: [UNSIGNED_BYTE, HALF_FLOAT, HALF_FLOAT_OES, FLOAT] };\n\t      t[RGB] = { textureFormat: RGB, colorRenderable: true, textureFilterable: true, bytesPerElement: [3, 6, 6, 12, 2], type: [UNSIGNED_BYTE, HALF_FLOAT, HALF_FLOAT_OES, FLOAT, UNSIGNED_SHORT_5_6_5] };\n\t      t[RGBA] = { textureFormat: RGBA, colorRenderable: true, textureFilterable: true, bytesPerElement: [4, 8, 8, 16, 2, 2], type: [UNSIGNED_BYTE, HALF_FLOAT, HALF_FLOAT_OES, FLOAT, UNSIGNED_SHORT_4_4_4_4, UNSIGNED_SHORT_5_5_5_1] };\n\n\t      // sized formats\n\t      t[R8] = { textureFormat: RED, colorRenderable: true, textureFilterable: true, bytesPerElement: 1, type: UNSIGNED_BYTE };\n\t      t[R8_SNORM] = { textureFormat: RED, colorRenderable: false, textureFilterable: true, bytesPerElement: 1, type: BYTE };\n\t      t[R16F] = { textureFormat: RED, colorRenderable: false, textureFilterable: true, bytesPerElement: [4, 2], type: [FLOAT, HALF_FLOAT] };\n\t      t[R32F] = { textureFormat: RED, colorRenderable: false, textureFilterable: false, bytesPerElement: 4, type: FLOAT };\n\t      t[R8UI] = { textureFormat: RED_INTEGER, colorRenderable: true, textureFilterable: false, bytesPerElement: 1, type: UNSIGNED_BYTE };\n\t      t[R8I] = { textureFormat: RED_INTEGER, colorRenderable: true, textureFilterable: false, bytesPerElement: 1, type: BYTE };\n\t      t[R16UI] = { textureFormat: RED_INTEGER, colorRenderable: true, textureFilterable: false, bytesPerElement: 2, type: UNSIGNED_SHORT };\n\t      t[R16I] = { textureFormat: RED_INTEGER, colorRenderable: true, textureFilterable: false, bytesPerElement: 2, type: SHORT };\n\t      t[R32UI] = { textureFormat: RED_INTEGER, colorRenderable: true, textureFilterable: false, bytesPerElement: 4, type: UNSIGNED_INT };\n\t      t[R32I] = { textureFormat: RED_INTEGER, colorRenderable: true, textureFilterable: false, bytesPerElement: 4, type: INT };\n\t      t[RG8] = { textureFormat: RG, colorRenderable: true, textureFilterable: true, bytesPerElement: 2, type: UNSIGNED_BYTE };\n\t      t[RG8_SNORM] = { textureFormat: RG, colorRenderable: false, textureFilterable: true, bytesPerElement: 2, type: BYTE };\n\t      t[RG16F] = { textureFormat: RG, colorRenderable: false, textureFilterable: true, bytesPerElement: [8, 4], type: [FLOAT, HALF_FLOAT] };\n\t      t[RG32F] = { textureFormat: RG, colorRenderable: false, textureFilterable: false, bytesPerElement: 8, type: FLOAT };\n\t      t[RG8UI] = { textureFormat: RG_INTEGER, colorRenderable: true, textureFilterable: false, bytesPerElement: 2, type: UNSIGNED_BYTE };\n\t      t[RG8I] = { textureFormat: RG_INTEGER, colorRenderable: true, textureFilterable: false, bytesPerElement: 2, type: BYTE };\n\t      t[RG16UI] = { textureFormat: RG_INTEGER, colorRenderable: true, textureFilterable: false, bytesPerElement: 4, type: UNSIGNED_SHORT };\n\t      t[RG16I] = { textureFormat: RG_INTEGER, colorRenderable: true, textureFilterable: false, bytesPerElement: 4, type: SHORT };\n\t      t[RG32UI] = { textureFormat: RG_INTEGER, colorRenderable: true, textureFilterable: false, bytesPerElement: 8, type: UNSIGNED_INT };\n\t      t[RG32I] = { textureFormat: RG_INTEGER, colorRenderable: true, textureFilterable: false, bytesPerElement: 8, type: INT };\n\t      t[RGB8] = { textureFormat: RGB, colorRenderable: true, textureFilterable: true, bytesPerElement: 3, type: UNSIGNED_BYTE };\n\t      t[SRGB8] = { textureFormat: RGB, colorRenderable: false, textureFilterable: true, bytesPerElement: 3, type: UNSIGNED_BYTE };\n\t      t[RGB565] = { textureFormat: RGB, colorRenderable: true, textureFilterable: true, bytesPerElement: [3, 2], type: [UNSIGNED_BYTE, UNSIGNED_SHORT_5_6_5] };\n\t      t[RGB8_SNORM] = { textureFormat: RGB, colorRenderable: false, textureFilterable: true, bytesPerElement: 3, type: BYTE };\n\t      t[R11F_G11F_B10F] = { textureFormat: RGB, colorRenderable: false, textureFilterable: true, bytesPerElement: [12, 6, 4], type: [FLOAT, HALF_FLOAT, UNSIGNED_INT_10F_11F_11F_REV] };\n\t      t[RGB9_E5] = { textureFormat: RGB, colorRenderable: false, textureFilterable: true, bytesPerElement: [12, 6, 4], type: [FLOAT, HALF_FLOAT, UNSIGNED_INT_5_9_9_9_REV] };\n\t      t[RGB16F] = { textureFormat: RGB, colorRenderable: false, textureFilterable: true, bytesPerElement: [12, 6], type: [FLOAT, HALF_FLOAT] };\n\t      t[RGB32F] = { textureFormat: RGB, colorRenderable: false, textureFilterable: false, bytesPerElement: 12, type: FLOAT };\n\t      t[RGB8UI] = { textureFormat: RGB_INTEGER, colorRenderable: false, textureFilterable: false, bytesPerElement: 3, type: UNSIGNED_BYTE };\n\t      t[RGB8I] = { textureFormat: RGB_INTEGER, colorRenderable: false, textureFilterable: false, bytesPerElement: 3, type: BYTE };\n\t      t[RGB16UI] = { textureFormat: RGB_INTEGER, colorRenderable: false, textureFilterable: false, bytesPerElement: 6, type: UNSIGNED_SHORT };\n\t      t[RGB16I] = { textureFormat: RGB_INTEGER, colorRenderable: false, textureFilterable: false, bytesPerElement: 6, type: SHORT };\n\t      t[RGB32UI] = { textureFormat: RGB_INTEGER, colorRenderable: false, textureFilterable: false, bytesPerElement: 12, type: UNSIGNED_INT };\n\t      t[RGB32I] = { textureFormat: RGB_INTEGER, colorRenderable: false, textureFilterable: false, bytesPerElement: 12, type: INT };\n\t      t[RGBA8] = { textureFormat: RGBA, colorRenderable: true, textureFilterable: true, bytesPerElement: 4, type: UNSIGNED_BYTE };\n\t      t[SRGB8_ALPHA8] = { textureFormat: RGBA, colorRenderable: true, textureFilterable: true, bytesPerElement: 4, type: UNSIGNED_BYTE };\n\t      t[RGBA8_SNORM] = { textureFormat: RGBA, colorRenderable: false, textureFilterable: true, bytesPerElement: 4, type: BYTE };\n\t      t[RGB5_A1] = { textureFormat: RGBA, colorRenderable: true, textureFilterable: true, bytesPerElement: [4, 2, 4], type: [UNSIGNED_BYTE, UNSIGNED_SHORT_5_5_5_1, UNSIGNED_INT_2_10_10_10_REV] };\n\t      t[RGBA4] = { textureFormat: RGBA, colorRenderable: true, textureFilterable: true, bytesPerElement: [4, 2], type: [UNSIGNED_BYTE, UNSIGNED_SHORT_4_4_4_4] };\n\t      t[RGB10_A2] = { textureFormat: RGBA, colorRenderable: true, textureFilterable: true, bytesPerElement: 4, type: UNSIGNED_INT_2_10_10_10_REV };\n\t      t[RGBA16F] = { textureFormat: RGBA, colorRenderable: false, textureFilterable: true, bytesPerElement: [16, 8], type: [FLOAT, HALF_FLOAT] };\n\t      t[RGBA32F] = { textureFormat: RGBA, colorRenderable: false, textureFilterable: false, bytesPerElement: 16, type: FLOAT };\n\t      t[RGBA8UI] = { textureFormat: RGBA_INTEGER, colorRenderable: true, textureFilterable: false, bytesPerElement: 4, type: UNSIGNED_BYTE };\n\t      t[RGBA8I] = { textureFormat: RGBA_INTEGER, colorRenderable: true, textureFilterable: false, bytesPerElement: 4, type: BYTE };\n\t      t[RGB10_A2UI] = { textureFormat: RGBA_INTEGER, colorRenderable: true, textureFilterable: false, bytesPerElement: 4, type: UNSIGNED_INT_2_10_10_10_REV };\n\t      t[RGBA16UI] = { textureFormat: RGBA_INTEGER, colorRenderable: true, textureFilterable: false, bytesPerElement: 8, type: UNSIGNED_SHORT };\n\t      t[RGBA16I] = { textureFormat: RGBA_INTEGER, colorRenderable: true, textureFilterable: false, bytesPerElement: 8, type: SHORT };\n\t      t[RGBA32I] = { textureFormat: RGBA_INTEGER, colorRenderable: true, textureFilterable: false, bytesPerElement: 16, type: INT };\n\t      t[RGBA32UI] = { textureFormat: RGBA_INTEGER, colorRenderable: true, textureFilterable: false, bytesPerElement: 16, type: UNSIGNED_INT };\n\t      // Sized Internal\n\t      t[DEPTH_COMPONENT16] = { textureFormat: DEPTH_COMPONENT, colorRenderable: true, textureFilterable: false, bytesPerElement: [2, 4], type: [UNSIGNED_SHORT, UNSIGNED_INT] };\n\t      t[DEPTH_COMPONENT24] = { textureFormat: DEPTH_COMPONENT, colorRenderable: true, textureFilterable: false, bytesPerElement: 4, type: UNSIGNED_INT };\n\t      t[DEPTH_COMPONENT32F] = { textureFormat: DEPTH_COMPONENT, colorRenderable: true, textureFilterable: false, bytesPerElement: 4, type: FLOAT };\n\t      t[DEPTH24_STENCIL8] = { textureFormat: DEPTH_STENCIL, colorRenderable: true, textureFilterable: false, bytesPerElement: 4, type: UNSIGNED_INT_24_8 };\n\t      t[DEPTH32F_STENCIL8] = { textureFormat: DEPTH_STENCIL, colorRenderable: true, textureFilterable: false, bytesPerElement: 4, type: FLOAT_32_UNSIGNED_INT_24_8_REV };\n\n\t      Object.keys(t).forEach(function (internalFormat) {\n\t        var info = t[internalFormat];\n\t        info.bytesPerElementMap = {};\n\t        if (Array.isArray(info.bytesPerElement)) {\n\t          info.bytesPerElement.forEach(function (bytesPerElement, ndx) {\n\t            var type = info.type[ndx];\n\t            info.bytesPerElementMap[type] = bytesPerElement;\n\t          });\n\t        } else {\n\t          var type = info.type;\n\t          info.bytesPerElementMap[type] = info.bytesPerElement;\n\t        }\n\t      });\n\t    })();\n\t  }\n\n\t  /**\n\t   * Gets the number of bytes per element for a given internalFormat / type\n\t   * @param {number} internalFormat The internalFormat parameter from texImage2D etc..\n\t   * @param {number} type The type parameter for texImage2D etc..\n\t   * @return {number} the number of bytes per element for the given internalFormat, type combo\n\t   * @memberOf module:twgl/textures\n\t   */\n\t  function getBytesPerElementForInternalFormat(internalFormat, type) {\n\t    var info = textureInternalFormatInfo[internalFormat];\n\t    if (!info) {\n\t      throw \"unknown internal format\";\n\t    }\n\t    var bytesPerElement = info.bytesPerElementMap[type];\n\t    if (bytesPerElement === undefined) {\n\t      throw \"unknown internal format\";\n\t    }\n\t    return bytesPerElement;\n\t  }\n\n\t  /**\n\t   * Gets the format for a given internalFormat\n\t   *\n\t   * @param {number} internalFormat The internal format\n\t   * @return {{format:number, type:number}} the corresponding format and type\n\t   */\n\t  function getFormatAndTypeForInternalFormat(internalFormat) {\n\t    var info = textureInternalFormatInfo[internalFormat];\n\t    if (!info) {\n\t      throw \"unknown internal format\";\n\t    }\n\t    return {\n\t      format: info.textureFormat,\n\t      type: Array.isArray(info.type) ? info.type[0] : info.type\n\t    };\n\t  }\n\n\t  /**\n\t   * Returns true if value is power of 2\n\t   * @param {number} value number to check.\n\t   * @return true if value is power of 2\n\t   */\n\t  function isPowerOf2(value) {\n\t    return (value & value - 1) === 0;\n\t  }\n\n\t  /**\n\t   * Gets whether or not we can generate mips for the given format\n\t   * @param {number} internalFormat The internalFormat parameter from texImage2D etc..\n\t   * @param {number} type The type parameter for texImage2D etc..\n\t   * @return {boolean} true if we can generate mips\n\t   */\n\t  function canGenerateMipmap(gl, width, height, internalFormat /*, type */) {\n\t    if (!utils.isWebGL2(gl)) {\n\t      return isPowerOf2(width) && isPowerOf2(height);\n\t    }\n\t    var info = textureInternalFormatInfo[internalFormat];\n\t    if (!info) {\n\t      throw \"unknown internal format\";\n\t    }\n\t    return info.colorRenderable && info.textureFilterable;\n\t  }\n\n\t  /**\n\t   * Gets whether or not we can generate mips for the given format\n\t   * @param {number} internalFormat The internalFormat parameter from texImage2D etc..\n\t   * @param {number} type The type parameter for texImage2D etc..\n\t   * @return {boolean} true if we can generate mips\n\t   */\n\t  function canFilter(internalFormat /*, type */) {\n\t    var info = textureInternalFormatInfo[internalFormat];\n\t    if (!info) {\n\t      throw \"unknown internal format\";\n\t    }\n\t    return info.textureFilterable;\n\t  }\n\n\t  /**\n\t   * Gets the number of compontents for a given image format.\n\t   * @param {number} format the format.\n\t   * @return {number} the number of components for the format.\n\t   * @memberOf module:twgl/textures\n\t   */\n\t  function getNumComponentsForFormat(format) {\n\t    var info = formatInfo[format];\n\t    if (!info) {\n\t      throw \"unknown format: \" + format;\n\t    }\n\t    return info.numColorComponents;\n\t  }\n\n\t  /**\n\t   * Gets the texture type for a given array type.\n\t   * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n\t   * @return {number} the gl texture type\n\t   */\n\t  function getTextureTypeForArrayType(gl, src, defaultType) {\n\t    if (isArrayBuffer(src)) {\n\t      return typedArrays.getGLTypeForTypedArray(src);\n\t    }\n\t    return defaultType || gl.UNSIGNED_BYTE;\n\t  }\n\n\t  function guessDimensions(gl, target, width, height, numElements) {\n\t    if (numElements % 1 !== 0) {\n\t      throw \"can't guess dimensions\";\n\t    }\n\t    if (!width && !height) {\n\t      var size = Math.sqrt(numElements / (target === gl.TEXTURE_CUBE_MAP ? 6 : 1));\n\t      if (size % 1 === 0) {\n\t        width = size;\n\t        height = size;\n\t      } else {\n\t        width = numElements;\n\t        height = 1;\n\t      }\n\t    } else if (!height) {\n\t      height = numElements / width;\n\t      if (height % 1) {\n\t        throw \"can't guess dimensions\";\n\t      }\n\t    } else if (!width) {\n\t      width = numElements / height;\n\t      if (width % 1) {\n\t        throw \"can't guess dimensions\";\n\t      }\n\t    }\n\t    return {\n\t      width: width,\n\t      height: height\n\t    };\n\t  }\n\n\t  /**\n\t   * Sets the default texture color.\n\t   *\n\t   * The default texture color is used when loading textures from\n\t   * urls. Because the URL will be loaded async we'd like to be\n\t   * able to use the texture immediately. By putting a 1x1 pixel\n\t   * color in the texture we can start using the texture before\n\t   * the URL has loaded.\n\t   *\n\t   * @param {number[]} color Array of 4 values in the range 0 to 1\n\t   * @deprecated see {@link module:twgl.setDefaults}\n\t   * @memberOf module:twgl/textures\n\t   */\n\t  function setDefaultTextureColor(color) {\n\t    defaults.textureColor = new Uint8Array([color[0] * 255, color[1] * 255, color[2] * 255, color[3] * 255]);\n\t  }\n\n\t  function setDefaults(newDefaults) {\n\t    utils.copyExistingProperties(newDefaults, defaults);\n\t    if (newDefaults.textureColor) {\n\t      setDefaultTextureColor(newDefaults.textureColor);\n\t    }\n\t  }\n\n\t  /**\n\t   * Gets a string for gl enum\n\t   *\n\t   * Note: Several enums are the same. Without more\n\t   * context (which function) it's impossible to always\n\t   * give the correct enum.\n\t   *\n\t   * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n\t   * @param {number} value the value of the enum you want to look up.\n\t   */\n\t  var glEnumToString = function () {\n\t    var enums;\n\n\t    function init(gl) {\n\t      if (!enums) {\n\t        enums = {};\n\t        for (var key in gl) {\n\t          if (typeof gl[key] === 'number') {\n\t            enums[gl[key]] = key;\n\t          }\n\t        }\n\t      }\n\t    }\n\n\t    return function glEnumToString(gl, value) {\n\t      init(gl);\n\t      return enums[value] || \"0x\" + value.toString(16);\n\t    };\n\t  }();\n\n\t  /**\n\t   * A function to generate the source for a texture.\n\t   * @callback TextureFunc\n\t   * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n\t   * @param {module:twgl.TextureOptions} options the texture options\n\t   * @return {*} Returns any of the things documentented for `src` for {@link module:twgl.TextureOptions}.\n\t   * @memberOf module:twgl\n\t   */\n\n\t  /**\n\t   * Texture options passed to most texture functions. Each function will use whatever options\n\t   * are appropriate for its needs. This lets you pass the same options to all functions.\n\t   *\n\t   * @typedef {Object} TextureOptions\n\t   * @property {number} [target] the type of texture `gl.TEXTURE_2D` or `gl.TEXTURE_CUBE_MAP`. Defaults to `gl.TEXTURE_2D`.\n\t   * @property {number} [width] the width of the texture. Only used if src is an array or typed array or null.\n\t   * @property {number} [height] the height of a texture. Only used if src is an array or typed array or null.\n\t   * @property {number} [depth] the depth of a texture. Only used if src is an array or type array or null and target is `TEXTURE_3D` .\n\t   * @property {number} [min] the min filter setting (eg. `gl.LINEAR`). Defaults to `gl.NEAREST_MIPMAP_LINEAR`\n\t   *     or if texture is not a power of 2 on both dimensions then defaults to `gl.LINEAR`.\n\t   * @property {number} [mag] the mag filter setting (eg. `gl.LINEAR`). Defaults to `gl.LINEAR`\n\t   * @property {number} [minMag] both the min and mag filter settings.\n\t   * @property {number} [internalFormat] internal format for texture. Defaults to `gl.RGBA`\n\t   * @property {number} [format] format for texture. Defaults to `gl.RGBA`.\n\t   * @property {number} [type] type for texture. Defaults to `gl.UNSIGNED_BYTE` unless `src` is ArrayBuffer. If `src`\n\t   *     is ArrayBuffer defaults to type that matches ArrayBuffer type.\n\t   * @property {number} [wrap] Texture wrapping for both S and T (and R if TEXTURE_3D or WebGLSampler). Defaults to `gl.REPEAT` for 2D unless src is WebGL1 and src not npot and `gl.CLAMP_TO_EDGE` for cube\n\t   * @property {number} [wrapS] Texture wrapping for S. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.\n\t   * @property {number} [wrapT] Texture wrapping for T. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.\n\t   * @property {number} [wrapR] Texture wrapping for R. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.\n\t   * @property {number} [minLod] TEXTURE_MIN_LOD setting\n\t   * @property {number} [maxLod] TEXTURE_MAX_LOD setting\n\t   * @property {number} [baseLevel] TEXTURE_BASE_LEVEL setting\n\t   * @property {number} [maxLevel] TEXTURE_MAX_LEVEL setting\n\t   * @property {number} [unpackAlignment] The `gl.UNPACK_ALIGNMENT` used when uploading an array. Defaults to 1.\n\t   * @property {number} [premultiplyAlpha] Whether or not to premultiply alpha. Defaults to whatever the current setting is.\n\t   *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override\n\t   *     the current setting for specific textures.\n\t   * @property {number} [flipY] Whether or not to flip the texture vertically on upload. Defaults to whatever the current setting is.\n\t   *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override\n\t   *     the current setting for specific textures.\n\t   * @property {number} [colorspaceConversion] Whether or not to let the browser do colorspace conversion of the texture on upload. Defaults to whatever the current setting is.\n\t   *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override\n\t   *     the current setting for specific textures.\n\t   * @property {(number[]|ArrayBuffer)} color color used as temporary 1x1 pixel color for textures loaded async when src is a string.\n\t   *    If it's a JavaScript array assumes color is 0 to 1 like most GL colors as in `[1, 0, 0, 1] = red=1, green=0, blue=0, alpha=0`.\n\t   *    Defaults to `[0.5, 0.75, 1, 1]`. See {@link module:twgl.setDefaultTextureColor}. If `false` texture is set. Can be used to re-load a texture\n\t   * @property {boolean} [auto] If not `false` then texture working filtering is set automatically for non-power of 2 images and\n\t   *    mips are generated for power of 2 images.\n\t   * @property {number[]} [cubeFaceOrder] The order that cube faces are pulled out of an img or set of images. The default is\n\t   *\n\t   *     [gl.TEXTURE_CUBE_MAP_POSITIVE_X,\n\t   *      gl.TEXTURE_CUBE_MAP_NEGATIVE_X,\n\t   *      gl.TEXTURE_CUBE_MAP_POSITIVE_Y,\n\t   *      gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,\n\t   *      gl.TEXTURE_CUBE_MAP_POSITIVE_Z,\n\t   *      gl.TEXTURE_CUBE_MAP_NEGATIVE_Z]\n\t   *\n\t   * @property {(number[]|ArrayBuffer|HTMLCanvasElement|HTMLImageElement|HTMLVideoElement|string|string[]|module:twgl.TextureFunc)} [src] source for texture\n\t   *\n\t   *    If `string` then it's assumed to be a URL to an image. The image will be downloaded async. A usable\n\t   *    1x1 pixel texture will be returned immediatley. The texture will be updated once the image has downloaded.\n\t   *    If `target` is `gl.TEXTURE_CUBE_MAP` will attempt to divide image into 6 square pieces. 1x6, 6x1, 3x2, 2x3.\n\t   *    The pieces will be uploaded in `cubeFaceOrder`\n\t   *\n\t   *    If `string[]` then it must have 6 entries, one for each face of a cube map. Target must be `gl.TEXTURE_CUBE_MAP`.\n\t   *\n\t   *    If `HTMLElement` then it wil be used immediately to create the contents of the texture. Examples `HTMLImageElement`,\n\t   *    `HTMLCanvasElement`, `HTMLVideoElement`.\n\t   *\n\t   *    If `number[]` or `ArrayBuffer` it's assumed to be data for a texture. If `width` or `height` is\n\t   *    not specified it is guessed as follows. First the number of elements is computed by `src.length / numComponets`\n\t   *    where `numComponents` is derived from `format`. If `target` is `gl.TEXTURE_CUBE_MAP` then `numElements` is divided\n\t   *    by 6. Then\n\t   *\n\t   *    *   If neither `width` nor `height` are specified and `sqrt(numElements)` is an integer then width and height\n\t   *        are set to `sqrt(numElements)`. Otherwise `width = numElements` and `height = 1`.\n\t   *\n\t   *    *   If only one of `width` or `height` is specified then the other equals `numElements / specifiedDimension`.\n\t   *\n\t   * If `number[]` will be converted to `type`.\n\t   *\n\t   * If `src` is a function it will be called with a `WebGLRenderingContext` and these options.\n\t   * Whatever it returns is subject to these rules. So it can return a string url, an `HTMLElement`\n\t   * an array etc...\n\t   *\n\t   * If `src` is undefined then an empty texture will be created of size `width` by `height`.\n\t   *\n\t   * @property {string} [crossOrigin] What to set the crossOrigin property of images when they are downloaded.\n\t   *    default: undefined. Also see {@link module:twgl.setDefaults}.\n\t   *\n\t   * @memberOf module:twgl\n\t   */\n\n\t  // NOTE: While querying GL is considered slow it's not remotely as slow\n\t  // as uploading a texture. On top of that you're unlikely to call this in\n\t  // a perf critical loop. Even if upload a texture every frame that's unlikely\n\t  // to be more than 1 or 2 textures a frame. In other words, the benefits of\n\t  // making the API easy to use outweigh any supposed perf benefits\n\t  var lastPackState = {};\n\n\t  /**\n\t   * Saves any packing state that will be set based on the options.\n\t   * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n\t   * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n\t   */\n\t  function savePackState(gl, options) {\n\t    if (options.colorspaceConversion !== undefined) {\n\t      lastPackState.colorspaceConversion = gl.getParameter(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL);\n\t      gl.pixelStorei(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, options.colorspaceConversion);\n\t    }\n\t    if (options.premultiplyAlpha !== undefined) {\n\t      lastPackState.premultiplyAlpha = gl.getParameter(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL);\n\t      gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, options.premultiplyAlpha);\n\t    }\n\t    if (options.flipY !== undefined) {\n\t      lastPackState.flipY = gl.getParameter(gl.UNPACK_FLIP_Y_WEBGL);\n\t      gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, options.flipY);\n\t    }\n\t  }\n\n\t  /**\n\t   * Restores any packing state that was set based on the options.\n\t   * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n\t   * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n\t   */\n\t  function restorePackState(gl, options) {\n\t    if (options.colorspaceConversion !== undefined) {\n\t      gl.pixelStorei(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, lastPackState.colorspaceConversion);\n\t    }\n\t    if (options.premultiplyAlpha !== undefined) {\n\t      gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, lastPackState.premultiplyAlpha);\n\t    }\n\t    if (options.flipY !== undefined) {\n\t      gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, lastPackState.flipY);\n\t    }\n\t  }\n\n\t  var WebGLSamplerCtor = window.WebGLSampler || function NotWebGLSampler() {};\n\n\t  /**\n\t   * Sets the parameters of a texture or sampler\n\t   * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n\t   * @param {number|WebGLSampler} target texture target or sampler\n\t   * @param {function()} parameteriFn texParamteri or samplerParameteri fn\n\t   * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n\t   * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n\t   *   This is often the same options you passed in when you created the texture.\n\t   */\n\t  function setTextureSamplerParameters(gl, target, parameteriFn, options) {\n\t    if (options.minMag) {\n\t      parameteriFn.call(gl, target, gl.TEXTURE_MIN_FILTER, options.minMag);\n\t      parameteriFn.call(gl, target, gl.TEXTURE_MAG_FILTER, options.minMag);\n\t    }\n\t    if (options.min) {\n\t      parameteriFn.call(gl, target, gl.TEXTURE_MIN_FILTER, options.min);\n\t    }\n\t    if (options.mag) {\n\t      parameteriFn.call(gl, target, gl.TEXTURE_MAG_FILTER, options.mag);\n\t    }\n\t    if (options.wrap) {\n\t      parameteriFn.call(gl, target, gl.TEXTURE_WRAP_S, options.wrap);\n\t      parameteriFn.call(gl, target, gl.TEXTURE_WRAP_T, options.wrap);\n\t      if (target === gl.TEXTURE_3D || target instanceof WebGLSamplerCtor) {\n\t        parameteriFn.call(gl, target, gl.TEXTURE_WRAP_R, options.wrap);\n\t      }\n\t    }\n\t    if (options.wrapR) {\n\t      parameteriFn.call(gl, target, gl.TEXTURE_WRAP_R, options.wrapR);\n\t    }\n\t    if (options.wrapS) {\n\t      parameteriFn.call(gl, target, gl.TEXTURE_WRAP_S, options.wrapS);\n\t    }\n\t    if (options.wrapT) {\n\t      parameteriFn.call(gl, target, gl.TEXTURE_WRAP_T, options.wrapT);\n\t    }\n\t    if (options.minLod) {\n\t      parameteriFn.call(gl, target, gl.TEXTURE_MIN_LOD, options.minLod);\n\t    }\n\t    if (options.maxLod) {\n\t      parameteriFn.call(gl, target, gl.TEXTURE_MAX_LOD, options.maxLod);\n\t    }\n\t    if (options.baseLevel) {\n\t      parameteriFn.call(gl, target, gl.TEXTURE_BASE_LEVEL, options.baseLevel);\n\t    }\n\t    if (options.maxLevel) {\n\t      parameteriFn.call(gl, target, gl.TEXTURE_MAX_LEVEL, options.maxLevel);\n\t    }\n\t  }\n\n\t  /**\n\t   * Sets the texture parameters of a texture.\n\t   * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n\t   * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n\t   * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n\t   *   This is often the same options you passed in when you created the texture.\n\t   * @memberOf module:twgl/textures\n\t   */\n\t  function setTextureParameters(gl, tex, options) {\n\t    var target = options.target || gl.TEXTURE_2D;\n\t    gl.bindTexture(target, tex);\n\t    setTextureSamplerParameters(gl, target, gl.texParameteri, options);\n\t  }\n\n\t  /**\n\t   * Sets the sampler parameters of a sampler.\n\t   * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n\t   * @param {WebGLSampler} sampler the WebGLSampler to set parameters for\n\t   * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n\t   * @memberOf module:twgl/textures\n\t   */\n\t  function setSamplerParameters(gl, sampler, options) {\n\t    setTextureSamplerParameters(gl, sampler, gl.samplerParameteri, options);\n\t  }\n\n\t  /**\n\t   * Creates a new sampler object and sets parameters.\n\t   *\n\t   * Example:\n\t   *\n\t   *      const sampler = twgl.createSampler(gl, {\n\t   *        minMag: gl.NEAREST,         // sets both TEXTURE_MIN_FILTER and TEXTURE_MAG_FILTER\n\t   *        wrap: gl.CLAMP_TO_NEAREST,  // sets both TEXTURE_WRAP_S and TEXTURE_WRAP_T and TEXTURE_WRAP_R\n\t   *      });\n\t   *\n\t   * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n\t   * @param {Object.<string,module:twgl.TextureOptions>} options A object of TextureOptions one per sampler.\n\t   * @return {Object.<string,WebGLSampler>} the created samplers by name\n\t   */\n\t  function createSampler(gl, options) {\n\t    var sampler = gl.createSampler();\n\t    setSamplerParameters(gl, sampler, options);\n\t    return sampler;\n\t  }\n\n\t  /**\n\t   * Creates a multiple sampler objects and sets parameters on each.\n\t   *\n\t   * Example:\n\t   *\n\t   *      const samplers = twgl.createSamplers(gl, {\n\t   *        nearest: {\n\t   *          minMag: gl.NEAREST,\n\t   *        },\n\t   *        nearestClampS: {\n\t   *          minMag: gl.NEAREST,\n\t   *          wrapS: gl.CLAMP_TO_NEAREST,\n\t   *        },\n\t   *        linear: {\n\t   *          minMag: gl.LINEAR,\n\t   *        },\n\t   *        nearestClamp: {\n\t   *          minMag: gl.NEAREST,\n\t   *          wrap: gl.CLAMP_TO_EDGE,\n\t   *        },\n\t   *        linearClamp: {\n\t   *          minMag: gl.LINEAR,\n\t   *          wrap: gl.CLAMP_TO_EDGE,\n\t   *        },\n\t   *        linearClampT: {\n\t   *          minMag: gl.LINEAR,\n\t   *          wrapT: gl.CLAMP_TO_EDGE,\n\t   *        },\n\t   *      });\n\t   *\n\t   * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n\t   * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set on the sampler\n\t   */\n\t  function createSamplers(gl, samplerOptions) {\n\t    var samplers = {};\n\t    Object.keys(samplerOptions).forEach(function (name) {\n\t      samplers[name] = createSampler(gl, samplerOptions[name]);\n\t    });\n\t    return samplers;\n\t  }\n\n\t  /**\n\t   * Makes a 1x1 pixel\n\t   * If no color is passed in uses the default color which can be set by calling `setDefaultTextureColor`.\n\t   * @param {(number[]|ArrayBuffer)} [color] The color using 0-1 values\n\t   * @return {Uint8Array} Unit8Array with color.\n\t   */\n\t  function make1Pixel(color) {\n\t    color = color || defaults.textureColor;\n\t    if (isArrayBuffer(color)) {\n\t      return color;\n\t    }\n\t    return new Uint8Array([color[0] * 255, color[1] * 255, color[2] * 255, color[3] * 255]);\n\t  }\n\n\t  /**\n\t   * Sets filtering or generates mips for texture based on width or height\n\t   * If width or height is not passed in uses `options.width` and//or `options.height`\n\t   *\n\t   * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n\t   * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n\t   * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n\t   *   This is often the same options you passed in when you created the texture.\n\t   * @param {number} [width] width of texture\n\t   * @param {number} [height] height of texture\n\t   * @param {number} [internalFormat] The internalFormat parameter from texImage2D etc..\n\t   * @param {number} [type] The type parameter for texImage2D etc..\n\t   * @memberOf module:twgl/textures\n\t   */\n\t  function setTextureFilteringForSize(gl, tex, options, width, height, internalFormat, type) {\n\t    options = options || defaults.textureOptions;\n\t    internalFormat = internalFormat || gl.RGBA;\n\t    type = type || gl.UNSIGNED_BYTE;\n\t    var target = options.target || gl.TEXTURE_2D;\n\t    width = width || options.width;\n\t    height = height || options.height;\n\t    gl.bindTexture(target, tex);\n\t    if (canGenerateMipmap(gl, width, height, internalFormat, type)) {\n\t      gl.generateMipmap(target);\n\t    } else {\n\t      var filtering = canFilter(internalFormat, type) ? gl.LINEAR : gl.NEAREST;\n\t      gl.texParameteri(target, gl.TEXTURE_MIN_FILTER, filtering);\n\t      gl.texParameteri(target, gl.TEXTURE_MAG_FILTER, filtering);\n\t      gl.texParameteri(target, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n\t      gl.texParameteri(target, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\t    }\n\t  }\n\n\t  /**\n\t   * Gets an array of cubemap face enums\n\t   * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n\t   * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n\t   *   This is often the same options you passed in when you created the texture.\n\t   * @return {number[]} cubemap face enums\n\t   */\n\t  function getCubeFaceOrder(gl, options) {\n\t    options = options || {};\n\t    return options.cubeFaceOrder || [gl.TEXTURE_CUBE_MAP_POSITIVE_X, gl.TEXTURE_CUBE_MAP_NEGATIVE_X, gl.TEXTURE_CUBE_MAP_POSITIVE_Y, gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, gl.TEXTURE_CUBE_MAP_POSITIVE_Z, gl.TEXTURE_CUBE_MAP_NEGATIVE_Z];\n\t  }\n\n\t  /**\n\t   * @typedef {Object} FaceInfo\n\t   * @property {number} face gl enum for texImage2D\n\t   * @property {number} ndx face index (0 - 5) into source data\n\t   * @ignore\n\t   */\n\n\t  /**\n\t   * Gets an array of FaceInfos\n\t   * There's a bug in some NVidia drivers that will crash the driver if\n\t   * `gl.TEXTURE_CUBE_MAP_POSITIVE_X` is not uploaded first. So, we take\n\t   * the user's desired order from his faces to WebGL and make sure we\n\t   * do the faces in WebGL order\n\t   *\n\t   * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n\t   * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n\t   * @return {FaceInfo[]} cubemap face infos. Arguably the `face` property of each element is redundent but\n\t   *    it's needed internally to sort the array of `ndx` properties by `face`.\n\t   */\n\t  function getCubeFacesWithNdx(gl, options) {\n\t    var faces = getCubeFaceOrder(gl, options);\n\t    // work around bug in NVidia drivers. We have to upload the first face first else the driver crashes :(\n\t    var facesWithNdx = faces.map(function (face, ndx) {\n\t      return { face: face, ndx: ndx };\n\t    });\n\t    facesWithNdx.sort(function (a, b) {\n\t      return a.face - b.face;\n\t    });\n\t    return facesWithNdx;\n\t  }\n\n\t  /**\n\t   * Set a texture from the contents of an element. Will also set\n\t   * texture filtering or generate mips based on the dimensions of the element\n\t   * unless `options.auto === false`. If `target === gl.TEXTURE_CUBE_MAP` will\n\t   * attempt to slice image into 1x6, 2x3, 3x2, or 6x1 images, one for each face.\n\t   * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n\t   * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n\t   * @param {HTMLElement} element a canvas, img, or video element.\n\t   * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n\t   *   This is often the same options you passed in when you created the texture.\n\t   * @memberOf module:twgl/textures\n\t   * @kind function\n\t   */\n\t  function setTextureFromElement(gl, tex, element, options) {\n\t    options = options || defaults.textureOptions;\n\t    var target = options.target || gl.TEXTURE_2D;\n\t    var width = element.width;\n\t    var height = element.height;\n\t    var internalFormat = options.internalFormat || options.format || gl.RGBA;\n\t    var formatType = getFormatAndTypeForInternalFormat(internalFormat);\n\t    var format = options.format || formatType.format;\n\t    var type = options.type || formatType.type;\n\t    savePackState(gl, options);\n\t    gl.bindTexture(target, tex);\n\t    if (target === gl.TEXTURE_CUBE_MAP) {\n\t      // guess the parts\n\t      var imgWidth = element.width;\n\t      var imgHeight = element.height;\n\t      var size;\n\t      var slices;\n\t      if (imgWidth / 6 === imgHeight) {\n\t        // It's 6x1\n\t        size = imgHeight;\n\t        slices = [0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0];\n\t      } else if (imgHeight / 6 === imgWidth) {\n\t        // It's 1x6\n\t        size = imgWidth;\n\t        slices = [0, 0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5];\n\t      } else if (imgWidth / 3 === imgHeight / 2) {\n\t        // It's 3x2\n\t        size = imgWidth / 3;\n\t        slices = [0, 0, 1, 0, 2, 0, 0, 1, 1, 1, 2, 1];\n\t      } else if (imgWidth / 2 === imgHeight / 3) {\n\t        // It's 2x3\n\t        size = imgWidth / 2;\n\t        slices = [0, 0, 1, 0, 0, 1, 1, 1, 0, 2, 1, 2];\n\t      } else {\n\t        throw \"can't figure out cube map from element: \" + (element.src ? element.src : element.nodeName);\n\t      }\n\t      ctx.canvas.width = size;\n\t      ctx.canvas.height = size;\n\t      width = size;\n\t      height = size;\n\t      getCubeFacesWithNdx(gl, options).forEach(function (f) {\n\t        var xOffset = slices[f.ndx * 2 + 0] * size;\n\t        var yOffset = slices[f.ndx * 2 + 1] * size;\n\t        ctx.drawImage(element, xOffset, yOffset, size, size, 0, 0, size, size);\n\t        gl.texImage2D(f.face, 0, internalFormat, format, type, ctx.canvas);\n\t      });\n\t      // Free up the canvas memory\n\t      ctx.canvas.width = 1;\n\t      ctx.canvas.height = 1;\n\t    } else if (target === gl.TEXTURE_3D) {\n\t      var smallest = Math.min(element.width, element.height);\n\t      var largest = Math.max(element.width, element.height);\n\t      var depth = largest / smallest;\n\t      if (depth % 1 !== 0) {\n\t        throw \"can not compute 3D dimensions of element\";\n\t      }\n\t      var xMult = element.width === largest ? 1 : 0;\n\t      var yMult = element.height === largest ? 1 : 0;\n\t      gl.texImage3D(target, 0, internalFormat, smallest, smallest, smallest, 0, format, type, null);\n\t      // remove this is texSubImage3D gets width and height arguments\n\t      ctx.canvas.width = smallest;\n\t      ctx.canvas.height = smallest;\n\t      for (var d = 0; d < depth; ++d) {\n\t        //        gl.pixelStorei(gl.UNPACK_SKIP_PIXELS, d * smallest);\n\t        //        gl.texSubImage3D(target, 0, 0, 0, d, format, type, element);\n\t        var srcX = d * smallest * xMult;\n\t        var srcY = d * smallest * yMult;\n\t        var srcW = smallest;\n\t        var srcH = smallest;\n\t        var dstX = 0;\n\t        var dstY = 0;\n\t        var dstW = smallest;\n\t        var dstH = smallest;\n\t        ctx.drawImage(element, srcX, srcY, srcW, srcH, dstX, dstY, dstW, dstH);\n\t        gl.texSubImage3D(target, 0, 0, 0, d, smallest, smallest, 1, format, type, ctx.canvas);\n\t      }\n\t      ctx.canvas.width = 0;\n\t      ctx.canvas.height = 0;\n\t      // FIX (save state)\n\t      //      gl.pixelStorei(gl.UNPACK_SKIP_PIXELS, 0);\n\t    } else {\n\t      gl.texImage2D(target, 0, internalFormat, format, type, element);\n\t    }\n\t    restorePackState(gl, options);\n\t    if (options.auto !== false) {\n\t      setTextureFilteringForSize(gl, tex, options, width, height, internalFormat, type);\n\t    }\n\t    setTextureParameters(gl, tex, options);\n\t  }\n\n\t  function noop() {}\n\n\t  /**\n\t   * Loads an image\n\t   * @param {string} url url to image\n\t   * @param {function(err, img)} [callback] a callback that's passed an error and the image. The error will be non-null\n\t   *     if there was an error\n\t   * @return {HTMLImageElement} the image being loaded.\n\t   */\n\t  function loadImage(url, crossOrigin, callback) {\n\t    callback = callback || noop;\n\t    var img = new Image();\n\t    crossOrigin = crossOrigin !== undefined ? crossOrigin : defaults.crossOrigin;\n\t    if (crossOrigin !== undefined) {\n\t      img.crossOrigin = crossOrigin;\n\t    }\n\n\t    function clearEventHandlers() {\n\t      img.removeEventListener('error', onError); // eslint-disable-line\n\t      img.removeEventListener('load', onLoad); // eslint-disable-line\n\t      img = null;\n\t    }\n\n\t    function onError() {\n\t      var msg = \"couldn't load image: \" + url;\n\t      utils.error(msg);\n\t      callback(msg, img);\n\t      clearEventHandlers();\n\t    }\n\n\t    function onLoad() {\n\t      callback(null, img);\n\t      clearEventHandlers();\n\t    }\n\n\t    img.addEventListener('error', onError);\n\t    img.addEventListener('load', onLoad);\n\t    img.src = url;\n\t    return img;\n\t  }\n\n\t  /**\n\t   * Sets a texture to a 1x1 pixel color. If `options.color === false` is nothing happens. If it's not set\n\t   * the default texture color is used which can be set by calling `setDefaultTextureColor`.\n\t   * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n\t   * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n\t   * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n\t   *   This is often the same options you passed in when you created the texture.\n\t   * @memberOf module:twgl/textures\n\t   */\n\t  function setTextureTo1PixelColor(gl, tex, options) {\n\t    options = options || defaults.textureOptions;\n\t    var target = options.target || gl.TEXTURE_2D;\n\t    gl.bindTexture(target, tex);\n\t    if (options.color === false) {\n\t      return;\n\t    }\n\t    // Assume it's a URL\n\t    // Put 1x1 pixels in texture. That makes it renderable immediately regardless of filtering.\n\t    var color = make1Pixel(options.color);\n\t    if (target === gl.TEXTURE_CUBE_MAP) {\n\t      for (var ii = 0; ii < 6; ++ii) {\n\t        gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + ii, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, color);\n\t      }\n\t    } else if (target === gl.TEXTURE_3D || target === gl.TEXTURE_2D_ARRAY) {\n\t      gl.texImage3D(target, 0, gl.RGBA, 1, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, color);\n\t    } else {\n\t      gl.texImage2D(target, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, color);\n\t    }\n\t  }\n\n\t  /**\n\t   * The src image(s) used to create a texture.\n\t   *\n\t   * When you call {@link module:twgl.createTexture} or {@link module:twgl.createTextures}\n\t   * you can pass in urls for images to load into the textures. If it's a single url\n\t   * then this will be a single HTMLImageElement. If it's an array of urls used for a cubemap\n\t   * this will be a corresponding array of images for the cubemap.\n\t   *\n\t   * @typedef {HTMLImageElement|HTMLImageElement[]} TextureSrc\n\t   * @memberOf module:twgl\n\t   */\n\n\t  /**\n\t   * A callback for when an image finished downloading and been uploaded into a texture\n\t   * @callback TextureReadyCallback\n\t   * @param {*} err If truthy there was an error.\n\t   * @param {WebGLTexture} texture the texture.\n\t   * @param {module:twgl.TextureSrc} souce image(s) used to as the src for the texture\n\t   * @memberOf module:twgl\n\t   */\n\n\t  /**\n\t   * A callback for when all images have finished downloading and been uploaded into their respective textures\n\t   * @callback TexturesReadyCallback\n\t   * @param {*} err If truthy there was an error.\n\t   * @param {Object.<string, WebGLTexture>} textures the created textures by name. Same as returned by {@link module:twgl.createTextures}.\n\t   * @param {Object.<string, module:twgl.TextureSrc>} sources the image(s) used for the texture by name.\n\t   * @memberOf module:twgl\n\t   */\n\n\t  /**\n\t   * A callback for when an image finished downloading and been uploaded into a texture\n\t   * @callback CubemapReadyCallback\n\t   * @param {*} err If truthy there was an error.\n\t   * @param {WebGLTexture} tex the texture.\n\t   * @param {HTMLImageElement[]} imgs the images for each face.\n\t   * @memberOf module:twgl\n\t   */\n\n\t  /**\n\t   * A callback for when an image finished downloading and been uploaded into a texture\n\t   * @callback ThreeDReadyCallback\n\t   * @param {*} err If truthy there was an error.\n\t   * @param {WebGLTexture} tex the texture.\n\t   * @param {HTMLImageElement[]} imgs the images for each slice.\n\t   * @memberOf module:twgl\n\t   */\n\n\t  /**\n\t   * Loads a texture from an image from a Url as specified in `options.src`\n\t   * If `options.color !== false` will set the texture to a 1x1 pixel color so that the texture is\n\t   * immediately useable. It will be updated with the contents of the image once the image has finished\n\t   * downloading. Filtering options will be set as approriate for image unless `options.auto === false`.\n\t   * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n\t   * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n\t   * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n\t   * @param {module:twgl.TextureReadyCallback} [callback] A function to be called when the image has finished loading. err will\n\t   *    be non null if there was an error.\n\t   * @return {HTMLImageElement} the image being downloaded.\n\t   * @memberOf module:twgl/textures\n\t   */\n\t  function loadTextureFromUrl(gl, tex, options, callback) {\n\t    callback = callback || noop;\n\t    options = options || defaults.textureOptions;\n\t    setTextureTo1PixelColor(gl, tex, options);\n\t    // Because it's async we need to copy the options.\n\t    options = utils.shallowCopy(options);\n\t    var img = loadImage(options.src, options.crossOrigin, function (err, img) {\n\t      if (err) {\n\t        callback(err, tex, img);\n\t      } else {\n\t        setTextureFromElement(gl, tex, img, options);\n\t        callback(null, tex, img);\n\t      }\n\t    });\n\t    return img;\n\t  }\n\n\t  /**\n\t   * Loads a cubemap from 6 urls as specified in `options.src`. Will set the cubemap to a 1x1 pixel color\n\t   * so that it is usable immediately unless `option.color === false`.\n\t   * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n\t   * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n\t   * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n\t   * @param {module:twgl.CubemapReadyCallback} [callback] A function to be called when all the images have finished loading. err will\n\t   *    be non null if there was an error.\n\t   * @memberOf module:twgl/textures\n\t   */\n\t  function loadCubemapFromUrls(gl, tex, options, callback) {\n\t    callback = callback || noop;\n\t    var urls = options.src;\n\t    if (urls.length !== 6) {\n\t      throw \"there must be 6 urls for a cubemap\";\n\t    }\n\t    var internalFormat = options.internalFormat || options.format || gl.RGBA;\n\t    var formatType = getFormatAndTypeForInternalFormat(internalFormat);\n\t    var format = options.format || formatType.format;\n\t    var type = options.type || gl.UNSIGNED_BYTE;\n\t    var target = options.target || gl.TEXTURE_2D;\n\t    if (target !== gl.TEXTURE_CUBE_MAP) {\n\t      throw \"target must be TEXTURE_CUBE_MAP\";\n\t    }\n\t    setTextureTo1PixelColor(gl, tex, options);\n\t    // Because it's async we need to copy the options.\n\t    options = utils.shallowCopy(options);\n\t    var numToLoad = 6;\n\t    var errors = [];\n\t    var imgs;\n\t    var faces = getCubeFaceOrder(gl, options);\n\n\t    function uploadImg(faceTarget) {\n\t      return function (err, img) {\n\t        --numToLoad;\n\t        if (err) {\n\t          errors.push(err);\n\t        } else {\n\t          if (img.width !== img.height) {\n\t            errors.push(\"cubemap face img is not a square: \" + img.src);\n\t          } else {\n\t            savePackState(gl, options);\n\t            gl.bindTexture(target, tex);\n\n\t            // So assuming this is the first image we now have one face that's img sized\n\t            // and 5 faces that are 1x1 pixel so size the other faces\n\t            if (numToLoad === 5) {\n\t              // use the default order\n\t              getCubeFaceOrder(gl).forEach(function (otherTarget) {\n\t                // Should we re-use the same face or a color?\n\t                gl.texImage2D(otherTarget, 0, internalFormat, format, type, img);\n\t              });\n\t            } else {\n\t              gl.texImage2D(faceTarget, 0, internalFormat, format, type, img);\n\t            }\n\n\t            restorePackState(gl, options);\n\t            gl.generateMipmap(target);\n\t          }\n\t        }\n\n\t        if (numToLoad === 0) {\n\t          callback(errors.length ? errors : undefined, imgs, tex);\n\t        }\n\t      };\n\t    }\n\n\t    imgs = urls.map(function (url, ndx) {\n\t      return loadImage(url, options.crossOrigin, uploadImg(faces[ndx]));\n\t    });\n\t  }\n\n\t  /**\n\t   * Loads a 2d array or 3d texture from urls as specified in `options.src`.\n\t   * Will set the texture to a 1x1 pixel color\n\t   * so that it is usable immediately unless `option.color === false`.\n\t   *\n\t   * If the width and height is not specified the width and height of the first\n\t   * image loaded will be used. Note that since images are loaded async\n\t   * which image downloads first is unknown.\n\t   *\n\t   * If an image is not the same size as the width and height it will be scaled\n\t   * to that width and height.\n\t   *\n\t   * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n\t   * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n\t   * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n\t   * @param {module:twgl.ThreeDReadyCallback} [callback] A function to be called when all the images have finished loading. err will\n\t   *    be non null if there was an error.\n\t   * @memberOf module:twgl/textures\n\t   */\n\t  function loadSlicesFromUrls(gl, tex, options, callback) {\n\t    callback = callback || noop;\n\t    var urls = options.src;\n\t    var internalFormat = options.internalFormat || options.format || gl.RGBA;\n\t    var formatType = getFormatAndTypeForInternalFormat(internalFormat);\n\t    var format = options.format || formatType.format;\n\t    var type = options.type || gl.UNSIGNED_BYTE;\n\t    var target = options.target || gl.TEXTURE_2D_ARRAY;\n\t    if (target !== gl.TEXTURE_3D && target !== gl.TEXTURE_2D_ARRAY) {\n\t      throw \"target must be TEXTURE_3D or TEXTURE_2D_ARRAY\";\n\t    }\n\t    setTextureTo1PixelColor(gl, tex, options);\n\t    // Because it's async we need to copy the options.\n\t    options = utils.shallowCopy(options);\n\t    var numToLoad = urls.length;\n\t    var errors = [];\n\t    var imgs;\n\t    var width = options.width;\n\t    var height = options.height;\n\t    var depth = urls.length;\n\t    var firstImage = true;\n\n\t    function uploadImg(slice) {\n\t      return function (err, img) {\n\t        --numToLoad;\n\t        if (err) {\n\t          errors.push(err);\n\t        } else {\n\t          savePackState(gl, options);\n\t          gl.bindTexture(target, tex);\n\n\t          if (firstImage) {\n\t            firstImage = false;\n\t            width = options.width || img.width;\n\t            height = options.height || img.height;\n\t            gl.texImage3D(target, 0, internalFormat, width, height, depth, 0, format, type, null);\n\n\t            // put it in every slice otherwise some slices will be 0,0,0,0\n\t            for (var s = 0; s < depth; ++s) {\n\t              gl.texSubImage3D(target, 0, 0, 0, s, width, height, 1, format, type, img);\n\t            }\n\t          } else {\n\t            var src = img;\n\t            if (img.width !== width || img.height !== height) {\n\t              // Size the image to fix\n\t              src = ctx.canvas;\n\t              ctx.canvas.width = width;\n\t              ctx.canvas.height = height;\n\t              ctx.drawImage(img, 0, 0, width, height);\n\t            }\n\n\t            gl.texSubImage3D(target, 0, 0, 0, slice, width, height, 1, format, type, src);\n\n\t            // free the canvas memory\n\t            if (src === ctx.canvas) {\n\t              ctx.canvas.width = 0;\n\t              ctx.canvas.height = 0;\n\t            }\n\t          }\n\n\t          restorePackState(gl, options);\n\t          gl.generateMipmap(target);\n\t        }\n\n\t        if (numToLoad === 0) {\n\t          callback(errors.length ? errors : undefined, imgs, tex);\n\t        }\n\t      };\n\t    }\n\n\t    imgs = urls.map(function (url, ndx) {\n\t      return loadImage(url, options.crossOrigin, uploadImg(ndx));\n\t    });\n\t  }\n\n\t  /**\n\t   * Sets a texture from an array or typed array. If the width or height is not provided will attempt to\n\t   * guess the size. See {@link module:twgl.TextureOptions}.\n\t   * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n\t   * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n\t   * @param {(number[]|ArrayBuffer)} src An array or typed arry with texture data.\n\t   * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n\t   *   This is often the same options you passed in when you created the texture.\n\t   * @memberOf module:twgl/textures\n\t   */\n\t  function setTextureFromArray(gl, tex, src, options) {\n\t    options = options || defaults.textureOptions;\n\t    var target = options.target || gl.TEXTURE_2D;\n\t    gl.bindTexture(target, tex);\n\t    var width = options.width;\n\t    var height = options.height;\n\t    var depth = options.depth;\n\t    var internalFormat = options.internalFormat || options.format || gl.RGBA;\n\t    var formatType = getFormatAndTypeForInternalFormat(internalFormat);\n\t    var format = options.format || formatType.format;\n\t    var type = options.type || getTextureTypeForArrayType(gl, src, formatType.type);\n\t    if (!isArrayBuffer(src)) {\n\t      var Type = typedArrays.getTypedArrayTypeForGLType(type);\n\t      src = new Type(src);\n\t    } else {\n\t      if (src instanceof Uint8ClampedArray) {\n\t        src = new Uint8Array(src.buffer);\n\t      }\n\t    }\n\t    var bytesPerElement = getBytesPerElementForInternalFormat(internalFormat, type);\n\t    var numElements = src.byteLength / bytesPerElement; // TODO: check UNPACK_ALIGNMENT?\n\t    if (numElements % 1) {\n\t      throw \"length wrong size for format: \" + glEnumToString(gl, format);\n\t    }\n\t    var dimensions;\n\t    if (target === gl.TEXTURE_3D) {\n\t      if (!width && !height && !depth) {\n\t        var size = Math.cbrt(numElements);\n\t        if (size % 1 !== 0) {\n\t          throw \"can't guess cube size of array of numElements: \" + numElements;\n\t        }\n\t        width = size;\n\t        height = size;\n\t        depth = size;\n\t      } else if (width && (!height || !depth)) {\n\t        dimensions = guessDimensions(gl, target, height, depth, numElements / width);\n\t        height = dimensions.width;\n\t        depth = dimensions.height;\n\t      } else if (height && (!width || !depth)) {\n\t        dimensions = guessDimensions(gl, target, width, depth, numElements / height);\n\t        width = dimensions.width;\n\t        depth = dimensions.height;\n\t      } else {\n\t        dimensions = guessDimensions(gl, target, width, height, numElements / depth);\n\t        width = dimensions.width;\n\t        height = dimensions.height;\n\t      }\n\t    } else {\n\t      dimensions = guessDimensions(gl, target, width, height, numElements);\n\t      width = dimensions.width;\n\t      height = dimensions.height;\n\t    }\n\t    gl.pixelStorei(gl.UNPACK_ALIGNMENT, options.unpackAlignment || 1);\n\t    savePackState(gl, options);\n\t    if (target === gl.TEXTURE_CUBE_MAP) {\n\t      (function () {\n\t        var elementsPerElement = bytesPerElement / src.BYTES_PER_ELEMENT;\n\t        var faceSize = numElements / 6 * elementsPerElement;\n\n\t        getCubeFacesWithNdx(gl, options).forEach(function (f) {\n\t          var offset = faceSize * f.ndx;\n\t          var data = src.subarray(offset, offset + faceSize);\n\t          gl.texImage2D(f.face, 0, internalFormat, width, height, 0, format, type, data);\n\t        });\n\t      })();\n\t    } else if (target === gl.TEXTURE_3D) {\n\t      gl.texImage3D(target, 0, internalFormat, width, height, depth, 0, format, type, src);\n\t    } else {\n\t      gl.texImage2D(target, 0, internalFormat, width, height, 0, format, type, src);\n\t    }\n\t    restorePackState(gl, options);\n\t    return {\n\t      width: width,\n\t      height: height,\n\t      depth: depth,\n\t      type: type\n\t    };\n\t  }\n\n\t  /**\n\t   * Sets a texture with no contents of a certain size. In other words calls `gl.texImage2D` with `null`.\n\t   * You must set `options.width` and `options.height`.\n\t   * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n\t   * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n\t   * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n\t   * @memberOf module:twgl/textures\n\t   */\n\t  function setEmptyTexture(gl, tex, options) {\n\t    var target = options.target || gl.TEXTURE_2D;\n\t    gl.bindTexture(target, tex);\n\t    var internalFormat = options.internalFormat || options.format || gl.RGBA;\n\t    var formatType = getFormatAndTypeForInternalFormat(internalFormat);\n\t    var format = options.format || formatType.format;\n\t    var type = options.type || formatType.type;\n\t    savePackState(gl, options);\n\t    if (target === gl.TEXTURE_CUBE_MAP) {\n\t      for (var ii = 0; ii < 6; ++ii) {\n\t        gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + ii, 0, internalFormat, options.width, options.height, 0, format, type, null);\n\t      }\n\t    } else if (target === gl.TEXTURE_3D) {\n\t      gl.texImage3D(target, 0, internalFormat, options.width, options.height, options.depth, 0, format, type, null);\n\t    } else {\n\t      gl.texImage2D(target, 0, internalFormat, options.width, options.height, 0, format, type, null);\n\t    }\n\t    restorePackState(gl, options);\n\t  }\n\n\t  /**\n\t   * Creates a texture based on the options passed in.\n\t   * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n\t   * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n\t   * @param {module:twgl.TextureReadyCallback} [callback] A callback called when an image has been downloaded and uploaded to the texture.\n\t   * @return {WebGLTexture} the created texture.\n\t   * @memberOf module:twgl/textures\n\t   */\n\t  function createTexture(gl, options, callback) {\n\t    callback = callback || noop;\n\t    options = options || defaults.textureOptions;\n\t    var tex = gl.createTexture();\n\t    var target = options.target || gl.TEXTURE_2D;\n\t    var width = options.width || 1;\n\t    var height = options.height || 1;\n\t    var internalFormat = options.internalFormat || gl.RGBA;\n\t    var formatType = getFormatAndTypeForInternalFormat(internalFormat);\n\t    var type = options.type || formatType.type;\n\t    gl.bindTexture(target, tex);\n\t    if (target === gl.TEXTURE_CUBE_MAP) {\n\t      // this should have been the default for CUBEMAPS :(\n\t      gl.texParameteri(target, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n\t      gl.texParameteri(target, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\t    }\n\t    var src = options.src;\n\t    if (src) {\n\t      if (typeof src === \"function\") {\n\t        src = src(gl, options);\n\t      }\n\t      if (typeof src === \"string\") {\n\t        loadTextureFromUrl(gl, tex, options, callback);\n\t      } else if (isArrayBuffer(src) || Array.isArray(src) && (typeof src[0] === 'number' || Array.isArray(src[0]) || isArrayBuffer(src[0]))) {\n\t        var dimensions = setTextureFromArray(gl, tex, src, options);\n\t        width = dimensions.width;\n\t        height = dimensions.height;\n\t        type = dimensions.type;\n\t      } else if (Array.isArray(src) && typeof src[0] === 'string') {\n\t        if (target === gl.TEXTURE_CUBE_MAP) {\n\t          loadCubemapFromUrls(gl, tex, options, callback);\n\t        } else {\n\t          loadSlicesFromUrls(gl, tex, options, callback);\n\t        }\n\t      } else if (src instanceof HTMLElement) {\n\t        setTextureFromElement(gl, tex, src, options);\n\t        width = src.width;\n\t        height = src.height;\n\t      } else {\n\t        throw \"unsupported src type\";\n\t      }\n\t    } else {\n\t      setEmptyTexture(gl, tex, options);\n\t    }\n\t    if (options.auto !== false) {\n\t      setTextureFilteringForSize(gl, tex, options, width, height, internalFormat, type);\n\t    }\n\t    setTextureParameters(gl, tex, options);\n\t    return tex;\n\t  }\n\n\t  /**\n\t   * Resizes a texture based on the options passed in.\n\t   *\n\t   * Note: This is not a generic resize anything function.\n\t   * It's mostly used by {@link module:twgl.resizeFramebufferInfo}\n\t   * It will use `options.src` if it exists to try to determine a `type`\n\t   * otherwise it will assume `gl.UNSIGNED_BYTE`. No data is provided\n\t   * for the texture. Texture parameters will be set accordingly\n\t   *\n\t   * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n\t   * @param {WebGLTexture} tex the texture to resize\n\t   * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n\t   * @param {number} [width] the new width. If not passed in will use `options.width`\n\t   * @param {number} [height] the new height. If not passed in will use `options.height`\n\t   * @memberOf module:twgl/textures\n\t   */\n\t  function resizeTexture(gl, tex, options, width, height) {\n\t    width = width || options.width;\n\t    height = height || options.height;\n\t    var target = options.target || gl.TEXTURE_2D;\n\t    gl.bindTexture(target, tex);\n\t    var internalFormat = options.internalFormat || options.format || gl.RGBA;\n\t    var formatType = getFormatAndTypeForInternalFormat(internalFormat);\n\t    var format = options.format || formatType.format;\n\t    var type;\n\t    var src = options.src;\n\t    if (!src) {\n\t      type = options.type || formatType.type;\n\t    } else if (isArrayBuffer(src) || Array.isArray(src) && typeof src[0] === 'number') {\n\t      type = options.type || getTextureTypeForArrayType(gl, src, formatType.type);\n\t    } else {\n\t      type = options.type || formatType.type;\n\t    }\n\t    if (target === gl.TEXTURE_CUBE_MAP) {\n\t      for (var ii = 0; ii < 6; ++ii) {\n\t        gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + ii, 0, format, width, height, 0, format, type, null);\n\t      }\n\t    } else {\n\t      gl.texImage2D(target, 0, format, width, height, 0, format, type, null);\n\t    }\n\t  }\n\n\t  /**\n\t   * Check if a src is an async request.\n\t   * if src is a string we're going to download an image\n\t   * if src is an array of strings we're going to download cubemap images\n\t   * @param {*} src The src from a TextureOptions\n\t   * @returns {bool} true if src is async.\n\t   */\n\t  function isAsyncSrc(src) {\n\t    return typeof src === 'string' || Array.isArray(src) && typeof src[0] === 'string';\n\t  }\n\n\t  /**\n\t   * Creates a bunch of textures based on the passed in options.\n\t   *\n\t   * Example:\n\t   *\n\t   *     var textures = twgl.createTextures(gl, {\n\t   *       // a power of 2 image\n\t   *       hftIcon: { src: \"images/hft-icon-16.png\", mag: gl.NEAREST },\n\t   *       // a non-power of 2 image\n\t   *       clover: { src: \"images/clover.jpg\" },\n\t   *       // From a canvas\n\t   *       fromCanvas: { src: ctx.canvas },\n\t   *       // A cubemap from 6 images\n\t   *       yokohama: {\n\t   *         target: gl.TEXTURE_CUBE_MAP,\n\t   *         src: [\n\t   *           'images/yokohama/posx.jpg',\n\t   *           'images/yokohama/negx.jpg',\n\t   *           'images/yokohama/posy.jpg',\n\t   *           'images/yokohama/negy.jpg',\n\t   *           'images/yokohama/posz.jpg',\n\t   *           'images/yokohama/negz.jpg',\n\t   *         ],\n\t   *       },\n\t   *       // A cubemap from 1 image (can be 1x6, 2x3, 3x2, 6x1)\n\t   *       goldengate: {\n\t   *         target: gl.TEXTURE_CUBE_MAP,\n\t   *         src: 'images/goldengate.jpg',\n\t   *       },\n\t   *       // A 2x2 pixel texture from a JavaScript array\n\t   *       checker: {\n\t   *         mag: gl.NEAREST,\n\t   *         min: gl.LINEAR,\n\t   *         src: [\n\t   *           255,255,255,255,\n\t   *           192,192,192,255,\n\t   *           192,192,192,255,\n\t   *           255,255,255,255,\n\t   *         ],\n\t   *       },\n\t   *       // a 1x2 pixel texture from a typed array.\n\t   *       stripe: {\n\t   *         mag: gl.NEAREST,\n\t   *         min: gl.LINEAR,\n\t   *         format: gl.LUMINANCE,\n\t   *         src: new Uint8Array([\n\t   *           255,\n\t   *           128,\n\t   *           255,\n\t   *           128,\n\t   *           255,\n\t   *           128,\n\t   *           255,\n\t   *           128,\n\t   *         ]),\n\t   *         width: 1,\n\t   *       },\n\t   *     });\n\t   *\n\t   * Now\n\t   *\n\t   * *   `textures.hftIcon` will be a 2d texture\n\t   * *   `textures.clover` will be a 2d texture\n\t   * *   `textures.fromCanvas` will be a 2d texture\n\t   * *   `textures.yohohama` will be a cubemap texture\n\t   * *   `textures.goldengate` will be a cubemap texture\n\t   * *   `textures.checker` will be a 2d texture\n\t   * *   `textures.stripe` will be a 2d texture\n\t   *\n\t   * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n\t   * @param {Object.<string,module:twgl.TextureOptions>} options A object of TextureOptions one per texture.\n\t   * @param {module:twgl.TexturesReadyCallback} [callback] A callback called when all textures have been downloaded.\n\t   * @return {Object.<string,WebGLTexture>} the created textures by name\n\t   * @memberOf module:twgl/textures\n\t   */\n\t  function createTextures(gl, textureOptions, callback) {\n\t    callback = callback || noop;\n\t    var numDownloading = 0;\n\t    var errors = [];\n\t    var textures = {};\n\t    var images = {};\n\n\t    function callCallbackIfReady() {\n\t      if (numDownloading === 0) {\n\t        setTimeout(function () {\n\t          callback(errors.length ? errors : undefined, textures, images);\n\t        }, 0);\n\t      }\n\t    }\n\n\t    Object.keys(textureOptions).forEach(function (name) {\n\t      var options = textureOptions[name];\n\t      var onLoadFn;\n\t      if (isAsyncSrc(options.src)) {\n\t        onLoadFn = function onLoadFn(err, tex, img) {\n\t          images[name] = img;\n\t          --numDownloading;\n\t          if (err) {\n\t            errors.push(err);\n\t          }\n\t          callCallbackIfReady();\n\t        };\n\t        ++numDownloading;\n\t      }\n\t      textures[name] = createTexture(gl, options, onLoadFn);\n\t    });\n\n\t    // queue the callback if there are no images to download.\n\t    // We do this because if your code is structured to wait for\n\t    // images to download but then you comment out all the async\n\t    // images your code would break.\n\t    callCallbackIfReady();\n\n\t    return textures;\n\t  }\n\n\t  // Using quotes prevents Uglify from changing the names.\n\t  // No speed diff AFAICT.\n\t  return {\n\t    \"setDefaults_\": setDefaults,\n\n\t    \"createSampler\": createSampler,\n\t    \"createSamplers\": createSamplers,\n\t    \"setSamplerParameters\": setSamplerParameters,\n\n\t    \"createTexture\": createTexture,\n\t    \"setEmptyTexture\": setEmptyTexture,\n\t    \"setTextureFromArray\": setTextureFromArray,\n\t    \"loadTextureFromUrl\": loadTextureFromUrl,\n\t    \"setTextureFromElement\": setTextureFromElement,\n\t    \"setTextureFilteringForSize\": setTextureFilteringForSize,\n\t    \"setTextureParameters\": setTextureParameters,\n\t    \"setDefaultTextureColor\": setDefaultTextureColor,\n\t    \"createTextures\": createTextures,\n\t    \"resizeTexture\": resizeTexture,\n\t    \"getNumComponentsForFormat\": getNumComponentsForFormat,\n\t    \"getBytesPerElementForInternalFormat\": getBytesPerElementForInternalFormat\n\t  };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\"use strict\";\n\n\t/*\n\t * Copyright 2015, Gregg Tavares.\n\t * All rights reserved.\n\t *\n\t * Redistribution and use in source and binary forms, with or without\n\t * modification, are permitted provided that the following conditions are\n\t * met:\n\t *\n\t *     * Redistributions of source code must retain the above copyright\n\t * notice, this list of conditions and the following disclaimer.\n\t *     * Redistributions in binary form must reproduce the above\n\t * copyright notice, this list of conditions and the following disclaimer\n\t * in the documentation and/or other materials provided with the\n\t * distribution.\n\t *     * Neither the name of Gregg Tavares. nor the names of his\n\t * contributors may be used to endorse or promote products derived from\n\t * this software without specific prior written permission.\n\t *\n\t * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\t * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n\t * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n\t * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n\t * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n\t * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n\t * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n\t * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n\t * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\t * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n\t * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\t */\n\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(6)], __WEBPACK_AMD_DEFINE_RESULT__ = function (programs) {\n\t  \"use strict\";\n\n\t  /**\n\t   * vertex array object related functions\n\t   *\n\t   * You should generally not need to use these functions. They are provided\n\t   * for those cases where you're doing something out of the ordinary\n\t   * and you need lower level access.\n\t   *\n\t   * For backward compatibily they are available at both `twgl.attributes` and `twgl`\n\t   * itself\n\t   *\n\t   * See {@link module:twgl} for core functions\n\t   *\n\t   * @module twgl/vertexArrays\n\t   */\n\n\t  /**\n\t   * @typedef {Object} VertexArrayInfo\n\t   * @property {number} numElements The number of elements to pass to `gl.drawArrays` or `gl.drawElements`.\n\t   * @property {number} [elementType] The type of indices `UNSIGNED_BYTE`, `UNSIGNED_SHORT` etc..\n\t   * @property {WebGLVertexArrayObject} [vertexArrayObject] a vertex array object\n\t   * @memberOf module:twgl\n\t   */\n\n\t  /**\n\t   * Creates a VertexArrayInfo from a BufferInfo and one or more ProgramInfos\n\t   *\n\t   * This can be passed to {@link module:twgl.setBuffersAndAttributes} and to\n\t   * {@link module:twgl:drawBufferInfo}.\n\t   *\n\t   * > **IMPORTANT:** Vertex Array Objects are **not** a direct analog for a BufferInfo. Vertex Array Objects\n\t   *   assign buffers to specific attributes at creation time. That means they can only be used with programs\n\t   *   who's attributes use the same attribute locations for the same purposes.\n\t   *\n\t   * > Bind your attribute locations by passing an array of attribute names to {@link module:twgl.createProgramInfo}\n\t   *   or use WebGL 2's GLSL ES 3's `layout(location = <num>)` to make sure locations match.\n\t   *\n\t   * also\n\t   *\n\t   * > **IMPORTANT:** After calling twgl.setBuffersAndAttribute with a BufferInfo that uses a Vertex Array Object\n\t   *   that Vertex Array Object will be bound. That means **ANY MANIPULATION OF ELEMENT_ARRAY_BUFFER or ATTRIBUTES**\n\t   *   will affect the Vertex Array Object state.\n\t   *\n\t   * > Call `gl.bindVertexArray(null)` to get back manipulating the global attributes and ELEMENT_ARRAY_BUFFER.\n\t   *\n\t   * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n\t   * @param {module:twgl.ProgramInfo|module:twgl.ProgramInfo[]} programInfo a programInfo or array of programInfos\n\t   * @param {module:twgl.BufferInfo} bufferInfo BufferInfo as returned from createBufferInfoFromArrays etc...\n\t   *\n\t   *    You need to make sure every attribute that will be used is bound. So for example assume shader 1\n\t   *    uses attributes A, B, C and shader 2 uses attributes A, B, D. If you only pass in the programInfo\n\t   *    for shader 1 then only attributes A, B, and C will have their attributes set because TWGL doesn't\n\t   *    now attribute D's location.\n\t   *\n\t   *    So, you can pass in both shader 1 and shader 2's programInfo\n\t   *\n\t   * @return {module:twgl.VertexArrayInfo} The created VertexArrayInfo\n\t   *\n\t   * @memberOf module:twgl/vertexArrays\n\t   */\n\n\t  function createVertexArrayInfo(gl, programInfos, bufferInfo) {\n\t    var vao = gl.createVertexArray();\n\t    gl.bindVertexArray(vao);\n\t    if (!programInfos.length) {\n\t      programInfos = [programInfos];\n\t    }\n\t    programInfos.forEach(function (programInfo) {\n\t      programs.setBuffersAndAttributes(gl, programInfo, bufferInfo);\n\t    });\n\t    gl.bindVertexArray(null);\n\t    return {\n\t      numElements: bufferInfo.numElements,\n\t      elementType: bufferInfo.elementType,\n\t      vertexArrayObject: vao\n\t    };\n\t  }\n\n\t  /**\n\t   * Creates a vertex array object and then sets the attributes on it\n\t   *\n\t   * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n\t   * @param {Object.<string, function>} setters Attribute setters as returned from createAttributeSetters\n\t   * @param {Object.<string, module:twgl.AttribInfo>} attribs AttribInfos mapped by attribute name.\n\t   * @param {WebGLBuffer} [indices] an optional ELEMENT_ARRAY_BUFFER of indices\n\t   * @memberOf module:twgl/vertexArrays\n\t   */\n\t  function createVAOAndSetAttributes(gl, setters, attribs, indices) {\n\t    var vao = gl.createVertexArray();\n\t    gl.bindVertexArray(vao);\n\t    programs.setAttributes(setters, attribs);\n\t    if (indices) {\n\t      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indices);\n\t    }\n\t    // We unbind this because otherwise any change to ELEMENT_ARRAY_BUFFER\n\t    // like when creating buffers for other stuff will mess up this VAO's binding\n\t    gl.bindVertexArray(null);\n\t    return vao;\n\t  }\n\n\t  /**\n\t   * Creates a vertex array object and then sets the attributes\n\t   * on it\n\t   *\n\t   * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n\t   *        to use.\n\t   * @param {Object.<string, function>| module:twgl.ProgramInfo} programInfo as returned from createProgramInfo or Attribute setters as returned from createAttributeSetters\n\t   * @param {module:twgl.BufferInfo} bufferInfo BufferInfo as returned from createBufferInfoFromArrays etc...\n\t   * @param {WebGLBuffer} [indices] an optional ELEMENT_ARRAY_BUFFER of indices\n\t   * @memberOf module:twgl/vertexArrays\n\t   */\n\t  function createVAOFromBufferInfo(gl, programInfo, bufferInfo) {\n\t    return createVAOAndSetAttributes(gl, programInfo.attribSetters || programInfo, bufferInfo.attribs, bufferInfo.indices);\n\t  }\n\n\t  // Using quotes prevents Uglify from changing the names.\n\t  // No speed diff AFAICT.\n\t  return {\n\t    \"createVertexArrayInfo\": createVertexArrayInfo,\n\t    \"createVAOAndSetAttributes\": createVAOAndSetAttributes,\n\t    \"createVAOFromBufferInfo\": createVAOFromBufferInfo\n\t  };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\"use strict\";\n\n\t/*\n\t * Copyright 2015, Gregg Tavares.\n\t * All rights reserved.\n\t *\n\t * Redistribution and use in source and binary forms, with or without\n\t * modification, are permitted provided that the following conditions are\n\t * met:\n\t *\n\t *     * Redistributions of source code must retain the above copyright\n\t * notice, this list of conditions and the following disclaimer.\n\t *     * Redistributions in binary form must reproduce the above\n\t * copyright notice, this list of conditions and the following disclaimer\n\t * in the documentation and/or other materials provided with the\n\t * distribution.\n\t *     * Neither the name of Gregg Tavares. nor the names of his\n\t * contributors may be used to endorse or promote products derived from\n\t * this software without specific prior written permission.\n\t *\n\t * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\t * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n\t * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n\t * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n\t * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n\t * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n\t * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n\t * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n\t * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\t * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n\t * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\t */\n\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(11)], __WEBPACK_AMD_DEFINE_RESULT__ = function (v3) {\n\t  \"use strict\";\n\n\t  /**\n\t   * 4x4 Matrix math math functions.\n\t   *\n\t   * Almost all functions take an optional `dst` argument. If it is not passed in the\n\t   * functions will create a new matrix. In other words you can do this\n\t   *\n\t   *     var mat = m4.translation([1, 2, 3]);  // Creates a new translation matrix\n\t   *\n\t   * or\n\t   *\n\t   *     var mat = m4.create();\n\t   *     m4.translation([1, 2, 3], mat);  // Puts translation matrix in mat.\n\t   *\n\t   * The first style is often easier but depending on where it's used it generates garbage where\n\t   * as there is almost never allocation with the second style.\n\t   *\n\t   * It is always save to pass any matrix as the destination. So for example\n\t   *\n\t   *     var mat = m4.identity();\n\t   *     var trans = m4.translation([1, 2, 3]);\n\t   *     m4.multiply(mat, trans, mat);  // Multiplies mat * trans and puts result in mat.\n\t   *\n\t   * @module twgl/m4\n\t   */\n\n\t  var MatType = Float32Array;\n\n\t  var tempV3a = v3.create();\n\t  var tempV3b = v3.create();\n\t  var tempV3c = v3.create();\n\n\t  /**\n\t   * A JavaScript array with 16 values or a Float32Array with 16 values.\n\t   * When created by the library will create the default type which is `Float32Array`\n\t   * but can be set by calling {@link module:twgl/m4.setDefaultType}.\n\t   * @typedef {(number[]|Float32Array)} Mat4\n\t   * @memberOf module:twgl/m4\n\t   */\n\n\t  /**\n\t   * Sets the type this library creates for a Mat4\n\t   * @param {constructor} ctor the constructor for the type. Either `Float32Array` or `Array`\n\t   * @return {constructor} previous constructor for Mat4\n\t   */\n\t  function setDefaultType(ctor) {\n\t    var oldType = MatType;\n\t    MatType = ctor;\n\t    return oldType;\n\t  }\n\n\t  /**\n\t   * Negates a matrix.\n\t   * @param {module:twgl/m4.Mat4} m The matrix.\n\t   * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..\n\t   * @return {module:twgl/m4.Mat4} -m.\n\t   * @memberOf module:twgl/m4\n\t   */\n\t  function negate(m, dst) {\n\t    dst = dst || new MatType(16);\n\n\t    dst[0] = -m[0];\n\t    dst[1] = -m[1];\n\t    dst[2] = -m[2];\n\t    dst[3] = -m[3];\n\t    dst[4] = -m[4];\n\t    dst[5] = -m[5];\n\t    dst[6] = -m[6];\n\t    dst[7] = -m[7];\n\t    dst[8] = -m[8];\n\t    dst[9] = -m[9];\n\t    dst[10] = -m[10];\n\t    dst[11] = -m[11];\n\t    dst[12] = -m[12];\n\t    dst[13] = -m[13];\n\t    dst[14] = -m[14];\n\t    dst[15] = -m[15];\n\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Copies a matrix.\n\t   * @param {module:twgl/m4.Mat4} m The matrix.\n\t   * @param {module:twgl/m4.Mat4} [dst] The matrix.\n\t   * @return {module:twgl/m4.Mat4} A copy of m.\n\t   * @memberOf module:twgl/m4\n\t   */\n\t  function copy(m, dst) {\n\t    dst = dst || new MatType(16);\n\n\t    dst[0] = m[0];\n\t    dst[1] = m[1];\n\t    dst[2] = m[2];\n\t    dst[3] = m[3];\n\t    dst[4] = m[4];\n\t    dst[5] = m[5];\n\t    dst[6] = m[6];\n\t    dst[7] = m[7];\n\t    dst[8] = m[8];\n\t    dst[9] = m[9];\n\t    dst[10] = m[10];\n\t    dst[11] = m[11];\n\t    dst[12] = m[12];\n\t    dst[13] = m[13];\n\t    dst[14] = m[14];\n\t    dst[15] = m[15];\n\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Creates an n-by-n identity matrix.\n\t   *\n\t   * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..\n\t   * @return {module:twgl/m4.Mat4} An n-by-n identity matrix.\n\t   * @memberOf module:twgl/m4\n\t   */\n\t  function identity(dst) {\n\t    dst = dst || new MatType(16);\n\n\t    dst[0] = 1;\n\t    dst[1] = 0;\n\t    dst[2] = 0;\n\t    dst[3] = 0;\n\t    dst[4] = 0;\n\t    dst[5] = 1;\n\t    dst[6] = 0;\n\t    dst[7] = 0;\n\t    dst[8] = 0;\n\t    dst[9] = 0;\n\t    dst[10] = 1;\n\t    dst[11] = 0;\n\t    dst[12] = 0;\n\t    dst[13] = 0;\n\t    dst[14] = 0;\n\t    dst[15] = 1;\n\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Takes the transpose of a matrix.\n\t   * @param {module:twgl/m4.Mat4} m The matrix.\n\t   * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..\n\t   * @return {module:twgl/m4.Mat4} The transpose of m.\n\t   * @memberOf module:twgl/m4\n\t   */\n\t  function transpose(m, dst) {\n\t    dst = dst || new MatType(16);\n\t    if (dst === m) {\n\t      var t;\n\n\t      t = m[1];\n\t      m[1] = m[4];\n\t      m[4] = t;\n\n\t      t = m[2];\n\t      m[2] = m[8];\n\t      m[8] = t;\n\n\t      t = m[3];\n\t      m[3] = m[12];\n\t      m[12] = t;\n\n\t      t = m[6];\n\t      m[6] = m[9];\n\t      m[9] = t;\n\n\t      t = m[7];\n\t      m[7] = m[13];\n\t      m[13] = t;\n\n\t      t = m[11];\n\t      m[11] = m[14];\n\t      m[14] = t;\n\t      return dst;\n\t    }\n\n\t    var m00 = m[0 * 4 + 0];\n\t    var m01 = m[0 * 4 + 1];\n\t    var m02 = m[0 * 4 + 2];\n\t    var m03 = m[0 * 4 + 3];\n\t    var m10 = m[1 * 4 + 0];\n\t    var m11 = m[1 * 4 + 1];\n\t    var m12 = m[1 * 4 + 2];\n\t    var m13 = m[1 * 4 + 3];\n\t    var m20 = m[2 * 4 + 0];\n\t    var m21 = m[2 * 4 + 1];\n\t    var m22 = m[2 * 4 + 2];\n\t    var m23 = m[2 * 4 + 3];\n\t    var m30 = m[3 * 4 + 0];\n\t    var m31 = m[3 * 4 + 1];\n\t    var m32 = m[3 * 4 + 2];\n\t    var m33 = m[3 * 4 + 3];\n\n\t    dst[0] = m00;\n\t    dst[1] = m10;\n\t    dst[2] = m20;\n\t    dst[3] = m30;\n\t    dst[4] = m01;\n\t    dst[5] = m11;\n\t    dst[6] = m21;\n\t    dst[7] = m31;\n\t    dst[8] = m02;\n\t    dst[9] = m12;\n\t    dst[10] = m22;\n\t    dst[11] = m32;\n\t    dst[12] = m03;\n\t    dst[13] = m13;\n\t    dst[14] = m23;\n\t    dst[15] = m33;\n\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Computes the inverse of a 4-by-4 matrix.\n\t   * @param {module:twgl/m4.Mat4} m The matrix.\n\t   * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..\n\t   * @return {module:twgl/m4.Mat4} The inverse of m.\n\t   * @memberOf module:twgl/m4\n\t   */\n\t  function inverse(m, dst) {\n\t    dst = dst || new MatType(16);\n\n\t    var m00 = m[0 * 4 + 0];\n\t    var m01 = m[0 * 4 + 1];\n\t    var m02 = m[0 * 4 + 2];\n\t    var m03 = m[0 * 4 + 3];\n\t    var m10 = m[1 * 4 + 0];\n\t    var m11 = m[1 * 4 + 1];\n\t    var m12 = m[1 * 4 + 2];\n\t    var m13 = m[1 * 4 + 3];\n\t    var m20 = m[2 * 4 + 0];\n\t    var m21 = m[2 * 4 + 1];\n\t    var m22 = m[2 * 4 + 2];\n\t    var m23 = m[2 * 4 + 3];\n\t    var m30 = m[3 * 4 + 0];\n\t    var m31 = m[3 * 4 + 1];\n\t    var m32 = m[3 * 4 + 2];\n\t    var m33 = m[3 * 4 + 3];\n\t    var tmp_0 = m22 * m33;\n\t    var tmp_1 = m32 * m23;\n\t    var tmp_2 = m12 * m33;\n\t    var tmp_3 = m32 * m13;\n\t    var tmp_4 = m12 * m23;\n\t    var tmp_5 = m22 * m13;\n\t    var tmp_6 = m02 * m33;\n\t    var tmp_7 = m32 * m03;\n\t    var tmp_8 = m02 * m23;\n\t    var tmp_9 = m22 * m03;\n\t    var tmp_10 = m02 * m13;\n\t    var tmp_11 = m12 * m03;\n\t    var tmp_12 = m20 * m31;\n\t    var tmp_13 = m30 * m21;\n\t    var tmp_14 = m10 * m31;\n\t    var tmp_15 = m30 * m11;\n\t    var tmp_16 = m10 * m21;\n\t    var tmp_17 = m20 * m11;\n\t    var tmp_18 = m00 * m31;\n\t    var tmp_19 = m30 * m01;\n\t    var tmp_20 = m00 * m21;\n\t    var tmp_21 = m20 * m01;\n\t    var tmp_22 = m00 * m11;\n\t    var tmp_23 = m10 * m01;\n\n\t    var t0 = tmp_0 * m11 + tmp_3 * m21 + tmp_4 * m31 - (tmp_1 * m11 + tmp_2 * m21 + tmp_5 * m31);\n\t    var t1 = tmp_1 * m01 + tmp_6 * m21 + tmp_9 * m31 - (tmp_0 * m01 + tmp_7 * m21 + tmp_8 * m31);\n\t    var t2 = tmp_2 * m01 + tmp_7 * m11 + tmp_10 * m31 - (tmp_3 * m01 + tmp_6 * m11 + tmp_11 * m31);\n\t    var t3 = tmp_5 * m01 + tmp_8 * m11 + tmp_11 * m21 - (tmp_4 * m01 + tmp_9 * m11 + tmp_10 * m21);\n\n\t    var d = 1.0 / (m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3);\n\n\t    dst[0] = d * t0;\n\t    dst[1] = d * t1;\n\t    dst[2] = d * t2;\n\t    dst[3] = d * t3;\n\t    dst[4] = d * (tmp_1 * m10 + tmp_2 * m20 + tmp_5 * m30 - (tmp_0 * m10 + tmp_3 * m20 + tmp_4 * m30));\n\t    dst[5] = d * (tmp_0 * m00 + tmp_7 * m20 + tmp_8 * m30 - (tmp_1 * m00 + tmp_6 * m20 + tmp_9 * m30));\n\t    dst[6] = d * (tmp_3 * m00 + tmp_6 * m10 + tmp_11 * m30 - (tmp_2 * m00 + tmp_7 * m10 + tmp_10 * m30));\n\t    dst[7] = d * (tmp_4 * m00 + tmp_9 * m10 + tmp_10 * m20 - (tmp_5 * m00 + tmp_8 * m10 + tmp_11 * m20));\n\t    dst[8] = d * (tmp_12 * m13 + tmp_15 * m23 + tmp_16 * m33 - (tmp_13 * m13 + tmp_14 * m23 + tmp_17 * m33));\n\t    dst[9] = d * (tmp_13 * m03 + tmp_18 * m23 + tmp_21 * m33 - (tmp_12 * m03 + tmp_19 * m23 + tmp_20 * m33));\n\t    dst[10] = d * (tmp_14 * m03 + tmp_19 * m13 + tmp_22 * m33 - (tmp_15 * m03 + tmp_18 * m13 + tmp_23 * m33));\n\t    dst[11] = d * (tmp_17 * m03 + tmp_20 * m13 + tmp_23 * m23 - (tmp_16 * m03 + tmp_21 * m13 + tmp_22 * m23));\n\t    dst[12] = d * (tmp_14 * m22 + tmp_17 * m32 + tmp_13 * m12 - (tmp_16 * m32 + tmp_12 * m12 + tmp_15 * m22));\n\t    dst[13] = d * (tmp_20 * m32 + tmp_12 * m02 + tmp_19 * m22 - (tmp_18 * m22 + tmp_21 * m32 + tmp_13 * m02));\n\t    dst[14] = d * (tmp_18 * m12 + tmp_23 * m32 + tmp_15 * m02 - (tmp_22 * m32 + tmp_14 * m02 + tmp_19 * m12));\n\t    dst[15] = d * (tmp_22 * m22 + tmp_16 * m02 + tmp_21 * m12 - (tmp_20 * m12 + tmp_23 * m22 + tmp_17 * m02));\n\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Multiplies two 4-by-4 matrices with a on the left and b on the right\n\t   * @param {module:twgl/m4.Mat4} a The matrix on the left.\n\t   * @param {module:twgl/m4.Mat4} b The matrix on the right.\n\t   * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..\n\t   * @return {module:twgl/m4.Mat4} The matrix product of a and b.\n\t   * @memberOf module:twgl/m4\n\t   */\n\t  function multiply(a, b, dst) {\n\t    dst = dst || new MatType(16);\n\n\t    var a00 = a[0];\n\t    var a01 = a[1];\n\t    var a02 = a[2];\n\t    var a03 = a[3];\n\t    var a10 = a[4 + 0];\n\t    var a11 = a[4 + 1];\n\t    var a12 = a[4 + 2];\n\t    var a13 = a[4 + 3];\n\t    var a20 = a[8 + 0];\n\t    var a21 = a[8 + 1];\n\t    var a22 = a[8 + 2];\n\t    var a23 = a[8 + 3];\n\t    var a30 = a[12 + 0];\n\t    var a31 = a[12 + 1];\n\t    var a32 = a[12 + 2];\n\t    var a33 = a[12 + 3];\n\t    var b00 = b[0];\n\t    var b01 = b[1];\n\t    var b02 = b[2];\n\t    var b03 = b[3];\n\t    var b10 = b[4 + 0];\n\t    var b11 = b[4 + 1];\n\t    var b12 = b[4 + 2];\n\t    var b13 = b[4 + 3];\n\t    var b20 = b[8 + 0];\n\t    var b21 = b[8 + 1];\n\t    var b22 = b[8 + 2];\n\t    var b23 = b[8 + 3];\n\t    var b30 = b[12 + 0];\n\t    var b31 = b[12 + 1];\n\t    var b32 = b[12 + 2];\n\t    var b33 = b[12 + 3];\n\n\t    dst[0] = a00 * b00 + a10 * b01 + a20 * b02 + a30 * b03;\n\t    dst[1] = a01 * b00 + a11 * b01 + a21 * b02 + a31 * b03;\n\t    dst[2] = a02 * b00 + a12 * b01 + a22 * b02 + a32 * b03;\n\t    dst[3] = a03 * b00 + a13 * b01 + a23 * b02 + a33 * b03;\n\t    dst[4] = a00 * b10 + a10 * b11 + a20 * b12 + a30 * b13;\n\t    dst[5] = a01 * b10 + a11 * b11 + a21 * b12 + a31 * b13;\n\t    dst[6] = a02 * b10 + a12 * b11 + a22 * b12 + a32 * b13;\n\t    dst[7] = a03 * b10 + a13 * b11 + a23 * b12 + a33 * b13;\n\t    dst[8] = a00 * b20 + a10 * b21 + a20 * b22 + a30 * b23;\n\t    dst[9] = a01 * b20 + a11 * b21 + a21 * b22 + a31 * b23;\n\t    dst[10] = a02 * b20 + a12 * b21 + a22 * b22 + a32 * b23;\n\t    dst[11] = a03 * b20 + a13 * b21 + a23 * b22 + a33 * b23;\n\t    dst[12] = a00 * b30 + a10 * b31 + a20 * b32 + a30 * b33;\n\t    dst[13] = a01 * b30 + a11 * b31 + a21 * b32 + a31 * b33;\n\t    dst[14] = a02 * b30 + a12 * b31 + a22 * b32 + a32 * b33;\n\t    dst[15] = a03 * b30 + a13 * b31 + a23 * b32 + a33 * b33;\n\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Sets the translation component of a 4-by-4 matrix to the given\n\t   * vector.\n\t   * @param {module:twgl/m4.Mat4} a The matrix.\n\t   * @param {Vec3} v The vector.\n\t   * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..\n\t   * @return {module:twgl/m4.Mat4} a once modified.\n\t   * @memberOf module:twgl/m4\n\t   */\n\t  function setTranslation(a, v, dst) {\n\t    dst = dst || identity();\n\t    if (a !== dst) {\n\t      dst[0] = a[0];\n\t      dst[1] = a[1];\n\t      dst[2] = a[2];\n\t      dst[3] = a[3];\n\t      dst[4] = a[4];\n\t      dst[5] = a[5];\n\t      dst[6] = a[6];\n\t      dst[7] = a[7];\n\t      dst[8] = a[8];\n\t      dst[9] = a[9];\n\t      dst[10] = a[10];\n\t      dst[11] = a[11];\n\t    }\n\t    dst[12] = v[0];\n\t    dst[13] = v[1];\n\t    dst[14] = v[2];\n\t    dst[15] = 1;\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Returns the translation component of a 4-by-4 matrix as a vector with 3\n\t   * entries.\n\t   * @param {module:twgl/m4.Mat4} m The matrix.\n\t   * @param {Vec3} [dst] vector..\n\t   * @return {Vec3} The translation component of m.\n\t   * @memberOf module:twgl/m4\n\t   */\n\t  function getTranslation(m, dst) {\n\t    dst = dst || v3.create();\n\t    dst[0] = m[12];\n\t    dst[1] = m[13];\n\t    dst[2] = m[14];\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Returns an axis of a 4x4 matrix as a vector with 3 entries\n\t   * @param {module:twgl/m4.Mat4} m The matrix.\n\t   * @param {number} axis The axis 0 = x, 1 = y, 2 = z;\n\t   * @return {Vec3} [dst] vector.\n\t   * @return {Vec3} The axis component of m.\n\t   * @memberOf module:twgl/m4\n\t   */\n\t  function getAxis(m, axis, dst) {\n\t    dst = dst || v3.create();\n\t    var off = axis * 4;\n\t    dst[0] = m[off + 0];\n\t    dst[1] = m[off + 1];\n\t    dst[2] = m[off + 2];\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Sets an axis of a 4x4 matrix as a vector with 3 entries\n\t   * @param {Vec3} v the axis vector\n\t   * @param {number} axis The axis  0 = x, 1 = y, 2 = z;\n\t   * @param {module:twgl/m4.Mat4} [dst] The matrix to set. If none a new one is created\n\t   * @return {module:twgl/m4.Mat4} dst\n\t   * @memberOf module:twgl/m4\n\t   */\n\t  function setAxis(a, v, axis, dst) {\n\t    if (dst !== a) {\n\t      dst = copy(a, dst);\n\t    }\n\t    var off = axis * 4;\n\t    dst[off + 0] = v[0];\n\t    dst[off + 1] = v[1];\n\t    dst[off + 2] = v[2];\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Computes a 4-by-4 perspective transformation matrix given the angular height\n\t   * of the frustum, the aspect ratio, and the near and far clipping planes.  The\n\t   * arguments define a frustum extending in the negative z direction.  The given\n\t   * angle is the vertical angle of the frustum, and the horizontal angle is\n\t   * determined to produce the given aspect ratio.  The arguments near and far are\n\t   * the distances to the near and far clipping planes.  Note that near and far\n\t   * are not z coordinates, but rather they are distances along the negative\n\t   * z-axis.  The matrix generated sends the viewing frustum to the unit box.\n\t   * We assume a unit box extending from -1 to 1 in the x and y dimensions and\n\t   * from 0 to 1 in the z dimension.\n\t   * @param {number} fieldOfViewYInRadians The camera angle from top to bottom (in radians).\n\t   * @param {number} aspect The aspect ratio width / height.\n\t   * @param {number} zNear The depth (negative z coordinate)\n\t   *     of the near clipping plane.\n\t   * @param {number} zFar The depth (negative z coordinate)\n\t   *     of the far clipping plane.\n\t   * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..\n\t   * @return {module:twgl/m4.Mat4} The perspective matrix.\n\t   * @memberOf module:twgl/m4\n\t   */\n\t  function perspective(fieldOfViewYInRadians, aspect, zNear, zFar, dst) {\n\t    dst = dst || new MatType(16);\n\n\t    var f = Math.tan(Math.PI * 0.5 - 0.5 * fieldOfViewYInRadians);\n\t    var rangeInv = 1.0 / (zNear - zFar);\n\n\t    dst[0] = f / aspect;\n\t    dst[1] = 0;\n\t    dst[2] = 0;\n\t    dst[3] = 0;\n\n\t    dst[4] = 0;\n\t    dst[5] = f;\n\t    dst[6] = 0;\n\t    dst[7] = 0;\n\n\t    dst[8] = 0;\n\t    dst[9] = 0;\n\t    dst[10] = (zNear + zFar) * rangeInv;\n\t    dst[11] = -1;\n\n\t    dst[12] = 0;\n\t    dst[13] = 0;\n\t    dst[14] = zNear * zFar * rangeInv * 2;\n\t    dst[15] = 0;\n\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Computes a 4-by-4 othogonal transformation matrix given the left, right,\n\t   * bottom, and top dimensions of the near clipping plane as well as the\n\t   * near and far clipping plane distances.\n\t   * @param {number} left Left side of the near clipping plane viewport.\n\t   * @param {number} right Right side of the near clipping plane viewport.\n\t   * @param {number} top Top of the near clipping plane viewport.\n\t   * @param {number} bottom Bottom of the near clipping plane viewport.\n\t   * @param {number} near The depth (negative z coordinate)\n\t   *     of the near clipping plane.\n\t   * @param {number} far The depth (negative z coordinate)\n\t   *     of the far clipping plane.\n\t   * @param {module:twgl/m4.Mat4} [dst] Output matrix.\n\t   * @return {module:twgl/m4.Mat4} The perspective matrix.\n\t   * @memberOf module:twgl/m4\n\t   */\n\t  function ortho(left, right, bottom, top, near, far, dst) {\n\t    dst = dst || new MatType(16);\n\n\t    dst[0] = 2 / (right - left);\n\t    dst[1] = 0;\n\t    dst[2] = 0;\n\t    dst[3] = 0;\n\n\t    dst[4] = 0;\n\t    dst[5] = 2 / (top - bottom);\n\t    dst[6] = 0;\n\t    dst[7] = 0;\n\n\t    dst[8] = 0;\n\t    dst[9] = 0;\n\t    dst[10] = -1 / (far - near);\n\t    dst[11] = 0;\n\n\t    dst[12] = (right + left) / (left - right);\n\t    dst[13] = (top + bottom) / (bottom - top);\n\t    dst[14] = -near / (near - far);\n\t    dst[15] = 1;\n\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Computes a 4-by-4 perspective transformation matrix given the left, right,\n\t   * top, bottom, near and far clipping planes. The arguments define a frustum\n\t   * extending in the negative z direction. The arguments near and far are the\n\t   * distances to the near and far clipping planes. Note that near and far are not\n\t   * z coordinates, but rather they are distances along the negative z-axis. The\n\t   * matrix generated sends the viewing frustum to the unit box. We assume a unit\n\t   * box extending from -1 to 1 in the x and y dimensions and from 0 to 1 in the z\n\t   * dimension.\n\t   * @param {number} left The x coordinate of the left plane of the box.\n\t   * @param {number} right The x coordinate of the right plane of the box.\n\t   * @param {number} bottom The y coordinate of the bottom plane of the box.\n\t   * @param {number} top The y coordinate of the right plane of the box.\n\t   * @param {number} near The negative z coordinate of the near plane of the box.\n\t   * @param {number} far The negative z coordinate of the far plane of the box.\n\t   * @param {module:twgl/m4.Mat4} [dst] Output matrix.\n\t   * @return {module:twgl/m4.Mat4} The perspective projection matrix.\n\t   * @memberOf module:twgl/m4\n\t   */\n\t  function frustum(left, right, bottom, top, near, far, dst) {\n\t    dst = dst || new MatType(16);\n\n\t    var dx = right - left;\n\t    var dy = top - bottom;\n\t    var dz = near - far;\n\n\t    dst[0] = 2 * near / dx;\n\t    dst[1] = 0;\n\t    dst[2] = 0;\n\t    dst[3] = 0;\n\t    dst[4] = 0;\n\t    dst[5] = 2 * near / dy;\n\t    dst[6] = 0;\n\t    dst[7] = 0;\n\t    dst[8] = (left + right) / dx;\n\t    dst[9] = (top + bottom) / dy;\n\t    dst[10] = far / dz;\n\t    dst[11] = -1;\n\t    dst[12] = 0;\n\t    dst[13] = 0;\n\t    dst[14] = near * far / dz;\n\t    dst[15] = 0;\n\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Computes a 4-by-4 look-at transformation.\n\t   *\n\t   * This is a matrix which positions the camera itself. If you want\n\t   * a view matrix (a matrix which moves things in front of the camera)\n\t   * take the inverse of this.\n\t   *\n\t   * @param {Vec3} eye The position of the eye.\n\t   * @param {Vec3} target The position meant to be viewed.\n\t   * @param {Vec3} up A vector pointing up.\n\t   * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..\n\t   * @return {module:twgl/m4.Mat4} The look-at matrix.\n\t   * @memberOf module:twgl/m4\n\t   */\n\t  function lookAt(eye, target, up, dst) {\n\t    dst = dst || new MatType(16);\n\n\t    var xAxis = tempV3a;\n\t    var yAxis = tempV3b;\n\t    var zAxis = tempV3c;\n\n\t    v3.normalize(v3.subtract(eye, target, zAxis), zAxis);\n\t    v3.normalize(v3.cross(up, zAxis, xAxis), xAxis);\n\t    v3.normalize(v3.cross(zAxis, xAxis, yAxis), yAxis);\n\n\t    dst[0] = xAxis[0];\n\t    dst[1] = xAxis[1];\n\t    dst[2] = xAxis[2];\n\t    dst[3] = 0;\n\t    dst[4] = yAxis[0];\n\t    dst[5] = yAxis[1];\n\t    dst[6] = yAxis[2];\n\t    dst[7] = 0;\n\t    dst[8] = zAxis[0];\n\t    dst[9] = zAxis[1];\n\t    dst[10] = zAxis[2];\n\t    dst[11] = 0;\n\t    dst[12] = eye[0];\n\t    dst[13] = eye[1];\n\t    dst[14] = eye[2];\n\t    dst[15] = 1;\n\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Creates a 4-by-4 matrix which translates by the given vector v.\n\t   * @param {Vec3} v The vector by\n\t   *     which to translate.\n\t   * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..\n\t   * @return {module:twgl/m4.Mat4} The translation matrix.\n\t   * @memberOf module:twgl/m4\n\t   */\n\t  function translation(v, dst) {\n\t    dst = dst || new MatType(16);\n\n\t    dst[0] = 1;\n\t    dst[1] = 0;\n\t    dst[2] = 0;\n\t    dst[3] = 0;\n\t    dst[4] = 0;\n\t    dst[5] = 1;\n\t    dst[6] = 0;\n\t    dst[7] = 0;\n\t    dst[8] = 0;\n\t    dst[9] = 0;\n\t    dst[10] = 1;\n\t    dst[11] = 0;\n\t    dst[12] = v[0];\n\t    dst[13] = v[1];\n\t    dst[14] = v[2];\n\t    dst[15] = 1;\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Modifies the given 4-by-4 matrix by translation by the given vector v.\n\t   * @param {module:twgl/m4.Mat4} m The matrix.\n\t   * @param {Vec3} v The vector by\n\t   *     which to translate.\n\t   * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..\n\t   * @return {module:twgl/m4.Mat4} m once modified.\n\t   * @memberOf module:twgl/m4\n\t   */\n\t  function translate(m, v, dst) {\n\t    dst = dst || new MatType(16);\n\n\t    var v0 = v[0];\n\t    var v1 = v[1];\n\t    var v2 = v[2];\n\t    var m00 = m[0];\n\t    var m01 = m[1];\n\t    var m02 = m[2];\n\t    var m03 = m[3];\n\t    var m10 = m[1 * 4 + 0];\n\t    var m11 = m[1 * 4 + 1];\n\t    var m12 = m[1 * 4 + 2];\n\t    var m13 = m[1 * 4 + 3];\n\t    var m20 = m[2 * 4 + 0];\n\t    var m21 = m[2 * 4 + 1];\n\t    var m22 = m[2 * 4 + 2];\n\t    var m23 = m[2 * 4 + 3];\n\t    var m30 = m[3 * 4 + 0];\n\t    var m31 = m[3 * 4 + 1];\n\t    var m32 = m[3 * 4 + 2];\n\t    var m33 = m[3 * 4 + 3];\n\n\t    if (m !== dst) {\n\t      dst[0] = m00;\n\t      dst[1] = m01;\n\t      dst[2] = m02;\n\t      dst[3] = m03;\n\t      dst[4] = m10;\n\t      dst[5] = m11;\n\t      dst[6] = m12;\n\t      dst[7] = m13;\n\t      dst[8] = m20;\n\t      dst[9] = m21;\n\t      dst[10] = m22;\n\t      dst[11] = m23;\n\t    }\n\n\t    dst[12] = m00 * v0 + m10 * v1 + m20 * v2 + m30;\n\t    dst[13] = m01 * v0 + m11 * v1 + m21 * v2 + m31;\n\t    dst[14] = m02 * v0 + m12 * v1 + m22 * v2 + m32;\n\t    dst[15] = m03 * v0 + m13 * v1 + m23 * v2 + m33;\n\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Creates a 4-by-4 matrix which rotates around the x-axis by the given angle.\n\t   * @param {number} angleInRadians The angle by which to rotate (in radians).\n\t   * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..\n\t   * @return {module:twgl/m4.Mat4} The rotation matrix.\n\t   * @memberOf module:twgl/m4\n\t   */\n\t  function rotationX(angleInRadians, dst) {\n\t    dst = dst || new MatType(16);\n\n\t    var c = Math.cos(angleInRadians);\n\t    var s = Math.sin(angleInRadians);\n\n\t    dst[0] = 1;\n\t    dst[1] = 0;\n\t    dst[2] = 0;\n\t    dst[3] = 0;\n\t    dst[4] = 0;\n\t    dst[5] = c;\n\t    dst[6] = s;\n\t    dst[7] = 0;\n\t    dst[8] = 0;\n\t    dst[9] = -s;\n\t    dst[10] = c;\n\t    dst[11] = 0;\n\t    dst[12] = 0;\n\t    dst[13] = 0;\n\t    dst[14] = 0;\n\t    dst[15] = 1;\n\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Modifies the given 4-by-4 matrix by a rotation around the x-axis by the given\n\t   * angle.\n\t   * @param {module:twgl/m4.Mat4} m The matrix.\n\t   * @param {number} angleInRadians The angle by which to rotate (in radians).\n\t   * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..\n\t   * @return {module:twgl/m4.Mat4} m once modified.\n\t   * @memberOf module:twgl/m4\n\t   */\n\t  function rotateX(m, angleInRadians, dst) {\n\t    dst = dst || new MatType(16);\n\n\t    var m10 = m[4];\n\t    var m11 = m[5];\n\t    var m12 = m[6];\n\t    var m13 = m[7];\n\t    var m20 = m[8];\n\t    var m21 = m[9];\n\t    var m22 = m[10];\n\t    var m23 = m[11];\n\t    var c = Math.cos(angleInRadians);\n\t    var s = Math.sin(angleInRadians);\n\n\t    dst[4] = c * m10 + s * m20;\n\t    dst[5] = c * m11 + s * m21;\n\t    dst[6] = c * m12 + s * m22;\n\t    dst[7] = c * m13 + s * m23;\n\t    dst[8] = c * m20 - s * m10;\n\t    dst[9] = c * m21 - s * m11;\n\t    dst[10] = c * m22 - s * m12;\n\t    dst[11] = c * m23 - s * m13;\n\n\t    if (m !== dst) {\n\t      dst[0] = m[0];\n\t      dst[1] = m[1];\n\t      dst[2] = m[2];\n\t      dst[3] = m[3];\n\t      dst[12] = m[12];\n\t      dst[13] = m[13];\n\t      dst[14] = m[14];\n\t      dst[15] = m[15];\n\t    }\n\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Creates a 4-by-4 matrix which rotates around the y-axis by the given angle.\n\t   * @param {number} angleInRadians The angle by which to rotate (in radians).\n\t   * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..\n\t   * @return {module:twgl/m4.Mat4} The rotation matrix.\n\t   * @memberOf module:twgl/m4\n\t   */\n\t  function rotationY(angleInRadians, dst) {\n\t    dst = dst || new MatType(16);\n\n\t    var c = Math.cos(angleInRadians);\n\t    var s = Math.sin(angleInRadians);\n\n\t    dst[0] = c;\n\t    dst[1] = 0;\n\t    dst[2] = -s;\n\t    dst[3] = 0;\n\t    dst[4] = 0;\n\t    dst[5] = 1;\n\t    dst[6] = 0;\n\t    dst[7] = 0;\n\t    dst[8] = s;\n\t    dst[9] = 0;\n\t    dst[10] = c;\n\t    dst[11] = 0;\n\t    dst[12] = 0;\n\t    dst[13] = 0;\n\t    dst[14] = 0;\n\t    dst[15] = 1;\n\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Modifies the given 4-by-4 matrix by a rotation around the y-axis by the given\n\t   * angle.\n\t   * @param {module:twgl/m4.Mat4} m The matrix.\n\t   * @param {number} angleInRadians The angle by which to rotate (in radians).\n\t   * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..\n\t   * @return {module:twgl/m4.Mat4} m once modified.\n\t   * @memberOf module:twgl/m4\n\t   */\n\t  function rotateY(m, angleInRadians, dst) {\n\t    dst = dst || new MatType(16);\n\n\t    var m00 = m[0 * 4 + 0];\n\t    var m01 = m[0 * 4 + 1];\n\t    var m02 = m[0 * 4 + 2];\n\t    var m03 = m[0 * 4 + 3];\n\t    var m20 = m[2 * 4 + 0];\n\t    var m21 = m[2 * 4 + 1];\n\t    var m22 = m[2 * 4 + 2];\n\t    var m23 = m[2 * 4 + 3];\n\t    var c = Math.cos(angleInRadians);\n\t    var s = Math.sin(angleInRadians);\n\n\t    dst[0] = c * m00 - s * m20;\n\t    dst[1] = c * m01 - s * m21;\n\t    dst[2] = c * m02 - s * m22;\n\t    dst[3] = c * m03 - s * m23;\n\t    dst[8] = c * m20 + s * m00;\n\t    dst[9] = c * m21 + s * m01;\n\t    dst[10] = c * m22 + s * m02;\n\t    dst[11] = c * m23 + s * m03;\n\n\t    if (m !== dst) {\n\t      dst[4] = m[4];\n\t      dst[5] = m[5];\n\t      dst[6] = m[6];\n\t      dst[7] = m[7];\n\t      dst[12] = m[12];\n\t      dst[13] = m[13];\n\t      dst[14] = m[14];\n\t      dst[15] = m[15];\n\t    }\n\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Creates a 4-by-4 matrix which rotates around the z-axis by the given angle.\n\t   * @param {number} angleInRadians The angle by which to rotate (in radians).\n\t   * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..\n\t   * @return {module:twgl/m4.Mat4} The rotation matrix.\n\t   * @memberOf module:twgl/m4\n\t   */\n\t  function rotationZ(angleInRadians, dst) {\n\t    dst = dst || new MatType(16);\n\n\t    var c = Math.cos(angleInRadians);\n\t    var s = Math.sin(angleInRadians);\n\n\t    dst[0] = c;\n\t    dst[1] = s;\n\t    dst[2] = 0;\n\t    dst[3] = 0;\n\t    dst[4] = -s;\n\t    dst[5] = c;\n\t    dst[6] = 0;\n\t    dst[7] = 0;\n\t    dst[8] = 0;\n\t    dst[9] = 0;\n\t    dst[10] = 1;\n\t    dst[11] = 0;\n\t    dst[12] = 0;\n\t    dst[13] = 0;\n\t    dst[14] = 0;\n\t    dst[15] = 1;\n\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Modifies the given 4-by-4 matrix by a rotation around the z-axis by the given\n\t   * angle.\n\t   * @param {module:twgl/m4.Mat4} m The matrix.\n\t   * @param {number} angleInRadians The angle by which to rotate (in radians).\n\t   * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..\n\t   * @return {module:twgl/m4.Mat4} m once modified.\n\t   * @memberOf module:twgl/m4\n\t   */\n\t  function rotateZ(m, angleInRadians, dst) {\n\t    dst = dst || new MatType(16);\n\n\t    var m00 = m[0 * 4 + 0];\n\t    var m01 = m[0 * 4 + 1];\n\t    var m02 = m[0 * 4 + 2];\n\t    var m03 = m[0 * 4 + 3];\n\t    var m10 = m[1 * 4 + 0];\n\t    var m11 = m[1 * 4 + 1];\n\t    var m12 = m[1 * 4 + 2];\n\t    var m13 = m[1 * 4 + 3];\n\t    var c = Math.cos(angleInRadians);\n\t    var s = Math.sin(angleInRadians);\n\n\t    dst[0] = c * m00 + s * m10;\n\t    dst[1] = c * m01 + s * m11;\n\t    dst[2] = c * m02 + s * m12;\n\t    dst[3] = c * m03 + s * m13;\n\t    dst[4] = c * m10 - s * m00;\n\t    dst[5] = c * m11 - s * m01;\n\t    dst[6] = c * m12 - s * m02;\n\t    dst[7] = c * m13 - s * m03;\n\n\t    if (m !== dst) {\n\t      dst[8] = m[8];\n\t      dst[9] = m[9];\n\t      dst[10] = m[10];\n\t      dst[11] = m[11];\n\t      dst[12] = m[12];\n\t      dst[13] = m[13];\n\t      dst[14] = m[14];\n\t      dst[15] = m[15];\n\t    }\n\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Creates a 4-by-4 matrix which rotates around the given axis by the given\n\t   * angle.\n\t   * @param {Vec3} axis The axis\n\t   *     about which to rotate.\n\t   * @param {number} angleInRadians The angle by which to rotate (in radians).\n\t   * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..\n\t   * @return {module:twgl/m4.Mat4} A matrix which rotates angle radians\n\t   *     around the axis.\n\t   * @memberOf module:twgl/m4\n\t   */\n\t  function axisRotation(axis, angleInRadians, dst) {\n\t    dst = dst || new MatType(16);\n\n\t    var x = axis[0];\n\t    var y = axis[1];\n\t    var z = axis[2];\n\t    var n = Math.sqrt(x * x + y * y + z * z);\n\t    x /= n;\n\t    y /= n;\n\t    z /= n;\n\t    var xx = x * x;\n\t    var yy = y * y;\n\t    var zz = z * z;\n\t    var c = Math.cos(angleInRadians);\n\t    var s = Math.sin(angleInRadians);\n\t    var oneMinusCosine = 1 - c;\n\n\t    dst[0] = xx + (1 - xx) * c;\n\t    dst[1] = x * y * oneMinusCosine + z * s;\n\t    dst[2] = x * z * oneMinusCosine - y * s;\n\t    dst[3] = 0;\n\t    dst[4] = x * y * oneMinusCosine - z * s;\n\t    dst[5] = yy + (1 - yy) * c;\n\t    dst[6] = y * z * oneMinusCosine + x * s;\n\t    dst[7] = 0;\n\t    dst[8] = x * z * oneMinusCosine + y * s;\n\t    dst[9] = y * z * oneMinusCosine - x * s;\n\t    dst[10] = zz + (1 - zz) * c;\n\t    dst[11] = 0;\n\t    dst[12] = 0;\n\t    dst[13] = 0;\n\t    dst[14] = 0;\n\t    dst[15] = 1;\n\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Modifies the given 4-by-4 matrix by rotation around the given axis by the\n\t   * given angle.\n\t   * @param {module:twgl/m4.Mat4} m The matrix.\n\t   * @param {Vec3} axis The axis\n\t   *     about which to rotate.\n\t   * @param {number} angleInRadians The angle by which to rotate (in radians).\n\t   * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..\n\t   * @return {module:twgl/m4.Mat4} m once modified.\n\t   * @memberOf module:twgl/m4\n\t   */\n\t  function axisRotate(m, axis, angleInRadians, dst) {\n\t    dst = dst || new MatType(16);\n\n\t    var x = axis[0];\n\t    var y = axis[1];\n\t    var z = axis[2];\n\t    var n = Math.sqrt(x * x + y * y + z * z);\n\t    x /= n;\n\t    y /= n;\n\t    z /= n;\n\t    var xx = x * x;\n\t    var yy = y * y;\n\t    var zz = z * z;\n\t    var c = Math.cos(angleInRadians);\n\t    var s = Math.sin(angleInRadians);\n\t    var oneMinusCosine = 1 - c;\n\n\t    var r00 = xx + (1 - xx) * c;\n\t    var r01 = x * y * oneMinusCosine + z * s;\n\t    var r02 = x * z * oneMinusCosine - y * s;\n\t    var r10 = x * y * oneMinusCosine - z * s;\n\t    var r11 = yy + (1 - yy) * c;\n\t    var r12 = y * z * oneMinusCosine + x * s;\n\t    var r20 = x * z * oneMinusCosine + y * s;\n\t    var r21 = y * z * oneMinusCosine - x * s;\n\t    var r22 = zz + (1 - zz) * c;\n\n\t    var m00 = m[0];\n\t    var m01 = m[1];\n\t    var m02 = m[2];\n\t    var m03 = m[3];\n\t    var m10 = m[4];\n\t    var m11 = m[5];\n\t    var m12 = m[6];\n\t    var m13 = m[7];\n\t    var m20 = m[8];\n\t    var m21 = m[9];\n\t    var m22 = m[10];\n\t    var m23 = m[11];\n\n\t    dst[0] = r00 * m00 + r01 * m10 + r02 * m20;\n\t    dst[1] = r00 * m01 + r01 * m11 + r02 * m21;\n\t    dst[2] = r00 * m02 + r01 * m12 + r02 * m22;\n\t    dst[3] = r00 * m03 + r01 * m13 + r02 * m23;\n\t    dst[4] = r10 * m00 + r11 * m10 + r12 * m20;\n\t    dst[5] = r10 * m01 + r11 * m11 + r12 * m21;\n\t    dst[6] = r10 * m02 + r11 * m12 + r12 * m22;\n\t    dst[7] = r10 * m03 + r11 * m13 + r12 * m23;\n\t    dst[8] = r20 * m00 + r21 * m10 + r22 * m20;\n\t    dst[9] = r20 * m01 + r21 * m11 + r22 * m21;\n\t    dst[10] = r20 * m02 + r21 * m12 + r22 * m22;\n\t    dst[11] = r20 * m03 + r21 * m13 + r22 * m23;\n\n\t    if (m !== dst) {\n\t      dst[12] = m[12];\n\t      dst[13] = m[13];\n\t      dst[14] = m[14];\n\t      dst[15] = m[15];\n\t    }\n\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Creates a 4-by-4 matrix which scales in each dimension by an amount given by\n\t   * the corresponding entry in the given vector; assumes the vector has three\n\t   * entries.\n\t   * @param {Vec3} v A vector of\n\t   *     three entries specifying the factor by which to scale in each dimension.\n\t   * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..\n\t   * @return {module:twgl/m4.Mat4} The scaling matrix.\n\t   * @memberOf module:twgl/m4\n\t   */\n\t  function scaling(v, dst) {\n\t    dst = dst || new MatType(16);\n\n\t    dst[0] = v[0];\n\t    dst[1] = 0;\n\t    dst[2] = 0;\n\t    dst[3] = 0;\n\t    dst[4] = 0;\n\t    dst[5] = v[1];\n\t    dst[6] = 0;\n\t    dst[7] = 0;\n\t    dst[8] = 0;\n\t    dst[9] = 0;\n\t    dst[10] = v[2];\n\t    dst[11] = 0;\n\t    dst[12] = 0;\n\t    dst[13] = 0;\n\t    dst[14] = 0;\n\t    dst[15] = 1;\n\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Modifies the given 4-by-4 matrix, scaling in each dimension by an amount\n\t   * given by the corresponding entry in the given vector; assumes the vector has\n\t   * three entries.\n\t   * @param {module:twgl/m4.Mat4} m The matrix to be modified.\n\t   * @param {Vec3} v A vector of three entries specifying the\n\t   *     factor by which to scale in each dimension.\n\t   * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..\n\t   * @return {module:twgl/m4.Mat4} m once modified.\n\t   * @memberOf module:twgl/m4\n\t   */\n\t  function scale(m, v, dst) {\n\t    dst = dst || new MatType(16);\n\n\t    var v0 = v[0];\n\t    var v1 = v[1];\n\t    var v2 = v[2];\n\n\t    dst[0] = v0 * m[0 * 4 + 0];\n\t    dst[1] = v0 * m[0 * 4 + 1];\n\t    dst[2] = v0 * m[0 * 4 + 2];\n\t    dst[3] = v0 * m[0 * 4 + 3];\n\t    dst[4] = v1 * m[1 * 4 + 0];\n\t    dst[5] = v1 * m[1 * 4 + 1];\n\t    dst[6] = v1 * m[1 * 4 + 2];\n\t    dst[7] = v1 * m[1 * 4 + 3];\n\t    dst[8] = v2 * m[2 * 4 + 0];\n\t    dst[9] = v2 * m[2 * 4 + 1];\n\t    dst[10] = v2 * m[2 * 4 + 2];\n\t    dst[11] = v2 * m[2 * 4 + 3];\n\n\t    if (m !== dst) {\n\t      dst[12] = m[12];\n\t      dst[13] = m[13];\n\t      dst[14] = m[14];\n\t      dst[15] = m[15];\n\t    }\n\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Takes a 4-by-4 matrix and a vector with 3 entries,\n\t   * interprets the vector as a point, transforms that point by the matrix, and\n\t   * returns the result as a vector with 3 entries.\n\t   * @param {module:twgl/m4.Mat4} m The matrix.\n\t   * @param {Vec3} v The point.\n\t   * @param {Vec3} dst optional vec3 to store result\n\t   * @return {Vec3} dst or new vec3 if not provided\n\t   * @memberOf module:twgl/m4\n\t   */\n\t  function transformPoint(m, v, dst) {\n\t    dst = dst || v3.create();\n\t    var v0 = v[0];\n\t    var v1 = v[1];\n\t    var v2 = v[2];\n\t    var d = v0 * m[0 * 4 + 3] + v1 * m[1 * 4 + 3] + v2 * m[2 * 4 + 3] + m[3 * 4 + 3];\n\n\t    dst[0] = (v0 * m[0 * 4 + 0] + v1 * m[1 * 4 + 0] + v2 * m[2 * 4 + 0] + m[3 * 4 + 0]) / d;\n\t    dst[1] = (v0 * m[0 * 4 + 1] + v1 * m[1 * 4 + 1] + v2 * m[2 * 4 + 1] + m[3 * 4 + 1]) / d;\n\t    dst[2] = (v0 * m[0 * 4 + 2] + v1 * m[1 * 4 + 2] + v2 * m[2 * 4 + 2] + m[3 * 4 + 2]) / d;\n\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Takes a 4-by-4 matrix and a vector with 3 entries, interprets the vector as a\n\t   * direction, transforms that direction by the matrix, and returns the result;\n\t   * assumes the transformation of 3-dimensional space represented by the matrix\n\t   * is parallel-preserving, i.e. any combination of rotation, scaling and\n\t   * translation, but not a perspective distortion. Returns a vector with 3\n\t   * entries.\n\t   * @param {module:twgl/m4.Mat4} m The matrix.\n\t   * @param {Vec3} v The direction.\n\t   * @param {Vec3} dst optional Vec3 to store result\n\t   * @return {Vec3} dst or new Vec3 if not provided\n\t   * @memberOf module:twgl/m4\n\t   */\n\t  function transformDirection(m, v, dst) {\n\t    dst = dst || v3.create();\n\n\t    var v0 = v[0];\n\t    var v1 = v[1];\n\t    var v2 = v[2];\n\n\t    dst[0] = v0 * m[0 * 4 + 0] + v1 * m[1 * 4 + 0] + v2 * m[2 * 4 + 0];\n\t    dst[1] = v0 * m[0 * 4 + 1] + v1 * m[1 * 4 + 1] + v2 * m[2 * 4 + 1];\n\t    dst[2] = v0 * m[0 * 4 + 2] + v1 * m[1 * 4 + 2] + v2 * m[2 * 4 + 2];\n\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Takes a 4-by-4 matrix m and a vector v with 3 entries, interprets the vector\n\t   * as a normal to a surface, and computes a vector which is normal upon\n\t   * transforming that surface by the matrix. The effect of this function is the\n\t   * same as transforming v (as a direction) by the inverse-transpose of m.  This\n\t   * function assumes the transformation of 3-dimensional space represented by the\n\t   * matrix is parallel-preserving, i.e. any combination of rotation, scaling and\n\t   * translation, but not a perspective distortion.  Returns a vector with 3\n\t   * entries.\n\t   * @param {module:twgl/m4.Mat4} m The matrix.\n\t   * @param {Vec3} v The normal.\n\t   * @param {Vec3} [dst] The direction.\n\t   * @return {Vec3} The transformed direction.\n\t   * @memberOf module:twgl/m4\n\t   */\n\t  function transformNormal(m, v, dst) {\n\t    dst = dst || v3.create();\n\t    var mi = inverse(m);\n\t    var v0 = v[0];\n\t    var v1 = v[1];\n\t    var v2 = v[2];\n\n\t    dst[0] = v0 * mi[0 * 4 + 0] + v1 * mi[0 * 4 + 1] + v2 * mi[0 * 4 + 2];\n\t    dst[1] = v0 * mi[1 * 4 + 0] + v1 * mi[1 * 4 + 1] + v2 * mi[1 * 4 + 2];\n\t    dst[2] = v0 * mi[2 * 4 + 0] + v1 * mi[2 * 4 + 1] + v2 * mi[2 * 4 + 2];\n\n\t    return dst;\n\t  }\n\n\t  // Using quotes prevents Uglify from changing the names.\n\t  // No speed diff AFAICT.\n\t  return {\n\t    \"axisRotate\": axisRotate,\n\t    \"axisRotation\": axisRotation,\n\t    \"create\": identity,\n\t    \"copy\": copy,\n\t    \"frustum\": frustum,\n\t    \"getAxis\": getAxis,\n\t    \"getTranslation\": getTranslation,\n\t    \"identity\": identity,\n\t    \"inverse\": inverse,\n\t    \"lookAt\": lookAt,\n\t    \"multiply\": multiply,\n\t    \"negate\": negate,\n\t    \"ortho\": ortho,\n\t    \"perspective\": perspective,\n\t    \"rotateX\": rotateX,\n\t    \"rotateY\": rotateY,\n\t    \"rotateZ\": rotateZ,\n\t    \"rotateAxis\": axisRotate,\n\t    \"rotationX\": rotationX,\n\t    \"rotationY\": rotationY,\n\t    \"rotationZ\": rotationZ,\n\t    \"scale\": scale,\n\t    \"scaling\": scaling,\n\t    \"setAxis\": setAxis,\n\t    \"setDefaultType\": setDefaultType,\n\t    \"setTranslation\": setTranslation,\n\t    \"transformDirection\": transformDirection,\n\t    \"transformNormal\": transformNormal,\n\t    \"transformPoint\": transformPoint,\n\t    \"translate\": translate,\n\t    \"translation\": translation,\n\t    \"transpose\": transpose\n\t  };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\"use strict\";\n\n\t/*\n\t * Copyright 2015, Gregg Tavares.\n\t * All rights reserved.\n\t *\n\t * Redistribution and use in source and binary forms, with or without\n\t * modification, are permitted provided that the following conditions are\n\t * met:\n\t *\n\t *     * Redistributions of source code must retain the above copyright\n\t * notice, this list of conditions and the following disclaimer.\n\t *     * Redistributions in binary form must reproduce the above\n\t * copyright notice, this list of conditions and the following disclaimer\n\t * in the documentation and/or other materials provided with the\n\t * distribution.\n\t *     * Neither the name of Gregg Tavares. nor the names of his\n\t * contributors may be used to endorse or promote products derived from\n\t * this software without specific prior written permission.\n\t *\n\t * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\t * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n\t * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n\t * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n\t * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n\t * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n\t * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n\t * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n\t * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\t * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n\t * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\t */\n\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n\t  \"use strict\";\n\n\t  /**\n\t   *\n\t   * Vec3 math math functions.\n\t   *\n\t   * Almost all functions take an optional `dst` argument. If it is not passed in the\n\t   * functions will create a new Vec3. In other words you can do this\n\t   *\n\t   *     var v = v3.cross(v1, v2);  // Creates a new Vec3 with the cross product of v1 x v2.\n\t   *\n\t   * or\n\t   *\n\t   *     var v3 = v3.create();\n\t   *     v3.cross(v1, v2, v);  // Puts the cross product of v1 x v2 in v\n\t   *\n\t   * The first style is often easier but depending on where it's used it generates garbage where\n\t   * as there is almost never allocation with the second style.\n\t   *\n\t   * It is always save to pass any vector as the destination. So for example\n\t   *\n\t   *     v3.cross(v1, v2, v1);  // Puts the cross product of v1 x v2 in v1\n\t   *\n\t   * @module twgl/v3\n\t   */\n\n\t  var VecType = Float32Array;\n\n\t  /**\n\t   * A JavaScript array with 3 values or a Float32Array with 3 values.\n\t   * When created by the library will create the default type which is `Float32Array`\n\t   * but can be set by calling {@link module:twgl/v3.setDefaultType}.\n\t   * @typedef {(number[]|Float32Array)} Vec3\n\t   * @memberOf module:twgl/v3\n\t   */\n\n\t  /**\n\t   * Sets the type this library creates for a Vec3\n\t   * @param {constructor} ctor the constructor for the type. Either `Float32Array` or `Array`\n\t   * @return {constructor} previous constructor for Vec3\n\t   */\n\t  function setDefaultType(ctor) {\n\t    var oldType = VecType;\n\t    VecType = ctor;\n\t    return oldType;\n\t  }\n\n\t  /**\n\t   * Creates a vec3; may be called with x, y, z to set initial values.\n\t   * @return {Vec3} the created vector\n\t   * @memberOf module:twgl/v3\n\t   */\n\t  function create(x, y, z) {\n\t    var dst = new VecType(3);\n\t    if (x) {\n\t      dst[0] = x;\n\t    }\n\t    if (y) {\n\t      dst[1] = y;\n\t    }\n\t    if (z) {\n\t      dst[2] = z;\n\t    }\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Adds two vectors; assumes a and b have the same dimension.\n\t   * @param {module:twgl/v3.Vec3} a Operand vector.\n\t   * @param {module:twgl/v3.Vec3} b Operand vector.\n\t   * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created..\n\t   * @memberOf module:twgl/v3\n\t   */\n\t  function add(a, b, dst) {\n\t    dst = dst || new VecType(3);\n\n\t    dst[0] = a[0] + b[0];\n\t    dst[1] = a[1] + b[1];\n\t    dst[2] = a[2] + b[2];\n\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Subtracts two vectors.\n\t   * @param {module:twgl/v3.Vec3} a Operand vector.\n\t   * @param {module:twgl/v3.Vec3} b Operand vector.\n\t   * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created..\n\t   * @memberOf module:twgl/v3\n\t   */\n\t  function subtract(a, b, dst) {\n\t    dst = dst || new VecType(3);\n\n\t    dst[0] = a[0] - b[0];\n\t    dst[1] = a[1] - b[1];\n\t    dst[2] = a[2] - b[2];\n\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Performs linear interpolation on two vectors.\n\t   * Given vectors a and b and interpolation coefficient t, returns\n\t   * (1 - t) * a + t * b.\n\t   * @param {module:twgl/v3.Vec3} a Operand vector.\n\t   * @param {module:twgl/v3.Vec3} b Operand vector.\n\t   * @param {number} t Interpolation coefficient.\n\t   * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created..\n\t   * @memberOf module:twgl/v3\n\t   */\n\t  function lerp(a, b, t, dst) {\n\t    dst = dst || new VecType(3);\n\n\t    dst[0] = (1 - t) * a[0] + t * b[0];\n\t    dst[1] = (1 - t) * a[1] + t * b[1];\n\t    dst[2] = (1 - t) * a[2] + t * b[2];\n\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Mutiplies a vector by a scalar.\n\t   * @param {module:twgl/v3.Vec3} v The vector.\n\t   * @param {number} k The scalar.\n\t   * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created..\n\t   * @return {module:twgl/v3.Vec3} dst.\n\t   * @memberOf module:twgl/v3\n\t   */\n\t  function mulScalar(v, k, dst) {\n\t    dst = dst || new VecType(3);\n\n\t    dst[0] = v[0] * k;\n\t    dst[1] = v[1] * k;\n\t    dst[2] = v[2] * k;\n\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Divides a vector by a scalar.\n\t   * @param {module:twgl/v3.Vec3} v The vector.\n\t   * @param {number} k The scalar.\n\t   * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created..\n\t   * @return {module:twgl/v3.Vec3} dst.\n\t   * @memberOf module:twgl/v3\n\t   */\n\t  function divScalar(v, k, dst) {\n\t    dst = dst || new VecType(3);\n\n\t    dst[0] = v[0] / k;\n\t    dst[1] = v[1] / k;\n\t    dst[2] = v[2] / k;\n\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Computes the cross product of two vectors; assumes both vectors have\n\t   * three entries.\n\t   * @param {module:twgl/v3.Vec3} a Operand vector.\n\t   * @param {module:twgl/v3.Vec3} b Operand vector.\n\t   * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created..\n\t   * @return {module:twgl/v3.Vec3} The vector a cross b.\n\t   * @memberOf module:twgl/v3\n\t   */\n\t  function cross(a, b, dst) {\n\t    dst = dst || new VecType(3);\n\n\t    var t1 = a[2] * b[0] - a[0] * b[2];\n\t    var t2 = a[0] * b[1] - a[1] * b[0];\n\t    dst[0] = a[1] * b[2] - a[2] * b[1];\n\t    dst[1] = t1;\n\t    dst[2] = t2;\n\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Computes the dot product of two vectors; assumes both vectors have\n\t   * three entries.\n\t   * @param {module:twgl/v3.Vec3} a Operand vector.\n\t   * @param {module:twgl/v3.Vec3} b Operand vector.\n\t   * @return {number} dot product\n\t   * @memberOf module:twgl/v3\n\t   */\n\t  function dot(a, b) {\n\t    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n\t  }\n\n\t  /**\n\t   * Computes the length of vector\n\t   * @param {module:twgl/v3.Vec3} v vector.\n\t   * @return {number} length of vector.\n\t   * @memberOf module:twgl/v3\n\t   */\n\t  function length(v) {\n\t    return Math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);\n\t  }\n\n\t  /**\n\t   * Computes the square of the length of vector\n\t   * @param {module:twgl/v3.Vec3} v vector.\n\t   * @return {number} square of the length of vector.\n\t   * @memberOf module:twgl/v3\n\t   */\n\t  function lengthSq(v) {\n\t    return v[0] * v[0] + v[1] * v[1] + v[2] * v[2];\n\t  }\n\n\t  /**\n\t   * Computes the distance between 2 points\n\t   * @param {module:twgl/v3.Vec3} a vector.\n\t   * @param {module:twgl/v3.Vec3} b vector.\n\t   * @return {number} distance between a and b\n\t   * @memberOf module:twgl/v3\n\t   */\n\t  function distance(a, b) {\n\t    var dx = a[0] - b[0];\n\t    var dy = a[1] - b[1];\n\t    var dz = a[2] - b[2];\n\t    return Math.sqrt(dx * dx + dy * dy + dz * dz);\n\t  }\n\n\t  /**\n\t   * Computes the square of the distance between 2 points\n\t   * @param {module:twgl/v3.Vec3} a vector.\n\t   * @param {module:twgl/v3.Vec3} b vector.\n\t   * @return {number} square of the distance between a and b\n\t   * @memberOf module:twgl/v3\n\t   */\n\t  function distanceSq(a, b) {\n\t    var dx = a[0] - b[0];\n\t    var dy = a[1] - b[1];\n\t    var dz = a[2] - b[2];\n\t    return dx * dx + dy * dy + dz * dz;\n\t  }\n\n\t  /**\n\t   * Divides a vector by its Euclidean length and returns the quotient.\n\t   * @param {module:twgl/v3.Vec3} a The vector.\n\t   * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created..\n\t   * @return {module:twgl/v3.Vec3} The normalized vector.\n\t   * @memberOf module:twgl/v3\n\t   */\n\t  function normalize(a, dst) {\n\t    dst = dst || new VecType(3);\n\n\t    var lenSq = a[0] * a[0] + a[1] * a[1] + a[2] * a[2];\n\t    var len = Math.sqrt(lenSq);\n\t    if (len > 0.00001) {\n\t      dst[0] = a[0] / len;\n\t      dst[1] = a[1] / len;\n\t      dst[2] = a[2] / len;\n\t    } else {\n\t      dst[0] = 0;\n\t      dst[1] = 0;\n\t      dst[2] = 0;\n\t    }\n\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Negates a vector.\n\t   * @param {module:twgl/v3.Vec3} v The vector.\n\t   * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created..\n\t   * @return {module:twgl/v3.Vec3} -v.\n\t   * @memberOf module:twgl/v3\n\t   */\n\t  function negate(v, dst) {\n\t    dst = dst || new VecType(3);\n\n\t    dst[0] = -v[0];\n\t    dst[1] = -v[1];\n\t    dst[2] = -v[2];\n\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Copies a vector.\n\t   * @param {module:twgl/v3.Vec3} v The vector.\n\t   * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created..\n\t   * @return {module:twgl/v3.Vec3} A copy of v.\n\t   * @memberOf module:twgl/v3\n\t   */\n\t  function copy(v, dst) {\n\t    dst = dst || new VecType(3);\n\n\t    dst[0] = v[0];\n\t    dst[1] = v[1];\n\t    dst[2] = v[2];\n\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Multiplies a vector by another vector (component-wise); assumes a and\n\t   * b have the same length.\n\t   * @param {module:twgl/v3.Vec3} a Operand vector.\n\t   * @param {module:twgl/v3.Vec3} b Operand vector.\n\t   * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created..\n\t   * @return {module:twgl/v3.Vec3} The vector of products of entries of a and\n\t   *     b.\n\t   * @memberOf module:twgl/v3\n\t   */\n\t  function multiply(a, b, dst) {\n\t    dst = dst || new VecType(3);\n\n\t    dst[0] = a[0] * b[0];\n\t    dst[1] = a[1] * b[1];\n\t    dst[2] = a[2] * b[2];\n\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Divides a vector by another vector (component-wise); assumes a and\n\t   * b have the same length.\n\t   * @param {module:twgl/v3.Vec3} a Operand vector.\n\t   * @param {module:twgl/v3.Vec3} b Operand vector.\n\t   * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created..\n\t   * @return {module:twgl/v3.Vec3} The vector of quotients of entries of a and\n\t   *     b.\n\t   * @memberOf module:twgl/v3\n\t   */\n\t  function divide(a, b, dst) {\n\t    dst = dst || new VecType(3);\n\n\t    dst[0] = a[0] / b[0];\n\t    dst[1] = a[1] / b[1];\n\t    dst[2] = a[2] / b[2];\n\n\t    return dst;\n\t  }\n\n\t  // Using quotes prevents Uglify from changing the names.\n\t  // No speed diff AFAICT.\n\t  return {\n\t    \"add\": add,\n\t    \"copy\": copy,\n\t    \"create\": create,\n\t    \"cross\": cross,\n\t    \"distance\": distance,\n\t    \"distanceSq\": distanceSq,\n\t    \"divide\": divide,\n\t    \"divScalar\": divScalar,\n\t    \"dot\": dot,\n\t    \"lerp\": lerp,\n\t    \"length\": length,\n\t    \"lengthSq\": lengthSq,\n\t    \"mulScalar\": mulScalar,\n\t    \"multiply\": multiply,\n\t    \"negate\": negate,\n\t    \"normalize\": normalize,\n\t    \"setDefaultType\": setDefaultType,\n\t    \"subtract\": subtract\n\t  };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n\t/*\n\t * Copyright 2015, Gregg Tavares.\n\t * All rights reserved.\n\t *\n\t * Redistribution and use in source and binary forms, with or without\n\t * modification, are permitted provided that the following conditions are\n\t * met:\n\t *\n\t *     * Redistributions of source code must retain the above copyright\n\t * notice, this list of conditions and the following disclaimer.\n\t *     * Redistributions in binary form must reproduce the above\n\t * copyright notice, this list of conditions and the following disclaimer\n\t * in the documentation and/or other materials provided with the\n\t * distribution.\n\t *     * Neither the name of Gregg Tavares. nor the names of his\n\t * contributors may be used to endorse or promote products derived from\n\t * this software without specific prior written permission.\n\t *\n\t * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\t * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n\t * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n\t * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n\t * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n\t * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n\t * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n\t * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n\t * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\t * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n\t * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\t */\n\n\t/**\n\t * Various functions to make simple primitives\n\t *\n\t * note: Most primitive functions come in 3 styles\n\t *\n\t * *  `createSomeShapeBufferInfo`\n\t *\n\t *    These functions are almost always the functions you want to call. They\n\t *    create vertices then make WebGLBuffers and create {@link module:twgl.AttribInfo}s\n\t *    returing a {@link module:twgl.BufferInfo} you can pass to {@link module:twgl.setBuffersAndAttributes}\n\t *    and {@link module:twgl.drawBufferInfo} etc...\n\t *\n\t * *  `createSomeShapeBuffers`\n\t *\n\t *    These create WebGLBuffers and put your data in them but nothing else.\n\t *    It's a shortcut to doing it yourself if you don't want to use\n\t *    the higher level functions.\n\t *\n\t * *  `createSomeShapeVertices`\n\t *\n\t *    These just create vertices, no buffers. This allows you to manipulate the vertices\n\t *    or add more data before generating a {@link module:twgl.BufferInfo}. Once you're finished\n\t *    manipulating the vertices call {@link module:twgl.createBufferInfoFromArrays}.\n\t *\n\t *    example:\n\t *\n\t *        var arrays = twgl.primitives.createPlaneArrays(1);\n\t *        twgl.primitives.reorientVertices(arrays, m4.rotationX(Math.PI * 0.5));\n\t *        var bufferInfo = twgl.createBufferInfoFromArrays(gl, arrays);\n\t *\n\t * @module twgl/primitives\n\t */\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(2), __webpack_require__(4), __webpack_require__(10), __webpack_require__(11)], __WEBPACK_AMD_DEFINE_RESULT__ = function (attributes, utils, m4, v3) {\n\t  \"use strict\";\n\n\t  var getArray = attributes.getArray_; // eslint-disable-line\n\t  var getNumComponents = attributes.getNumComponents_; // eslint-disable-line\n\n\t  /**\n\t   * Add `push` to a typed array. It just keeps a 'cursor'\n\t   * and allows use to `push` values into the array so we\n\t   * don't have to manually compute offsets\n\t   * @param {TypedArray} typedArray TypedArray to augment\n\t   * @param {number} numComponents number of components.\n\t   */\n\t  function augmentTypedArray(typedArray, numComponents) {\n\t    var cursor = 0;\n\t    typedArray.push = function () {\n\t      for (var ii = 0; ii < arguments.length; ++ii) {\n\t        var value = arguments[ii];\n\t        if (value instanceof Array || value.buffer && value.buffer instanceof ArrayBuffer) {\n\t          for (var jj = 0; jj < value.length; ++jj) {\n\t            typedArray[cursor++] = value[jj];\n\t          }\n\t        } else {\n\t          typedArray[cursor++] = value;\n\t        }\n\t      }\n\t    };\n\t    typedArray.reset = function (opt_index) {\n\t      cursor = opt_index || 0;\n\t    };\n\t    typedArray.numComponents = numComponents;\n\t    Object.defineProperty(typedArray, 'numElements', {\n\t      get: function get() {\n\t        return this.length / this.numComponents | 0;\n\t      }\n\t    });\n\t    return typedArray;\n\t  }\n\n\t  /**\n\t   * creates a typed array with a `push` function attached\n\t   * so that you can easily *push* values.\n\t   *\n\t   * `push` can take multiple arguments. If an argument is an array each element\n\t   * of the array will be added to the typed array.\n\t   *\n\t   * Example:\n\t   *\n\t   *     var array = createAugmentedTypedArray(3, 2);  // creates a Float32Array with 6 values\n\t   *     array.push(1, 2, 3);\n\t   *     array.push([4, 5, 6]);\n\t   *     // array now contains [1, 2, 3, 4, 5, 6]\n\t   *\n\t   * Also has `numComponents` and `numElements` properties.\n\t   *\n\t   * @param {number} numComponents number of components\n\t   * @param {number} numElements number of elements. The total size of the array will be `numComponents * numElements`.\n\t   * @param {constructor} opt_type A constructor for the type. Default = `Float32Array`.\n\t   * @return {ArrayBuffer} A typed array.\n\t   * @memberOf module:twgl/primitives\n\t   */\n\t  function createAugmentedTypedArray(numComponents, numElements, opt_type) {\n\t    var Type = opt_type || Float32Array;\n\t    return augmentTypedArray(new Type(numComponents * numElements), numComponents);\n\t  }\n\n\t  function allButIndices(name) {\n\t    return name !== \"indices\";\n\t  }\n\n\t  /**\n\t   * Given indexed vertices creates a new set of vertices unindexed by expanding the indexed vertices.\n\t   * @param {Object.<string, TypedArray>} vertices The indexed vertices to deindex\n\t   * @return {Object.<string, TypedArray>} The deindexed vertices\n\t   * @memberOf module:twgl/primitives\n\t   */\n\t  function deindexVertices(vertices) {\n\t    var indices = vertices.indices;\n\t    var newVertices = {};\n\t    var numElements = indices.length;\n\n\t    function expandToUnindexed(channel) {\n\t      var srcBuffer = vertices[channel];\n\t      var numComponents = srcBuffer.numComponents;\n\t      var dstBuffer = createAugmentedTypedArray(numComponents, numElements, srcBuffer.constructor);\n\t      for (var ii = 0; ii < numElements; ++ii) {\n\t        var ndx = indices[ii];\n\t        var offset = ndx * numComponents;\n\t        for (var jj = 0; jj < numComponents; ++jj) {\n\t          dstBuffer.push(srcBuffer[offset + jj]);\n\t        }\n\t      }\n\t      newVertices[channel] = dstBuffer;\n\t    }\n\n\t    Object.keys(vertices).filter(allButIndices).forEach(expandToUnindexed);\n\n\t    return newVertices;\n\t  }\n\n\t  /**\n\t   * flattens the normals of deindexed vertices in place.\n\t   * @param {Object.<string, TypedArray>} vertices The deindexed vertices who's normals to flatten\n\t   * @return {Object.<string, TypedArray>} The flattened vertices (same as was passed in)\n\t   * @memberOf module:twgl/primitives\n\t   */\n\t  function flattenNormals(vertices) {\n\t    if (vertices.indices) {\n\t      throw \"can't flatten normals of indexed vertices. deindex them first\";\n\t    }\n\n\t    var normals = vertices.normal;\n\t    var numNormals = normals.length;\n\t    for (var ii = 0; ii < numNormals; ii += 9) {\n\t      // pull out the 3 normals for this triangle\n\t      var nax = normals[ii + 0];\n\t      var nay = normals[ii + 1];\n\t      var naz = normals[ii + 2];\n\n\t      var nbx = normals[ii + 3];\n\t      var nby = normals[ii + 4];\n\t      var nbz = normals[ii + 5];\n\n\t      var ncx = normals[ii + 6];\n\t      var ncy = normals[ii + 7];\n\t      var ncz = normals[ii + 8];\n\n\t      // add them\n\t      var nx = nax + nbx + ncx;\n\t      var ny = nay + nby + ncy;\n\t      var nz = naz + nbz + ncz;\n\n\t      // normalize them\n\t      var length = Math.sqrt(nx * nx + ny * ny + nz * nz);\n\n\t      nx /= length;\n\t      ny /= length;\n\t      nz /= length;\n\n\t      // copy them back in\n\t      normals[ii + 0] = nx;\n\t      normals[ii + 1] = ny;\n\t      normals[ii + 2] = nz;\n\n\t      normals[ii + 3] = nx;\n\t      normals[ii + 4] = ny;\n\t      normals[ii + 5] = nz;\n\n\t      normals[ii + 6] = nx;\n\t      normals[ii + 7] = ny;\n\t      normals[ii + 8] = nz;\n\t    }\n\n\t    return vertices;\n\t  }\n\n\t  function applyFuncToV3Array(array, matrix, fn) {\n\t    var len = array.length;\n\t    var tmp = new Float32Array(3);\n\t    for (var ii = 0; ii < len; ii += 3) {\n\t      fn(matrix, [array[ii], array[ii + 1], array[ii + 2]], tmp);\n\t      array[ii] = tmp[0];\n\t      array[ii + 1] = tmp[1];\n\t      array[ii + 2] = tmp[2];\n\t    }\n\t  }\n\n\t  function transformNormal(mi, v, dst) {\n\t    dst = dst || v3.create();\n\t    var v0 = v[0];\n\t    var v1 = v[1];\n\t    var v2 = v[2];\n\n\t    dst[0] = v0 * mi[0 * 4 + 0] + v1 * mi[0 * 4 + 1] + v2 * mi[0 * 4 + 2];\n\t    dst[1] = v0 * mi[1 * 4 + 0] + v1 * mi[1 * 4 + 1] + v2 * mi[1 * 4 + 2];\n\t    dst[2] = v0 * mi[2 * 4 + 0] + v1 * mi[2 * 4 + 1] + v2 * mi[2 * 4 + 2];\n\n\t    return dst;\n\t  }\n\n\t  /**\n\t   * Reorients directions by the given matrix..\n\t   * @param {number[]|TypedArray} array The array. Assumes value floats per element.\n\t   * @param {Matrix} matrix A matrix to multiply by.\n\t   * @return {number[]|TypedArray} the same array that was passed in\n\t   * @memberOf module:twgl/primitives\n\t   */\n\t  function reorientDirections(array, matrix) {\n\t    applyFuncToV3Array(array, matrix, m4.transformDirection);\n\t    return array;\n\t  }\n\n\t  /**\n\t   * Reorients normals by the inverse-transpose of the given\n\t   * matrix..\n\t   * @param {number[]|TypedArray} array The array. Assumes value floats per element.\n\t   * @param {Matrix} matrix A matrix to multiply by.\n\t   * @return {number[]|TypedArray} the same array that was passed in\n\t   * @memberOf module:twgl/primitives\n\t   */\n\t  function reorientNormals(array, matrix) {\n\t    applyFuncToV3Array(array, m4.inverse(matrix), transformNormal);\n\t    return array;\n\t  }\n\n\t  /**\n\t   * Reorients positions by the given matrix. In other words, it\n\t   * multiplies each vertex by the given matrix.\n\t   * @param {number[]|TypedArray} array The array. Assumes value floats per element.\n\t   * @param {Matrix} matrix A matrix to multiply by.\n\t   * @return {number[]|TypedArray} the same array that was passed in\n\t   * @memberOf module:twgl/primitives\n\t   */\n\t  function reorientPositions(array, matrix) {\n\t    applyFuncToV3Array(array, matrix, m4.transformPoint);\n\t    return array;\n\t  }\n\n\t  /**\n\t   * Reorients arrays by the given matrix. Assumes arrays have\n\t   * names that contains 'pos' could be reoriented as positions,\n\t   * 'binorm' or 'tan' as directions, and 'norm' as normals.\n\t   *\n\t   * @param {Object.<string, (number[]|TypedArray)>} arrays The vertices to reorient\n\t   * @param {Matrix} matrix matrix to reorient by.\n\t   * @return {Object.<string, (number[]|TypedArray)>} same arrays that were passed in.\n\t   * @memberOf module:twgl/primitives\n\t   */\n\t  function reorientVertices(arrays, matrix) {\n\t    Object.keys(arrays).forEach(function (name) {\n\t      var array = arrays[name];\n\t      if (name.indexOf(\"pos\") >= 0) {\n\t        reorientPositions(array, matrix);\n\t      } else if (name.indexOf(\"tan\") >= 0 || name.indexOf(\"binorm\") >= 0) {\n\t        reorientDirections(array, matrix);\n\t      } else if (name.indexOf(\"norm\") >= 0) {\n\t        reorientNormals(array, matrix);\n\t      }\n\t    });\n\t    return arrays;\n\t  }\n\n\t  /**\n\t   * Creates XY quad BufferInfo\n\t   *\n\t   * The default with no parameters will return a 2x2 quad with values from -1 to +1.\n\t   * If you want a unit quad with that goes from 0 to 1 you'd call it with\n\t   *\n\t   *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0.5, 0.5);\n\t   *\n\t   * If you want a unit quad centered above 0,0 you'd call it with\n\t   *\n\t   *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0, 0.5);\n\t   *\n\t   * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n\t   * @param {number} [size] the size across the quad. Defaults to 2 which means vertices will go from -1 to +1\n\t   * @param {number} [xOffset] the amount to offset the quad in X\n\t   * @param {number} [yOffset] the amount to offset the quad in Y\n\t   * @return {Object.<string, WebGLBuffer>} the created XY Quad BufferInfo\n\t   * @memberOf module:twgl/primitives\n\t   * @function createXYQuadBufferInfo\n\t   */\n\n\t  /**\n\t   * Creates XY quad Buffers\n\t   *\n\t   * The default with no parameters will return a 2x2 quad with values from -1 to +1.\n\t   * If you want a unit quad with that goes from 0 to 1 you'd call it with\n\t   *\n\t   *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0.5, 0.5);\n\t   *\n\t   * If you want a unit quad centered above 0,0 you'd call it with\n\t   *\n\t   *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0, 0.5);\n\t   *\n\t   * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n\t   * @param {number} [size] the size across the quad. Defaults to 2 which means vertices will go from -1 to +1\n\t   * @param {number} [xOffset] the amount to offset the quad in X\n\t   * @param {number} [yOffset] the amount to offset the quad in Y\n\t   * @return {module:twgl.BufferInfo} the created XY Quad buffers\n\t   * @memberOf module:twgl/primitives\n\t   * @function createXYQuadBuffers\n\t   */\n\n\t  /**\n\t   * Creates XY quad vertices\n\t   *\n\t   * The default with no parameters will return a 2x2 quad with values from -1 to +1.\n\t   * If you want a unit quad with that goes from 0 to 1 you'd call it with\n\t   *\n\t   *     twgl.primitives.createXYQuadVertices(1, 0.5, 0.5);\n\t   *\n\t   * If you want a unit quad centered above 0,0 you'd call it with\n\t   *\n\t   *     twgl.primitives.createXYQuadVertices(1, 0, 0.5);\n\t   *\n\t   * @param {number} [size] the size across the quad. Defaults to 2 which means vertices will go from -1 to +1\n\t   * @param {number} [xOffset] the amount to offset the quad in X\n\t   * @param {number} [yOffset] the amount to offset the quad in Y\n\t   * @return {Object.<string, TypedArray> the created XY Quad vertices\n\t   * @memberOf module:twgl/primitives\n\t   */\n\t  function createXYQuadVertices(size, xOffset, yOffset) {\n\t    size = size || 2;\n\t    xOffset = xOffset || 0;\n\t    yOffset = yOffset || 0;\n\t    size *= 0.5;\n\t    return {\n\t      position: {\n\t        numComponents: 2,\n\t        data: [xOffset + -1 * size, yOffset + -1 * size, xOffset + 1 * size, yOffset + -1 * size, xOffset + -1 * size, yOffset + 1 * size, xOffset + 1 * size, yOffset + 1 * size]\n\t      },\n\t      normal: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],\n\t      texcoord: [0, 0, 1, 0, 0, 1, 1, 1],\n\t      indices: [0, 1, 2, 2, 1, 3]\n\t    };\n\t  }\n\n\t  /**\n\t   * Creates XZ plane BufferInfo.\n\t   *\n\t   * The created plane has position, normal, and texcoord data\n\t   *\n\t   * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n\t   * @param {number} [width] Width of the plane. Default = 1\n\t   * @param {number} [depth] Depth of the plane. Default = 1\n\t   * @param {number} [subdivisionsWidth] Number of steps across the plane. Default = 1\n\t   * @param {number} [subdivisionsDepth] Number of steps down the plane. Default = 1\n\t   * @param {Matrix4} [matrix] A matrix by which to multiply all the vertices.\n\t   * @return {@module:twgl.BufferInfo} The created plane BufferInfo.\n\t   * @memberOf module:twgl/primitives\n\t   * @function createPlaneBufferInfo\n\t   */\n\n\t  /**\n\t   * Creates XZ plane buffers.\n\t   *\n\t   * The created plane has position, normal, and texcoord data\n\t   *\n\t   * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n\t   * @param {number} [width] Width of the plane. Default = 1\n\t   * @param {number} [depth] Depth of the plane. Default = 1\n\t   * @param {number} [subdivisionsWidth] Number of steps across the plane. Default = 1\n\t   * @param {number} [subdivisionsDepth] Number of steps down the plane. Default = 1\n\t   * @param {Matrix4} [matrix] A matrix by which to multiply all the vertices.\n\t   * @return {Object.<string, WebGLBuffer>} The created plane buffers.\n\t   * @memberOf module:twgl/primitives\n\t   * @function createPlaneBuffers\n\t   */\n\n\t  /**\n\t   * Creates XZ plane vertices.\n\t   *\n\t   * The created plane has position, normal, and texcoord data\n\t   *\n\t   * @param {number} [width] Width of the plane. Default = 1\n\t   * @param {number} [depth] Depth of the plane. Default = 1\n\t   * @param {number} [subdivisionsWidth] Number of steps across the plane. Default = 1\n\t   * @param {number} [subdivisionsDepth] Number of steps down the plane. Default = 1\n\t   * @param {Matrix4} [matrix] A matrix by which to multiply all the vertices.\n\t   * @return {Object.<string, TypedArray>} The created plane vertices.\n\t   * @memberOf module:twgl/primitives\n\t   */\n\t  function createPlaneVertices(width, depth, subdivisionsWidth, subdivisionsDepth, matrix) {\n\t    width = width || 1;\n\t    depth = depth || 1;\n\t    subdivisionsWidth = subdivisionsWidth || 1;\n\t    subdivisionsDepth = subdivisionsDepth || 1;\n\t    matrix = matrix || m4.identity();\n\n\t    var numVertices = (subdivisionsWidth + 1) * (subdivisionsDepth + 1);\n\t    var positions = createAugmentedTypedArray(3, numVertices);\n\t    var normals = createAugmentedTypedArray(3, numVertices);\n\t    var texcoords = createAugmentedTypedArray(2, numVertices);\n\n\t    for (var z = 0; z <= subdivisionsDepth; z++) {\n\t      for (var x = 0; x <= subdivisionsWidth; x++) {\n\t        var u = x / subdivisionsWidth;\n\t        var v = z / subdivisionsDepth;\n\t        positions.push(width * u - width * 0.5, 0, depth * v - depth * 0.5);\n\t        normals.push(0, 1, 0);\n\t        texcoords.push(u, v);\n\t      }\n\t    }\n\n\t    var numVertsAcross = subdivisionsWidth + 1;\n\t    var indices = createAugmentedTypedArray(3, subdivisionsWidth * subdivisionsDepth * 2, Uint16Array);\n\n\t    for (var z = 0; z < subdivisionsDepth; z++) {\n\t      // eslint-disable-line\n\t      for (var x = 0; x < subdivisionsWidth; x++) {\n\t        // eslint-disable-line\n\t        // Make triangle 1 of quad.\n\t        indices.push((z + 0) * numVertsAcross + x, (z + 1) * numVertsAcross + x, (z + 0) * numVertsAcross + x + 1);\n\n\t        // Make triangle 2 of quad.\n\t        indices.push((z + 1) * numVertsAcross + x, (z + 1) * numVertsAcross + x + 1, (z + 0) * numVertsAcross + x + 1);\n\t      }\n\t    }\n\n\t    var arrays = reorientVertices({\n\t      position: positions,\n\t      normal: normals,\n\t      texcoord: texcoords,\n\t      indices: indices\n\t    }, matrix);\n\t    return arrays;\n\t  }\n\n\t  /**\n\t   * Creates sphere BufferInfo.\n\t   *\n\t   * The created sphere has position, normal, and texcoord data\n\t   *\n\t   * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n\t   * @param {number} radius radius of the sphere.\n\t   * @param {number} subdivisionsAxis number of steps around the sphere.\n\t   * @param {number} subdivisionsHeight number of vertically on the sphere.\n\t   * @param {number} [opt_startLatitudeInRadians] where to start the\n\t   *     top of the sphere. Default = 0.\n\t   * @param {number} [opt_endLatitudeInRadians] Where to end the\n\t   *     bottom of the sphere. Default = Math.PI.\n\t   * @param {number} [opt_startLongitudeInRadians] where to start\n\t   *     wrapping the sphere. Default = 0.\n\t   * @param {number} [opt_endLongitudeInRadians] where to end\n\t   *     wrapping the sphere. Default = 2 * Math.PI.\n\t   * @return {module:twgl.BufferInfo} The created sphere BufferInfo.\n\t   * @memberOf module:twgl/primitives\n\t   * @function createSphereBufferInfo\n\t   */\n\n\t  /**\n\t   * Creates sphere buffers.\n\t   *\n\t   * The created sphere has position, normal, and texcoord data\n\t   *\n\t   * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n\t   * @param {number} radius radius of the sphere.\n\t   * @param {number} subdivisionsAxis number of steps around the sphere.\n\t   * @param {number} subdivisionsHeight number of vertically on the sphere.\n\t   * @param {number} [opt_startLatitudeInRadians] where to start the\n\t   *     top of the sphere. Default = 0.\n\t   * @param {number} [opt_endLatitudeInRadians] Where to end the\n\t   *     bottom of the sphere. Default = Math.PI.\n\t   * @param {number} [opt_startLongitudeInRadians] where to start\n\t   *     wrapping the sphere. Default = 0.\n\t   * @param {number} [opt_endLongitudeInRadians] where to end\n\t   *     wrapping the sphere. Default = 2 * Math.PI.\n\t   * @return {Object.<string, WebGLBuffer>} The created sphere buffers.\n\t   * @memberOf module:twgl/primitives\n\t   * @function createSphereBuffers\n\t   */\n\n\t  /**\n\t   * Creates sphere vertices.\n\t   *\n\t   * The created sphere has position, normal, and texcoord data\n\t   *\n\t   * @param {number} radius radius of the sphere.\n\t   * @param {number} subdivisionsAxis number of steps around the sphere.\n\t   * @param {number} subdivisionsHeight number of vertically on the sphere.\n\t   * @param {number} [opt_startLatitudeInRadians] where to start the\n\t   *     top of the sphere. Default = 0.\n\t   * @param {number} [opt_endLatitudeInRadians] Where to end the\n\t   *     bottom of the sphere. Default = Math.PI.\n\t   * @param {number} [opt_startLongitudeInRadians] where to start\n\t   *     wrapping the sphere. Default = 0.\n\t   * @param {number} [opt_endLongitudeInRadians] where to end\n\t   *     wrapping the sphere. Default = 2 * Math.PI.\n\t   * @return {Object.<string, TypedArray>} The created sphere vertices.\n\t   * @memberOf module:twgl/primitives\n\t   */\n\t  function createSphereVertices(radius, subdivisionsAxis, subdivisionsHeight, opt_startLatitudeInRadians, opt_endLatitudeInRadians, opt_startLongitudeInRadians, opt_endLongitudeInRadians) {\n\t    if (subdivisionsAxis <= 0 || subdivisionsHeight <= 0) {\n\t      throw Error('subdivisionAxis and subdivisionHeight must be > 0');\n\t    }\n\n\t    opt_startLatitudeInRadians = opt_startLatitudeInRadians || 0;\n\t    opt_endLatitudeInRadians = opt_endLatitudeInRadians || Math.PI;\n\t    opt_startLongitudeInRadians = opt_startLongitudeInRadians || 0;\n\t    opt_endLongitudeInRadians = opt_endLongitudeInRadians || Math.PI * 2;\n\n\t    var latRange = opt_endLatitudeInRadians - opt_startLatitudeInRadians;\n\t    var longRange = opt_endLongitudeInRadians - opt_startLongitudeInRadians;\n\n\t    // We are going to generate our sphere by iterating through its\n\t    // spherical coordinates and generating 2 triangles for each quad on a\n\t    // ring of the sphere.\n\t    var numVertices = (subdivisionsAxis + 1) * (subdivisionsHeight + 1);\n\t    var positions = createAugmentedTypedArray(3, numVertices);\n\t    var normals = createAugmentedTypedArray(3, numVertices);\n\t    var texcoords = createAugmentedTypedArray(2, numVertices);\n\n\t    // Generate the individual vertices in our vertex buffer.\n\t    for (var y = 0; y <= subdivisionsHeight; y++) {\n\t      for (var x = 0; x <= subdivisionsAxis; x++) {\n\t        // Generate a vertex based on its spherical coordinates\n\t        var u = x / subdivisionsAxis;\n\t        var v = y / subdivisionsHeight;\n\t        var theta = longRange * u;\n\t        var phi = latRange * v;\n\t        var sinTheta = Math.sin(theta);\n\t        var cosTheta = Math.cos(theta);\n\t        var sinPhi = Math.sin(phi);\n\t        var cosPhi = Math.cos(phi);\n\t        var ux = cosTheta * sinPhi;\n\t        var uy = cosPhi;\n\t        var uz = sinTheta * sinPhi;\n\t        positions.push(radius * ux, radius * uy, radius * uz);\n\t        normals.push(ux, uy, uz);\n\t        texcoords.push(1 - u, v);\n\t      }\n\t    }\n\n\t    var numVertsAround = subdivisionsAxis + 1;\n\t    var indices = createAugmentedTypedArray(3, subdivisionsAxis * subdivisionsHeight * 2, Uint16Array);\n\t    for (var x = 0; x < subdivisionsAxis; x++) {\n\t      // eslint-disable-line\n\t      for (var y = 0; y < subdivisionsHeight; y++) {\n\t        // eslint-disable-line\n\t        // Make triangle 1 of quad.\n\t        indices.push((y + 0) * numVertsAround + x, (y + 0) * numVertsAround + x + 1, (y + 1) * numVertsAround + x);\n\n\t        // Make triangle 2 of quad.\n\t        indices.push((y + 1) * numVertsAround + x, (y + 0) * numVertsAround + x + 1, (y + 1) * numVertsAround + x + 1);\n\t      }\n\t    }\n\n\t    return {\n\t      position: positions,\n\t      normal: normals,\n\t      texcoord: texcoords,\n\t      indices: indices\n\t    };\n\t  }\n\n\t  /**\n\t   * Array of the indices of corners of each face of a cube.\n\t   * @type {Array.<number[]>}\n\t   */\n\t  var CUBE_FACE_INDICES = [[3, 7, 5, 1], // right\n\t  [6, 2, 0, 4], // left\n\t  [6, 7, 3, 2], // ??\n\t  [0, 1, 5, 4], // ??\n\t  [7, 6, 4, 5], // front\n\t  [2, 3, 1, 0]];\n\n\t  /**\n\t   * Creates a BufferInfo for a cube.\n\t   *\n\t   * The cube is created around the origin. (-size / 2, size / 2).\n\t   *\n\t   * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n\t   * @param {number} [size] width, height and depth of the cube.\n\t   * @return {module:twgl.BufferInfo} The created BufferInfo.\n\t   * @memberOf module:twgl/primitives\n\t   * @function createCubeBufferInfo\n\t   */\n\n\t  /**\n\t   * Creates the buffers and indices for a cube.\n\t   *\n\t   * The cube is created around the origin. (-size / 2, size / 2).\n\t   *\n\t   * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n\t   * @param {number} [size] width, height and depth of the cube.\n\t   * @return {Object.<string, WebGLBuffer>} The created buffers.\n\t   * @memberOf module:twgl/primitives\n\t   * @function createCubeBuffers\n\t   */\n\n\t  /**\n\t   * Creates the vertices and indices for a cube.\n\t   *\n\t   * The cube is created around the origin. (-size / 2, size / 2).\n\t   *\n\t   * @param {number} [size] width, height and depth of the cube.\n\t   * @return {Object.<string, TypedArray>} The created vertices.\n\t   * @memberOf module:twgl/primitives\n\t   */\n\t  function createCubeVertices(size) {\n\t    size = size || 1;\n\t    var k = size / 2;\n\n\t    var cornerVertices = [[-k, -k, -k], [+k, -k, -k], [-k, +k, -k], [+k, +k, -k], [-k, -k, +k], [+k, -k, +k], [-k, +k, +k], [+k, +k, +k]];\n\n\t    var faceNormals = [[+1, +0, +0], [-1, +0, +0], [+0, +1, +0], [+0, -1, +0], [+0, +0, +1], [+0, +0, -1]];\n\n\t    var uvCoords = [[1, 0], [0, 0], [0, 1], [1, 1]];\n\n\t    var numVertices = 6 * 4;\n\t    var positions = createAugmentedTypedArray(3, numVertices);\n\t    var normals = createAugmentedTypedArray(3, numVertices);\n\t    var texcoords = createAugmentedTypedArray(2, numVertices);\n\t    var indices = createAugmentedTypedArray(3, 6 * 2, Uint16Array);\n\n\t    for (var f = 0; f < 6; ++f) {\n\t      var faceIndices = CUBE_FACE_INDICES[f];\n\t      for (var v = 0; v < 4; ++v) {\n\t        var position = cornerVertices[faceIndices[v]];\n\t        var normal = faceNormals[f];\n\t        var uv = uvCoords[v];\n\n\t        // Each face needs all four vertices because the normals and texture\n\t        // coordinates are not all the same.\n\t        positions.push(position);\n\t        normals.push(normal);\n\t        texcoords.push(uv);\n\t      }\n\t      // Two triangles make a square face.\n\t      var offset = 4 * f;\n\t      indices.push(offset + 0, offset + 1, offset + 2);\n\t      indices.push(offset + 0, offset + 2, offset + 3);\n\t    }\n\n\t    return {\n\t      position: positions,\n\t      normal: normals,\n\t      texcoord: texcoords,\n\t      indices: indices\n\t    };\n\t  }\n\n\t  /**\n\t   * Creates a BufferInfo for a truncated cone, which is like a cylinder\n\t   * except that it has different top and bottom radii. A truncated cone\n\t   * can also be used to create cylinders and regular cones. The\n\t   * truncated cone will be created centered about the origin, with the\n\t   * y axis as its vertical axis.\n\t   *\n\t   * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n\t   * @param {number} bottomRadius Bottom radius of truncated cone.\n\t   * @param {number} topRadius Top radius of truncated cone.\n\t   * @param {number} height Height of truncated cone.\n\t   * @param {number} radialSubdivisions The number of subdivisions around the\n\t   *     truncated cone.\n\t   * @param {number} verticalSubdivisions The number of subdivisions down the\n\t   *     truncated cone.\n\t   * @param {boolean} [opt_topCap] Create top cap. Default = true.\n\t   * @param {boolean} [opt_bottomCap] Create bottom cap. Default = true.\n\t   * @return {module:twgl.BufferInfo} The created cone BufferInfo.\n\t   * @memberOf module:twgl/primitives\n\t   * @function createTruncatedConeBufferInfo\n\t   */\n\n\t  /**\n\t   * Creates buffers for a truncated cone, which is like a cylinder\n\t   * except that it has different top and bottom radii. A truncated cone\n\t   * can also be used to create cylinders and regular cones. The\n\t   * truncated cone will be created centered about the origin, with the\n\t   * y axis as its vertical axis.\n\t   *\n\t   * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n\t   * @param {number} bottomRadius Bottom radius of truncated cone.\n\t   * @param {number} topRadius Top radius of truncated cone.\n\t   * @param {number} height Height of truncated cone.\n\t   * @param {number} radialSubdivisions The number of subdivisions around the\n\t   *     truncated cone.\n\t   * @param {number} verticalSubdivisions The number of subdivisions down the\n\t   *     truncated cone.\n\t   * @param {boolean} [opt_topCap] Create top cap. Default = true.\n\t   * @param {boolean} [opt_bottomCap] Create bottom cap. Default = true.\n\t   * @return {Object.<string, WebGLBuffer>} The created cone buffers.\n\t   * @memberOf module:twgl/primitives\n\t   * @function createTruncatedConeBuffers\n\t   */\n\n\t  /**\n\t   * Creates vertices for a truncated cone, which is like a cylinder\n\t   * except that it has different top and bottom radii. A truncated cone\n\t   * can also be used to create cylinders and regular cones. The\n\t   * truncated cone will be created centered about the origin, with the\n\t   * y axis as its vertical axis. .\n\t   *\n\t   * @param {number} bottomRadius Bottom radius of truncated cone.\n\t   * @param {number} topRadius Top radius of truncated cone.\n\t   * @param {number} height Height of truncated cone.\n\t   * @param {number} radialSubdivisions The number of subdivisions around the\n\t   *     truncated cone.\n\t   * @param {number} verticalSubdivisions The number of subdivisions down the\n\t   *     truncated cone.\n\t   * @param {boolean} [opt_topCap] Create top cap. Default = true.\n\t   * @param {boolean} [opt_bottomCap] Create bottom cap. Default = true.\n\t   * @return {Object.<string, TypedArray>} The created cone vertices.\n\t   * @memberOf module:twgl/primitives\n\t   */\n\t  function createTruncatedConeVertices(bottomRadius, topRadius, height, radialSubdivisions, verticalSubdivisions, opt_topCap, opt_bottomCap) {\n\t    if (radialSubdivisions < 3) {\n\t      throw Error('radialSubdivisions must be 3 or greater');\n\t    }\n\n\t    if (verticalSubdivisions < 1) {\n\t      throw Error('verticalSubdivisions must be 1 or greater');\n\t    }\n\n\t    var topCap = opt_topCap === undefined ? true : opt_topCap;\n\t    var bottomCap = opt_bottomCap === undefined ? true : opt_bottomCap;\n\n\t    var extra = (topCap ? 2 : 0) + (bottomCap ? 2 : 0);\n\n\t    var numVertices = (radialSubdivisions + 1) * (verticalSubdivisions + 1 + extra);\n\t    var positions = createAugmentedTypedArray(3, numVertices);\n\t    var normals = createAugmentedTypedArray(3, numVertices);\n\t    var texcoords = createAugmentedTypedArray(2, numVertices);\n\t    var indices = createAugmentedTypedArray(3, radialSubdivisions * (verticalSubdivisions + extra) * 2, Uint16Array);\n\n\t    var vertsAroundEdge = radialSubdivisions + 1;\n\n\t    // The slant of the cone is constant across its surface\n\t    var slant = Math.atan2(bottomRadius - topRadius, height);\n\t    var cosSlant = Math.cos(slant);\n\t    var sinSlant = Math.sin(slant);\n\n\t    var start = topCap ? -2 : 0;\n\t    var end = verticalSubdivisions + (bottomCap ? 2 : 0);\n\n\t    for (var yy = start; yy <= end; ++yy) {\n\t      var v = yy / verticalSubdivisions;\n\t      var y = height * v;\n\t      var ringRadius;\n\t      if (yy < 0) {\n\t        y = 0;\n\t        v = 1;\n\t        ringRadius = bottomRadius;\n\t      } else if (yy > verticalSubdivisions) {\n\t        y = height;\n\t        v = 1;\n\t        ringRadius = topRadius;\n\t      } else {\n\t        ringRadius = bottomRadius + (topRadius - bottomRadius) * (yy / verticalSubdivisions);\n\t      }\n\t      if (yy === -2 || yy === verticalSubdivisions + 2) {\n\t        ringRadius = 0;\n\t        v = 0;\n\t      }\n\t      y -= height / 2;\n\t      for (var ii = 0; ii < vertsAroundEdge; ++ii) {\n\t        var sin = Math.sin(ii * Math.PI * 2 / radialSubdivisions);\n\t        var cos = Math.cos(ii * Math.PI * 2 / radialSubdivisions);\n\t        positions.push(sin * ringRadius, y, cos * ringRadius);\n\t        normals.push(yy < 0 || yy > verticalSubdivisions ? 0 : sin * cosSlant, yy < 0 ? -1 : yy > verticalSubdivisions ? 1 : sinSlant, yy < 0 || yy > verticalSubdivisions ? 0 : cos * cosSlant);\n\t        texcoords.push(ii / radialSubdivisions, 1 - v);\n\t      }\n\t    }\n\n\t    for (var yy = 0; yy < verticalSubdivisions + extra; ++yy) {\n\t      // eslint-disable-line\n\t      for (var ii = 0; ii < radialSubdivisions; ++ii) {\n\t        // eslint-disable-line\n\t        indices.push(vertsAroundEdge * (yy + 0) + 0 + ii, vertsAroundEdge * (yy + 0) + 1 + ii, vertsAroundEdge * (yy + 1) + 1 + ii);\n\t        indices.push(vertsAroundEdge * (yy + 0) + 0 + ii, vertsAroundEdge * (yy + 1) + 1 + ii, vertsAroundEdge * (yy + 1) + 0 + ii);\n\t      }\n\t    }\n\n\t    return {\n\t      position: positions,\n\t      normal: normals,\n\t      texcoord: texcoords,\n\t      indices: indices\n\t    };\n\t  }\n\n\t  /**\n\t   * Expands RLE data\n\t   * @param {number[]} rleData data in format of run-length, x, y, z, run-length, x, y, z\n\t   * @param {number[]} [padding] value to add each entry with.\n\t   * @return {number[]} the expanded rleData\n\t   */\n\t  function expandRLEData(rleData, padding) {\n\t    padding = padding || [];\n\t    var data = [];\n\t    for (var ii = 0; ii < rleData.length; ii += 4) {\n\t      var runLength = rleData[ii];\n\t      var element = rleData.slice(ii + 1, ii + 4);\n\t      element.push.apply(element, padding);\n\t      for (var jj = 0; jj < runLength; ++jj) {\n\t        data.push.apply(data, element);\n\t      }\n\t    }\n\t    return data;\n\t  }\n\n\t  /**\n\t   * Creates 3D 'F' BufferInfo.\n\t   * An 'F' is useful because you can easily tell which way it is oriented.\n\t   * The created 'F' has position, normal, texcoord, and color buffers.\n\t   *\n\t   * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n\t   * @return {module:twgl.BufferInfo} The created BufferInfo.\n\t   * @memberOf module:twgl/primitives\n\t   * @function create3DFBufferInfo\n\t   */\n\n\t  /**\n\t   * Creates 3D 'F' buffers.\n\t   * An 'F' is useful because you can easily tell which way it is oriented.\n\t   * The created 'F' has position, normal, texcoord, and color buffers.\n\t   *\n\t   * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n\t   * @return {Object.<string, WebGLBuffer>} The created buffers.\n\t   * @memberOf module:twgl/primitives\n\t   * @function create3DFBuffers\n\t   */\n\n\t  /**\n\t   * Creates 3D 'F' vertices.\n\t   * An 'F' is useful because you can easily tell which way it is oriented.\n\t   * The created 'F' has position, normal, texcoord, and color arrays.\n\t   *\n\t   * @return {Object.<string, TypedArray>} The created vertices.\n\t   * @memberOf module:twgl/primitives\n\t   */\n\t  function create3DFVertices() {\n\n\t    var positions = [\n\t    // left column front\n\t    0, 0, 0, 0, 150, 0, 30, 0, 0, 0, 150, 0, 30, 150, 0, 30, 0, 0,\n\n\t    // top rung front\n\t    30, 0, 0, 30, 30, 0, 100, 0, 0, 30, 30, 0, 100, 30, 0, 100, 0, 0,\n\n\t    // middle rung front\n\t    30, 60, 0, 30, 90, 0, 67, 60, 0, 30, 90, 0, 67, 90, 0, 67, 60, 0,\n\n\t    // left column back\n\t    0, 0, 30, 30, 0, 30, 0, 150, 30, 0, 150, 30, 30, 0, 30, 30, 150, 30,\n\n\t    // top rung back\n\t    30, 0, 30, 100, 0, 30, 30, 30, 30, 30, 30, 30, 100, 0, 30, 100, 30, 30,\n\n\t    // middle rung back\n\t    30, 60, 30, 67, 60, 30, 30, 90, 30, 30, 90, 30, 67, 60, 30, 67, 90, 30,\n\n\t    // top\n\t    0, 0, 0, 100, 0, 0, 100, 0, 30, 0, 0, 0, 100, 0, 30, 0, 0, 30,\n\n\t    // top rung front\n\t    100, 0, 0, 100, 30, 0, 100, 30, 30, 100, 0, 0, 100, 30, 30, 100, 0, 30,\n\n\t    // under top rung\n\t    30, 30, 0, 30, 30, 30, 100, 30, 30, 30, 30, 0, 100, 30, 30, 100, 30, 0,\n\n\t    // between top rung and middle\n\t    30, 30, 0, 30, 60, 30, 30, 30, 30, 30, 30, 0, 30, 60, 0, 30, 60, 30,\n\n\t    // top of middle rung\n\t    30, 60, 0, 67, 60, 30, 30, 60, 30, 30, 60, 0, 67, 60, 0, 67, 60, 30,\n\n\t    // front of middle rung\n\t    67, 60, 0, 67, 90, 30, 67, 60, 30, 67, 60, 0, 67, 90, 0, 67, 90, 30,\n\n\t    // bottom of middle rung.\n\t    30, 90, 0, 30, 90, 30, 67, 90, 30, 30, 90, 0, 67, 90, 30, 67, 90, 0,\n\n\t    // front of bottom\n\t    30, 90, 0, 30, 150, 30, 30, 90, 30, 30, 90, 0, 30, 150, 0, 30, 150, 30,\n\n\t    // bottom\n\t    0, 150, 0, 0, 150, 30, 30, 150, 30, 0, 150, 0, 30, 150, 30, 30, 150, 0,\n\n\t    // left side\n\t    0, 0, 0, 0, 0, 30, 0, 150, 30, 0, 0, 0, 0, 150, 30, 0, 150, 0];\n\n\t    var texcoords = [\n\t    // left column front\n\t    0.22, 0.19, 0.22, 0.79, 0.34, 0.19, 0.22, 0.79, 0.34, 0.79, 0.34, 0.19,\n\n\t    // top rung front\n\t    0.34, 0.19, 0.34, 0.31, 0.62, 0.19, 0.34, 0.31, 0.62, 0.31, 0.62, 0.19,\n\n\t    // middle rung front\n\t    0.34, 0.43, 0.34, 0.55, 0.49, 0.43, 0.34, 0.55, 0.49, 0.55, 0.49, 0.43,\n\n\t    // left column back\n\t    0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1,\n\n\t    // top rung back\n\t    0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1,\n\n\t    // middle rung back\n\t    0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1,\n\n\t    // top\n\t    0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1,\n\n\t    // top rung front\n\t    0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1,\n\n\t    // under top rung\n\t    0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0,\n\n\t    // between top rung and middle\n\t    0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1,\n\n\t    // top of middle rung\n\t    0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1,\n\n\t    // front of middle rung\n\t    0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1,\n\n\t    // bottom of middle rung.\n\t    0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0,\n\n\t    // front of bottom\n\t    0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1,\n\n\t    // bottom\n\t    0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0,\n\n\t    // left side\n\t    0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0];\n\n\t    var normals = expandRLEData([\n\t    // left column front\n\t    // top rung front\n\t    // middle rung front\n\t    18, 0, 0, 1,\n\n\t    // left column back\n\t    // top rung back\n\t    // middle rung back\n\t    18, 0, 0, -1,\n\n\t    // top\n\t    6, 0, 1, 0,\n\n\t    // top rung front\n\t    6, 1, 0, 0,\n\n\t    // under top rung\n\t    6, 0, -1, 0,\n\n\t    // between top rung and middle\n\t    6, 1, 0, 0,\n\n\t    // top of middle rung\n\t    6, 0, 1, 0,\n\n\t    // front of middle rung\n\t    6, 1, 0, 0,\n\n\t    // bottom of middle rung.\n\t    6, 0, -1, 0,\n\n\t    // front of bottom\n\t    6, 1, 0, 0,\n\n\t    // bottom\n\t    6, 0, -1, 0,\n\n\t    // left side\n\t    6, -1, 0, 0]);\n\n\t    var colors = expandRLEData([\n\t    // left column front\n\t    // top rung front\n\t    // middle rung front\n\t    18, 200, 70, 120,\n\n\t    // left column back\n\t    // top rung back\n\t    // middle rung back\n\t    18, 80, 70, 200,\n\n\t    // top\n\t    6, 70, 200, 210,\n\n\t    // top rung front\n\t    6, 200, 200, 70,\n\n\t    // under top rung\n\t    6, 210, 100, 70,\n\n\t    // between top rung and middle\n\t    6, 210, 160, 70,\n\n\t    // top of middle rung\n\t    6, 70, 180, 210,\n\n\t    // front of middle rung\n\t    6, 100, 70, 210,\n\n\t    // bottom of middle rung.\n\t    6, 76, 210, 100,\n\n\t    // front of bottom\n\t    6, 140, 210, 80,\n\n\t    // bottom\n\t    6, 90, 130, 110,\n\n\t    // left side\n\t    6, 160, 160, 220], [255]);\n\n\t    var numVerts = positions.length / 3;\n\n\t    var arrays = {\n\t      position: createAugmentedTypedArray(3, numVerts),\n\t      texcoord: createAugmentedTypedArray(2, numVerts),\n\t      normal: createAugmentedTypedArray(3, numVerts),\n\t      color: createAugmentedTypedArray(4, numVerts, Uint8Array),\n\t      indices: createAugmentedTypedArray(3, numVerts / 3, Uint16Array)\n\t    };\n\n\t    arrays.position.push(positions);\n\t    arrays.texcoord.push(texcoords);\n\t    arrays.normal.push(normals);\n\t    arrays.color.push(colors);\n\n\t    for (var ii = 0; ii < numVerts; ++ii) {\n\t      arrays.indices.push(ii);\n\t    }\n\n\t    return arrays;\n\t  }\n\n\t  /**\n\t   * Creates cresent BufferInfo.\n\t   *\n\t   * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n\t   * @param {number} verticalRadius The vertical radius of the cresent.\n\t   * @param {number} outerRadius The outer radius of the cresent.\n\t   * @param {number} innerRadius The inner radius of the cresent.\n\t   * @param {number} thickness The thickness of the cresent.\n\t   * @param {number} subdivisionsDown number of steps around the cresent.\n\t   * @param {number} subdivisionsThick number of vertically on the cresent.\n\t   * @param {number} [startOffset] Where to start arc. Default 0.\n\t   * @param {number} [endOffset] Where to end arg. Default 1.\n\t   * @return {module:twgl.BufferInfo} The created BufferInfo.\n\t   * @memberOf module:twgl/primitives\n\t   * @function createCresentBufferInfo\n\t   */\n\n\t  /**\n\t   * Creates cresent buffers.\n\t   *\n\t   * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n\t   * @param {number} verticalRadius The vertical radius of the cresent.\n\t   * @param {number} outerRadius The outer radius of the cresent.\n\t   * @param {number} innerRadius The inner radius of the cresent.\n\t   * @param {number} thickness The thickness of the cresent.\n\t   * @param {number} subdivisionsDown number of steps around the cresent.\n\t   * @param {number} subdivisionsThick number of vertically on the cresent.\n\t   * @param {number} [startOffset] Where to start arc. Default 0.\n\t   * @param {number} [endOffset] Where to end arg. Default 1.\n\t   * @return {Object.<string, WebGLBuffer>} The created buffers.\n\t   * @memberOf module:twgl/primitives\n\t   * @function createCresentBuffers\n\t   */\n\n\t  /**\n\t   * Creates cresent vertices.\n\t   *\n\t   * @param {number} verticalRadius The vertical radius of the cresent.\n\t   * @param {number} outerRadius The outer radius of the cresent.\n\t   * @param {number} innerRadius The inner radius of the cresent.\n\t   * @param {number} thickness The thickness of the cresent.\n\t   * @param {number} subdivisionsDown number of steps around the cresent.\n\t   * @param {number} subdivisionsThick number of vertically on the cresent.\n\t   * @param {number} [startOffset] Where to start arc. Default 0.\n\t   * @param {number} [endOffset] Where to end arg. Default 1.\n\t   * @return {Object.<string, TypedArray>} The created vertices.\n\t   * @memberOf module:twgl/primitives\n\t   */\n\t  function createCresentVertices(verticalRadius, outerRadius, innerRadius, thickness, subdivisionsDown, startOffset, endOffset) {\n\t    if (subdivisionsDown <= 0) {\n\t      throw Error('subdivisionDown must be > 0');\n\t    }\n\n\t    startOffset = startOffset || 0;\n\t    endOffset = endOffset || 1;\n\n\t    var subdivisionsThick = 2;\n\n\t    var offsetRange = endOffset - startOffset;\n\t    var numVertices = (subdivisionsDown + 1) * 2 * (2 + subdivisionsThick);\n\t    var positions = createAugmentedTypedArray(3, numVertices);\n\t    var normals = createAugmentedTypedArray(3, numVertices);\n\t    var texcoords = createAugmentedTypedArray(2, numVertices);\n\n\t    function lerp(a, b, s) {\n\t      return a + (b - a) * s;\n\t    }\n\n\t    function createArc(arcRadius, x, normalMult, normalAdd, uMult, uAdd) {\n\t      for (var z = 0; z <= subdivisionsDown; z++) {\n\t        var uBack = x / (subdivisionsThick - 1);\n\t        var v = z / subdivisionsDown;\n\t        var xBack = (uBack - 0.5) * 2;\n\t        var angle = (startOffset + v * offsetRange) * Math.PI;\n\t        var s = Math.sin(angle);\n\t        var c = Math.cos(angle);\n\t        var radius = lerp(verticalRadius, arcRadius, s);\n\t        var px = xBack * thickness;\n\t        var py = c * verticalRadius;\n\t        var pz = s * radius;\n\t        positions.push(px, py, pz);\n\t        var n = v3.add(v3.multiply([0, s, c], normalMult), normalAdd);\n\t        normals.push(n);\n\t        texcoords.push(uBack * uMult + uAdd, v);\n\t      }\n\t    }\n\n\t    // Generate the individual vertices in our vertex buffer.\n\t    for (var x = 0; x < subdivisionsThick; x++) {\n\t      var uBack = (x / (subdivisionsThick - 1) - 0.5) * 2;\n\t      createArc(outerRadius, x, [1, 1, 1], [0, 0, 0], 1, 0);\n\t      createArc(outerRadius, x, [0, 0, 0], [uBack, 0, 0], 0, 0);\n\t      createArc(innerRadius, x, [1, 1, 1], [0, 0, 0], 1, 0);\n\t      createArc(innerRadius, x, [0, 0, 0], [uBack, 0, 0], 0, 1);\n\t    }\n\n\t    // Do outer surface.\n\t    var indices = createAugmentedTypedArray(3, subdivisionsDown * 2 * (2 + subdivisionsThick), Uint16Array);\n\n\t    function createSurface(leftArcOffset, rightArcOffset) {\n\t      for (var z = 0; z < subdivisionsDown; ++z) {\n\t        // Make triangle 1 of quad.\n\t        indices.push(leftArcOffset + z + 0, leftArcOffset + z + 1, rightArcOffset + z + 0);\n\n\t        // Make triangle 2 of quad.\n\t        indices.push(leftArcOffset + z + 1, rightArcOffset + z + 1, rightArcOffset + z + 0);\n\t      }\n\t    }\n\n\t    var numVerticesDown = subdivisionsDown + 1;\n\t    // front\n\t    createSurface(numVerticesDown * 0, numVerticesDown * 4);\n\t    // right\n\t    createSurface(numVerticesDown * 5, numVerticesDown * 7);\n\t    // back\n\t    createSurface(numVerticesDown * 6, numVerticesDown * 2);\n\t    // left\n\t    createSurface(numVerticesDown * 3, numVerticesDown * 1);\n\n\t    return {\n\t      position: positions,\n\t      normal: normals,\n\t      texcoord: texcoords,\n\t      indices: indices\n\t    };\n\t  }\n\n\t  /**\n\t   * Creates cylinder BufferInfo. The cylinder will be created around the origin\n\t   * along the y-axis.\n\t   *\n\t   * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n\t   * @param {number} radius Radius of cylinder.\n\t   * @param {number} height Height of cylinder.\n\t   * @param {number} radialSubdivisions The number of subdivisions around the cylinder.\n\t   * @param {number} verticalSubdivisions The number of subdivisions down the cylinder.\n\t   * @param {boolean} [topCap] Create top cap. Default = true.\n\t   * @param {boolean} [bottomCap] Create bottom cap. Default = true.\n\t   * @return {module:twgl.BufferInfo} The created BufferInfo.\n\t   * @memberOf module:twgl/primitives\n\t   * @function createCylinderBufferInfo\n\t   */\n\n\t  /**\n\t   * Creates cylinder buffers. The cylinder will be created around the origin\n\t   * along the y-axis.\n\t   *\n\t   * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n\t   * @param {number} radius Radius of cylinder.\n\t   * @param {number} height Height of cylinder.\n\t   * @param {number} radialSubdivisions The number of subdivisions around the cylinder.\n\t   * @param {number} verticalSubdivisions The number of subdivisions down the cylinder.\n\t   * @param {boolean} [topCap] Create top cap. Default = true.\n\t   * @param {boolean} [bottomCap] Create bottom cap. Default = true.\n\t   * @return {Object.<string, WebGLBuffer>} The created buffers.\n\t   * @memberOf module:twgl/primitives\n\t   * @function createCylinderBuffers\n\t   */\n\n\t  /**\n\t   * Creates cylinder vertices. The cylinder will be created around the origin\n\t   * along the y-axis.\n\t   *\n\t   * @param {number} radius Radius of cylinder.\n\t   * @param {number} height Height of cylinder.\n\t   * @param {number} radialSubdivisions The number of subdivisions around the cylinder.\n\t   * @param {number} verticalSubdivisions The number of subdivisions down the cylinder.\n\t   * @param {boolean} [topCap] Create top cap. Default = true.\n\t   * @param {boolean} [bottomCap] Create bottom cap. Default = true.\n\t   * @return {Object.<string, TypedArray>} The created vertices.\n\t   * @memberOf module:twgl/primitives\n\t   */\n\t  function createCylinderVertices(radius, height, radialSubdivisions, verticalSubdivisions, topCap, bottomCap) {\n\t    return createTruncatedConeVertices(radius, radius, height, radialSubdivisions, verticalSubdivisions, topCap, bottomCap);\n\t  }\n\n\t  /**\n\t   * Creates BufferInfo for a torus\n\t   *\n\t   * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n\t   * @param {number} radius radius of center of torus circle.\n\t   * @param {number} thickness radius of torus ring.\n\t   * @param {number} radialSubdivisions The number of subdivisions around the torus.\n\t   * @param {number} bodySubdivisions The number of subdivisions around the body torus.\n\t   * @param {boolean} [startAngle] start angle in radians. Default = 0.\n\t   * @param {boolean} [endAngle] end angle in radians. Default = Math.PI * 2.\n\t   * @return {module:twgl.BufferInfo} The created BufferInfo.\n\t   * @memberOf module:twgl/primitives\n\t   * @function createTorusBufferInfo\n\t   */\n\n\t  /**\n\t   * Creates buffers for a torus\n\t   *\n\t   * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n\t   * @param {number} radius radius of center of torus circle.\n\t   * @param {number} thickness radius of torus ring.\n\t   * @param {number} radialSubdivisions The number of subdivisions around the torus.\n\t   * @param {number} bodySubdivisions The number of subdivisions around the body torus.\n\t   * @param {boolean} [startAngle] start angle in radians. Default = 0.\n\t   * @param {boolean} [endAngle] end angle in radians. Default = Math.PI * 2.\n\t   * @return {Object.<string, WebGLBuffer>} The created buffers.\n\t   * @memberOf module:twgl/primitives\n\t   * @function createTorusBuffers\n\t   */\n\n\t  /**\n\t   * Creates vertices for a torus\n\t   *\n\t   * @param {number} radius radius of center of torus circle.\n\t   * @param {number} thickness radius of torus ring.\n\t   * @param {number} radialSubdivisions The number of subdivisions around the torus.\n\t   * @param {number} bodySubdivisions The number of subdivisions around the body torus.\n\t   * @param {boolean} [startAngle] start angle in radians. Default = 0.\n\t   * @param {boolean} [endAngle] end angle in radians. Default = Math.PI * 2.\n\t   * @return {Object.<string, TypedArray>} The created vertices.\n\t   * @memberOf module:twgl/primitives\n\t   */\n\t  function createTorusVertices(radius, thickness, radialSubdivisions, bodySubdivisions, startAngle, endAngle) {\n\t    if (radialSubdivisions < 3) {\n\t      throw Error('radialSubdivisions must be 3 or greater');\n\t    }\n\n\t    if (bodySubdivisions < 3) {\n\t      throw Error('verticalSubdivisions must be 3 or greater');\n\t    }\n\n\t    startAngle = startAngle || 0;\n\t    endAngle = endAngle || Math.PI * 2;\n\t    var range = endAngle - startAngle;\n\n\t    var radialParts = radialSubdivisions + 1;\n\t    var bodyParts = bodySubdivisions + 1;\n\t    var numVertices = radialParts * bodyParts;\n\t    var positions = createAugmentedTypedArray(3, numVertices);\n\t    var normals = createAugmentedTypedArray(3, numVertices);\n\t    var texcoords = createAugmentedTypedArray(2, numVertices);\n\t    var indices = createAugmentedTypedArray(3, radialSubdivisions * bodySubdivisions * 2, Uint16Array);\n\n\t    for (var slice = 0; slice < bodyParts; ++slice) {\n\t      var v = slice / bodySubdivisions;\n\t      var sliceAngle = v * Math.PI * 2;\n\t      var sliceSin = Math.sin(sliceAngle);\n\t      var ringRadius = radius + sliceSin * thickness;\n\t      var ny = Math.cos(sliceAngle);\n\t      var y = ny * thickness;\n\t      for (var ring = 0; ring < radialParts; ++ring) {\n\t        var u = ring / radialSubdivisions;\n\t        var ringAngle = startAngle + u * range;\n\t        var xSin = Math.sin(ringAngle);\n\t        var zCos = Math.cos(ringAngle);\n\t        var x = xSin * ringRadius;\n\t        var z = zCos * ringRadius;\n\t        var nx = xSin * sliceSin;\n\t        var nz = zCos * sliceSin;\n\t        positions.push(x, y, z);\n\t        normals.push(nx, ny, nz);\n\t        texcoords.push(u, 1 - v);\n\t      }\n\t    }\n\n\t    for (var slice = 0; slice < bodySubdivisions; ++slice) {\n\t      // eslint-disable-line\n\t      for (var ring = 0; ring < radialSubdivisions; ++ring) {\n\t        // eslint-disable-line\n\t        var nextRingIndex = 1 + ring;\n\t        var nextSliceIndex = 1 + slice;\n\t        indices.push(radialParts * slice + ring, radialParts * nextSliceIndex + ring, radialParts * slice + nextRingIndex);\n\t        indices.push(radialParts * nextSliceIndex + ring, radialParts * nextSliceIndex + nextRingIndex, radialParts * slice + nextRingIndex);\n\t      }\n\t    }\n\n\t    return {\n\t      position: positions,\n\t      normal: normals,\n\t      texcoord: texcoords,\n\t      indices: indices\n\t    };\n\t  }\n\n\t  /**\n\t   * Creates a disc BufferInfo. The disc will be in the xz plane, centered at\n\t   * the origin. When creating, at least 3 divisions, or pie\n\t   * pieces, need to be specified, otherwise the triangles making\n\t   * up the disc will be degenerate. You can also specify the\n\t   * number of radial pieces `stacks`. A value of 1 for\n\t   * stacks will give you a simple disc of pie pieces.  If you\n\t   * want to create an annulus you can set `innerRadius` to a\n\t   * value > 0. Finally, `stackPower` allows you to have the widths\n\t   * increase or decrease as you move away from the center. This\n\t   * is particularly useful when using the disc as a ground plane\n\t   * with a fixed camera such that you don't need the resolution\n\t   * of small triangles near the perimeter. For example, a value\n\t   * of 2 will produce stacks whose ouside radius increases with\n\t   * the square of the stack index. A value of 1 will give uniform\n\t   * stacks.\n\t   *\n\t   * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n\t   * @param {number} radius Radius of the ground plane.\n\t   * @param {number} divisions Number of triangles in the ground plane (at least 3).\n\t   * @param {number} [stacks] Number of radial divisions (default=1).\n\t   * @param {number} [innerRadius] Default 0.\n\t   * @param {number} [stackPower] Power to raise stack size to for decreasing width.\n\t   * @return {module:twgl.BufferInfo} The created BufferInfo.\n\t   * @memberOf module:twgl/primitives\n\t   * @function createDiscBufferInfo\n\t   */\n\n\t  /**\n\t   * Creates disc buffers. The disc will be in the xz plane, centered at\n\t   * the origin. When creating, at least 3 divisions, or pie\n\t   * pieces, need to be specified, otherwise the triangles making\n\t   * up the disc will be degenerate. You can also specify the\n\t   * number of radial pieces `stacks`. A value of 1 for\n\t   * stacks will give you a simple disc of pie pieces.  If you\n\t   * want to create an annulus you can set `innerRadius` to a\n\t   * value > 0. Finally, `stackPower` allows you to have the widths\n\t   * increase or decrease as you move away from the center. This\n\t   * is particularly useful when using the disc as a ground plane\n\t   * with a fixed camera such that you don't need the resolution\n\t   * of small triangles near the perimeter. For example, a value\n\t   * of 2 will produce stacks whose ouside radius increases with\n\t   * the square of the stack index. A value of 1 will give uniform\n\t   * stacks.\n\t   *\n\t   * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n\t   * @param {number} radius Radius of the ground plane.\n\t   * @param {number} divisions Number of triangles in the ground plane (at least 3).\n\t   * @param {number} [stacks] Number of radial divisions (default=1).\n\t   * @param {number} [innerRadius] Default 0.\n\t   * @param {number} [stackPower] Power to raise stack size to for decreasing width.\n\t   * @return {Object.<string, WebGLBuffer>} The created buffers.\n\t   * @memberOf module:twgl/primitives\n\t   * @function createDiscBuffers\n\t   */\n\n\t  /**\n\t   * Creates disc vertices. The disc will be in the xz plane, centered at\n\t   * the origin. When creating, at least 3 divisions, or pie\n\t   * pieces, need to be specified, otherwise the triangles making\n\t   * up the disc will be degenerate. You can also specify the\n\t   * number of radial pieces `stacks`. A value of 1 for\n\t   * stacks will give you a simple disc of pie pieces.  If you\n\t   * want to create an annulus you can set `innerRadius` to a\n\t   * value > 0. Finally, `stackPower` allows you to have the widths\n\t   * increase or decrease as you move away from the center. This\n\t   * is particularly useful when using the disc as a ground plane\n\t   * with a fixed camera such that you don't need the resolution\n\t   * of small triangles near the perimeter. For example, a value\n\t   * of 2 will produce stacks whose ouside radius increases with\n\t   * the square of the stack index. A value of 1 will give uniform\n\t   * stacks.\n\t   *\n\t   * @param {number} radius Radius of the ground plane.\n\t   * @param {number} divisions Number of triangles in the ground plane (at least 3).\n\t   * @param {number} [stacks] Number of radial divisions (default=1).\n\t   * @param {number} [innerRadius] Default 0.\n\t   * @param {number} [stackPower] Power to raise stack size to for decreasing width.\n\t   * @return {Object.<string, TypedArray>} The created vertices.\n\t   * @memberOf module:twgl/primitives\n\t   */\n\t  function createDiscVertices(radius, divisions, stacks, innerRadius, stackPower) {\n\t    if (divisions < 3) {\n\t      throw Error('divisions must be at least 3');\n\t    }\n\n\t    stacks = stacks ? stacks : 1;\n\t    stackPower = stackPower ? stackPower : 1;\n\t    innerRadius = innerRadius ? innerRadius : 0;\n\n\t    // Note: We don't share the center vertex because that would\n\t    // mess up texture coordinates.\n\t    var numVertices = (divisions + 1) * (stacks + 1);\n\n\t    var positions = createAugmentedTypedArray(3, numVertices);\n\t    var normals = createAugmentedTypedArray(3, numVertices);\n\t    var texcoords = createAugmentedTypedArray(2, numVertices);\n\t    var indices = createAugmentedTypedArray(3, stacks * divisions * 2, Uint16Array);\n\n\t    var firstIndex = 0;\n\t    var radiusSpan = radius - innerRadius;\n\t    var pointsPerStack = divisions + 1;\n\n\t    // Build the disk one stack at a time.\n\t    for (var stack = 0; stack <= stacks; ++stack) {\n\t      var stackRadius = innerRadius + radiusSpan * Math.pow(stack / stacks, stackPower);\n\n\t      for (var i = 0; i <= divisions; ++i) {\n\t        var theta = 2.0 * Math.PI * i / divisions;\n\t        var x = stackRadius * Math.cos(theta);\n\t        var z = stackRadius * Math.sin(theta);\n\n\t        positions.push(x, 0, z);\n\t        normals.push(0, 1, 0);\n\t        texcoords.push(1 - i / divisions, stack / stacks);\n\t        if (stack > 0 && i !== divisions) {\n\t          // a, b, c and d are the indices of the vertices of a quad.  unless\n\t          // the current stack is the one closest to the center, in which case\n\t          // the vertices a and b connect to the center vertex.\n\t          var a = firstIndex + (i + 1);\n\t          var b = firstIndex + i;\n\t          var c = firstIndex + i - pointsPerStack;\n\t          var d = firstIndex + (i + 1) - pointsPerStack;\n\n\t          // Make a quad of the vertices a, b, c, d.\n\t          indices.push(a, b, c);\n\t          indices.push(a, c, d);\n\t        }\n\t      }\n\n\t      firstIndex += divisions + 1;\n\t    }\n\n\t    return {\n\t      position: positions,\n\t      normal: normals,\n\t      texcoord: texcoords,\n\t      indices: indices\n\t    };\n\t  }\n\n\t  /**\n\t   * creates a random integer between 0 and range - 1 inclusive.\n\t   * @param {number} range\n\t   * @return {number} random value between 0 and range - 1 inclusive.\n\t   */\n\t  function randInt(range) {\n\t    return Math.random() * range | 0;\n\t  }\n\n\t  /**\n\t   * Used to supply random colors\n\t   * @callback RandomColorFunc\n\t   * @param {number} ndx index of triangle/quad if unindexed or index of vertex if indexed\n\t   * @param {number} channel 0 = red, 1 = green, 2 = blue, 3 = alpha\n\t   * @return {number} a number from 0 to 255\n\t   * @memberOf module:twgl/primitives\n\t   */\n\n\t  /**\n\t   * @typedef {Object} RandomVerticesOptions\n\t   * @property {number} [vertsPerColor] Defaults to 3 for non-indexed vertices\n\t   * @property {module:twgl/primitives.RandomColorFunc} [rand] A function to generate random numbers\n\t   * @memberOf module:twgl/primitives\n\t   */\n\n\t  /**\n\t   * Creates an augmentedTypedArray of random vertex colors.\n\t   * If the vertices are indexed (have an indices array) then will\n\t   * just make random colors. Otherwise assumes they are triangles\n\t   * and makes one random color for every 3 vertices.\n\t   * @param {Object.<string, augmentedTypedArray>} vertices Vertices as returned from one of the createXXXVertices functions.\n\t   * @param {module:twgl/primitives.RandomVerticesOptions} [options] options.\n\t   * @return {Object.<string, augmentedTypedArray>} same vertices as passed in with `color` added.\n\t   * @memberOf module:twgl/primitives\n\t   */\n\t  function makeRandomVertexColors(vertices, options) {\n\t    options = options || {};\n\t    var numElements = vertices.position.numElements;\n\t    var vcolors = createAugmentedTypedArray(4, numElements, Uint8Array);\n\t    var rand = options.rand || function (ndx, channel) {\n\t      return channel < 3 ? randInt(256) : 255;\n\t    };\n\t    vertices.color = vcolors;\n\t    if (vertices.indices) {\n\t      // just make random colors if index\n\t      for (var ii = 0; ii < numElements; ++ii) {\n\t        vcolors.push(rand(ii, 0), rand(ii, 1), rand(ii, 2), rand(ii, 3));\n\t      }\n\t    } else {\n\t      // make random colors per triangle\n\t      var numVertsPerColor = options.vertsPerColor || 3;\n\t      var numSets = numElements / numVertsPerColor;\n\t      for (var ii = 0; ii < numSets; ++ii) {\n\t        // eslint-disable-line\n\t        var color = [rand(ii, 0), rand(ii, 1), rand(ii, 2), rand(ii, 3)];\n\t        for (var jj = 0; jj < numVertsPerColor; ++jj) {\n\t          vcolors.push(color);\n\t        }\n\t      }\n\t    }\n\t    return vertices;\n\t  }\n\n\t  /**\n\t   * creates a function that calls fn to create vertices and then\n\t   * creates a buffers for them\n\t   */\n\t  function createBufferFunc(fn) {\n\t    return function (gl) {\n\t      var arrays = fn.apply(this, Array.prototype.slice.call(arguments, 1));\n\t      return attributes.createBuffersFromArrays(gl, arrays);\n\t    };\n\t  }\n\n\t  /**\n\t   * creates a function that calls fn to create vertices and then\n\t   * creates a bufferInfo object for them\n\t   */\n\t  function createBufferInfoFunc(fn) {\n\t    return function (gl) {\n\t      var arrays = fn.apply(null, Array.prototype.slice.call(arguments, 1));\n\t      return attributes.createBufferInfoFromArrays(gl, arrays);\n\t    };\n\t  }\n\n\t  var arraySpecPropertyNames = [\"numComponents\", \"size\", \"type\", \"normalize\", \"stride\", \"offset\", \"attrib\", \"name\", \"attribName\"];\n\n\t  /**\n\t   * Copy elements from one array to another\n\t   *\n\t   * @param {Array|TypedArray} src source array\n\t   * @param {Array|TypedArray} dst dest array\n\t   * @param {number} dstNdx index in dest to copy src\n\t   * @param {number} [offset] offset to add to copied values\n\t   */\n\t  function copyElements(src, dst, dstNdx, offset) {\n\t    offset = offset || 0;\n\t    var length = src.length;\n\t    for (var ii = 0; ii < length; ++ii) {\n\t      dst[dstNdx + ii] = src[ii] + offset;\n\t    }\n\t  }\n\n\t  /**\n\t   * Creates an array of the same time\n\t   *\n\t   * @param {(number[]|ArrayBuffer|module:twgl.FullArraySpec)} srcArray array who's type to copy\n\t   * @param {number} length size of new array\n\t   * @return {(number[]|ArrayBuffer|module:twgl.FullArraySpec)} array with same type as srcArray\n\t   */\n\t  function createArrayOfSameType(srcArray, length) {\n\t    var arraySrc = getArray(srcArray);\n\t    var newArray = new arraySrc.constructor(length);\n\t    var newArraySpec = newArray;\n\t    // If it appears to have been augmented make new one augemented\n\t    if (arraySrc.numComponents && arraySrc.numElements) {\n\t      augmentTypedArray(newArray, arraySrc.numComponents);\n\t    }\n\t    // If it was a fullspec make new one a fullspec\n\t    if (srcArray.data) {\n\t      newArraySpec = {\n\t        data: newArray\n\t      };\n\t      utils.copyNamedProperties(arraySpecPropertyNames, srcArray, newArraySpec);\n\t    }\n\t    return newArraySpec;\n\t  }\n\n\t  /**\n\t   * Concatinates sets of vertices\n\t   *\n\t   * Assumes the vertices match in composition. For example\n\t   * if one set of vertices has positions, normals, and indices\n\t   * all sets of vertices must have positions, normals, and indices\n\t   * and of the same type.\n\t   *\n\t   * Example:\n\t   *\n\t   *      var cubeVertices = twgl.primtiives.createCubeVertices(2);\n\t   *      var sphereVertices = twgl.primitives.createSphereVertices(1, 10, 10);\n\t   *      // move the sphere 2 units up\n\t   *      twgl.primitives.reorientVertices(\n\t   *          sphereVertices, twgl.m4.translation([0, 2, 0]));\n\t   *      // merge the sphere with the cube\n\t   *      var cubeSphereVertices = twgl.primitives.concatVertices(\n\t   *          [cubeVertices, sphereVertices]);\n\t   *      // turn them into WebGL buffers and attrib data\n\t   *      var bufferInfo = twgl.createBufferInfoFromArrays(gl, cubeSphereVertices);\n\t   *\n\t   * @param {module:twgl.Arrays[]} arrays Array of arrays of vertices\n\t   * @return {module:twgl.Arrays} The concatinated vertices.\n\t   * @memberOf module:twgl/primitives\n\t   */\n\t  function concatVertices(arrayOfArrays) {\n\t    var names = {};\n\t    var baseName;\n\t    // get names of all arrays.\n\t    // and numElements for each set of vertices\n\t    for (var ii = 0; ii < arrayOfArrays.length; ++ii) {\n\t      var arrays = arrayOfArrays[ii];\n\t      Object.keys(arrays).forEach(function (name) {\n\t        // eslint-disable-line\n\t        if (!names[name]) {\n\t          names[name] = [];\n\t        }\n\t        if (!baseName && name !== 'indices') {\n\t          baseName = name;\n\t        }\n\t        var arrayInfo = arrays[name];\n\t        var numComponents = getNumComponents(arrayInfo, name);\n\t        var array = getArray(arrayInfo);\n\t        var numElements = array.length / numComponents;\n\t        names[name].push(numElements);\n\t      });\n\t    }\n\n\t    // compute length of combined array\n\t    // and return one for reference\n\t    function getLengthOfCombinedArrays(name) {\n\t      var length = 0;\n\t      var arraySpec;\n\t      for (var ii = 0; ii < arrayOfArrays.length; ++ii) {\n\t        var arrays = arrayOfArrays[ii];\n\t        var arrayInfo = arrays[name];\n\t        var array = getArray(arrayInfo);\n\t        length += array.length;\n\t        if (!arraySpec || arrayInfo.data) {\n\t          arraySpec = arrayInfo;\n\t        }\n\t      }\n\t      return {\n\t        length: length,\n\t        spec: arraySpec\n\t      };\n\t    }\n\n\t    function copyArraysToNewArray(name, base, newArray) {\n\t      var baseIndex = 0;\n\t      var offset = 0;\n\t      for (var ii = 0; ii < arrayOfArrays.length; ++ii) {\n\t        var arrays = arrayOfArrays[ii];\n\t        var arrayInfo = arrays[name];\n\t        var array = getArray(arrayInfo);\n\t        if (name === 'indices') {\n\t          copyElements(array, newArray, offset, baseIndex);\n\t          baseIndex += base[ii];\n\t        } else {\n\t          copyElements(array, newArray, offset);\n\t        }\n\t        offset += array.length;\n\t      }\n\t    }\n\n\t    var base = names[baseName];\n\n\t    var newArrays = {};\n\t    Object.keys(names).forEach(function (name) {\n\t      var info = getLengthOfCombinedArrays(name);\n\t      var newArraySpec = createArrayOfSameType(info.spec, info.length);\n\t      copyArraysToNewArray(name, base, getArray(newArraySpec));\n\t      newArrays[name] = newArraySpec;\n\t    });\n\t    return newArrays;\n\t  }\n\n\t  /**\n\t   * Creates a duplicate set of vertices\n\t   *\n\t   * This is useful for calling reorientVertices when you\n\t   * also want to keep the original available\n\t   *\n\t   * @param {module:twgl.Arrays} arrays of vertices\n\t   * @return {module:twgl.Arrays} The dupilicated vertices.\n\t   * @memberOf module:twgl/primitives\n\t   */\n\t  function duplicateVertices(arrays) {\n\t    var newArrays = {};\n\t    Object.keys(arrays).forEach(function (name) {\n\t      var arraySpec = arrays[name];\n\t      var srcArray = getArray(arraySpec);\n\t      var newArraySpec = createArrayOfSameType(arraySpec, srcArray.length);\n\t      copyElements(srcArray, getArray(newArraySpec), 0);\n\t      newArrays[name] = newArraySpec;\n\t    });\n\t    return newArrays;\n\t  }\n\n\t  // Using quotes prevents Uglify from changing the names.\n\t  // No speed diff AFAICT.\n\t  return {\n\t    \"create3DFBufferInfo\": createBufferInfoFunc(create3DFVertices),\n\t    \"create3DFBuffers\": createBufferFunc(create3DFVertices),\n\t    \"create3DFVertices\": create3DFVertices,\n\t    \"createAugmentedTypedArray\": createAugmentedTypedArray,\n\t    \"createCubeBufferInfo\": createBufferInfoFunc(createCubeVertices),\n\t    \"createCubeBuffers\": createBufferFunc(createCubeVertices),\n\t    \"createCubeVertices\": createCubeVertices,\n\t    \"createPlaneBufferInfo\": createBufferInfoFunc(createPlaneVertices),\n\t    \"createPlaneBuffers\": createBufferFunc(createPlaneVertices),\n\t    \"createPlaneVertices\": createPlaneVertices,\n\t    \"createSphereBufferInfo\": createBufferInfoFunc(createSphereVertices),\n\t    \"createSphereBuffers\": createBufferFunc(createSphereVertices),\n\t    \"createSphereVertices\": createSphereVertices,\n\t    \"createTruncatedConeBufferInfo\": createBufferInfoFunc(createTruncatedConeVertices),\n\t    \"createTruncatedConeBuffers\": createBufferFunc(createTruncatedConeVertices),\n\t    \"createTruncatedConeVertices\": createTruncatedConeVertices,\n\t    \"createXYQuadBufferInfo\": createBufferInfoFunc(createXYQuadVertices),\n\t    \"createXYQuadBuffers\": createBufferFunc(createXYQuadVertices),\n\t    \"createXYQuadVertices\": createXYQuadVertices,\n\t    \"createCresentBufferInfo\": createBufferInfoFunc(createCresentVertices),\n\t    \"createCresentBuffers\": createBufferFunc(createCresentVertices),\n\t    \"createCresentVertices\": createCresentVertices,\n\t    \"createCylinderBufferInfo\": createBufferInfoFunc(createCylinderVertices),\n\t    \"createCylinderBuffers\": createBufferFunc(createCylinderVertices),\n\t    \"createCylinderVertices\": createCylinderVertices,\n\t    \"createTorusBufferInfo\": createBufferInfoFunc(createTorusVertices),\n\t    \"createTorusBuffers\": createBufferFunc(createTorusVertices),\n\t    \"createTorusVertices\": createTorusVertices,\n\t    \"createDiscBufferInfo\": createBufferInfoFunc(createDiscVertices),\n\t    \"createDiscBuffers\": createBufferFunc(createDiscVertices),\n\t    \"createDiscVertices\": createDiscVertices,\n\t    \"deindexVertices\": deindexVertices,\n\t    \"flattenNormals\": flattenNormals,\n\t    \"makeRandomVertexColors\": makeRandomVertexColors,\n\t    \"reorientDirections\": reorientDirections,\n\t    \"reorientNormals\": reorientNormals,\n\t    \"reorientPositions\": reorientPositions,\n\t    \"reorientVertices\": reorientVertices,\n\t    \"concatVertices\": concatVertices,\n\t    \"duplicateVertices\": duplicateVertices\n\t  };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }\n/******/ ])\n});\n;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/twgl.js/dist/3.x/twgl-full.js\n// module id = 4\n// module chunks = 0","/**\n * @fileoverview gl-matrix - High performance matrix and vector operations\n * @author Brandon Jones\n * @author Colin MacKenzie IV\n * @version 2.3.2\n */\n\n/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n// END HEADER\n\nexports.glMatrix = require(\"./gl-matrix/common.js\");\nexports.mat2 = require(\"./gl-matrix/mat2.js\");\nexports.mat2d = require(\"./gl-matrix/mat2d.js\");\nexports.mat3 = require(\"./gl-matrix/mat3.js\");\nexports.mat4 = require(\"./gl-matrix/mat4.js\");\nexports.quat = require(\"./gl-matrix/quat.js\");\nexports.vec2 = require(\"./gl-matrix/vec2.js\");\nexports.vec3 = require(\"./gl-matrix/vec3.js\");\nexports.vec4 = require(\"./gl-matrix/vec4.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gl-matrix/src/gl-matrix.js\n// module id = 5\n// module chunks = 0","import { Rectangle, Buffer, MatrixTransform, SpriteAttributes, Sprite } from './interfaces';\r\nimport { VERTICES_QUAD, VERTEX_SIZE, INDICES_QUAD, OFFSET_UV, COMP_SIZE_POS, HUGE, QUAD_SIZE, MIN_Z, COMP_POS, COMP_PAL_PAL_SHIFT, COMP_Z_INDEX, OFFSET_Z_INDEX, OFFSET_PAL_SHIFT, COMP_UV, QUAD_SIZE_SHORT, VERTEX_SIZE_SHORT, MAX_QUADS } from './constants';\r\nimport { Quad } from './Quad';\r\nimport { Transform2d } from './Transform';\r\nimport * as twgl from \"twgl.js\";\r\nimport { mat4 } from \"gl-matrix\";\r\nimport { IndexBuffer } from \"./IndexBuffer\";\r\n\r\nconst POS_OFFSET_1X = 0;\r\nconst POS_OFFSET_1Y = POS_OFFSET_1X + 1;\r\nconst POS_OFFSET_2X = VERTEX_SIZE_SHORT;\r\nconst POS_OFFSET_2Y = POS_OFFSET_2X + 1;\r\nconst POS_OFFSET_3X = VERTEX_SIZE_SHORT * 2;\r\nconst POS_OFFSET_3Y = POS_OFFSET_3X + 1;\r\nconst POS_OFFSET_4X = VERTEX_SIZE_SHORT * 3;\r\nconst POS_OFFSET_4Y = POS_OFFSET_4X + 1;\r\n\r\nconst Z_OFFSET_1 = OFFSET_Z_INDEX;\r\nconst Z_OFFSET_2 = VERTEX_SIZE + OFFSET_Z_INDEX;\r\nconst Z_OFFSET_3 = VERTEX_SIZE * 2 + OFFSET_Z_INDEX;\r\nconst Z_OFFSET_4 = VERTEX_SIZE * 3 + OFFSET_Z_INDEX;\r\n\r\nconst PAL_OFFSET_1 = OFFSET_PAL_SHIFT;\r\nconst PAL_OFFSET_2 = VERTEX_SIZE + OFFSET_PAL_SHIFT;\r\nconst PAL_OFFSET_3 = VERTEX_SIZE * 2 + OFFSET_PAL_SHIFT;\r\nconst PAL_OFFSET_4 = VERTEX_SIZE * 3 + OFFSET_PAL_SHIFT;\r\n\r\nconst UV_OFFSET_1X = OFFSET_UV;\r\nconst UV_OFFSET_1Y = UV_OFFSET_1X + 1;\r\nconst UV_OFFSET_2X = VERTEX_SIZE + OFFSET_UV;\r\nconst UV_OFFSET_2Y = UV_OFFSET_2X + 1;\r\nconst UV_OFFSET_3X = VERTEX_SIZE * 2 + OFFSET_UV;\r\nconst UV_OFFSET_3Y = UV_OFFSET_3X + 1;\r\nconst UV_OFFSET_4X = VERTEX_SIZE * 3 + OFFSET_UV;\r\nconst UV_OFFSET_4Y = UV_OFFSET_4X + 1;\r\n\r\nclass BufferedSprite implements Sprite{\r\n    readonly tag: {[key: string]: any} = {}\r\n    \r\n    private _transform: Transform2d;\r\n    private _options: SpriteAttributes;\r\n    private _isDirty = true;\r\n\r\n    constructor(private _id: number, private _buffer: QuadBuffer, transform?: Transform2d, options?: SpriteAttributes){\r\n        this._transform = transform || new Transform2d();\r\n        if(options){\r\n            _buffer.setAttributes(\r\n                _id,\r\n                options.x,\r\n                options.y,\r\n                options.x + options.w,\r\n                options.y + options.h,\r\n                options.textureX,\r\n                options.textureY,\r\n                options.textureX + options.w,\r\n                options.textureY + options.h,\r\n                options.z,\r\n                options.palOffset\r\n            );\r\n        }\r\n        this._options = options || _buffer.getAttributeInfo(_id);\r\n    }\r\n\r\n    get transform(){\r\n        return this._transform;\r\n    }\r\n\r\n    get isDirty(){\r\n        return this._isDirty;\r\n    }\r\n\r\n    get x(){\r\n        return this._options.x;\r\n    }\r\n\r\n    get y(){\r\n        return this._options.y;\r\n    }\r\n\r\n    // setAttribute(key: AttributeKey, value: any){\r\n    //     this._isDirty = true;\r\n    //     this._options[key] = value;\r\n    // }\r\n\r\n    update(){\r\n        if(this._transform.isDirty || this._isDirty){\r\n            let a = this._options;\r\n            let m = this._transform.matrix;\r\n            let id = this._id;\r\n\r\n            this._buffer.setPositionTransformed(id,a.x,a.y,a.x+a.w,a.y+a.h,m);\r\n            this._buffer.setZ(id, a.z || 1);\r\n            this._buffer.setPalShift(id, a.palOffset || 0);\r\n            this._buffer.setUv(id, a.textureX, a.textureY, a.textureX+a.w, a.textureY+a.h);\r\n            this._isDirty = false;\r\n        }\r\n    }\r\n\r\n    center(){\r\n        this._transform.ox = this._options.x + this._options.w/2;\r\n        this._transform.oy = this._options.y + this._options.h/2;\r\n    }\r\n\r\n}\r\n\r\nexport class QuadBuffer implements Buffer {\r\n    private _shortView: Uint16Array;\r\n    private _byteView: Uint8Array;\r\n    /*private*/ _indices: Uint16Array;\r\n    /*private*/_data: ArrayBuffer;\r\n\r\n    private _dirty_start = HUGE;\r\n    private _dirty_end = 0;\r\n    private _range: number;\r\n    private _sprites: BufferedSprite[];\r\n\r\n    private _bufferInfo: twgl.BufferInfo;\r\n\r\n    constructor(private _gl: WebGLRenderingContext, private _capacity = 16){\r\n        this._data = new ArrayBuffer(_capacity * VERTICES_QUAD * VERTEX_SIZE);\r\n        this._shortView = new Uint16Array(this._data);\r\n        this._byteView = new Uint8Array(this._data);\r\n        this._indices = new Uint16Array(_capacity * INDICES_QUAD);\r\n        \r\n        //this._createIndices();        \r\n    }\r\n\r\n    get isDirty(){\r\n        return (this._dirty_end - this._dirty_start) > 0;\r\n    }\r\n\r\n    get bufferInfo(){\r\n        if(!this._bufferInfo)\r\n            throw \"Buffer not created. Did you forget to call create(...)?\";\r\n        return this._bufferInfo;\r\n    }\r\n\r\n    get capacity(){\r\n        return this._capacity;\r\n    }\r\n\r\n    get size(){\r\n        return this._range;\r\n    }\r\n\r\n    get vertexSize(){\r\n        return this._range * INDICES_QUAD;\r\n    }\r\n\r\n    // protected get range(){\r\n    //     return this._range;\r\n    // }\r\n\r\n    update(){\r\n        if(this._sprites){\r\n            this._sprites.forEach(s => s.update());\r\n        }\r\n        if(this.isDirty){\r\n            let gl = this._gl;\r\n            let buffer = this.bufferInfo.attribs[\"position\"].buffer;\r\n            let data = new Uint8Array(this._data, this._dirty_start, this._dirty_end - this._dirty_start);\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\r\n            gl.bufferSubData(gl.ARRAY_BUFFER, this._dirty_start, data);\r\n            \r\n            this._dirty_start = HUGE;\r\n            this._dirty_end = 0;\r\n        }\r\n    }\r\n\r\n    destroy(){\r\n        this._gl.deleteBuffer(this._bufferInfo.attribs[\"position\"].buffer);\r\n        this._gl.deleteBuffer(this._bufferInfo.attribs[\"texcoord\"].buffer);\r\n        this._gl.deleteBuffer(this._bufferInfo.attribs[\"indices\"].buffer);\r\n\r\n        this._indices = null;\r\n        this._shortView = null;\r\n        this._byteView = null;\r\n        this._data = null;\r\n    }\r\n\r\n    protected set range(value: number){\r\n        this._range = value;\r\n        if(this._bufferInfo){\r\n            this._bufferInfo.numElements = value * INDICES_QUAD;\r\n        }\r\n    }\r\n\r\n    create(){\r\n        var packedBuffer = twgl.createBufferFromTypedArray(\r\n            this._gl, this._data, this._gl.ARRAY_BUFFER, this._gl.DYNAMIC_DRAW);\r\n\r\n        const indexBuffer = new IndexBuffer(this._gl);\r\n\r\n        this._bufferInfo = {\r\n            numElements: this._range ? this._range * INDICES_QUAD : this._indices.length,\r\n            indices: indexBuffer.buffer,            \r\n            elementType: indexBuffer.elementType,  \r\n            attribs: {\r\n                position: { \r\n                    buffer: packedBuffer, \r\n                    numComponents: COMP_POS, \r\n                    type: this._gl.UNSIGNED_SHORT, \r\n                    stride: VERTEX_SIZE, \r\n                    offset: 0 \r\n                },\r\n                z_index: { \r\n                    buffer: packedBuffer, \r\n                    numComponents: COMP_Z_INDEX, \r\n                    type: this._gl.UNSIGNED_BYTE, \r\n                    stride: VERTEX_SIZE, \r\n                    offset: OFFSET_Z_INDEX,\r\n                    normalize: false\r\n                },\r\n                pal_shift: { \r\n                    buffer: packedBuffer, \r\n                    numComponents: COMP_PAL_PAL_SHIFT, \r\n                    type: this._gl.UNSIGNED_BYTE, \r\n                    stride: VERTEX_SIZE, \r\n                    offset: OFFSET_PAL_SHIFT,\r\n                    normalize: true\r\n                },\r\n                texcoord: { \r\n                    buffer: packedBuffer, \r\n                    numComponents: COMP_UV, \r\n                    type: this._gl.UNSIGNED_BYTE, \r\n                    stride: VERTEX_SIZE, \r\n                    offset: OFFSET_UV,\r\n                    normalize: false\r\n                },\r\n            },\r\n        };\r\n\r\n        this._range = 0;\r\n\r\n        this._dirty_start = HUGE;\r\n        this._dirty_end = 0;\r\n\r\n        return this;\r\n    }\r\n    \r\n    setPosition(id: number, x1: number, y1: number, x2: number, y2: number){\r\n        let start = id * QUAD_SIZE_SHORT;\r\n        let pos = this._shortView;\r\n\r\n        pos[start+POS_OFFSET_1X] = x1;\r\n        pos[start+POS_OFFSET_1Y] = y1;\r\n        pos[start+POS_OFFSET_2X] = x2;\r\n        pos[start+POS_OFFSET_2Y] = y1;\r\n        pos[start+POS_OFFSET_3X] = x2;\r\n        pos[start+POS_OFFSET_3Y] = y2;\r\n        pos[start+POS_OFFSET_4X] = x1;\r\n        pos[start+POS_OFFSET_4Y] = y2;\r\n\r\n        this.setQuadDirty(start);\r\n    }\r\n\r\n    setPositionTransformed(id: number, x1: number, y1: number, x2: number, y2: number, m: mat4){\r\n        let start = id * QUAD_SIZE_SHORT;\r\n        let pos = this._shortView;\r\n\r\n        pos[start+POS_OFFSET_1X] = m[0] * x1 + m[4] * y1 + m[12];\r\n        pos[start+POS_OFFSET_1Y] = m[1] * x1 + m[5] * y1 + m[13];\r\n        pos[start+POS_OFFSET_2X] = m[0] * x2 + m[4] * y1 + m[12];\r\n        pos[start+POS_OFFSET_2Y] = m[1] * x2 + m[5] * y1 + m[13];\r\n        pos[start+POS_OFFSET_3X] = m[0] * x2 + m[4] * y2 + m[12];\r\n        pos[start+POS_OFFSET_3Y] = m[1] * x2 + m[5] * y2 + m[13];\r\n        pos[start+POS_OFFSET_4X] = m[0] * x1 + m[4] * y2 + m[12];\r\n        pos[start+POS_OFFSET_4Y] = m[1] * x1 + m[5] * y2 + m[13];\r\n    }\r\n\r\n    setUv(id: number, x1: number, y1: number, x2: number, y2: number){\r\n        let start = id * QUAD_SIZE;\r\n        let bytes = this._byteView;\r\n\r\n        bytes[start+UV_OFFSET_1X] = x1;\r\n        bytes[start+UV_OFFSET_1Y] = y1;\r\n        bytes[start+UV_OFFSET_2X] = x2 -1;\r\n        bytes[start+UV_OFFSET_2Y] = y1;\r\n        bytes[start+UV_OFFSET_3X] = x2 - 1;\r\n        bytes[start+UV_OFFSET_3Y] = y2 - 1;\r\n        bytes[start+UV_OFFSET_4X] = x1;\r\n        bytes[start+UV_OFFSET_4Y] = y2 - 1;\r\n\r\n        this.setQuadDirty(start);\r\n    }\r\n\r\n    setPalShift(id: number, pal: number){\r\n        let start = id * QUAD_SIZE;\r\n        let bytes = this._byteView;\r\n\r\n        bytes[start+PAL_OFFSET_1] = pal;\r\n        bytes[start+PAL_OFFSET_2] = pal;\r\n        bytes[start+PAL_OFFSET_3] = pal;\r\n        bytes[start+PAL_OFFSET_4] = pal;\r\n        \r\n        this.setQuadDirty(start);\r\n    }\r\n\r\n    getPalShift(id: number){\r\n        return this._byteView[id * QUAD_SIZE + PAL_OFFSET_1];\r\n    }\r\n\r\n    setZ(id: number, z: number){\r\n        let start = id * QUAD_SIZE;\r\n        let bytes = this._byteView;\r\n\r\n        bytes[start+Z_OFFSET_1] = z;\r\n        bytes[start+Z_OFFSET_2] = z;\r\n        bytes[start+Z_OFFSET_3] = z;\r\n        bytes[start+Z_OFFSET_4] = z;\r\n        \r\n        this.setQuadDirty(start);\r\n    }\r\n\r\n    getZ(id: number){\r\n        return this._byteView[id * QUAD_SIZE + Z_OFFSET_1];\r\n    }      \r\n\r\n    setAttributes(id: number, x1: number, y1: number, x2: number, y2: number, uvx1: number, uvy1: number, uvx2: number, uvy2: number, z: number, pal: number){\r\n        let startShort = id * QUAD_SIZE_SHORT;\r\n        let startByte = id * QUAD_SIZE;\r\n        \r\n        let shorts = this._shortView;\r\n        let bytes = this._byteView;\r\n        \r\n        shorts[startShort+POS_OFFSET_1X] = x1;\r\n        shorts[startShort+POS_OFFSET_1Y] = y1;\r\n        bytes[startByte+Z_OFFSET_1] = z;\r\n        bytes[startByte+PAL_OFFSET_1] = pal;\r\n        bytes[startByte+UV_OFFSET_1X] = uvx1;\r\n        bytes[startByte+UV_OFFSET_1Y] = uvy1;\r\n        \r\n        shorts[startShort+POS_OFFSET_2X] = x2;\r\n        shorts[startShort+POS_OFFSET_2Y] = y1;\r\n        bytes[startByte+Z_OFFSET_2] = z;\r\n        bytes[startByte+PAL_OFFSET_2] = pal;\r\n        bytes[startByte+UV_OFFSET_2X] = uvx2 - 1;\r\n        bytes[startByte+UV_OFFSET_2Y] = uvy1;\r\n        \r\n        shorts[startShort+POS_OFFSET_3X] = x2;\r\n        shorts[startShort+POS_OFFSET_3Y] = y2;\r\n        bytes[startByte+Z_OFFSET_3] = z;\r\n        bytes[startByte+PAL_OFFSET_3] = pal;\r\n        bytes[startByte+UV_OFFSET_3X] = uvx2 - 1;\r\n        bytes[startByte+UV_OFFSET_3Y] = uvy2 - 1;\r\n        \r\n        shorts[startShort+POS_OFFSET_4X] = x1;\r\n        shorts[startShort+POS_OFFSET_4Y] = y2;\r\n        bytes[startByte+Z_OFFSET_4] = z;\r\n        bytes[startByte+PAL_OFFSET_4] = pal;\r\n        bytes[startByte+UV_OFFSET_4X] = uvx1 ;\r\n        bytes[startByte+UV_OFFSET_4Y] = uvy2 - 1;\r\n\r\n        this.setQuadDirty(startByte);\r\n    }\r\n\r\n    add(){\r\n        if(this._range >= this._capacity){\r\n            this._resize(this._capacity * 2);\r\n        }\r\n        return this._range++;\r\n    }\r\n\r\n    addMany(amount: number){\r\n        const res: number[] = [];\r\n        for (var i = 0; i < amount; i++) {\r\n            res.push(this.add());\r\n        }\r\n    }\r\n\r\n    getAttributeInfo(id: number): SpriteAttributes{\r\n        let startShort = id * QUAD_SIZE_SHORT;\r\n        let startByte = id * QUAD_SIZE;\r\n        \r\n        let shorts = this._shortView;\r\n        let bytes = this._byteView;\r\n\r\n        return {\r\n            x: shorts[startShort+POS_OFFSET_1X],\r\n            y: shorts[startShort+POS_OFFSET_1Y],\r\n            w: shorts[startShort+POS_OFFSET_3X] - shorts[startShort+POS_OFFSET_1X],\r\n            h: shorts[startShort+POS_OFFSET_3Y] - shorts[startShort+POS_OFFSET_1Y],\r\n            z: bytes[startByte+Z_OFFSET_1],\r\n            palOffset: bytes[startByte+PAL_OFFSET_1],\r\n            textureX: bytes[startByte+UV_OFFSET_1X],\r\n            textureY: bytes[startByte+UV_OFFSET_1Y]\r\n        };\r\n    }\r\n\r\n    setAttributeBytes(id: number, values: ArrayLike<number>){\r\n        let startByte = id * QUAD_SIZE;\r\n        let bytes = this._byteView;\r\n        bytes.set(values, startByte);\r\n        \r\n        this.setQuadDirty(startByte);\r\n    }\r\n\r\n    getAttributeBytes(id: number, values: ArrayLike<number>){\r\n        let startByte = id * QUAD_SIZE;\r\n        return new Uint8Array(this._data, startByte, QUAD_SIZE);\r\n    }\r\n\r\n    clearQuad(id: number){\r\n        this.setAttributes(0,0,0,0,0,0,0,0,0,0,0);\r\n    }\r\n\r\n    setQuadDirty(byteOffset: number){\r\n        this._dirty_start = Math.min(byteOffset, this._dirty_start);\r\n        this._dirty_end = Math.max(byteOffset+QUAD_SIZE, this._dirty_end);\r\n    }\r\n\r\n    setAllDirty(){\r\n        this._dirty_start = 0;\r\n        this._dirty_end = this._range * QUAD_SIZE;\r\n    }\r\n\r\n    createSprite(id: number, transform?: Transform2d, options?: SpriteAttributes): Sprite{\r\n        let sprite = new BufferedSprite(id, this, transform, options);\r\n        this._sprites = this._sprites || [];\r\n        this._sprites.push(sprite);\r\n        return sprite;\r\n    }\r\n\r\n    private _resize(size: number){\r\n        if(size > MAX_QUADS)\r\n            throw `Maximum quads per buffer (${MAX_QUADS}) exceeded: ${size}`;\r\n\r\n        this._capacity = size;\r\n        const buffer = this.bufferInfo.attribs[\"position\"].buffer;\r\n\r\n        console.log(`resize buffer to ${size}`);\r\n        const newBuffer = new ArrayBuffer(size * QUAD_SIZE);     \r\n        const newBytes = new Uint8Array(newBuffer);\r\n        newBytes.set(this._byteView);\r\n        \r\n        this._shortView = new Uint16Array(newBuffer);\r\n        this._byteView = newBytes;\r\n        this._data = newBuffer;\r\n\r\n        this._gl.bindBuffer(this._gl.ARRAY_BUFFER, buffer);\r\n        this._gl.bufferData(this._gl.ARRAY_BUFFER, this._data, this._gl.DYNAMIC_DRAW);\r\n    }\r\n\r\n    private _vec2Transform(x: number, y: number, m: mat4, offset = 0){\r\n        this._shortView[offset] = m[0] * x + m[4] * y + m[12];\r\n        this._shortView[offset+1] = m[1] * x + m[5] * y + m[13];\r\n    }\r\n\r\n    \r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/core/QuadBuffer.ts","import { MAT4_IDENT } from './constants';\r\nimport { MatrixTransform } from './interfaces';\r\nimport { mat4, vec3, quat } from \"gl-matrix\";\r\n\r\nexport class Transform2d implements MatrixTransform {\r\n    \r\n    private _matrix: mat4;\r\n    private _dirty = true;\r\n    private _rDirty = true;\r\n    \r\n    private _trans: vec3;\r\n    private _scale: vec3;\r\n    private _origin: vec3;\r\n\r\n    private _axis: vec3;\r\n    private _angle: number;\r\n    private _quat: quat;\r\n\r\n    constructor(){\r\n        this._matrix = mat4.create();\r\n        this._quat = quat.create();\r\n        this._trans = vec3.fromValues(0,0,0);\r\n        this._origin = vec3.fromValues(0,0,0);\r\n        this._scale = vec3.fromValues(1,1,1);\r\n        this._axis = vec3.fromValues(0,0,1);\r\n        this._angle = 0;\r\n    }\r\n\r\n    get matrix(){\r\n        if(this._dirty)\r\n            this._buildMatrix();\r\n\r\n        this._buildMatrix();\r\n        return this._matrix;\r\n    }\r\n\r\n    get x(){\r\n        return this._trans[0];\r\n    }\r\n\r\n    set x(value: number){\r\n        this._trans[0] = value;\r\n        this._dirty = true;\r\n    }\r\n\r\n    get y(){\r\n        return this._trans[1];\r\n    }\r\n\r\n    set y(value: number){\r\n        this._trans[1] = value;\r\n        this._dirty = true;\r\n    }\r\n\r\n    get z(){\r\n        return this._trans[2];\r\n    }\r\n\r\n    set z(value: number){\r\n        this._trans[2] = value;\r\n        this._dirty = true;\r\n    }\r\n\r\n    get rot(){\r\n        return this._angle;\r\n    }\r\n\r\n    set rot(value: number){\r\n        this._angle = value;\r\n        this._rDirty = true;\r\n        this._dirty = true;\r\n    }\r\n\r\n    get sx(){\r\n        return this._scale[0];\r\n    }\r\n\r\n    set sx(value: number){\r\n        this._scale[0] = value;\r\n        this._dirty = true;\r\n    }\r\n\r\n    get sy(){\r\n        return this._scale[1];\r\n    }\r\n\r\n    set sy(value: number){\r\n        this._scale[1] = value;\r\n        this._dirty = true;\r\n    }\r\n\r\n    get ox(){\r\n        return this._origin[0];\r\n    }\r\n\r\n    set ox(value: number){\r\n        this._origin[0] = value;\r\n        this._dirty = true;\r\n    }\r\n\r\n    get oy(){\r\n        return this._origin[1];\r\n    }\r\n\r\n    set oy(value: number){\r\n        this._origin[1] = value;\r\n        this._dirty = true;\r\n    }\r\n\r\n    get isDirty(){\r\n        return this._dirty;   \r\n    }\r\n    \r\n    update(){\r\n        if(this._dirty)\r\n            this._buildMatrix();\r\n    }\r\n\r\n\r\n    private _buildMatrix(){        \r\n        if(this._rDirty)\r\n            this._buildQuat();\r\n\r\n        mat4.fromRotationTranslationScaleOrigin(this._matrix,this._quat, this._trans, this._scale, this._origin);\r\n        this._dirty = false;\r\n    }\r\n\r\n    private _buildQuat(){\r\n        quat.setAxisAngle(this._quat, this._axis, this._angle);\r\n        this._rDirty = false;\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/core/Transform.ts","import { TEXTURE_SIZE, HUGE } from './constants';\r\nimport * as twgl from \"twgl.js\";\r\n\r\nexport enum ColorComponent {\r\n    R = 0,\r\n    G = 1,\r\n    B = 2,\r\n    A = 3\r\n}\r\n\r\nexport abstract class PixelTexture {\r\n    \r\n    private _texture: WebGLTexture;\r\n    protected _texdata: Uint8Array;\r\n    protected  _dirtyStart = HUGE;\r\n    protected _dirtyEnd = 0;\r\n    \r\n    constructor(protected _gl: WebGLRenderingContext){\r\n        this._texdata = new Uint8Array(TEXTURE_SIZE * TEXTURE_SIZE * this._components);\r\n    }\r\n    \r\n    public get texture(): WebGLTexture {\r\n        if(!this._texture)\r\n            throw \"No texture available. Did you forget to call create(...)?\";\r\n        \r\n        return this._texture;\r\n    }\r\n\r\n    protected abstract get _options(): twgl.TextureOptions;\r\n    protected abstract get _components(): number;\r\n\r\n    public getRawData() {\r\n        return this._texdata;\r\n    }\r\n\r\n    public setRawData(value: Uint8Array){\r\n        this._texdata = value;\r\n        this.setAllDirty();\r\n    }\r\n\r\n    public get colorDepth(): 8 | 24 | 32 {\r\n        switch (this._options.format) {\r\n            case this._gl.RGBA:\r\n                return 32;\r\n            case this._gl.LUMINANCE:\r\n            case this._gl.ALPHA:\r\n                return 8;\r\n            case this._gl.RGB:\r\n                return 24;\r\n        }\r\n    }\r\n\r\n    public setDataFunc(func: (x:number, y: number, comp: ColorComponent) => number){\r\n        let tex = this._texdata;\r\n        let f = Math.floor;\r\n        let totalComp = this._components;\r\n\r\n        for (var i = 0; i < tex.length; i++) {\r\n            let comp = i % totalComp;\r\n            let pixel = Math.floor((i - comp) / totalComp);\r\n            tex[i] = func(pixel % TEXTURE_SIZE, Math.floor(pixel / TEXTURE_SIZE), i % totalComp);          \r\n        }\r\n\r\n        this.setAllDirty();\r\n    }    \r\n\r\n    public create(){        \r\n        this._texture = twgl.createTexture(this._gl, this._options);\r\n        this._dirtyEnd = 0;\r\n        this._dirtyStart = HUGE;\r\n        return this;\r\n    }\r\n    \r\n    public update(){\r\n        let updateLength = this._dirtyEnd - this._dirtyStart;\r\n        if(updateLength > 0){\r\n            let o = this._options;\r\n            let updateData = new Uint8Array(this._texdata.buffer, this._dirtyStart, updateLength);\r\n            let rowSize = this._components * TEXTURE_SIZE;\r\n            let x = 0\r\n            let y = Math.floor(this._dirtyStart / rowSize);\r\n            let w = 256;\r\n            let h = Math.floor(updateLength / rowSize);\r\n            console.log(x,y,w,h);\r\n\r\n            this._gl.bindTexture(o.target, this.texture);\r\n            this._gl.texSubImage2D(o.target, 0, x, y, w, h, o.format, o.type, updateData);\r\n            \r\n            this._dirtyEnd = 0;\r\n            this._dirtyStart = HUGE;\r\n        }\r\n    }    \r\n\r\n    public setAllDirty(){\r\n        this._dirtyStart = 0;\r\n        this._dirtyEnd = this._texdata.length;\r\n    }\r\n\r\n    public getPixel(x: number, y: number){\r\n        let c = this._components;\r\n        let res = new Array(c);\r\n        let offset = (y * TEXTURE_SIZE + x) * c;\r\n        for (var i = 0; i < c; i++) {\r\n            res[i] = this._texdata[offset+i];            \r\n        }\r\n        return res;\r\n    }\r\n\r\n    public setPixel(x: number, y: number, color: ArrayLike<number>){\r\n        let c = this._components;\r\n        if(color.length != c)\r\n            throw \"Color needs to be an array with length \"+c;\r\n        let offset = (y * TEXTURE_SIZE + x) * c;\r\n        for (var i = 0; i < c; i++) {\r\n            this._texdata[offset+i] = color[i];            \r\n        }\r\n        this.setRowDirty(y);\r\n    }\r\n\r\n    public setRowDirty(y: number){\r\n        let start = y * TEXTURE_SIZE * this._components;\r\n        this._dirtyStart = Math.min(this._dirtyStart, start);\r\n        this._dirtyEnd = Math.max(this._dirtyEnd, start + TEXTURE_SIZE * this._components);\r\n    }\r\n\r\n\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/core/PixelTexture.ts","'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nmodule.exports = {\n  2:      'need dictionary',     /* Z_NEED_DICT       2  */\n  1:      'stream end',          /* Z_STREAM_END      1  */\n  0:      '',                    /* Z_OK              0  */\n  '-1':   'file error',          /* Z_ERRNO         (-1) */\n  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */\n  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */\n  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */\n  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */\n  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/pako/lib/zlib/messages.js\n// module id = 9\n// module chunks = 0","export * from \"./constants\";\r\nexport * from \"./interfaces\";\r\nexport * from \"./Quad\";\r\nexport * from \"./QuadBuffer\";\r\nexport * from \"./Renderable\";\r\nexport * from \"./Renderer\";\r\nexport * from \"./TextBuffer\";\r\nexport * from \"./TileBuffer\";\r\nexport * from \"./Transform\";\r\nexport * from \"./PixelTexture\";\r\nexport * from \"./IndexedTexture\";\r\nexport * from \"./PaletteTexture\";\n\n\n// WEBPACK FOOTER //\n// ./src/core/index.ts","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = require(\"./common.js\");\n\n/**\n * @class 3x3 Matrix\n * @name mat3\n */\nvar mat3 = {};\n\n/**\n * Creates a new identity mat3\n *\n * @returns {mat3} a new 3x3 matrix\n */\nmat3.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(9);\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 1;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n};\n\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {mat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\nmat3.fromMat4 = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[4];\n    out[4] = a[5];\n    out[5] = a[6];\n    out[6] = a[8];\n    out[7] = a[9];\n    out[8] = a[10];\n    return out;\n};\n\n/**\n * Creates a new mat3 initialized with values from an existing matrix\n *\n * @param {mat3} a matrix to clone\n * @returns {mat3} a new 3x3 matrix\n */\nmat3.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(9);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n};\n\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nmat3.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n};\n\n/**\n * Create a new mat3 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} A new mat3\n */\nmat3.fromValues = function(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n    var out = new glMatrix.ARRAY_TYPE(9);\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m10;\n    out[4] = m11;\n    out[5] = m12;\n    out[6] = m20;\n    out[7] = m21;\n    out[8] = m22;\n    return out;\n};\n\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} out\n */\nmat3.set = function(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m10;\n    out[4] = m11;\n    out[5] = m12;\n    out[6] = m20;\n    out[7] = m21;\n    out[8] = m22;\n    return out;\n};\n\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\nmat3.identity = function(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 1;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n};\n\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nmat3.transpose = function(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        var a01 = a[1], a02 = a[2], a12 = a[5];\n        out[1] = a[3];\n        out[2] = a[6];\n        out[3] = a01;\n        out[5] = a[7];\n        out[6] = a02;\n        out[7] = a12;\n    } else {\n        out[0] = a[0];\n        out[1] = a[3];\n        out[2] = a[6];\n        out[3] = a[1];\n        out[4] = a[4];\n        out[5] = a[7];\n        out[6] = a[2];\n        out[7] = a[5];\n        out[8] = a[8];\n    }\n    \n    return out;\n};\n\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nmat3.invert = function(out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8],\n\n        b01 = a22 * a11 - a12 * a21,\n        b11 = -a22 * a10 + a12 * a20,\n        b21 = a21 * a10 - a11 * a20,\n\n        // Calculate the determinant\n        det = a00 * b01 + a01 * b11 + a02 * b21;\n\n    if (!det) { \n        return null; \n    }\n    det = 1.0 / det;\n\n    out[0] = b01 * det;\n    out[1] = (-a22 * a01 + a02 * a21) * det;\n    out[2] = (a12 * a01 - a02 * a11) * det;\n    out[3] = b11 * det;\n    out[4] = (a22 * a00 - a02 * a20) * det;\n    out[5] = (-a12 * a00 + a02 * a10) * det;\n    out[6] = b21 * det;\n    out[7] = (-a21 * a00 + a01 * a20) * det;\n    out[8] = (a11 * a00 - a01 * a10) * det;\n    return out;\n};\n\n/**\n * Calculates the adjugate of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nmat3.adjoint = function(out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8];\n\n    out[0] = (a11 * a22 - a12 * a21);\n    out[1] = (a02 * a21 - a01 * a22);\n    out[2] = (a01 * a12 - a02 * a11);\n    out[3] = (a12 * a20 - a10 * a22);\n    out[4] = (a00 * a22 - a02 * a20);\n    out[5] = (a02 * a10 - a00 * a12);\n    out[6] = (a10 * a21 - a11 * a20);\n    out[7] = (a01 * a20 - a00 * a21);\n    out[8] = (a00 * a11 - a01 * a10);\n    return out;\n};\n\n/**\n * Calculates the determinant of a mat3\n *\n * @param {mat3} a the source matrix\n * @returns {Number} determinant of a\n */\nmat3.determinant = function (a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8];\n\n    return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n};\n\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nmat3.multiply = function (out, a, b) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8],\n\n        b00 = b[0], b01 = b[1], b02 = b[2],\n        b10 = b[3], b11 = b[4], b12 = b[5],\n        b20 = b[6], b21 = b[7], b22 = b[8];\n\n    out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n    out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n    out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n\n    out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n    out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n    out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n\n    out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n    out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n    out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n    return out;\n};\n\n/**\n * Alias for {@link mat3.multiply}\n * @function\n */\nmat3.mul = mat3.multiply;\n\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to translate\n * @param {vec2} v vector to translate by\n * @returns {mat3} out\n */\nmat3.translate = function(out, a, v) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8],\n        x = v[0], y = v[1];\n\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n\n    out[3] = a10;\n    out[4] = a11;\n    out[5] = a12;\n\n    out[6] = x * a00 + y * a10 + a20;\n    out[7] = x * a01 + y * a11 + a21;\n    out[8] = x * a02 + y * a12 + a22;\n    return out;\n};\n\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nmat3.rotate = function (out, a, rad) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8],\n\n        s = Math.sin(rad),\n        c = Math.cos(rad);\n\n    out[0] = c * a00 + s * a10;\n    out[1] = c * a01 + s * a11;\n    out[2] = c * a02 + s * a12;\n\n    out[3] = c * a10 - s * a00;\n    out[4] = c * a11 - s * a01;\n    out[5] = c * a12 - s * a02;\n\n    out[6] = a20;\n    out[7] = a21;\n    out[8] = a22;\n    return out;\n};\n\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\nmat3.scale = function(out, a, v) {\n    var x = v[0], y = v[1];\n\n    out[0] = x * a[0];\n    out[1] = x * a[1];\n    out[2] = x * a[2];\n\n    out[3] = y * a[3];\n    out[4] = y * a[4];\n    out[5] = y * a[5];\n\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n};\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.translate(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {vec2} v Translation vector\n * @returns {mat3} out\n */\nmat3.fromTranslation = function(out, v) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 1;\n    out[5] = 0;\n    out[6] = v[0];\n    out[7] = v[1];\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.rotate(dest, dest, rad);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nmat3.fromRotation = function(out, rad) {\n    var s = Math.sin(rad), c = Math.cos(rad);\n\n    out[0] = c;\n    out[1] = s;\n    out[2] = 0;\n\n    out[3] = -s;\n    out[4] = c;\n    out[5] = 0;\n\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.scale(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat3} out\n */\nmat3.fromScaling = function(out, v) {\n    out[0] = v[0];\n    out[1] = 0;\n    out[2] = 0;\n\n    out[3] = 0;\n    out[4] = v[1];\n    out[5] = 0;\n\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Copies the values from a mat2d into a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat2d} a the matrix to copy\n * @returns {mat3} out\n **/\nmat3.fromMat2d = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = 0;\n\n    out[3] = a[2];\n    out[4] = a[3];\n    out[5] = 0;\n\n    out[6] = a[4];\n    out[7] = a[5];\n    out[8] = 1;\n    return out;\n};\n\n/**\n* Calculates a 3x3 matrix from the given quaternion\n*\n* @param {mat3} out mat3 receiving operation result\n* @param {quat} q Quaternion to create matrix from\n*\n* @returns {mat3} out\n*/\nmat3.fromQuat = function (out, q) {\n    var x = q[0], y = q[1], z = q[2], w = q[3],\n        x2 = x + x,\n        y2 = y + y,\n        z2 = z + z,\n\n        xx = x * x2,\n        yx = y * x2,\n        yy = y * y2,\n        zx = z * x2,\n        zy = z * y2,\n        zz = z * z2,\n        wx = w * x2,\n        wy = w * y2,\n        wz = w * z2;\n\n    out[0] = 1 - yy - zz;\n    out[3] = yx - wz;\n    out[6] = zx + wy;\n\n    out[1] = yx + wz;\n    out[4] = 1 - xx - zz;\n    out[7] = zy - wx;\n\n    out[2] = zx - wy;\n    out[5] = zy + wx;\n    out[8] = 1 - xx - yy;\n\n    return out;\n};\n\n/**\n* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n*\n* @param {mat3} out mat3 receiving operation result\n* @param {mat4} a Mat4 to derive the normal matrix from\n*\n* @returns {mat3} out\n*/\nmat3.normalFromMat4 = function (out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],\n\n        b00 = a00 * a11 - a01 * a10,\n        b01 = a00 * a12 - a02 * a10,\n        b02 = a00 * a13 - a03 * a10,\n        b03 = a01 * a12 - a02 * a11,\n        b04 = a01 * a13 - a03 * a11,\n        b05 = a02 * a13 - a03 * a12,\n        b06 = a20 * a31 - a21 * a30,\n        b07 = a20 * a32 - a22 * a30,\n        b08 = a20 * a33 - a23 * a30,\n        b09 = a21 * a32 - a22 * a31,\n        b10 = a21 * a33 - a23 * a31,\n        b11 = a22 * a33 - a23 * a32,\n\n        // Calculate the determinant\n        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n    if (!det) { \n        return null; \n    }\n    det = 1.0 / det;\n\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n\n    out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n\n    out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n\n    return out;\n};\n\n/**\n * Returns a string representation of a mat3\n *\n * @param {mat3} mat matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nmat3.str = function (a) {\n    return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + \n                    a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + \n                    a[6] + ', ' + a[7] + ', ' + a[8] + ')';\n};\n\n/**\n * Returns Frobenius norm of a mat3\n *\n * @param {mat3} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nmat3.frob = function (a) {\n    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2)))\n};\n\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nmat3.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    out[4] = a[4] + b[4];\n    out[5] = a[5] + b[5];\n    out[6] = a[6] + b[6];\n    out[7] = a[7] + b[7];\n    out[8] = a[8] + b[8];\n    return out;\n};\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nmat3.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    out[4] = a[4] - b[4];\n    out[5] = a[5] - b[5];\n    out[6] = a[6] - b[6];\n    out[7] = a[7] - b[7];\n    out[8] = a[8] - b[8];\n    return out;\n};\n\n/**\n * Alias for {@link mat3.subtract}\n * @function\n */\nmat3.sub = mat3.subtract;\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\nmat3.multiplyScalar = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    out[4] = a[4] * b;\n    out[5] = a[5] * b;\n    out[6] = a[6] * b;\n    out[7] = a[7] * b;\n    out[8] = a[8] * b;\n    return out;\n};\n\n/**\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat3} out the receiving vector\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat3} out\n */\nmat3.multiplyScalarAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    out[2] = a[2] + (b[2] * scale);\n    out[3] = a[3] + (b[3] * scale);\n    out[4] = a[4] + (b[4] * scale);\n    out[5] = a[5] + (b[5] * scale);\n    out[6] = a[6] + (b[6] * scale);\n    out[7] = a[7] + (b[7] * scale);\n    out[8] = a[8] + (b[8] * scale);\n    return out;\n};\n\n/*\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat3} a The first matrix.\n * @param {mat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat3.exactEquals = function (a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && \n           a[3] === b[3] && a[4] === b[4] && a[5] === b[5] &&\n           a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n};\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat3} a The first matrix.\n * @param {mat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat3.equals = function (a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5], a6 = a[6], a7 = a[7], a8 = a[8];\n    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = a[6], b7 = b[7], b8 = b[8];\n    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n            Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n            Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n            Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n            Math.abs(a6 - b6) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n            Math.abs(a7 - b7) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&\n            Math.abs(a8 - b8) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a8), Math.abs(b8)));\n};\n\n\nmodule.exports = mat3;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gl-matrix/src/gl-matrix/mat3.js\n// module id = 11\n// module chunks = 0","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = require(\"./common.js\");\n\n/**\n * @class 3 Dimensional Vector\n * @name vec3\n */\nvar vec3 = {};\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\nvec3.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(3);\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    return out;\n};\n\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {vec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\nvec3.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(3);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    return out;\n};\n\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\nvec3.fromValues = function(x, y, z) {\n    var out = new glMatrix.ARRAY_TYPE(3);\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    return out;\n};\n\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the source vector\n * @returns {vec3} out\n */\nvec3.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    return out;\n};\n\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\nvec3.set = function(out, x, y, z) {\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    return out;\n};\n\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    return out;\n};\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    return out;\n};\n\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\nvec3.sub = vec3.subtract;\n\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.multiply = function(out, a, b) {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    out[2] = a[2] * b[2];\n    return out;\n};\n\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\nvec3.mul = vec3.multiply;\n\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.divide = function(out, a, b) {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    out[2] = a[2] / b[2];\n    return out;\n};\n\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\nvec3.div = vec3.divide;\n\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to ceil\n * @returns {vec3} out\n */\nvec3.ceil = function (out, a) {\n    out[0] = Math.ceil(a[0]);\n    out[1] = Math.ceil(a[1]);\n    out[2] = Math.ceil(a[2]);\n    return out;\n};\n\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to floor\n * @returns {vec3} out\n */\nvec3.floor = function (out, a) {\n    out[0] = Math.floor(a[0]);\n    out[1] = Math.floor(a[1]);\n    out[2] = Math.floor(a[2]);\n    return out;\n};\n\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.min = function(out, a, b) {\n    out[0] = Math.min(a[0], b[0]);\n    out[1] = Math.min(a[1], b[1]);\n    out[2] = Math.min(a[2], b[2]);\n    return out;\n};\n\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.max = function(out, a, b) {\n    out[0] = Math.max(a[0], b[0]);\n    out[1] = Math.max(a[1], b[1]);\n    out[2] = Math.max(a[2], b[2]);\n    return out;\n};\n\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to round\n * @returns {vec3} out\n */\nvec3.round = function (out, a) {\n    out[0] = Math.round(a[0]);\n    out[1] = Math.round(a[1]);\n    out[2] = Math.round(a[2]);\n    return out;\n};\n\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\nvec3.scale = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    return out;\n};\n\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\nvec3.scaleAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    out[2] = a[2] + (b[2] * scale);\n    return out;\n};\n\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} distance between a and b\n */\nvec3.distance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1],\n        z = b[2] - a[2];\n    return Math.sqrt(x*x + y*y + z*z);\n};\n\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\nvec3.dist = vec3.distance;\n\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\nvec3.squaredDistance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1],\n        z = b[2] - a[2];\n    return x*x + y*y + z*z;\n};\n\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\nvec3.sqrDist = vec3.squaredDistance;\n\n/**\n * Calculates the length of a vec3\n *\n * @param {vec3} a vector to calculate length of\n * @returns {Number} length of a\n */\nvec3.length = function (a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2];\n    return Math.sqrt(x*x + y*y + z*z);\n};\n\n/**\n * Alias for {@link vec3.length}\n * @function\n */\nvec3.len = vec3.length;\n\n/**\n * Calculates the squared length of a vec3\n *\n * @param {vec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nvec3.squaredLength = function (a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2];\n    return x*x + y*y + z*z;\n};\n\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\nvec3.sqrLen = vec3.squaredLength;\n\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to negate\n * @returns {vec3} out\n */\nvec3.negate = function(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    return out;\n};\n\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to invert\n * @returns {vec3} out\n */\nvec3.inverse = function(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n};\n\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to normalize\n * @returns {vec3} out\n */\nvec3.normalize = function(out, a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2];\n    var len = x*x + y*y + z*z;\n    if (len > 0) {\n        //TODO: evaluate use of glm_invsqrt here?\n        len = 1 / Math.sqrt(len);\n        out[0] = a[0] * len;\n        out[1] = a[1] * len;\n        out[2] = a[2] * len;\n    }\n    return out;\n};\n\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} dot product of a and b\n */\nvec3.dot = function (a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n};\n\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.cross = function(out, a, b) {\n    var ax = a[0], ay = a[1], az = a[2],\n        bx = b[0], by = b[1], bz = b[2];\n\n    out[0] = ay * bz - az * by;\n    out[1] = az * bx - ax * bz;\n    out[2] = ax * by - ay * bx;\n    return out;\n};\n\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec3} out\n */\nvec3.lerp = function (out, a, b, t) {\n    var ax = a[0],\n        ay = a[1],\n        az = a[2];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    out[2] = az + t * (b[2] - az);\n    return out;\n};\n\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {vec3} c the third operand\n * @param {vec3} d the fourth operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec3} out\n */\nvec3.hermite = function (out, a, b, c, d, t) {\n  var factorTimes2 = t * t,\n      factor1 = factorTimes2 * (2 * t - 3) + 1,\n      factor2 = factorTimes2 * (t - 2) + t,\n      factor3 = factorTimes2 * (t - 1),\n      factor4 = factorTimes2 * (3 - 2 * t);\n  \n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  \n  return out;\n};\n\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {vec3} c the third operand\n * @param {vec3} d the fourth operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec3} out\n */\nvec3.bezier = function (out, a, b, c, d, t) {\n  var inverseFactor = 1 - t,\n      inverseFactorTimesTwo = inverseFactor * inverseFactor,\n      factorTimes2 = t * t,\n      factor1 = inverseFactorTimesTwo * inverseFactor,\n      factor2 = 3 * t * inverseFactorTimesTwo,\n      factor3 = 3 * factorTimes2 * inverseFactor,\n      factor4 = factorTimes2 * t;\n  \n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  \n  return out;\n};\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\nvec3.random = function (out, scale) {\n    scale = scale || 1.0;\n\n    var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n    var z = (glMatrix.RANDOM() * 2.0) - 1.0;\n    var zScale = Math.sqrt(1.0-z*z) * scale;\n\n    out[0] = Math.cos(r) * zScale;\n    out[1] = Math.sin(r) * zScale;\n    out[2] = z * scale;\n    return out;\n};\n\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec3} out\n */\nvec3.transformMat4 = function(out, a, m) {\n    var x = a[0], y = a[1], z = a[2],\n        w = m[3] * x + m[7] * y + m[11] * z + m[15];\n    w = w || 1.0;\n    out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n    out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n    out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n    return out;\n};\n\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat4} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\nvec3.transformMat3 = function(out, a, m) {\n    var x = a[0], y = a[1], z = a[2];\n    out[0] = x * m[0] + y * m[3] + z * m[6];\n    out[1] = x * m[1] + y * m[4] + z * m[7];\n    out[2] = x * m[2] + y * m[5] + z * m[8];\n    return out;\n};\n\n/**\n * Transforms the vec3 with a quat\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec3} out\n */\nvec3.transformQuat = function(out, a, q) {\n    // benchmarks: http://jsperf.com/quaternion-transform-vec3-implementations\n\n    var x = a[0], y = a[1], z = a[2],\n        qx = q[0], qy = q[1], qz = q[2], qw = q[3],\n\n        // calculate quat * vec\n        ix = qw * x + qy * z - qz * y,\n        iy = qw * y + qz * x - qx * z,\n        iz = qw * z + qx * y - qy * x,\n        iw = -qx * x - qy * y - qz * z;\n\n    // calculate result * inverse quat\n    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n    return out;\n};\n\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nvec3.rotateX = function(out, a, b, c){\n   var p = [], r=[];\n\t  //Translate point to the origin\n\t  p[0] = a[0] - b[0];\n\t  p[1] = a[1] - b[1];\n  \tp[2] = a[2] - b[2];\n\n\t  //perform rotation\n\t  r[0] = p[0];\n\t  r[1] = p[1]*Math.cos(c) - p[2]*Math.sin(c);\n\t  r[2] = p[1]*Math.sin(c) + p[2]*Math.cos(c);\n\n\t  //translate to correct position\n\t  out[0] = r[0] + b[0];\n\t  out[1] = r[1] + b[1];\n\t  out[2] = r[2] + b[2];\n\n  \treturn out;\n};\n\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nvec3.rotateY = function(out, a, b, c){\n  \tvar p = [], r=[];\n  \t//Translate point to the origin\n  \tp[0] = a[0] - b[0];\n  \tp[1] = a[1] - b[1];\n  \tp[2] = a[2] - b[2];\n  \n  \t//perform rotation\n  \tr[0] = p[2]*Math.sin(c) + p[0]*Math.cos(c);\n  \tr[1] = p[1];\n  \tr[2] = p[2]*Math.cos(c) - p[0]*Math.sin(c);\n  \n  \t//translate to correct position\n  \tout[0] = r[0] + b[0];\n  \tout[1] = r[1] + b[1];\n  \tout[2] = r[2] + b[2];\n  \n  \treturn out;\n};\n\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nvec3.rotateZ = function(out, a, b, c){\n  \tvar p = [], r=[];\n  \t//Translate point to the origin\n  \tp[0] = a[0] - b[0];\n  \tp[1] = a[1] - b[1];\n  \tp[2] = a[2] - b[2];\n  \n  \t//perform rotation\n  \tr[0] = p[0]*Math.cos(c) - p[1]*Math.sin(c);\n  \tr[1] = p[0]*Math.sin(c) + p[1]*Math.cos(c);\n  \tr[2] = p[2];\n  \n  \t//translate to correct position\n  \tout[0] = r[0] + b[0];\n  \tout[1] = r[1] + b[1];\n  \tout[2] = r[2] + b[2];\n  \n  \treturn out;\n};\n\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nvec3.forEach = (function() {\n    var vec = vec3.create();\n\n    return function(a, stride, offset, count, fn, arg) {\n        var i, l;\n        if(!stride) {\n            stride = 3;\n        }\n\n        if(!offset) {\n            offset = 0;\n        }\n        \n        if(count) {\n            l = Math.min((count * stride) + offset, a.length);\n        } else {\n            l = a.length;\n        }\n\n        for(i = offset; i < l; i += stride) {\n            vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2];\n            fn(vec, vec, arg);\n            a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2];\n        }\n        \n        return a;\n    };\n})();\n\n/**\n * Get the angle between two 3D vectors\n * @param {vec3} a The first operand\n * @param {vec3} b The second operand\n * @returns {Number} The angle in radians\n */\nvec3.angle = function(a, b) {\n   \n    var tempA = vec3.fromValues(a[0], a[1], a[2]);\n    var tempB = vec3.fromValues(b[0], b[1], b[2]);\n \n    vec3.normalize(tempA, tempA);\n    vec3.normalize(tempB, tempB);\n \n    var cosine = vec3.dot(tempA, tempB);\n\n    if(cosine > 1.0){\n        return 0;\n    } else {\n        return Math.acos(cosine);\n    }     \n};\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec3} vec vector to represent as a string\n * @returns {String} string representation of the vector\n */\nvec3.str = function (a) {\n    return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\n};\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nvec3.exactEquals = function (a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n};\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nvec3.equals = function (a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2];\n    var b0 = b[0], b1 = b[1], b2 = b[2];\n    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)));\n};\n\nmodule.exports = vec3;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gl-matrix/src/gl-matrix/vec3.js\n// module id = 12\n// module chunks = 0","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = require(\"./common.js\");\n\n/**\n * @class 4 Dimensional Vector\n * @name vec4\n */\nvar vec4 = {};\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\nvec4.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(4);\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    return out;\n};\n\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {vec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\nvec4.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(4);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\nvec4.fromValues = function(x, y, z, w) {\n    var out = new glMatrix.ARRAY_TYPE(4);\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = w;\n    return out;\n};\n\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the source vector\n * @returns {vec4} out\n */\nvec4.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\nvec4.set = function(out, x, y, z, w) {\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = w;\n    return out;\n};\n\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    return out;\n};\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    return out;\n};\n\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\nvec4.sub = vec4.subtract;\n\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.multiply = function(out, a, b) {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    out[2] = a[2] * b[2];\n    out[3] = a[3] * b[3];\n    return out;\n};\n\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\nvec4.mul = vec4.multiply;\n\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.divide = function(out, a, b) {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    out[2] = a[2] / b[2];\n    out[3] = a[3] / b[3];\n    return out;\n};\n\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\nvec4.div = vec4.divide;\n\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to ceil\n * @returns {vec4} out\n */\nvec4.ceil = function (out, a) {\n    out[0] = Math.ceil(a[0]);\n    out[1] = Math.ceil(a[1]);\n    out[2] = Math.ceil(a[2]);\n    out[3] = Math.ceil(a[3]);\n    return out;\n};\n\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to floor\n * @returns {vec4} out\n */\nvec4.floor = function (out, a) {\n    out[0] = Math.floor(a[0]);\n    out[1] = Math.floor(a[1]);\n    out[2] = Math.floor(a[2]);\n    out[3] = Math.floor(a[3]);\n    return out;\n};\n\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.min = function(out, a, b) {\n    out[0] = Math.min(a[0], b[0]);\n    out[1] = Math.min(a[1], b[1]);\n    out[2] = Math.min(a[2], b[2]);\n    out[3] = Math.min(a[3], b[3]);\n    return out;\n};\n\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.max = function(out, a, b) {\n    out[0] = Math.max(a[0], b[0]);\n    out[1] = Math.max(a[1], b[1]);\n    out[2] = Math.max(a[2], b[2]);\n    out[3] = Math.max(a[3], b[3]);\n    return out;\n};\n\n/**\n * Math.round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to round\n * @returns {vec4} out\n */\nvec4.round = function (out, a) {\n    out[0] = Math.round(a[0]);\n    out[1] = Math.round(a[1]);\n    out[2] = Math.round(a[2]);\n    out[3] = Math.round(a[3]);\n    return out;\n};\n\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\nvec4.scale = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    return out;\n};\n\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\nvec4.scaleAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    out[2] = a[2] + (b[2] * scale);\n    out[3] = a[3] + (b[3] * scale);\n    return out;\n};\n\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} distance between a and b\n */\nvec4.distance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1],\n        z = b[2] - a[2],\n        w = b[3] - a[3];\n    return Math.sqrt(x*x + y*y + z*z + w*w);\n};\n\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\nvec4.dist = vec4.distance;\n\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\nvec4.squaredDistance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1],\n        z = b[2] - a[2],\n        w = b[3] - a[3];\n    return x*x + y*y + z*z + w*w;\n};\n\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\nvec4.sqrDist = vec4.squaredDistance;\n\n/**\n * Calculates the length of a vec4\n *\n * @param {vec4} a vector to calculate length of\n * @returns {Number} length of a\n */\nvec4.length = function (a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2],\n        w = a[3];\n    return Math.sqrt(x*x + y*y + z*z + w*w);\n};\n\n/**\n * Alias for {@link vec4.length}\n * @function\n */\nvec4.len = vec4.length;\n\n/**\n * Calculates the squared length of a vec4\n *\n * @param {vec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nvec4.squaredLength = function (a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2],\n        w = a[3];\n    return x*x + y*y + z*z + w*w;\n};\n\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\nvec4.sqrLen = vec4.squaredLength;\n\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to negate\n * @returns {vec4} out\n */\nvec4.negate = function(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    out[3] = -a[3];\n    return out;\n};\n\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to invert\n * @returns {vec4} out\n */\nvec4.inverse = function(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n};\n\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to normalize\n * @returns {vec4} out\n */\nvec4.normalize = function(out, a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2],\n        w = a[3];\n    var len = x*x + y*y + z*z + w*w;\n    if (len > 0) {\n        len = 1 / Math.sqrt(len);\n        out[0] = x * len;\n        out[1] = y * len;\n        out[2] = z * len;\n        out[3] = w * len;\n    }\n    return out;\n};\n\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} dot product of a and b\n */\nvec4.dot = function (a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n};\n\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec4} out\n */\nvec4.lerp = function (out, a, b, t) {\n    var ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    out[2] = az + t * (b[2] - az);\n    out[3] = aw + t * (b[3] - aw);\n    return out;\n};\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */\nvec4.random = function (out, scale) {\n    scale = scale || 1.0;\n\n    //TODO: This is a pretty awful way of doing this. Find something better.\n    out[0] = glMatrix.RANDOM();\n    out[1] = glMatrix.RANDOM();\n    out[2] = glMatrix.RANDOM();\n    out[3] = glMatrix.RANDOM();\n    vec4.normalize(out, out);\n    vec4.scale(out, out, scale);\n    return out;\n};\n\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec4} out\n */\nvec4.transformMat4 = function(out, a, m) {\n    var x = a[0], y = a[1], z = a[2], w = a[3];\n    out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n    out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n    out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n    out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n    return out;\n};\n\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec4} out\n */\nvec4.transformQuat = function(out, a, q) {\n    var x = a[0], y = a[1], z = a[2],\n        qx = q[0], qy = q[1], qz = q[2], qw = q[3],\n\n        // calculate quat * vec\n        ix = qw * x + qy * z - qz * y,\n        iy = qw * y + qz * x - qx * z,\n        iz = qw * z + qx * y - qy * x,\n        iw = -qx * x - qy * y - qz * z;\n\n    // calculate result * inverse quat\n    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nvec4.forEach = (function() {\n    var vec = vec4.create();\n\n    return function(a, stride, offset, count, fn, arg) {\n        var i, l;\n        if(!stride) {\n            stride = 4;\n        }\n\n        if(!offset) {\n            offset = 0;\n        }\n        \n        if(count) {\n            l = Math.min((count * stride) + offset, a.length);\n        } else {\n            l = a.length;\n        }\n\n        for(i = offset; i < l; i += stride) {\n            vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2]; vec[3] = a[i+3];\n            fn(vec, vec, arg);\n            a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2]; a[i+3] = vec[3];\n        }\n        \n        return a;\n    };\n})();\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec4} vec vector to represent as a string\n * @returns {String} string representation of the vector\n */\nvec4.str = function (a) {\n    return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n};\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec4} a The first vector.\n * @param {vec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nvec4.exactEquals = function (a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n};\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec4} a The first vector.\n * @param {vec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nvec4.equals = function (a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n            Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)));\n};\n\nmodule.exports = vec4;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gl-matrix/src/gl-matrix/vec4.js\n// module id = 13\n// module chunks = 0","export enum ChunkType {\r\n    Header = 0x49484452,\r\n    Palette = 0x504C5445,\r\n    Data = 0x49444154,\r\n    End = 0x49454E44\r\n}\r\n\r\nexport type BitDepth = 1 | 2 | 4 | 8 | 16;\r\n\r\nexport enum ColorType {\r\n    Greyscale = 0,\r\n    Truecolor = 2,\r\n    Indexed = 3,\r\n    GreyscaleAlpha = 4,\r\n    TruecolorAlpha = 6\r\n}\r\n\r\nexport const SIGN_OFFSET = 8;\r\nexport const LENGTH_LENGTH = 4;\r\nexport const TYPE_LENGTH = 4;\r\nexport const CRC_LENGTH = 4;\n\n\n// WEBPACK FOOTER //\n// ./src/PngReader/constants.ts","'use strict';\n\n// Note: adler32 takes 12% for level 0 and 2% for level 6.\n// It doesn't worth to make additional optimizationa as in original.\n// Small size is preferable.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction adler32(adler, buf, len, pos) {\n  var s1 = (adler & 0xffff) |0,\n      s2 = ((adler >>> 16) & 0xffff) |0,\n      n = 0;\n\n  while (len !== 0) {\n    // Set limit ~ twice less than 5552, to keep\n    // s2 in 31-bits, because we force signed ints.\n    // in other case %= will fail.\n    n = len > 2000 ? 2000 : len;\n    len -= n;\n\n    do {\n      s1 = (s1 + buf[pos++]) |0;\n      s2 = (s2 + s1) |0;\n    } while (--n);\n\n    s1 %= 65521;\n    s2 %= 65521;\n  }\n\n  return (s1 | (s2 << 16)) |0;\n}\n\n\nmodule.exports = adler32;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/pako/lib/zlib/adler32.js\n// module id = 15\n// module chunks = 0","'use strict';\n\n// Note: we can't get significant speed boost here.\n// So write code to minimize size - no pregenerated tables\n// and array tools dependencies.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// Use ordinary array, since untyped makes no boost here\nfunction makeTable() {\n  var c, table = [];\n\n  for (var n = 0; n < 256; n++) {\n    c = n;\n    for (var k = 0; k < 8; k++) {\n      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));\n    }\n    table[n] = c;\n  }\n\n  return table;\n}\n\n// Create table on load. Just 255 signed longs. Not a problem.\nvar crcTable = makeTable();\n\n\nfunction crc32(crc, buf, len, pos) {\n  var t = crcTable,\n      end = pos + len;\n\n  crc ^= -1;\n\n  for (var i = pos; i < end; i++) {\n    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];\n  }\n\n  return (crc ^ (-1)); // >>> 0;\n}\n\n\nmodule.exports = crc32;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/pako/lib/zlib/crc32.js\n// module id = 16\n// module chunks = 0","// String encode/decode helpers\n'use strict';\n\n\nvar utils = require('./common');\n\n\n// Quick check if we can use fast array to bin string conversion\n//\n// - apply(Array) can fail on Android 2.2\n// - apply(Uint8Array) can fail on iOS 5.1 Safary\n//\nvar STR_APPLY_OK = true;\nvar STR_APPLY_UIA_OK = true;\n\ntry { String.fromCharCode.apply(null, [ 0 ]); } catch (__) { STR_APPLY_OK = false; }\ntry { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }\n\n\n// Table with utf8 lengths (calculated by first byte of sequence)\n// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,\n// because max possible codepoint is 0x10ffff\nvar _utf8len = new utils.Buf8(256);\nfor (var q = 0; q < 256; q++) {\n  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);\n}\n_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start\n\n\n// convert string to array (typed, when possible)\nexports.string2buf = function (str) {\n  var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;\n\n  // count binary size\n  for (m_pos = 0; m_pos < str_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;\n  }\n\n  // allocate buffer\n  buf = new utils.Buf8(buf_len);\n\n  // convert\n  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    if (c < 0x80) {\n      /* one byte */\n      buf[i++] = c;\n    } else if (c < 0x800) {\n      /* two bytes */\n      buf[i++] = 0xC0 | (c >>> 6);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else if (c < 0x10000) {\n      /* three bytes */\n      buf[i++] = 0xE0 | (c >>> 12);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else {\n      /* four bytes */\n      buf[i++] = 0xf0 | (c >>> 18);\n      buf[i++] = 0x80 | (c >>> 12 & 0x3f);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    }\n  }\n\n  return buf;\n};\n\n// Helper (used in 2 places)\nfunction buf2binstring(buf, len) {\n  // use fallback for big arrays to avoid stack overflow\n  if (len < 65537) {\n    if ((buf.subarray && STR_APPLY_UIA_OK) || (!buf.subarray && STR_APPLY_OK)) {\n      return String.fromCharCode.apply(null, utils.shrinkBuf(buf, len));\n    }\n  }\n\n  var result = '';\n  for (var i = 0; i < len; i++) {\n    result += String.fromCharCode(buf[i]);\n  }\n  return result;\n}\n\n\n// Convert byte array to binary string\nexports.buf2binstring = function (buf) {\n  return buf2binstring(buf, buf.length);\n};\n\n\n// Convert binary string (typed, when possible)\nexports.binstring2buf = function (str) {\n  var buf = new utils.Buf8(str.length);\n  for (var i = 0, len = buf.length; i < len; i++) {\n    buf[i] = str.charCodeAt(i);\n  }\n  return buf;\n};\n\n\n// convert array to string\nexports.buf2string = function (buf, max) {\n  var i, out, c, c_len;\n  var len = max || buf.length;\n\n  // Reserve max possible length (2 words per char)\n  // NB: by unknown reasons, Array is significantly faster for\n  //     String.fromCharCode.apply than Uint16Array.\n  var utf16buf = new Array(len * 2);\n\n  for (out = 0, i = 0; i < len;) {\n    c = buf[i++];\n    // quick process ascii\n    if (c < 0x80) { utf16buf[out++] = c; continue; }\n\n    c_len = _utf8len[c];\n    // skip 5 & 6 byte codes\n    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }\n\n    // apply mask on first byte\n    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;\n    // join the rest\n    while (c_len > 1 && i < len) {\n      c = (c << 6) | (buf[i++] & 0x3f);\n      c_len--;\n    }\n\n    // terminated by end of string?\n    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }\n\n    if (c < 0x10000) {\n      utf16buf[out++] = c;\n    } else {\n      c -= 0x10000;\n      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);\n      utf16buf[out++] = 0xdc00 | (c & 0x3ff);\n    }\n  }\n\n  return buf2binstring(utf16buf, out);\n};\n\n\n// Calculate max possible position in utf8 buffer,\n// that will not break sequence. If that's not possible\n// - (very small limits) return max size as is.\n//\n// buf[] - utf8 bytes array\n// max   - length limit (mandatory);\nexports.utf8border = function (buf, max) {\n  var pos;\n\n  max = max || buf.length;\n  if (max > buf.length) { max = buf.length; }\n\n  // go back from last position, until start of sequence found\n  pos = max - 1;\n  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }\n\n  // Fuckup - very small and broken sequence,\n  // return max, because we should return something anyway.\n  if (pos < 0) { return max; }\n\n  // If we came to start of buffer - that means vuffer is too small,\n  // return max too.\n  if (pos === 0) { return max; }\n\n  return (pos + _utf8len[buf[pos]] > max) ? pos : max;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/pako/lib/utils/strings.js\n// module id = 17\n// module chunks = 0","'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction ZStream() {\n  /* next input byte */\n  this.input = null; // JS specific, because we have no pointers\n  this.next_in = 0;\n  /* number of bytes available at input */\n  this.avail_in = 0;\n  /* total number of input bytes read so far */\n  this.total_in = 0;\n  /* next output byte should be put there */\n  this.output = null; // JS specific, because we have no pointers\n  this.next_out = 0;\n  /* remaining free space at output */\n  this.avail_out = 0;\n  /* total number of bytes output so far */\n  this.total_out = 0;\n  /* last error message, NULL if no error */\n  this.msg = ''/*Z_NULL*/;\n  /* not visible by applications */\n  this.state = null;\n  /* best guess about the data type: binary or text */\n  this.data_type = 2/*Z_UNKNOWN*/;\n  /* adler32 value of the uncompressed data */\n  this.adler = 0;\n}\n\nmodule.exports = ZStream;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/pako/lib/zlib/zstream.js\n// module id = 18\n// module chunks = 0","'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nmodule.exports = {\n\n  /* Allowed flush values; see deflate() and inflate() below for details */\n  Z_NO_FLUSH:         0,\n  Z_PARTIAL_FLUSH:    1,\n  Z_SYNC_FLUSH:       2,\n  Z_FULL_FLUSH:       3,\n  Z_FINISH:           4,\n  Z_BLOCK:            5,\n  Z_TREES:            6,\n\n  /* Return codes for the compression/decompression functions. Negative values\n  * are errors, positive values are used for special but normal events.\n  */\n  Z_OK:               0,\n  Z_STREAM_END:       1,\n  Z_NEED_DICT:        2,\n  Z_ERRNO:           -1,\n  Z_STREAM_ERROR:    -2,\n  Z_DATA_ERROR:      -3,\n  //Z_MEM_ERROR:     -4,\n  Z_BUF_ERROR:       -5,\n  //Z_VERSION_ERROR: -6,\n\n  /* compression levels */\n  Z_NO_COMPRESSION:         0,\n  Z_BEST_SPEED:             1,\n  Z_BEST_COMPRESSION:       9,\n  Z_DEFAULT_COMPRESSION:   -1,\n\n\n  Z_FILTERED:               1,\n  Z_HUFFMAN_ONLY:           2,\n  Z_RLE:                    3,\n  Z_FIXED:                  4,\n  Z_DEFAULT_STRATEGY:       0,\n\n  /* Possible values of the data_type field (though see inflate()) */\n  Z_BINARY:                 0,\n  Z_TEXT:                   1,\n  //Z_ASCII:                1, // = Z_TEXT (deprecated)\n  Z_UNKNOWN:                2,\n\n  /* The deflate compression method */\n  Z_DEFLATED:               8\n  //Z_NULL:                 null // Use -1 or null inline, depending on var type\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/pako/lib/zlib/constants.js\n// module id = 19\n// module chunks = 0","\r\nimport { Renderer, Renderable, TextBuffer, TileBuffer, Sprite, QuadBuffer, MIN_Z, FontInfo, Transform2d, IndexedTexture, PaletteTexture } from \"./core\";\r\nimport { initWebGl, createAlphaTexture, createTexture, createTileSprite } from './helpers';\r\nimport * as twgl from \"twgl.js\";\r\nimport Stats = require(\"stats.js\");\r\nimport * as SPECTOR from \"spectorjs\";\r\nimport { stringToBuffer } from \"./BinaryHelpers\";\r\nimport { PngReader } from \"./PngReader/PngReader\";\r\n\r\n\r\nconst spector = new SPECTOR.Spector();\r\nspector.displayUI();\r\nspector.spyCanvases();\r\n\r\n\r\nlet gl: WebGLRenderingContext;\r\nlet t = 0;\r\nlet renderer: Renderer;\r\n\r\nlet tiles: Renderable<TileBuffer>;\r\nlet text: Renderable<TextBuffer>;\r\n\r\nasync function main(){\r\n    \r\n    var stats = new Stats();\r\n    stats.showPanel( 0 ); // 0: fps, 1: ms, 2: mb, 3+: custom\r\n    document.body.appendChild( stats.dom );\r\n\r\n    gl = initWebGl();\r\n\r\n    \r\n    let vs = <string>require(\"../res/shaders/8bit_vs.glsl\");\r\n    let fs = <string>require(\"../res/shaders/8bit_fs.glsl\");\r\n    //let fs24 = <string>require(\"../res/shaders/24bit_fs.glsl\");\r\n    let programInfo = twgl.createProgramInfo(gl, [vs, fs]);  \r\n    \r\n    const palette = new PaletteTexture(gl).create();\r\n\r\n    const tilesetPng = new PngReader(stringToBuffer(require(\"../res/textures/8bit/tiles.png\")));\r\n    const tileset = new IndexedTexture(gl).create();\r\n    tileset.setRawData(tilesetPng.createPixelData());\r\n    palette.setRawPalette(0, tilesetPng.createPaletteDataRgba(256));\r\n\r\n    const fontPng = new PngReader(stringToBuffer(require(\"../res/textures/8bit/font.png\")));\r\n    const font = new IndexedTexture(gl).create();\r\n    const fontInfo = <FontInfo>require(\"../res/fonts/font.json\");\r\n    font.setRawData(fontPng.createPixelData());\r\n    palette.setRawPalette(1, fontPng.createPaletteDataRgba(256));\r\n\r\n    renderer = new Renderer(gl, {\r\n        shader: programInfo,\r\n        palette: palette,\r\n        texture: font,\r\n        paletteId: 0,\r\n        zSort: true,\r\n        blendMode: \"none\"\r\n    });\r\n\r\n    tiles = createTileSprite(gl, tileset, palette, 0);\r\n\r\n    // const vertBuffer = gl.createBuffer();\r\n    // gl.bindBuffer(gl.ARRAY_BUFFER, vertBuffer);\r\n    // gl.bufferData(gl.ARRAY_BUFFER, tiles.buffer._data, gl.STATIC_DRAW);\r\n\r\n    // const indexBuffer = gl.createBuffer();\r\n    // gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);\r\n    // gl.bufferData(gl.ARRAY_BUFFER, tiles.buffer._indices, gl.STATIC_DRAW);\r\n\r\n    // //each draw?\r\n    // gl.bindBuffer(gl.ARRAY_BUFFER, vertBuffer);\r\n    // gl.vertexAttribPointer(0, 2, gl.UNSIGNED_SHORT, false, 8, 0);\r\n    // gl.vertexAttribPointer(1, 1, gl.UNSIGNED_BYTE, false, 8, 4);\r\n    // gl.vertexAttribPointer(2, 1, gl.UNSIGNED_BYTE, true, 8, 5);\r\n    // gl.vertexAttribPointer(3, 2, gl.UNSIGNED_BYTE, false, 8, 6);\r\n\r\n    // gl.useProgram(renderer._defaults.shader.program);\r\n\r\n    //let tiles2 = createTileSprite(tileset, palette, 1);\r\n    \r\n    let fntBuffer = new TextBuffer(gl, fontInfo).create();\r\n    fntBuffer.write(\"Start Game\", 320, 130,50,4,4);\r\n    fntBuffer.write(\"Load Game\", 320, 130,50+16,4);\r\n    fntBuffer.write(\"Settings\", 320, 130,50+16*2,4);\r\n    fntBuffer.write(\"Quit\", 320, 130,50+16*3,4);    \r\n    text = new Renderable({\r\n        buffer: fntBuffer,\r\n        texture: font,\r\n        paletteId: 1\r\n    });\r\n\r\n    let sprites: Sprite[] = [];\r\n    for (var i = 0; i < \"Start Game\".length; i++) {\r\n        let sprite = fntBuffer.createSprite(i);\r\n        sprites.push(sprite);\r\n    }\r\n\r\n    const test = new QuadBuffer(gl).create();\r\n    const sprites2: Sprite[] = [];\r\n\r\n    const testR = new Renderable({\r\n        buffer: test,\r\n        texture: tileset,\r\n        paletteId: 0\r\n    });\r\n\r\n    renderer.renderList.push(tiles);\r\n    renderer.renderList.push(text);\r\n    renderer.renderList.push(testR);\r\n\r\n    let a = .5;\r\n\r\n    function render(time: number) {\r\n        stats.begin();\r\n        \r\n        t+=0.1;\r\n        a*=0.9;\r\n        sprites.forEach(s => s.transform.y = Math.sin(s.x/4+t)*3);\r\n\r\n        const spr = test.createSprite(test.add(), new Transform2d(), {\r\n            w: 2,\r\n            h: 2,\r\n            palOffset: 0,\r\n            textureX: 32,\r\n            textureY: 0,\r\n            x: 1,\r\n            y: 1,\r\n            z: 250\r\n        });\r\n        spr.tag[\"dx\"] = Math.random();\r\n        spr.tag[\"dy\"] = Math.random();\r\n        sprites2.push(spr);\r\n\r\n        sprites2.forEach(s => {\r\n            if(s.transform.x > 320 || s.transform.x < 0){\r\n                s.tag[\"dx\"] = -s.tag[\"dx\"]; \r\n            }\r\n            if(s.transform.y > 180 || s.transform.y < 0){\r\n                s.tag[\"dy\"] = -s.tag[\"dy\"]; \r\n            }\r\n            s.transform.x += s.tag[\"dx\"];\r\n            s.transform.y += s.tag[\"dy\"];\r\n        })\r\n        //sprites2.forEach(s => s.transform.update());\r\n        \r\n\r\n        renderer.render();\r\n        \r\n        stats.end();\r\n        requestAnimationFrame(render);\r\n    }\r\n    requestAnimationFrame(render);\r\n\r\n    let posx = 0;\r\n    let posy = 0;\r\n\r\n    setInterval(()=> {\r\n        //tiles.transform.x = Math.floor((posx -= 0.1)%(4*16));\r\n        //tiles.transform.y = Math.floor((posy -= 0.1)%(16));\r\n    }, 16);\r\n\r\n}\r\n\r\nmain();\n\n\n// WEBPACK FOOTER //\n// ./src/main.ts","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = require(\"./common.js\");\n\n/**\n * @class 2x2 Matrix\n * @name mat2\n */\nvar mat2 = {};\n\n/**\n * Creates a new identity mat2\n *\n * @returns {mat2} a new 2x2 matrix\n */\nmat2.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(4);\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n};\n\n/**\n * Creates a new mat2 initialized with values from an existing matrix\n *\n * @param {mat2} a matrix to clone\n * @returns {mat2} a new 2x2 matrix\n */\nmat2.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(4);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Copy the values from one mat2 to another\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nmat2.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Set a mat2 to the identity matrix\n *\n * @param {mat2} out the receiving matrix\n * @returns {mat2} out\n */\nmat2.identity = function(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n};\n\n/**\n * Create a new mat2 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\n * @returns {mat2} out A new 2x2 matrix\n */\nmat2.fromValues = function(m00, m01, m10, m11) {\n    var out = new glMatrix.ARRAY_TYPE(4);\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m10;\n    out[3] = m11;\n    return out;\n};\n\n/**\n * Set the components of a mat2 to the given values\n *\n * @param {mat2} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\n * @returns {mat2} out\n */\nmat2.set = function(out, m00, m01, m10, m11) {\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m10;\n    out[3] = m11;\n    return out;\n};\n\n\n/**\n * Transpose the values of a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nmat2.transpose = function(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        var a1 = a[1];\n        out[1] = a[2];\n        out[2] = a1;\n    } else {\n        out[0] = a[0];\n        out[1] = a[2];\n        out[2] = a[1];\n        out[3] = a[3];\n    }\n    \n    return out;\n};\n\n/**\n * Inverts a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nmat2.invert = function(out, a) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],\n\n        // Calculate the determinant\n        det = a0 * a3 - a2 * a1;\n\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n    \n    out[0] =  a3 * det;\n    out[1] = -a1 * det;\n    out[2] = -a2 * det;\n    out[3] =  a0 * det;\n\n    return out;\n};\n\n/**\n * Calculates the adjugate of a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nmat2.adjoint = function(out, a) {\n    // Caching this value is nessecary if out == a\n    var a0 = a[0];\n    out[0] =  a[3];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    out[3] =  a0;\n\n    return out;\n};\n\n/**\n * Calculates the determinant of a mat2\n *\n * @param {mat2} a the source matrix\n * @returns {Number} determinant of a\n */\nmat2.determinant = function (a) {\n    return a[0] * a[3] - a[2] * a[1];\n};\n\n/**\n * Multiplies two mat2's\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @returns {mat2} out\n */\nmat2.multiply = function (out, a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n    out[0] = a0 * b0 + a2 * b1;\n    out[1] = a1 * b0 + a3 * b1;\n    out[2] = a0 * b2 + a2 * b3;\n    out[3] = a1 * b2 + a3 * b3;\n    return out;\n};\n\n/**\n * Alias for {@link mat2.multiply}\n * @function\n */\nmat2.mul = mat2.multiply;\n\n/**\n * Rotates a mat2 by the given angle\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2} out\n */\nmat2.rotate = function (out, a, rad) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],\n        s = Math.sin(rad),\n        c = Math.cos(rad);\n    out[0] = a0 *  c + a2 * s;\n    out[1] = a1 *  c + a3 * s;\n    out[2] = a0 * -s + a2 * c;\n    out[3] = a1 * -s + a3 * c;\n    return out;\n};\n\n/**\n * Scales the mat2 by the dimensions in the given vec2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the matrix to rotate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat2} out\n **/\nmat2.scale = function(out, a, v) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],\n        v0 = v[0], v1 = v[1];\n    out[0] = a0 * v0;\n    out[1] = a1 * v0;\n    out[2] = a2 * v1;\n    out[3] = a3 * v1;\n    return out;\n};\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat2.identity(dest);\n *     mat2.rotate(dest, dest, rad);\n *\n * @param {mat2} out mat2 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2} out\n */\nmat2.fromRotation = function(out, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad);\n    out[0] = c;\n    out[1] = s;\n    out[2] = -s;\n    out[3] = c;\n    return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat2.identity(dest);\n *     mat2.scale(dest, dest, vec);\n *\n * @param {mat2} out mat2 receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat2} out\n */\nmat2.fromScaling = function(out, v) {\n    out[0] = v[0];\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = v[1];\n    return out;\n}\n\n/**\n * Returns a string representation of a mat2\n *\n * @param {mat2} mat matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nmat2.str = function (a) {\n    return 'mat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n};\n\n/**\n * Returns Frobenius norm of a mat2\n *\n * @param {mat2} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nmat2.frob = function (a) {\n    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2)))\n};\n\n/**\n * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix\n * @param {mat2} L the lower triangular matrix \n * @param {mat2} D the diagonal matrix \n * @param {mat2} U the upper triangular matrix \n * @param {mat2} a the input matrix to factorize\n */\n\nmat2.LDU = function (L, D, U, a) { \n    L[2] = a[2]/a[0]; \n    U[0] = a[0]; \n    U[1] = a[1]; \n    U[3] = a[3] - L[2] * U[1]; \n    return [L, D, U];       \n}; \n\n/**\n * Adds two mat2's\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @returns {mat2} out\n */\nmat2.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    return out;\n};\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @returns {mat2} out\n */\nmat2.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    return out;\n};\n\n/**\n * Alias for {@link mat2.subtract}\n * @function\n */\nmat2.sub = mat2.subtract;\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat2} a The first matrix.\n * @param {mat2} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat2.exactEquals = function (a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n};\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat2} a The first matrix.\n * @param {mat2} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat2.equals = function (a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n            Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)));\n};\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat2} out\n */\nmat2.multiplyScalar = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    return out;\n};\n\n/**\n * Adds two mat2's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat2} out the receiving vector\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat2} out\n */\nmat2.multiplyScalarAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    out[2] = a[2] + (b[2] * scale);\n    out[3] = a[3] + (b[3] * scale);\n    return out;\n};\n\nmodule.exports = mat2;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gl-matrix/src/gl-matrix/mat2.js\n// module id = 21\n// module chunks = 0","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = require(\"./common.js\");\n\n/**\n * @class 2x3 Matrix\n * @name mat2d\n * \n * @description \n * A mat2d contains six elements defined as:\n * <pre>\n * [a, c, tx,\n *  b, d, ty]\n * </pre>\n * This is a short form for the 3x3 matrix:\n * <pre>\n * [a, c, tx,\n *  b, d, ty,\n *  0, 0, 1]\n * </pre>\n * The last row is ignored so the array is shorter and operations are faster.\n */\nvar mat2d = {};\n\n/**\n * Creates a new identity mat2d\n *\n * @returns {mat2d} a new 2x3 matrix\n */\nmat2d.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(6);\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    out[4] = 0;\n    out[5] = 0;\n    return out;\n};\n\n/**\n * Creates a new mat2d initialized with values from an existing matrix\n *\n * @param {mat2d} a matrix to clone\n * @returns {mat2d} a new 2x3 matrix\n */\nmat2d.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(6);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    return out;\n};\n\n/**\n * Copy the values from one mat2d to another\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the source matrix\n * @returns {mat2d} out\n */\nmat2d.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    return out;\n};\n\n/**\n * Set a mat2d to the identity matrix\n *\n * @param {mat2d} out the receiving matrix\n * @returns {mat2d} out\n */\nmat2d.identity = function(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    out[4] = 0;\n    out[5] = 0;\n    return out;\n};\n\n/**\n * Create a new mat2d with the given values\n *\n * @param {Number} a Component A (index 0)\n * @param {Number} b Component B (index 1)\n * @param {Number} c Component C (index 2)\n * @param {Number} d Component D (index 3)\n * @param {Number} tx Component TX (index 4)\n * @param {Number} ty Component TY (index 5)\n * @returns {mat2d} A new mat2d\n */\nmat2d.fromValues = function(a, b, c, d, tx, ty) {\n    var out = new glMatrix.ARRAY_TYPE(6);\n    out[0] = a;\n    out[1] = b;\n    out[2] = c;\n    out[3] = d;\n    out[4] = tx;\n    out[5] = ty;\n    return out;\n};\n\n/**\n * Set the components of a mat2d to the given values\n *\n * @param {mat2d} out the receiving matrix\n * @param {Number} a Component A (index 0)\n * @param {Number} b Component B (index 1)\n * @param {Number} c Component C (index 2)\n * @param {Number} d Component D (index 3)\n * @param {Number} tx Component TX (index 4)\n * @param {Number} ty Component TY (index 5)\n * @returns {mat2d} out\n */\nmat2d.set = function(out, a, b, c, d, tx, ty) {\n    out[0] = a;\n    out[1] = b;\n    out[2] = c;\n    out[3] = d;\n    out[4] = tx;\n    out[5] = ty;\n    return out;\n};\n\n/**\n * Inverts a mat2d\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the source matrix\n * @returns {mat2d} out\n */\nmat2d.invert = function(out, a) {\n    var aa = a[0], ab = a[1], ac = a[2], ad = a[3],\n        atx = a[4], aty = a[5];\n\n    var det = aa * ad - ab * ac;\n    if(!det){\n        return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = ad * det;\n    out[1] = -ab * det;\n    out[2] = -ac * det;\n    out[3] = aa * det;\n    out[4] = (ac * aty - ad * atx) * det;\n    out[5] = (ab * atx - aa * aty) * det;\n    return out;\n};\n\n/**\n * Calculates the determinant of a mat2d\n *\n * @param {mat2d} a the source matrix\n * @returns {Number} determinant of a\n */\nmat2d.determinant = function (a) {\n    return a[0] * a[3] - a[1] * a[2];\n};\n\n/**\n * Multiplies two mat2d's\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @returns {mat2d} out\n */\nmat2d.multiply = function (out, a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],\n        b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];\n    out[0] = a0 * b0 + a2 * b1;\n    out[1] = a1 * b0 + a3 * b1;\n    out[2] = a0 * b2 + a2 * b3;\n    out[3] = a1 * b2 + a3 * b3;\n    out[4] = a0 * b4 + a2 * b5 + a4;\n    out[5] = a1 * b4 + a3 * b5 + a5;\n    return out;\n};\n\n/**\n * Alias for {@link mat2d.multiply}\n * @function\n */\nmat2d.mul = mat2d.multiply;\n\n/**\n * Rotates a mat2d by the given angle\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2d} out\n */\nmat2d.rotate = function (out, a, rad) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],\n        s = Math.sin(rad),\n        c = Math.cos(rad);\n    out[0] = a0 *  c + a2 * s;\n    out[1] = a1 *  c + a3 * s;\n    out[2] = a0 * -s + a2 * c;\n    out[3] = a1 * -s + a3 * c;\n    out[4] = a4;\n    out[5] = a5;\n    return out;\n};\n\n/**\n * Scales the mat2d by the dimensions in the given vec2\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to translate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat2d} out\n **/\nmat2d.scale = function(out, a, v) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],\n        v0 = v[0], v1 = v[1];\n    out[0] = a0 * v0;\n    out[1] = a1 * v0;\n    out[2] = a2 * v1;\n    out[3] = a3 * v1;\n    out[4] = a4;\n    out[5] = a5;\n    return out;\n};\n\n/**\n * Translates the mat2d by the dimensions in the given vec2\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to translate\n * @param {vec2} v the vec2 to translate the matrix by\n * @returns {mat2d} out\n **/\nmat2d.translate = function(out, a, v) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],\n        v0 = v[0], v1 = v[1];\n    out[0] = a0;\n    out[1] = a1;\n    out[2] = a2;\n    out[3] = a3;\n    out[4] = a0 * v0 + a2 * v1 + a4;\n    out[5] = a1 * v0 + a3 * v1 + a5;\n    return out;\n};\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.rotate(dest, dest, rad);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2d} out\n */\nmat2d.fromRotation = function(out, rad) {\n    var s = Math.sin(rad), c = Math.cos(rad);\n    out[0] = c;\n    out[1] = s;\n    out[2] = -s;\n    out[3] = c;\n    out[4] = 0;\n    out[5] = 0;\n    return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.scale(dest, dest, vec);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat2d} out\n */\nmat2d.fromScaling = function(out, v) {\n    out[0] = v[0];\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = v[1];\n    out[4] = 0;\n    out[5] = 0;\n    return out;\n}\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.translate(dest, dest, vec);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {vec2} v Translation vector\n * @returns {mat2d} out\n */\nmat2d.fromTranslation = function(out, v) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    out[4] = v[0];\n    out[5] = v[1];\n    return out;\n}\n\n/**\n * Returns a string representation of a mat2d\n *\n * @param {mat2d} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nmat2d.str = function (a) {\n    return 'mat2d(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + \n                    a[3] + ', ' + a[4] + ', ' + a[5] + ')';\n};\n\n/**\n * Returns Frobenius norm of a mat2d\n *\n * @param {mat2d} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nmat2d.frob = function (a) { \n    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + 1))\n}; \n\n/**\n * Adds two mat2d's\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @returns {mat2d} out\n */\nmat2d.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    out[4] = a[4] + b[4];\n    out[5] = a[5] + b[5];\n    return out;\n};\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @returns {mat2d} out\n */\nmat2d.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    out[4] = a[4] - b[4];\n    out[5] = a[5] - b[5];\n    return out;\n};\n\n/**\n * Alias for {@link mat2d.subtract}\n * @function\n */\nmat2d.sub = mat2d.subtract;\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat2d} out\n */\nmat2d.multiplyScalar = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    out[4] = a[4] * b;\n    out[5] = a[5] * b;\n    return out;\n};\n\n/**\n * Adds two mat2d's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat2d} out the receiving vector\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat2d} out\n */\nmat2d.multiplyScalarAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    out[2] = a[2] + (b[2] * scale);\n    out[3] = a[3] + (b[3] * scale);\n    out[4] = a[4] + (b[4] * scale);\n    out[5] = a[5] + (b[5] * scale);\n    return out;\n};\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat2d} a The first matrix.\n * @param {mat2d} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat2d.exactEquals = function (a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];\n};\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat2d} a The first matrix.\n * @param {mat2d} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat2d.equals = function (a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\n    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];\n    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n            Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n            Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n            Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)));\n};\n\nmodule.exports = mat2d;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gl-matrix/src/gl-matrix/mat2d.js\n// module id = 22\n// module chunks = 0","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = require(\"./common.js\");\n\n/**\n * @class 4x4 Matrix\n * @name mat4\n */\nvar mat4 = {\n  scalar: {},\n  SIMD: {},\n};\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\nmat4.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(16);\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n};\n\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {mat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\nmat4.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(16);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n};\n\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n};\n\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\nmat4.fromValues = function(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n    var out = new glMatrix.ARRAY_TYPE(16);\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m03;\n    out[4] = m10;\n    out[5] = m11;\n    out[6] = m12;\n    out[7] = m13;\n    out[8] = m20;\n    out[9] = m21;\n    out[10] = m22;\n    out[11] = m23;\n    out[12] = m30;\n    out[13] = m31;\n    out[14] = m32;\n    out[15] = m33;\n    return out;\n};\n\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\nmat4.set = function(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m03;\n    out[4] = m10;\n    out[5] = m11;\n    out[6] = m12;\n    out[7] = m13;\n    out[8] = m20;\n    out[9] = m21;\n    out[10] = m22;\n    out[11] = m23;\n    out[12] = m30;\n    out[13] = m31;\n    out[14] = m32;\n    out[15] = m33;\n    return out;\n};\n\n\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\nmat4.identity = function(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n};\n\n/**\n * Transpose the values of a mat4 not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.scalar.transpose = function(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        var a01 = a[1], a02 = a[2], a03 = a[3],\n            a12 = a[6], a13 = a[7],\n            a23 = a[11];\n\n        out[1] = a[4];\n        out[2] = a[8];\n        out[3] = a[12];\n        out[4] = a01;\n        out[6] = a[9];\n        out[7] = a[13];\n        out[8] = a02;\n        out[9] = a12;\n        out[11] = a[14];\n        out[12] = a03;\n        out[13] = a13;\n        out[14] = a23;\n    } else {\n        out[0] = a[0];\n        out[1] = a[4];\n        out[2] = a[8];\n        out[3] = a[12];\n        out[4] = a[1];\n        out[5] = a[5];\n        out[6] = a[9];\n        out[7] = a[13];\n        out[8] = a[2];\n        out[9] = a[6];\n        out[10] = a[10];\n        out[11] = a[14];\n        out[12] = a[3];\n        out[13] = a[7];\n        out[14] = a[11];\n        out[15] = a[15];\n    }\n\n    return out;\n};\n\n/**\n * Transpose the values of a mat4 using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.SIMD.transpose = function(out, a) {\n    var a0, a1, a2, a3,\n        tmp01, tmp23,\n        out0, out1, out2, out3;\n\n    a0 = SIMD.Float32x4.load(a, 0);\n    a1 = SIMD.Float32x4.load(a, 4);\n    a2 = SIMD.Float32x4.load(a, 8);\n    a3 = SIMD.Float32x4.load(a, 12);\n\n    tmp01 = SIMD.Float32x4.shuffle(a0, a1, 0, 1, 4, 5);\n    tmp23 = SIMD.Float32x4.shuffle(a2, a3, 0, 1, 4, 5);\n    out0  = SIMD.Float32x4.shuffle(tmp01, tmp23, 0, 2, 4, 6);\n    out1  = SIMD.Float32x4.shuffle(tmp01, tmp23, 1, 3, 5, 7);\n    SIMD.Float32x4.store(out, 0,  out0);\n    SIMD.Float32x4.store(out, 4,  out1);\n\n    tmp01 = SIMD.Float32x4.shuffle(a0, a1, 2, 3, 6, 7);\n    tmp23 = SIMD.Float32x4.shuffle(a2, a3, 2, 3, 6, 7);\n    out2  = SIMD.Float32x4.shuffle(tmp01, tmp23, 0, 2, 4, 6);\n    out3  = SIMD.Float32x4.shuffle(tmp01, tmp23, 1, 3, 5, 7);\n    SIMD.Float32x4.store(out, 8,  out2);\n    SIMD.Float32x4.store(out, 12, out3);\n\n    return out;\n};\n\n/**\n * Transpse a mat4 using SIMD if available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.transpose = glMatrix.USE_SIMD ? mat4.SIMD.transpose : mat4.scalar.transpose;\n\n/**\n * Inverts a mat4 not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.scalar.invert = function(out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],\n\n        b00 = a00 * a11 - a01 * a10,\n        b01 = a00 * a12 - a02 * a10,\n        b02 = a00 * a13 - a03 * a10,\n        b03 = a01 * a12 - a02 * a11,\n        b04 = a01 * a13 - a03 * a11,\n        b05 = a02 * a13 - a03 * a12,\n        b06 = a20 * a31 - a21 * a30,\n        b07 = a20 * a32 - a22 * a30,\n        b08 = a20 * a33 - a23 * a30,\n        b09 = a21 * a32 - a22 * a31,\n        b10 = a21 * a33 - a23 * a31,\n        b11 = a22 * a33 - a23 * a32,\n\n        // Calculate the determinant\n        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n\n    return out;\n};\n\n/**\n * Inverts a mat4 using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.SIMD.invert = function(out, a) {\n  var row0, row1, row2, row3,\n      tmp1,\n      minor0, minor1, minor2, minor3,\n      det,\n      a0 = SIMD.Float32x4.load(a, 0),\n      a1 = SIMD.Float32x4.load(a, 4),\n      a2 = SIMD.Float32x4.load(a, 8),\n      a3 = SIMD.Float32x4.load(a, 12);\n\n  // Compute matrix adjugate\n  tmp1 = SIMD.Float32x4.shuffle(a0, a1, 0, 1, 4, 5);\n  row1 = SIMD.Float32x4.shuffle(a2, a3, 0, 1, 4, 5);\n  row0 = SIMD.Float32x4.shuffle(tmp1, row1, 0, 2, 4, 6);\n  row1 = SIMD.Float32x4.shuffle(row1, tmp1, 1, 3, 5, 7);\n  tmp1 = SIMD.Float32x4.shuffle(a0, a1, 2, 3, 6, 7);\n  row3 = SIMD.Float32x4.shuffle(a2, a3, 2, 3, 6, 7);\n  row2 = SIMD.Float32x4.shuffle(tmp1, row3, 0, 2, 4, 6);\n  row3 = SIMD.Float32x4.shuffle(row3, tmp1, 1, 3, 5, 7);\n\n  tmp1   = SIMD.Float32x4.mul(row2, row3);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor0 = SIMD.Float32x4.mul(row1, tmp1);\n  minor1 = SIMD.Float32x4.mul(row0, tmp1);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor0 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row1, tmp1), minor0);\n  minor1 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor1);\n  minor1 = SIMD.Float32x4.swizzle(minor1, 2, 3, 0, 1);\n\n  tmp1   = SIMD.Float32x4.mul(row1, row2);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor0 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor0);\n  minor3 = SIMD.Float32x4.mul(row0, tmp1);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor0 = SIMD.Float32x4.sub(minor0, SIMD.Float32x4.mul(row3, tmp1));\n  minor3 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor3);\n  minor3 = SIMD.Float32x4.swizzle(minor3, 2, 3, 0, 1);\n\n  tmp1   = SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(row1, 2, 3, 0, 1), row3);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  row2   = SIMD.Float32x4.swizzle(row2, 2, 3, 0, 1);\n  minor0 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row2, tmp1), minor0);\n  minor2 = SIMD.Float32x4.mul(row0, tmp1);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor0 = SIMD.Float32x4.sub(minor0, SIMD.Float32x4.mul(row2, tmp1));\n  minor2 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor2);\n  minor2 = SIMD.Float32x4.swizzle(minor2, 2, 3, 0, 1);\n\n  tmp1   = SIMD.Float32x4.mul(row0, row1);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor2 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor2);\n  minor3 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row2, tmp1), minor3);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor2 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row3, tmp1), minor2);\n  minor3 = SIMD.Float32x4.sub(minor3, SIMD.Float32x4.mul(row2, tmp1));\n\n  tmp1   = SIMD.Float32x4.mul(row0, row3);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor1 = SIMD.Float32x4.sub(minor1, SIMD.Float32x4.mul(row2, tmp1));\n  minor2 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row1, tmp1), minor2);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor1 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row2, tmp1), minor1);\n  minor2 = SIMD.Float32x4.sub(minor2, SIMD.Float32x4.mul(row1, tmp1));\n\n  tmp1   = SIMD.Float32x4.mul(row0, row2);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor1 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor1);\n  minor3 = SIMD.Float32x4.sub(minor3, SIMD.Float32x4.mul(row1, tmp1));\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor1 = SIMD.Float32x4.sub(minor1, SIMD.Float32x4.mul(row3, tmp1));\n  minor3 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row1, tmp1), minor3);\n\n  // Compute matrix determinant\n  det   = SIMD.Float32x4.mul(row0, minor0);\n  det   = SIMD.Float32x4.add(SIMD.Float32x4.swizzle(det, 2, 3, 0, 1), det);\n  det   = SIMD.Float32x4.add(SIMD.Float32x4.swizzle(det, 1, 0, 3, 2), det);\n  tmp1  = SIMD.Float32x4.reciprocalApproximation(det);\n  det   = SIMD.Float32x4.sub(\n               SIMD.Float32x4.add(tmp1, tmp1),\n               SIMD.Float32x4.mul(det, SIMD.Float32x4.mul(tmp1, tmp1)));\n  det   = SIMD.Float32x4.swizzle(det, 0, 0, 0, 0);\n  if (!det) {\n      return null;\n  }\n\n  // Compute matrix inverse\n  SIMD.Float32x4.store(out, 0,  SIMD.Float32x4.mul(det, minor0));\n  SIMD.Float32x4.store(out, 4,  SIMD.Float32x4.mul(det, minor1));\n  SIMD.Float32x4.store(out, 8,  SIMD.Float32x4.mul(det, minor2));\n  SIMD.Float32x4.store(out, 12, SIMD.Float32x4.mul(det, minor3));\n  return out;\n}\n\n/**\n * Inverts a mat4 using SIMD if available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.invert = glMatrix.USE_SIMD ? mat4.SIMD.invert : mat4.scalar.invert;\n\n/**\n * Calculates the adjugate of a mat4 not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.scalar.adjoint = function(out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n    out[0]  =  (a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22));\n    out[1]  = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n    out[2]  =  (a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12));\n    out[3]  = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n    out[4]  = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n    out[5]  =  (a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22));\n    out[6]  = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n    out[7]  =  (a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12));\n    out[8]  =  (a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21));\n    out[9]  = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n    out[10] =  (a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11));\n    out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n    out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n    out[13] =  (a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21));\n    out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n    out[15] =  (a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11));\n    return out;\n};\n\n/**\n * Calculates the adjugate of a mat4 using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.SIMD.adjoint = function(out, a) {\n  var a0, a1, a2, a3;\n  var row0, row1, row2, row3;\n  var tmp1;\n  var minor0, minor1, minor2, minor3;\n\n  var a0 = SIMD.Float32x4.load(a, 0);\n  var a1 = SIMD.Float32x4.load(a, 4);\n  var a2 = SIMD.Float32x4.load(a, 8);\n  var a3 = SIMD.Float32x4.load(a, 12);\n\n  // Transpose the source matrix.  Sort of.  Not a true transpose operation\n  tmp1 = SIMD.Float32x4.shuffle(a0, a1, 0, 1, 4, 5);\n  row1 = SIMD.Float32x4.shuffle(a2, a3, 0, 1, 4, 5);\n  row0 = SIMD.Float32x4.shuffle(tmp1, row1, 0, 2, 4, 6);\n  row1 = SIMD.Float32x4.shuffle(row1, tmp1, 1, 3, 5, 7);\n\n  tmp1 = SIMD.Float32x4.shuffle(a0, a1, 2, 3, 6, 7);\n  row3 = SIMD.Float32x4.shuffle(a2, a3, 2, 3, 6, 7);\n  row2 = SIMD.Float32x4.shuffle(tmp1, row3, 0, 2, 4, 6);\n  row3 = SIMD.Float32x4.shuffle(row3, tmp1, 1, 3, 5, 7);\n\n  tmp1   = SIMD.Float32x4.mul(row2, row3);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor0 = SIMD.Float32x4.mul(row1, tmp1);\n  minor1 = SIMD.Float32x4.mul(row0, tmp1);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor0 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row1, tmp1), minor0);\n  minor1 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor1);\n  minor1 = SIMD.Float32x4.swizzle(minor1, 2, 3, 0, 1);\n\n  tmp1   = SIMD.Float32x4.mul(row1, row2);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor0 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor0);\n  minor3 = SIMD.Float32x4.mul(row0, tmp1);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor0 = SIMD.Float32x4.sub(minor0, SIMD.Float32x4.mul(row3, tmp1));\n  minor3 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor3);\n  minor3 = SIMD.Float32x4.swizzle(minor3, 2, 3, 0, 1);\n\n  tmp1   = SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(row1, 2, 3, 0, 1), row3);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  row2   = SIMD.Float32x4.swizzle(row2, 2, 3, 0, 1);\n  minor0 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row2, tmp1), minor0);\n  minor2 = SIMD.Float32x4.mul(row0, tmp1);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor0 = SIMD.Float32x4.sub(minor0, SIMD.Float32x4.mul(row2, tmp1));\n  minor2 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor2);\n  minor2 = SIMD.Float32x4.swizzle(minor2, 2, 3, 0, 1);\n\n  tmp1   = SIMD.Float32x4.mul(row0, row1);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor2 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor2);\n  minor3 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row2, tmp1), minor3);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor2 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row3, tmp1), minor2);\n  minor3 = SIMD.Float32x4.sub(minor3, SIMD.Float32x4.mul(row2, tmp1));\n\n  tmp1   = SIMD.Float32x4.mul(row0, row3);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor1 = SIMD.Float32x4.sub(minor1, SIMD.Float32x4.mul(row2, tmp1));\n  minor2 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row1, tmp1), minor2);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor1 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row2, tmp1), minor1);\n  minor2 = SIMD.Float32x4.sub(minor2, SIMD.Float32x4.mul(row1, tmp1));\n\n  tmp1   = SIMD.Float32x4.mul(row0, row2);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor1 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor1);\n  minor3 = SIMD.Float32x4.sub(minor3, SIMD.Float32x4.mul(row1, tmp1));\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor1 = SIMD.Float32x4.sub(minor1, SIMD.Float32x4.mul(row3, tmp1));\n  minor3 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row1, tmp1), minor3);\n\n  SIMD.Float32x4.store(out, 0,  minor0);\n  SIMD.Float32x4.store(out, 4,  minor1);\n  SIMD.Float32x4.store(out, 8,  minor2);\n  SIMD.Float32x4.store(out, 12, minor3);\n  return out;\n};\n\n/**\n * Calculates the adjugate of a mat4 using SIMD if available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\n mat4.adjoint = glMatrix.USE_SIMD ? mat4.SIMD.adjoint : mat4.scalar.adjoint;\n\n/**\n * Calculates the determinant of a mat4\n *\n * @param {mat4} a the source matrix\n * @returns {Number} determinant of a\n */\nmat4.determinant = function (a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],\n\n        b00 = a00 * a11 - a01 * a10,\n        b01 = a00 * a12 - a02 * a10,\n        b02 = a00 * a13 - a03 * a10,\n        b03 = a01 * a12 - a02 * a11,\n        b04 = a01 * a13 - a03 * a11,\n        b05 = a02 * a13 - a03 * a12,\n        b06 = a20 * a31 - a21 * a30,\n        b07 = a20 * a32 - a22 * a30,\n        b08 = a20 * a33 - a23 * a30,\n        b09 = a21 * a32 - a22 * a31,\n        b10 = a21 * a33 - a23 * a31,\n        b11 = a22 * a33 - a23 * a32;\n\n    // Calculate the determinant\n    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n};\n\n/**\n * Multiplies two mat4's explicitly using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand, must be a Float32Array\n * @param {mat4} b the second operand, must be a Float32Array\n * @returns {mat4} out\n */\nmat4.SIMD.multiply = function (out, a, b) {\n    var a0 = SIMD.Float32x4.load(a, 0);\n    var a1 = SIMD.Float32x4.load(a, 4);\n    var a2 = SIMD.Float32x4.load(a, 8);\n    var a3 = SIMD.Float32x4.load(a, 12);\n\n    var b0 = SIMD.Float32x4.load(b, 0);\n    var out0 = SIMD.Float32x4.add(\n                   SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b0, 0, 0, 0, 0), a0),\n                   SIMD.Float32x4.add(\n                       SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b0, 1, 1, 1, 1), a1),\n                       SIMD.Float32x4.add(\n                           SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b0, 2, 2, 2, 2), a2),\n                           SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b0, 3, 3, 3, 3), a3))));\n    SIMD.Float32x4.store(out, 0, out0);\n\n    var b1 = SIMD.Float32x4.load(b, 4);\n    var out1 = SIMD.Float32x4.add(\n                   SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b1, 0, 0, 0, 0), a0),\n                   SIMD.Float32x4.add(\n                       SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b1, 1, 1, 1, 1), a1),\n                       SIMD.Float32x4.add(\n                           SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b1, 2, 2, 2, 2), a2),\n                           SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b1, 3, 3, 3, 3), a3))));\n    SIMD.Float32x4.store(out, 4, out1);\n\n    var b2 = SIMD.Float32x4.load(b, 8);\n    var out2 = SIMD.Float32x4.add(\n                   SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b2, 0, 0, 0, 0), a0),\n                   SIMD.Float32x4.add(\n                       SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b2, 1, 1, 1, 1), a1),\n                       SIMD.Float32x4.add(\n                               SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b2, 2, 2, 2, 2), a2),\n                               SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b2, 3, 3, 3, 3), a3))));\n    SIMD.Float32x4.store(out, 8, out2);\n\n    var b3 = SIMD.Float32x4.load(b, 12);\n    var out3 = SIMD.Float32x4.add(\n                   SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b3, 0, 0, 0, 0), a0),\n                   SIMD.Float32x4.add(\n                        SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b3, 1, 1, 1, 1), a1),\n                        SIMD.Float32x4.add(\n                            SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b3, 2, 2, 2, 2), a2),\n                            SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b3, 3, 3, 3, 3), a3))));\n    SIMD.Float32x4.store(out, 12, out3);\n\n    return out;\n};\n\n/**\n * Multiplies two mat4's explicitly not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nmat4.scalar.multiply = function (out, a, b) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n    // Cache only the current line of the second matrix\n    var b0  = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n    out[0] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n    out[1] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n    out[2] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n    out[3] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n    b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];\n    out[4] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n    out[5] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n    out[6] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n    out[7] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n    b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];\n    out[8] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n    out[9] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n    out[10] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n    out[11] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n    b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];\n    out[12] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n    out[13] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n    out[14] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n    out[15] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n    return out;\n};\n\n/**\n * Multiplies two mat4's using SIMD if available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nmat4.multiply = glMatrix.USE_SIMD ? mat4.SIMD.multiply : mat4.scalar.multiply;\n\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\nmat4.mul = mat4.multiply;\n\n/**\n * Translate a mat4 by the given vector not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to translate\n * @param {vec3} v vector to translate by\n * @returns {mat4} out\n */\nmat4.scalar.translate = function (out, a, v) {\n    var x = v[0], y = v[1], z = v[2],\n        a00, a01, a02, a03,\n        a10, a11, a12, a13,\n        a20, a21, a22, a23;\n\n    if (a === out) {\n        out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n        out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n        out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n        out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n    } else {\n        a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n        a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n        a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n        out[0] = a00; out[1] = a01; out[2] = a02; out[3] = a03;\n        out[4] = a10; out[5] = a11; out[6] = a12; out[7] = a13;\n        out[8] = a20; out[9] = a21; out[10] = a22; out[11] = a23;\n\n        out[12] = a00 * x + a10 * y + a20 * z + a[12];\n        out[13] = a01 * x + a11 * y + a21 * z + a[13];\n        out[14] = a02 * x + a12 * y + a22 * z + a[14];\n        out[15] = a03 * x + a13 * y + a23 * z + a[15];\n    }\n\n    return out;\n};\n\n/**\n * Translates a mat4 by the given vector using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to translate\n * @param {vec3} v vector to translate by\n * @returns {mat4} out\n */\nmat4.SIMD.translate = function (out, a, v) {\n    var a0 = SIMD.Float32x4.load(a, 0),\n        a1 = SIMD.Float32x4.load(a, 4),\n        a2 = SIMD.Float32x4.load(a, 8),\n        a3 = SIMD.Float32x4.load(a, 12),\n        vec = SIMD.Float32x4(v[0], v[1], v[2] , 0);\n\n    if (a !== out) {\n        out[0] = a[0]; out[1] = a[1]; out[2] = a[2]; out[3] = a[3];\n        out[4] = a[4]; out[5] = a[5]; out[6] = a[6]; out[7] = a[7];\n        out[8] = a[8]; out[9] = a[9]; out[10] = a[10]; out[11] = a[11];\n    }\n\n    a0 = SIMD.Float32x4.mul(a0, SIMD.Float32x4.swizzle(vec, 0, 0, 0, 0));\n    a1 = SIMD.Float32x4.mul(a1, SIMD.Float32x4.swizzle(vec, 1, 1, 1, 1));\n    a2 = SIMD.Float32x4.mul(a2, SIMD.Float32x4.swizzle(vec, 2, 2, 2, 2));\n\n    var t0 = SIMD.Float32x4.add(a0, SIMD.Float32x4.add(a1, SIMD.Float32x4.add(a2, a3)));\n    SIMD.Float32x4.store(out, 12, t0);\n\n    return out;\n};\n\n/**\n * Translates a mat4 by the given vector using SIMD if available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to translate\n * @param {vec3} v vector to translate by\n * @returns {mat4} out\n */\nmat4.translate = glMatrix.USE_SIMD ? mat4.SIMD.translate : mat4.scalar.translate;\n\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {vec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\nmat4.scalar.scale = function(out, a, v) {\n    var x = v[0], y = v[1], z = v[2];\n\n    out[0] = a[0] * x;\n    out[1] = a[1] * x;\n    out[2] = a[2] * x;\n    out[3] = a[3] * x;\n    out[4] = a[4] * y;\n    out[5] = a[5] * y;\n    out[6] = a[6] * y;\n    out[7] = a[7] * y;\n    out[8] = a[8] * z;\n    out[9] = a[9] * z;\n    out[10] = a[10] * z;\n    out[11] = a[11] * z;\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n};\n\n/**\n * Scales the mat4 by the dimensions in the given vec3 using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {vec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\nmat4.SIMD.scale = function(out, a, v) {\n    var a0, a1, a2;\n    var vec = SIMD.Float32x4(v[0], v[1], v[2], 0);\n\n    a0 = SIMD.Float32x4.load(a, 0);\n    SIMD.Float32x4.store(\n        out, 0, SIMD.Float32x4.mul(a0, SIMD.Float32x4.swizzle(vec, 0, 0, 0, 0)));\n\n    a1 = SIMD.Float32x4.load(a, 4);\n    SIMD.Float32x4.store(\n        out, 4, SIMD.Float32x4.mul(a1, SIMD.Float32x4.swizzle(vec, 1, 1, 1, 1)));\n\n    a2 = SIMD.Float32x4.load(a, 8);\n    SIMD.Float32x4.store(\n        out, 8, SIMD.Float32x4.mul(a2, SIMD.Float32x4.swizzle(vec, 2, 2, 2, 2)));\n\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n};\n\n/**\n * Scales the mat4 by the dimensions in the given vec3 using SIMD if available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {vec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n */\nmat4.scale = glMatrix.USE_SIMD ? mat4.SIMD.scale : mat4.scalar.scale;\n\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nmat4.rotate = function (out, a, rad, axis) {\n    var x = axis[0], y = axis[1], z = axis[2],\n        len = Math.sqrt(x * x + y * y + z * z),\n        s, c, t,\n        a00, a01, a02, a03,\n        a10, a11, a12, a13,\n        a20, a21, a22, a23,\n        b00, b01, b02,\n        b10, b11, b12,\n        b20, b21, b22;\n\n    if (Math.abs(len) < glMatrix.EPSILON) { return null; }\n\n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n\n    s = Math.sin(rad);\n    c = Math.cos(rad);\n    t = 1 - c;\n\n    a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n    a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n    a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n    // Construct the elements of the rotation matrix\n    b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;\n    b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;\n    b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;\n\n    // Perform rotation-specific matrix multiplication\n    out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n    out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n    out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n    out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n    out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n    out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n    out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n    out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n    out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n    out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n    out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n    out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged last row\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the X axis not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.scalar.rotateX = function (out, a, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad),\n        a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7],\n        a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged rows\n        out[0]  = a[0];\n        out[1]  = a[1];\n        out[2]  = a[2];\n        out[3]  = a[3];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    out[4] = a10 * c + a20 * s;\n    out[5] = a11 * c + a21 * s;\n    out[6] = a12 * c + a22 * s;\n    out[7] = a13 * c + a23 * s;\n    out[8] = a20 * c - a10 * s;\n    out[9] = a21 * c - a11 * s;\n    out[10] = a22 * c - a12 * s;\n    out[11] = a23 * c - a13 * s;\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the X axis using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.SIMD.rotateX = function (out, a, rad) {\n    var s = SIMD.Float32x4.splat(Math.sin(rad)),\n        c = SIMD.Float32x4.splat(Math.cos(rad));\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged rows\n      out[0]  = a[0];\n      out[1]  = a[1];\n      out[2]  = a[2];\n      out[3]  = a[3];\n      out[12] = a[12];\n      out[13] = a[13];\n      out[14] = a[14];\n      out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    var a_1 = SIMD.Float32x4.load(a, 4);\n    var a_2 = SIMD.Float32x4.load(a, 8);\n    SIMD.Float32x4.store(out, 4,\n                         SIMD.Float32x4.add(SIMD.Float32x4.mul(a_1, c), SIMD.Float32x4.mul(a_2, s)));\n    SIMD.Float32x4.store(out, 8,\n                         SIMD.Float32x4.sub(SIMD.Float32x4.mul(a_2, c), SIMD.Float32x4.mul(a_1, s)));\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the X axis using SIMD if availabe and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.rotateX = glMatrix.USE_SIMD ? mat4.SIMD.rotateX : mat4.scalar.rotateX;\n\n/**\n * Rotates a matrix by the given angle around the Y axis not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.scalar.rotateY = function (out, a, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad),\n        a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3],\n        a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged rows\n        out[4]  = a[4];\n        out[5]  = a[5];\n        out[6]  = a[6];\n        out[7]  = a[7];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    out[0] = a00 * c - a20 * s;\n    out[1] = a01 * c - a21 * s;\n    out[2] = a02 * c - a22 * s;\n    out[3] = a03 * c - a23 * s;\n    out[8] = a00 * s + a20 * c;\n    out[9] = a01 * s + a21 * c;\n    out[10] = a02 * s + a22 * c;\n    out[11] = a03 * s + a23 * c;\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the Y axis using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.SIMD.rotateY = function (out, a, rad) {\n    var s = SIMD.Float32x4.splat(Math.sin(rad)),\n        c = SIMD.Float32x4.splat(Math.cos(rad));\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged rows\n        out[4]  = a[4];\n        out[5]  = a[5];\n        out[6]  = a[6];\n        out[7]  = a[7];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    var a_0 = SIMD.Float32x4.load(a, 0);\n    var a_2 = SIMD.Float32x4.load(a, 8);\n    SIMD.Float32x4.store(out, 0,\n                         SIMD.Float32x4.sub(SIMD.Float32x4.mul(a_0, c), SIMD.Float32x4.mul(a_2, s)));\n    SIMD.Float32x4.store(out, 8,\n                         SIMD.Float32x4.add(SIMD.Float32x4.mul(a_0, s), SIMD.Float32x4.mul(a_2, c)));\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the Y axis if SIMD available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n mat4.rotateY = glMatrix.USE_SIMD ? mat4.SIMD.rotateY : mat4.scalar.rotateY;\n\n/**\n * Rotates a matrix by the given angle around the Z axis not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.scalar.rotateZ = function (out, a, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad),\n        a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3],\n        a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7];\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged last row\n        out[8]  = a[8];\n        out[9]  = a[9];\n        out[10] = a[10];\n        out[11] = a[11];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    out[0] = a00 * c + a10 * s;\n    out[1] = a01 * c + a11 * s;\n    out[2] = a02 * c + a12 * s;\n    out[3] = a03 * c + a13 * s;\n    out[4] = a10 * c - a00 * s;\n    out[5] = a11 * c - a01 * s;\n    out[6] = a12 * c - a02 * s;\n    out[7] = a13 * c - a03 * s;\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the Z axis using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.SIMD.rotateZ = function (out, a, rad) {\n    var s = SIMD.Float32x4.splat(Math.sin(rad)),\n        c = SIMD.Float32x4.splat(Math.cos(rad));\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged last row\n        out[8]  = a[8];\n        out[9]  = a[9];\n        out[10] = a[10];\n        out[11] = a[11];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    var a_0 = SIMD.Float32x4.load(a, 0);\n    var a_1 = SIMD.Float32x4.load(a, 4);\n    SIMD.Float32x4.store(out, 0,\n                         SIMD.Float32x4.add(SIMD.Float32x4.mul(a_0, c), SIMD.Float32x4.mul(a_1, s)));\n    SIMD.Float32x4.store(out, 4,\n                         SIMD.Float32x4.sub(SIMD.Float32x4.mul(a_1, c), SIMD.Float32x4.mul(a_0, s)));\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the Z axis if SIMD available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n mat4.rotateZ = glMatrix.USE_SIMD ? mat4.SIMD.rotateZ : mat4.scalar.rotateZ;\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {vec3} v Translation vector\n * @returns {mat4} out\n */\nmat4.fromTranslation = function(out, v) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = v[0];\n    out[13] = v[1];\n    out[14] = v[2];\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {vec3} v Scaling vector\n * @returns {mat4} out\n */\nmat4.fromScaling = function(out, v) {\n    out[0] = v[0];\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = v[1];\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = v[2];\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nmat4.fromRotation = function(out, rad, axis) {\n    var x = axis[0], y = axis[1], z = axis[2],\n        len = Math.sqrt(x * x + y * y + z * z),\n        s, c, t;\n\n    if (Math.abs(len) < glMatrix.EPSILON) { return null; }\n\n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n\n    s = Math.sin(rad);\n    c = Math.cos(rad);\n    t = 1 - c;\n\n    // Perform rotation-specific matrix multiplication\n    out[0] = x * x * t + c;\n    out[1] = y * x * t + z * s;\n    out[2] = z * x * t - y * s;\n    out[3] = 0;\n    out[4] = x * y * t - z * s;\n    out[5] = y * y * t + c;\n    out[6] = z * y * t + x * s;\n    out[7] = 0;\n    out[8] = x * z * t + y * s;\n    out[9] = y * z * t - x * s;\n    out[10] = z * z * t + c;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.fromXRotation = function(out, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad);\n\n    // Perform axis-specific matrix multiplication\n    out[0]  = 1;\n    out[1]  = 0;\n    out[2]  = 0;\n    out[3]  = 0;\n    out[4] = 0;\n    out[5] = c;\n    out[6] = s;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = -s;\n    out[10] = c;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.fromYRotation = function(out, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad);\n\n    // Perform axis-specific matrix multiplication\n    out[0]  = c;\n    out[1]  = 0;\n    out[2]  = -s;\n    out[3]  = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = s;\n    out[9] = 0;\n    out[10] = c;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.fromZRotation = function(out, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad);\n\n    // Perform axis-specific matrix multiplication\n    out[0]  = c;\n    out[1]  = s;\n    out[2]  = 0;\n    out[3]  = 0;\n    out[4] = -s;\n    out[5] = c;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     var quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @returns {mat4} out\n */\nmat4.fromRotationTranslation = function (out, q, v) {\n    // Quaternion math\n    var x = q[0], y = q[1], z = q[2], w = q[3],\n        x2 = x + x,\n        y2 = y + y,\n        z2 = z + z,\n\n        xx = x * x2,\n        xy = x * y2,\n        xz = x * z2,\n        yy = y * y2,\n        yz = y * z2,\n        zz = z * z2,\n        wx = w * x2,\n        wy = w * y2,\n        wz = w * z2;\n\n    out[0] = 1 - (yy + zz);\n    out[1] = xy + wz;\n    out[2] = xz - wy;\n    out[3] = 0;\n    out[4] = xy - wz;\n    out[5] = 1 - (xx + zz);\n    out[6] = yz + wx;\n    out[7] = 0;\n    out[8] = xz + wy;\n    out[9] = yz - wx;\n    out[10] = 1 - (xx + yy);\n    out[11] = 0;\n    out[12] = v[0];\n    out[13] = v[1];\n    out[14] = v[2];\n    out[15] = 1;\n\n    return out;\n};\n\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nmat4.getTranslation = function (out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n\n  return out;\n};\n\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {mat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\nmat4.getRotation = function (out, mat) {\n  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n  var trace = mat[0] + mat[5] + mat[10];\n  var S = 0;\n\n  if (trace > 0) { \n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (mat[6] - mat[9]) / S;\n    out[1] = (mat[8] - mat[2]) / S; \n    out[2] = (mat[1] - mat[4]) / S; \n  } else if ((mat[0] > mat[5])&(mat[0] > mat[10])) { \n    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;\n    out[3] = (mat[6] - mat[9]) / S;\n    out[0] = 0.25 * S;\n    out[1] = (mat[1] + mat[4]) / S; \n    out[2] = (mat[8] + mat[2]) / S; \n  } else if (mat[5] > mat[10]) { \n    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;\n    out[3] = (mat[8] - mat[2]) / S;\n    out[0] = (mat[1] + mat[4]) / S; \n    out[1] = 0.25 * S;\n    out[2] = (mat[6] + mat[9]) / S; \n  } else { \n    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;\n    out[3] = (mat[1] - mat[4]) / S;\n    out[0] = (mat[8] + mat[2]) / S;\n    out[1] = (mat[6] + mat[9]) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n};\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     var quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @returns {mat4} out\n */\nmat4.fromRotationTranslationScale = function (out, q, v, s) {\n    // Quaternion math\n    var x = q[0], y = q[1], z = q[2], w = q[3],\n        x2 = x + x,\n        y2 = y + y,\n        z2 = z + z,\n\n        xx = x * x2,\n        xy = x * y2,\n        xz = x * z2,\n        yy = y * y2,\n        yz = y * z2,\n        zz = z * z2,\n        wx = w * x2,\n        wy = w * y2,\n        wz = w * z2,\n        sx = s[0],\n        sy = s[1],\n        sz = s[2];\n\n    out[0] = (1 - (yy + zz)) * sx;\n    out[1] = (xy + wz) * sx;\n    out[2] = (xz - wy) * sx;\n    out[3] = 0;\n    out[4] = (xy - wz) * sy;\n    out[5] = (1 - (xx + zz)) * sy;\n    out[6] = (yz + wx) * sy;\n    out[7] = 0;\n    out[8] = (xz + wy) * sz;\n    out[9] = (yz - wx) * sz;\n    out[10] = (1 - (xx + yy)) * sz;\n    out[11] = 0;\n    out[12] = v[0];\n    out[13] = v[1];\n    out[14] = v[2];\n    out[15] = 1;\n\n    return out;\n};\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     var quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @param {vec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\nmat4.fromRotationTranslationScaleOrigin = function (out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0], y = q[1], z = q[2], w = q[3],\n      x2 = x + x,\n      y2 = y + y,\n      z2 = z + z,\n\n      xx = x * x2,\n      xy = x * y2,\n      xz = x * z2,\n      yy = y * y2,\n      yz = y * z2,\n      zz = z * z2,\n      wx = w * x2,\n      wy = w * y2,\n      wz = w * z2,\n\n      sx = s[0],\n      sy = s[1],\n      sz = s[2],\n\n      ox = o[0],\n      oy = o[1],\n      oz = o[2];\n\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out[0] * ox + out[4] * oy + out[8] * oz);\n  out[13] = v[1] + oy - (out[1] * ox + out[5] * oy + out[9] * oz);\n  out[14] = v[2] + oz - (out[2] * ox + out[6] * oy + out[10] * oz);\n  out[15] = 1;\n\n  return out;\n};\n\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\nmat4.fromQuat = function (out, q) {\n    var x = q[0], y = q[1], z = q[2], w = q[3],\n        x2 = x + x,\n        y2 = y + y,\n        z2 = z + z,\n\n        xx = x * x2,\n        yx = y * x2,\n        yy = y * y2,\n        zx = z * x2,\n        zy = z * y2,\n        zz = z * z2,\n        wx = w * x2,\n        wy = w * y2,\n        wz = w * z2;\n\n    out[0] = 1 - yy - zz;\n    out[1] = yx + wz;\n    out[2] = zx - wy;\n    out[3] = 0;\n\n    out[4] = yx - wz;\n    out[5] = 1 - xx - zz;\n    out[6] = zy + wx;\n    out[7] = 0;\n\n    out[8] = zx + wy;\n    out[9] = zy - wx;\n    out[10] = 1 - xx - yy;\n    out[11] = 0;\n\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n\n    return out;\n};\n\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\nmat4.frustum = function (out, left, right, bottom, top, near, far) {\n    var rl = 1 / (right - left),\n        tb = 1 / (top - bottom),\n        nf = 1 / (near - far);\n    out[0] = (near * 2) * rl;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = (near * 2) * tb;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = (right + left) * rl;\n    out[9] = (top + bottom) * tb;\n    out[10] = (far + near) * nf;\n    out[11] = -1;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = (far * near * 2) * nf;\n    out[15] = 0;\n    return out;\n};\n\n/**\n * Generates a perspective projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nmat4.perspective = function (out, fovy, aspect, near, far) {\n    var f = 1.0 / Math.tan(fovy / 2),\n        nf = 1 / (near - far);\n    out[0] = f / aspect;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = f;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = (far + near) * nf;\n    out[11] = -1;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = (2 * far * near) * nf;\n    out[15] = 0;\n    return out;\n};\n\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nmat4.perspectiveFromFieldOfView = function (out, fov, near, far) {\n    var upTan = Math.tan(fov.upDegrees * Math.PI/180.0),\n        downTan = Math.tan(fov.downDegrees * Math.PI/180.0),\n        leftTan = Math.tan(fov.leftDegrees * Math.PI/180.0),\n        rightTan = Math.tan(fov.rightDegrees * Math.PI/180.0),\n        xScale = 2.0 / (leftTan + rightTan),\n        yScale = 2.0 / (upTan + downTan);\n\n    out[0] = xScale;\n    out[1] = 0.0;\n    out[2] = 0.0;\n    out[3] = 0.0;\n    out[4] = 0.0;\n    out[5] = yScale;\n    out[6] = 0.0;\n    out[7] = 0.0;\n    out[8] = -((leftTan - rightTan) * xScale * 0.5);\n    out[9] = ((upTan - downTan) * yScale * 0.5);\n    out[10] = far / (near - far);\n    out[11] = -1.0;\n    out[12] = 0.0;\n    out[13] = 0.0;\n    out[14] = (far * near) / (near - far);\n    out[15] = 0.0;\n    return out;\n}\n\n/**\n * Generates a orthogonal projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nmat4.ortho = function (out, left, right, bottom, top, near, far) {\n    var lr = 1 / (left - right),\n        bt = 1 / (bottom - top),\n        nf = 1 / (near - far);\n    out[0] = -2 * lr;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = -2 * bt;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 2 * nf;\n    out[11] = 0;\n    out[12] = (left + right) * lr;\n    out[13] = (top + bottom) * bt;\n    out[14] = (far + near) * nf;\n    out[15] = 1;\n    return out;\n};\n\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} center Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */\nmat4.lookAt = function (out, eye, center, up) {\n    var x0, x1, x2, y0, y1, y2, z0, z1, z2, len,\n        eyex = eye[0],\n        eyey = eye[1],\n        eyez = eye[2],\n        upx = up[0],\n        upy = up[1],\n        upz = up[2],\n        centerx = center[0],\n        centery = center[1],\n        centerz = center[2];\n\n    if (Math.abs(eyex - centerx) < glMatrix.EPSILON &&\n        Math.abs(eyey - centery) < glMatrix.EPSILON &&\n        Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n        return mat4.identity(out);\n    }\n\n    z0 = eyex - centerx;\n    z1 = eyey - centery;\n    z2 = eyez - centerz;\n\n    len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n\n    x0 = upy * z2 - upz * z1;\n    x1 = upz * z0 - upx * z2;\n    x2 = upx * z1 - upy * z0;\n    len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n    if (!len) {\n        x0 = 0;\n        x1 = 0;\n        x2 = 0;\n    } else {\n        len = 1 / len;\n        x0 *= len;\n        x1 *= len;\n        x2 *= len;\n    }\n\n    y0 = z1 * x2 - z2 * x1;\n    y1 = z2 * x0 - z0 * x2;\n    y2 = z0 * x1 - z1 * x0;\n\n    len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n    if (!len) {\n        y0 = 0;\n        y1 = 0;\n        y2 = 0;\n    } else {\n        len = 1 / len;\n        y0 *= len;\n        y1 *= len;\n        y2 *= len;\n    }\n\n    out[0] = x0;\n    out[1] = y0;\n    out[2] = z0;\n    out[3] = 0;\n    out[4] = x1;\n    out[5] = y1;\n    out[6] = z1;\n    out[7] = 0;\n    out[8] = x2;\n    out[9] = y2;\n    out[10] = z2;\n    out[11] = 0;\n    out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n    out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n    out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n    out[15] = 1;\n\n    return out;\n};\n\n/**\n * Returns a string representation of a mat4\n *\n * @param {mat4} mat matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nmat4.str = function (a) {\n    return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' +\n                    a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' +\n                    a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' +\n                    a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\n};\n\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {mat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nmat4.frob = function (a) {\n    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2) ))\n};\n\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nmat4.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    out[4] = a[4] + b[4];\n    out[5] = a[5] + b[5];\n    out[6] = a[6] + b[6];\n    out[7] = a[7] + b[7];\n    out[8] = a[8] + b[8];\n    out[9] = a[9] + b[9];\n    out[10] = a[10] + b[10];\n    out[11] = a[11] + b[11];\n    out[12] = a[12] + b[12];\n    out[13] = a[13] + b[13];\n    out[14] = a[14] + b[14];\n    out[15] = a[15] + b[15];\n    return out;\n};\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nmat4.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    out[4] = a[4] - b[4];\n    out[5] = a[5] - b[5];\n    out[6] = a[6] - b[6];\n    out[7] = a[7] - b[7];\n    out[8] = a[8] - b[8];\n    out[9] = a[9] - b[9];\n    out[10] = a[10] - b[10];\n    out[11] = a[11] - b[11];\n    out[12] = a[12] - b[12];\n    out[13] = a[13] - b[13];\n    out[14] = a[14] - b[14];\n    out[15] = a[15] - b[15];\n    return out;\n};\n\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\nmat4.sub = mat4.subtract;\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\nmat4.multiplyScalar = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    out[4] = a[4] * b;\n    out[5] = a[5] * b;\n    out[6] = a[6] * b;\n    out[7] = a[7] * b;\n    out[8] = a[8] * b;\n    out[9] = a[9] * b;\n    out[10] = a[10] * b;\n    out[11] = a[11] * b;\n    out[12] = a[12] * b;\n    out[13] = a[13] * b;\n    out[14] = a[14] * b;\n    out[15] = a[15] * b;\n    return out;\n};\n\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\nmat4.multiplyScalarAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    out[2] = a[2] + (b[2] * scale);\n    out[3] = a[3] + (b[3] * scale);\n    out[4] = a[4] + (b[4] * scale);\n    out[5] = a[5] + (b[5] * scale);\n    out[6] = a[6] + (b[6] * scale);\n    out[7] = a[7] + (b[7] * scale);\n    out[8] = a[8] + (b[8] * scale);\n    out[9] = a[9] + (b[9] * scale);\n    out[10] = a[10] + (b[10] * scale);\n    out[11] = a[11] + (b[11] * scale);\n    out[12] = a[12] + (b[12] * scale);\n    out[13] = a[13] + (b[13] * scale);\n    out[14] = a[14] + (b[14] * scale);\n    out[15] = a[15] + (b[15] * scale);\n    return out;\n};\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat4} a The first matrix.\n * @param {mat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat4.exactEquals = function (a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && \n           a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && \n           a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] &&\n           a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n};\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat4} a The first matrix.\n * @param {mat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat4.equals = function (a, b) {\n    var a0  = a[0],  a1  = a[1],  a2  = a[2],  a3  = a[3],\n        a4  = a[4],  a5  = a[5],  a6  = a[6],  a7  = a[7], \n        a8  = a[8],  a9  = a[9],  a10 = a[10], a11 = a[11], \n        a12 = a[12], a13 = a[13], a14 = a[14], a15 = a[15];\n\n    var b0  = b[0],  b1  = b[1],  b2  = b[2],  b3  = b[3],\n        b4  = b[4],  b5  = b[5],  b6  = b[6],  b7  = b[7], \n        b8  = b[8],  b9  = b[9],  b10 = b[10], b11 = b[11], \n        b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];\n\n    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n            Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n            Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n            Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n            Math.abs(a6 - b6) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n            Math.abs(a7 - b7) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&\n            Math.abs(a8 - b8) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a8), Math.abs(b8)) &&\n            Math.abs(a9 - b9) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a9), Math.abs(b9)) &&\n            Math.abs(a10 - b10) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a10), Math.abs(b10)) &&\n            Math.abs(a11 - b11) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a11), Math.abs(b11)) &&\n            Math.abs(a12 - b12) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a12), Math.abs(b12)) &&\n            Math.abs(a13 - b13) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a13), Math.abs(b13)) &&\n            Math.abs(a14 - b14) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a14), Math.abs(b14)) &&\n            Math.abs(a15 - b15) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a15), Math.abs(b15)));\n};\n\n\n\nmodule.exports = mat4;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gl-matrix/src/gl-matrix/mat4.js\n// module id = 23\n// module chunks = 0","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = require(\"./common.js\");\nvar mat3 = require(\"./mat3.js\");\nvar vec3 = require(\"./vec3.js\");\nvar vec4 = require(\"./vec4.js\");\n\n/**\n * @class Quaternion\n * @name quat\n */\nvar quat = {};\n\n/**\n * Creates a new identity quat\n *\n * @returns {quat} a new quaternion\n */\nquat.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(4);\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n};\n\n/**\n * Sets a quaternion to represent the shortest rotation from one\n * vector to another.\n *\n * Both vectors are assumed to be unit length.\n *\n * @param {quat} out the receiving quaternion.\n * @param {vec3} a the initial vector\n * @param {vec3} b the destination vector\n * @returns {quat} out\n */\nquat.rotationTo = (function() {\n    var tmpvec3 = vec3.create();\n    var xUnitVec3 = vec3.fromValues(1,0,0);\n    var yUnitVec3 = vec3.fromValues(0,1,0);\n\n    return function(out, a, b) {\n        var dot = vec3.dot(a, b);\n        if (dot < -0.999999) {\n            vec3.cross(tmpvec3, xUnitVec3, a);\n            if (vec3.length(tmpvec3) < 0.000001)\n                vec3.cross(tmpvec3, yUnitVec3, a);\n            vec3.normalize(tmpvec3, tmpvec3);\n            quat.setAxisAngle(out, tmpvec3, Math.PI);\n            return out;\n        } else if (dot > 0.999999) {\n            out[0] = 0;\n            out[1] = 0;\n            out[2] = 0;\n            out[3] = 1;\n            return out;\n        } else {\n            vec3.cross(tmpvec3, a, b);\n            out[0] = tmpvec3[0];\n            out[1] = tmpvec3[1];\n            out[2] = tmpvec3[2];\n            out[3] = 1 + dot;\n            return quat.normalize(out, out);\n        }\n    };\n})();\n\n/**\n * Sets the specified quaternion with values corresponding to the given\n * axes. Each axis is a vec3 and is expected to be unit length and\n * perpendicular to all other specified axes.\n *\n * @param {vec3} view  the vector representing the viewing direction\n * @param {vec3} right the vector representing the local \"right\" direction\n * @param {vec3} up    the vector representing the local \"up\" direction\n * @returns {quat} out\n */\nquat.setAxes = (function() {\n    var matr = mat3.create();\n\n    return function(out, view, right, up) {\n        matr[0] = right[0];\n        matr[3] = right[1];\n        matr[6] = right[2];\n\n        matr[1] = up[0];\n        matr[4] = up[1];\n        matr[7] = up[2];\n\n        matr[2] = -view[0];\n        matr[5] = -view[1];\n        matr[8] = -view[2];\n\n        return quat.normalize(out, quat.fromMat3(out, matr));\n    };\n})();\n\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {quat} a quaternion to clone\n * @returns {quat} a new quaternion\n * @function\n */\nquat.clone = vec4.clone;\n\n/**\n * Creates a new quat initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} a new quaternion\n * @function\n */\nquat.fromValues = vec4.fromValues;\n\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the source quaternion\n * @returns {quat} out\n * @function\n */\nquat.copy = vec4.copy;\n\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\nquat.set = vec4.set;\n\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\nquat.identity = function(out) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n};\n\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {vec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\nquat.setAxisAngle = function(out, axis, rad) {\n    rad = rad * 0.5;\n    var s = Math.sin(rad);\n    out[0] = s * axis[0];\n    out[1] = s * axis[1];\n    out[2] = s * axis[2];\n    out[3] = Math.cos(rad);\n    return out;\n};\n\n/**\n * Gets the rotation axis and angle for a given\n *  quaternion. If a quaternion is created with\n *  setAxisAngle, this method will return the same\n *  values as providied in the original parameter list\n *  OR functionally equivalent values.\n * Example: The quaternion formed by axis [0, 0, 1] and\n *  angle -90 is the same as the quaternion formed by\n *  [0, 0, 1] and 270. This method favors the latter.\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\n * @param  {quat} q     Quaternion to be decomposed\n * @return {Number}     Angle, in radians, of the rotation\n */\nquat.getAxisAngle = function(out_axis, q) {\n    var rad = Math.acos(q[3]) * 2.0;\n    var s = Math.sin(rad / 2.0);\n    if (s != 0.0) {\n        out_axis[0] = q[0] / s;\n        out_axis[1] = q[1] / s;\n        out_axis[2] = q[2] / s;\n    } else {\n        // If s is zero, return any axis (no rotation - axis does not matter)\n        out_axis[0] = 1;\n        out_axis[1] = 0;\n        out_axis[2] = 0;\n    }\n    return rad;\n};\n\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n * @function\n */\nquat.add = vec4.add;\n\n/**\n * Multiplies two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n */\nquat.multiply = function(out, a, b) {\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n        bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\n    out[0] = ax * bw + aw * bx + ay * bz - az * by;\n    out[1] = ay * bw + aw * by + az * bx - ax * bz;\n    out[2] = az * bw + aw * bz + ax * by - ay * bx;\n    out[3] = aw * bw - ax * bx - ay * by - az * bz;\n    return out;\n};\n\n/**\n * Alias for {@link quat.multiply}\n * @function\n */\nquat.mul = quat.multiply;\n\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {quat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\nquat.scale = vec4.scale;\n\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nquat.rotateX = function (out, a, rad) {\n    rad *= 0.5; \n\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n        bx = Math.sin(rad), bw = Math.cos(rad);\n\n    out[0] = ax * bw + aw * bx;\n    out[1] = ay * bw + az * bx;\n    out[2] = az * bw - ay * bx;\n    out[3] = aw * bw - ax * bx;\n    return out;\n};\n\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nquat.rotateY = function (out, a, rad) {\n    rad *= 0.5; \n\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n        by = Math.sin(rad), bw = Math.cos(rad);\n\n    out[0] = ax * bw - az * by;\n    out[1] = ay * bw + aw * by;\n    out[2] = az * bw + ax * by;\n    out[3] = aw * bw - ay * by;\n    return out;\n};\n\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nquat.rotateZ = function (out, a, rad) {\n    rad *= 0.5; \n\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n        bz = Math.sin(rad), bw = Math.cos(rad);\n\n    out[0] = ax * bw + ay * bz;\n    out[1] = ay * bw - ax * bz;\n    out[2] = az * bw + aw * bz;\n    out[3] = aw * bw - az * bz;\n    return out;\n};\n\n/**\n * Calculates the W component of a quat from the X, Y, and Z components.\n * Assumes that quaternion is 1 unit in length.\n * Any existing W component will be ignored.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate W component of\n * @returns {quat} out\n */\nquat.calculateW = function (out, a) {\n    var x = a[0], y = a[1], z = a[2];\n\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n    return out;\n};\n\n/**\n * Calculates the dot product of two quat's\n *\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\nquat.dot = vec4.dot;\n\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n * @function\n */\nquat.lerp = vec4.lerp;\n\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n */\nquat.slerp = function (out, a, b, t) {\n    // benchmarks:\n    //    http://jsperf.com/quaternion-slerp-implementations\n\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n        bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\n    var        omega, cosom, sinom, scale0, scale1;\n\n    // calc cosine\n    cosom = ax * bx + ay * by + az * bz + aw * bw;\n    // adjust signs (if necessary)\n    if ( cosom < 0.0 ) {\n        cosom = -cosom;\n        bx = - bx;\n        by = - by;\n        bz = - bz;\n        bw = - bw;\n    }\n    // calculate coefficients\n    if ( (1.0 - cosom) > 0.000001 ) {\n        // standard case (slerp)\n        omega  = Math.acos(cosom);\n        sinom  = Math.sin(omega);\n        scale0 = Math.sin((1.0 - t) * omega) / sinom;\n        scale1 = Math.sin(t * omega) / sinom;\n    } else {        \n        // \"from\" and \"to\" quaternions are very close \n        //  ... so we can do a linear interpolation\n        scale0 = 1.0 - t;\n        scale1 = t;\n    }\n    // calculate final values\n    out[0] = scale0 * ax + scale1 * bx;\n    out[1] = scale0 * ay + scale1 * by;\n    out[2] = scale0 * az + scale1 * bz;\n    out[3] = scale0 * aw + scale1 * bw;\n    \n    return out;\n};\n\n/**\n * Performs a spherical linear interpolation with two control points\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {quat} c the third operand\n * @param {quat} d the fourth operand\n * @param {Number} t interpolation amount\n * @returns {quat} out\n */\nquat.sqlerp = (function () {\n  var temp1 = quat.create();\n  var temp2 = quat.create();\n  \n  return function (out, a, b, c, d, t) {\n    quat.slerp(temp1, a, d, t);\n    quat.slerp(temp2, b, c, t);\n    quat.slerp(out, temp1, temp2, 2 * t * (1 - t));\n    \n    return out;\n  };\n}());\n\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate inverse of\n * @returns {quat} out\n */\nquat.invert = function(out, a) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],\n        dot = a0*a0 + a1*a1 + a2*a2 + a3*a3,\n        invDot = dot ? 1.0/dot : 0;\n    \n    // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n    out[0] = -a0*invDot;\n    out[1] = -a1*invDot;\n    out[2] = -a2*invDot;\n    out[3] = a3*invDot;\n    return out;\n};\n\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate conjugate of\n * @returns {quat} out\n */\nquat.conjugate = function (out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Calculates the length of a quat\n *\n * @param {quat} a vector to calculate length of\n * @returns {Number} length of a\n * @function\n */\nquat.length = vec4.length;\n\n/**\n * Alias for {@link quat.length}\n * @function\n */\nquat.len = quat.length;\n\n/**\n * Calculates the squared length of a quat\n *\n * @param {quat} a vector to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\nquat.squaredLength = vec4.squaredLength;\n\n/**\n * Alias for {@link quat.squaredLength}\n * @function\n */\nquat.sqrLen = quat.squaredLength;\n\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\nquat.normalize = vec4.normalize;\n\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {mat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\nquat.fromMat3 = function(out, m) {\n    // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n    // article \"Quaternion Calculus and Fast Animation\".\n    var fTrace = m[0] + m[4] + m[8];\n    var fRoot;\n\n    if ( fTrace > 0.0 ) {\n        // |w| > 1/2, may as well choose w > 1/2\n        fRoot = Math.sqrt(fTrace + 1.0);  // 2w\n        out[3] = 0.5 * fRoot;\n        fRoot = 0.5/fRoot;  // 1/(4w)\n        out[0] = (m[5]-m[7])*fRoot;\n        out[1] = (m[6]-m[2])*fRoot;\n        out[2] = (m[1]-m[3])*fRoot;\n    } else {\n        // |w| <= 1/2\n        var i = 0;\n        if ( m[4] > m[0] )\n          i = 1;\n        if ( m[8] > m[i*3+i] )\n          i = 2;\n        var j = (i+1)%3;\n        var k = (i+2)%3;\n        \n        fRoot = Math.sqrt(m[i*3+i]-m[j*3+j]-m[k*3+k] + 1.0);\n        out[i] = 0.5 * fRoot;\n        fRoot = 0.5 / fRoot;\n        out[3] = (m[j*3+k] - m[k*3+j]) * fRoot;\n        out[j] = (m[j*3+i] + m[i*3+j]) * fRoot;\n        out[k] = (m[k*3+i] + m[i*3+k]) * fRoot;\n    }\n    \n    return out;\n};\n\n/**\n * Returns a string representation of a quatenion\n *\n * @param {quat} vec vector to represent as a string\n * @returns {String} string representation of the vector\n */\nquat.str = function (a) {\n    return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n};\n\n/**\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {quat} a The first quaternion.\n * @param {quat} b The second quaternion.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nquat.exactEquals = vec4.exactEquals;\n\n/**\n * Returns whether or not the quaternions have approximately the same elements in the same position.\n *\n * @param {quat} a The first vector.\n * @param {quat} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nquat.equals = vec4.equals;\n\nmodule.exports = quat;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gl-matrix/src/gl-matrix/quat.js\n// module id = 24\n// module chunks = 0","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = require(\"./common.js\");\n\n/**\n * @class 2 Dimensional Vector\n * @name vec2\n */\nvar vec2 = {};\n\n/**\n * Creates a new, empty vec2\n *\n * @returns {vec2} a new 2D vector\n */\nvec2.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(2);\n    out[0] = 0;\n    out[1] = 0;\n    return out;\n};\n\n/**\n * Creates a new vec2 initialized with values from an existing vector\n *\n * @param {vec2} a vector to clone\n * @returns {vec2} a new 2D vector\n */\nvec2.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(2);\n    out[0] = a[0];\n    out[1] = a[1];\n    return out;\n};\n\n/**\n * Creates a new vec2 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} a new 2D vector\n */\nvec2.fromValues = function(x, y) {\n    var out = new glMatrix.ARRAY_TYPE(2);\n    out[0] = x;\n    out[1] = y;\n    return out;\n};\n\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the source vector\n * @returns {vec2} out\n */\nvec2.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    return out;\n};\n\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */\nvec2.set = function(out, x, y) {\n    out[0] = x;\n    out[1] = y;\n    return out;\n};\n\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    return out;\n};\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    return out;\n};\n\n/**\n * Alias for {@link vec2.subtract}\n * @function\n */\nvec2.sub = vec2.subtract;\n\n/**\n * Multiplies two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.multiply = function(out, a, b) {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    return out;\n};\n\n/**\n * Alias for {@link vec2.multiply}\n * @function\n */\nvec2.mul = vec2.multiply;\n\n/**\n * Divides two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.divide = function(out, a, b) {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    return out;\n};\n\n/**\n * Alias for {@link vec2.divide}\n * @function\n */\nvec2.div = vec2.divide;\n\n/**\n * Math.ceil the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to ceil\n * @returns {vec2} out\n */\nvec2.ceil = function (out, a) {\n    out[0] = Math.ceil(a[0]);\n    out[1] = Math.ceil(a[1]);\n    return out;\n};\n\n/**\n * Math.floor the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to floor\n * @returns {vec2} out\n */\nvec2.floor = function (out, a) {\n    out[0] = Math.floor(a[0]);\n    out[1] = Math.floor(a[1]);\n    return out;\n};\n\n/**\n * Returns the minimum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.min = function(out, a, b) {\n    out[0] = Math.min(a[0], b[0]);\n    out[1] = Math.min(a[1], b[1]);\n    return out;\n};\n\n/**\n * Returns the maximum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.max = function(out, a, b) {\n    out[0] = Math.max(a[0], b[0]);\n    out[1] = Math.max(a[1], b[1]);\n    return out;\n};\n\n/**\n * Math.round the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to round\n * @returns {vec2} out\n */\nvec2.round = function (out, a) {\n    out[0] = Math.round(a[0]);\n    out[1] = Math.round(a[1]);\n    return out;\n};\n\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */\nvec2.scale = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    return out;\n};\n\n/**\n * Adds two vec2's after scaling the second operand by a scalar value\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec2} out\n */\nvec2.scaleAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    return out;\n};\n\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} distance between a and b\n */\nvec2.distance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1];\n    return Math.sqrt(x*x + y*y);\n};\n\n/**\n * Alias for {@link vec2.distance}\n * @function\n */\nvec2.dist = vec2.distance;\n\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} squared distance between a and b\n */\nvec2.squaredDistance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1];\n    return x*x + y*y;\n};\n\n/**\n * Alias for {@link vec2.squaredDistance}\n * @function\n */\nvec2.sqrDist = vec2.squaredDistance;\n\n/**\n * Calculates the length of a vec2\n *\n * @param {vec2} a vector to calculate length of\n * @returns {Number} length of a\n */\nvec2.length = function (a) {\n    var x = a[0],\n        y = a[1];\n    return Math.sqrt(x*x + y*y);\n};\n\n/**\n * Alias for {@link vec2.length}\n * @function\n */\nvec2.len = vec2.length;\n\n/**\n * Calculates the squared length of a vec2\n *\n * @param {vec2} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nvec2.squaredLength = function (a) {\n    var x = a[0],\n        y = a[1];\n    return x*x + y*y;\n};\n\n/**\n * Alias for {@link vec2.squaredLength}\n * @function\n */\nvec2.sqrLen = vec2.squaredLength;\n\n/**\n * Negates the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to negate\n * @returns {vec2} out\n */\nvec2.negate = function(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    return out;\n};\n\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to invert\n * @returns {vec2} out\n */\nvec2.inverse = function(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n};\n\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to normalize\n * @returns {vec2} out\n */\nvec2.normalize = function(out, a) {\n    var x = a[0],\n        y = a[1];\n    var len = x*x + y*y;\n    if (len > 0) {\n        //TODO: evaluate use of glm_invsqrt here?\n        len = 1 / Math.sqrt(len);\n        out[0] = a[0] * len;\n        out[1] = a[1] * len;\n    }\n    return out;\n};\n\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} dot product of a and b\n */\nvec2.dot = function (a, b) {\n    return a[0] * b[0] + a[1] * b[1];\n};\n\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product must by definition produce a 3D vector\n *\n * @param {vec3} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec3} out\n */\nvec2.cross = function(out, a, b) {\n    var z = a[0] * b[1] - a[1] * b[0];\n    out[0] = out[1] = 0;\n    out[2] = z;\n    return out;\n};\n\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec2} out\n */\nvec2.lerp = function (out, a, b, t) {\n    var ax = a[0],\n        ay = a[1];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    return out;\n};\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec2} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec2} out\n */\nvec2.random = function (out, scale) {\n    scale = scale || 1.0;\n    var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n    out[0] = Math.cos(r) * scale;\n    out[1] = Math.sin(r) * scale;\n    return out;\n};\n\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2} m matrix to transform with\n * @returns {vec2} out\n */\nvec2.transformMat2 = function(out, a, m) {\n    var x = a[0],\n        y = a[1];\n    out[0] = m[0] * x + m[2] * y;\n    out[1] = m[1] * x + m[3] * y;\n    return out;\n};\n\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2d} m matrix to transform with\n * @returns {vec2} out\n */\nvec2.transformMat2d = function(out, a, m) {\n    var x = a[0],\n        y = a[1];\n    out[0] = m[0] * x + m[2] * y + m[4];\n    out[1] = m[1] * x + m[3] * y + m[5];\n    return out;\n};\n\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat3} m matrix to transform with\n * @returns {vec2} out\n */\nvec2.transformMat3 = function(out, a, m) {\n    var x = a[0],\n        y = a[1];\n    out[0] = m[0] * x + m[3] * y + m[6];\n    out[1] = m[1] * x + m[4] * y + m[7];\n    return out;\n};\n\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec2} out\n */\nvec2.transformMat4 = function(out, a, m) {\n    var x = a[0], \n        y = a[1];\n    out[0] = m[0] * x + m[4] * y + m[12];\n    out[1] = m[1] * x + m[5] * y + m[13];\n    return out;\n};\n\n/**\n * Perform some operation over an array of vec2s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nvec2.forEach = (function() {\n    var vec = vec2.create();\n\n    return function(a, stride, offset, count, fn, arg) {\n        var i, l;\n        if(!stride) {\n            stride = 2;\n        }\n\n        if(!offset) {\n            offset = 0;\n        }\n        \n        if(count) {\n            l = Math.min((count * stride) + offset, a.length);\n        } else {\n            l = a.length;\n        }\n\n        for(i = offset; i < l; i += stride) {\n            vec[0] = a[i]; vec[1] = a[i+1];\n            fn(vec, vec, arg);\n            a[i] = vec[0]; a[i+1] = vec[1];\n        }\n        \n        return a;\n    };\n})();\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec2} vec vector to represent as a string\n * @returns {String} string representation of the vector\n */\nvec2.str = function (a) {\n    return 'vec2(' + a[0] + ', ' + a[1] + ')';\n};\n\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {vec2} a The first vector.\n * @param {vec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nvec2.exactEquals = function (a, b) {\n    return a[0] === b[0] && a[1] === b[1];\n};\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec2} a The first vector.\n * @param {vec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nvec2.equals = function (a, b) {\n    var a0 = a[0], a1 = a[1];\n    var b0 = b[0], b1 = b[1];\n    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)));\n};\n\nmodule.exports = vec2;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gl-matrix/src/gl-matrix/vec2.js\n// module id = 25\n// module chunks = 0","import { MIN_Z, VERTEX_SIZE, VERTICES_QUAD, OFFSET_Z_INDEX, OFFSET_UV } from './constants';\r\nimport { Transform2d } from './Transform';\r\nimport { MatrixTransform } from './interfaces';\r\nimport { mat4, vec2 } from \"gl-matrix\";\r\n\r\nexport class Quad{\r\n\r\n    private _pos1 = new Uint16Array(this._data, this._offset, 2);\r\n    private _pos2 = new Uint16Array(this._data, this._offset + VERTEX_SIZE, 2);\r\n    private _pos3 = new Uint16Array(this._data, this._offset + VERTEX_SIZE*2, 2);\r\n    private _pos4 = new Uint16Array(this._data, this._offset + VERTEX_SIZE*3, 2);\r\n\r\n    private _z_shift1 = new Uint8Array(this._data, this._offset + OFFSET_Z_INDEX, 2);\r\n    private _z_shift2 = new Uint8Array(this._data, this._offset + VERTEX_SIZE + OFFSET_Z_INDEX, 2);\r\n    private _z_shift3 = new Uint8Array(this._data, this._offset + VERTEX_SIZE*2 + OFFSET_Z_INDEX, 2);\r\n    private _z_shift4 = new Uint8Array(this._data, this._offset + VERTEX_SIZE*3 + OFFSET_Z_INDEX, 2);\r\n\r\n    private _uv1 = new Uint8Array(this._data, this._offset + OFFSET_UV, 2);\r\n    private _uv2 = new Uint8Array(this._data, this._offset + VERTEX_SIZE + OFFSET_UV, 2);\r\n    private _uv3 = new Uint8Array(this._data, this._offset + VERTEX_SIZE*2 + OFFSET_UV, 2);\r\n    private _uv4 = new Uint8Array(this._data, this._offset + VERTEX_SIZE*3 + OFFSET_UV, 2);\r\n    \r\n    constructor(private _data = new ArrayBuffer(VERTEX_SIZE * VERTICES_QUAD), private _offset = 0){\r\n    }\r\n    \r\n    applyTransform(matrix: mat4, out_quad = this){\r\n        vec2.transformMat4(<vec2>out_quad._pos1, <vec2>this._pos1, matrix);\r\n        //this._transVec2(matrix, <vec2>this._pos1, <vec2>out_quad._pos1);\r\n        //this._transVec2(matrix, <vec2>this._pos2, <vec2>out_quad._pos2);\r\n        //this._transVec2(matrix, <vec2>this._pos3, <vec2>out_quad._pos3);\r\n        //this._transVec2(matrix, <vec2>this._pos4, <vec2>out_quad._pos4);\r\n        return out_quad;\r\n    }\r\n\r\n    setPos(x: number, y: number, w:number, h: number){\r\n        this._pos1[0] = x;\r\n        this._pos1[1] = y;\r\n        this._pos2[0] = x + w;\r\n        this._pos2[1] = y;\r\n        this._pos3[0] = x+w;\r\n        this._pos3[1] = y+h;\r\n        this._pos4[0] = x;\r\n        this._pos4[1] = y+h;\r\n    }\r\n\r\n    setUv(x: number, y: number, w:number, h: number){\r\n        this._uv1[0] = x;\r\n        this._uv1[1] = y;\r\n        this._uv2[0] = x+w;\r\n        this._uv2[1] = y;\r\n        this._uv3[0] = x+w;\r\n        this._uv3[1] = y+h;\r\n        this._uv4[0] = x;\r\n        this._uv4[1] = y+h;\r\n    }\r\n\r\n    setZ(z: number){\r\n        this._z_shift1[0] = z;\r\n        this._z_shift2[0] = z;\r\n        this._z_shift3[0] = z;\r\n        this._z_shift4[0] = z;\r\n    }\r\n\r\n    setPalShift(s: number){\r\n        this._z_shift1[1] = s;\r\n        this._z_shift2[1] = s;\r\n        this._z_shift3[1] = s;\r\n        this._z_shift4[1] = s;\r\n    }\r\n\r\n    setAttributes(x: number, y: number, w: number, h: number, z: number, pal: number, ux: number, uy: number, uw: number, uh: number){\r\n        this.setPos(x,y,w,h);\r\n        this.setZ(z);\r\n        this.setPalShift(pal);\r\n        this.setUv(ux,uy,uw,uh);\r\n    }\r\n\r\n\r\n    // private _transVec2(matrix: mat4, in_vec: vec2, out_vec: vec2){\r\n    // }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/core/Quad.ts","import { createBufferFromTypedArray } from \"twgl.js\";\r\nimport { INDICES_QUAD, VERTICES_QUAD, MAX_VERTICES } from \"./constants\";\r\n\r\n// define a global buffer for quads\r\nlet indexBuffer: WebGLBuffer;\r\nlet elementType: number;\r\n\r\nfunction init(gl: WebGLRenderingContext){\r\n    elementType = gl.UNSIGNED_SHORT;\r\n\r\n    const indices = new Uint16Array(MAX_VERTICES * INDICES_QUAD);\r\n    const max = MAX_VERTICES * VERTICES_QUAD;\r\n\r\n    let vertex = 0;\r\n    for(let i = 0; i < max; i += INDICES_QUAD){\r\n        /*  *1---*2\r\n            |  /  |\r\n            *4---*3  */\r\n        indices[i  ] = vertex;     // 1\r\n        indices[i+1] = vertex + 1; // 2\r\n        indices[i+2] = vertex + 3; // 4\r\n\r\n        indices[i+3] = vertex + 3; // 4\r\n        indices[i+4] = vertex + 1; // 2\r\n        indices[i+5] = vertex + 2; // 3\r\n\r\n        vertex += VERTICES_QUAD;\r\n    }\r\n\r\n    indexBuffer = createBufferFromTypedArray(\r\n        gl, indices, gl.ELEMENT_ARRAY_BUFFER);\r\n}\r\n\r\nexport class IndexBuffer{\r\n\r\n    constructor(gl: WebGLRenderingContext){\r\n        if(!indexBuffer){\r\n            init(gl);\r\n        }\r\n    }\r\n\r\n    get buffer(){\r\n        return indexBuffer;\r\n    }\r\n\r\n    get elementType() {\r\n        return elementType;\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/core/IndexBuffer.ts","import { Buffer, MatrixTransform, RenderableOptions, RenderableBufferOptions } from './interfaces';\r\nimport { PAL_OFFSET } from './constants';\r\nimport { Transform2d } from './Transform';\r\nimport { PixelTexture } from './PixelTexture';\r\n\r\nexport class Renderable<T extends Buffer> implements RenderableBufferOptions<T> {\r\n    \r\n    constructor(private _options: RenderableBufferOptions<T>){\r\n        _options.transform = _options.transform || new Transform2d();\r\n        this.paletteId = _options.paletteId;\r\n    }\r\n\r\n    get paletteId(){\r\n        return this._options.paletteId;\r\n    }\r\n\r\n    set paletteId(value: number){\r\n        this._options.paletteId = value;\r\n    }\r\n\r\n    get texture(){\r\n        return this._options.texture;\r\n    }\r\n\r\n    set texture(value: WebGLTexture){\r\n        this._options.texture = value;\r\n    }\r\n\r\n    get buffer(){\r\n        return this._options.buffer;\r\n    }\r\n\r\n    get palette(){\r\n        return this._options.palette;\r\n    }\r\n\r\n    get shader(){\r\n        return this._options.shader;\r\n    }\r\n\r\n    get transform(){\r\n        return this._options.transform;\r\n    }\r\n\r\n    get zSort(){\r\n        return this._options.zSort;\r\n    }\r\n\r\n    get blendMode(){\r\n        return this._options.blendMode;\r\n    }\r\n\r\n    get mode7() {\r\n        return this._options.mode7;\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/core/Renderable.ts","import { Renderable } from './Renderable';\r\nimport { Buffer, RendererSettings, RenderableOptions, RenderableBufferOptions } from './interfaces';\r\nimport { PAL_OFFSET, MAT4_IDENT } from './constants';\r\nimport { mat4, vec3 } from \"gl-matrix\";\r\nimport * as twgl from \"twgl.js\";\r\n\r\nexport class Renderer {\r\n    renderList: Renderable<Buffer>[] = [];\r\n    \r\n    /*private*/ _defaults: RendererSettings;\r\n    private _settings: RendererSettings = <any>{};\r\n\r\n    private _ortho: mat4;\r\n    private _projection: mat4;\r\n    private _view: mat4;\r\n    \r\n    private _matrix: mat4;\r\n    private _matrixTemp: mat4;\r\n\r\n    constructor(private _gl: WebGLRenderingContext, settings: RendererSettings){\r\n        \r\n        this._ortho = mat4.ortho(mat4.create(), 0, _gl.canvas.width, _gl.canvas.height, 0, -256, 0);\r\n        this._projection = mat4.perspective(mat4.create(), 1, 1, -255, 0);\r\n        this._view = mat4.lookAt(mat4.create(), vec3.fromValues(0,-1,1.5), vec3.fromValues(0,1,.7), vec3.fromValues(0, 1, 0));\r\n\r\n        this._matrix = mat4.create();\r\n        this._matrixTemp = mat4.create();\r\n        \r\n        this.setDefaults(settings);\r\n    }\r\n\r\n    setDefaults(defaults: RendererSettings){\r\n        this._defaults = defaults;//$.extend({},defaults);        \r\n    }      \r\n\r\n    render(){\r\n        this.renderList.forEach((r)=> r.buffer.update());\r\n        \r\n        //this._gl.clear(this._gl.COLOR_CLEAR_VALUE);\r\n        this._gl.useProgram(this._defaults.shader.program);\r\n        \r\n        this.renderList.forEach((r)=>{\r\n            this._setOptions(r);\r\n            this._buildMatrix(r);\r\n            let u = this._getUniforms(r);\r\n            \r\n            if(u){\r\n                twgl.setUniforms(this._defaults.shader, u);\r\n            }\r\n            twgl.setBuffersAndAttributes(this._gl, this._defaults.shader, r.buffer.bufferInfo);\r\n            //console.log(r.buffer.vertexSize)\r\n            twgl.drawBufferInfo(this._gl, r.buffer.bufferInfo, this._gl.TRIANGLES, r.buffer.vertexSize);\r\n        });\r\n    }\r\n\r\n    protected _setOptions(r: RenderableOptions){\r\n        let zSort = r.zSort != undefined ? r.zSort : this._defaults.zSort; \r\n        let blendMode = r.blendMode || this._defaults.blendMode;\r\n            \r\n        if(zSort != this._settings.zSort){\r\n            zSort \r\n            ? this._gl.enable(this._gl.DEPTH_TEST) \r\n            : this._gl.disable(this._gl.DEPTH_TEST);\r\n            this._settings.zSort = zSort;\r\n        }\r\n        if(blendMode != this._settings.blendMode){\r\n            switch (blendMode) {\r\n                case \"alpha\":\r\n                    this._gl.enable(this._gl.BLEND);\r\n                    this._gl.blendFunc(this._gl.SRC_ALPHA, this._gl.ONE_MINUS_SRC_ALPHA);\r\n                    break;\r\n                default:\r\n                    this._gl.disable(this._gl.BLEND);\r\n                    break;          \r\n            }\r\n            this._settings.blendMode = blendMode;\r\n        }\r\n    }\r\n\r\n    a = 0;\r\n\r\n    protected _buildMatrix(r: RenderableBufferOptions<Buffer>){\r\n        let transform = r.transform\r\n            ? r.transform.matrix\r\n            : MAT4_IDENT;\r\n        \r\n        if(r.mode7){\r\n            mat4.mul(this._matrixTemp, this._ortho, transform);\r\n            mat4.mul(this._matrix, this._projection, this._view);\r\n            mat4.mul(this._matrix, this._matrix, this._matrixTemp);\r\n        }\r\n        else {\r\n            mat4.mul(this._matrix, this._ortho, transform);\r\n            //mat4.mul(this._matrix, this._ortho, r.transform.matrix);\r\n        }\r\n    }\r\n\r\n    protected _getUniforms(r: RenderableBufferOptions<Buffer>){\r\n        \r\n        this.a-=0.0001;\r\n        let a = this.a;\r\n\r\n        let u = {\r\n            matrix: this._matrix,\r\n        };\r\n\r\n        let texture = r.texture || this._defaults.texture;\r\n        let palette = r.palette || this._defaults.palette;\r\n        let paletteId = r.paletteId || this._defaults.paletteId;\r\n\r\n        if(texture != this._settings.texture)\r\n            this._settings.texture = u[\"texture\"] = texture;\r\n\r\n        if(palette != this._settings.palette)\r\n            this._settings.palette = u[\"palette\"] = palette;\r\n\r\n        if(paletteId != this._settings.paletteId){\r\n            this._settings.paletteId = paletteId;\r\n            u[\"pal_offset\"] = paletteId * PAL_OFFSET;\r\n        }\r\n\r\n        return u;\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/core/Renderer.ts","import { QuadBuffer } from './QuadBuffer';\r\nimport { FontInfo } from './interfaces';\r\nimport { VERTICES_QUAD, TEXTURE_SIZE, MIN_Z, HUGE } from './constants';\r\n\r\nexport class TextBuffer extends QuadBuffer {\r\n    \r\n    private _fontLoookup: number[] = [];\r\n    private _font: Uint8Array; \r\n    private _text = \"\";\r\n    private _ptr = 0;\r\n    \r\n    constructor(_gl: WebGLRenderingContext, private _fontInfo: FontInfo, capacity?: number){\r\n        super(_gl, capacity);\r\n    }\r\n\r\n    get text(){\r\n        return this._text;\r\n    }\r\n\r\n    create(text?: string, width = HUGE, x = 0, y = 0, z = MIN_Z){\r\n        this._createFont();\r\n\r\n\r\n        super.create();\r\n        if(text)\r\n            this.write(text, width, x, y, z);\r\n        //this.range = text ? text.length : 0;\r\n\r\n        return this;\r\n    }\r\n\r\n    seek(pos: number){\r\n        this._ptr = pos;\r\n    }\r\n\r\n    // public setText(text: string, offset=0, width = HUGE, x = 0, y = 0, z = MIN_Z, pal = 0){\r\n    //     this._putText(text, width, offset, x,y,z,pal)\r\n    //     //this.range = offset + text.length;\r\n    //     this._text = text;\r\n    // }\r\n\r\n    public clear(length: number){\r\n        for (var i = this._ptr; i < this._ptr + length; i++){\r\n            this.clearQuad(i);\r\n        }\r\n        this._ptr += length;\r\n    }\r\n\r\n    // public appendText(text: string, width = HUGE, x = 0, y = 0, z = MIN_Z, pal = 0){\r\n    //     this._putText(text, width, this.range,x,y,z,pal);\r\n    //     //this.range += text.length;\r\n    //     this._text += text;\r\n    // }\r\n\r\n    public write(text: string, width = HUGE, x = 0, y = 0, z = MIN_Z, pal = 0){\r\n        let ctr = 0;\r\n        // if(this._ptr + text.length > this.capacity)\r\n        //     text = text.substr(0,this.capacity - this._ptr);\r\n\r\n        let ox = x;\r\n        let oy = y;\r\n\r\n        for(let i = 0; i < text.length; i++){\r\n            let offset = this._fontLoookup[text.charCodeAt(i)];   \r\n            let x = this._font[offset]; \r\n            let y = this._font[offset+1]; \r\n            let w = this._font[offset+2]; \r\n            let h = this._font[offset+3];\r\n            this.setAttributes(this.add(), ox, oy, ox+w, oy+h, x,y,x+w,y+h,z,pal);\r\n            if(ox>width){\r\n                oy += h;\r\n                ox = 0;\r\n            } else {\r\n                ox+=w; \r\n            }\r\n        }       \r\n\r\n        this._ptr += text.length; \r\n    }\r\n\r\n    private _createFont(){\r\n        let info = this._fontInfo;\r\n        let chars = info.chars;  \r\n        this._font = new Uint8Array(chars.length * VERTICES_QUAD);\r\n        let wRow = TEXTURE_SIZE / this._fontInfo.x;\r\n\r\n        for(let i = 0; i < chars.length; i++){\r\n            let x = (i % wRow) * info.x;\r\n            let y = Math.floor(i / wRow) * info.y;\r\n            let w = info.widths ? info.widths[i] : info.x;\r\n            let h = info.y;\r\n            let offset = i * VERTICES_QUAD;\r\n            \r\n            this._fontLoookup[chars.charCodeAt(i)] = offset;\r\n            //console.log(x,y);\r\n            this._font[offset] = x;\r\n            this._font[offset+1] = y;\r\n            this._font[offset+2] = w;\r\n            this._font[offset+3] = h;\r\n        }\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/core/TextBuffer.ts","import { TEXTURE_SIZE, UV_TILE, VERTICES_QUAD, COMP_UV, MIN_Z } from './constants';\r\nimport { QuadBuffer } from './QuadBuffer';\r\nimport { Buffer } from './interfaces';\r\n\r\nexport class TileBuffer extends QuadBuffer {\r\n\r\n    private _tileset: Uint8Array;\r\n\r\n    constructor(    \r\n        gl: WebGLRenderingContext,\r\n        private _width: number, \r\n        private _height: number, \r\n        private _twidth: number = 16, \r\n        private _theight: number = 16){\r\n        \r\n        super(gl, _width * _height);\r\n    }\r\n\r\n    create(tids?: number[], baseZ = MIN_Z){\r\n        this._createTileset();\r\n        \r\n        if(tids)\r\n            this.setTiles(tids, baseZ);\r\n        \r\n        super.create();\r\n        this.addMany(this._width * this._height);\r\n\r\n        return this;\r\n    }\r\n\r\n    setTile(tid: number, x: number, y: number, z = MIN_Z){\r\n        let seq = y * this._width + x;\r\n        this.setTileSeq(seq, tid);\r\n\r\n        return this;\r\n    }\r\n\r\n    setTiles(tids: number[], baseZ = MIN_Z){\r\n        for(let i = 0; i < tids.length; i ++){\r\n            this.setTileSeq(i, tids[i], baseZ);            \r\n        }\r\n        return this;\r\n    }\r\n\r\n    setTileSeq(seq: number, tid: number, z = MIN_Z){\r\n        if(tid == 0){\r\n            this.setAttributes(seq, 0,0,0,0,0,0,0,0,0,0);\r\n            return;\r\n        }\r\n\r\n        let ts = this._tileset;\r\n        let offset = tid * (VERTICES_QUAD);\r\n\r\n        let x1 = (seq % this._width) * this._twidth;\r\n        let y1 = Math.floor(seq / this._width) * this._theight;\r\n        let x2 = x1 + this._twidth;\r\n        let y2 = y1 + this._theight;\r\n        \r\n        this.setAttributes(seq, x1, y1, x2, y2, ts[offset], ts[offset+1], ts[offset+2], ts[offset+3],z, 0);\r\n    }\r\n\r\n    private _createTileset(){\r\n        let ctr = 0;\r\n        let tileset = new Uint8Array((TEXTURE_SIZE / this._twidth) * (TEXTURE_SIZE / this._theight) * VERTICES_QUAD);\r\n\r\n        for(let y = 0; y < TEXTURE_SIZE; y += this._twidth){\r\n            for(let x = 0; x < TEXTURE_SIZE; x += this._theight){\r\n                tileset[ctr++] = x;\r\n                tileset[ctr++] = y;\r\n\r\n                tileset[ctr++] = x + this._twidth;\r\n                tileset[ctr++] = y + this._theight;\r\n            }\r\n        }\r\n\r\n        this._tileset = tileset;\r\n    }\r\n\r\n    private _createGeometry(){\r\n        \r\n        // let ctr = 0;\r\n        // let idxCtr = 0;\r\n        // let vertex = 0;\r\n\r\n        // for(let y = 0; y < this._theight * this._height; y += this._theight){\r\n        //     for(let x = 0; x < this._twidth * this._width; x += this._twidth){\r\n        //         this.add();\r\n        //         ctr++;\r\n        //     }\r\n        // }\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/core/TileBuffer.ts","import { TEXTURE_SIZE, COMP_RGBA, HUGE, COMP_INDEXED } from './constants';\r\nimport { PixelTexture, ColorComponent } from './PixelTexture';\r\n\r\n\r\nexport class IndexedTexture extends PixelTexture {\r\n        \r\n    constructor(gl: WebGLRenderingContext){\r\n        super(gl);\r\n    }\r\n\r\n    protected get _components() {\r\n        return COMP_INDEXED;\r\n    }\r\n\r\n    protected get _options() {\r\n        return {\r\n            target: this._gl.TEXTURE_2D,\r\n            width: TEXTURE_SIZE,\r\n            height: TEXTURE_SIZE,\r\n            min: this._gl.NEAREST,\r\n            mag: this._gl.NEAREST,\r\n            src: this._texdata,\r\n            format: this._gl.LUMINANCE,\r\n            type: this._gl.UNSIGNED_BYTE\r\n        };\r\n    }\r\n\r\n    // public setPngData(pngData: Uint8Array){\r\n    //     this.setDataFunc((x,y,comp) => {\r\n    //         let pngOffset = y * (TEXTURE_SIZE+1) + x +1;\r\n    //         return pngData[pngOffset];\r\n    //     });\r\n    // }\r\n    \r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/core/IndexedTexture.ts","import { RgbaTexture } from './RgbaTexture';\r\nimport { TEXTURE_SIZE, COMP_RGBA, COMP_RGB } from './constants';\r\nimport { ColorComponent } from './PixelTexture';\r\n\r\nexport class PaletteTexture extends RgbaTexture {\r\n    public setPalFunc(palId: number, func: (idx:number, comp: ColorComponent) => number){\r\n        let tex = this._texdata;\r\n        let f = Math.floor;\r\n        let totComp = this._components;\r\n        let start = palId * TEXTURE_SIZE * totComp;\r\n        let end = start + TEXTURE_SIZE * totComp;\r\n\r\n        for (var i = start; i < end; i++) {\r\n            let comp = i % COMP_RGBA;\r\n            let pixel = Math.floor((i - comp) / totComp);\r\n            tex[i] = func(pixel % 256 , i % totComp);            \r\n        }\r\n\r\n        this.setPalDirty(palId);\r\n    }   \r\n\r\n    public setRawPalette(palId: number, data: Uint8Array){\r\n        let offset = this._components * TEXTURE_SIZE * palId;\r\n        for (var i = 0; i < data.length; i++) {\r\n            this._texdata[offset+i] = data[i];            \r\n        } \r\n    }\r\n    \r\n    public setPalDirty(palId: number){\r\n        this.setRowDirty(palId);\r\n    }\r\n\r\n    // public setPngPalette(palId: number, pngPal: Uint8Array){\r\n    //     this.setPalFunc(palId, (x, comp) => {\r\n    //         // Make first color transparent\r\n    //         if(x == 0 && comp == ColorComponent.A)\r\n    //             return 0;\r\n\r\n    //         switch (comp) {\r\n    //             case ColorComponent.A:\r\n    //                 return 255;\r\n    //             default:\r\n    //                 return pngPal[x * COMP_RGB + comp]; \r\n    //         }\r\n    //     });\r\n    // }\r\n\r\n    public setIndex(palId: number, index: number, color: ArrayLike<number>){\r\n        return this.setPixel(index, palId, color);        \r\n    }\r\n\r\n    public getIndex(palId: number, index: number){\r\n        return this.getPixel(index, palId);        \r\n    }\r\n\r\n    public shift(palId: number, start: number, end: number){\r\n        let len = end - start;\r\n        for (var i = 0; i < len; i++) {\r\n            this.switchColors(palId, start+i, end);            \r\n        }\r\n    }\r\n\r\n    public switchColors(palId: number, idx1: number, idx2: number){\r\n        let temp = this.getIndex(palId, idx1);\r\n        this.setIndex(palId, idx1, this.getIndex(palId, idx2));\r\n        this.setIndex(palId, idx2, temp);\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/core/PaletteTexture.ts","import { TEXTURE_SIZE, COMP_RGBA, HUGE, COMP_RGB } from './constants';\r\nimport { PixelTexture, ColorComponent } from './PixelTexture';\r\n\r\nexport class RgbaTexture extends PixelTexture {\r\n        \r\n    constructor(gl: WebGLRenderingContext){\r\n        super(gl);\r\n    }\r\n\r\n    protected get _components() {\r\n        return COMP_RGBA;\r\n    }\r\n\r\n    protected get _options() {\r\n        return {\r\n            target: this._gl.TEXTURE_2D,\r\n            width: TEXTURE_SIZE,\r\n            height: TEXTURE_SIZE,\r\n            min: this._gl.NEAREST,\r\n            mag: this._gl.NEAREST,\r\n            src: this._texdata,\r\n            format: this._gl.RGBA,\r\n            type: this._gl.UNSIGNED_BYTE\r\n        };\r\n    } \r\n        \r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/core/RgbaTexture.ts","import { TileBuffer, Renderable, QuadBuffer, MIN_Z } from \"./core/index\";\r\nimport * as twgl from \"twgl.js\";\r\n\r\nexport function initWebGl() {\r\n    let canvas = <HTMLCanvasElement>document.getElementById(\"canvas\");\r\n\r\n    let gl = twgl.getContext(canvas, {\r\n        premultipliedAlpha: false,\r\n        alpha: false,\r\n        antialias: false\r\n    });\r\n\r\n    //twgl.resizeCanvasToDisplaySize(gl.canvas);\r\n    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\r\n    return gl;\r\n}\r\n\r\nexport function createTexture(gl: WebGLRenderingContext, path: string){\r\n    return twgl.createTexture(gl, {\r\n        src: path,\r\n        min: gl.NEAREST,\r\n        mag: gl.NEAREST\r\n    });\r\n}\r\n\r\nexport function createAlphaTexture(gl: WebGLRenderingContext, path: string){\r\n    return twgl.createTexture(gl, {\r\n        src: path,\r\n        min: gl.NEAREST,\r\n        mag: gl.NEAREST,\r\n        format: gl.LUMINANCE,\r\n        internalFormat: gl.LUMINANCE\r\n    });\r\n}\r\n\r\n\r\n\r\n\r\nlet offset = 5;\r\nexport function createTileSprite(gl: WebGLRenderingContext, texture,palette, paletteId){\r\n    let tids = [];\r\n    for(var i = 0; i<32*32; i++){\r\n        tids.push(1);\r\n    }\r\n    \r\n    offset++;\r\n    \r\n    let mesh = new TileBuffer(gl, 32, 32).create(tids, 1);\r\n    \r\n    return new Renderable({\r\n        buffer: mesh,\r\n        texture: texture,\r\n        palette: palette,\r\n        paletteId: paletteId,\r\n\r\n        //mode7: true,\r\n        zSort: false\r\n    });\r\n}\r\n\r\nexport function createSprite(gl: WebGLRenderingContext, texture, palette, paletteId, x,y,ox,oy,w,h){\r\n    let sb = new QuadBuffer(gl,1);\r\n    sb.setAttributes(0,x,y,x+w,y+h,ox,oy,ox+w,oy+w, MIN_Z, 0);\r\n    sb.create();\r\n    return new Renderable({\r\n        buffer:sb, \r\n        texture: texture, \r\n        palette: palette, \r\n        paletteId: paletteId,\r\n        zSort: false\r\n    });\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/helpers.ts","// stats.js - http://github.com/mrdoob/stats.js\n(function(f,e){\"object\"===typeof exports&&\"undefined\"!==typeof module?module.exports=e():\"function\"===typeof define&&define.amd?define(e):f.Stats=e()})(this,function(){var f=function(){function e(a){c.appendChild(a.dom);return a}function u(a){for(var d=0;d<c.children.length;d++)c.children[d].style.display=d===a?\"block\":\"none\";l=a}var l=0,c=document.createElement(\"div\");c.style.cssText=\"position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000\";c.addEventListener(\"click\",function(a){a.preventDefault();\nu(++l%c.children.length)},!1);var k=(performance||Date).now(),g=k,a=0,r=e(new f.Panel(\"FPS\",\"#0ff\",\"#002\")),h=e(new f.Panel(\"MS\",\"#0f0\",\"#020\"));if(self.performance&&self.performance.memory)var t=e(new f.Panel(\"MB\",\"#f08\",\"#201\"));u(0);return{REVISION:16,dom:c,addPanel:e,showPanel:u,begin:function(){k=(performance||Date).now()},end:function(){a++;var c=(performance||Date).now();h.update(c-k,200);if(c>g+1E3&&(r.update(1E3*a/(c-g),100),g=c,a=0,t)){var d=performance.memory;t.update(d.usedJSHeapSize/\n1048576,d.jsHeapSizeLimit/1048576)}return c},update:function(){k=this.end()},domElement:c,setMode:u}};f.Panel=function(e,f,l){var c=Infinity,k=0,g=Math.round,a=g(window.devicePixelRatio||1),r=80*a,h=48*a,t=3*a,v=2*a,d=3*a,m=15*a,n=74*a,p=30*a,q=document.createElement(\"canvas\");q.width=r;q.height=h;q.style.cssText=\"width:80px;height:48px\";var b=q.getContext(\"2d\");b.font=\"bold \"+9*a+\"px Helvetica,Arial,sans-serif\";b.textBaseline=\"top\";b.fillStyle=l;b.fillRect(0,0,r,h);b.fillStyle=f;b.fillText(e,t,v);\nb.fillRect(d,m,n,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d,m,n,p);return{dom:q,update:function(h,w){c=Math.min(c,h);k=Math.max(k,h);b.fillStyle=l;b.globalAlpha=1;b.fillRect(0,0,r,m);b.fillStyle=f;b.fillText(g(h)+\" \"+e+\" (\"+g(c)+\"-\"+g(k)+\")\",t,v);b.drawImage(q,d+a,m,n-a,p,d,m,n-a,p);b.fillRect(d+n-a,m,a,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d+n-a,m,a,g((1-h/w)*p))}}};return f});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/stats.js/build/stats.min.js\n// module id = 36\n// module chunks = 0","!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define(\"SPECTOR\",[],t):\"object\"==typeof exports?exports.SPECTOR=t():e.SPECTOR=t()}(this,function(){return function(e){function t(a){if(n[a])return n[a].exports;var r=n[a]={i:a,l:!1,exports:{}};return e[a].call(r.exports,r,r.exports,t),r.l=!0,r.exports}var n={};return t.m=e,t.c=n,t.i=function(e){return e},t.d=function(e,n,a){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:a})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,\"a\",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p=\"\",t(t.s=10)}([function(e,t){function n(e,t){var n=e[1]||\"\",r=e[3];if(!r)return n;if(t&&\"function\"==typeof btoa){var o=a(r);return[n].concat(r.sources.map(function(e){return\"/*# sourceURL=\"+r.sourceRoot+e+\" */\"})).concat([o]).join(\"\\n\")}return[n].join(\"\\n\")}function a(e){return\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,\"+btoa(unescape(encodeURIComponent(JSON.stringify(e))))+\" */\"}e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var a=n(t,e);return t[2]?\"@media \"+t[2]+\"{\"+a+\"}\":a}).join(\"\")},t.i=function(e,n){\"string\"==typeof e&&(e=[[null,e,\"\"]]);for(var a={},r=0;r<this.length;r++){var o=this[r][0];\"number\"==typeof o&&(a[o]=!0)}for(r=0;r<e.length;r++){var i=e[r];\"number\"==typeof i[0]&&a[i[0]]||(n&&!i[2]?i[2]=n:n&&(i[2]=\"(\"+i[2]+\") and (\"+n+\")\"),t.push(i))}},t}},function(e,t,n){function a(e,t){for(var n=0;n<e.length;n++){var a=e[n],r=E[a.id];if(r){r.refs++;for(var o=0;o<r.parts.length;o++)r.parts[o](a.parts[o]);for(;o<a.parts.length;o++)r.parts.push(c(a.parts[o],t))}else{for(var i=[],o=0;o<a.parts.length;o++)i.push(c(a.parts[o],t));E[a.id]={id:a.id,refs:1,parts:i}}}}function r(e){for(var t=[],n={},a=0;a<e.length;a++){var r=e[a],o=r[0],i=r[1],s=r[2],u=r[3],l={css:i,media:s,sourceMap:u};n[o]?n[o].parts.push(l):t.push(n[o]={id:o,parts:[l]})}return t}function o(e,t){var n=_(e.insertInto);if(!n)throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.\");var a=T[T.length-1];if(\"top\"===e.insertAt)a?a.nextSibling?n.insertBefore(t,a.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),T.push(t);else{if(\"bottom\"!==e.insertAt)throw new Error(\"Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.\");n.appendChild(t)}}function i(e){e.parentNode.removeChild(e);var t=T.indexOf(e);t>=0&&T.splice(t,1)}function s(e){var t=document.createElement(\"style\");return e.attrs.type=\"text/css\",l(t,e.attrs),o(e,t),t}function u(e){var t=document.createElement(\"link\");return e.attrs.type=\"text/css\",e.attrs.rel=\"stylesheet\",l(t,e.attrs),o(e,t),t}function l(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function c(e,t){var n,a,r;if(t.singleton){var o=f++;n=h||(h=s(t)),a=m.bind(null,n,o,!1),r=m.bind(null,n,o,!0)}else e.sourceMap&&\"function\"==typeof URL&&\"function\"==typeof URL.createObjectURL&&\"function\"==typeof URL.revokeObjectURL&&\"function\"==typeof Blob&&\"function\"==typeof btoa?(n=u(t),a=p.bind(null,n,t),r=function(){i(n),n.href&&URL.revokeObjectURL(n.href)}):(n=s(t),a=d.bind(null,n),r=function(){i(n)});return a(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;a(e=t)}else r()}}function m(e,t,n,a){var r=n?\"\":a.css;if(e.styleSheet)e.styleSheet.cssText=R(t,r);else{var o=document.createTextNode(r),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(o,i[t]):e.appendChild(o)}}function d(e,t){var n=t.css,a=t.media;if(a&&e.setAttribute(\"media\",a),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}function p(e,t,n){var a=n.css,r=n.sourceMap,o=void 0===t.convertToAbsoluteUrls&&r;(t.convertToAbsoluteUrls||o)&&(a=v(a)),r&&(a+=\"\\n/*# sourceMappingURL=data:application/json;base64,\"+btoa(unescape(encodeURIComponent(JSON.stringify(r))))+\" */\");var i=new Blob([a],{type:\"text/css\"}),s=e.href;e.href=URL.createObjectURL(i),s&&URL.revokeObjectURL(s)}var E={},C=function(e){var t;return function(){return void 0===t&&(t=e.apply(this,arguments)),t}}(function(){return window&&document&&document.all&&!window.atob}),_=function(e){var t={};return function(n){return void 0===t[n]&&(t[n]=e.call(this,n)),t[n]}}(function(e){return document.querySelector(e)}),h=null,f=0,T=[],v=n(8);e.exports=function(e,t){if(\"undefined\"!=typeof DEBUG&&DEBUG&&\"object\"!=typeof document)throw new Error(\"The style-loader cannot be used in a non-browser environment\");t=t||{},t.attrs=\"object\"==typeof t.attrs?t.attrs:{},void 0===t.singleton&&(t.singleton=C()),void 0===t.insertInto&&(t.insertInto=\"head\"),void 0===t.insertAt&&(t.insertAt=\"bottom\");var n=r(e);return a(n,t),function(e){for(var o=[],i=0;i<n.length;i++){var s=n[i],u=E[s.id];u.refs--,o.push(u)}if(e){a(r(e),t)}for(var i=0;i<o.length;i++){var u=o[i];if(0===u.refs){for(var l=0;l<u.parts.length;l++)u.parts[l]();delete E[u.id]}}}};var R=function(){var e=[];return function(t,n){return e[t]=n,e.filter(Boolean).join(\"\\n\")}}()},function(e,t,n){(function(t){var n=\"undefined\"!=typeof window?window:\"undefined\"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope?self:{},a=function(){var e=/\\blang(?:uage)?-(\\w+)\\b/i,t=0,a=n.Prism={manual:n.Prism&&n.Prism.manual,util:{encode:function(e){return e instanceof r?new r(e.type,a.util.encode(e.content),e.alias):\"Array\"===a.util.type(e)?e.map(a.util.encode):e.replace(/&/g,\"&amp;\").replace(/</g,\"&lt;\").replace(/\\u00a0/g,\" \")},type:function(e){return Object.prototype.toString.call(e).match(/\\[object (\\w+)\\]/)[1]},objId:function(e){return e.__id||Object.defineProperty(e,\"__id\",{value:++t}),e.__id},clone:function(e){switch(a.util.type(e)){case\"Object\":var t={};for(var n in e)e.hasOwnProperty(n)&&(t[n]=a.util.clone(e[n]));return t;case\"Array\":return e.map&&e.map(function(e){return a.util.clone(e)})}return e}},languages:{extend:function(e,t){var n=a.util.clone(a.languages[e]);for(var r in t)n[r]=t[r];return n},insertBefore:function(e,t,n,r){r=r||a.languages;var o=r[e];if(2==arguments.length){n=arguments[1];for(var i in n)n.hasOwnProperty(i)&&(o[i]=n[i]);return o}var s={};for(var u in o)if(o.hasOwnProperty(u)){if(u==t)for(var i in n)n.hasOwnProperty(i)&&(s[i]=n[i]);s[u]=o[u]}return a.languages.DFS(a.languages,function(t,n){n===r[e]&&t!=e&&(this[t]=s)}),r[e]=s},DFS:function(e,t,n,r){r=r||{};for(var o in e)e.hasOwnProperty(o)&&(t.call(e,o,e[o],n||o),\"Object\"!==a.util.type(e[o])||r[a.util.objId(e[o])]?\"Array\"!==a.util.type(e[o])||r[a.util.objId(e[o])]||(r[a.util.objId(e[o])]=!0,a.languages.DFS(e[o],t,o,r)):(r[a.util.objId(e[o])]=!0,a.languages.DFS(e[o],t,null,r)))}},plugins:{},highlightAll:function(e,t){var n={callback:t,selector:'code[class*=\"language-\"], [class*=\"language-\"] code, code[class*=\"lang-\"], [class*=\"lang-\"] code'};a.hooks.run(\"before-highlightall\",n);for(var r,o=n.elements||document.querySelectorAll(n.selector),i=0;r=o[i++];)a.highlightElement(r,!0===e,n.callback)},highlightElement:function(t,r,o){for(var i,s,u=t;u&&!e.test(u.className);)u=u.parentNode;u&&(i=(u.className.match(e)||[,\"\"])[1].toLowerCase(),s=a.languages[i]),t.className=t.className.replace(e,\"\").replace(/\\s+/g,\" \")+\" language-\"+i,u=t.parentNode,/pre/i.test(u.nodeName)&&(u.className=u.className.replace(e,\"\").replace(/\\s+/g,\" \")+\" language-\"+i);var l=t.textContent,c={element:t,language:i,grammar:s,code:l};if(a.hooks.run(\"before-sanity-check\",c),!c.code||!c.grammar)return c.code&&(c.element.textContent=c.code),void a.hooks.run(\"complete\",c);if(a.hooks.run(\"before-highlight\",c),r&&n.Worker){var m=new Worker(a.filename);m.onmessage=function(e){c.highlightedCode=e.data,a.hooks.run(\"before-insert\",c),c.element.innerHTML=c.highlightedCode,o&&o.call(c.element),a.hooks.run(\"after-highlight\",c),a.hooks.run(\"complete\",c)},m.postMessage(JSON.stringify({language:c.language,code:c.code,immediateClose:!0}))}else c.highlightedCode=a.highlight(c.code,c.grammar,c.language),a.hooks.run(\"before-insert\",c),c.element.innerHTML=c.highlightedCode,o&&o.call(t),a.hooks.run(\"after-highlight\",c),a.hooks.run(\"complete\",c)},highlight:function(e,t,n){var o=a.tokenize(e,t);return r.stringify(a.util.encode(o),n)},tokenize:function(e,t){var n=a.Token,r=[e],o=t.rest;if(o){for(var i in o)t[i]=o[i];delete t.rest}e:for(var i in t)if(t.hasOwnProperty(i)&&t[i]){var s=t[i];s=\"Array\"===a.util.type(s)?s:[s];for(var u=0;u<s.length;++u){var l=s[u],c=l.inside,m=!!l.lookbehind,d=!!l.greedy,p=0,E=l.alias;if(d&&!l.pattern.global){var C=l.pattern.toString().match(/[imuy]*$/)[0];l.pattern=RegExp(l.pattern.source,C+\"g\")}l=l.pattern||l;for(var _=0,h=0;_<r.length;h+=r[_].length,++_){var f=r[_];if(r.length>e.length)break e;if(!(f instanceof n)){l.lastIndex=0;var T=l.exec(f),v=1;if(!T&&d&&_!=r.length-1){if(l.lastIndex=h,!(T=l.exec(e)))break;for(var R=T.index+(m?T[1].length:0),A=T.index+T[0].length,S=_,g=h,b=r.length;b>S&&A>g;++S)g+=r[S].length,R>=g&&(++_,h=g);if(r[_]instanceof n||r[S-1].greedy)continue;v=S-_,f=e.slice(h,g),T.index-=h}if(T){m&&(p=T[1].length);var R=T.index+p,T=T[0].slice(p),A=R+T.length,I=f.slice(0,R),N=f.slice(A),F=[_,v];I&&F.push(I);var y=new n(i,c?a.tokenize(T,c):T,E,T,d);F.push(y),N&&F.push(N),Array.prototype.splice.apply(r,F)}}}}}return r},hooks:{all:{},add:function(e,t){var n=a.hooks.all;n[e]=n[e]||[],n[e].push(t)},run:function(e,t){var n=a.hooks.all[e];if(n&&n.length)for(var r,o=0;r=n[o++];)r(t)}}},r=a.Token=function(e,t,n,a,r){this.type=e,this.content=t,this.alias=n,this.length=0|(a||\"\").length,this.greedy=!!r};if(r.stringify=function(e,t,n){if(\"string\"==typeof e)return e;if(\"Array\"===a.util.type(e))return e.map(function(n){return r.stringify(n,t,e)}).join(\"\");var o={type:e.type,content:r.stringify(e.content,t,n),tag:\"span\",classes:[\"token\",e.type],attributes:{},language:t,parent:n};if(\"comment\"==o.type&&(o.attributes.spellcheck=\"true\"),e.alias){var i=\"Array\"===a.util.type(e.alias)?e.alias:[e.alias];Array.prototype.push.apply(o.classes,i)}a.hooks.run(\"wrap\",o);var s=Object.keys(o.attributes).map(function(e){return e+'=\"'+(o.attributes[e]||\"\").replace(/\"/g,\"&quot;\")+'\"'}).join(\" \");return\"<\"+o.tag+' class=\"'+o.classes.join(\" \")+'\"'+(s?\" \"+s:\"\")+\">\"+o.content+\"</\"+o.tag+\">\"},!n.document)return n.addEventListener?(n.addEventListener(\"message\",function(e){var t=JSON.parse(e.data),r=t.language,o=t.code,i=t.immediateClose;n.postMessage(a.highlight(o,a.languages[r],r)),i&&n.close()},!1),n.Prism):n.Prism;var o=document.currentScript||[].slice.call(document.getElementsByTagName(\"script\")).pop();return o&&(a.filename=o.src,!document.addEventListener||a.manual||o.hasAttribute(\"data-manual\")||(\"loading\"!==document.readyState?window.requestAnimationFrame?window.requestAnimationFrame(a.highlightAll):window.setTimeout(a.highlightAll,16):document.addEventListener(\"DOMContentLoaded\",a.highlightAll))),n.Prism}();void 0!==e&&e.exports&&(e.exports=a),void 0!==t&&(t.Prism=a),a.languages.markup={comment:/<!--[\\w\\W]*?-->/,prolog:/<\\?[\\w\\W]+?\\?>/,doctype:/<!DOCTYPE[\\w\\W]+?>/i,cdata:/<!\\[CDATA\\[[\\w\\W]*?]]>/i,tag:{pattern:/<\\/?(?!\\d)[^\\s>\\/=$<]+(?:\\s+[^\\s>\\/=]+(?:=(?:(\"|')(?:\\\\\\1|\\\\?(?!\\1)[\\w\\W])*\\1|[^\\s'\">=]+))?)*\\s*\\/?>/i,inside:{tag:{pattern:/^<\\/?[^\\s>\\/]+/i,inside:{punctuation:/^<\\/?/,namespace:/^[^\\s>\\/:]+:/}},\"attr-value\":{pattern:/=(?:('|\")[\\w\\W]*?(\\1)|[^\\s>]+)/i,inside:{punctuation:/[=>\"']/}},punctuation:/\\/?>/,\"attr-name\":{pattern:/[^\\s>\\/]+/,inside:{namespace:/^[^\\s>\\/:]+:/}}}},entity:/&#?[\\da-z]{1,8};/i},a.hooks.add(\"wrap\",function(e){\"entity\"===e.type&&(e.attributes.title=e.content.replace(/&amp;/,\"&\"))}),a.languages.xml=a.languages.markup,a.languages.html=a.languages.markup,a.languages.mathml=a.languages.markup,a.languages.svg=a.languages.markup,a.languages.css={comment:/\\/\\*[\\w\\W]*?\\*\\//,atrule:{pattern:/@[\\w-]+?.*?(;|(?=\\s*\\{))/i,inside:{rule:/@[\\w-]+/}},url:/url\\((?:([\"'])(\\\\(?:\\r\\n|[\\w\\W])|(?!\\1)[^\\\\\\r\\n])*\\1|.*?)\\)/i,selector:/[^\\{\\}\\s][^\\{\\};]*?(?=\\s*\\{)/,string:{pattern:/(\"|')(\\\\(?:\\r\\n|[\\w\\W])|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0},property:/(\\b|\\B)[\\w-]+(?=\\s*:)/i,important:/\\B!important\\b/i,function:/[-a-z0-9]+(?=\\()/i,punctuation:/[(){};:]/},a.languages.css.atrule.inside.rest=a.util.clone(a.languages.css),a.languages.markup&&(a.languages.insertBefore(\"markup\",\"tag\",{style:{pattern:/(<style[\\w\\W]*?>)[\\w\\W]*?(?=<\\/style>)/i,lookbehind:!0,inside:a.languages.css,alias:\"language-css\"}}),a.languages.insertBefore(\"inside\",\"attr-value\",{\"style-attr\":{pattern:/\\s*style=(\"|').*?\\1/i,inside:{\"attr-name\":{pattern:/^\\s*style/i,inside:a.languages.markup.tag.inside},punctuation:/^\\s*=\\s*['\"]|['\"]\\s*$/,\"attr-value\":{pattern:/.+/i,inside:a.languages.css}},alias:\"language-css\"}},a.languages.markup.tag)),a.languages.clike={comment:[{pattern:/(^|[^\\\\])\\/\\*[\\w\\W]*?\\*\\//,lookbehind:!0},{pattern:/(^|[^\\\\:])\\/\\/.*/,lookbehind:!0}],string:{pattern:/([\"'])(\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0},\"class-name\":{pattern:/((?:\\b(?:class|interface|extends|implements|trait|instanceof|new)\\s+)|(?:catch\\s+\\())[a-z0-9_\\.\\\\]+/i,lookbehind:!0,inside:{punctuation:/(\\.|\\\\)/}},keyword:/\\b(if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\\b/,boolean:/\\b(true|false)\\b/,function:/[a-z0-9_]+(?=\\()/i,number:/\\b-?(?:0x[\\da-f]+|\\d*\\.?\\d+(?:e[+-]?\\d+)?)\\b/i,operator:/--?|\\+\\+?|!=?=?|<=?|>=?|==?=?|&&?|\\|\\|?|\\?|\\*|\\/|~|\\^|%/,punctuation:/[{}[\\];(),.:]/},a.languages.javascript=a.languages.extend(\"clike\",{keyword:/\\b(as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|var|void|while|with|yield)\\b/,number:/\\b-?(0x[\\dA-Fa-f]+|0b[01]+|0o[0-7]+|\\d*\\.?\\d+([Ee][+-]?\\d+)?|NaN|Infinity)\\b/,function:/[_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*(?=\\()/i,operator:/--?|\\+\\+?|!=?=?|<=?|>=?|==?=?|&&?|\\|\\|?|\\?|\\*\\*?|\\/|~|\\^|%|\\.{3}/}),a.languages.insertBefore(\"javascript\",\"keyword\",{regex:{pattern:/(^|[^\\/])\\/(?!\\/)(\\[.+?]|\\\\.|[^\\/\\\\\\r\\n])+\\/[gimyu]{0,5}(?=\\s*($|[\\r\\n,.;})]))/,lookbehind:!0,greedy:!0}}),a.languages.insertBefore(\"javascript\",\"string\",{\"template-string\":{pattern:/`(?:\\\\\\\\|\\\\?[^\\\\])*?`/,greedy:!0,inside:{interpolation:{pattern:/\\$\\{[^}]+\\}/,inside:{\"interpolation-punctuation\":{pattern:/^\\$\\{|\\}$/,alias:\"punctuation\"},rest:a.languages.javascript}},string:/[\\s\\S]+/}}}),a.languages.markup&&a.languages.insertBefore(\"markup\",\"tag\",{script:{pattern:/(<script[\\w\\W]*?>)[\\w\\W]*?(?=<\\/script>)/i,lookbehind:!0,inside:a.languages.javascript,alias:\"language-javascript\"}}),a.languages.js=a.languages.javascript,a.languages.glsl=a.languages.extend(\"clike\",{comment:[/\\/\\*[\\w\\W]*?\\*\\//,/\\/\\/(?:\\\\(?:\\r\\n|[\\s\\S])|.)*/],number:/\\b(?:0x[\\da-f]+|(?:\\.\\d+|\\d+\\.?\\d*)(?:e[+-]?\\d+)?)[ulf]*\\b/i,keyword:/\\b(?:attribute|const|uniform|varying|buffer|shared|coherent|volatile|restrict|readonly|writeonly|atomic_uint|layout|centroid|flat|smooth|noperspective|patch|sample|break|continue|do|for|while|switch|case|default|if|else|subroutine|in|out|inout|float|double|int|void|bool|true|false|invariant|precise|discard|return|d?mat[234](?:x[234])?|[ibdu]?vec[234]|uint|lowp|mediump|highp|precision|[iu]?sampler[123]D|[iu]?samplerCube|sampler[12]DShadow|samplerCubeShadow|[iu]?sampler[12]DArray|sampler[12]DArrayShadow|[iu]?sampler2DRect|sampler2DRectShadow|[iu]?samplerBuffer|[iu]?sampler2DMS(?:Array)?|[iu]?samplerCubeArray|samplerCubeArrayShadow|[iu]?image[123]D|[iu]?image2DRect|[iu]?imageCube|[iu]?imageBuffer|[iu]?image[12]DArray|[iu]?imageCubeArray|[iu]?image2DMS(?:Array)?|struct|common|partition|active|asm|class|union|enum|typedef|template|this|resource|goto|inline|noinline|public|static|extern|external|interface|long|short|half|fixed|unsigned|superp|input|output|hvec[234]|fvec[234]|sampler3DRect|filter|sizeof|cast|namespace|using)\\b/}),a.languages.insertBefore(\"glsl\",\"comment\",{preprocessor:{pattern:/(^[ \\t]*)#(?:(?:define|undef|if|ifdef|ifndef|else|elif|endif|error|pragma|extension|version|line)\\b)?/m,lookbehind:!0,alias:\"builtin\"}}),e.exports=a}).call(t,n(9))},function(e,t){var n;!function(e){!function(e){var t=function(){function e(){this.callbacks=[],this.counter=-1}return e.prototype.add=function(e,t){return this.counter++,t&&(e=e.bind(t)),this.callbacks[this.counter]=e,this.counter},e.prototype.remove=function(e){delete this.callbacks[e]},e.prototype.clear=function(){this.callbacks={}},e.prototype.trigger=function(e){for(var t in this.callbacks)this.callbacks.hasOwnProperty(t)&&this.callbacks[t](e)},e}();e.Event=t}(e.Utils||(e.Utils={}))}(n||(n={}));var n;!function(e){!function(e){e[e.noLog=0]=\"noLog\",e[e.error=1]=\"error\",e[e.warning=2]=\"warning\",e[e.info=3]=\"info\"}(e.LogLevel||(e.LogLevel={}))}(n||(n={})),function(e){!function(t){var n=function(){function t(t){void 0===t&&(t=e.LogLevel.warning),this.level=t}return t.prototype.setLevel=function(e){this.level=e},t.prototype.error=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];this.level>0&&console.error(e,t)},t.prototype.warn=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];this.level>1&&console.warn(e,t)},t.prototype.info=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];this.level>2&&console.log(e,t)},t}();t.ConsoleLogger=n}(e.Utils||(e.Utils={}))}(n||(n={}));var n;!function(e){!function(e){var t=function(){function e(){}return e.prototype.getStackTrace=function(e,t){void 0===e&&(e=0),void 0===t&&(t=0);var n=[];try{throw new Error}catch(e){if(e.stack)for(var a=e.stack.split(\"\\n\"),r=0,o=a.length;r<o;r++)a[r].match(/^\\s*[A-Za-z0-9\\-_\\$]+\\(/)?n.push(a[r]):0===a[r].indexOf(\"    at \")&&(a[r]=a[r].replace(\"    at \",\"\"),n.push(a[r]));else if(e.message)for(var a=e.message.split(\"\\n\"),r=0,o=a.length;r<o;r++)if(a[r].match(/^\\s*[A-Za-z0-9\\-_\\$]+\\(/)){var i=a[r];a[r+1]&&(i+=\" at \"+a[r+1],r++),n.push(i)}}if(!n)for(var s=arguments.callee.caller;s;){var u=s.toString(),l=u.substring(u.indexOf(\"function\")+8,u.indexOf(\"\"))||\"anonymous\";n.push(l),s=s.caller}if(n){n.shift();for(var r=0;r<e&&n.length>0;r++)n.shift();for(var r=0;r<t&&n.length>0;r++)n.pop()}return n},e}();e.StackTrace=t}(e.Utils||(e.Utils={}))}(n||(n={}));var n;!function(e){!function(e){var t=function(){function e(){if(window.performance&&window.performance.now)this.nowFunction=this.dateBasedPerformanceNow.bind(this);else{var e=new Date;this.nowFunction=e.getTime.bind(e)}}return e.prototype.dateBasedPerformanceNow=function(){return performance.timing.navigationStart+performance.now()},Object.defineProperty(e.prototype,\"now\",{get:function(){return this.nowFunction()},enumerable:!0,configurable:!0}),e}();e.Time=t}(e.Utils||(e.Utils={}))}(n||(n={}));var n;!function(e){function t(e,t){var n={};for(var a in e)e.hasOwnProperty(a)&&(n[a]=e[a]);for(var a in t)n.hasOwnProperty(a)||(n[a]=t[a]);return n}e.merge=t}(n||(n={}));var n;!function(e){var t=function(){function t(){}return t.isWebGlConstant=function(t){return null!==e.WebGlConstantsByValue[t]&&void 0!==e.WebGlConstantsByValue[t]},t.stringifyWebGlConstant=function(t,n){if(0===t){var a=this.zeroMeaningByCommand[n];return a||\"0\"}if(1===t){var a=this.oneMeaningByCommand[n];return a||\"1\"}var r=e.WebGlConstantsByValue[t];return r?r.name:t+\"\"},t}();t.DEPTH_BUFFER_BIT={name:\"DEPTH_BUFFER_BIT\",value:256,description:\"Passed to clear to clear the current depth buffer.\"},t.STENCIL_BUFFER_BIT={name:\"STENCIL_BUFFER_BIT\",value:1024,description:\"Passed to clear to clear the current stencil buffer.\"},t.COLOR_BUFFER_BIT={name:\"COLOR_BUFFER_BIT\",value:16384,description:\"Passed to clear to clear the current color buffer.\"},t.POINTS={name:\"POINTS\",value:0,description:\"Passed to drawElements or drawArrays to draw single points.\"},t.LINES={name:\"LINES\",value:1,description:\"Passed to drawElements or drawArrays to draw lines. Each vertex connects to the one after it.\"},t.LINE_LOOP={name:\"LINE_LOOP\",value:2,description:\"Passed to drawElements or drawArrays to draw lines. Each set of two vertices is treated as a separate line segment.\"},t.LINE_STRIP={name:\"LINE_STRIP\",value:3,description:\"Passed to drawElements or drawArrays to draw a connected group of line segments from the first vertex to the last.\"},t.TRIANGLES={name:\"TRIANGLES\",value:4,description:\"Passed to drawElements or drawArrays to draw triangles. Each set of three vertices creates a separate triangle.\"},t.TRIANGLE_STRIP={name:\"TRIANGLE_STRIP\",value:5,description:\"Passed to drawElements or drawArrays to draw a connected group of triangles.\"},t.TRIANGLE_FAN={name:\"TRIANGLE_FAN\",value:6,description:\"Passed to drawElements or drawArrays to draw a connected group of triangles. Each vertex connects to the previous and the first vertex in the fan.\"},t.ZERO={name:\"ZERO\",value:0,description:\"Passed to blendFunc or blendFuncSeparate to turn off a component.\"},t.ONE={name:\"ONE\",value:1,description:\"Passed to blendFunc or blendFuncSeparate to turn on a component.\"},t.SRC_COLOR={name:\"SRC_COLOR\",value:768,description:\"Passed to blendFunc or blendFuncSeparate to multiply a component by the source elements color.\"},t.ONE_MINUS_SRC_COLOR={name:\"ONE_MINUS_SRC_COLOR\",value:769,description:\"Passed to blendFunc or blendFuncSeparate to multiply a component by one minus the source elements color.\"},t.SRC_ALPHA={name:\"SRC_ALPHA\",value:770,description:\"Passed to blendFunc or blendFuncSeparate to multiply a component by the source's alpha.\"},t.ONE_MINUS_SRC_ALPHA={name:\"ONE_MINUS_SRC_ALPHA\",value:771,description:\"Passed to blendFunc or blendFuncSeparate to multiply a component by one minus the source's alpha.\"},t.DST_ALPHA={name:\"DST_ALPHA\",value:772,description:\"Passed to blendFunc or blendFuncSeparate to multiply a component by the destination's alpha.\"},t.ONE_MINUS_DST_ALPHA={name:\"ONE_MINUS_DST_ALPHA\",value:773,description:\"Passed to blendFunc or blendFuncSeparate to multiply a component by one minus the destination's alpha.\"},t.DST_COLOR={name:\"DST_COLOR\",value:774,description:\"Passed to blendFunc or blendFuncSeparate to multiply a component by the destination's color.\"},t.ONE_MINUS_DST_COLOR={name:\"ONE_MINUS_DST_COLOR\",value:775,description:\"Passed to blendFunc or blendFuncSeparate to multiply a component by one minus the destination's color.\"},t.SRC_ALPHA_SATURATE={name:\"SRC_ALPHA_SATURATE\",value:776,description:\"Passed to blendFunc or blendFuncSeparate to multiply a component by the minimum of source's alpha or one minus the destination's alpha.\"},t.CONSTANT_COLOR={name:\"CONSTANT_COLOR\",value:32769,description:\"Passed to blendFunc or blendFuncSeparate to specify a constant color blend function.\"},t.ONE_MINUS_CONSTANT_COLOR={name:\"ONE_MINUS_CONSTANT_COLOR\",value:32770,description:\"Passed to blendFunc or blendFuncSeparate to specify one minus a constant color blend function.\"},t.CONSTANT_ALPHA={name:\"CONSTANT_ALPHA\",value:32771,description:\"Passed to blendFunc or blendFuncSeparate to specify a constant alpha blend function.\"},t.ONE_MINUS_CONSTANT_ALPHA={name:\"ONE_MINUS_CONSTANT_ALPHA\",value:32772,description:\"Passed to blendFunc or blendFuncSeparate to specify one minus a constant alpha blend function.\"},t.FUNC_ADD={name:\"FUNC_ADD\",value:32774,description:\"Passed to blendEquation or blendEquationSeparate to set an addition blend function.\"},t.FUNC_SUBSTRACT={name:\"FUNC_SUBSTRACT\",value:32778,description:\"Passed to blendEquation or blendEquationSeparate to specify a subtraction blend function (source - destination).\"},t.FUNC_REVERSE_SUBTRACT={name:\"FUNC_REVERSE_SUBTRACT\",value:32779,description:\"Passed to blendEquation or blendEquationSeparate to specify a reverse subtraction blend function (destination - source).\"},t.BLEND_EQUATION={name:\"BLEND_EQUATION\",value:32777,description:\"Passed to getParameter to get the current RGB blend function.\"},t.BLEND_EQUATION_RGB={name:\"BLEND_EQUATION_RGB\",value:32777,description:\"Passed to getParameter to get the current RGB blend function. Same as BLEND_EQUATION\"},t.BLEND_EQUATION_ALPHA={name:\"BLEND_EQUATION_ALPHA\",value:34877,description:\"Passed to getParameter to get the current alpha blend function. Same as BLEND_EQUATION\"},t.BLEND_DST_RGB={name:\"BLEND_DST_RGB\",value:32968,description:\"Passed to getParameter to get the current destination RGB blend function.\"},t.BLEND_SRC_RGB={name:\"BLEND_SRC_RGB\",value:32969,description:\"Passed to getParameter to get the current destination RGB blend function.\"},t.BLEND_DST_ALPHA={name:\"BLEND_DST_ALPHA\",value:32970,description:\"Passed to getParameter to get the current destination alpha blend function.\"},t.BLEND_SRC_ALPHA={name:\"BLEND_SRC_ALPHA\",value:32971,description:\"Passed to getParameter to get the current source alpha blend function.\"},t.BLEND_COLOR={name:\"BLEND_COLOR\",value:32773,description:\"Passed to getParameter to return a the current blend color.\"},t.ARRAY_BUFFER_BINDING={name:\"ARRAY_BUFFER_BINDING\",value:34964,description:\"Passed to getParameter to get the array buffer binding.\"},t.ELEMENT_ARRAY_BUFFER_BINDING={name:\"ELEMENT_ARRAY_BUFFER_BINDING\",value:34965,description:\"Passed to getParameter to get the current element array buffer.\"},t.LINE_WIDTH={name:\"LINE_WIDTH\",value:2849,description:\"Passed to getParameter to get the current lineWidth (set by the lineWidth method).\"},t.ALIASED_POINT_SIZE_RANGE={name:\"ALIASED_POINT_SIZE_RANGE\",value:33901,description:\"Passed to getParameter to get the current size of a point drawn with gl.POINTS\"},t.ALIASED_LINE_WIDTH_RANGE={name:\"ALIASED_LINE_WIDTH_RANGE\",value:33902,description:\"Passed to getParameter to get the range of available widths for a line. Returns a length-2 array with the lo value at 0, and hight at 1.\"},t.CULL_FACE_MODE={name:\"CULL_FACE_MODE\",value:2885,description:\"Passed to getParameter to get the current value of cullFace. Should return FRONT, BACK, or FRONT_AND_BACK\"},t.FRONT_FACE={name:\"FRONT_FACE\",value:2886,description:\"Passed to getParameter to determine the current value of frontFace. Should return CW or CCW.\"},t.DEPTH_RANGE={name:\"DEPTH_RANGE\",value:2928,description:\"Passed to getParameter to return a length-2 array of floats giving the current depth range.\"},t.DEPTH_WRITEMASK={name:\"DEPTH_WRITEMASK\",value:2930,description:\"Passed to getParameter to determine if the depth write mask is enabled.\"},t.DEPTH_CLEAR_VALUE={name:\"DEPTH_CLEAR_VALUE\",value:2931,description:\"Passed to getParameter to determine the current depth clear value.\"},t.DEPTH_FUNC={name:\"DEPTH_FUNC\",value:2932,description:\"Passed to getParameter to get the current depth function. Returns NEVER, ALWAYS, LESS, EQUAL, LEQUAL, GREATER, GEQUAL, or NOTEQUAL.\"},t.STENCIL_CLEAR_VALUE={name:\"STENCIL_CLEAR_VALUE\",value:2961,description:\"Passed to getParameter to get the value the stencil will be cleared to.\"},t.STENCIL_FUNC={name:\"STENCIL_FUNC\",value:2962,description:\"Passed to getParameter to get the current stencil function. Returns NEVER, ALWAYS, LESS, EQUAL, LEQUAL, GREATER, GEQUAL, or NOTEQUAL.\"},t.STENCIL_FAIL={name:\"STENCIL_FAIL\",value:2964,description:\"Passed to getParameter to get the current stencil fail function. Should return KEEP, REPLACE, INCR, DECR, INVERT, INCR_WRAP, or DECR_WRAP.\"},t.STENCIL_PASS_DEPTH_FAIL={name:\"STENCIL_PASS_DEPTH_FAIL\",value:2965,description:\"Passed to getParameter to get the current stencil fail function should the depth buffer test fail. Should return KEEP, REPLACE, INCR, DECR, INVERT, INCR_WRAP, or DECR_WRAP.\"},t.STENCIL_PASS_DEPTH_PASS={name:\"STENCIL_PASS_DEPTH_PASS\",value:2966,description:\"Passed to getParameter to get the current stencil fail function should the depth buffer test pass. Should return KEEP, REPLACE, INCR, DECR, INVERT, INCR_WRAP, or DECR_WRAP.\"},t.STENCIL_REF={name:\"STENCIL_REF\",value:2967,description:\"Passed to getParameter to get the reference value used for stencil tests.\"},t.STENCIL_VALUE_MASK={name:\"STENCIL_VALUE_MASK\",value:2963,description:\" \"},t.STENCIL_WRITEMASK={name:\"STENCIL_WRITEMASK\",value:2968,description:\" \"},t.STENCIL_BACK_FUNC={name:\"STENCIL_BACK_FUNC\",value:34816,description:\" \"},t.STENCIL_BACK_FAIL={name:\"STENCIL_BACK_FAIL\",value:34817,description:\" \"},t.STENCIL_BACK_PASS_DEPTH_FAIL={name:\"STENCIL_BACK_PASS_DEPTH_FAIL\",value:34818,description:\" \"},t.STENCIL_BACK_PASS_DEPTH_PASS={name:\"STENCIL_BACK_PASS_DEPTH_PASS\",value:34819,description:\" \"},t.STENCIL_BACK_REF={name:\"STENCIL_BACK_REF\",value:36003,description:\" \"},t.STENCIL_BACK_VALUE_MASK={name:\"STENCIL_BACK_VALUE_MASK\",value:36004,description:\" \"},t.STENCIL_BACK_WRITEMASK={name:\"STENCIL_BACK_WRITEMASK\",value:36005,description:\" \"},t.VIEWPORT={name:\"VIEWPORT\",value:2978,description:\"Returns an Int32Array with four elements for the current viewport dimensions.\"},t.SCISSOR_BOX={name:\"SCISSOR_BOX\",value:3088,description:\"Returns an Int32Array with four elements for the current scissor box dimensions.\"},t.COLOR_CLEAR_VALUE={name:\"COLOR_CLEAR_VALUE\",value:3106,description:\" \"},t.COLOR_WRITEMASK={name:\"COLOR_WRITEMASK\",value:3107,description:\" \"},t.UNPACK_ALIGNMENT={name:\"UNPACK_ALIGNMENT\",value:3317,description:\" \"},t.PACK_ALIGNMENT={name:\"PACK_ALIGNMENT\",value:3333,description:\" \"},t.MAX_TEXTURE_SIZE={name:\"MAX_TEXTURE_SIZE\",value:3379,description:\" \"},t.MAX_VIEWPORT_DIMS={name:\"MAX_VIEWPORT_DIMS\",value:3386,description:\" \"},t.SUBPIXEL_BITS={name:\"SUBPIXEL_BITS\",value:3408,description:\" \"},t.RED_BITS={name:\"RED_BITS\",value:3410,description:\" \"},t.GREEN_BITS={name:\"GREEN_BITS\",value:3411,description:\" \"},t.BLUE_BITS={name:\"BLUE_BITS\",value:3412,description:\" \"},t.ALPHA_BITS={name:\"ALPHA_BITS\",value:3413,description:\" \"},t.DEPTH_BITS={name:\"DEPTH_BITS\",value:3414,description:\" \"},t.STENCIL_BITS={name:\"STENCIL_BITS\",value:3415,description:\" \"},t.POLYGON_OFFSET_UNITS={name:\"POLYGON_OFFSET_UNITS\",value:10752,description:\" \"},t.POLYGON_OFFSET_FACTOR={name:\"POLYGON_OFFSET_FACTOR\",value:32824,description:\" \"},t.TEXTURE_BINDING_2D={name:\"TEXTURE_BINDING_2D\",value:32873,description:\" \"},t.SAMPLE_BUFFERS={name:\"SAMPLE_BUFFERS\",value:32936,description:\" \"},t.SAMPLES={name:\"SAMPLES\",value:32937,description:\" \"},t.SAMPLE_COVERAGE_VALUE={name:\"SAMPLE_COVERAGE_VALUE\",value:32938,description:\" \"},t.SAMPLE_COVERAGE_INVERT={name:\"SAMPLE_COVERAGE_INVERT\",value:32939,description:\" \"},t.COMPRESSED_TEXTURE_FORMATS={name:\"COMPRESSED_TEXTURE_FORMATS\",value:34467,description:\" \"},t.VENDOR={name:\"VENDOR\",value:7936,description:\" \"},t.RENDERER={name:\"RENDERER\",value:7937,description:\" \"},t.VERSION={name:\"VERSION\",value:7938,description:\" \"},t.IMPLEMENTATION_COLOR_READ_TYPE={name:\"IMPLEMENTATION_COLOR_READ_TYPE\",value:35738,description:\" \"},t.IMPLEMENTATION_COLOR_READ_FORMAT={name:\"IMPLEMENTATION_COLOR_READ_FORMAT\",value:35739,description:\" \"},t.BROWSER_DEFAULT_WEBGL={name:\"BROWSER_DEFAULT_WEBGL\",value:37444,description:\" \"},t.STATIC_DRAW={name:\"STATIC_DRAW\",value:35044,description:\"Passed to bufferData as a hint about whether the contents of the buffer are likely to be used often and not change often.\"},t.STREAM_DRAW={name:\"STREAM_DRAW\",value:35040,description:\"Passed to bufferData as a hint about whether the contents of the buffer are likely to not be used often.\"},t.DYNAMIC_DRAW={name:\"DYNAMIC_DRAW\",value:35048,description:\"Passed to bufferData as a hint about whether the contents of the buffer are likely to be used often and change often.\"},t.ARRAY_BUFFER={name:\"ARRAY_BUFFER\",value:34962,description:\"Passed to bindBuffer or bufferData to specify the type of buffer being used.\"},t.ELEMENT_ARRAY_BUFFER={name:\"ELEMENT_ARRAY_BUFFER\",value:34963,description:\"Passed to bindBuffer or bufferData to specify the type of buffer being used.\"},t.BUFFER_SIZE={name:\"BUFFER_SIZE\",value:34660,description:\"Passed to getBufferParameter to get a buffer's size.\"},t.BUFFER_USAGE={name:\"BUFFER_USAGE\",value:34661,description:\"Passed to getBufferParameter to get the hint for the buffer passed in when it was created.\"},t.CURRENT_VERTEX_ATTRIB={name:\"CURRENT_VERTEX_ATTRIB\",value:34342,description:\"Passed to getVertexAttrib to read back the current vertex attribute.\"},t.VERTEX_ATTRIB_ARRAY_ENABLED={name:\"VERTEX_ATTRIB_ARRAY_ENABLED\",value:34338,description:\" \"},t.VERTEX_ATTRIB_ARRAY_SIZE={name:\"VERTEX_ATTRIB_ARRAY_SIZE\",value:34339,description:\" \"},t.VERTEX_ATTRIB_ARRAY_STRIDE={name:\"VERTEX_ATTRIB_ARRAY_STRIDE\",value:34340,description:\" \"},t.VERTEX_ATTRIB_ARRAY_TYPE={name:\"VERTEX_ATTRIB_ARRAY_TYPE\",value:34341,description:\" \"},t.VERTEX_ATTRIB_ARRAY_NORMALIZED={name:\"VERTEX_ATTRIB_ARRAY_NORMALIZED\",value:34922,description:\" \"},t.VERTEX_ATTRIB_ARRAY_POINTER={name:\"VERTEX_ATTRIB_ARRAY_POINTER\",value:34373,description:\" \"},t.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING={name:\"VERTEX_ATTRIB_ARRAY_BUFFER_BINDING\",value:34975,description:\" \"},t.CULL_FACE={name:\"CULL_FACE\",value:2884,description:\"Passed to enable/disable to turn on/off culling. Can also be used with getParameter to find the current culling method.\"},t.FRONT={name:\"FRONT\",value:1028,description:\"Passed to cullFace to specify that only front faces should be drawn.\"},t.BACK={name:\"BACK\",value:1029,description:\"Passed to cullFace to specify that only back faces should be drawn.\"},t.FRONT_AND_BACK={name:\"FRONT_AND_BACK\",value:1032,description:\"Passed to cullFace to specify that front and back faces should be drawn.\"},t.BLEND={name:\"BLEND\",value:3042,description:\"Passed to enable/disable to turn on/off blending. Can also be used with getParameter to find the current blending method.\"},t.DEPTH_TEST={name:\"DEPTH_TEST\",value:2929,description:\"Passed to enable/disable to turn on/off the depth test. Can also be used with getParameter to query the depth test.\"},t.DITHER={name:\"DITHER\",value:3024,description:\"Passed to enable/disable to turn on/off dithering. Can also be used with getParameter to find the current dithering method.\"},t.POLYGON_OFFSET_FILL={name:\"POLYGON_OFFSET_FILL\",value:32823,description:\"Passed to enable/disable to turn on/off the polygon offset. Useful for rendering hidden-line images, decals, and or solids with highlighted edges. Can also be used with getParameter to query the scissor test.\"},t.SAMPLE_ALPHA_TO_COVERAGE={name:\"SAMPLE_ALPHA_TO_COVERAGE\",value:32926,description:\"Passed to enable/disable to turn on/off the alpha to coverage. Used in multi-sampling alpha channels.\"},t.SAMPLE_COVERAGE={name:\"SAMPLE_COVERAGE\",value:32928,description:\"Passed to enable/disable to turn on/off the sample coverage. Used in multi-sampling.\"},t.SCISSOR_TEST={name:\"SCISSOR_TEST\",value:3089,description:\"Passed to enable/disable to turn on/off the scissor test. Can also be used with getParameter to query the scissor test.\"},t.STENCIL_TEST={name:\"STENCIL_TEST\",value:2960,description:\"Passed to enable/disable to turn on/off the stencil test. Can also be used with getParameter to query the stencil test.\"},t.NO_ERROR={name:\"NO_ERROR\",value:0,description:\"Returned from getError.\"},t.INVALID_ENUM={name:\"INVALID_ENUM\",value:1280,description:\"Returned from getError.\"},t.INVALID_VALUE={name:\"INVALID_VALUE\",value:1281,description:\"Returned from getError.\"},t.INVALID_OPERATION={name:\"INVALID_OPERATION\",value:1282,description:\"Returned from getError.\"},t.OUT_OF_MEMORY={name:\"OUT_OF_MEMORY\",value:1285,description:\"Returned from getError.\"},t.CONTEXT_LOST_WEBGL={name:\"CONTEXT_LOST_WEBGL\",value:37442,description:\"Returned from getError.\"},t.CW={name:\"CW\",value:2304,description:\"Passed to frontFace to specify the front face of a polygon is drawn in the clockwise direction\"},t.CCW={name:\"CCW\",value:2305,description:\"Passed to frontFace to specify the front face of a polygon is drawn in the counter clockwise direction\"},t.DONT_CARE={name:\"DONT_CARE\",value:4352,description:\"There is no preference for this behavior.\"},t.FASTEST={name:\"FASTEST\",value:4353,description:\"The most efficient behavior should be used.\"},t.NICEST={name:\"NICEST\",value:4354,description:\"The most correct or the highest quality option should be used.\"},t.GENERATE_MIPMAP_HINT={name:\"GENERATE_MIPMAP_HINT\",value:33170,description:\"Hint for the quality of filtering when generating mipmap images with WebGLRenderingContext.generateMipmap().\"},t.BYTE={name:\"BYTE\",value:5120,description:\" \"},t.UNSIGNED_BYTE={name:\"UNSIGNED_BYTE\",value:5121,description:\" \"},t.SHORT={name:\"SHORT\",value:5122,description:\" \"},t.UNSIGNED_SHORT={name:\"UNSIGNED_SHORT\",value:5123,description:\" \"},t.INT={name:\"INT\",value:5124,description:\" \"},t.UNSIGNED_INT={name:\"UNSIGNED_INT\",value:5125,description:\" \"},t.FLOAT={name:\"FLOAT\",value:5126,description:\" \"},t.DEPTH_COMPONENT={name:\"DEPTH_COMPONENT\",value:6402,description:\" \"},t.ALPHA={name:\"ALPHA\",value:6406,description:\" \"},t.RGB={name:\"RGB\",value:6407,description:\" \"},t.RGBA={name:\"RGBA\",value:6408,description:\" \"},t.LUMINANCE={name:\"LUMINANCE\",value:6409,description:\" \"},t.LUMINANCE_ALPHA={name:\"LUMINANCE_ALPHA\",value:6410,description:\" \"},t.UNSIGNED_SHORT_4_4_4_4={name:\"UNSIGNED_SHORT_4_4_4_4\",value:32819,description:\" \"},t.UNSIGNED_SHORT_5_5_5_1={name:\"UNSIGNED_SHORT_5_5_5_1\",value:32820,description:\" \"},t.UNSIGNED_SHORT_5_6_5={name:\"UNSIGNED_SHORT_5_6_5\",value:33635,description:\" \"},t.FRAGMENT_SHADER={name:\"FRAGMENT_SHADER\",value:35632,description:\"Passed to createShader to define a fragment shader.\"},t.VERTEX_SHADER={name:\"VERTEX_SHADER\",value:35633,description:\"Passed to createShader to define a vertex shader\"},t.COMPILE_STATUS={name:\"COMPILE_STATUS\",value:35713,description:\"Passed to getShaderParamter to get the status of the compilation. Returns false if the shader was not compiled. You can then query getShaderInfoLog to find the exact error\"},t.DELETE_STATUS={name:\"DELETE_STATUS\",value:35712,description:\"Passed to getShaderParamter to determine if a shader was deleted via deleteShader. Returns true if it was, false otherwise.\"},t.LINK_STATUS={name:\"LINK_STATUS\",value:35714,description:\"Passed to getProgramParameter after calling linkProgram to determine if a program was linked correctly. Returns false if there were errors. Use getProgramInfoLog to find the exact error.\"},t.VALIDATE_STATUS={name:\"VALIDATE_STATUS\",value:35715,description:\"Passed to getProgramParameter after calling validateProgram to determine if it is valid. Returns false if errors were found.\"},t.ATTACHED_SHADERS={name:\"ATTACHED_SHADERS\",value:35717,description:\"Passed to getProgramParameter after calling attachShader to determine if the shader was attached correctly. Returns false if errors occurred.\"},t.ACTIVE_ATTRIBUTES={name:\"ACTIVE_ATTRIBUTES\",value:35721,description:\"Passed to getProgramParameter to get the number of attributes active in a program.\"},t.ACTIVE_UNIFORMS={name:\"ACTIVE_UNIFORMS\",value:35718,description:\"Passed to getProgramParamter to get the number of uniforms active in a program.\"},t.MAX_VERTEX_ATTRIBS={name:\"MAX_VERTEX_ATTRIBS\",value:34921,description:\" \"},t.MAX_VERTEX_UNIFORM_VECTORS={name:\"MAX_VERTEX_UNIFORM_VECTORS\",value:36347,description:\" \"},t.MAX_VARYING_VECTORS={name:\"MAX_VARYING_VECTORS\",value:36348,description:\" \"},t.MAX_COMBINED_TEXTURE_IMAGE_UNITS={name:\"MAX_COMBINED_TEXTURE_IMAGE_UNITS\",value:35661,description:\" \"},t.MAX_VERTEX_TEXTURE_IMAGE_UNITS={name:\"MAX_VERTEX_TEXTURE_IMAGE_UNITS\",value:35660,description:\" \"},t.MAX_TEXTURE_IMAGE_UNITS={name:\"MAX_TEXTURE_IMAGE_UNITS\",value:34930,description:\"Implementation dependent number of maximum texture units. At least 8.\"},t.MAX_FRAGMENT_UNIFORM_VECTORS={name:\"MAX_FRAGMENT_UNIFORM_VECTORS\",value:36349,description:\" \"},t.SHADER_TYPE={name:\"SHADER_TYPE\",value:35663,description:\" \"},t.SHADING_LANGUAGE_VERSION={name:\"SHADING_LANGUAGE_VERSION\",value:35724,description:\" \"},t.CURRENT_PROGRAM={name:\"CURRENT_PROGRAM\",value:35725,description:\" \"},t.NEVER={name:\"NEVER\",value:512,description:\"Passed to depthFunction or stencilFunction to specify depth or stencil tests will never pass. i.e. Nothing will be drawn.\"},t.ALWAYS={name:\"ALWAYS\",value:519,description:\"Passed to depthFunction or stencilFunction to specify depth or stencil tests will always pass. i.e. Pixels will be drawn in the order they are drawn.\"},t.LESS={name:\"LESS\",value:513,description:\"Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is less than the stored value.\"},t.EQUAL={name:\"EQUAL\",value:514,description:\"Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is equals to the stored value.\"},t.LEQUAL={name:\"LEQUAL\",value:515,description:\"Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is less than or equal to the stored value.\"},t.GREATER={name:\"GREATER\",value:516,description:\"Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is greater than the stored value.\"},t.GEQUAL={name:\"GEQUAL\",value:518,description:\"Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is greater than or equal to the stored value.\"},t.NOTEQUAL={name:\"NOTEQUAL\",value:517,description:\"Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is not equal to the stored value.\"},t.KEEP={name:\"KEEP\",value:7680,description:\" \"},t.REPLACE={name:\"REPLACE\",value:7681,description:\" \"},t.INCR={name:\"INCR\",value:7682,description:\" \"},t.DECR={name:\"DECR\",value:7683,description:\" \"},t.INVERT={name:\"INVERT\",value:5386,description:\" \"},t.INCR_WRAP={name:\"INCR_WRAP\",value:34055,description:\" \"},t.DECR_WRAP={name:\"DECR_WRAP\",value:34056,description:\" \"},t.NEAREST={name:\"NEAREST\",value:9728,description:\" \"},t.LINEAR={name:\"LINEAR\",value:9729,description:\" \"},t.NEAREST_MIPMAP_NEAREST={name:\"NEAREST_MIPMAP_NEAREST\",value:9984,description:\" \"},t.LINEAR_MIPMAP_NEAREST={name:\"LINEAR_MIPMAP_NEAREST\",value:9985,description:\" \"},t.NEAREST_MIPMAP_LINEAR={name:\"NEAREST_MIPMAP_LINEAR\",value:9986,description:\" \"},t.LINEAR_MIPMAP_LINEAR={name:\"LINEAR_MIPMAP_LINEAR\",value:9987,description:\" \"},t.TEXTURE_MAG_FILTER={name:\"TEXTURE_MAG_FILTER\",value:10240,description:\" \"},t.TEXTURE_MIN_FILTER={name:\"TEXTURE_MIN_FILTER\",value:10241,description:\" \"},t.TEXTURE_WRAP_S={name:\"TEXTURE_WRAP_S\",value:10242,description:\" \"},t.TEXTURE_WRAP_T={name:\"TEXTURE_WRAP_T\",value:10243,description:\" \"},t.TEXTURE_2D={name:\"TEXTURE_2D\",value:3553,description:\" \"},t.TEXTURE={name:\"TEXTURE\",value:5890,description:\" \"},t.TEXTURE_CUBE_MAP={name:\"TEXTURE_CUBE_MAP\",value:34067,description:\" \"},t.TEXTURE_BINDING_CUBE_MAP={name:\"TEXTURE_BINDING_CUBE_MAP\",value:34068,description:\" \"},t.TEXTURE_CUBE_MAP_POSITIVE_X={name:\"TEXTURE_CUBE_MAP_POSITIVE_X\",value:34069,description:\" \"},t.TEXTURE_CUBE_MAP_NEGATIVE_X={name:\"TEXTURE_CUBE_MAP_NEGATIVE_X\",value:34070,description:\" \"},t.TEXTURE_CUBE_MAP_POSITIVE_Y={name:\"TEXTURE_CUBE_MAP_POSITIVE_Y\",value:34071,description:\" \"},t.TEXTURE_CUBE_MAP_NEGATIVE_Y={name:\"TEXTURE_CUBE_MAP_NEGATIVE_Y\",value:34072,description:\" \"},t.TEXTURE_CUBE_MAP_POSITIVE_Z={name:\"TEXTURE_CUBE_MAP_POSITIVE_Z\",value:34073,description:\" \"},t.TEXTURE_CUBE_MAP_NEGATIVE_Z={name:\"TEXTURE_CUBE_MAP_NEGATIVE_Z\",value:34074,description:\" \"};t.MAX_CUBE_MAP_TEXTURE_SIZE={name:\"MAX_CUBE_MAP_TEXTURE_SIZE\",value:34076,description:\" \"},t.TEXTURE0={name:\"TEXTURE0\",value:33984,description:\"A texture unit.\"},t.TEXTURE1={name:\"TEXTURE1\",value:33985,description:\"A texture unit.\"},t.TEXTURE2={name:\"TEXTURE2\",value:33986,description:\"A texture unit.\"},t.TEXTURE3={name:\"TEXTURE3\",value:33987,description:\"A texture unit.\"},t.TEXTURE4={name:\"TEXTURE4\",value:33988,description:\"A texture unit.\"},t.TEXTURE5={name:\"TEXTURE5\",value:33989,description:\"A texture unit.\"},t.TEXTURE6={name:\"TEXTURE6\",value:33990,description:\"A texture unit.\"},t.TEXTURE7={name:\"TEXTURE7\",value:33991,description:\"A texture unit.\"},t.TEXTURE8={name:\"TEXTURE8\",value:33992,description:\"A texture unit.\"},t.TEXTURE9={name:\"TEXTURE9\",value:33993,description:\"A texture unit.\"},t.TEXTURE10={name:\"TEXTURE10\",value:33994,description:\"A texture unit.\"},t.TEXTURE11={name:\"TEXTURE11\",value:33995,description:\"A texture unit.\"},t.TEXTURE12={name:\"TEXTURE12\",value:33996,description:\"A texture unit.\"},t.TEXTURE13={name:\"TEXTURE13\",value:33997,description:\"A texture unit.\"},t.TEXTURE14={name:\"TEXTURE14\",value:33998,description:\"A texture unit.\"},t.TEXTURE15={name:\"TEXTURE15\",value:33999,description:\"A texture unit.\"},t.TEXTURE16={name:\"TEXTURE16\",value:34e3,description:\"A texture unit.\"},t.TEXTURE17={name:\"TEXTURE17\",value:34001,description:\"A texture unit.\"},t.TEXTURE18={name:\"TEXTURE18\",value:34002,description:\"A texture unit.\"},t.TEXTURE19={name:\"TEXTURE19\",value:34003,description:\"A texture unit.\"},t.TEXTURE20={name:\"TEXTURE20\",value:34004,description:\"A texture unit.\"},t.TEXTURE21={name:\"TEXTURE21\",value:34005,description:\"A texture unit.\"},t.TEXTURE22={name:\"TEXTURE22\",value:34006,description:\"A texture unit.\"},t.TEXTURE23={name:\"TEXTURE23\",value:34007,description:\"A texture unit.\"},t.TEXTURE24={name:\"TEXTURE24\",value:34008,description:\"A texture unit.\"},t.TEXTURE25={name:\"TEXTURE25\",value:34009,description:\"A texture unit.\"},t.TEXTURE26={name:\"TEXTURE26\",value:34010,description:\"A texture unit.\"},t.TEXTURE27={name:\"TEXTURE27\",value:34011,description:\"A texture unit.\"},t.TEXTURE28={name:\"TEXTURE28\",value:34012,description:\"A texture unit.\"},t.TEXTURE29={name:\"TEXTURE29\",value:34013,description:\"A texture unit.\"},t.TEXTURE30={name:\"TEXTURE30\",value:34014,description:\"A texture unit.\"},t.TEXTURE31={name:\"TEXTURE31\",value:34015,description:\"A texture unit.\"},t.ACTIVE_TEXTURE={name:\"ACTIVE_TEXTURE\",value:34016,description:\"The current active texture unit.\"},t.REPEAT={name:\"REPEAT\",value:10497,description:\" \"},t.CLAMP_TO_EDGE={name:\"CLAMP_TO_EDGE\",value:33071,description:\" \"},t.MIRRORED_REPEAT={name:\"MIRRORED_REPEAT\",value:33648,description:\" \"},t.FLOAT_VEC2={name:\"FLOAT_VEC2\",value:35664,description:\" \"},t.FLOAT_VEC3={name:\"FLOAT_VEC3\",value:35665,description:\" \"},t.FLOAT_VEC4={name:\"FLOAT_VEC4\",value:35666,description:\" \"},t.INT_VEC2={name:\"INT_VEC2\",value:35667,description:\" \"},t.INT_VEC3={name:\"INT_VEC3\",value:35668,description:\" \"},t.INT_VEC4={name:\"INT_VEC4\",value:35669,description:\" \"},t.BOOL={name:\"BOOL\",value:35670,description:\" \"},t.BOOL_VEC2={name:\"BOOL_VEC2\",value:35671,description:\" \"},t.BOOL_VEC3={name:\"BOOL_VEC3\",value:35672,description:\" \"},t.BOOL_VEC4={name:\"BOOL_VEC4\",value:35673,description:\" \"},t.FLOAT_MAT2={name:\"FLOAT_MAT2\",value:35674,description:\" \"},t.FLOAT_MAT3={name:\"FLOAT_MAT3\",value:35675,description:\" \"},t.FLOAT_MAT4={name:\"FLOAT_MAT4\",value:35676,description:\" \"},t.SAMPLER_2D={name:\"SAMPLER_2D\",value:35678,description:\" \"},t.SAMPLER_CUBE={name:\"SAMPLER_CUBE\",value:35680,description:\" \"},t.LOW_FLOAT={name:\"LOW_FLOAT\",value:36336,description:\" \"},t.MEDIUM_FLOAT={name:\"MEDIUM_FLOAT\",value:36337,description:\" \"},t.HIGH_FLOAT={name:\"HIGH_FLOAT\",value:36338,description:\" \"},t.LOW_INT={name:\"LOW_INT\",value:36339,description:\" \"},t.MEDIUM_INT={name:\"MEDIUM_INT\",value:36340,description:\" \"},t.HIGH_INT={name:\"HIGH_INT\",value:36341,description:\" \"},t.FRAMEBUFFER={name:\"FRAMEBUFFER\",value:36160,description:\" \"},t.RENDERBUFFER={name:\"RENDERBUFFER\",value:36161,description:\" \"},t.RGBA4={name:\"RGBA4\",value:32854,description:\" \"},t.RGB5_A1={name:\"RGB5_A1\",value:32855,description:\" \"},t.RGB565={name:\"RGB565\",value:36194,description:\" \"},t.DEPTH_COMPONENT16={name:\"DEPTH_COMPONENT16\",value:33189,description:\" \"},t.STENCIL_INDEX={name:\"STENCIL_INDEX\",value:6401,description:\" \"},t.STENCIL_INDEX8={name:\"STENCIL_INDEX8\",value:36168,description:\" \"},t.DEPTH_STENCIL={name:\"DEPTH_STENCIL\",value:34041,description:\" \"},t.RENDERBUFFER_WIDTH={name:\"RENDERBUFFER_WIDTH\",value:36162,description:\" \"},t.RENDERBUFFER_HEIGHT={name:\"RENDERBUFFER_HEIGHT\",value:36163,description:\" \"},t.RENDERBUFFER_INTERNAL_FORMAT={name:\"RENDERBUFFER_INTERNAL_FORMAT\",value:36164,description:\" \"},t.RENDERBUFFER_RED_SIZE={name:\"RENDERBUFFER_RED_SIZE\",value:36176,description:\" \"},t.RENDERBUFFER_GREEN_SIZE={name:\"RENDERBUFFER_GREEN_SIZE\",value:36177,description:\" \"},t.RENDERBUFFER_BLUE_SIZE={name:\"RENDERBUFFER_BLUE_SIZE\",value:36178,description:\" \"},t.RENDERBUFFER_ALPHA_SIZE={name:\"RENDERBUFFER_ALPHA_SIZE\",value:36179,description:\" \"},t.RENDERBUFFER_DEPTH_SIZE={name:\"RENDERBUFFER_DEPTH_SIZE\",value:36180,description:\" \"},t.RENDERBUFFER_STENCIL_SIZE={name:\"RENDERBUFFER_STENCIL_SIZE\",value:36181,description:\" \"},t.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE={name:\"FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE\",value:36048,description:\" \"},t.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME={name:\"FRAMEBUFFER_ATTACHMENT_OBJECT_NAME\",value:36049,description:\" \"},t.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL={name:\"FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL\",value:36050,description:\" \"},t.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE={name:\"FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE\",value:36051,description:\" \"},t.COLOR_ATTACHMENT0={name:\"COLOR_ATTACHMENT0\",value:36064,description:\" \"},t.DEPTH_ATTACHMENT={name:\"DEPTH_ATTACHMENT\",value:36096,description:\" \"},t.STENCIL_ATTACHMENT={name:\"STENCIL_ATTACHMENT\",value:36128,description:\" \"},t.DEPTH_STENCIL_ATTACHMENT={name:\"DEPTH_STENCIL_ATTACHMENT\",value:33306,description:\" \"},t.NONE={name:\"NONE\",value:0,description:\" \"},t.FRAMEBUFFER_COMPLETE={name:\"FRAMEBUFFER_COMPLETE\",value:36053,description:\" \"},t.FRAMEBUFFER_INCOMPLETE_ATTACHMENT={name:\"FRAMEBUFFER_INCOMPLETE_ATTACHMENT\",value:36054,description:\" \"},t.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT={name:\"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT\",value:36055,description:\" \"},t.FRAMEBUFFER_INCOMPLETE_DIMENSIONS={name:\"FRAMEBUFFER_INCOMPLETE_DIMENSIONS\",value:36057,description:\" \"},t.FRAMEBUFFER_UNSUPPORTED={name:\"FRAMEBUFFER_UNSUPPORTED\",value:36061,description:\" \"},t.FRAMEBUFFER_BINDING={name:\"FRAMEBUFFER_BINDING\",value:36006,description:\" \"},t.RENDERBUFFER_BINDING={name:\"RENDERBUFFER_BINDING\",value:36007,description:\" \"},t.MAX_RENDERBUFFER_SIZE={name:\"MAX_RENDERBUFFER_SIZE\",value:34024,description:\" \"},t.INVALID_FRAMEBUFFER_OPERATION={name:\"INVALID_FRAMEBUFFER_OPERATION\",value:1286,description:\" \"},t.UNPACK_FLIP_Y_WEBGL={name:\"UNPACK_FLIP_Y_WEBGL\",value:37440,description:\" \"},t.UNPACK_PREMULTIPLY_ALPHA_WEBGL={name:\"UNPACK_PREMULTIPLY_ALPHA_WEBGL\",value:37441,description:\" \"},t.UNPACK_COLORSPACE_CONVERSION_WEBGL={name:\"UNPACK_COLORSPACE_CONVERSION_WEBGL\",value:37443,description:\" \"},t.READ_BUFFER={name:\"READ_BUFFER\",value:3074,description:\" \"},t.UNPACK_ROW_LENGTH={name:\"UNPACK_ROW_LENGTH\",value:3314,description:\" \"},t.UNPACK_SKIP_ROWS={name:\"UNPACK_SKIP_ROWS\",value:3315,description:\" \"},t.UNPACK_SKIP_PIXELS={name:\"UNPACK_SKIP_PIXELS\",value:3316,description:\" \"},t.PACK_ROW_LENGTH={name:\"PACK_ROW_LENGTH\",value:3330,description:\" \"},t.PACK_SKIP_ROWS={name:\"PACK_SKIP_ROWS\",value:3331,description:\" \"},t.PACK_SKIP_PIXELS={name:\"PACK_SKIP_PIXELS\",value:3332,description:\" \"},t.TEXTURE_BINDING_3D={name:\"TEXTURE_BINDING_3D\",value:32874,description:\" \"},t.UNPACK_SKIP_IMAGES={name:\"UNPACK_SKIP_IMAGES\",value:32877,description:\" \"},t.UNPACK_IMAGE_HEIGHT={name:\"UNPACK_IMAGE_HEIGHT\",value:32878,description:\" \"},t.MAX_3D_TEXTURE_SIZE={name:\"MAX_3D_TEXTURE_SIZE\",value:32883,description:\" \"},t.MAX_ELEMENTS_VERTICES={name:\"MAX_ELEMENTS_VERTICES\",value:33e3,description:\" \"},t.MAX_ELEMENTS_INDICES={name:\"MAX_ELEMENTS_INDICES\",value:33001,description:\" \"},t.MAX_TEXTURE_LOD_BIAS={name:\"MAX_TEXTURE_LOD_BIAS\",value:34045,description:\" \"},t.MAX_FRAGMENT_UNIFORM_COMPONENTS={name:\"MAX_FRAGMENT_UNIFORM_COMPONENTS\",value:35657,description:\" \"},t.MAX_VERTEX_UNIFORM_COMPONENTS={name:\"MAX_VERTEX_UNIFORM_COMPONENTS\",value:35658,description:\" \"},t.MAX_ARRAY_TEXTURE_LAYERS={name:\"MAX_ARRAY_TEXTURE_LAYERS\",value:35071,description:\" \"},t.MIN_PROGRAM_TEXEL_OFFSET={name:\"MIN_PROGRAM_TEXEL_OFFSET\",value:35076,description:\" \"},t.MAX_PROGRAM_TEXEL_OFFSET={name:\"MAX_PROGRAM_TEXEL_OFFSET\",value:35077,description:\" \"},t.MAX_VARYING_COMPONENTS={name:\"MAX_VARYING_COMPONENTS\",value:35659,description:\" \"},t.FRAGMENT_SHADER_DERIVATIVE_HINT={name:\"FRAGMENT_SHADER_DERIVATIVE_HINT\",value:35723,description:\" \"},t.RASTERIZER_DISCARD={name:\"RASTERIZER_DISCARD\",value:35977,description:\" \"},t.VERTEX_ARRAY_BINDING={name:\"VERTEX_ARRAY_BINDING\",value:34229,description:\" \"},t.MAX_VERTEX_OUTPUT_COMPONENTS={name:\"MAX_VERTEX_OUTPUT_COMPONENTS\",value:37154,description:\" \"},t.MAX_FRAGMENT_INPUT_COMPONENTS={name:\"MAX_FRAGMENT_INPUT_COMPONENTS\",value:37157,description:\" \"},t.MAX_SERVER_WAIT_TIMEOUT={name:\"MAX_SERVER_WAIT_TIMEOUT\",value:37137,description:\" \"},t.MAX_ELEMENT_INDEX={name:\"MAX_ELEMENT_INDEX\",value:36203,description:\" \"},t.RED={name:\"RED\",value:6403,description:\" \"},t.RGB8={name:\"RGB8\",value:32849,description:\" \"},t.RGBA8={name:\"RGBA8\",value:32856,description:\" \"},t.RGB10_A2={name:\"RGB10_A2\",value:32857,description:\" \"},t.TEXTURE_3D={name:\"TEXTURE_3D\",value:32879,description:\" \"},t.TEXTURE_WRAP_R={name:\"TEXTURE_WRAP_R\",value:32882,description:\" \"},t.TEXTURE_MIN_LOD={name:\"TEXTURE_MIN_LOD\",value:33082,description:\" \"},t.TEXTURE_MAX_LOD={name:\"TEXTURE_MAX_LOD\",value:33083,description:\" \"},t.TEXTURE_BASE_LEVEL={name:\"TEXTURE_BASE_LEVEL\",value:33084,description:\" \"},t.TEXTURE_MAX_LEVEL={name:\"TEXTURE_MAX_LEVEL\",value:33085,description:\" \"},t.TEXTURE_COMPARE_MODE={name:\"TEXTURE_COMPARE_MODE\",value:34892,description:\" \"},t.TEXTURE_COMPARE_FUNC={name:\"TEXTURE_COMPARE_FUNC\",value:34893,description:\" \"},t.SRGB={name:\"SRGB\",value:35904,description:\" \"},t.SRGB8={name:\"SRGB8\",value:35905,description:\" \"},t.SRGB8_ALPHA8={name:\"SRGB8_ALPHA8\",value:35907,description:\" \"},t.COMPARE_REF_TO_TEXTURE={name:\"COMPARE_REF_TO_TEXTURE\",value:34894,description:\" \"},t.RGBA32F={name:\"RGBA32F\",value:34836,description:\" \"},t.RGB32F={name:\"RGB32F\",value:34837,description:\" \"},t.RGBA16F={name:\"RGBA16F\",value:34842,description:\" \"},t.RGB16F={name:\"RGB16F\",value:34843,description:\" \"},t.TEXTURE_2D_ARRAY={name:\"TEXTURE_2D_ARRAY\",value:35866,description:\" \"},t.TEXTURE_BINDING_2D_ARRAY={name:\"TEXTURE_BINDING_2D_ARRAY\",value:35869,description:\" \"},t.R11F_G11F_B10F={name:\"R11F_G11F_B10F\",value:35898,description:\" \"},t.RGB9_E5={name:\"RGB9_E5\",value:35901,description:\" \"},t.RGBA32UI={name:\"RGBA32UI\",value:36208,description:\" \"},t.RGB32UI={name:\"RGB32UI\",value:36209,description:\" \"},t.RGBA16UI={name:\"RGBA16UI\",value:36214,description:\" \"},t.RGB16UI={name:\"RGB16UI\",value:36215,description:\" \"},t.RGBA8UI={name:\"RGBA8UI\",value:36220,description:\" \"},t.RGB8UI={name:\"RGB8UI\",value:36221,description:\" \"},t.RGBA32I={name:\"RGBA32I\",value:36226,description:\" \"},t.RGB32I={name:\"RGB32I\",value:36227,description:\" \"},t.RGBA16I={name:\"RGBA16I\",value:36232,description:\" \"},t.RGB16I={name:\"RGB16I\",value:36233,description:\" \"},t.RGBA8I={name:\"RGBA8I\",value:36238,description:\" \"},t.RGB8I={name:\"RGB8I\",value:36239,description:\" \"},t.RED_INTEGER={name:\"RED_INTEGER\",value:36244,description:\" \"},t.RGB_INTEGER={name:\"RGB_INTEGER\",value:36248,description:\" \"},t.RGBA_INTEGER={name:\"RGBA_INTEGER\",value:36249,description:\" \"},t.R8={name:\"R8\",value:33321,description:\" \"},t.RG8={name:\"RG8\",value:33323,description:\" \"},t.R16F={name:\"R16F\",value:33325,description:\" \"},t.R32F={name:\"R32F\",value:33326,description:\" \"},t.RG16F={name:\"RG16F\",value:33327,description:\" \"},t.RG32F={name:\"RG32F\",value:33328,description:\" \"},t.R8I={name:\"R8I\",value:33329,description:\" \"},t.R8UI={name:\"R8UI\",value:33330,description:\" \"},t.R16I={name:\"R16I\",value:33331,description:\" \"},t.R16UI={name:\"R16UI\",value:33332,description:\" \"},t.R32I={name:\"R32I\",value:33333,description:\" \"},t.R32UI={name:\"R32UI\",value:33334,description:\" \"},t.RG8I={name:\"RG8I\",value:33335,description:\" \"},t.RG8UI={name:\"RG8UI\",value:33336,description:\" \"},t.RG16I={name:\"RG16I\",value:33337,description:\" \"},t.RG16UI={name:\"RG16UI\",value:33338,description:\" \"},t.RG32I={name:\"RG32I\",value:33339,description:\" \"},t.RG32UI={name:\"RG32UI\",value:33340,description:\" \"},t.R8_SNORM={name:\"R8_SNORM\",value:36756,description:\" \"},t.RG8_SNORM={name:\"RG8_SNORM\",value:36757,description:\" \"},t.RGB8_SNORM={name:\"RGB8_SNORM\",value:36758,description:\" \"},t.RGBA8_SNORM={name:\"RGBA8_SNORM\",value:36759,description:\" \"},t.RGB10_A2UI={name:\"RGB10_A2UI\",value:36975,description:\" \"},t.TEXTURE_IMMUTABLE_FORMAT={name:\"TEXTURE_IMMUTABLE_FORMAT\",value:37167,description:\" \"},t.TEXTURE_IMMUTABLE_LEVELS={name:\"TEXTURE_IMMUTABLE_LEVELS\",value:33503,description:\" \"},t.UNSIGNED_INT_2_10_10_10_REV={name:\"UNSIGNED_INT_2_10_10_10_REV\",value:33640,description:\" \"},t.UNSIGNED_INT_10F_11F_11F_REV={name:\"UNSIGNED_INT_10F_11F_11F_REV\",value:35899,description:\" \"},t.UNSIGNED_INT_5_9_9_9_REV={name:\"UNSIGNED_INT_5_9_9_9_REV\",value:35902,description:\" \"},t.FLOAT_32_UNSIGNED_INT_24_8_REV={name:\"FLOAT_32_UNSIGNED_INT_24_8_REV\",value:36269,description:\" \"},t.UNSIGNED_INT_24_8={name:\"UNSIGNED_INT_24_8\",value:34042,description:\" \"},t.HALF_FLOAT={name:\"HALF_FLOAT\",value:5131,description:\" \"},t.RG={name:\"RG\",value:33319,description:\" \"},t.RG_INTEGER={name:\"RG_INTEGER\",value:33320,description:\" \"},t.INT_2_10_10_10_REV={name:\"INT_2_10_10_10_REV\",value:36255,description:\" \"},t.CURRENT_QUERY={name:\"CURRENT_QUERY\",value:34917,description:\" \"},t.QUERY_RESULT={name:\"QUERY_RESULT\",value:34918,description:\" \"},t.QUERY_RESULT_AVAILABLE={name:\"QUERY_RESULT_AVAILABLE\",value:34919,description:\" \"};t.ANY_SAMPLES_PASSED={name:\"ANY_SAMPLES_PASSED\",value:35887,description:\" \"},t.ANY_SAMPLES_PASSED_CONSERVATIVE={name:\"ANY_SAMPLES_PASSED_CONSERVATIVE\",value:36202,description:\" \"},t.MAX_DRAW_BUFFERS={name:\"MAX_DRAW_BUFFERS\",value:34852,description:\" \"},t.DRAW_BUFFER0={name:\"DRAW_BUFFER0\",value:34853,description:\" \"},t.DRAW_BUFFER1={name:\"DRAW_BUFFER1\",value:34854,description:\" \"},t.DRAW_BUFFER2={name:\"DRAW_BUFFER2\",value:34855,description:\" \"},t.DRAW_BUFFER3={name:\"DRAW_BUFFER3\",value:34856,description:\" \"},t.DRAW_BUFFER4={name:\"DRAW_BUFFER4\",value:34857,description:\" \"},t.DRAW_BUFFER5={name:\"DRAW_BUFFER5\",value:34858,description:\" \"},t.DRAW_BUFFER6={name:\"DRAW_BUFFER6\",value:34859,description:\" \"},t.DRAW_BUFFER7={name:\"DRAW_BUFFER7\",value:34860,description:\" \"},t.DRAW_BUFFER8={name:\"DRAW_BUFFER8\",value:34861,description:\" \"},t.DRAW_BUFFER9={name:\"DRAW_BUFFER9\",value:34862,description:\" \"},t.DRAW_BUFFER10={name:\"DRAW_BUFFER10\",value:34863,description:\" \"},t.DRAW_BUFFER11={name:\"DRAW_BUFFER11\",value:34864,description:\" \"},t.DRAW_BUFFER12={name:\"DRAW_BUFFER12\",value:34865,description:\" \"},t.DRAW_BUFFER13={name:\"DRAW_BUFFER13\",value:34866,description:\" \"},t.DRAW_BUFFER14={name:\"DRAW_BUFFER14\",value:34867,description:\" \"},t.DRAW_BUFFER15={name:\"DRAW_BUFFER15\",value:34868,description:\" \"},t.MAX_COLOR_ATTACHMENTS={name:\"MAX_COLOR_ATTACHMENTS\",value:36063,description:\" \"},t.COLOR_ATTACHMENT1={name:\"COLOR_ATTACHMENT1\",value:36065,description:\" \"},t.COLOR_ATTACHMENT2={name:\"COLOR_ATTACHMENT2\",value:36066,description:\" \"},t.COLOR_ATTACHMENT3={name:\"COLOR_ATTACHMENT3\",value:36067,description:\" \"},t.COLOR_ATTACHMENT4={name:\"COLOR_ATTACHMENT4\",value:36068,description:\" \"},t.COLOR_ATTACHMENT5={name:\"COLOR_ATTACHMENT5\",value:36069,description:\" \"},t.COLOR_ATTACHMENT6={name:\"COLOR_ATTACHMENT6\",value:36070,description:\" \"},t.COLOR_ATTACHMENT7={name:\"COLOR_ATTACHMENT7\",value:36071,description:\" \"},t.COLOR_ATTACHMENT8={name:\"COLOR_ATTACHMENT8\",value:36072,description:\" \"},t.COLOR_ATTACHMENT9={name:\"COLOR_ATTACHMENT9\",value:36073,description:\" \"},t.COLOR_ATTACHMENT10={name:\"COLOR_ATTACHMENT10\",value:36074,description:\" \"},t.COLOR_ATTACHMENT11={name:\"COLOR_ATTACHMENT11\",value:36075,description:\" \"},t.COLOR_ATTACHMENT12={name:\"COLOR_ATTACHMENT12\",value:36076,description:\" \"},t.COLOR_ATTACHMENT13={name:\"COLOR_ATTACHMENT13\",value:36077,description:\" \"},t.COLOR_ATTACHMENT14={name:\"COLOR_ATTACHMENT14\",value:36078,description:\" \"},t.COLOR_ATTACHMENT15={name:\"COLOR_ATTACHMENT15\",value:36079,description:\" \"},t.SAMPLER_3D={name:\"SAMPLER_3D\",value:35679,description:\" \"},t.SAMPLER_2D_SHADOW={name:\"SAMPLER_2D_SHADOW\",value:35682,description:\" \"},t.SAMPLER_2D_ARRAY={name:\"SAMPLER_2D_ARRAY\",value:36289,description:\" \"},t.SAMPLER_2D_ARRAY_SHADOW={name:\"SAMPLER_2D_ARRAY_SHADOW\",value:36292,description:\" \"},t.SAMPLER_CUBE_SHADOW={name:\"SAMPLER_CUBE_SHADOW\",value:36293,description:\" \"},t.INT_SAMPLER_2D={name:\"INT_SAMPLER_2D\",value:36298,description:\" \"},t.INT_SAMPLER_3D={name:\"INT_SAMPLER_3D\",value:36299,description:\" \"},t.INT_SAMPLER_CUBE={name:\"INT_SAMPLER_CUBE\",value:36300,description:\" \"},t.INT_SAMPLER_2D_ARRAY={name:\"INT_SAMPLER_2D_ARRAY\",value:36303,description:\" \"},t.UNSIGNED_INT_SAMPLER_2D={name:\"UNSIGNED_INT_SAMPLER_2D\",value:36306,description:\" \"},t.UNSIGNED_INT_SAMPLER_3D={name:\"UNSIGNED_INT_SAMPLER_3D\",value:36307,description:\" \"},t.UNSIGNED_INT_SAMPLER_CUBE={name:\"UNSIGNED_INT_SAMPLER_CUBE\",value:36308,description:\" \"},t.UNSIGNED_INT_SAMPLER_2D_ARRAY={name:\"UNSIGNED_INT_SAMPLER_2D_ARRAY\",value:36311,description:\" \"},t.MAX_SAMPLES={name:\"MAX_SAMPLES\",value:36183,description:\" \"},t.SAMPLER_BINDING={name:\"SAMPLER_BINDING\",value:35097,description:\" \"},t.PIXEL_PACK_BUFFER={name:\"PIXEL_PACK_BUFFER\",value:35051,description:\" \"},t.PIXEL_UNPACK_BUFFER={name:\"PIXEL_UNPACK_BUFFER\",value:35052,description:\" \"},t.PIXEL_PACK_BUFFER_BINDING={name:\"PIXEL_PACK_BUFFER_BINDING\",value:35053,description:\" \"},t.PIXEL_UNPACK_BUFFER_BINDING={name:\"PIXEL_UNPACK_BUFFER_BINDING\",value:35055,description:\" \"},t.COPY_READ_BUFFER={name:\"COPY_READ_BUFFER\",value:36662,description:\" \"},t.COPY_WRITE_BUFFER={name:\"COPY_WRITE_BUFFER\",value:36663,description:\" \"},t.COPY_READ_BUFFER_BINDING={name:\"COPY_READ_BUFFER_BINDING\",value:36662,description:\" \"},t.COPY_WRITE_BUFFER_BINDING={name:\"COPY_WRITE_BUFFER_BINDING\",value:36663,description:\" \"},t.FLOAT_MAT2x3={name:\"FLOAT_MAT2x3\",value:35685,description:\" \"},t.FLOAT_MAT2x4={name:\"FLOAT_MAT2x4\",value:35686,description:\" \"},t.FLOAT_MAT3x2={name:\"FLOAT_MAT3x2\",value:35687,description:\" \"},t.FLOAT_MAT3x4={name:\"FLOAT_MAT3x4\",value:35688,description:\" \"},t.FLOAT_MAT4x2={name:\"FLOAT_MAT4x2\",value:35689,description:\" \"},t.FLOAT_MAT4x3={name:\"FLOAT_MAT4x3\",value:35690,description:\" \"},t.UNSIGNED_INT_VEC2={name:\"UNSIGNED_INT_VEC2\",value:36294,description:\" \"},t.UNSIGNED_INT_VEC3={name:\"UNSIGNED_INT_VEC3\",value:36295,description:\" \"},t.UNSIGNED_INT_VEC4={name:\"UNSIGNED_INT_VEC4\",value:36296,description:\" \"},t.UNSIGNED_NORMALIZED={name:\"UNSIGNED_NORMALIZED\",value:35863,description:\" \"},t.SIGNED_NORMALIZED={name:\"SIGNED_NORMALIZED\",value:36764,description:\" \"},t.VERTEX_ATTRIB_ARRAY_INTEGER={name:\"VERTEX_ATTRIB_ARRAY_INTEGER\",value:35069,description:\" \"},t.VERTEX_ATTRIB_ARRAY_DIVISOR={name:\"VERTEX_ATTRIB_ARRAY_DIVISOR\",value:35070,description:\" \"},t.TRANSFORM_FEEDBACK_BUFFER_MODE={name:\"TRANSFORM_FEEDBACK_BUFFER_MODE\",value:35967,description:\" \"},t.MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS={name:\"MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS\",value:35968,description:\" \"},t.TRANSFORM_FEEDBACK_VARYINGS={name:\"TRANSFORM_FEEDBACK_VARYINGS\",value:35971,description:\" \"},t.TRANSFORM_FEEDBACK_BUFFER_START={name:\"TRANSFORM_FEEDBACK_BUFFER_START\",value:35972,description:\" \"},t.TRANSFORM_FEEDBACK_BUFFER_SIZE={name:\"TRANSFORM_FEEDBACK_BUFFER_SIZE\",value:35973,description:\" \"},t.TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN={name:\"TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN\",value:35976,description:\" \"},t.MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS={name:\"MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS\",value:35978,description:\" \"},t.MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS={name:\"MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS\",value:35979,description:\" \"},t.INTERLEAVED_ATTRIBS={name:\"INTERLEAVED_ATTRIBS\",value:35980,description:\" \"},t.SEPARATE_ATTRIBS={name:\"SEPARATE_ATTRIBS\",value:35981,description:\" \"},t.TRANSFORM_FEEDBACK_BUFFER={name:\"TRANSFORM_FEEDBACK_BUFFER\",value:35982,description:\" \"},t.TRANSFORM_FEEDBACK_BUFFER_BINDING={name:\"TRANSFORM_FEEDBACK_BUFFER_BINDING\",value:35983,description:\" \"},t.TRANSFORM_FEEDBACK={name:\"TRANSFORM_FEEDBACK\",value:36386,description:\" \"},t.TRANSFORM_FEEDBACK_PAUSED={name:\"TRANSFORM_FEEDBACK_PAUSED\",value:36387,description:\" \"},t.TRANSFORM_FEEDBACK_ACTIVE={name:\"TRANSFORM_FEEDBACK_ACTIVE\",value:36388,description:\" \"},t.TRANSFORM_FEEDBACK_BINDING={name:\"TRANSFORM_FEEDBACK_BINDING\",value:36389,description:\" \"},t.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING={name:\"FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING\",value:33296,description:\" \"},t.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE={name:\"FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE\",value:33297,description:\" \"},t.FRAMEBUFFER_ATTACHMENT_RED_SIZE={name:\"FRAMEBUFFER_ATTACHMENT_RED_SIZE\",value:33298,description:\" \"},t.FRAMEBUFFER_ATTACHMENT_GREEN_SIZE={name:\"FRAMEBUFFER_ATTACHMENT_GREEN_SIZE\",value:33299,description:\" \"},t.FRAMEBUFFER_ATTACHMENT_BLUE_SIZE={name:\"FRAMEBUFFER_ATTACHMENT_BLUE_SIZE\",value:33300,description:\" \"},t.FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE={name:\"FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE\",value:33301,description:\" \"},t.FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE={name:\"FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE\",value:33302,description:\" \"},t.FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE={name:\"FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE\",value:33303,description:\" \"},t.FRAMEBUFFER_DEFAULT={name:\"FRAMEBUFFER_DEFAULT\",value:33304,description:\" \"},t.DEPTH24_STENCIL8={name:\"DEPTH24_STENCIL8\",value:35056,description:\" \"},t.DRAW_FRAMEBUFFER_BINDING={name:\"DRAW_FRAMEBUFFER_BINDING\",value:36006,description:\" \"},t.READ_FRAMEBUFFER={name:\"READ_FRAMEBUFFER\",value:36008,description:\" \"},t.DRAW_FRAMEBUFFER={name:\"DRAW_FRAMEBUFFER\",value:36009,description:\" \"},t.READ_FRAMEBUFFER_BINDING={name:\"READ_FRAMEBUFFER_BINDING\",value:36010,description:\" \"},t.RENDERBUFFER_SAMPLES={name:\"RENDERBUFFER_SAMPLES\",value:36011,description:\" \"},t.FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER={name:\"FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER\",value:36052,description:\" \"},t.FRAMEBUFFER_INCOMPLETE_MULTISAMPLE={name:\"FRAMEBUFFER_INCOMPLETE_MULTISAMPLE\",value:36182,description:\" \"},t.UNIFORM_BUFFER={name:\"UNIFORM_BUFFER\",value:35345,description:\" \"},t.UNIFORM_BUFFER_BINDING={name:\"UNIFORM_BUFFER_BINDING\",value:35368,description:\" \"},t.UNIFORM_BUFFER_START={name:\"UNIFORM_BUFFER_START\",value:35369,description:\" \"},t.UNIFORM_BUFFER_SIZE={name:\"UNIFORM_BUFFER_SIZE\",value:35370,description:\" \"},t.MAX_VERTEX_UNIFORM_BLOCKS={name:\"MAX_VERTEX_UNIFORM_BLOCKS\",value:35371,description:\" \"},t.MAX_FRAGMENT_UNIFORM_BLOCKS={name:\"MAX_FRAGMENT_UNIFORM_BLOCKS\",value:35373,description:\" \"},t.MAX_COMBINED_UNIFORM_BLOCKS={name:\"MAX_COMBINED_UNIFORM_BLOCKS\",value:35374,description:\" \"},t.MAX_UNIFORM_BUFFER_BINDINGS={name:\"MAX_UNIFORM_BUFFER_BINDINGS\",value:35375,description:\" \"},t.MAX_UNIFORM_BLOCK_SIZE={name:\"MAX_UNIFORM_BLOCK_SIZE\",value:35376,description:\" \"},t.MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS={name:\"MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS\",value:35377,description:\" \"},t.MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS={name:\"MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS\",value:35379,description:\" \"},t.UNIFORM_BUFFER_OFFSET_ALIGNMENT={name:\"UNIFORM_BUFFER_OFFSET_ALIGNMENT\",value:35380,description:\" \"},t.ACTIVE_UNIFORM_BLOCKS={name:\"ACTIVE_UNIFORM_BLOCKS\",value:35382,description:\" \"},t.UNIFORM_TYPE={name:\"UNIFORM_TYPE\",value:35383,description:\" \"},t.UNIFORM_SIZE={name:\"UNIFORM_SIZE\",value:35384,description:\" \"},t.UNIFORM_BLOCK_INDEX={name:\"UNIFORM_BLOCK_INDEX\",value:35386,description:\" \"},t.UNIFORM_OFFSET={name:\"UNIFORM_OFFSET\",value:35387,description:\" \"},t.UNIFORM_ARRAY_STRIDE={name:\"UNIFORM_ARRAY_STRIDE\",value:35388,description:\" \"},t.UNIFORM_MATRIX_STRIDE={name:\"UNIFORM_MATRIX_STRIDE\",value:35389,description:\" \"},t.UNIFORM_IS_ROW_MAJOR={name:\"UNIFORM_IS_ROW_MAJOR\",value:35390,description:\" \"},t.UNIFORM_BLOCK_BINDING={name:\"UNIFORM_BLOCK_BINDING\",value:35391,description:\" \"},t.UNIFORM_BLOCK_DATA_SIZE={name:\"UNIFORM_BLOCK_DATA_SIZE\",value:35392,description:\" \"},t.UNIFORM_BLOCK_ACTIVE_UNIFORMS={name:\"UNIFORM_BLOCK_ACTIVE_UNIFORMS\",value:35394,description:\" \"},t.UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES={name:\"UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES\",value:35395,description:\" \"},t.UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER={name:\"UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER\",value:35396,description:\" \"},t.UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER={name:\"UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER\",value:35398,description:\" \"},t.OBJECT_TYPE={name:\"OBJECT_TYPE\",value:37138,description:\" \"},t.SYNC_CONDITION={name:\"SYNC_CONDITION\",value:37139,description:\" \"},t.SYNC_STATUS={name:\"SYNC_STATUS\",value:37140,description:\" \"},t.SYNC_FLAGS={name:\"SYNC_FLAGS\",value:37141,description:\" \"},t.SYNC_FENCE={name:\"SYNC_FENCE\",value:37142,description:\" \"},t.SYNC_GPU_COMMANDS_COMPLETE={name:\"SYNC_GPU_COMMANDS_COMPLETE\",value:37143,description:\" \"},t.UNSIGNALED={name:\"UNSIGNALED\",value:37144,description:\" \"},t.SIGNALED={name:\"SIGNALED\",value:37145,description:\" \"},t.ALREADY_SIGNALED={name:\"ALREADY_SIGNALED\",value:37146,description:\" \"},t.TIMEOUT_EXPIRED={name:\"TIMEOUT_EXPIRED\",value:37147,description:\" \"},t.CONDITION_SATISFIED={name:\"CONDITION_SATISFIED\",value:37148,description:\" \"},t.WAIT_FAILED={name:\"WAIT_FAILED\",value:37149,description:\" \"},t.SYNC_FLUSH_COMMANDS_BIT={name:\"SYNC_FLUSH_COMMANDS_BIT\",value:1,description:\" \"},t.COLOR={name:\"COLOR\",value:6144,description:\" \"},t.DEPTH={name:\"DEPTH\",value:6145,description:\" \"},t.STENCIL={name:\"STENCIL\",value:6146,description:\" \"},t.MIN={name:\"MIN\",value:32775,description:\" \"},t.MAX={name:\"MAX\",value:32776,description:\" \"},t.DEPTH_COMPONENT24={name:\"DEPTH_COMPONENT24\",value:33190,description:\" \"},t.STREAM_READ={name:\"STREAM_READ\",value:35041,description:\" \"},t.STREAM_COPY={name:\"STREAM_COPY\",value:35042,description:\" \"},t.STATIC_READ={name:\"STATIC_READ\",value:35045,description:\" \"},t.STATIC_COPY={name:\"STATIC_COPY\",value:35046,description:\" \"},t.DYNAMIC_READ={name:\"DYNAMIC_READ\",value:35049,description:\" \"},t.DYNAMIC_COPY={name:\"DYNAMIC_COPY\",value:35050,description:\" \"},t.DEPTH_COMPONENT32F={name:\"DEPTH_COMPONENT32F\",value:36012,description:\" \"},t.DEPTH32F_STENCIL8={name:\"DEPTH32F_STENCIL8\",value:36013,description:\" \"},t.INVALID_INDEX={name:\"INVALID_INDEX\",value:4294967295,description:\" \"},t.TIMEOUT_IGNORED={name:\"TIMEOUT_IGNORED\",value:-1,description:\" \"},t.MAX_CLIENT_WAIT_TIMEOUT_WEBGL={name:\"MAX_CLIENT_WAIT_TIMEOUT_WEBGL\",value:37447,description:\" \"},t.VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE={name:\"VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE\",value:35070,description:\"Describes the frequency divisor used for instanced rendering.\",extensionName:\"ANGLE_instanced_arrays\"},t.UNMASKED_VENDOR_WEBGL={name:\"UNMASKED_VENDOR_WEBGL\",value:37445,description:\"Passed to getParameter to get the vendor string of the graphics driver.\",extensionName:\"ANGLE_instanced_arrays\"},t.UNMASKED_RENDERER_WEBGL={name:\"UNMASKED_RENDERER_WEBGL\",value:37446,description:\"Passed to getParameter to get the renderer string of the graphics driver.\",extensionName:\"WEBGL_debug_renderer_info\"},t.MAX_TEXTURE_MAX_ANISOTROPY_EXT={name:\"MAX_TEXTURE_MAX_ANISOTROPY_EXT\",value:34047,description:\"Returns the maximum available anisotropy.\",extensionName:\"EXT_texture_filter_anisotropic\"},t.TEXTURE_MAX_ANISOTROPY_EXT={name:\"TEXTURE_MAX_ANISOTROPY_EXT\",value:34046,description:\"Passed to texParameter to set the desired maximum anisotropy for a texture.\",extensionName:\"EXT_texture_filter_anisotropic\"},t.COMPRESSED_RGB_S3TC_DXT1_EXT={name:\"COMPRESSED_RGB_S3TC_DXT1_EXT\",value:33776,description:\"A DXT1-compressed image in an RGB image format.\",extensionName:\"WEBGL_compressed_texture_s3tc\"},t.COMPRESSED_RGBA_S3TC_DXT1_EXT={name:\"COMPRESSED_RGBA_S3TC_DXT1_EXT\",value:33777,description:\"A DXT1-compressed image in an RGB image format with a simple on/off alpha value.\",extensionName:\"WEBGL_compressed_texture_s3tc\"},t.COMPRESSED_RGBA_S3TC_DXT3_EXT={name:\"COMPRESSED_RGBA_S3TC_DXT3_EXT\",value:33778,description:\"A DXT3-compressed image in an RGBA image format. Compared to a 32-bit RGBA texture, it offers 4:1 compression.\",extensionName:\"WEBGL_compressed_texture_s3tc\"},t.COMPRESSED_RGBA_S3TC_DXT5_EXT={name:\"COMPRESSED_RGBA_S3TC_DXT5_EXT\",value:33779,description:\"A DXT5-compressed image in an RGBA image format. It also provides a 4:1 compression, but differs to the DXT3 compression in how the alpha compression is done.\",extensionName:\"WEBGL_compressed_texture_s3tc\"},t.COMPRESSED_R11_EAC={name:\"COMPRESSED_R11_EAC\",value:37488,description:\"One-channel (red) unsigned format compression.\",extensionName:\"WEBGL_compressed_texture_etc\"},t.COMPRESSED_SIGNED_R11_EAC={name:\"COMPRESSED_SIGNED_R11_EAC\",value:37489,description:\"One-channel (red) signed format compression.\",extensionName:\"WEBGL_compressed_texture_etc\"},t.COMPRESSED_RG11_EAC={name:\"COMPRESSED_RG11_EAC\",value:37490,description:\"Two-channel (red and green) unsigned format compression.\",extensionName:\"WEBGL_compressed_texture_etc\"},t.COMPRESSED_SIGNED_RG11_EAC={name:\"COMPRESSED_SIGNED_RG11_EAC\",value:37491,description:\"Two-channel (red and green) signed format compression.\",extensionName:\"WEBGL_compressed_texture_etc\"},t.COMPRESSED_RGB8_ETC2={name:\"COMPRESSED_RGB8_ETC2\",value:37492,description:\"Compresses RBG8 data with no alpha channel.\",extensionName:\"WEBGL_compressed_texture_etc\"},t.COMPRESSED_RGBA8_ETC2_EAC={name:\"COMPRESSED_RGBA8_ETC2_EAC\",value:37493,description:\"Compresses RGBA8 data. The RGB part is encoded the same as RGB_ETC2, but the alpha part is encoded separately.\",extensionName:\"WEBGL_compressed_texture_etc\"},t.COMPRESSED_SRGB8_ETC2={name:\"COMPRESSED_SRGB8_ETC2\",value:37494,description:\"Compresses sRBG8 data with no alpha channel.\",extensionName:\"WEBGL_compressed_texture_etc\"},t.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC={name:\"COMPRESSED_SRGB8_ALPHA8_ETC2_EAC\",value:37495,description:\"Compresses sRGBA8 data. The sRGB part is encoded the same as SRGB_ETC2, but the alpha part is encoded separately.\",extensionName:\"WEBGL_compressed_texture_etc\"},t.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2={name:\"COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2\",value:37496,description:\"Similar to RGB8_ETC, but with ability to punch through the alpha channel, which means to make it completely opaque or transparent.\",extensionName:\"WEBGL_compressed_texture_etc\"},t.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2={name:\"COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2\",value:37497,description:\"Similar to SRGB8_ETC, but with ability to punch through the alpha channel, which means to make it completely opaque or transparent.\",extensionName:\"WEBGL_compressed_texture_etc\"},t.COMPRESSED_RGB_PVRTC_4BPPV1_IMG={name:\"COMPRESSED_RGB_PVRTC_4BPPV1_IMG\",value:35840,description:\"RGB compression in 4-bit mode. One block for each 4×4 pixels.\",extensionName:\"WEBGL_compressed_texture_pvrtc\"},t.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG={name:\"COMPRESSED_RGBA_PVRTC_4BPPV1_IMG\",value:35842,description:\"RGBA compression in 4-bit mode. One block for each 4×4 pixels.\",extensionName:\"WEBGL_compressed_texture_pvrtc\"},t.COMPRESSED_RGB_PVRTC_2BPPV1_IMG={name:\"COMPRESSED_RGB_PVRTC_2BPPV1_IMG\",value:35841,description:\"RGB compression in 2-bit mode. One block for each 8×4 pixels.\",extensionName:\"WEBGL_compressed_texture_pvrtc\"},t.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG={name:\"COMPRESSED_RGBA_PVRTC_2BPPV1_IMG\",value:35843,description:\"RGBA compression in 2-bit mode. One block for each 8×4 pixe\",extensionName:\"WEBGL_compressed_texture_pvrtc\"},t.COMPRESSED_RGB_ETC1_WEBGL={name:\"COMPRESSED_RGB_ETC1_WEBGL\",value:36196,description:\"Compresses 24-bit RGB data with no alpha channel.\",extensionName:\"WEBGL_compressed_texture_etc1\"},t.COMPRESSED_RGB_ATC_WEBGL={name:\"COMPRESSED_RGB_ATC_WEBGL\",value:35986,description:\"Compresses RGB textures with no alpha channel.\",extensionName:\"WEBGL_compressed_texture_atc\"},t.COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL={name:\"COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL\",value:35986,description:\"Compresses RGBA textures using explicit alpha encoding (useful when alpha transitions are sharp).\",extensionName:\"WEBGL_compressed_texture_atc\"},t.COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL={name:\"COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL\",value:34798,description:\"Compresses RGBA textures using interpolated alpha encoding (useful when alpha transitions are gradient).\",extensionName:\"WEBGL_compressed_texture_atc\"},t.UNSIGNED_INT_24_8_WEBGL={name:\"UNSIGNED_INT_24_8_WEBGL\",value:34042,description:\"Unsigned integer type for 24-bit depth texture data.\",extensionName:\"WEBGL_depth_texture\"},t.HALF_FLOAT_OES={name:\"HALF_FLOAT_OES\",value:36193,description:\"Half floating-point type (16-bit).\",extensionName:\"OES_texture_half_float\"},t.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT={name:\"FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT\",value:33297,description:\" \",extensionName:\"WEBGL_color_buffer_float\"},t.UNSIGNED_NORMALIZED_EXT={name:\"UNSIGNED_NORMALIZED_EXT\",value:35863,description:\" \",extensionName:\"WEBGL_color_buffer_float\"},t.MIN_EXT={name:\"MIN_EXT\",value:32775,description:\"Produces the minimum color components of the source and destination colors.\",extensionName:\"EXT_blend_minmax\"},t.MAX_EXT={name:\"MAX_EXT\",value:32776,description:\"Produces the maximum color components of the source and destination colors.\",extensionName:\"EXT_blend_minmax\"},t.SRGB_EXT={name:\"SRGB_EXT\",value:35904,description:\"Unsized sRGB format that leaves the precision up to the driver.\",extensionName:\"EXT_sRGB\"},t.SRGB_ALPHA_EXT={name:\"SRGB_ALPHA_EXT\",value:35906,description:\"Unsized sRGB format with unsized alpha component.\",extensionName:\"EXT_sRGB\"},t.SRGB8_ALPHA8_EXT={name:\"SRGB8_ALPHA8_EXT\",value:35907,description:\"Sized (8-bit) sRGB and alpha formats.\",extensionName:\"EXT_sRGB\"},t.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT={name:\"FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT\",value:33296,description:\"Returns the framebuffer color encoding.\",extensionName:\"EXT_sRGB\"},t.FRAGMENT_SHADER_DERIVATIVE_HINT_OES={name:\"FRAGMENT_SHADER_DERIVATIVE_HINT_OES\",value:35723,description:\"Indicates the accuracy of the derivative calculation for the GLSL built-in functions: dFdx, dFdy, and fwidth.\",extensionName:\"OES_standard_derivatives\"},t.COLOR_ATTACHMENT0_WEBGL={name:\"COLOR_ATTACHMENT0_WEBGL\",value:36064,description:\"Framebuffer color attachment point\",extensionName:\"WEBGL_draw_buffers\"},t.COLOR_ATTACHMENT1_WEBGL={name:\"COLOR_ATTACHMENT1_WEBGL\",value:36065,description:\"Framebuffer color attachment point\",extensionName:\"WEBGL_draw_buffers\"};t.COLOR_ATTACHMENT2_WEBGL={name:\"COLOR_ATTACHMENT2_WEBGL\",value:36066,description:\"Framebuffer color attachment point\",extensionName:\"WEBGL_draw_buffers\"},t.COLOR_ATTACHMENT3_WEBGL={name:\"COLOR_ATTACHMENT3_WEBGL\",value:36067,description:\"Framebuffer color attachment point\",extensionName:\"WEBGL_draw_buffers\"},t.COLOR_ATTACHMENT4_WEBGL={name:\"COLOR_ATTACHMENT4_WEBGL\",value:36068,description:\"Framebuffer color attachment point\",extensionName:\"WEBGL_draw_buffers\"},t.COLOR_ATTACHMENT5_WEBGL={name:\"COLOR_ATTACHMENT5_WEBGL\",value:36069,description:\"Framebuffer color attachment point\",extensionName:\"WEBGL_draw_buffers\"},t.COLOR_ATTACHMENT6_WEBGL={name:\"COLOR_ATTACHMENT6_WEBGL\",value:36070,description:\"Framebuffer color attachment point\",extensionName:\"WEBGL_draw_buffers\"},t.COLOR_ATTACHMENT7_WEBGL={name:\"COLOR_ATTACHMENT7_WEBGL\",value:36071,description:\"Framebuffer color attachment point\",extensionName:\"WEBGL_draw_buffers\"},t.COLOR_ATTACHMENT8_WEBGL={name:\"COLOR_ATTACHMENT8_WEBGL\",value:36072,description:\"Framebuffer color attachment point\",extensionName:\"WEBGL_draw_buffers\"},t.COLOR_ATTACHMENT9_WEBGL={name:\"COLOR_ATTACHMENT9_WEBGL\",value:36073,description:\"Framebuffer color attachment point\",extensionName:\"WEBGL_draw_buffers\"},t.COLOR_ATTACHMENT10_WEBGL={name:\"COLOR_ATTACHMENT10_WEBGL\",value:36074,description:\"Framebuffer color attachment point\",extensionName:\"WEBGL_draw_buffers\"},t.COLOR_ATTACHMENT11_WEBGL={name:\"COLOR_ATTACHMENT11_WEBGL\",value:36075,description:\"Framebuffer color attachment point\",extensionName:\"WEBGL_draw_buffers\"},t.COLOR_ATTACHMENT12_WEBGL={name:\"COLOR_ATTACHMENT12_WEBGL\",value:36076,description:\"Framebuffer color attachment point\",extensionName:\"WEBGL_draw_buffers\"},t.COLOR_ATTACHMENT13_WEBGL={name:\"COLOR_ATTACHMENT13_WEBGL\",value:36077,description:\"Framebuffer color attachment point\",extensionName:\"WEBGL_draw_buffers\"},t.COLOR_ATTACHMENT14_WEBGL={name:\"COLOR_ATTACHMENT14_WEBGL\",value:36078,description:\"Framebuffer color attachment point\",extensionName:\"WEBGL_draw_buffers\"},t.COLOR_ATTACHMENT15_WEBGL={name:\"COLOR_ATTACHMENT15_WEBGL\",value:36079,description:\"Framebuffer color attachment point\",extensionName:\"WEBGL_draw_buffers\"},t.DRAW_BUFFER0_WEBGL={name:\"DRAW_BUFFER0_WEBGL\",value:34853,description:\"Draw buffer\",extensionName:\"WEBGL_draw_buffers\"},t.DRAW_BUFFER1_WEBGL={name:\"DRAW_BUFFER1_WEBGL\",value:34854,description:\"Draw buffer\",extensionName:\"WEBGL_draw_buffers\"},t.DRAW_BUFFER2_WEBGL={name:\"DRAW_BUFFER2_WEBGL\",value:34855,description:\"Draw buffer\",extensionName:\"WEBGL_draw_buffers\"},t.DRAW_BUFFER3_WEBGL={name:\"DRAW_BUFFER3_WEBGL\",value:34856,description:\"Draw buffer\",extensionName:\"WEBGL_draw_buffers\"},t.DRAW_BUFFER4_WEBGL={name:\"DRAW_BUFFER4_WEBGL\",value:34857,description:\"Draw buffer\",extensionName:\"WEBGL_draw_buffers\"},t.DRAW_BUFFER5_WEBGL={name:\"DRAW_BUFFER5_WEBGL\",value:34858,description:\"Draw buffer\",extensionName:\"WEBGL_draw_buffers\"},t.DRAW_BUFFER6_WEBGL={name:\"DRAW_BUFFER6_WEBGL\",value:34859,description:\"Draw buffer\",extensionName:\"WEBGL_draw_buffers\"},t.DRAW_BUFFER7_WEBGL={name:\"DRAW_BUFFER7_WEBGL\",value:34860,description:\"Draw buffer\",extensionName:\"WEBGL_draw_buffers\"},t.DRAW_BUFFER8_WEBGL={name:\"DRAW_BUFFER8_WEBGL\",value:34861,description:\"Draw buffer\",extensionName:\"WEBGL_draw_buffers\"},t.DRAW_BUFFER9_WEBGL={name:\"DRAW_BUFFER9_WEBGL\",value:34862,description:\"Draw buffer\",extensionName:\"WEBGL_draw_buffers\"},t.DRAW_BUFFER10_WEBGL={name:\"DRAW_BUFFER10_WEBGL\",value:34863,description:\"Draw buffer\",extensionName:\"WEBGL_draw_buffers\"},t.DRAW_BUFFER11_WEBGL={name:\"DRAW_BUFFER11_WEBGL\",value:34864,description:\"Draw buffer\",extensionName:\"WEBGL_draw_buffers\"},t.DRAW_BUFFER12_WEBGL={name:\"DRAW_BUFFER12_WEBGL\",value:34865,description:\"Draw buffer\",extensionName:\"WEBGL_draw_buffers\"},t.DRAW_BUFFER13_WEBGL={name:\"DRAW_BUFFER13_WEBGL\",value:34866,description:\"Draw buffer\",extensionName:\"WEBGL_draw_buffers\"},t.DRAW_BUFFER14_WEBGL={name:\"DRAW_BUFFER14_WEBGL\",value:34867,description:\"Draw buffer\",extensionName:\"WEBGL_draw_buffers\"},t.DRAW_BUFFER15_WEBGL={name:\"DRAW_BUFFER15_WEBGL\",value:34868,description:\"Draw buffer\",extensionName:\"WEBGL_draw_buffers\"},t.MAX_COLOR_ATTACHMENTS_WEBGL={name:\"MAX_COLOR_ATTACHMENTS_WEBGL\",value:36063,description:\"Maximum number of framebuffer color attachment points\",extensionName:\"WEBGL_draw_buffers\"},t.MAX_DRAW_BUFFERS_WEBGL={name:\"MAX_DRAW_BUFFERS_WEBGL\",value:34852,description:\"Maximum number of draw buffers\",extensionName:\"WEBGL_draw_buffers\"},t.VERTEX_ARRAY_BINDING_OES={name:\"VERTEX_ARRAY_BINDING_OES\",value:34229,description:\"The bound vertex array object (VAO).\",extensionName:\"VERTEX_ARRAY_BINDING_OES\"},t.QUERY_COUNTER_BITS_EXT={name:\"QUERY_COUNTER_BITS_EXT\",value:34916,description:\"The number of bits used to hold the query result for the given target.\",extensionName:\"EXT_disjoint_timer_query\"},t.CURRENT_QUERY_EXT={name:\"CURRENT_QUERY_EXT\",value:34917,description:\"The currently active query.\",extensionName:\"EXT_disjoint_timer_query\"},t.QUERY_RESULT_EXT={name:\"QUERY_RESULT_EXT\",value:34918,description:\"The query result.\",extensionName:\"EXT_disjoint_timer_query\"},t.QUERY_RESULT_AVAILABLE_EXT={name:\"QUERY_RESULT_AVAILABLE_EXT\",value:34919,description:\"A Boolean indicating whether or not a query result is available.\",extensionName:\"EXT_disjoint_timer_query\"},t.TIME_ELAPSED_EXT={name:\"TIME_ELAPSED_EXT\",value:35007,description:\"Elapsed time (in nanoseconds).\",extensionName:\"EXT_disjoint_timer_query\"},t.TIMESTAMP_EXT={name:\"TIMESTAMP_EXT\",value:36392,description:\"The current time.\",extensionName:\"EXT_disjoint_timer_query\"},t.GPU_DISJOINT_EXT={name:\"GPU_DISJOINT_EXT\",value:36795,description:\"A Boolean indicating whether or not the GPU performed any disjoint operation.\",extensionName:\"EXT_disjoint_timer_query\"},t.zeroMeaningByCommand={getError:\"NO_ERROR\",blendFunc:\"ZERO\",blendFuncSeparate:\"ZERO\",readBuffer:\"NONE\",getFramebufferAttachmentParameter:\"NONE\",texParameterf:\"NONE\",texParameteri:\"NONE\",drawArrays:\"POINTS\",drawElements:\"POINTS\",drawArraysInstanced:\"POINTS\",drawBuffers:\"POINTS\",drawElementsInstanced:\"POINTS\",drawRangeElements:\"POINTS\"},t.oneMeaningByCommand={blendFunc:\"ONE\",blendFuncSeparate:\"ONE\",drawArrays:\"LINES\",drawElements:\"LINES\",drawArraysInstanced:\"LINES\",drawBuffers:\"LINES\",drawElementsInstanced:\"LINES\",drawRangeElements:\"LINES\"},e.WebGlConstants=t}(n||(n={}));var n;!function(e){e.WebGlConstantsByName={},function(){for(var t in e.WebGlConstants)if(e.WebGlConstants.hasOwnProperty(t)){var n=e.WebGlConstants[t];e.WebGlConstantsByName[n.name]=n}}()}(n||(n={}));var n;!function(e){e.WebGlConstantsByValue={},function(){for(var t in e.WebGlConstants)if(e.WebGlConstants.hasOwnProperty(t)){var n=e.WebGlConstants[t];e.WebGlConstantsByValue[n.value]=n}}()}(n||(n={}));var n;!function(e){!function(e){function t(e){return function(t){t[d]=e}}function n(e){return e[d]}function a(e){return function(t){t[p]=e}}function r(e){return e[p]}function o(e){return function(t){t[E]=e}}function i(e){return e[E]}function s(t){return function(n){n[e.OBJECTNAMEKEY]=t,n[e.OBJECTTYPEKEY]=window[t]||null}}function u(t){return t[e.OBJECTNAMEKEY]}function l(t){return t[e.OBJECTTYPEKEY]}function c(e){return function(t){t[C]=e}}function m(e){return e[C]}var d=\"__CommandName\";e.command=t,e.getCommandName=n;var p=\"__StateName\";e.state=a,e.getStateName=r;var E=\"___RecorderObjectName\";e.recorder=o,e.getRecorderName=i,e.OBJECTNAMEKEY=\"___ObjectName\",e.OBJECTTYPEKEY=\"___ObjectType\",e.webGlObject=s,e.getWebGlObjectName=u,e.getWebGlObjectType=l;var C=\"___AnalyserObjectName\";e.analyser=c,e.getAnalyserName=m}(e.Decorators||(e.Decorators={}))}(n||(n={}));var n;!function(e){var t=function(){function t(){}return t.isSupportedCombination=function(t,n,a){return t=t||e.WebGlConstants.UNSIGNED_BYTE.value,((n=n||e.WebGlConstants.RGBA.value)===e.WebGlConstants.RGB.value||n===e.WebGlConstants.RGBA.value)&&((a===e.WebGlConstants.RGB.value||a===e.WebGlConstants.RGBA.value||a===e.WebGlConstants.RGBA16F.value||a===e.WebGlConstants.RGBA32F.value||a===e.WebGlConstants.RGB16F.value||a===e.WebGlConstants.RGB32F.value||a===e.WebGlConstants.R11F_G11F_B10F.value)&&(t===e.WebGlConstants.UNSIGNED_BYTE.value||t===e.WebGlConstants.UNSIGNED_SHORT_4_4_4_4.value||t===e.WebGlConstants.UNSIGNED_SHORT_5_5_5_1.value||t===e.WebGlConstants.UNSIGNED_SHORT_5_6_5.value||t===e.WebGlConstants.HALF_FLOAT.value||t===e.WebGlConstants.HALF_FLOAT_OES.value||t===e.WebGlConstants.FLOAT.value))},t.readPixels=function(t,n,a,r,o,i){t.getError();var s,u=r*o*4;if(i===e.WebGlConstants.UNSIGNED_BYTE.value?s=new Uint8Array(u):(i=e.WebGlConstants.FLOAT.value,s=new Float32Array(u)),t.readPixels(n,a,r,o,t.RGBA,i,s),!t.getError()){if(i===e.WebGlConstants.UNSIGNED_BYTE.value)return s;for(var l=new Uint8Array(r*o*4),c=0;c<o;c++)for(var m=0;m<r;m++)l[c*r*4+4*m+0]=255*Math.min(Math.max(s[c*r*4+4*m+0],0),1),l[c*r*4+4*m+1]=255*Math.min(Math.max(s[c*r*4+4*m+1],0),1),l[c*r*4+4*m+2]=255*Math.min(Math.max(s[c*r*4+4*m+2],0),1),l[c*r*4+4*m+3]=255*Math.min(Math.max(s[c*r*4+4*m+3],0),1);return l}},t}();e.ReadPixelsHelper=t}(n||(n={}));var n;!function(e){!function(e){var t=function(){function e(t,n){this.options=t,this.logger=n,this.spiedWindow=t.spiedWindow||window,this.lastFrame=0,this.speedRatio=1,this.willPlayNextFrame=!1,this.onFrameStart=new t.eventConstructor,this.onFrameEnd=new t.eventConstructor,this.onError=new t.eventConstructor,this.time=new this.options.timeConstructor,this.lastSixtyFramesDuration=[],this.lastSixtyFramesCurrentIndex=0,this.lastSixtyFramesPreviousStart=0;for(var a=0;a<e.fpsWindowSize;a++)this.lastSixtyFramesDuration[a]=0;this.init()}return e.prototype.playNextFrame=function(){this.willPlayNextFrame=!0},e.prototype.changeSpeedRatio=function(e){this.speedRatio=e},e.prototype.getFps=function(){for(var t=0,n=0;n<e.fpsWindowSize;n++)t+=this.lastSixtyFramesDuration[n];return 0===t?0:6e4/t},e.prototype.init=function(){for(var t=0,n=e.requestAnimationFrameFunctions;t<n.length;t++){var a=n[t];this.spyRequestAnimationFrame(a)}for(var r=0,o=e.setTimerFunctions;r<o.length;r++){var a=o[r];this.spySetTimer(a)}},e.prototype.spyRequestAnimationFrame=function(e){var t=this,n=this.spiedWindow[e],a=this.spiedWindow;a[e]=function(){var r=arguments[0],o=t.getCallback(t,r,function(){a[e](r)});return n.apply(t.spiedWindow,[o])}},e.prototype.spySetTimer=function(t){var n=this,a=this.spiedWindow[t],r=\"setTimeout\"===t,o=this.spiedWindow;o[t]=function(){var i=arguments[0],s=arguments[1];return e.setTimerCommonValues.indexOf(s)>-1&&(i=n.getCallback(n,i,r?function(){o[t](i)}:null)),a.apply(n.spiedWindow,[i,s])}},e.prototype.getCallback=function(t,n,a){return void 0===a&&(a=null),function(){var r=t.time.now;if(t.lastFrame=++t.lastFrame%t.speedRatio,t.willPlayNextFrame||t.speedRatio&&!t.lastFrame){t.onFrameStart.trigger(t);try{n.apply(t.spiedWindow,arguments)}catch(e){t.onError.trigger(e)}t.lastSixtyFramesCurrentIndex=(t.lastSixtyFramesCurrentIndex+1)%e.fpsWindowSize,t.lastSixtyFramesDuration[t.lastSixtyFramesCurrentIndex]=r-t.lastSixtyFramesPreviousStart,t.onFrameEnd.trigger(t),t.willPlayNextFrame=!1}else a&&a();t.lastSixtyFramesPreviousStart=r}},e}();t.requestAnimationFrameFunctions=[\"requestAnimationFrame\",\"msRequestAnimationFrame\",\"webkitRequestAnimationFrame\",\"mozRequestAnimationFrame\",\"oRequestAnimationFrame\"],t.setTimerFunctions=[\"setTimeout\",\"setInterval\"],t.setTimerCommonValues=[0,15,16,33,32,40],t.fpsWindowSize=60,e.TimeSpy=t}(e.Spies||(e.Spies={}))}(n||(n={}));var n;!function(e){!function(e){var t=function(){function e(e,t){this.options=e,this.logger=t,this.onContextRequested=new e.eventConstructor,this.canvas=e.canvas,this.init()}return e.prototype.init=function(){var e=this,t=function(){var t=e.spiedGetContext.apply(this,arguments);if(arguments.length>0&&\"2d\"===arguments[0])return t;if(t){var n=Array.prototype.slice.call(arguments),a=\"webgl2\"===n[0]||\"experimental-webgl2\"===n[0],r=a?2:1;e.onContextRequested.trigger({context:t,contextVersion:r})}return t};this.canvas?(this.spiedGetContext=this.canvas.getContext,this.canvas.getContext=t):(this.spiedGetContext=HTMLCanvasElement.prototype.getContext,HTMLCanvasElement.prototype.getContext=t)},e}();e.CanvasSpy=t}(e.Spies||(e.Spies={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(){function t(e,t,n){this.options=e,this.time=t,this.logger=n,this.commandId=0,this.context=e.context,this.version=e.version,this.capturing=!1,this.globalCapturing=!0,this.injection=e.injection,this.contextInformation={context:this.context,contextVersion:this.version,toggleCapture:this.toggleGlobalCapturing.bind(this),tagWebGlObject:this.tagWebGlObject.bind(this),extensions:{}},this.commandSpies={},this.stateSpy=new this.injection.StateSpyCtor({contextInformation:this.contextInformation,stateNamespace:this.injection.StateNamespace},n),this.recorderSpy=new this.injection.RecorderSpyCtor({contextInformation:this.contextInformation,recorderNamespace:this.injection.RecorderNamespace,timeConstructor:this.injection.TimeCtor},n),this.webGlObjectSpy=new this.injection.WebGlObjectSpyCtor({contextInformation:this.contextInformation,webGlObjectNamespace:this.injection.WebGlObjectNamespace},n),this.analyser=new this.injection.CaptureAnalyserCtor({contextInformation:this.contextInformation,analyserNamespace:this.injection.AnalyserNamespace},n),this.initStaticCapture(),e.recordAlways&&this.spy()}return t.prototype.spy=function(){this.spyContext(this.context);var e=this.contextInformation.extensions;for(var t in e)e.hasOwnProperty(t)&&this.spyContext(e[t])},t.prototype.unSpy=function(){for(var e in this.commandSpies)this.commandSpies.hasOwnProperty(e)&&this.commandSpies[e].unSpy()},t.prototype.startCapture=function(){var e=this.time.now;this.options.recordAlways||this.spy(),this.capturing=!0,this.commandId=0,this.currentCapture={canvas:this.canvasCapture,context:this.contextCapture,commands:[],initState:{},endState:{},startTime:e,listenCommandsStartTime:0,listenCommandsEndTime:0,endTime:0,analyses:[],frameMemory:{},memory:{}},this.stateSpy.startCapture(this.currentCapture),this.recorderSpy.startCapture(),this.currentCapture.listenCommandsStartTime=this.time.now},t.prototype.stopCapture=function(){var e=this.time.now;return this.options.recordAlways||this.unSpy(),this.capturing=!1,this.stateSpy.stopCapture(this.currentCapture),this.recorderSpy.stopCapture(),this.currentCapture.listenCommandsEndTime=e,this.currentCapture.endTime=this.time.now,this.recorderSpy.appendRecordedInformation(this.currentCapture),this.analyser.appendAnalyses(this.currentCapture),this.currentCapture},t.prototype.isCapturing=function(){return this.globalCapturing&&this.capturing},t.prototype.getNextCommandCaptureId=function(){return this.commandId++},t.prototype.onCommand=function(e,t){if(this.globalCapturing&&(this.webGlObjectSpy.tagWebGlObjects(t),this.recorderSpy.recordCommand(t),this.isCapturing())){var n=e.createCapture(t,this.getNextCommandCaptureId());this.stateSpy.captureState(n),this.currentCapture.commands.push(n),n.endTime=this.time.now}},t.prototype.spyContext=function(e){for(var n in e)if(!~t.unSpyableMembers.indexOf(n))try{var a=\"number\"!=typeof e[n];a&&this.spyFunction(n,e)}catch(e){this.logger.error(\"Cant Spy member: \"+n),this.logger.error(e)}},t.prototype.initStaticCapture=function(){var e=new this.injection.ExtensionsCtor(this.contextInformation,this.logger),t=e.getExtensions();for(var n in t)t.hasOwnProperty(n)&&(this.contextInformation.extensions[n]=t[n]);var a=new this.injection.CapabilitiesCtor(this.contextInformation,this.logger),r=new this.injection.CompressedTexturesCtor(this.contextInformation,this.logger);this.contextCapture={version:this.version,contextAttributes:this.context.getContextAttributes(),capabilities:a.getStateData(),extensions:e.getStateData(),compressedTextures:r.getStateData()},this.canvasCapture={width:this.context.canvas.width,height:this.context.canvas.height,clientWidth:this.context.canvas.clientWidth,clientHeight:this.context.canvas.clientHeight,browserAgent:navigator?navigator.userAgent:\"\"}},t.prototype.spyFunction=function(t,n){if(!this.commandSpies[t]){var a=e.merge(this.contextInformation,{spiedCommandName:t,spiedCommandRunningContext:n,callback:this.onCommand.bind(this),commandNamespace:this.injection.CommandNamespace,stackTraceCtor:this.injection.StackTraceCtor,defaultCommandCtor:this.injection.DefaultCommandCtor});this.commandSpies[t]=new this.injection.CommandSpyCtor(a,this.time,this.logger)}this.commandSpies[t].spy()},t.prototype.toggleGlobalCapturing=function(e){this.globalCapturing=e},t.prototype.tagWebGlObject=function(e){return this.webGlObjectSpy.tagWebGlObject(e)},t}();n.unSpyableMembers=[\"canvas\",\"drawingBufferWidth\",\"drawingBufferHeight\"],t.ContextSpy=n}(e.Spies||(e.Spies={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(){function t(e,t,n){this.time=t,this.logger=n,this.stackTrace=new e.stackTraceCtor,this.spiedCommandName=e.spiedCommandName,this.spiedCommandRunningContext=e.spiedCommandRunningContext,this.spiedCommand=this.spiedCommandRunningContext[this.spiedCommandName],this.callback=e.callback,this.commandOptions={context:e.context,contextVersion:e.contextVersion,extensions:e.extensions,toggleCapture:e.toggleCapture,spiedCommandName:e.spiedCommandName},this.initCustomCommands(e.commandNamespace),this.initCommand(e.defaultCommandCtor)}return t.prototype.spy=function(){this.spiedCommandRunningContext[this.spiedCommandName]=this.overloadedCommand},t.prototype.unSpy=function(){this.spiedCommandRunningContext[this.spiedCommandName]=this.spiedCommand},t.prototype.createCapture=function(e,t){return this.command.createCapture(e,t)},t.prototype.initCustomCommands=function(n){if(!t.customCommandsConstructors){t.customCommandsConstructors={};for(var a in n)if(n.hasOwnProperty(a)){var r=n[a],o=e.Decorators.getCommandName(r);o&&(t.customCommandsConstructors[o]=r)}}},t.prototype.initCommand=function(e){t.customCommandsConstructors[this.spiedCommandName]?this.command=new t.customCommandsConstructors[this.spiedCommandName](this.commandOptions,this.stackTrace,this.logger):this.command=new e(this.commandOptions,this.stackTrace,this.logger),this.overloadedCommand=this.getSpy()},t.prototype.getSpy=function(){var e=this;return function(){var t=e.time.now,n=e.spiedCommand.apply(e.spiedCommandRunningContext,arguments),a=e.time.now,r={name:e.spiedCommandName,arguments:arguments,result:n,startTime:t,endTime:a};return e.callback(e,r),n}},t}();t.CommandSpy=n}(e.Spies||(e.Spies={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(){function t(e,t,n){this.options=e,this.stackTrace=t,this.logger=n,this.spiedCommandName=e.spiedCommandName}return t.prototype.createCapture=function(e,t){var n=this.stackTrace.getStackTrace(4,1),a=this.stringify(e.arguments,e.result),r={id:t,startTime:e.startTime,commandEndTime:e.endTime,endTime:0,name:e.name,commandArguments:e.arguments,result:e.result,stackTrace:n,status:0,text:a};this.transformCapture(r);for(var o=0;o<r.commandArguments.length;o++){var i=r.commandArguments[o];i&&i.length&&i.length>50&&(r.commandArguments[o]=\"Array Legnth: \"+i.length)}if(r.commandArguments){for(var s=[],o=0;o<r.commandArguments.length;o++){var u=r.commandArguments[o];void 0===u?s.push(void 0):null===u?s.push(null):s.push(JSON.parse(JSON.stringify(u)))}r.commandArguments=s}return r.result&&(r.result=JSON.parse(JSON.stringify(r.result))),r},t.prototype.transformCapture=function(e){},t.prototype.stringify=function(e,t){var n=this.options.spiedCommandName;return e&&e.length>0&&(n+=\": \"+this.stringifyArgs(e).join(\", \")),t&&(n+=\" -> \"+this.stringifyResult(t)),n},t.prototype.stringifyArgs=function(e){for(var t=[],n=0;n<e.length;n++){var a=e[n],r=this.stringifyValue(a);t.push(r)}return t},t.prototype.stringifyResult=function(e){if(e)return this.stringifyValue(e)},t.prototype.stringifyValue=function(t){if(null===t)return\"null\";if(void 0===t)return\"undefined\";var n=e.WebGlObjects.getWebGlObjectTag(t);return n?n.displayText:\"number\"==typeof t&&e.WebGlConstants.isWebGlConstant(t)?e.WebGlConstants.stringifyWebGlConstant(t,this.spiedCommandName):\"string\"==typeof t?t:t instanceof HTMLImageElement?t.src:t instanceof ArrayBuffer?\"[--(\"+t.byteLength+\")--]\":t.length?\"[..(\"+t.length+\")..]\":t},t}();t.BaseCommand=n}(e.Commands||(e.Commands={}))}(n||(n={}));var n,a=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function a(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(a.prototype=n.prototype,new a)}}();!function(e){!function(e){var t=[\"lineWidth\"],n=function(e){function n(n,a,r){var o=e.call(this,n,a,r)||this;return o.isDeprecated=t.indexOf(o.spiedCommandName)>-1,o}return a(n,e),n.prototype.transformCapture=function(e){this.isDeprecated&&(e.status=50)},n}(e.BaseCommand);e.DefaultCommand=n}(e.Commands||(e.Commands={}))}(n||(n={}));var n,r=this&&this.__decorate||function(e,t,n,a){var r,o=arguments.length,i=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,n):a;if(\"object\"==typeof Reflect&&\"function\"==typeof Reflect.decorate)i=Reflect.decorate(e,t,n,a);else for(var s=e.length-1;s>=0;s--)(r=e[s])&&(i=(o<3?r(i):o>3?r(t,n,i):r(t,n))||i);return o>3&&i&&Object.defineProperty(t,n,i),i};!function(e){!function(t){var n=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return a(n,t),n.prototype.stringifyArgs=function(t){var n=[];return(t[0]&e.WebGlConstants.DEPTH_BUFFER_BIT.value)===e.WebGlConstants.DEPTH_BUFFER_BIT.value&&n.push(e.WebGlConstants.DEPTH_BUFFER_BIT.name),(t[0]&e.WebGlConstants.STENCIL_BUFFER_BIT.value)===e.WebGlConstants.STENCIL_BUFFER_BIT.value&&n.push(e.WebGlConstants.STENCIL_BUFFER_BIT.name),(t[0]&e.WebGlConstants.COLOR_BUFFER_BIT.value)===e.WebGlConstants.COLOR_BUFFER_BIT.value&&n.push(e.WebGlConstants.COLOR_BUFFER_BIT.name),n},n}(t.BaseCommand);n=r([e.Decorators.command(\"clear\")],n),t.Clear=n}(e.Commands||(e.Commands={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return a(n,t),n.prototype.stringifyArgs=function(t){var n=[],a=this.options.context.getParameter(e.WebGlConstants.READ_FRAMEBUFFER_BINDING.value),r=this.options.tagWebGlObject(a);n.push(\"READ FROM: \"+this.stringifyValue(r));var o=this.options.context.getParameter(e.WebGlConstants.DRAW_FRAMEBUFFER_BINDING.value),i=this.options.tagWebGlObject(o);n.push(\"WRITE TO: \"+this.stringifyValue(i));for(var s=0;s<8;s++)n.push(t[s]);return(t[8]&e.WebGlConstants.DEPTH_BUFFER_BIT.value)===e.WebGlConstants.DEPTH_BUFFER_BIT.value&&n.push(e.WebGlConstants.DEPTH_BUFFER_BIT.name),(t[8]&e.WebGlConstants.STENCIL_BUFFER_BIT.value)===e.WebGlConstants.STENCIL_BUFFER_BIT.value&&n.push(e.WebGlConstants.STENCIL_BUFFER_BIT.name),(t[8]&e.WebGlConstants.COLOR_BUFFER_BIT.value)===e.WebGlConstants.COLOR_BUFFER_BIT.value&&n.push(e.WebGlConstants.COLOR_BUFFER_BIT.name),n.push(e.WebGlConstants.stringifyWebGlConstant(t[9],\"blitFrameBuffer\")),n},n}(t.BaseCommand);n=r([e.Decorators.command(\"blitFrameBuffer\")],n),t.BlitFrameBuffer=n}(e.Commands||(e.Commands={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return a(n,t),n.prototype.stringifyArgs=function(t){var n=[];return n.push(t[0]),n.push(t[1]),n.push(e.WebGlConstants.stringifyWebGlConstant(t[2],\"vertexAttribPointer\")),n.push(t[3]),n.push(t[4]),n.push(t[5]),n},n}(t.BaseCommand);n=r([e.Decorators.command(\"vertexAttribPointer\")],n),t.VertexAttribPointer=n}(e.Commands||(e.Commands={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t.prototype.stringifyResult=function(e){if(e)return\"name: \"+e.name+\", size: \"+e.size+\", type: \"+e.type},t}(t.BaseCommand);n=r([e.Decorators.command(\"getActiveAttrib\")],n),t.GetActiveAttrib=n}(e.Commands||(e.Commands={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t.prototype.stringifyResult=function(e){if(e)return\"name: \"+e.name+\", size: \"+e.size+\", type: \"+e.type},t}(t.BaseCommand);n=r([e.Decorators.command(\"getActiveUniform\")],n),t.GetActiveUniform=n}(e.Commands||(e.Commands={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t.prototype.stringifyResult=function(e){if(e)return\"name: \"+e.name+\", size: \"+e.size+\", type: \"+e.type},t}(t.BaseCommand);n=r([e.Decorators.command(\"getTransformFeedbackVarying\")],n),t.GetTransformFeedbackVarying=n}(e.Commands||(e.Commands={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t.prototype.stringifyResult=function(e){return e?\"true\":\"false\"},t}(t.BaseCommand);n=r([e.Decorators.command(\"getExtension\")],n),t.GetExtension=n}(e.Commands||(e.Commands={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t.prototype.stringifyResult=function(e){if(e)return\"min: \"+e.rangeMin+\", max: \"+e.rangeMax+\", precision: \"+e.precision},t}(t.BaseCommand);n=r([e.Decorators.command(\"getShaderPrecisionFormat\")],n),t.GetShaderPrecisionFormat=n}(e.Commands||(e.Commands={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return a(n,t),n.prototype.stringifyResult=function(t){if(!t)return\"null\";var n=e.WebGlObjects.getWebGlObjectTag(t);return n?n.displayText:t},n}(t.BaseCommand);n=r([e.Decorators.command(\"getParameter\")],n),t.GetParameter=n}(e.Commands||(e.Commands={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return a(n,t),n.prototype.stringifyArgs=function(t){var n=[];return n.push(e.WebGlConstants.stringifyWebGlConstant(t[0],\"drawArrays\")),n.push(t[1]),n.push(t[2]),n},n}(t.BaseCommand);n=r([e.Decorators.command(\"drawArrays\")],n),t.DrawArrays=n}(e.Commands||(e.Commands={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return a(n,t),n.prototype.stringifyArgs=function(t){var n=[];return n.push(e.WebGlConstants.stringifyWebGlConstant(t[0],\"drawArraysInstanced\")),n.push(t[1]),n.push(t[2]),n.push(t[3]),n},n}(t.BaseCommand);n=r([e.Decorators.command(\"drawArraysInstanced\")],n),t.DrawArraysInstanced=n}(e.Commands||(e.Commands={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return a(n,t),n.prototype.stringifyArgs=function(t){for(var n=[],a=0;a<t.length;a++)n.push(e.WebGlConstants.stringifyWebGlConstant(t[a],\"drawBuffers\"));return n},n}(t.BaseCommand);n=r([e.Decorators.command(\"drawBuffers\")],n),t.DrawBuffers=n}(e.Commands||(e.Commands={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return a(n,t),n.prototype.stringifyArgs=function(t){var n=[];return n.push(e.WebGlConstants.stringifyWebGlConstant(t[0],\"drawElements\")),n.push(t[1]),n.push(e.WebGlConstants.stringifyWebGlConstant(t[2],\"drawElements\")),n.push(t[3]),n},n}(t.BaseCommand);n=r([e.Decorators.command(\"drawElements\")],n),t.DrawElements=n}(e.Commands||(e.Commands={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return a(n,t),n.prototype.stringifyArgs=function(t){var n=[];return n.push(e.WebGlConstants.stringifyWebGlConstant(t[0],\"drawElementsInstanced\")),n.push(t[1]),n.push(e.WebGlConstants.stringifyWebGlConstant(t[2],\"drawElementsInstanced\")),n.push(t[3]),n.push(t[4]),n},n}(t.BaseCommand);n=r([e.Decorators.command(\"drawElementsInstanced\")],n),t.DrawElementsInstanced=n}(e.Commands||(e.Commands={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return a(n,t),n.prototype.stringifyArgs=function(t){var n=[];return n.push(e.WebGlConstants.stringifyWebGlConstant(t[0],\"drawElementsInstancedANGLE\")),n.push(t[1]),n.push(e.WebGlConstants.stringifyWebGlConstant(t[2],\"drawElementsInstancedANGLE\")),n.push(t[3]),n.push(t[4]),n},n}(t.BaseCommand);n=r([e.Decorators.command(\"drawElementsInstancedANGLE\")],n),t.DrawElementsInstancedAngle=n}(e.Commands||(e.Commands={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return a(n,t),n.prototype.stringifyArgs=function(t){var n=[];return n.push(e.WebGlConstants.stringifyWebGlConstant(t[0],\"drawRangeElements\")),n.push(t[1]),n.push(t[2]),n.push(t[3]),n.push(e.WebGlConstants.stringifyWebGlConstant(t[4],\"drawRangeElements\")),n.push(t[5]),n},n}(t.BaseCommand);n=r([e.Decorators.command(\"drawRangeElements\")],n),t.DrawRangeElements=n}(e.Commands||(e.Commands={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t.prototype.stringifyArgs=function(e){for(var t=[],n=0;n<4;n++)t.push(e[n].toFixed(0));return t},t}(t.BaseCommand);n=r([e.Decorators.command(\"scissor\")],n),t.Scissor=n}(e.Commands||(e.Commands={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t.prototype.stringifyArgs=function(e){for(var t=[],n=0;n<4;n++)t.push(e[n].toFixed(0));return t},t}(t.BaseCommand);n=r([e.Decorators.command(\"viewport\")],n),t.Viewport=n}(e.Commands||(e.Commands={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(){function t(e,n){this.options=e,this.logger=n,this.objectName=e.objectName,this.createCommandNames=this.getCreateCommandNames(),this.updateCommandNames=this.getUpdateCommandNames(),this.deleteCommandNames=this.getDeleteCommandNames(),this.startTime=this.options.time.now,this.memoryPerSecond={},this.totalMemory=0,this.frameMemory=0,this.capturing=!1,t.byteSizePerInternalFormat={}}return t.initializeByteSizeFormat=function(){if(!this.byteSizePerInternalFormat){this.byteSizePerInternalFormat=(t={},t[e.WebGlConstants.R8.value]=1,t[e.WebGlConstants.R16F.value]=2,t[e.WebGlConstants.R32F.value]=4,t[e.WebGlConstants.R8UI.value]=1,t[e.WebGlConstants.RG8.value]=2,t[e.WebGlConstants.RG16F.value]=4,t[e.WebGlConstants.RG32F.value]=8,t[e.WebGlConstants.ALPHA.value]=1,t[e.WebGlConstants.RGB.value]=3,t[e.WebGlConstants.RGBA.value]=4,t[e.WebGlConstants.LUMINANCE.value]=1,t[e.WebGlConstants.LUMINANCE_ALPHA.value]=2,t[e.WebGlConstants.DEPTH_COMPONENT.value]=1,t[e.WebGlConstants.DEPTH_STENCIL.value]=2,t[e.WebGlConstants.SRGB_EXT.value]=3,t[e.WebGlConstants.SRGB_ALPHA_EXT.value]=4,t[e.WebGlConstants.RGB8.value]=3,t[e.WebGlConstants.SRGB8.value]=3,t[e.WebGlConstants.RGB565.value]=2,t[e.WebGlConstants.R11F_G11F_B10F.value]=4,t[e.WebGlConstants.RGB9_E5.value]=2,t[e.WebGlConstants.RGB16F.value]=6,t[e.WebGlConstants.RGB32F.value]=12,t[e.WebGlConstants.RGB8UI.value]=3,t[e.WebGlConstants.RGBA8.value]=4,t[e.WebGlConstants.RGB5_A1.value]=2,t[e.WebGlConstants.RGBA16F.value]=8,t[e.WebGlConstants.RGBA32F.value]=16,t[e.WebGlConstants.RGBA8UI.value]=4,t[e.WebGlConstants.COMPRESSED_R11_EAC.value]=4,t[e.WebGlConstants.COMPRESSED_SIGNED_R11_EAC.value]=4,t[e.WebGlConstants.COMPRESSED_RG11_EAC.value]=4,t[e.WebGlConstants.COMPRESSED_SIGNED_RG11_EAC.value]=4,t[e.WebGlConstants.COMPRESSED_RGB8_ETC2.value]=4,t[e.WebGlConstants.COMPRESSED_RGBA8_ETC2_EAC.value]=4,t[e.WebGlConstants.COMPRESSED_SRGB8_ETC2.value]=4,t[e.WebGlConstants.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC.value]=4,t[e.WebGlConstants.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2.value]=4,t[e.WebGlConstants.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2.value]=4,t);var t}},t.prototype.registerCallbacks=function(e){for(var t=0,n=this.createCommandNames;t<n.length;t++){var a=n[t];e[a]=e[a]||[],e[a].push(this.createWithoutSideEffects.bind(this))}for(var r=0,o=this.updateCommandNames;r<o.length;r++){var a=o[r];e[a]=e[a]||[],e[a].push(this.updateWithoutSideEffects.bind(this))}for(var i=0,s=this.deleteCommandNames;i<s.length;i++){var a=s[i];e[a]=e[a]||[],e[a].push(this.deleteWithoutSideEffects.bind(this))}},t.prototype.startCapture=function(){this.frameMemory=0,this.capturing=!0},t.prototype.stopCapture=function(){this.frameMemory=0,this.capturing=!1},t.prototype.appendRecordedInformation=function(e){e.frameMemory[this.objectName]=this.frameMemory,e.memory[this.objectName]=this.memoryPerSecond},t.prototype.create=function(e){},t.prototype.createWithoutSideEffects=function(e){this.options.toggleCapture(!1),this.create(e),this.options.toggleCapture(!0)},t.prototype.updateWithoutSideEffects=function(t){if(t&&0!==t.arguments.length){this.options.toggleCapture(!1);var n=t.arguments[0],a=this.getBoundInstance(n);if(!a)return void this.options.toggleCapture(!0);if(!e.WebGlObjects.getWebGlObjectTag(a))return void this.options.toggleCapture(!0);var r=this.getWebGlConstant(n),o=this.update(t,r,a);this.changeMemorySize(o),this.options.toggleCapture(!0)}},t.prototype.deleteWithoutSideEffects=function(e){if(e&&e.arguments&&!(e.arguments.length<1)){var t=e.arguments[0];if(t){this.options.toggleCapture(!1);var n=this.delete(t);this.changeMemorySize(-n),this.options.toggleCapture(!0)}}},t.prototype.changeMemorySize=function(e){this.totalMemory+=e,this.capturing&&(this.frameMemory+=e);var t=this.options.time.now-this.startTime,n=Math.round(t/1e3);this.memoryPerSecond[n]=this.totalMemory},t.prototype.getWebGlConstant=function(t){var n=e.WebGlConstantsByValue[t];return n?n.name:t+\"\"},t.prototype.getByteSizeForInternalFormat=function(e){return t.byteSizePerInternalFormat[e]||4},t}();t.BaseRecorder=n}(e.Recorders||(e.Recorders={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return a(n,t),n.prototype.getCreateCommandNames=function(){return[\"createTexture\"]},n.prototype.getUpdateCommandNames=function(){return[\"texImage2D\",\"compressedTexImage2D\",\"texStorage2D\"]},n.prototype.getDeleteCommandNames=function(){return[\"deleteTexture\"]},n.prototype.getBoundInstance=function(t){var n=this.options.context;return t===e.WebGlConstants.TEXTURE_2D.value?n.getParameter(e.WebGlConstants.TEXTURE_BINDING_2D.value):t===e.WebGlConstants.TEXTURE_CUBE_MAP_POSITIVE_X.value||t===e.WebGlConstants.TEXTURE_CUBE_MAP_POSITIVE_Y.value||t===e.WebGlConstants.TEXTURE_CUBE_MAP_POSITIVE_Z.value||t===e.WebGlConstants.TEXTURE_CUBE_MAP_NEGATIVE_X.value||t===e.WebGlConstants.TEXTURE_CUBE_MAP_NEGATIVE_Y.value||t===e.WebGlConstants.TEXTURE_CUBE_MAP_NEGATIVE_Z.value?n.getParameter(e.WebGlConstants.TEXTURE_BINDING_CUBE_MAP.value):void 0},n.prototype.delete=function(t){var n=t.__SPECTOR_Object_CustomData;return n?n.target===e.WebGlConstants.TEXTURE_2D_ARRAY.name||n.target===e.WebGlConstants.TEXTURE_3D.name?0:n.length:0},n.prototype.update=function(e,t,n){if(e.arguments.length>=2&&0!==e.arguments[1])return 0;var a=this.getCustomData(e,t,n);if(!a)return 0;var r=n.__SPECTOR_Object_CustomData?n.__SPECTOR_Object_CustomData.length:0,o=\"TEXTURE_2D\"===t?1:6;return a.length=a.width*a.height*o*this.getByteSizeForInternalFormat(a.internalFormat),n.__SPECTOR_Object_CustomData=a,a.length-r},n.prototype.getCustomData=function(e,t,n){return\"texImage2D\"===e.name?this.getTexImage2DCustomData(e,t,n):\"compressedTexImage2D\"===e.name?this.getCompressedTexImage2DCustomData(e,t,n):\"texStorage2D\"===e.name?this.getTexStorage2DCustomData(e,t,n):void 0},n.prototype.getTexStorage2DCustomData=function(e,t,n){var a;return 5===e.arguments.length&&(a={target:t,internalFormat:e.arguments[2],width:e.arguments[3],height:e.arguments[4],length:0}),a},n.prototype.getCompressedTexImage2DCustomData=function(e,t,n){if(0===e.arguments[1]){var a;return e.arguments.length>=7&&(a={target:t,internalFormat:e.arguments[2],width:e.arguments[3],height:e.arguments[4],length:0}),a}},n.prototype.getTexImage2DCustomData=function(e,t,n){if(0===e.arguments[1]){var a;return e.arguments.length>=8?a={target:t,internalFormat:e.arguments[2],width:e.arguments[3],height:e.arguments[4],format:e.arguments[6],type:e.arguments[7],length:0}:6===e.arguments.length&&(a={target:t,internalFormat:e.arguments[2],width:e.arguments[5].width,height:e.arguments[5].height,format:e.arguments[3],type:e.arguments[4],length:0}),a}},n}(t.BaseRecorder);n=r([e.Decorators.recorder(\"Texture2d\")],n),t.Texture2DRecorder=n}(e.Recorders||(e.Recorders={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return a(n,t),n.prototype.getCreateCommandNames=function(){return[\"createTexture\"]},n.prototype.getUpdateCommandNames=function(){return[\"texImage3D\",\"compressedTexImage3D\",\"texStorage3D\"]},n.prototype.getDeleteCommandNames=function(){return[\"deleteTexture\"]},n.prototype.getBoundInstance=function(t){var n=this.options.context;return t===e.WebGlConstants.TEXTURE_2D_ARRAY.value?n.getParameter(e.WebGlConstants.TEXTURE_BINDING_2D_ARRAY.value):t===e.WebGlConstants.TEXTURE_3D.value?n.getParameter(e.WebGlConstants.TEXTURE_BINDING_3D.value):void 0},n.prototype.delete=function(t){var n=t.__SPECTOR_Object_CustomData;return n?n.target!==e.WebGlConstants.TEXTURE_2D_ARRAY.name&&n.target!==e.WebGlConstants.TEXTURE_3D.name?0:n.length:0},n.prototype.update=function(e,t,n){if(e.arguments.length>=2&&0!==e.arguments[1])return 0;var a=this.getCustomData(e,t,n);if(!a)return 0;var r=n.__SPECTOR_Object_CustomData?n.__SPECTOR_Object_CustomData.length:0;return a.length=a.width*a.height*a.depth*this.getByteSizeForInternalFormat(a.internalFormat),a&&(n.__SPECTOR_Object_CustomData=a),a.length-r},n.prototype.getCustomData=function(e,t,n){return\"texImage3D\"===e.name?this.getTexImage3DCustomData(e,t,n):\"compressedTexImage3D\"===e.name?this.getCompressedTexImage3DCustomData(e,t,n):\"texStorage3D\"===e.name?this.getTexStorage3DCustomData(e,t,n):void 0},n.prototype.getTexStorage3DCustomData=function(e,t,n){var a;return 6===e.arguments.length&&(a={target:t,internalFormat:e.arguments[2],width:e.arguments[3],height:e.arguments[4],depth:e.arguments[5],length:0}),a},n.prototype.getCompressedTexImage3DCustomData=function(e,t,n){if(0===e.arguments[1]){var a;return e.arguments.length>=8&&(a={target:t,internalFormat:e.arguments[2],width:e.arguments[3],height:e.arguments[4],depth:e.arguments[5],length:0}),a}},n.prototype.getTexImage3DCustomData=function(e,t,n){if(0===e.arguments[1]){var a;return e.arguments.length>=9&&(a={target:t,internalFormat:e.arguments[2],width:e.arguments[3],height:e.arguments[4],depth:e.arguments[5],format:e.arguments[7],type:e.arguments[8],length:0}),a}},n}(t.BaseRecorder);n=r([e.Decorators.recorder(\"Texture3d\")],n),t.Texture3DRecorder=n}(e.Recorders||(e.Recorders={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return a(n,t),n.prototype.getCreateCommandNames=function(){return[\"createBuffer\"]},n.prototype.getUpdateCommandNames=function(){return[\"bufferData\"]},n.prototype.getDeleteCommandNames=function(){return[\"deleteBuffer\"]},n.prototype.getBoundInstance=function(t){var n=this.options.context;return t===e.WebGlConstants.ARRAY_BUFFER.value?n.getParameter(e.WebGlConstants.ARRAY_BUFFER_BINDING.value):t===e.WebGlConstants.ELEMENT_ARRAY_BUFFER.value?n.getParameter(e.WebGlConstants.ELEMENT_ARRAY_BUFFER_BINDING.value):t===e.WebGlConstants.COPY_READ_BUFFER.value?n.getParameter(e.WebGlConstants.COPY_READ_BUFFER_BINDING.value):t===e.WebGlConstants.COPY_WRITE_BUFFER.value?n.getParameter(e.WebGlConstants.COPY_WRITE_BUFFER_BINDING.value):t===e.WebGlConstants.TRANSFORM_FEEDBACK_BUFFER.value?n.getParameter(e.WebGlConstants.TRANSFORM_FEEDBACK_BUFFER_BINDING.value):t===e.WebGlConstants.UNIFORM_BUFFER.value?n.getParameter(e.WebGlConstants.UNIFORM_BUFFER_BINDING.value):t===e.WebGlConstants.PIXEL_PACK_BUFFER.value?n.getParameter(e.WebGlConstants.PIXEL_PACK_BUFFER_BINDING.value):t===e.WebGlConstants.PIXEL_UNPACK_BUFFER.value?n.getParameter(e.WebGlConstants.PIXEL_UNPACK_BUFFER_BINDING.value):void 0},n.prototype.delete=function(e){var t=e.__SPECTOR_Object_CustomData;return t?t.length:0},n.prototype.update=function(e,t,n){var a=this.getCustomData(t,e);if(!a)return 0;var r=n.__SPECTOR_Object_CustomData?n.__SPECTOR_Object_CustomData.length:0;return n.__SPECTOR_Object_CustomData=a,a.length-r},n.prototype.getCustomData=function(e,t){var n=this.getLength(t);return t.arguments.length>=4?{target:e,length:n,usage:t.arguments[2],offset:t.arguments[3],sourceLength:t.arguments[1]?t.arguments[1].length:-1}:3===t.arguments.length?{target:e,length:n,usage:t.arguments[2]}:void 0},n.prototype.getLength=function(e){var t=-1;return 5===e.arguments.length&&(t=e.arguments[4]),t<=0&&(t=\"number\"==typeof e.arguments[1]?e.arguments[1]:e.arguments[1]?e.arguments[1].buffer?e.arguments[1].buffer.byteLength:e.arguments[1].byteLength||e.arguments[1].length||0:0),t},n}(t.BaseRecorder);n=r([e.Decorators.recorder(\"Buffer\")],n),t.BufferRecorder=n}(e.Recorders||(e.Recorders={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return a(n,t),n.prototype.getCreateCommandNames=function(){return[\"createRenderbuffer\"]},n.prototype.getUpdateCommandNames=function(){return[\"renderbufferStorage\"]},n.prototype.getDeleteCommandNames=function(){return[\"deleteRenderbuffer\"]},n.prototype.getBoundInstance=function(t){var n=this.options.context;if(t===e.WebGlConstants.RENDERBUFFER.value)return n.getParameter(e.WebGlConstants.RENDERBUFFER_BINDING.value)},n.prototype.delete=function(e){var t=e.__SPECTOR_Object_CustomData;return t?t.length:0},n.prototype.update=function(e,t,n){var a=this.getCustomData(e,t);if(!a)return 0;var r=n.__SPECTOR_Object_CustomData?n.__SPECTOR_Object_CustomData.length:0;return a.length=a.width*a.height*this.getByteSizeForInternalFormat(a.internalFormat),n.__SPECTOR_Object_CustomData=a,a.length-r},n.prototype.getCustomData=function(e,t){return{target:t,internalFormat:e.arguments[1],width:e.arguments[2],height:e.arguments[3],length:0}},n}(t.BaseRecorder);n=r([e.Decorators.recorder(\"Renderbuffer\")],n),t.RenderBufferRecorder=n}(e.Recorders||(e.Recorders={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(){function t(e,t){this.options=e,this.logger=t,this.recorders={},this.recorderConstructors={},this.onCommandCallbacks={},this.contextInformation=e.contextInformation,this.time=new e.timeConstructor,this.initAvailableRecorders(),this.initRecorders()}return t.prototype.recordCommand=function(e){var t=this.onCommandCallbacks[e.name];if(t)for(var n=0,a=t;n<a.length;n++){var r=a[n];r(e)}},t.prototype.startCapture=function(){for(var e in this.recorders)if(this.recorders.hasOwnProperty(e)){var t=this.recorders[e];t.startCapture()}},t.prototype.stopCapture=function(){for(var e in this.recorders)if(this.recorders.hasOwnProperty(e)){var t=this.recorders[e];t.stopCapture()}},t.prototype.appendRecordedInformation=function(e){for(var t in this.recorders)if(this.recorders.hasOwnProperty(t)){var n=this.recorders[t];n.appendRecordedInformation(e)}},t.prototype.initAvailableRecorders=function(){for(var t in this.options.recorderNamespace)if(this.options.recorderNamespace.hasOwnProperty(t)){var n=this.options.recorderNamespace[t],a=e.Decorators.getRecorderName(n);a&&(this.recorderConstructors[a]=n)}},t.prototype.initRecorders=function(){for(var t in this.recorderConstructors)if(this.recorderConstructors.hasOwnProperty(t)){var n=e.merge({objectName:t,time:this.time},this.contextInformation),a=new this.recorderConstructors[t](n,this.logger);this.recorders[t]=a,a.registerCallbacks(this.onCommandCallbacks)}},t}();t.RecorderSpy=n}(e.Spies||(e.Spies={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(){function t(e,t){this.options=e,this.logger=t,this.stateTrackers={},this.onCommandCapturedCallbacks={},this.stateConstructors={},this.contextInformation=e.contextInformation,this.initAvailableStateTrackers(),this.initStateTrackers()}return t.prototype.startCapture=function(e){for(var t in this.stateTrackers)if(this.stateTrackers.hasOwnProperty(t)){var n=this.stateTrackers[t],a=n.startCapture();n.requireStartAndStopStates&&(e.initState[t]=a)}},t.prototype.stopCapture=function(e){for(var t in this.stateTrackers)if(this.stateTrackers.hasOwnProperty(t)){var n=this.stateTrackers[t],a=n.stopCapture();n.requireStartAndStopStates&&(e.endState[t]=a)}},t.prototype.captureState=function(e){var t=this.onCommandCapturedCallbacks[e.name];if(t)for(var n=0,a=t;n<a.length;n++){var r=a[n];r(e)}},t.prototype.initAvailableStateTrackers=function(){for(var t in this.options.stateNamespace)if(this.options.stateNamespace.hasOwnProperty(t)){var n=this.options.stateNamespace[t],a=e.Decorators.getStateName(n);a&&(this.stateConstructors[a]=n)}},t.prototype.initStateTrackers=function(){for(var t in this.stateConstructors)if(this.stateConstructors.hasOwnProperty(t)){var n=e.merge({stateName:t},this.contextInformation),a=new this.stateConstructors[t](n,this.logger);this.stateTrackers[t]=a,a.registerCallbacks(this.onCommandCapturedCallbacks)}},t}();t.StateSpy=n}(e.Spies||(e.Spies={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(){function t(e,t){this.options=e,this.logger=t,this.webGlObjectConstructors={},this.webGlObjects={},this.contextInformation=e.contextInformation,this.initAvailableWebglObjects(),this.initWebglObjects()}return t.prototype.tagWebGlObjects=function(e){for(var t in this.webGlObjects)if(this.webGlObjects.hasOwnProperty(t)){for(var n=this.webGlObjects[t],a=0;a<e.arguments.length;a++){var r=e.arguments[a];if(n.tagWebGlObject(r))break}if(n.tagWebGlObject(e.result))break}},t.prototype.tagWebGlObject=function(e){for(var t in this.webGlObjects)if(this.webGlObjects.hasOwnProperty(t)){var n=this.webGlObjects[t],a=n.tagWebGlObject(e);if(a)return a}},t.prototype.initAvailableWebglObjects=function(){for(var t in this.options.webGlObjectNamespace)if(this.options.webGlObjectNamespace.hasOwnProperty(t)){var n=this.options.webGlObjectNamespace[t],a=e.Decorators.getWebGlObjectName(n),r=e.Decorators.getWebGlObjectType(n);a&&r&&(this.webGlObjectConstructors[a]={ctor:n,type:r})}},t.prototype.initWebglObjects=function(){for(var t in this.webGlObjectConstructors)if(this.webGlObjectConstructors.hasOwnProperty(t)){var n=e.merge({typeName:t,type:this.webGlObjectConstructors[t].type},this.contextInformation),a=new this.webGlObjectConstructors[t].ctor(n,this.logger);this.webGlObjects[t]=a}},t}();t.WebGlObjectSpy=n}(e.Spies||(e.Spies={}))}(n||(n={}));var n;!function(e){!function(t){t.drawCommands=[\"drawArrays\",\"drawElements\",\"drawArraysInstanced\",\"drawElementsInstanced\",\"drawElementsInstancedANGLE\",\"drawRangeElements\"];var n=function(){function t(e,t){this.options=e,this.logger=t,this.context=e.context,this.contextVersion=e.contextVersion,this.extensions=e.extensions,this.toggleCapture=e.toggleCapture,this.stateName=e.stateName,this.consumeCommands=this.getConsumeCommands(),this.changeCommandsByState=this.getChangeCommandsByState(),this.commandNameToStates=this.getCommandNameToStates()}return Object.defineProperty(t.prototype,\"requireStartAndStopStates\",{get:function(){return!0},enumerable:!0,configurable:!0}),t.prototype.startCapture=function(e){return void 0===e&&(e=!0),this.capturedCommandsByState={},e&&this.requireStartAndStopStates&&(this.currentState={},this.readFromContextNoSideEffects()),this.copyCurrentStateToPrevious(),this.currentState={},this.previousState},t.prototype.stopCapture=function(){return this.requireStartAndStopStates&&this.readFromContextNoSideEffects(),this.analyse(void 0),this.currentState},t.prototype.registerCallbacks=function(e){for(var t in this.changeCommandsByState)if(this.changeCommandsByState.hasOwnProperty(t))for(var n=0,a=this.changeCommandsByState[t];n<a.length;n++){var r=a[n];e[r]=e[r]||[],e[r].push(this.onChangeCommand.bind(this))}for(var o=0,i=this.consumeCommands;o<i.length;o++){var s=i[o];e[s]=e[s]||[],e[s].push(this.onConsumeCommand.bind(this))}},t.prototype.getStateData=function(){return this.currentState},t.prototype.getConsumeCommands=function(){return[]},t.prototype.getChangeCommandsByState=function(){return{}},t.prototype.copyCurrentStateToPrevious=function(){this.currentState&&(this.previousState=this.currentState)},t.prototype.onChangeCommand=function(e){for(var t=this.commandNameToStates[e.name],n=0,a=t;n<a.length;n++){var r=a[n];if(!this.isValidChangeCommand(e,r))return;this.capturedCommandsByState[r]=this.capturedCommandsByState[r]||[],this.capturedCommandsByState[r].push(e)}},t.prototype.isValidChangeCommand=function(e,t){return!0},t.prototype.onConsumeCommand=function(e){this.isValidConsumeCommand(e)&&(this.readFromContextNoSideEffects(),this.analyse(e),this.storeCommandIds(),e[this.stateName]=this.currentState,this.startCapture(!1))},t.prototype.isValidConsumeCommand=function(e){return!0},t.prototype.analyse=function(e){for(var t in this.capturedCommandsByState)if(this.capturedCommandsByState.hasOwnProperty(t)){var n=this.capturedCommandsByState[t],a=n.length-1;if(a>=0)if(e){for(var r=0;r<a;r++){var o=n[r];o.consumeCommandId=e.id,this.changeCommandCaptureStatus(o,30)}var i=this.isStateEnableNoSideEffects(t,e.commandArguments),s=n[a];s.consumeCommandId=e.id,this.areStatesEquals(this.currentState[t],this.previousState[t])?this.changeCommandCaptureStatus(s,30):i?this.changeCommandCaptureStatus(s,40):this.changeCommandCaptureStatus(s,20)}else for(var r=0;r<n.length;r++){var s=n[r];this.changeCommandCaptureStatus(s,10)}}},t.prototype.storeCommandIds=function(){for(var e=[\"unusedCommandIds\",\"disabledCommandIds\",\"redundantCommandIds\",\"validCommandIds\"],t=0,n=e;t<n.length;t++){var a=n[t];this.currentState[a]=[]}for(var r in this.capturedCommandsByState)if(this.capturedCommandsByState.hasOwnProperty(r))for(var o=this.capturedCommandsByState[r],i=0,s=o;i<s.length;i++){var u=s[i];switch(u.status){case 10:this.currentState.unusedCommandIds.push(u.id);break;case 20:this.currentState.disabledCommandIds.push(u.id);break;case 30:this.currentState.redundantCommandIds.push(u.id);break;case 40:this.currentState.validCommandIds.push(u.id)}}for(var l=0,c=e;l<c.length;l++){var a=c[l];this.currentState[a].length||delete this.currentState[a]}},t.prototype.changeCommandCaptureStatus=function(e,t){return e.status<t&&(e.status=t,!0)},t.prototype.areStatesEquals=function(e,t){if(typeof e!=typeof t)return!1;if(e&&!t)return!1;if(t&&!e)return!1;if(void 0===e||null===e)return!0;if(e.length&&t.length&&\"string\"!=typeof e){if(e.length!==t.length)return!1;for(var n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}return e===t},t.prototype.isStateEnable=function(e,t){return!0},t.prototype.getSpectorData=function(t){if(t)return{__SPECTOR_Object_TAG:e.WebGlObjects.getWebGlObjectTag(t)||this.options.tagWebGlObject(t),__SPECTOR_Object_CustomData:t.__SPECTOR_Object_CustomData,__SPECTOR_Metadata:t.__SPECTOR_Metadata}},t.prototype.readFromContextNoSideEffects=function(){this.toggleCapture(!1),this.readFromContext(),this.toggleCapture(!0)},t.prototype.isStateEnableNoSideEffects=function(e,t){this.toggleCapture(!1);var n=this.isStateEnable(e,t);return this.toggleCapture(!0),n},t.prototype.getCommandNameToStates=function(){var e={};for(var t in this.changeCommandsByState)if(this.changeCommandsByState.hasOwnProperty(t))for(var n=0,a=this.changeCommandsByState[t];n<a.length;n++){var r=a[n];e[r]=e[r]||[],e[r].push(t)}return e},t}();t.BaseState=n}(e.States||(e.States={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return a(n,t),n.prototype.getWebgl1Parameters=function(){return[]},n.prototype.getWebgl2Parameters=function(){return[]},n.prototype.getChangeCommandsByState=function(){this.parameters=[],this.parameters.push(this.getWebgl1Parameters()),this.contextVersion>1&&this.parameters.push(this.getWebgl2Parameters());for(var e={},t=1;t<=this.contextVersion&&!(t>this.parameters.length);t++)if(this.parameters[t-1])for(var n=0,a=this.parameters[t-1];n<a.length;n++){var r=a[n];if(r.changeCommands)for(var o=0,i=r.changeCommands;o<i.length;o++){var s=i[o];e[r.constant.name]=e[r.constant.name]||[],e[r.constant.name].push(s)}}return e},n.prototype.readFromContext=function(){for(var t=1;t<=this.contextVersion&&!(t>this.parameters.length);t++)for(var n=0,a=this.parameters[t-1];n<a.length;n++){var r=a[n],o=this.readParameterFromContext(r),i=e.WebGlObjects.getWebGlObjectTag(o);if(i)this.currentState[r.constant.name]=i;else{var s=this.stringifyParameterValue(o,r);this.currentState[r.constant.name]=s}}},n.prototype.readParameterFromContext=function(e){return e.constant.extensionName&&!this.extensions[e.constant.extensionName]?\"Extension \"+e.constant.extensionName+\" is unavailble.\":this.context.getParameter(e.constant.value)},n.prototype.stringifyParameterValue=function(t,n){if(null===t)return\"null\";if(void 0===t)return\"undefined\";if(30===n.returnType)return t=t.toString(2),t=\"00000000000000000000000000000000\".substr(t.length)+t;if(\"number\"==typeof t&&e.WebGlConstants.isWebGlConstant(t)){if(20===n.returnType){var a=n.changeCommands?n.changeCommands[0]||\"\":\"\";return t=e.WebGlConstants.stringifyWebGlConstant(t,a)}return t}if(t.length&&\"string\"!=typeof t){for(var r=[],o=0;o<t.length;o++)r.push(t[o]);return r}return t},n}(t.BaseState);t.ParameterState=n}(e.States||(e.States={}))}(n||(n={}));var n;!function(e){!function(t){!function(n){var r=function(t){function n(e,n){var a=t.call(this,e,n)||this;return a.currentState=a.startCapture(),a}return a(n,t),n.prototype.getWebgl1Parameters=function(){return[{constant:e.WebGlConstants.RENDERER},{constant:e.WebGlConstants.VENDOR},{constant:e.WebGlConstants.VERSION},{constant:e.WebGlConstants.SHADING_LANGUAGE_VERSION},{constant:e.WebGlConstants.SAMPLES},{constant:e.WebGlConstants.SAMPLE_BUFFERS},{constant:e.WebGlConstants.RED_BITS},{constant:e.WebGlConstants.GREEN_BITS},{constant:e.WebGlConstants.BLUE_BITS},{constant:e.WebGlConstants.ALPHA_BITS},{constant:e.WebGlConstants.DEPTH_BITS},{constant:e.WebGlConstants.STENCIL_BITS},{constant:e.WebGlConstants.SUBPIXEL_BITS},{constant:e.WebGlConstants.LINE_WIDTH},{constant:e.WebGlConstants.ALIASED_LINE_WIDTH_RANGE},{constant:e.WebGlConstants.ALIASED_POINT_SIZE_RANGE},{constant:e.WebGlConstants.IMPLEMENTATION_COLOR_READ_FORMAT,returnType:20},{constant:e.WebGlConstants.IMPLEMENTATION_COLOR_READ_TYPE,returnType:20},{constant:e.WebGlConstants.MAX_COMBINED_TEXTURE_IMAGE_UNITS},{constant:e.WebGlConstants.MAX_CUBE_MAP_TEXTURE_SIZE},{constant:e.WebGlConstants.MAX_FRAGMENT_UNIFORM_VECTORS},{constant:e.WebGlConstants.MAX_RENDERBUFFER_SIZE},{constant:e.WebGlConstants.MAX_TEXTURE_IMAGE_UNITS},{constant:e.WebGlConstants.MAX_TEXTURE_SIZE},{constant:e.WebGlConstants.MAX_VARYING_VECTORS},{constant:e.WebGlConstants.MAX_VERTEX_ATTRIBS},{constant:e.WebGlConstants.MAX_VERTEX_TEXTURE_IMAGE_UNITS},{constant:e.WebGlConstants.MAX_VERTEX_UNIFORM_VECTORS},{constant:e.WebGlConstants.MAX_VIEWPORT_DIMS},{constant:e.WebGlConstants.MAX_TEXTURE_MAX_ANISOTROPY_EXT},{constant:e.WebGlConstants.MAX_COLOR_ATTACHMENTS_WEBGL},{constant:e.WebGlConstants.MAX_DRAW_BUFFERS_WEBGL}]},n.prototype.getWebgl2Parameters=function(){return[{constant:e.WebGlConstants.MAX_3D_TEXTURE_SIZE},{constant:e.WebGlConstants.MAX_ARRAY_TEXTURE_LAYERS},{constant:e.WebGlConstants.MAX_CLIENT_WAIT_TIMEOUT_WEBGL},{constant:e.WebGlConstants.MAX_COLOR_ATTACHMENTS},{constant:e.WebGlConstants.MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS},{constant:e.WebGlConstants.MAX_COMBINED_UNIFORM_BLOCKS},{constant:e.WebGlConstants.MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS},{constant:e.WebGlConstants.MAX_DRAW_BUFFERS},{constant:e.WebGlConstants.MAX_ELEMENT_INDEX},{constant:e.WebGlConstants.MAX_ELEMENTS_INDICES},{constant:e.WebGlConstants.MAX_ELEMENTS_VERTICES},{constant:e.WebGlConstants.MAX_FRAGMENT_INPUT_COMPONENTS},{constant:e.WebGlConstants.MAX_FRAGMENT_UNIFORM_BLOCKS},{constant:e.WebGlConstants.MAX_FRAGMENT_UNIFORM_COMPONENTS},{constant:e.WebGlConstants.MAX_PROGRAM_TEXEL_OFFSET},{constant:e.WebGlConstants.MAX_SAMPLES},{constant:e.WebGlConstants.MAX_SERVER_WAIT_TIMEOUT},{constant:e.WebGlConstants.MAX_TEXTURE_LOD_BIAS},{constant:e.WebGlConstants.MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS},{constant:e.WebGlConstants.MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS},{constant:e.WebGlConstants.MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS},{constant:e.WebGlConstants.MAX_UNIFORM_BLOCK_SIZE},{constant:e.WebGlConstants.MAX_UNIFORM_BUFFER_BINDINGS},{constant:e.WebGlConstants.MAX_VARYING_COMPONENTS},{constant:e.WebGlConstants.MAX_VERTEX_OUTPUT_COMPONENTS},{constant:e.WebGlConstants.MAX_VERTEX_UNIFORM_BLOCKS},{constant:e.WebGlConstants.MAX_VERTEX_UNIFORM_COMPONENTS},{constant:e.WebGlConstants.MIN_PROGRAM_TEXEL_OFFSET}]},n}(t.ParameterState);n.Capabilities=r}(t.Information||(t.Information={}))}(e.States||(e.States={}))}(n||(n={}));var n;!function(e){!function(t){!function(n){var r=function(t){function n(e,n){var a=t.call(this,e,n)||this;return a.currentState=a.startCapture(),a}return a(n,t),n.prototype.getWebgl1Parameters=function(){return[{constant:e.WebGlConstants.COMPRESSED_TEXTURE_FORMATS}]},n.prototype.stringifyParameterValue=function(t,n){for(var a=[],r=0,o=t;r<o.length;r++){var i=o[r];a.push(e.WebGlConstants.stringifyWebGlConstant(i,\"getParameter\"))}return a},n}(t.ParameterState);n.CompressedTextures=r}(t.Information||(t.Information={}))}(e.States||(e.States={}))}(n||(n={}));var n;!function(e){!function(e){!function(t){var n=function(e){function t(t,n){var a=e.call(this,t,n)||this;return a.extensionDefinition=[[{name:\"ANGLE_instanced_arrays\",description:\"\"},{name:\"EXT_blend_minmax\",description:\"\"},{name:\"EXT_color_buffer_float\",description:\"\"},{name:\"EXT_color_buffer_half_float\",description:\"\"},{name:\"EXT_disjoint_timer_query\",description:\"\"},{name:\"EXT_frag_depth\",description:\"\"},{name:\"EXT_sRGB\",description:\"\"},{name:\"EXT_shader_texture_lod\",description:\"\"},{name:\"EXT_texture_filter_anisotropic\",description:\"\"},{name:\"OES_element_index_uint\",description:\"\"},{name:\"OES_standard_derivatives\",description:\"\"},{name:\"OES_texture_float\",description:\"\"},{name:\"OES_texture_float_linear\",description:\"\"},{name:\"OES_texture_half_float\",description:\"\"},{name:\"OES_texture_half_float_linear\",description:\"\"},{name:\"OES_vertex_array_object\",description:\"\"},{name:\"WEBGL_color_buffer_float\",description:\"\"},{name:\"WEBGL_compressed_texture_astc\",description:\"\"},{name:\"WEBGL_compressed_texture_atc\",description:\"\"},{name:\"WEBGL_compressed_texture_etc\",description:\"\"},{name:\"WEBGL_compressed_texture_etc1\",description:\"\"},{name:\"WEBGL_compressed_texture_s3tc\",description:\"\"},{name:\"WEBGL_depth_texture\",description:\"\"},{name:\"WEBGL_draw_buffers\",description:\"\"}]],a.currentState=a.startCapture(),a}return a(t,e),t.prototype.getExtensions=function(){return this.extensions},t.prototype.readFromContext=function(){for(var e=1;e<=this.contextVersion&&!(e>this.extensionDefinition.length);e++)for(var t=0,n=this.extensionDefinition[e-1];t<n.length;t++){var a=n[t],r=this.context.getExtension(a.name);r?(this.currentState[a.name]=!0,this.extensions[a.name]=r):this.currentState[a.name]=!1}},t}(e.BaseState);t.Extensions=n}(e.Information||(e.Information={}))}(e.States||(e.States={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return a(n,t),n.prototype.getWebgl1Parameters=function(){return[{constant:e.WebGlConstants.PACK_ALIGNMENT,changeCommands:[\"pixelStorei\"]},{constant:e.WebGlConstants.UNPACK_ALIGNMENT,changeCommands:[\"pixelStorei\"]},{constant:e.WebGlConstants.UNPACK_COLORSPACE_CONVERSION_WEBGL,returnType:20,changeCommands:[\"pixelStorei\"]},{constant:e.WebGlConstants.UNPACK_FLIP_Y_WEBGL,changeCommands:[\"pixelStorei\"]},{constant:e.WebGlConstants.UNPACK_PREMULTIPLY_ALPHA_WEBGL,changeCommands:[\"pixelStorei\"]}]},n.prototype.getWebgl2Parameters=function(){return[{constant:e.WebGlConstants.PACK_ROW_LENGTH,changeCommands:[\"pixelStorei\"]},{constant:e.WebGlConstants.PACK_SKIP_PIXELS,changeCommands:[\"pixelStorei\"]},{constant:e.WebGlConstants.PACK_SKIP_ROWS,changeCommands:[\"pixelStorei\"]},{constant:e.WebGlConstants.UNPACK_IMAGE_HEIGHT,changeCommands:[\"pixelStorei\"]},{constant:e.WebGlConstants.UNPACK_SKIP_PIXELS,changeCommands:[\"pixelStorei\"]},{constant:e.WebGlConstants.UNPACK_SKIP_ROWS,changeCommands:[\"pixelStorei\"]},{constant:e.WebGlConstants.UNPACK_SKIP_IMAGES,changeCommands:[\"pixelStorei\"]}]},n.prototype.getConsumeCommands=function(){return[\"readPixels\",\"texImage2D\",\"texSubImage2D\"]},n.prototype.isValidChangeCommand=function(t,n){return e.WebGlConstantsByName[n].value===t.commandArguments[0]},n}(t.ParameterState);n=r([e.Decorators.state(\"AlignmentState\")],n),t.AlignmentState=n}(e.States||(e.States={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(n){function r(){return null!==n&&n.apply(this,arguments)||this}return a(r,n),r.prototype.getWebgl1Parameters=function(){return[{constant:e.WebGlConstants.BLEND,changeCommands:[\"enable\",\"disable\"]},{constant:e.WebGlConstants.BLEND_COLOR,changeCommands:[\"blendColor\"]},{constant:e.WebGlConstants.BLEND_DST_ALPHA,returnType:20,changeCommands:[\"blendFunc\",\"blendFuncSeparate\"]},{constant:e.WebGlConstants.BLEND_DST_RGB,returnType:20,changeCommands:[\"blendFunc\",\"blendFuncSeparate\"]},{constant:e.WebGlConstants.BLEND_EQUATION_ALPHA,returnType:20,changeCommands:[\"blendEquation\",\"blendEquationSeparate\"]},{constant:e.WebGlConstants.BLEND_EQUATION_RGB,returnType:20,changeCommands:[\"blendEquation\",\"blendEquationSeparate\"]},{constant:e.WebGlConstants.BLEND_SRC_ALPHA,returnType:20,changeCommands:[\"blendFunc\",\"blendFuncSeparate\"]},{constant:e.WebGlConstants.BLEND_SRC_RGB,returnType:20,changeCommands:[\"blendFunc\",\"blendFuncSeparate\"]}]},r.prototype.isValidChangeCommand=function(t,n){return\"enable\"!==t.name&&\"disable\"!==t.name||t.commandArguments[0]===e.WebGlConstants.BLEND.value},r.prototype.getConsumeCommands=function(){return t.drawCommands},r.prototype.isStateEnable=function(t,n){return this.context.isEnabled(e.WebGlConstants.BLEND.value)},r}(t.ParameterState);n=r([e.Decorators.state(\"BlendState\")],n),t.BlendState=n}(e.States||(e.States={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return a(n,t),n.prototype.getWebgl1Parameters=function(){return[{constant:e.WebGlConstants.COLOR_CLEAR_VALUE,changeCommands:[\"clearColor\"]},{constant:e.WebGlConstants.DEPTH_CLEAR_VALUE,changeCommands:[\"clearDepth\"]},{constant:e.WebGlConstants.STENCIL_CLEAR_VALUE,changeCommands:[\"clearStencil\"]}]},n.prototype.getConsumeCommands=function(){return[\"clear\"]},n.prototype.isStateEnable=function(t,n){switch(t){case e.WebGlConstants.COLOR_CLEAR_VALUE.name:return e.WebGlConstants.COLOR_BUFFER_BIT.value===(n[0]&e.WebGlConstants.COLOR_BUFFER_BIT.value);case e.WebGlConstants.DEPTH_CLEAR_VALUE.name:return e.WebGlConstants.DEPTH_BUFFER_BIT.value===(n[0]&e.WebGlConstants.DEPTH_BUFFER_BIT.value);case e.WebGlConstants.STENCIL_CLEAR_VALUE.name:return e.WebGlConstants.STENCIL_BUFFER_BIT.value===(n[0]&e.WebGlConstants.STENCIL_BUFFER_BIT.value)}return!1},n}(t.ParameterState);n=r([e.Decorators.state(\"ClearState\")],n),t.ClearState=n}(e.States||(e.States={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(n){function r(){return null!==n&&n.apply(this,arguments)||this}return a(r,n),r.prototype.getWebgl1Parameters=function(){return[{constant:e.WebGlConstants.COLOR_WRITEMASK,changeCommands:[\"colorMask\"]}]},r.prototype.getConsumeCommands=function(){return t.drawCommands},r}(t.ParameterState);n=r([e.Decorators.state(\"ColorState\")],n),t.ColorState=n}(e.States||(e.States={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(n){function r(){return null!==n&&n.apply(this,arguments)||this}return a(r,n),r.prototype.getWebgl1Parameters=function(){return[{constant:e.WebGlConstants.SAMPLE_COVERAGE_VALUE,changeCommands:[\"sampleCoverage\"]},{constant:e.WebGlConstants.SAMPLE_COVERAGE_INVERT,changeCommands:[\"sampleCoverage\"]}]},r.prototype.getWebgl2Parameters=function(){return[{constant:e.WebGlConstants.SAMPLE_COVERAGE,changeCommands:[\"enable\",\"disable\"]},{constant:e.WebGlConstants.SAMPLE_ALPHA_TO_COVERAGE,changeCommands:[\"enable\",\"disable\"]}]},r.prototype.isValidChangeCommand=function(t,n){return\"enable\"!==t.name&&\"disable\"!==t.name||(t.commandArguments[0]===e.WebGlConstants.SAMPLE_COVERAGE.value?n===e.WebGlConstants.SAMPLE_COVERAGE.name:t.commandArguments[0]===e.WebGlConstants.SAMPLE_ALPHA_TO_COVERAGE.value&&n===e.WebGlConstants.SAMPLE_ALPHA_TO_COVERAGE.name)},r.prototype.getConsumeCommands=function(){return t.drawCommands},r.prototype.isStateEnable=function(t,n){return 2===this.contextVersion&&this.context.isEnabled(e.WebGlConstants.SAMPLE_COVERAGE.value)},r}(t.ParameterState);n=r([e.Decorators.state(\"CoverageState\")],n),t.CoverageState=n}(e.States||(e.States={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(n){function r(){return null!==n&&n.apply(this,arguments)||this}return a(r,n),r.prototype.getWebgl1Parameters=function(){return[{constant:e.WebGlConstants.CULL_FACE,changeCommands:[\"enable\",\"disable\"]},{constant:e.WebGlConstants.CULL_FACE_MODE,returnType:20,changeCommands:[\"cullFace\"]}]},r.prototype.getConsumeCommands=function(){return t.drawCommands},r.prototype.isValidChangeCommand=function(t,n){return\"enable\"!==t.name&&\"disable\"!==t.name||t.commandArguments[0]===e.WebGlConstants.CULL_FACE.value},r.prototype.isStateEnable=function(t,n){return this.context.isEnabled(e.WebGlConstants.CULL_FACE.value)},r}(t.ParameterState);n=r([e.Decorators.state(\"CullState\")],n),t.CullState=n}(e.States||(e.States={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(n){function r(){return null!==n&&n.apply(this,arguments)||this}return a(r,n),r.prototype.getWebgl1Parameters=function(){return[{constant:e.WebGlConstants.DEPTH_TEST,changeCommands:[\"enable\",\"disable\"]},{constant:e.WebGlConstants.DEPTH_FUNC,returnType:20,changeCommands:[\"depthFunc\"]},{constant:e.WebGlConstants.DEPTH_RANGE,changeCommands:[\"depthMask\"]},{constant:e.WebGlConstants.DEPTH_WRITEMASK,changeCommands:[\"depthRange\"]}]},r.prototype.getConsumeCommands=function(){return t.drawCommands},r.prototype.isValidChangeCommand=function(t,n){return\"enable\"!==t.name&&\"disable\"!==t.name||t.commandArguments[0]===e.WebGlConstants.DEPTH_TEST.value},r.prototype.isStateEnable=function(t,n){return this.context.isEnabled(e.WebGlConstants.DEPTH_TEST.value)},r}(t.ParameterState);n=r([e.Decorators.state(\"DepthState\")],n),t.DepthState=n}(e.States||(e.States={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(n){function r(){return null!==n&&n.apply(this,arguments)||this}return a(r,n),r.prototype.getWebgl1Parameters=function(){return[{constant:e.WebGlConstants.DITHER,changeCommands:[\"enable\",\"disable\"]},{constant:e.WebGlConstants.VIEWPORT,changeCommands:[\"viewPort\"]},{constant:e.WebGlConstants.FRONT_FACE,returnType:20,changeCommands:[\"frontFace\"]},{constant:e.WebGlConstants.FRAGMENT_SHADER_DERIVATIVE_HINT_OES,changeCommands:[\"hint\"]}]},r.prototype.getWebgl2Parameters=function(){return[{constant:e.WebGlConstants.RASTERIZER_DISCARD,changeCommands:[\"enable\",\"disable\"]},{constant:e.WebGlConstants.FRAGMENT_SHADER_DERIVATIVE_HINT,changeCommands:[\"hint\"]}]},r.prototype.isValidChangeCommand=function(t,n){return\"enable\"===t.name||\"disable\"===t.name?t.commandArguments[0]===e.WebGlConstants.DITHER.value?n===e.WebGlConstants.DITHER.name:t.commandArguments[0]===e.WebGlConstants.RASTERIZER_DISCARD.value&&n===e.WebGlConstants.RASTERIZER_DISCARD.name:\"hint\"!==t.name||(t.commandArguments[0]===e.WebGlConstants.FRAGMENT_SHADER_DERIVATIVE_HINT_OES.value?n===e.WebGlConstants.FRAGMENT_SHADER_DERIVATIVE_HINT_OES.name:t.commandArguments[0]===e.WebGlConstants.FRAGMENT_SHADER_DERIVATIVE_HINT.value&&n===e.WebGlConstants.FRAGMENT_SHADER_DERIVATIVE_HINT.name)},r.prototype.getConsumeCommands=function(){return t.drawCommands},r.prototype.isStateEnable=function(t,n){switch(t){case e.WebGlConstants.DITHER.name:return this.context.isEnabled(e.WebGlConstants.DITHER.value);case e.WebGlConstants.RASTERIZER_DISCARD.name:return this.context.isEnabled(e.WebGlConstants.RASTERIZER_DISCARD.value)}return!0},r}(t.ParameterState);n=r([e.Decorators.state(\"DrawState\")],n),t.DrawState=n}(e.States||(e.States={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return a(n,t),n.prototype.getWebgl1Parameters=function(){return[{constant:e.WebGlConstants.GENERATE_MIPMAP_HINT,changeCommands:[\"hint\"]}]},n.prototype.getConsumeCommands=function(){return[\"generateMipmap\"]},n}(t.ParameterState);n=r([e.Decorators.state(\"MipmapHintState\")],n),t.MipmapHintState=n}(e.States||(e.States={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(n){function r(){return null!==n&&n.apply(this,arguments)||this}return a(r,n),r.prototype.getWebgl1Parameters=function(){return[{constant:e.WebGlConstants.POLYGON_OFFSET_FILL,changeCommands:[\"enable\",\"disable\"]},{constant:e.WebGlConstants.POLYGON_OFFSET_FACTOR,changeCommands:[\"polygonOffset\"]},{constant:e.WebGlConstants.POLYGON_OFFSET_UNITS,changeCommands:[\"polygonOffset\"]}]},r.prototype.isValidChangeCommand=function(t,n){return\"enable\"!==t.name&&\"disable\"!==t.name||t.commandArguments[0]===e.WebGlConstants.POLYGON_OFFSET_FILL.value},r.prototype.getConsumeCommands=function(){return t.drawCommands},r.prototype.isStateEnable=function(t,n){return this.context.isEnabled(e.WebGlConstants.POLYGON_OFFSET_FILL.value)},r}(t.ParameterState);n=r([e.Decorators.state(\"PolygonOffsetState\")],n),t.PolygonOffsetState=n}(e.States||(e.States={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(n){function r(){return null!==n&&n.apply(this,arguments)||this}return a(r,n),r.prototype.getWebgl1Parameters=function(){return[{constant:e.WebGlConstants.SCISSOR_TEST,changeCommands:[\"enable\",\"disable\"]},{constant:e.WebGlConstants.SCISSOR_BOX,changeCommands:[\"scissor\"]}]},r.prototype.isValidChangeCommand=function(t,n){return\"enable\"!==t.name&&\"disable\"!==t.name||t.commandArguments[0]===e.WebGlConstants.SCISSOR_TEST.value},r.prototype.getConsumeCommands=function(){return t.drawCommands},r.prototype.isStateEnable=function(t,n){return this.context.isEnabled(e.WebGlConstants.SCISSOR_TEST.value)},r}(t.ParameterState);n=r([e.Decorators.state(\"ScissorState\")],n),t.ScissorState=n}(e.States||(e.States={}))}(n||(n={}));var n;!function(e){!function(t){var n=o=function(n){function r(){return null!==n&&n.apply(this,arguments)||this}return a(r,n),r.prototype.getWebgl1Parameters=function(){return[{constant:e.WebGlConstants.STENCIL_TEST,changeCommands:[\"enable\",\"disable\"]},{constant:e.WebGlConstants.STENCIL_BACK_FAIL,returnType:20,changeCommands:[\"stencilOp\",\"stencilOpSeparate\"]},{constant:e.WebGlConstants.STENCIL_BACK_FUNC,returnType:20,changeCommands:[\"stencilFunc\",\"stencilFuncSeparate\"]},{constant:e.WebGlConstants.STENCIL_BACK_PASS_DEPTH_FAIL,returnType:20,changeCommands:[\"stencilOp\",\"stencilOpSeparate\"]},{constant:e.WebGlConstants.STENCIL_BACK_PASS_DEPTH_PASS,returnType:20,changeCommands:[\"stencilOp\",\"stencilOpSeparate\"]},{constant:e.WebGlConstants.STENCIL_BACK_REF,changeCommands:[\"stencilFunc\",\"stencilFuncSeparate\"]},{constant:e.WebGlConstants.STENCIL_BACK_VALUE_MASK,returnType:30,changeCommands:[\"stencilFunc\",\"stencilFuncSeparate\"]},{constant:e.WebGlConstants.STENCIL_BACK_WRITEMASK,returnType:30,changeCommands:[\"stencilMask\",\"stencilMaskSeparate\"]},{constant:e.WebGlConstants.STENCIL_FAIL,returnType:20,changeCommands:[\"stencilOp\",\"stencilOpSeparate\"]},{constant:e.WebGlConstants.STENCIL_FUNC,returnType:20,changeCommands:[\"stencilFunc\",\"stencilFuncSeparate\"]},{constant:e.WebGlConstants.STENCIL_PASS_DEPTH_FAIL,returnType:20,changeCommands:[\"stencilOp\",\"stencilOpSeparate\"]},{constant:e.WebGlConstants.STENCIL_PASS_DEPTH_PASS,returnType:20,changeCommands:[\"stencilOp\",\"stencilOpSeparate\"]},{constant:e.WebGlConstants.STENCIL_REF,changeCommands:[\"stencilFunc\",\"stencilFuncSeparate\"]},{constant:e.WebGlConstants.STENCIL_VALUE_MASK,returnType:30,changeCommands:[\"stencilFunc\",\"stencilFuncSeparate\"]},{constant:e.WebGlConstants.STENCIL_WRITEMASK,returnType:30,changeCommands:[\"stencilMask\",\"stencilMaskSeparate\"]}]},r.prototype.isValidChangeCommand=function(t,n){return\"enable\"===t.name||\"disable\"===t.name?t.commandArguments[0]===e.WebGlConstants.STENCIL_TEST.value:\"stencilOp\"===t.name||\"stencilOpSeparate\"===t.name?o.stencilOpStates.indexOf(t.commandArguments[0])>0:\"stencilFunc\"===t.name||\"stencilFuncSeparate\"===t.name?o.stencilFuncStates.indexOf(t.commandArguments[0])>0:\"stencilMask\"!==t.name&&\"stencilMaskSeparate\"!==t.name||o.stencilMaskStates.indexOf(t.commandArguments[0])>0},r.prototype.getConsumeCommands=function(){return t.drawCommands},r.prototype.isStateEnable=function(t,n){return this.context.isEnabled(e.WebGlConstants.STENCIL_TEST.value)},r}(t.ParameterState);n.stencilOpStates=[e.WebGlConstants.STENCIL_BACK_FAIL.value,e.WebGlConstants.STENCIL_BACK_PASS_DEPTH_FAIL.value,e.WebGlConstants.STENCIL_BACK_PASS_DEPTH_PASS.value,e.WebGlConstants.STENCIL_FAIL.value,e.WebGlConstants.STENCIL_PASS_DEPTH_FAIL.value,e.WebGlConstants.STENCIL_PASS_DEPTH_PASS.value],n.stencilFuncStates=[e.WebGlConstants.STENCIL_BACK_FUNC.value,e.WebGlConstants.STENCIL_BACK_REF.value,e.WebGlConstants.STENCIL_BACK_VALUE_MASK.value,e.WebGlConstants.STENCIL_FUNC.value,e.WebGlConstants.STENCIL_REF.value,e.WebGlConstants.STENCIL_VALUE_MASK.value],n.stencilMaskStates=[e.WebGlConstants.STENCIL_BACK_WRITEMASK.value,e.WebGlConstants.STENCIL_WRITEMASK.value],n=o=r([e.Decorators.state(\"StencilState\")],n),t.StencilState=n;var o}(e.States||(e.States={}))}(n||(n={}));var n;!function(e){!function(t){var n=o=function(n){function r(e,t){var a=n.call(this,e,t)||this;return a.captureFrameBuffer=e.context.createFramebuffer(),a.workingCanvas=document.createElement(\"canvas\"),a.workingContext2D=a.workingCanvas.getContext(\"2d\"),a.captureCanvas=document.createElement(\"canvas\"),a.captureContext2D=a.captureCanvas.getContext(\"2d\"),a.captureContext2D.imageSmoothingEnabled=!0,a.captureContext2D.mozImageSmoothingEnabled=!0,a.captureContext2D.oImageSmoothingEnabled=!0,a.captureContext2D.webkitImageSmoothingEnabled=!0,a.captureContext2D.msImageSmoothingEnabled=!0,a}return a(r,n),r.prototype.getConsumeCommands=function(){return[\"clear\",\"clearBufferfv\",\"clearBufferiv\",\"clearBufferuiv\",\"clearBufferfi\"].concat(t.drawCommands)},r.prototype.readFromContext=function(){var t=this.context;this.currentState.Attachments=[];var n=this.context.getParameter(e.WebGlConstants.FRAMEBUFFER_BINDING.value);if(!n)return this.currentState.FrameBuffer=null,void this.getCapture(t,\"Canvas COLOR_ATTACHMENT\",0,0,t.drawingBufferWidth,t.drawingBufferHeight,0,0,e.WebGlConstants.UNSIGNED_BYTE.value);var a=t.getParameter(t.VIEWPORT),r=a[0],o=a[1],i=a[2],s=a[3];this.currentState.FrameBuffer=this.getSpectorData(n);var u=this.context.checkFramebufferStatus(e.WebGlConstants.FRAMEBUFFER.value);if(this.currentState.FrameBufferStatus=e.WebGlConstantsByValue[u].name,u===e.WebGlConstants.FRAMEBUFFER_COMPLETE.value){if(this.extensions[e.WebGlConstants.MAX_DRAW_BUFFERS_WEBGL.extensionName])for(var l=this.context.getParameter(e.WebGlConstants.MAX_DRAW_BUFFERS_WEBGL.value),c=0;c<l;c++)this.readFrameBufferAttachmentFromContext(this.context,n,e.WebGlConstantsByName[\"COLOR_ATTACHMENT\"+c+\"_WEBGL\"],r,o,i,s);else if(this.contextVersion>1)for(var m=this.context,l=m.getParameter(e.WebGlConstants.MAX_DRAW_BUFFERS.value),c=0;c<l;c++)this.readFrameBufferAttachmentFromContext(this.context,n,e.WebGlConstantsByName[\"COLOR_ATTACHMENT\"+c],r,o,i,s);else this.readFrameBufferAttachmentFromContext(this.context,n,e.WebGlConstantsByName.COLOR_ATTACHMENT0,r,o,i,s)}},r.prototype.readFrameBufferAttachmentFromContext=function(t,n,a,r,o,i,s){var u=e.WebGlConstants.FRAMEBUFFER.value,l=this.context.getFramebufferAttachmentParameter(u,a.value,e.WebGlConstants.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE.value);if(l!==e.WebGlConstants.NONE.value){var c=this.context.getFramebufferAttachmentParameter(u,a.value,e.WebGlConstants.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME.value);if(c){var m=this.contextVersion>1?this.context.getFramebufferAttachmentParameter(u,a.value,e.WebGlConstants.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE.value):e.WebGlConstants.UNSIGNED_BYTE.value;if(l===e.WebGlConstants.RENDERBUFFER.value){if(t.bindFramebuffer(e.WebGlConstants.FRAMEBUFFER.value,this.captureFrameBuffer),t.framebufferRenderbuffer(e.WebGlConstants.FRAMEBUFFER.value,e.WebGlConstants.COLOR_ATTACHMENT0.value,e.WebGlConstants.RENDERBUFFER.value,c),c.__SPECTOR_Object_CustomData){var d=c.__SPECTOR_Object_CustomData;if(i=d.width,s=d.height,!e.ReadPixelsHelper.isSupportedCombination(m,e.WebGlConstants.RGBA.value,d.internalFormat))return}this.getCapture(t,a.name,r,o,i,s,0,0,m),t.bindFramebuffer(e.WebGlConstants.FRAMEBUFFER.value,n)}else if(l===e.WebGlConstants.TEXTURE.value){var p=0;this.contextVersion>1&&(p=this.context.getFramebufferAttachmentParameter(u,a.value,e.WebGlConstants.FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER.value));var E=this.context.getFramebufferAttachmentParameter(u,a.value,e.WebGlConstants.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL.value),C=this.context.getFramebufferAttachmentParameter(u,a.value,e.WebGlConstants.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE.value),_=(C>0?e.WebGlConstantsByValue[C].name:e.WebGlConstants.TEXTURE_2D.name,m);if(c.__SPECTOR_Object_CustomData){var d=c.__SPECTOR_Object_CustomData;if(i=d.width,s=d.height,_=d.type,!e.ReadPixelsHelper.isSupportedCombination(d.type,d.format,d.internalFormat))return}t.bindFramebuffer(e.WebGlConstants.FRAMEBUFFER.value,this.captureFrameBuffer),0===p?t.framebufferTexture2D(e.WebGlConstants.FRAMEBUFFER.value,e.WebGlConstants.COLOR_ATTACHMENT0.value,C||e.WebGlConstants.TEXTURE_2D.value,c,E):t.framebufferTextureLayer(e.WebGlConstants.FRAMEBUFFER.value,e.WebGlConstants.COLOR_ATTACHMENT0.value,c,E,p);var h=this.context.checkFramebufferStatus(e.WebGlConstants.FRAMEBUFFER.value);h===e.WebGlConstants.FRAMEBUFFER_COMPLETE.value&&this.getCapture(t,a.name,r,o,i,s,C,p,_),t.bindFramebuffer(e.WebGlConstants.FRAMEBUFFER.value,n)}}}},r.prototype.getCapture=function(t,n,a,r,i,s,u,l,c){var m={attachmentName:n,src:null,textureCubeMapFace:u?e.WebGlConstantsByValue[u].name:null,textureLayer:l};try{var d=e.ReadPixelsHelper.readPixels(t,a,r,i,s,c);if(d){this.workingCanvas.width=i,this.workingCanvas.height=s;var p=this.workingContext2D.createImageData(i,s);p.data.set(d),this.workingContext2D.putImageData(p,0,0);var E=i/s;E<1?(this.captureCanvas.width=o.captureBaseSize*E,this.captureCanvas.height=o.captureBaseSize):E>1?(this.captureCanvas.width=o.captureBaseSize,this.captureCanvas.height=o.captureBaseSize/E):(this.captureCanvas.width=o.captureBaseSize,this.captureCanvas.height=o.captureBaseSize),this.captureCanvas.width=Math.max(this.captureCanvas.width,1),this.captureCanvas.height=Math.max(this.captureCanvas.height,1),this.captureContext2D.globalCompositeOperation=\"copy\",this.captureContext2D.scale(1,-1),this.captureContext2D.translate(0,-this.captureCanvas.height),this.captureContext2D.drawImage(this.workingCanvas,0,0,i,s,0,0,this.captureCanvas.width,this.captureCanvas.height),this.captureContext2D.setTransform(1,0,0,1,0,0),this.captureContext2D.globalCompositeOperation=\"source-over\",m.src=this.captureCanvas.toDataURL()}}catch(e){}this.currentState.Attachments.push(m)},r.prototype.analyse=function(e){},r}(t.BaseState);n.captureBaseSize=256,n=o=r([e.Decorators.state(\"VisualState\")],n),t.VisualState=n;var o}(e.States||(e.States={}))}(n||(n={}));var n;!function(e){!function(t){var n=o=function(n){function r(e,a){var r=n.call(this,e,a)||this;return r.drawCallTextureInputState=new t.DrawCallTextureInputState(e,a),r.drawCallUboInputState=new t.DrawCallUboInputState(e,a),r}return a(r,n),Object.defineProperty(r.prototype,\"requireStartAndStopStates\",{get:function(){return!1},enumerable:!0,configurable:!0}),r.prototype.getConsumeCommands=function(){return t.drawCommands},r.prototype.getChangeCommandsByState=function(){return{}},r.prototype.readFromContext=function(){var t=this.context.getParameter(e.WebGlConstants.CURRENT_PROGRAM.value);if(t){this.currentState.frameBuffer=this.readFrameBufferFromContext(),this.currentState.programStatus={program:this.getSpectorData(t),DELETE_STATUS:this.context.getProgramParameter(t,e.WebGlConstants.DELETE_STATUS.value),LINK_STATUS:this.context.getProgramParameter(t,e.WebGlConstants.LINK_STATUS.value),VALIDATE_STATUS:this.context.getProgramParameter(t,e.WebGlConstants.VALIDATE_STATUS.value)};var n=this.context.getAttachedShaders(t);this.currentState.shaders=[];for(var a=0,r=n;a<r.length;a++){var i=r[a],s=this.readShaderFromContext(i);this.currentState.shaders.push(s)}var u=this.context.getProgramParameter(t,e.WebGlConstants.ACTIVE_ATTRIBUTES.value);this.currentState.attributes=[];for(var l=0;l<u;l++){var c=this.readAttributeFromContext(t,l);this.currentState.attributes.push(c)}var m=this.context.getProgramParameter(t,e.WebGlConstants.ACTIVE_UNIFORMS.value);this.currentState.uniforms=[];for(var d=[],l=0;l<m;l++){d.push(l);var p=this.readUniformFromContext(t,l);this.currentState.uniforms.push(p)}if(this.contextVersion>1){this.readUniformsFromContextIntoState(t,d,this.currentState.uniforms);var E=this.context.getProgramParameter(t,e.WebGlConstants.ACTIVE_UNIFORM_BLOCKS.value);this.currentState.uniformBlocks=[];for(var l=0;l<E;l++){var C=this.readUniformBlockFromContext(t,l);this.currentState.uniformBlocks.push(C)}if(this.context.getParameter(e.WebGlConstants.TRANSFORM_FEEDBACK_ACTIVE.value)){var _=this.context.getProgramParameter(t,e.WebGlConstants.TRANSFORM_FEEDBACK_BUFFER_MODE.value);this.currentState.transformFeedbackMode=this.getWebGlConstant(_),this.currentState.transformFeedbacks=[];for(var h=this.context.getProgramParameter(t,e.WebGlConstants.TRANSFORM_FEEDBACK_VARYINGS.value),l=0;l<h;l++){var f=this.readTransformFeedbackFromContext(t,l);this.currentState.transformFeedbacks.push(f)}}}for(var l=0;l<d.length;l++){var p=this.currentState.uniforms[l];if(null!==p.value&&void 0!==p.value){var T=o.samplerTypes[p.typeValue];if(T)if(p.value.length){p.textures=[];for(var v=0;v<p.value.length;v++)p.textures.push(this.readTextureFromContext(p.value[v],T))}else p.texture=this.readTextureFromContext(p.value,T)}delete p.typeValue}}},r.prototype.readFrameBufferFromContext=function(){var t=this.context.getParameter(e.WebGlConstants.FRAMEBUFFER_BINDING.value);if(!t)return null;var n={};if(n.frameBuffer=this.getSpectorData(t),this.readFrameBufferAttachmentFromContext(e.WebGlConstants.DEPTH_ATTACHMENT.value)&&(n.depthAttachment=this.readFrameBufferAttachmentFromContext(e.WebGlConstants.DEPTH_ATTACHMENT.value)),this.readFrameBufferAttachmentFromContext(e.WebGlConstants.STENCIL_ATTACHMENT.value)&&(n.stencilAttachment=this.readFrameBufferAttachmentFromContext(e.WebGlConstants.STENCIL_ATTACHMENT.value)),this.extensions[e.WebGlConstants.MAX_DRAW_BUFFERS_WEBGL.extensionName]){n.colorAttachments=[];for(var a=this.context.getParameter(e.WebGlConstants.MAX_DRAW_BUFFERS_WEBGL.value),r=0;r<a;r++){var o=this.readFrameBufferAttachmentFromContext(e.WebGlConstantsByName[\"COLOR_ATTACHMENT\"+r+\"_WEBGL\"].value);o&&n.colorAttachments.push(o)}}else if(this.contextVersion>1){var i=this.context;n.colorAttachments=[];for(var a=i.getParameter(e.WebGlConstants.MAX_DRAW_BUFFERS.value),r=0;r<a;r++){var o=this.readFrameBufferAttachmentFromContext(e.WebGlConstantsByName[\"COLOR_ATTACHMENT\"+r].value);o&&n.colorAttachments.push(o)}}else{var o=this.readFrameBufferAttachmentFromContext(e.WebGlConstantsByName.COLOR_ATTACHMENT0.value);o&&(n.colorAttachments=[o])}return n},r.prototype.readFrameBufferAttachmentFromContext=function(t){var n=e.WebGlConstants.FRAMEBUFFER.value,a=this.context.getFramebufferAttachmentParameter(n,t,e.WebGlConstants.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE.value);if(a!==e.WebGlConstants.NONE.value){var r={},o=this.context.getFramebufferAttachmentParameter(n,t,e.WebGlConstants.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME.value);if(a===e.WebGlConstants.RENDERBUFFER.value){if(r.type=\"RENDERBUFFER\",r.buffer=this.getSpectorData(o),o){var i=o.__SPECTOR_Object_CustomData;i&&(i.internalFormat&&(r.internalFormat=this.getWebGlConstant(i.internalFormat)),r.width=i.width,r.height=i.height)}}else if(a===e.WebGlConstants.TEXTURE.value){r.type=\"TEXTURE\",r.texture=this.getSpectorData(o),r.textureLevel=this.context.getFramebufferAttachmentParameter(n,t,e.WebGlConstants.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL.value);var s=this.context.getFramebufferAttachmentParameter(n,t,e.WebGlConstants.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE.value);r.textureCubeMapFace=this.getWebGlConstant(s),this.drawCallTextureInputState.appendTextureState(r,o)}return this.extensions.EXT_sRGB&&(r.encoding=this.getWebGlConstant(this.context.getFramebufferAttachmentParameter(n,t,e.WebGlConstants.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT.value))),this.contextVersion>1&&(r.alphaSize=this.context.getFramebufferAttachmentParameter(n,t,e.WebGlConstants.FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE.value),r.blueSize=this.context.getFramebufferAttachmentParameter(n,t,e.WebGlConstants.FRAMEBUFFER_ATTACHMENT_BLUE_SIZE.value),r.encoding=this.getWebGlConstant(this.context.getFramebufferAttachmentParameter(n,t,e.WebGlConstants.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING.value)),r.componentType=this.getWebGlConstant(this.context.getFramebufferAttachmentParameter(n,t,e.WebGlConstants.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE.value)),r.depthSize=this.context.getFramebufferAttachmentParameter(n,t,e.WebGlConstants.FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE.value),r.greenSize=this.context.getFramebufferAttachmentParameter(n,t,e.WebGlConstants.FRAMEBUFFER_ATTACHMENT_GREEN_SIZE.value),r.redSize=this.context.getFramebufferAttachmentParameter(n,t,e.WebGlConstants.FRAMEBUFFER_ATTACHMENT_RED_SIZE.value),r.stencilSize=this.context.getFramebufferAttachmentParameter(n,t,e.WebGlConstants.FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE.value),a===e.WebGlConstants.TEXTURE.value&&(r.textureLayer=this.context.getFramebufferAttachmentParameter(n,t,e.WebGlConstants.FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER.value))),r}},r.prototype.readShaderFromContext=function(t){return{shader:this.getSpectorData(t),COMPILE_STATUS:this.context.getShaderParameter(t,e.WebGlConstants.COMPILE_STATUS.value),DELETE_STATUS:this.context.getShaderParameter(t,e.WebGlConstants.DELETE_STATUS.value),SHADER_TYPE:this.getWebGlConstant(this.context.getShaderParameter(t,e.WebGlConstants.SHADER_TYPE.value)),source:this.context.getShaderSource(t)}},r.prototype.readAttributeFromContext=function(t,n){var a=this.context.getActiveAttrib(t,n),r=this.context.getAttribLocation(t,a.name);if(-1===r)return{name:a.name,size:a.size,type:this.getWebGlConstant(a.type),location:-1};var o=this.context.getVertexAttrib(r,e.WebGlConstants.CURRENT_VERTEX_ATTRIB.value),i=this.context.getVertexAttrib(r,e.WebGlConstants.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING.value),s={name:a.name,size:a.size,type:this.getWebGlConstant(a.type),location:r,offsetPointer:this.context.getVertexAttribOffset(r,e.WebGlConstants.VERTEX_ATTRIB_ARRAY_POINTER.value),bufferBinding:this.getSpectorData(i),enabled:this.context.getVertexAttrib(r,e.WebGlConstants.VERTEX_ATTRIB_ARRAY_ENABLED.value),arraySize:this.context.getVertexAttrib(r,e.WebGlConstants.VERTEX_ATTRIB_ARRAY_SIZE.value),stride:this.context.getVertexAttrib(r,e.WebGlConstants.VERTEX_ATTRIB_ARRAY_STRIDE.value),arrayType:this.getWebGlConstant(this.context.getVertexAttrib(r,e.WebGlConstants.VERTEX_ATTRIB_ARRAY_TYPE.value)),normalized:this.context.getVertexAttrib(r,e.WebGlConstants.VERTEX_ATTRIB_ARRAY_NORMALIZED.value),vertexAttrib:Array.prototype.slice.call(o)};return this.extensions[e.WebGlConstants.VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE.extensionName]?s.divisor=this.context.getVertexAttrib(r,e.WebGlConstants.VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE.value):this.contextVersion>1&&(s.integer=this.context.getVertexAttrib(r,e.WebGlConstants.VERTEX_ATTRIB_ARRAY_INTEGER.value),s.divisor=this.context.getVertexAttrib(r,e.WebGlConstants.VERTEX_ATTRIB_ARRAY_DIVISOR.value)),this.appendBufferCustomData(s,i),s},r.prototype.readUniformFromContext=function(e,t){var n=this.context.getActiveUniform(e,t),a=this.context.getUniformLocation(e,n.name);if(a){var r=this.context.getUniform(e,a);r.length&&(r=Array.prototype.slice.call(r));var o={name:n.name,size:n.size,type:this.getWebGlConstant(n.type),typeValue:n.type,location:this.getSpectorData(a),value:r};return o}var o={name:n.name,size:n.size,type:this.getWebGlConstant(n.type),typeValue:n.type};return o},r.prototype.readTextureFromContext=function(t,n){var a=this.context.getParameter(e.WebGlConstants.ACTIVE_TEXTURE.value);this.context.activeTexture(e.WebGlConstants.TEXTURE0.value+t);var r={magFilter:this.getWebGlConstant(this.context.getTexParameter(n.value,e.WebGlConstants.TEXTURE_MAG_FILTER.value)),minFilter:this.getWebGlConstant(this.context.getTexParameter(n.value,e.WebGlConstants.TEXTURE_MIN_FILTER.value)),wrapS:this.getWebGlConstant(this.context.getTexParameter(n.value,e.WebGlConstants.TEXTURE_WRAP_S.value)),wrapT:this.getWebGlConstant(this.context.getTexParameter(n.value,e.WebGlConstants.TEXTURE_WRAP_T.value))};if(this.extensions[e.WebGlConstants.TEXTURE_MAX_ANISOTROPY_EXT.extensionName]&&(r.anisotropy=this.context.getTexParameter(n.value,e.WebGlConstants.TEXTURE_MAX_ANISOTROPY_EXT.value)),this.contextVersion>1){r.baseLevel=this.context.getTexParameter(n.value,e.WebGlConstants.TEXTURE_BASE_LEVEL.value),r.immutable=this.context.getTexParameter(n.value,e.WebGlConstants.TEXTURE_IMMUTABLE_FORMAT.value),r.immutableLevels=this.context.getTexParameter(n.value,e.WebGlConstants.TEXTURE_IMMUTABLE_LEVELS.value),r.maxLevel=this.context.getTexParameter(n.value,e.WebGlConstants.TEXTURE_IMMUTABLE_LEVELS.value);var o=this.context.getParameter(e.WebGlConstants.SAMPLER_BINDING.value);if(o){r.sampler=this.getSpectorData(o);var i=this.context;r.samplerMaxLod=i.getSamplerParameter(o,e.WebGlConstants.TEXTURE_IMMUTABLE_LEVELS.value),r.samplerMinLod=i.getSamplerParameter(o,e.WebGlConstants.TEXTURE_IMMUTABLE_LEVELS.value),r.samplerCompareFunc=this.getWebGlConstant(i.getSamplerParameter(o,e.WebGlConstants.TEXTURE_COMPARE_FUNC.value)),r.samplerCompareMode=this.getWebGlConstant(i.getSamplerParameter(o,e.WebGlConstants.TEXTURE_COMPARE_MODE.value)),r.samplerWrapS=this.getWebGlConstant(i.getSamplerParameter(o,e.WebGlConstants.TEXTURE_WRAP_S.value)),r.samplerWrapT=this.getWebGlConstant(i.getSamplerParameter(o,e.WebGlConstants.TEXTURE_WRAP_T.value)),r.samplerWrapR=this.getWebGlConstant(i.getSamplerParameter(o,e.WebGlConstants.TEXTURE_IMMUTABLE_LEVELS.value)),r.samplerMagFilter=this.getWebGlConstant(i.getSamplerParameter(o,e.WebGlConstants.TEXTURE_MAG_FILTER.value)),r.samplerMinFilter=this.getWebGlConstant(i.getSamplerParameter(o,e.WebGlConstants.TEXTURE_MIN_FILTER.value))}else r.maxLod=this.context.getTexParameter(n.value,e.WebGlConstants.TEXTURE_IMMUTABLE_LEVELS.value),r.minLod=this.context.getTexParameter(n.value,e.WebGlConstants.TEXTURE_IMMUTABLE_LEVELS.value),r.compareFunc=this.getWebGlConstant(this.context.getTexParameter(n.value,e.WebGlConstants.TEXTURE_COMPARE_FUNC.value)),r.compareMode=this.getWebGlConstant(this.context.getTexParameter(n.value,e.WebGlConstants.TEXTURE_COMPARE_MODE.value)),r.wrapR=this.getWebGlConstant(this.context.getTexParameter(n.value,e.WebGlConstants.TEXTURE_IMMUTABLE_LEVELS.value))}var s=this.getTextureStorage(n);return s&&this.drawCallTextureInputState.appendTextureState(r,s,n),this.context.activeTexture(a),r},r.prototype.getTextureStorage=function(t){return t===e.WebGlConstants.TEXTURE_2D?this.context.getParameter(e.WebGlConstants.TEXTURE_BINDING_2D.value):t===e.WebGlConstants.TEXTURE_CUBE_MAP?this.context.getParameter(e.WebGlConstants.TEXTURE_BINDING_CUBE_MAP.value):t===e.WebGlConstants.TEXTURE_3D?this.context.getParameter(e.WebGlConstants.TEXTURE_BINDING_3D.value):t===e.WebGlConstants.TEXTURE_2D_ARRAY?this.context.getParameter(e.WebGlConstants.TEXTURE_BINDING_2D_ARRAY.value):void 0},r.prototype.readUniformsFromContextIntoState=function(t,n,a){for(var r=this.context,o=r.getActiveUniforms(t,n,e.WebGlConstants.UNIFORM_TYPE.value),i=r.getActiveUniforms(t,n,e.WebGlConstants.UNIFORM_SIZE.value),s=r.getActiveUniforms(t,n,e.WebGlConstants.UNIFORM_BLOCK_INDEX.value),u=r.getActiveUniforms(t,n,e.WebGlConstants.UNIFORM_OFFSET.value),l=r.getActiveUniforms(t,n,e.WebGlConstants.UNIFORM_ARRAY_STRIDE.value),c=r.getActiveUniforms(t,n,e.WebGlConstants.UNIFORM_MATRIX_STRIDE.value),m=r.getActiveUniforms(t,n,e.WebGlConstants.UNIFORM_IS_ROW_MAJOR.value),d=0;d<n.length;d++){var p=a[d];p.type=this.getWebGlConstant(o[d]),p.size=i[d],p.blockIndice=s[d],p.blockIndice>-1&&(p.blockName=r.getActiveUniformBlockName(t,p.blockIndice)),p.offset=u[d],p.arrayStride=l[d],p.matrixStride=c[d],p.rowMajor=m[d],p.blockIndice>-1&&(p.value=this.drawCallUboInputState.getUboValue(s[d],p.offset,p.size,o[d]))}},r.prototype.readTransformFeedbackFromContext=function(t,n){var a=this.context,r=a.getTransformFeedbackVarying(t,n),o=a.getIndexedParameter(e.WebGlConstants.TRANSFORM_FEEDBACK_BUFFER_BINDING.value,n),i={name:r.name,size:r.size,type:this.getWebGlConstant(r.type),buffer:this.getSpectorData(o),bufferSize:a.getIndexedParameter(e.WebGlConstants.TRANSFORM_FEEDBACK_BUFFER_SIZE.value,n),bufferStart:a.getIndexedParameter(e.WebGlConstants.TRANSFORM_FEEDBACK_BUFFER_START.value,n)};return this.appendBufferCustomData(i,o),i},r.prototype.readUniformBlockFromContext=function(t,n){var a=this.context,r=a.getActiveUniformBlockParameter(t,n,e.WebGlConstants.UNIFORM_BLOCK_BINDING.value),o=a.getIndexedParameter(e.WebGlConstants.UNIFORM_BUFFER_BINDING.value,r),i={name:a.getActiveUniformBlockName(t,n),bindingPoint:r,size:a.getActiveUniformBlockParameter(t,n,e.WebGlConstants.UNIFORM_BLOCK_DATA_SIZE.value),activeUniformCount:a.getActiveUniformBlockParameter(t,n,e.WebGlConstants.UNIFORM_BLOCK_ACTIVE_UNIFORMS.value),vertex:a.getActiveUniformBlockParameter(t,n,e.WebGlConstants.UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER.value),fragment:a.getActiveUniformBlockParameter(t,n,e.WebGlConstants.UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER.value),buffer:this.getSpectorData(o)};return this.appendBufferCustomData(i,o),i},r.prototype.appendBufferCustomData=function(e,t){if(t){var n=t.__SPECTOR_Object_CustomData;n&&(n.usage&&(e.bufferUsage=this.getWebGlConstant(n.usage)),e.bufferLength=n.length,n.offset&&(e.bufferOffset=n.offset),n.sourceLength&&(e.bufferSourceLength=n.sourceLength))}},r.prototype.getWebGlConstant=function(t){var n=e.WebGlConstantsByValue[t];return n?n.name:t},r}(t.BaseState);n.samplerTypes=(i={},i[e.WebGlConstants.SAMPLER_2D.value]=e.WebGlConstants.TEXTURE_2D,i[e.WebGlConstants.SAMPLER_CUBE.value]=e.WebGlConstants.TEXTURE_CUBE_MAP,i[e.WebGlConstants.SAMPLER_3D.value]=e.WebGlConstants.TEXTURE_3D,i[e.WebGlConstants.SAMPLER_2D_SHADOW.value]=e.WebGlConstants.TEXTURE_2D,i[e.WebGlConstants.SAMPLER_2D_ARRAY.value]=e.WebGlConstants.TEXTURE_2D_ARRAY,i[e.WebGlConstants.SAMPLER_2D_ARRAY_SHADOW.value]=e.WebGlConstants.TEXTURE_2D_ARRAY,i[e.WebGlConstants.SAMPLER_CUBE_SHADOW.value]=e.WebGlConstants.TEXTURE_CUBE_MAP,i[e.WebGlConstants.INT_SAMPLER_2D.value]=e.WebGlConstants.TEXTURE_2D,i[e.WebGlConstants.INT_SAMPLER_3D.value]=e.WebGlConstants.TEXTURE_3D,i[e.WebGlConstants.INT_SAMPLER_CUBE.value]=e.WebGlConstants.TEXTURE_CUBE_MAP,i[e.WebGlConstants.INT_SAMPLER_2D_ARRAY.value]=e.WebGlConstants.TEXTURE_2D_ARRAY,i[e.WebGlConstants.UNSIGNED_INT_SAMPLER_2D.value]=e.WebGlConstants.TEXTURE_2D,i[e.WebGlConstants.UNSIGNED_INT_SAMPLER_3D.value]=e.WebGlConstants.TEXTURE_3D,i[e.WebGlConstants.UNSIGNED_INT_SAMPLER_CUBE.value]=e.WebGlConstants.TEXTURE_CUBE_MAP,i[e.WebGlConstants.UNSIGNED_INT_SAMPLER_2D_ARRAY.value]=e.WebGlConstants.TEXTURE_2D_ARRAY,i),n=o=r([e.Decorators.state(\"DrawCall\")],n),t.DrawCallState=n;var o,i}(e.States||(e.States={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(){function n(e,t){this.logger=t,this.context=e.context,this.captureFrameBuffer=e.context.createFramebuffer(),this.workingCanvas=document.createElement(\"canvas\"),this.workingContext2D=this.workingCanvas.getContext(\"2d\"),this.captureCanvas=document.createElement(\"canvas\"),this.captureContext2D=this.captureCanvas.getContext(\"2d\"),this.captureContext2D.imageSmoothingEnabled=!0,this.captureContext2D.mozImageSmoothingEnabled=!0,this.captureContext2D.oImageSmoothingEnabled=!0,this.captureContext2D.webkitImageSmoothingEnabled=!0,this.captureContext2D.msImageSmoothingEnabled=!0}return n.prototype.appendTextureState=function(e,t,n){if(void 0===n&&(n=null),t){var a=t.__SPECTOR_Object_CustomData;a&&(a.type&&(e.type=this.getWebGlConstant(a.type)),a.format&&(e.format=this.getWebGlConstant(a.format)),a.internalFormat&&(e.internalFormat=this.getWebGlConstant(a.internalFormat)),e.width=a.width,e.height=a.height,a.depth&&(e.depth=a.depth),n&&(e.visual=this.getTextureVisualState(n,t,a)))}},n.prototype.getTextureVisualState=function(t,a,r){try{var o=this.context,i={};if(!e.ReadPixelsHelper.isSupportedCombination(r.type,r.format,r.internalFormat))return i;var s=this.context.getParameter(e.WebGlConstants.FRAMEBUFFER_BINDING.value);o.bindFramebuffer(e.WebGlConstants.FRAMEBUFFER.value,this.captureFrameBuffer);try{var u=r.width,l=r.height;if(t===e.WebGlConstants.TEXTURE_3D&&r.depth)for(var c=o,m=0;m<r.depth;m++)m>2&&m<r.depth-3||(c.framebufferTextureLayer(e.WebGlConstants.FRAMEBUFFER.value,e.WebGlConstants.COLOR_ATTACHMENT0.value,a,0,m),i[\"3D Layer \"+m]=this.getCapture(o,0,0,u,l,r.type));else if(t===e.WebGlConstants.TEXTURE_2D_ARRAY&&r.depth)for(var c=o,m=0;m<r.depth;m++)m>2&&m<r.depth-3||(c.framebufferTextureLayer(e.WebGlConstants.FRAMEBUFFER.value,e.WebGlConstants.COLOR_ATTACHMENT0.value,a,0,m),i[\"Layer \"+m]=this.getCapture(o,0,0,u,l,r.type));else if(t===e.WebGlConstants.TEXTURE_CUBE_MAP)for(var d=0,p=n.cubeMapFaces;d<p.length;d++){var E=p[d];o.framebufferTexture2D(e.WebGlConstants.FRAMEBUFFER.value,e.WebGlConstants.COLOR_ATTACHMENT0.value,E.value,a,0),i[E.name]=this.getCapture(o,0,0,u,l,r.type)}else o.framebufferTexture2D(e.WebGlConstants.FRAMEBUFFER.value,e.WebGlConstants.COLOR_ATTACHMENT0.value,e.WebGlConstants.TEXTURE_2D.value,a,0),i[e.WebGlConstants.TEXTURE_2D.name]=this.getCapture(o,0,0,u,l,r.type)}catch(e){}return o.bindFramebuffer(e.WebGlConstants.FRAMEBUFFER.value,s),i}catch(e){}},n.prototype.getCapture=function(n,a,r,o,i,s){try{if(this.context.checkFramebufferStatus(e.WebGlConstants.FRAMEBUFFER.value)!==e.WebGlConstants.FRAMEBUFFER_COMPLETE.value)return;s=s||e.WebGlConstants.UNSIGNED_BYTE.value;var u=e.ReadPixelsHelper.readPixels(n,a,r,o,i,s);if(!u)return;this.workingCanvas.width=o,this.workingCanvas.height=i;var l=this.workingContext2D.createImageData(o,i);l.data.set(u),this.workingContext2D.putImageData(l,0,0);var c=o/i;c<1?(this.captureCanvas.width=t.VisualState.captureBaseSize*c,this.captureCanvas.height=t.VisualState.captureBaseSize):c>1?(this.captureCanvas.width=t.VisualState.captureBaseSize,this.captureCanvas.height=t.VisualState.captureBaseSize/c):(this.captureCanvas.width=t.VisualState.captureBaseSize,this.captureCanvas.height=t.VisualState.captureBaseSize),this.captureCanvas.width=Math.max(this.captureCanvas.width,1),this.captureCanvas.height=Math.max(this.captureCanvas.height,1),this.captureContext2D.globalCompositeOperation=\"copy\",this.captureContext2D.scale(1,-1),this.captureContext2D.translate(0,-this.captureCanvas.height),this.captureContext2D.drawImage(this.workingCanvas,0,0,o,i,0,0,this.captureCanvas.width,this.captureCanvas.height),this.captureContext2D.setTransform(1,0,0,1,0,0),this.captureContext2D.globalCompositeOperation=\"source-over\";return this.captureCanvas.toDataURL()}catch(e){}},n.prototype.getWebGlConstant=function(t){var n=e.WebGlConstantsByValue[t];return n?n.name:t+\"\"},n}();n.captureBaseSize=64,n.cubeMapFaces=[e.WebGlConstants.TEXTURE_CUBE_MAP_POSITIVE_X,e.WebGlConstants.TEXTURE_CUBE_MAP_POSITIVE_Y,e.WebGlConstants.TEXTURE_CUBE_MAP_POSITIVE_Z,e.WebGlConstants.TEXTURE_CUBE_MAP_NEGATIVE_X,e.WebGlConstants.TEXTURE_CUBE_MAP_NEGATIVE_Y,e.WebGlConstants.TEXTURE_CUBE_MAP_NEGATIVE_Z],t.DrawCallTextureInputState=n}(e.States||(e.States={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(){function t(e,t){this.logger=t,this.context=e.context}return t.prototype.getUboValue=function(n,a,r,o){var i=t.uboTypes[o];if(i){var s=new i.arrayBufferView(r*i.lengthMultiplier),u=this.context,l=u.getIndexedParameter(e.WebGlConstants.UNIFORM_BUFFER_BINDING.value,n);if(l){var c=u.getParameter(e.WebGlConstants.UNIFORM_BUFFER_BINDING.value);try{u.bindBuffer(e.WebGlConstants.UNIFORM_BUFFER.value,l),u.getBufferSubData(e.WebGlConstants.UNIFORM_BUFFER.value,a,s)}catch(e){return}c&&u.bindBuffer(e.WebGlConstants.UNIFORM_BUFFER.value,c)}return Array.prototype.slice.call(s)}},t}();n.uboTypes=(a={},a[e.WebGlConstants.BOOL.value]={arrayBufferView:Uint8Array,lengthMultiplier:1},a[e.WebGlConstants.BOOL_VEC2.value]={arrayBufferView:Uint8Array,lengthMultiplier:2},a[e.WebGlConstants.BOOL_VEC3.value]={arrayBufferView:Uint8Array,lengthMultiplier:3},a[e.WebGlConstants.BOOL_VEC4.value]={arrayBufferView:Uint8Array,lengthMultiplier:4},a[e.WebGlConstants.INT.value]={arrayBufferView:Int32Array,lengthMultiplier:1},a[e.WebGlConstants.INT_VEC2.value]={arrayBufferView:Int32Array,lengthMultiplier:2},a[e.WebGlConstants.INT_VEC3.value]={arrayBufferView:Int32Array,lengthMultiplier:3},a[e.WebGlConstants.INT_VEC4.value]={arrayBufferView:Int32Array,lengthMultiplier:4},a[e.WebGlConstants.UNSIGNED_INT.value]={arrayBufferView:Uint32Array,lengthMultiplier:1},a[e.WebGlConstants.UNSIGNED_INT_VEC2.value]={arrayBufferView:Uint32Array,lengthMultiplier:2},a[e.WebGlConstants.UNSIGNED_INT_VEC3.value]={arrayBufferView:Uint32Array,lengthMultiplier:3},a[e.WebGlConstants.UNSIGNED_INT_VEC4.value]={arrayBufferView:Uint32Array,lengthMultiplier:4},a[e.WebGlConstants.FLOAT.value]={arrayBufferView:Float32Array,lengthMultiplier:1},a[e.WebGlConstants.FLOAT_VEC2.value]={arrayBufferView:Float32Array,lengthMultiplier:2},a[e.WebGlConstants.FLOAT_VEC3.value]={arrayBufferView:Float32Array,lengthMultiplier:3},a[e.WebGlConstants.FLOAT_VEC4.value]={arrayBufferView:Float32Array,lengthMultiplier:4},a[e.WebGlConstants.FLOAT_MAT2.value]={arrayBufferView:Float32Array,lengthMultiplier:4},a[e.WebGlConstants.FLOAT_MAT2x3.value]={arrayBufferView:Float32Array,lengthMultiplier:6},a[e.WebGlConstants.FLOAT_MAT2x4.value]={arrayBufferView:Float32Array,lengthMultiplier:8},a[e.WebGlConstants.FLOAT_MAT3.value]={arrayBufferView:Float32Array,lengthMultiplier:9},a[e.WebGlConstants.FLOAT_MAT3x2.value]={arrayBufferView:Float32Array,lengthMultiplier:6},a[e.WebGlConstants.FLOAT_MAT3x4.value]={arrayBufferView:Float32Array,lengthMultiplier:12},a[e.WebGlConstants.FLOAT_MAT4.value]={arrayBufferView:Float32Array,lengthMultiplier:16},a[e.WebGlConstants.FLOAT_MAT4x2.value]={arrayBufferView:Float32Array,lengthMultiplier:8},a[e.WebGlConstants.FLOAT_MAT4x3.value]={arrayBufferView:Float32Array,lengthMultiplier:12},a[e.WebGlConstants.SAMPLER_2D.value]={arrayBufferView:Uint8Array,lengthMultiplier:1},a[e.WebGlConstants.SAMPLER_CUBE.value]={arrayBufferView:Uint8Array,lengthMultiplier:1},a),t.DrawCallUboInputState=n;var a}(e.States||(e.States={}))}(n||(n={}));var n;!function(e){!function(e){function t(e){return e[r]}function n(e,t){t.displayText=a(t),e[r]=t}function a(e){return e?e.typeName+\" - ID: \"+e.id:\"No tag available.\"}var r=\"__SPECTOR_Object_TAG\";e.getWebGlObjectTag=t,e.attachWebGlObjectTag=n,e.stringifyWebGlObjectTag=a}(e.WebGlObjects||(e.WebGlObjects={}))}(n||(n={})),function(e){!function(e){var t=function(){function t(e,t){this.options=e,this.typeName=e.typeName,this.type=e.type,this.id=0}return t.prototype.tagWebGlObject=function(t){if(this.type){var n;if(!t)return n;if(n=e.getWebGlObjectTag(t))return n;if(t instanceof this.type){var a=this.getNextId();return n={typeName:this.typeName,id:a},e.attachWebGlObjectTag(t,n),n}return n}},t.prototype.getNextId=function(){return this.id++},t}();e.BaseWebGlObject=t}(e.WebGlObjects||(e.WebGlObjects={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t}(t.BaseWebGlObject);n=r([e.Decorators.webGlObject(\"WebGLBuffer\")],n),t.Buffer=n;var o=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t}(t.BaseWebGlObject);o=r([e.Decorators.webGlObject(\"WebGLFramebuffer\")],o),t.FrameBuffer=o;var i=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t}(t.BaseWebGlObject);i=r([e.Decorators.webGlObject(\"WebGLProgram\")],i),t.Program=i;var s=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t}(t.BaseWebGlObject);s=r([e.Decorators.webGlObject(\"WebGLQuery\")],s),t.Query=s;var u=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t}(t.BaseWebGlObject);u=r([e.Decorators.webGlObject(\"WebGLRenderbuffer\")],u),t.Renderbuffer=u;var l=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t}(t.BaseWebGlObject);l=r([e.Decorators.webGlObject(\"WebGLSampler\")],l),t.Sampler=l;var c=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t}(t.BaseWebGlObject);c=r([e.Decorators.webGlObject(\"WebGLShader\")],c),t.Shader=c;var m=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t}(t.BaseWebGlObject);m=r([e.Decorators.webGlObject(\"WebGLSync\")],m),t.Sync=m;var d=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t}(t.BaseWebGlObject);d=r([e.Decorators.webGlObject(\"WebGLTexture\")],d),t.Texture=d;var p=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t}(t.BaseWebGlObject);p=r([e.Decorators.webGlObject(\"WebGLTransformFeedback\")],p),t.TransformFeedback=p;var E=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t}(t.BaseWebGlObject);E=r([e.Decorators.webGlObject(\"WebGLUniformLocation\")],E),t.UniformLocation=E;var C=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t}(t.BaseWebGlObject);C=r([e.Decorators.webGlObject(\"WebGLVertexArrayObject\")],C),t.VertexArrayObject=C}(e.WebGlObjects||(e.WebGlObjects={}))}(n||(n={}));var n;!function(e){!function(e){var t=function(){function e(e,t){this.options=e,this.logger=t,this.analyserName=e.analyserName}return e.prototype.appendAnalysis=function(e){e.analyses=e.analyses||[];var t=this.getAnalysis(e);e.analyses.push(t)},e.prototype.getAnalysis=function(e){var t={analyserName:this.analyserName};return this.appendToAnalysis(e,t),t},e}();e.BaseAnalyser=t}(e.Analysers||(e.Analysers={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(){function t(e,t){this.options=e,this.logger=t,this.analysers={},this.analyserConstructors={},this.contextInformation=e.contextInformation,this.initAvailableAnalysers(),this.initAnalysers()}return t.prototype.appendAnalyses=function(e){for(var t in this.analysers)if(this.analysers.hasOwnProperty(t)){var n=this.analysers[t];n.appendAnalysis(e)}},t.prototype.initAvailableAnalysers=function(){for(var t in this.options.analyserNamespace)if(this.options.analyserNamespace.hasOwnProperty(t)){var n=this.options.analyserNamespace[t],a=e.Decorators.getAnalyserName(n);a&&(this.analyserConstructors[a]=n)}},t.prototype.initAnalysers=function(){for(var t in this.analyserConstructors)if(this.analyserConstructors.hasOwnProperty(t)){var n=e.merge({analyserName:t},this.contextInformation),a=new this.analyserConstructors[t](n,this.logger);this.analysers[t]=a}},t}();t.CaptureAnalyser=n}(e.Analysers||(e.Analysers={}))}(n||(n={}));var n;!function(e){!function(t){var n=o=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t.prototype.appendToAnalysis=function(e,t){if(e.commands){t.total=e.commands.length,t.draw=0,t.clear=0;for(var n=0,a=e.commands;n<a.length;n++){var r=a[n];\"clear\"===r.name?t.clear++:o.drawCommands.indexOf(r.name)>-1&&t.draw++}}},t}(t.BaseAnalyser);n.drawCommands=[\"drawArrays\",\"drawElements\",\"drawArraysInstanced\",\"drawElementsInstanced\",\"drawElementsInstancedANGLE\",\"drawRangeElements\"],n=o=r([e.Decorators.analyser(\"CommandsSummary\")],n),t.CommandsSummaryAnalyser=n;var o}(e.Analysers||(e.Analysers={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t.prototype.appendToAnalysis=function(e,t){if(e.commands){for(var n={},a=0,r=e.commands;a<r.length;a++){var o=r[a];n[o.name]=n[o.name]||0,n[o.name]++}var i=Object.keys(n).map(function(e){return[e,n[e]]});i.sort(function(e,t){var n=t[1]-e[1];return 0===n?e[0].localeCompare(t[0]):n});for(var s=0,u=i;s<u.length;s++){var l=u[s];t[l[0]]=l[1]}}},t}(t.BaseAnalyser);n=r([e.Decorators.analyser(\"Commands\")],n),t.CommandsAnalyser=n}(e.Analysers||(e.Analysers={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t.prototype.appendToAnalysis=function(e,t){if(e.commands){for(var n=0,a=0,r=e.commands;a<r.length;a++){var o=r[a];\"drawArrays\"===o.name&&o.commandArguments.length>=3?n+=o.commandArguments[2]:\"drawArraysInstanced\"===o.name&&o.commandArguments.length>=3?n+=o.commandArguments[2]:\"drawElements\"===o.name&&o.commandArguments.length>=2?n+=o.commandArguments[1]:\"drawElementsInstanced\"===o.name&&o.commandArguments.length>=2?n+=o.commandArguments[1]:\"drawElementsInstancedANGLE\"===o.name&&o.commandArguments.length>=2?n+=o.commandArguments[1]:\"drawRangeElements\"===o.name&&o.commandArguments.length>=4&&(n+=o.commandArguments[3])}t.totalDrawnPrimitives=n}},t}(t.BaseAnalyser);n=r([e.Decorators.analyser(\"Primitives\")],n),t.PrimitivesAnalyser=n}(e.Analysers||(e.Analysers={}))}(n||(n={}));var n;!function(e){!function(e){var t=function(){function e(){}return e.scrollIntoView=function(e){for(var t=e.getBoundingClientRect(),n=e.parentElement;n&&n.clientHeight===n.offsetHeight;)n=n.parentElement;var a=n.getBoundingClientRect();t.top<a.top?e.scrollIntoView(!0):t.bottom>a.bottom&&e.scrollIntoView(!1)},e}();e.ScrollIntoViewHelper=t}(e.EmbeddedFrontend||(e.EmbeddedFrontend={}))}(n||(n={}));var n;!function(e){!function(e){var t=function(){function e(e,t){this.eventConstructor=e,this.logger=t,this.dummyTextGeneratorElement=document.createElement(\"div\")}return e.prototype.createFromHtml=function(e){var t=document.createElement(\"div\");return t.innerHTML=e,t.firstElementChild},e.prototype.htmlTemplate=function(e){for(var t=this,n=[],a=1;a<arguments.length;a++)n[a-1]=arguments[a];var r=e.raw,o=\"\";return n.forEach(function(e,n){var a=r[n];Array.isArray(e)&&(e=e.join(\"\")),a&&a.length>0&&\"$\"===a[a.length-1]?a=a.slice(0,-1):e=t.htmlEscape(e),o+=a,o+=e}),o+=r[r.length-1]},e.prototype.htmlEscape=function(e){return null===e||void 0===e||0===e.length?e:(this.dummyTextGeneratorElement.innerText=e,this.dummyTextGeneratorElement.innerHTML)},e}();e.BaseNoneGenericComponent=t;var n=function(e){function t(t,n){var a=e.call(this,t,n)||this;return a.events={},a}return a(t,e),t.prototype.addEventListener=function(e,t,n){return void 0===n&&(n=null),this.events[e]?this.events[e].add(t,n):-1},t.prototype.removeEventListener=function(e,t){this.events[e]&&this.events[e].remove(t)},t.prototype.renderElementFromTemplate=function(e,t,n){var a=this.createFromHtml(e);return this.bindCommands(a,t,n),a},t.prototype.bindCommands=function(e,t,n){e.getAttribute(\"commandname\")&&this.bindCommand(e,t,n);for(var a=e.querySelectorAll(\"[commandName]\"),r=0;r<a.length;r++){var o=a[r];this.bindCommand(o,t,n)}},t.prototype.bindCommand=function(e,t,n){var a=e.getAttribute(\"commandname\"),r=e.getAttribute(\"commandeventbinding\")||\"\";0===r.length&&(r=\"click\");var o=\"true\"===e.getAttribute(\"usecapture\");this.createEvent(a),this.mapEventListener(e,r,a,t,n,o)},t.prototype.mapEventListener=function(e,t,n,a,r,o,i){void 0===o&&(o=!1),void 0===i&&(i=!1);var s=this;i?e.addEventListener(t,function(e){e.stopPropagation(),e.preventDefault(),s.triggerEvent(n,this,a,r)},o):e.addEventListener(t,function(){s.triggerEvent(n,this,a,r)},o)},t.prototype.createEvent=function(e){if(!this.events[e]){var t=new this.eventConstructor;this.events[e]=t}return this.events[e]},t.prototype.triggerEvent=function(e,t,n,a){this.events[e].trigger({sender:t,stateId:a,state:n})},t}(t);e.BaseComponent=n}(e.EmbeddedFrontend||(e.EmbeddedFrontend={}))}(n||(n={}));var n;!function(e){!function(e){var t=function(){function e(e,t,n){this.logger=n,this.placeHolder=e,this.stateStore=t}return e.prototype.compose=function(e){var t=this.stateStore.getStatesToProcess(),n=!1;for(var a in t)if(t.hasOwnProperty(a)){var r=t[a],o=this.stateStore.getLastOperation(r),i=this.stateStore.getComponentInstance(r),s=this.stateStore.getData(r);i.render(s,r,o),n=!0}if(n){var u=this.stateStore.getLastOperation(e);this.composeInContainer(this.placeHolder,Number.MAX_VALUE,e,u)}},e.prototype.composeChildren=function(e,t){if(t)for(var n=this.stateStore.getChildrenIds(e),a=0,r=0;r<n.length;r++){var o=n[r],i=this.stateStore.getLastOperation(o);this.composeInContainer(t,a,o,i),50!==i&&a++}},e.prototype.composeInContainer=function(e,t,n,a){var r=this.stateStore.getComponentInstance(n),o=r.composeInContainer(e,t,a);this.composeChildren(n,o)},e}();e.Compositor=t}(e.EmbeddedFrontend||(e.EmbeddedFrontend={}))}(n||(n={}));var n;!function(e){!function(e){var t=function(){function t(t,n){this.logger=n,this.stateStore=new e.StateStore(n),this.compositor=new e.Compositor(t,this.stateStore,n),this.willRender=!1,this.rootStateId=-1}return t.prototype.addRootState=function(t,n,a){void 0===a&&(a=!1);var r=new e.ComponentInstance(n,this.logger),o=this.stateStore.add(t,r);return this.rootStateId=o,this.setForRender(a),o},t.prototype.addChildState=function(e,t,n,a){void 0===a&&(a=!1);var r=this.insertChildState(e,t,Number.MAX_VALUE,n);return this.setForRender(a),r},t.prototype.insertChildState=function(t,n,a,r,o){void 0===o&&(o=!1);var i=new e.ComponentInstance(r,this.logger),s=this.stateStore.insertChildAt(t,a,n,i);return this.setForRender(o),s},t.prototype.updateState=function(e,t,n){void 0===n&&(n=!1),this.stateStore.update(e,t),this.setForRender(n)},t.prototype.removeState=function(e,t){void 0===t&&(t=!1),this.stateStore.remove(e),this.setForRender(t)},t.prototype.removeChildrenStates=function(e,t){void 0===t&&(t=!1),this.stateStore.removeChildren(e),this.setForRender(t)},t.prototype.getState=function(e){return this.stateStore.getData(e)},t.prototype.getGenericState=function(e){return this.getState(e)},t.prototype.getChildrenState=function(e){var t=this;return this.stateStore.getChildrenIds(e).map(function(n){return t.stateStore.getData(e)})},t.prototype.getChildrenGenericState=function(e){return this.getChildrenState(e)},t.prototype.hasChildren=function(e){return this.stateStore.hasChildren(e)},t.prototype.updateAllChildrenState=function(e,t){for(var n=this.stateStore.getChildrenIds(e),a=0,r=n;a<r.length;a++){var o=r[a],i=this.getGenericState(o);t(i),this.updateState(o,i)}},t.prototype.updateAllChildrenGenericState=function(e,t){this.updateAllChildrenState(e,t)},t.prototype.setForRender=function(e){this.willRender||(this.willRender=!0,e?this.compose():setTimeout(this.compose.bind(this),t.REFRESHRATEINMILLISECONDS))},t.prototype.compose=function(){this.willRender=!1,this.compositor.compose(this.rootStateId),this.stateStore.flushPendingOperations()},t}();t.REFRESHRATEINMILLISECONDS=100,e.MVX=t}(e.EmbeddedFrontend||(e.EmbeddedFrontend={}))}(n||(n={}));var n;!function(e){!function(e){var t=function(){function e(e,t){this.logger=t,this.component=e}return e.prototype.render=function(e,t,n){if(0!==n)return 50===n?void this.removeNode():void(this.domNode=this.component.render(e,t))},e.prototype.composeInContainer=function(e,t,n){if(50===n)return this.removeNode(),null;var a=this.cachedCurrentChildrenContainer;if(0===n)return a;var r=this.domNode,o=r.getAttribute(\"childrencontainer\")?r:r.querySelector(\"[childrenContainer]\");if(o&&a)for(var i=a.children;i.length>0;)o.appendChild(i[0]);if(this.cachedCurrentChildrenContainer=o,t>=e.children.length)e.appendChild(r),this.cachedCurrentDomNode&&40===n&&(this.cachedCurrentDomNode.remove?this.cachedCurrentDomNode.remove():this.cachedCurrentDomNode.parentNode&&this.cachedCurrentDomNode.parentNode.removeChild(this.cachedCurrentDomNode));else{var s=e.children[t];e.insertBefore(r,s),40===n&&e.removeChild(s)}return this.cachedCurrentDomNode=this.domNode,o},e.prototype.removeNode=function(){this.domNode&&this.domNode.parentElement&&(this.domNode.remove?this.domNode.remove():this.domNode.parentNode&&this.domNode.parentNode.removeChild(this.domNode)),this.cachedCurrentDomNode&&this.cachedCurrentDomNode.parentElement&&(this.cachedCurrentDomNode.remove?this.cachedCurrentDomNode.remove():this.cachedCurrentDomNode.parentNode&&this.cachedCurrentDomNode.parentNode.removeChild(this.cachedCurrentDomNode))},e}();t.idGenerator=0,e.ComponentInstance=t}(e.EmbeddedFrontend||(e.EmbeddedFrontend={}))}(n||(n={}));var n;!function(e){!function(e){var t=function(){function e(e){this.logger=e,this.store={},this.idGenerator=0,this.pendingOperation={}}return e.prototype.getLastOperation=function(e){return this.store[e].lastOperation},e.prototype.getData=function(e){return this.store[e].data},e.prototype.getComponentInstance=function(e){return this.store[e].componentInstance},e.prototype.getParentId=function(e){return this.store[e].parent?this.store[e].parent.id:-1},e.prototype.getChildrenIds=function(e){for(var t=[],n=0,a=this.store[e].children;n<a.length;n++){var r=a[n];t.push(r.id)}return t},e.prototype.hasChildren=function(e){return this.store[e].children.length>0},e.prototype.add=function(e,t){var n=this.getNewId();return this.pendingOperation[n]=n,this.store[n]={data:e,id:n,parent:null,children:[],componentInstance:t,lastOperation:20},n},e.prototype.update=function(e,t){var n=this.store[e];this.pendingOperation[e]=e,this.store[e]={data:t,id:e,parent:n.parent,children:n.children,componentInstance:n.componentInstance,lastOperation:40}},e.prototype.addChild=function(e,t,n){var a=this.store[e],r=this.add(t,n);this.pendingOperation[r]=r;var o=this.store[r];return o.parent=a,a.children.push(o),r},e.prototype.insertChildAt=function(e,t,n,a){var r=this.store[e],o=this.add(n,a);this.pendingOperation[o]=o;var i=this.store[o];return i.parent=r,t>=r.children.length?r.children.push(i):t>=0?r.children.splice(t,0,i):r.children.unshift(i),o},e.prototype.removeChildById=function(e,t){for(var n=this.store[e],a=n.children.length-1;a>=0;a--){if(n.children[a].id===t){this.removeChildAt(e,a);break}}},e.prototype.removeChildAt=function(e,t){var n,a=this.store[e];t>a.children.length-1?(n=a.children[a.children.length-1],a.children[a.children.length-1].parent=null,a.children.splice(a.children.length-1,1)):t>=0?(n=a.children[t],a.children[t].parent=null,a.children.splice(t,1)):(n=a.children[0],a.children[0].parent=null,a.children.splice(0,1)),n.parent=null,this.remove(n.id)},e.prototype.remove=function(e){var t=this.store[e];if(t.parent){this.store[t.parent.id];this.removeChildById(t.parent.id,e)}else this.removeChildren(e),this.store[e].lastOperation=50,this.pendingOperation[e]=e},e.prototype.removeChildren=function(e){for(var t=this.store[e];t.children.length;)this.remove(t.children[0].id)},e.prototype.getStatesToProcess=function(){return this.pendingOperation},e.prototype.flushPendingOperations=function(){for(var e in this.pendingOperation)this.pendingOperation[e]&&(50===this.store[e].lastOperation?delete this.store[e]:this.store[e].lastOperation=0);this.pendingOperation={}},e.prototype.getNewId=function(){return++this.idGenerator},e}();e.StateStore=t}(e.EmbeddedFrontend||(e.EmbeddedFrontend={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return a(n,t),n.prototype.render=function(t,n){var a=(r=['<div>\\n                <div childrenContainer=\"true\" class=\"captureMenuComponent ','\">\\n                </div>\\n                <div class=\"captureMenuLogComponent ','\">\\n                    <span class=\"','\">',\"<span>\\n                </div>\\n            </div>\"],r.raw=['<div>\\n                <div childrenContainer=\"true\" class=\"captureMenuComponent ','\">\\n                </div>\\n                <div class=\"captureMenuLogComponent ','\">\\n                    <span class=\"','\">',\"<span>\\n                </div>\\n            </div>\"],this.htmlTemplate(r,t?\"active\":\"\",t.logVisible?\"active\":\"\",t.logLevel===e.LogLevel.error?\"error\":\"\",t.logText));return this.renderElementFromTemplate(a,t,n);var r},n}(t.BaseComponent);t.CaptureMenuComponent=n}(e.EmbeddedFrontend||(e.EmbeddedFrontend={}))}(n||(n={}));var n;!function(e){!function(e){var t=function(e){function t(t,n){var a=e.call(this,t,n)||this;return a.onCaptureRequested=a.createEvent(\"onCaptureRequested\"),a.onPlayRequested=a.createEvent(\"onPlayRequested\"),a.onPauseRequested=a.createEvent(\"onPauseRequested\"),a.onPlayNextFrameRequested=a.createEvent(\"onPlayNextFrameRequested\"),a}return a(t,e),t.prototype.render=function(e,t){var n=(a=['\\n            <div class=\"captureMenuActionsComponent\">\\n                <div commandName=\"onCaptureRequested\">\\n                </div>\\n                $',\"\\n            </div>\"],a.raw=['\\n            <div class=\"captureMenuActionsComponent\">\\n                <div commandName=\"onCaptureRequested\">\\n                </div>\\n                $',\"\\n            </div>\"],this.htmlTemplate(a,e?'<div commandName=\"onPauseRequested\">\\n                    </div>':'<div commandName=\"onPlayRequested\">\\n                    </div>\\n                    <div commandName=\"onPlayNextFrameRequested\">\\n                    </div>'));return this.renderElementFromTemplate(n,e,t);var a},t}(e.BaseComponent);e.CaptureMenuActionsComponent=t}(e.EmbeddedFrontend||(e.EmbeddedFrontend={}))}(n||(n={}));var n;!function(e){!function(e){var t=function(e){function t(t,n){var a=e.call(this,t,n)||this;return a.onCanvasSelection=a.createEvent(\"onCanvasSelection\"),a}return a(t,e),t.prototype.render=function(e,t){var n=(a=['\\n            <div class=\"canvasListComponent\">\\n                <span commandName=\"onCanvasSelection\">\\n                    ','\\n                </span>\\n                <ul childrenContainer=\"true\" style=\"','\"></ul>\\n            </div>'],a.raw=['\\n            <div class=\"canvasListComponent\">\\n                <span commandName=\"onCanvasSelection\">\\n                    ','\\n                </span>\\n                <ul childrenContainer=\"true\" style=\"','\"></ul>\\n            </div>'],this.htmlTemplate(a,e.currentCanvasInformation?e.currentCanvasInformation.id+\" (\"+e.currentCanvasInformation.width+\"*\"+e.currentCanvasInformation.height+\")\":\"Choose Canvas...\",e.showList?\"display:block;visibility:visible\":\"display:none;visibility:hidden\"));return this.renderElementFromTemplate(n,e,t);var a},t}(e.BaseComponent);e.CanvasListComponent=t}(e.EmbeddedFrontend||(e.EmbeddedFrontend={}))}(n||(n={}));var n;!function(e){!function(e){var t=function(e){function t(t,n){var a=e.call(this,t,n)||this;return a.onCanvasSelected=a.createEvent(\"onCanvasSelected\"),a}return a(t,e),t.prototype.render=function(e,t){var n=document.createElement(\"li\"),a=document.createElement(\"span\");return a.innerText=\"Id: \"+e.id+\" - Size: \"+e.width+\"*\"+e.height,n.appendChild(a),this.mapEventListener(n,\"click\",\"onCanvasSelected\",e,t),n},t}(e.BaseComponent);e.CanvasListItemComponent=t}(e.EmbeddedFrontend||(e.EmbeddedFrontend={}))}(n||(n={}));var n;!function(e){!function(e){var t=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t.prototype.render=function(e,t){var n=document.createElement(\"span\");return n.className=\"fpsCounterComponent\",n.innerText=e.toFixed(2)+\" Fps\",n},t}(e.BaseComponent);e.FpsCounterComponent=t}(e.EmbeddedFrontend||(e.EmbeddedFrontend={}))}(n||(n={}));var n;!function(e){!function(t){var n=function(){function n(a,r){var o=this;this.options=a,this.logger=r,this.rootPlaceHolder=a.rootPlaceHolder||document.body,this.mvx=new t.MVX(this.rootPlaceHolder,r),this.isTrackingCanvas=!1,this.onCanvasSelected=new a.eventConstructor,this.onCaptureRequested=new a.eventConstructor,this.onPauseRequested=new a.eventConstructor,this.onPlayRequested=new a.eventConstructor,this.onPlayNextFrameRequested=new a.eventConstructor,this.captureMenuComponent=new t.CaptureMenuComponent(a.eventConstructor,r),this.canvasListComponent=new t.CanvasListComponent(a.eventConstructor,r),this.canvasListItemComponent=new t.CanvasListItemComponent(this.options.eventConstructor,this.logger),this.actionsComponent=new t.CaptureMenuActionsComponent(a.eventConstructor,r),this.fpsCounterComponent=new t.FpsCounterComponent(a.eventConstructor,r),this.rootStateId=this.mvx.addRootState({visible:!0,logLevel:e.LogLevel.info,logText:n.SelectCanvasHelpText,logVisible:!this.options.hideLog},this.captureMenuComponent),this.canvasListStateId=this.mvx.addChildState(this.rootStateId,{currentCanvasInformation:null,showList:!1},this.canvasListComponent),this.actionsStateId=this.mvx.addChildState(this.rootStateId,!0,this.actionsComponent),this.fpsStateId=this.mvx.addChildState(this.rootStateId,0,this.fpsCounterComponent),this.actionsComponent.onCaptureRequested.add(function(){var t=o.getSelectedCanvasInformation();t&&o.updateMenuStateLog(e.LogLevel.info,n.PleaseWaitHelpText,!0),setTimeout(function(){o.onCaptureRequested.trigger(t)},200)}),this.actionsComponent.onPauseRequested.add(function(){o.onPauseRequested.trigger(o.getSelectedCanvasInformation()),o.mvx.updateState(o.actionsStateId,!1)}),this.actionsComponent.onPlayRequested.add(function(){o.onPlayRequested.trigger(o.getSelectedCanvasInformation()),o.mvx.updateState(o.actionsStateId,!0)}),this.actionsComponent.onPlayNextFrameRequested.add(function(){o.onPlayNextFrameRequested.trigger(o.getSelectedCanvasInformation())}),this.canvasListComponent.onCanvasSelection.add(function(t){o.mvx.updateState(o.canvasListStateId,{currentCanvasInformation:null,showList:!t.state.showList}),o.updateMenuStateLog(e.LogLevel.info,n.SelectCanvasHelpText),o.onCanvasSelected.trigger(null),o.isTrackingCanvas&&o.trackPageCanvases(),t.state.showList?o.showMenuStateLog():o.hideMenuStateLog()}),this.canvasListItemComponent.onCanvasSelected.add(function(t){o.mvx.updateState(o.canvasListStateId,{currentCanvasInformation:t.state,showList:!1}),o.onCanvasSelected.trigger(t.state),o.updateMenuStateLog(e.LogLevel.info,n.ActionsHelpText),o.showMenuStateLog()})}return n.prototype.getSelectedCanvasInformation=function(){return this.mvx.getGenericState(this.canvasListStateId).currentCanvasInformation},n.prototype.trackPageCanvases=function(){if(this.isTrackingCanvas=!0,document.body){var e=document.body.querySelectorAll(\"canvas\");this.updateCanvasesList(e)}},n.prototype.updateCanvasesList=function(e){this.updateCanvasesListInformationInternal(e,function(e){return{id:e.id,width:e.width,height:e.height,ref:e}})},n.prototype.updateCanvasesListInformation=function(e){this.updateCanvasesListInformationInternal(e,function(e){return{id:e.id,width:e.width,height:e.height,ref:e.ref}})},n.prototype.display=function(){this.updateMenuStateVisibility(!0)},n.prototype.hide=function(){this.updateMenuStateVisibility(!1)},n.prototype.captureComplete=function(t){t?this.updateMenuStateLog(e.LogLevel.error,t):this.updateMenuStateLog(e.LogLevel.info,n.ActionsHelpText)},n.prototype.setFPS=function(e){this.mvx.updateState(this.fpsStateId,e)},n.prototype.updateCanvasesListInformationInternal=function(t,a){this.mvx.removeChildrenStates(this.canvasListStateId);for(var r=[],o=0;o<t.length;o++){var i=t[o],s=a(i);r.push(s),this.mvx.addChildState(this.canvasListStateId,s,this.canvasListItemComponent)}var u=r.length,l=this.mvx.getGenericState(this.canvasListStateId),c=l.showList;if(!c)if(1===u){var m=r[0];this.mvx.updateState(this.canvasListStateId,{currentCanvasInformation:m,showList:c}),this.updateMenuStateLog(e.LogLevel.info,n.ActionsHelpText),this.onCanvasSelected.trigger(m)}else this.updateMenuStateLog(e.LogLevel.info,n.SelectCanvasHelpText),this.onCanvasSelected.trigger(null)},n.prototype.hideMenuStateLog=function(){var e=this.mvx.getGenericState(this.rootStateId);this.mvx.updateState(this.rootStateId,{visible:e.visible,logLevel:e.logLevel,logText:e.logText,logVisible:!1})},n.prototype.showMenuStateLog=function(){var e=this.mvx.getGenericState(this.rootStateId);this.mvx.updateState(this.rootStateId,{visible:e.visible,logLevel:e.logLevel,logText:e.logText,logVisible:!this.options.hideLog})},n.prototype.updateMenuStateLog=function(e,t,n){void 0===n&&(n=!1);var a=this.mvx.getGenericState(this.rootStateId);this.mvx.updateState(this.rootStateId,{visible:a.visible,logLevel:e,logText:t,logVisible:!this.options.hideLog},n)},n.prototype.updateMenuStateVisibility=function(e){var t=this.mvx.getGenericState(this.rootStateId);this.mvx.updateState(this.rootStateId,{visible:e,logLevel:t.logLevel,logText:t.logText,logVisible:t.logVisible})},n}();n.SelectCanvasHelpText=\"Please, select a canvas in the list above.\",n.ActionsHelpText=\"Record with the red button, you can also pause or continue playing the current scene.\",n.PleaseWaitHelpText=\"Capturing, be patient (this can take up to 3 minutes)...\",t.CaptureMenu=n}(e.EmbeddedFrontend||(e.EmbeddedFrontend={}))}(n||(n={}));var n;!function(e){!function(e){var t=function(e){function t(t,n){var a=e.call(this,t,n)||this;return a.onCaptureLoaded=new a.eventConstructor,a}return a(t,e),t.prototype.render=function(e,t){var n=this,a=(i=['\\n            <div class=\"captureListComponent ','\">\\n                <div class=\"openCaptureFile\">\\n                    <Span>Drag files here to open a previously saved capture.</span>\\n                </div>\\n                <ul childrenContainer=\"true\"></ul>\\n            </div>'],i.raw=['\\n            <div class=\"captureListComponent ','\">\\n                <div class=\"openCaptureFile\">\\n                    <Span>Drag files here to open a previously saved capture.</span>\\n                </div>\\n                <ul childrenContainer=\"true\"></ul>\\n            </div>'],this.htmlTemplate(i,e?\"active\":\"\")),r=this.renderElementFromTemplate(a,e,t),o=r.querySelector(\".openCaptureFile\");return o.addEventListener(\"dragenter\",function(e){return n.drag(e),!1},!1),o.addEventListener(\"dragover\",function(e){return n.drag(e),!1},!1),o.addEventListener(\"drop\",function(e){n.drop(e)},!1),r;var i},t.prototype.drag=function(e){e.stopPropagation(),e.preventDefault()},t.prototype.drop=function(e){e.stopPropagation(),e.preventDefault(),this.loadFiles(e)},t.prototype.loadFiles=function(e){var t=this,n=null;if(e&&e.dataTransfer&&e.dataTransfer.files&&(n=e.dataTransfer.files),e&&e.target&&e.target.files&&(n=e.target.files),n&&n.length>0)for(var a=0;a<n.length;a++)!function(e){var a=n[e].name.toLowerCase(),r=a.split(\".\").pop();n[e].type;if(\"json\"===r){var o=n[e],i=new FileReader;i.onerror=function(e){t.logger.error(\"Error while reading file: \"+o.name+e)},i.onload=function(e){try{var n=JSON.parse(e.target.result);t.onCaptureLoaded.trigger(n)}catch(e){t.logger.error(\"Error while reading file: \"+o.name+e)}},i.readAsText(o)}}(a)},t}(e.BaseComponent);e.CaptureListComponent=t}(e.EmbeddedFrontend||(e.EmbeddedFrontend={}))}(n||(n={}));var n;!function(e){!function(e){var t=function(e){function t(t,n){var a=e.call(this,t,n)||this;return a.onCaptureSelected=a.createEvent(\"onCaptureSelected\"),a.onSaveRequested=a.createEvent(\"onSaveRequested\"),a}return a(t,e),t.prototype.render=function(e,t){var n=document.createElement(\"li\");if(e.active&&(n.className=\"active\"),e.capture.endState.VisualState.Attachments)for(var a=0,r=e.capture.endState.VisualState.Attachments;a<r.length;a++){var o=r[a],i=document.createElement(\"img\");i.src=encodeURI(o.src),n.appendChild(i)}else{var s=document.createElement(\"span\");s.innerText=e.capture.endState.VisualState.FrameBufferStatus,n.appendChild(s)}var u=document.createElement(\"span\");u.innerText=new Date(e.capture.startTime).toTimeString().split(\" \")[0],n.appendChild(u);var l=document.createElement(\"a\");return l.href=\"#\",l.className=\"captureListItemSave\",this.mapEventListener(l,\"click\",\"onSaveRequested\",e,t,!1,!0),u.appendChild(l),this.mapEventListener(n,\"click\",\"onCaptureSelected\",e,t),n},t}(e.BaseComponent);e.CaptureListItemComponent=t}(e.EmbeddedFrontend||(e.EmbeddedFrontend={}))}(n||(n={}));var n;!function(e){!function(e){var t=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t.prototype.render=function(e,t){var n=(a=['\\n            <div class=\"visualStateListComponent\">\\n                <ul childrenContainer=\"true\"></ul>\\n            </div>'],a.raw=['\\n            <div class=\"visualStateListComponent\">\\n                <ul childrenContainer=\"true\"></ul>\\n            </div>'],this.htmlTemplate(a));return this.renderElementFromTemplate(n,e,t);var a},t}(e.BaseComponent);e.VisualStateListComponent=t}(e.EmbeddedFrontend||(e.EmbeddedFrontend={}))}(n||(n={}));var n;!function(e){!function(e){var t=function(t){function n(e,n){var a=t.call(this,e,n)||this;return a.onVisualStateSelected=a.createEvent(\"onVisualStateSelected\"),a}return a(n,t),n.prototype.render=function(t,n){var a=document.createElement(\"li\");if(t.active&&(a.className=\"active\",setTimeout(function(){e.ScrollIntoViewHelper.scrollIntoView(a)},1)),t.VisualState.Attachments)for(var r=0,o=t.VisualState.Attachments;r<o.length;r++){var i=o[r];if(i.src){var s=document.createElement(\"img\");if(s.src=encodeURI(i.src),a.appendChild(s),t.VisualState.Attachments.length>1){var u=document.createElement(\"span\");u.innerText=i.attachmentName,a.appendChild(u)}if(i.textureLayer){var l=document.createElement(\"span\");l.innerText=\"Layer: \"+i.textureLayer,a.appendChild(l)}if(i.textureCubeMapFace){var c=document.createElement(\"span\");c.innerText=i.textureCubeMapFace,a.appendChild(c)}}}else{var m=document.createElement(\"span\");m.innerText=t.VisualState.FrameBufferStatus,a.appendChild(m)}var d=document.createElement(\"span\");return d.innerText=t.VisualState.FrameBuffer?\"Frame buffer: \"+t.VisualState.FrameBuffer.__SPECTOR_Object_TAG.id:\"Canvas frame buffer\",a.appendChild(d),this.mapEventListener(a,\"click\",\"onVisualStateSelected\",t,n),a},n}(e.BaseComponent);e.VisualStateListItemComponent=t}(e.EmbeddedFrontend||(e.EmbeddedFrontend={}))}(n||(n={}));var n;!function(e){!function(e){var t=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t.prototype.render=function(e,t){var n=(a=['\\n            <div class=\"commandListComponent\">\\n                <ul childrenContainer=\"true\"></ul>\\n            </div>'],a.raw=['\\n            <div class=\"commandListComponent\">\\n                <ul childrenContainer=\"true\"></ul>\\n            </div>'],this.htmlTemplate(a));return this.renderElementFromTemplate(n,e,t);var a},t}(e.BaseComponent);e.CommandListComponent=t}(e.EmbeddedFrontend||(e.EmbeddedFrontend={}))}(n||(n={}));var n;!function(e){!function(e){var t=function(t){function n(e,n){var a=t.call(this,e,n)||this;return a.onCommandSelected=a.createEvent(\"onCommandSelected\"),a}return a(n,t),n.prototype.render=function(t,n){var a=document.createElement(\"li\"),r=\"unknown\";switch(t.capture.status){case 50:r=\"deprecated\";break;case 10:r=\"unused\";break;case 20:r=\"disabled\";break;case 30:r=\"redundant\";break;case 40:r=\"valid\"}t.capture.VisualState&&(a.className=\" drawCall\"),t.active&&(a.className=\" active\",setTimeout(function(){e.ScrollIntoViewHelper.scrollIntoView(a)},1));var o=document.createElement(\"span\"),i=t.capture.text;return i=i.replace(t.capture.name,'<span class=\" '+r+' important\">'+t.capture.name+\"</span>\"),o.innerHTML=i,a.appendChild(o),this.mapEventListener(a,\"click\",\"onCommandSelected\",t,n),a},n}(e.BaseComponent);e.CommandListItemComponent=t}(e.EmbeddedFrontend||(e.EmbeddedFrontend={}))}(n||(n={}));var n;!function(e){!function(e){var t=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t.prototype.render=function(e,t){var n=(a=['\\n            <div class=\"commandDetailComponent\" childrenContainer=\"true\">\\n            </div>'],a.raw=['\\n            <div class=\"commandDetailComponent\" childrenContainer=\"true\">\\n            </div>'],this.htmlTemplate(a));return this.renderElementFromTemplate(n,e,t);var a},t}(e.BaseComponent);e.CommandDetailComponent=t}(e.EmbeddedFrontend||(e.EmbeddedFrontend={}))}(n||(n={}));var n;!function(e){!function(e){var t=function(){function e(){}return e.getMDNLink=function(t){var n=e.WebGL2Functions[t];if(n)return e.WebGL2RootUrl+n;var a=e.WebGLFunctions[t];return a?e.WebGLRootUrl+a:e.WebGLRootUrl+t},e}();t.WebGL2RootUrl=\"https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/\",t.WebGLRootUrl=\"https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/\",t.WebGL2Functions={beginQuery:\"beginQuery\",beginTransformFeedback:\"beginTransformFeedback\",bindBufferBase:\"bindBufferBase\",bindBufferRange:\"bindBufferRange\",bindSampler:\"bindSampler\",bindTransformFeedback:\"bindTransformFeedback\",bindVertexArray:\"bindVertexArray\",blitFramebuffer:\"blitFramebuffer\",clearBufferfv:\"clearBuffer\",clearBufferiv:\"clearBuffer\",clearBufferuiv:\"clearBuffer\",clearBufferfi:\"clearBuffer\",clientWaitSync:\"clientWaitSync\",compressedTexImage3D:\"compressedTexImage3D\",compressedTexSubImage3D:\"compressedTexSubImage3D\",copyBufferSubData:\"copyBufferSubData\",copyTexSubImage3D:\"copyTexSubImage3D\",createQuery:\"createQuery\",createSampler:\"createSampler\",createTransformFeedback:\"createTransformFeedback\",createVertexArray:\"createVertexArray\",deleteQuery:\"deleteQuery\",deleteSampler:\"deleteSampler\",deleteSync:\"deleteSync\",deleteTransformFeedback:\"deleteTransformFeedback\",deleteVertexArray:\"deleteVertexArray\",drawArraysInstanced:\"drawArraysInstanced\",drawBuffers:\"drawBuffers\",drawElementsInstanced:\"drawElementsInstanced\",drawRangeElements:\"drawRangeElements\",endQuery:\"endQuery\",endTransformFeedback:\"endTransformFeedback\",fenceSync:\"fenceSync\",framebufferTextureLayer:\"framebufferTextureLayer\",getActiveUniformBlockName:\"getActiveUniformBlockName\",getActiveUniformBlockParameter:\"getActiveUniformBlockParameter\",getActiveUniforms:\"getActiveUniforms\",getBufferSubData:\"getBufferSubData\",getFragDataLocation:\"getFragDataLocation\",getIndexedParameter:\"getIndexedParameter\",getInternalformatParameter:\"getInternalformatParameter\",getQuery:\"getQuery\",getQueryParameter:\"getQueryParameter\",getSamplerParameter:\"getSamplerParameter\",getSyncParameter:\"getSyncParameter\",getTransformFeedbackVarying:\"getTransformFeedbackVarying\",getUniformBlockIndex:\"getUniformBlockIndex\",getUniformIndices:\"getUniformIndices\",invalidateFramebuffer:\"invalidateFramebuffer\",invalidateSubFramebuffer:\"invalidateSubFramebuffer\",isQuery:\"isQuery\",isSampler:\"isSampler\",isSync:\"isSync\",isTransformFeedback:\"isTransformFeedback\",isVertexArray:\"isVertexArray\",pauseTransformFeedback:\"pauseTransformFeedback\",readBuffer:\"readBuffer\",renderbufferStorageMultisample:\"renderbufferStorageMultisample\",resumeTransformFeedback:\"resumeTransformFeedback\",samplerParameteri:\"samplerParameter\",samplerParameterf:\"samplerParameter\",texImage3D:\"texImage3D\",texStorage2D:\"texStorage2D\",texStorage3D:\"texStorage3D\",texSubImage3D:\"texSubImage3D\",transformFeedbackVaryings:\"transformFeedbackVaryings\",uniform1ui:\"uniform\",uniform2ui:\"uniform\",uniform3ui:\"uniform\",uniform4ui:\"uniform\",uniform1fv:\"uniform\",uniform2fv:\"uniform\",uniform3fv:\"uniform\",uniform4fv:\"uniform\",uniform1iv:\"uniform\",uniform2iv:\"uniform\",uniform3iv:\"uniform\",uniform4iv:\"uniform\",uniform1uiv:\"uniform\",uniform2uiv:\"uniform\",uniform3uiv:\"uniform\",uniform4uiv:\"uniform\",uniformBlockBinding:\"uniformBlockBinding\",uniformMatrix2fv:\"uniformMatrix\",uniformMatrix3x2fv:\"uniformMatrix\",uniformMatrix4x2fv:\"uniformMatrix\",uniformMatrix2x3fv:\"uniformMatrix\",uniformMatrix3fv:\"uniformMatrix\",uniformMatrix4x3fv:\"uniformMatrix\",uniformMatrix2x4fv:\"uniformMatrix\",uniformMatrix3x4fv:\"uniformMatrix\",uniformMatrix4fv:\"uniformMatrix\",vertexAttribDivisor:\"vertexAttribDivisor\",vertexAttribI4i:\"vertexAttribI\",vertexAttribI4ui:\"vertexAttribI\",vertexAttribI4iv:\"vertexAttribI\",vertexAttribI4uiv:\"vertexAttribI\",vertexAttribIPointer:\"vertexAttribIPointer\",waitSync:\"waitSync\"},t.WebGLFunctions={uniform1f:\"uniform\",uniform1fv:\"uniform\",uniform1i:\"uniform\",uniform1iv:\"uniform\",uniform2f:\"uniform\",uniform2fv:\"uniform\",uniform2i:\"uniform\",uniform2iv:\"uniform\",uniform3f:\"uniform\",uniform3i:\"uniform\",uniform3iv:\"uniform\",uniform4f:\"uniform\",uniform4fv:\"uniform\",uniform4i:\"uniform\",uniform4iv:\"uniform\",uniformMatrix2fv:\"uniformMatrix\",uniformMatrix3fv:\"uniformMatrix\",uniformMatrix4fv:\"uniformMatrix\",vertexAttrib1f:\"vertexAttrib\",vertexAttrib2f:\"vertexAttrib\",vertexAttrib3f:\"vertexAttrib\",vertexAttrib4f:\"vertexAttrib\",vertexAttrib1fv:\"vertexAttrib\",vertexAttrib2fv:\"vertexAttrib\",vertexAttrib3fv:\"vertexAttrib\",vertexAttrib4fv:\"vertexAttrib\"},e.MDNCommandLinkHelper=t}(e.EmbeddedFrontend||(e.EmbeddedFrontend={}))}(n||(n={}));var n;!function(e){!function(e){var t=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t.prototype.render=function(e,t){var n=(a=['\\n            <div class=\"jsonContentComponent\" childrenContainer=\"true\">\\n            </div>'],a.raw=['\\n            <div class=\"jsonContentComponent\" childrenContainer=\"true\">\\n            </div>'],this.htmlTemplate(a));return this.renderElementFromTemplate(n,e,t);var a},t}(e.BaseComponent);e.JSONContentComponent=t}(e.EmbeddedFrontend||(e.EmbeddedFrontend={}))}(n||(n={}));var n;!function(e){!function(e){var t=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t.prototype.render=function(e,t){var n=(a=['\\n            <div class=\"jsonGroupComponent\">\\n                <div class=\"jsonGroupComponentTitle\">','</div>\\n                <ul childrenContainer=\"true\"></ul>\\n            </div>'],a.raw=['\\n            <div class=\"jsonGroupComponent\">\\n                <div class=\"jsonGroupComponentTitle\">','</div>\\n                <ul childrenContainer=\"true\"></ul>\\n            </div>'],this.htmlTemplate(a,e?e.replace(/([A-Z])/g,\" $1\").trim():\"\"));return this.renderElementFromTemplate(n,e,t);var a},t}(e.BaseComponent);e.JSONGroupComponent=t}(e.EmbeddedFrontend||(e.EmbeddedFrontend={}))}(n||(n={}));var n;!function(e){!function(e){var t=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t.prototype.render=function(e,t){var n=(a=['\\n            <li><span class=\"jsonItemComponentKey\">',': </span><span class=\"jsonItemComponentValue\">',\"</span><li>\"],a.raw=['\\n            <li><span class=\"jsonItemComponentKey\">',': </span><span class=\"jsonItemComponentValue\">',\"</span><li>\"],this.htmlTemplate(a,e.key,e.value));return this.renderElementFromTemplate(n,e,t);var a},t}(e.BaseComponent);e.JSONItemComponent=t}(e.EmbeddedFrontend||(e.EmbeddedFrontend={}))}(n||(n={}));var n;!function(e){!function(e){var t=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t.prototype.render=function(e,t){var n=(a=['\\n            <li class=\"jsonItemImageHolder\"><div class=\"jsonItemImage\"><img src=\"','\"/><span>',\"</span></div></li>\"],a.raw=['\\n            <li class=\"jsonItemImageHolder\"><div class=\"jsonItemImage\"><img src=\"','\"/><span>',\"</span></div></li>\"],this.htmlTemplate(a,e.value,e.key));return this.renderElementFromTemplate(n,e,t);var a},t}(e.BaseComponent);e.JSONImageItemComponent=t}(e.EmbeddedFrontend||(e.EmbeddedFrontend={}))}(n||(n={}));var n;!function(e){!function(e){var t=function(e){function t(t,n){var a=e.call(this,t,n)||this;return a.onOpenSourceClicked=a.createEvent(\"onOpenSourceClicked\"),a}return a(t,e),t.prototype.render=function(e,t){var n=(a=['\\n            <li commandName=\"onOpenSourceClicked\"><span class=\"jsonItemComponentKey\">',': </span><span class=\"jsonSourceItemComponentOpen\">Click to Open.</span><li>'],a.raw=['\\n            <li commandName=\"onOpenSourceClicked\"><span class=\"jsonItemComponentKey\">',': </span><span class=\"jsonSourceItemComponentOpen\">Click to Open.</span><li>'],this.htmlTemplate(a,e.key));return this.renderElementFromTemplate(n,e,t);var a},t}(e.BaseComponent);e.JSONSourceItemComponent=t}(e.EmbeddedFrontend||(e.EmbeddedFrontend={}))}(n||(n={}));var n;!function(e){!function(e){var t=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t.prototype.render=function(e,t){var n=(a=['\\n            <li><span class=\"jsonItemComponentKey\">',': </span>\\n                <span class=\"jsonItemComponentValue\">',' (<a href=\"','\" target=\"_blank\" class=\"jsonSourceItemComponentOpen\">Open help page</a>)\\n                </span>\\n            <li>'],a.raw=['\\n            <li><span class=\"jsonItemComponentKey\">',': </span>\\n                <span class=\"jsonItemComponentValue\">',' (<a href=\"','\" target=\"_blank\" class=\"jsonSourceItemComponentOpen\">Open help page</a>)\\n                </span>\\n            <li>'],this.htmlTemplate(a,e.key,e.value,e.help));return this.renderElementFromTemplate(n,e,t);var a},t}(e.BaseComponent);e.JSONHelpItemComponent=t}(e.EmbeddedFrontend||(e.EmbeddedFrontend={}))}(n||(n={}));var n;!function(e){!function(e){var t=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t.prototype.render=function(e,t){var n=document.createElement(\"div\");if(n.className=\"jsonVisualStateItemComponent\",e.Attachments)for(var a=0,r=e.Attachments;a<r.length;a++){var o=r[a];if(o.src){var i=document.createElement(\"img\");if(i.src=encodeURI(o.src),n.appendChild(i),e.Attachments.length>1){var s=document.createElement(\"span\");s.innerText=o.attachmentName,n.appendChild(s)}}}else{var u=document.createElement(\"span\");u.innerText=e.FrameBufferStatus,n.appendChild(u)}var l=document.createElement(\"span\");return l.innerText=e.FrameBuffer?e.FrameBuffer.__SPECTOR_Object_TAG.displayText:\"Canvas frame buffer\",n.appendChild(l),n},t}(e.BaseComponent);e.JSONVisualStateItemComponent=t}(e.EmbeddedFrontend||(e.EmbeddedFrontend={}))}(n||(n={}));var n;!function(e){!function(e){var t=function(e){function t(t,n){var a=e.call(this,t,n)||this;return a.onCapturesClicked=a.createEvent(\"onCapturesClicked\"),a.onCommandsClicked=a.createEvent(\"onCommandsClicked\"),a.onInformationClicked=a.createEvent(\"onInformationClicked\"),a.onInitStateClicked=a.createEvent(\"onInitStateClicked\"),a.onEndStateClicked=a.createEvent(\"onEndStateClicked\"),a.onCloseClicked=a.createEvent(\"onCloseClicked\"),a.onSearchTextChanged=a.createEvent(\"onSearchTextChanged\"),a.onSearchTextCleared=a.createEvent(\"onSearchTextCleared\"),a}return a(t,e),t.prototype.render=function(e,t){var n=(i=['<ul class=\"resultViewMenuComponent\">\\n                <li class=\"resultViewMenuOpen resultViewMenuSmall\"><a href=\"#\" role=\"button\">Menu</a></li>\\n\\n                <li class=\"searchContainer\">\\n                    <input type=\"text\" placeHolder=\"Search...\" value=\"','\" commandName=\"onSearchTextChanged\" commandEventBinding=\"change\">\\n                    <a class=\"clearSearch\" href=\"#\" CommandName=\"onSearchTextCleared\">X</a>\\n                </li>\\n                <li><a class=\"',' href=\"#\" role=\"button\" commandName=\"onCapturesClicked\">Captures</a></li>\\n                <li><a class=\"',' href=\"#\" role=\"button\" commandName=\"onInformationClicked\">Information</a></li>\\n                <li><a class=\"',' href=\"#\" role=\"button\" commandName=\"onInitStateClicked\">Init State</a></li>\\n                <li>\\n                    <a class=\"',' href=\"#\" role=\"button\" commandName=\"onCommandsClicked\">\\n                        Commands','\\n                    </a>\\n                </li>\\n                <li><a class=\"',' href=\"#\" role=\"button\" commandName=\"onEndStateClicked\">End State</a></li>\\n                <li><a href=\"#\" role=\"button\" commandName=\"onCloseClicked\">Close</a></li>\\n            </ul>'],i.raw=['<ul class=\"resultViewMenuComponent\">\\n                <li class=\"resultViewMenuOpen resultViewMenuSmall\"><a href=\"#\" role=\"button\">Menu</a></li>\\n\\n                <li class=\"searchContainer\">\\n                    <input type=\"text\" placeHolder=\"Search...\" value=\"','\" commandName=\"onSearchTextChanged\" commandEventBinding=\"change\">\\n                    <a class=\"clearSearch\" href=\"#\" CommandName=\"onSearchTextCleared\">X</a>\\n                </li>\\n                <li><a class=\"',' href=\"#\" role=\"button\" commandName=\"onCapturesClicked\">Captures</a></li>\\n                <li><a class=\"',' href=\"#\" role=\"button\" commandName=\"onInformationClicked\">Information</a></li>\\n                <li><a class=\"',' href=\"#\" role=\"button\" commandName=\"onInitStateClicked\">Init State</a></li>\\n                <li>\\n                    <a class=\"',' href=\"#\" role=\"button\" commandName=\"onCommandsClicked\">\\n                        Commands','\\n                    </a>\\n                </li>\\n                <li><a class=\"',' href=\"#\" role=\"button\" commandName=\"onEndStateClicked\">End State</a></li>\\n                <li><a href=\"#\" role=\"button\" commandName=\"onCloseClicked\">Close</a></li>\\n            </ul>'],this.htmlTemplate(i,e.searchText,0===e.status?\"active\":\"\",10===e.status?\"active\":\"\",20===e.status?\"active\":\"\",40===e.status?\"active\":\"\",e.commandCount>0?\" (\"+e.commandCount+\")\":\"\",30===e.status?\"active\":\"\")),a=this.renderElementFromTemplate(n,e,t),r=a.querySelector(\".resultViewMenuOpen\"),o=a.querySelectorAll(\"li:not(.resultViewMenuSmall)\");return r.addEventListener(\"click\",function(e){if(\"true\"===r.getAttribute(\"open\")){r.setAttribute(\"open\",\"false\");for(var t=0;t<o.length;t++)o[t].style.display=\"none\",o[t].style.visibility=\"hidden\"}else{r.setAttribute(\"open\",\"true\");for(var t=0;t<o.length;t++)o[t].style.display=\"block\",o[t].style.visibility=\"visible\"}}),a;var i},t}(e.BaseComponent);e.ResultViewMenuComponent=t}(e.EmbeddedFrontend||(e.EmbeddedFrontend={}))}(n||(n={}));var n;!function(e){!function(e){var t=function(e){function t(t,n){return e.call(this,t,n)||this}return a(t,e),t.prototype.render=function(e,t){return this.renderElementFromTemplate('<div childrenContainer=\"true\" class=\"resultViewContentComponent\"></div>',e,t)},t}(e.BaseComponent);e.ResultViewContentComponent=t}(e.EmbeddedFrontend||(e.EmbeddedFrontend={}))}(n||(n={}));var n;!function(e){!function(e){var t=function(e){function t(t,n){return e.call(this,t,n)||this}return a(t,e),t.prototype.render=function(e,t){var n=(a=['\\n                <div childrenContainer=\"true\" class=\"','\"></div>'],a.raw=['\\n                <div childrenContainer=\"true\" class=\"','\"></div>'],this.htmlTemplate(a,e?\"informationColumnLeftComponent\":\"informationColumnRightComponent\"));return this.renderElementFromTemplate(n,e,t);var a},t}(e.BaseComponent);e.InformationColumnComponent=t}(e.EmbeddedFrontend||(e.EmbeddedFrontend={}))}(n||(n={}));var n;!function(e){!function(e){var t=function(e){function t(t,n){return e.call(this,t,n)||this}return a(t,e),t.prototype.render=function(e,t){var n=(a=['\\n            <div childrenContainer=\"true\" class=\"resultViewComponent ','\">\\n            </div>'],a.raw=['\\n            <div childrenContainer=\"true\" class=\"resultViewComponent ','\">\\n            </div>'],this.htmlTemplate(a,e?\"active\":\"\"));return this.renderElementFromTemplate(n,e,t);var a},t}(e.BaseComponent);e.ResultViewComponent=t}(e.EmbeddedFrontend||(e.EmbeddedFrontend={}))}(n||(n={}));var n;!function(e){!function(e){var t=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t.prototype.render=function(e,t){var n=e.source?this._indentIfdef(this._beautify(e.source)):\"\",a=(o=['\\n            <div class=\"sourceCodeComponent\">\\n                <span class=\"sourceCodeComponentTitle\">','</span>\\n                <pre class=\"language-glsl\"><code>',\"</code></pre>\\n            </div>\"],o.raw=['\\n            <div class=\"sourceCodeComponent\">\\n                <span class=\"sourceCodeComponentTitle\">','</span>\\n                <pre class=\"language-glsl\"><code>',\"</code></pre>\\n            </div>\"],this.htmlTemplate(o,e.description,n)),r=this.renderElementFromTemplate(a.replace(/<br>/g,\"\\n\"),e,t);return Prism.highlightElement(r.querySelector(\"pre\")),r;var o},t.prototype._getBracket=function(e,t){void 0===t&&(t=-1);for(var n=e.indexOf(\"{\",t),a=e.substr(n+1).split(\"\"),r=1,o=n,i=0,s=0,u=a;s<u.length;s++){var l=u[s];if(o++,\"{\"===l&&r++,\"}\"===l&&r--,0===r){i=o;break}}return n>-1&&0===i?this._getBracket(e,n+1):{firstIteration:n,lastIteration:i}},t.prototype._beautify=function(e,t){void 0===t&&(t=0),e=e.trim();for(var n=this._getBracket(e),a=n.firstIteration,r=n.lastIteration,o=\"\",i=0;i<t;i++)o+=\"    \";if(-1===a)return e=o+e,e=e.replace(/;(?![^\\(]*\\))\\s*/g,\";\\n\"),e=e.replace(/\\s*([*+-\\/=><\\s]*=)\\s*/g,function(e){return\" \"+e.trim()+\" \"}),e=e.replace(/\\s*(,)\\s*/g,function(e){return e.trim()+\" \"}),e=e.replace(/\\n[ \\t]+/g,\"\\n\"),e=e.replace(/\\n/g,\"\\n\"+o),e=e.replace(/\\s+$/g,\"\"),e=e.replace(/\\n+$/g,\"\");var s=e.substr(0,a),u=e.substr(r+1,e.length),l=e.substr(a+1,r-a-1).trim(),c=this._beautify(l,t+1);return(this._beautify(s,t)+\" {\\n\"+c+\"\\n\"+o+\"}\\n\"+this._beautify(u,t)).replace(/\\s*\\n+\\s*;/g,\";\")},t.prototype._indentIfdef=function(e){for(var t=0,n=e.split(\"\\n\"),a=0;a<n.length;a++){var r=n[a];-1!==r.indexOf(\"#endif\")&&t--,-1!==r.indexOf(\"#else\")&&t--;for(var o=\"\",i=0;i<t;i++)o+=\"    \";n[a]=o+r,-1===r.indexOf(\"#if\")&&-1===r.indexOf(\"#else\")||t++}return n.join(\"\\n\")},t}(e.BaseComponent);e.SourceCodeComponent=t}(e.EmbeddedFrontend||(e.EmbeddedFrontend={}))}(n||(n={}));var n;!function(e){!function(e){var t=function(){function t(t,n){var a=this;this.options=t,this.logger=n,this.rootPlaceHolder=t.rootPlaceHolder||document.body,this.mvx=new e.MVX(this.rootPlaceHolder,n),this.searchText=\"\",this.currentCommandId=-1,this.visible=!1,this.commandCount=0,this.commandListStateId=-1,this.commandDetailStateId=-1,this.currentCaptureStateId=-1,this.currentCommandStateId=-1,this.currentVisualStateId=-1,this.visualStateListStateId=-1,this.initVisualStateId=-1,this.captureListComponent=new e.CaptureListComponent(t.eventConstructor,n),this.captureListItemComponent=new e.CaptureListItemComponent(t.eventConstructor,n),this.visualStateListComponent=new e.VisualStateListComponent(t.eventConstructor,n),this.visualStateListItemComponent=new e.VisualStateListItemComponent(t.eventConstructor,n),this.commandListComponent=new e.CommandListComponent(t.eventConstructor,n),this.commandListItemComponent=new e.CommandListItemComponent(t.eventConstructor,n),this.commandDetailComponent=new e.CommandDetailComponent(t.eventConstructor,n),this.jsonContentComponent=new e.JSONContentComponent(t.eventConstructor,n),this.jsonGroupComponent=new e.JSONGroupComponent(t.eventConstructor,n),this.jsonItemComponent=new e.JSONItemComponent(t.eventConstructor,n),this.jsonImageItemComponent=new e.JSONImageItemComponent(t.eventConstructor,n),this.jsonSourceItemComponent=new e.JSONSourceItemComponent(t.eventConstructor,n),this.jsonHelpItemComponent=new e.JSONHelpItemComponent(t.eventConstructor,n),this.jsonVisualStateItemComponent=new e.JSONVisualStateItemComponent(t.eventConstructor,n),this.resultViewMenuComponent=new e.ResultViewMenuComponent(t.eventConstructor,n),this.resultViewContentComponent=new e.ResultViewContentComponent(t.eventConstructor,n),this.resultViewComponent=new e.ResultViewComponent(t.eventConstructor,n),this.sourceCodeComponent=new e.SourceCodeComponent(t.eventConstructor,n),this.informationColumnComponent=new e.InformationColumnComponent(t.eventConstructor,n),this.rootStateId=this.mvx.addRootState(null,this.resultViewComponent),this.menuStateId=this.mvx.addChildState(this.rootStateId,null,this.resultViewMenuComponent),this.contentStateId=this.mvx.addChildState(this.rootStateId,null,this.resultViewContentComponent),this.captureListStateId=this.mvx.addChildState(this.rootStateId,!1,this.captureListComponent),this.initMenuComponent(),this.captureListComponent.onCaptureLoaded.add(function(e){a.addCapture(e)}),this.captureListItemComponent.onCaptureSelected.add(function(e){a.selectCapture(e.stateId)}),this.captureListItemComponent.onSaveRequested.add(function(e){a.saveCapture(e.state.capture)}),this.commandListItemComponent.onCommandSelected.add(function(e){a.selectCommand(e.stateId)}),this.visualStateListItemComponent.onVisualStateSelected.add(function(e){a.selectVisualState(e.stateId)}),this.jsonSourceItemComponent.onOpenSourceClicked.add(function(e){a.mvx.removeChildrenStates(a.contentStateId);a.mvx.addChildState(a.contentStateId,{description:\"WebGl Shader Source Code:\",source:e.state.value},a.sourceCodeComponent)}),this.updateViewState()}return t.prototype.saveCapture=function(e){var t=document.createElement(\"a\"),n=JSON.stringify(e,null,4),a=new Blob([n],{type:\"octet/stream\"}),r=window.URL.createObjectURL(a);t.setAttribute(\"href\",r),t.setAttribute(\"download\",\"capture \"+new Date(e.startTime).toTimeString().split(\" \")[0]+\".json\"),t.click()},t.prototype.selectCapture=function(e){this.currentCommandId=-1,this.currentCaptureStateId=e,this.displayCurrentCapture()},t.prototype.selectCommand=function(e){this.currentCommandStateId=e,this.currentVisualStateId=this.displayCurrentCommand(),this.displayCurrentVisualState()},t.prototype.selectVisualState=function(e){this.currentVisualStateId=e,this.currentCommandStateId=this.displayCurrentVisualState(),this.displayCurrentCommand()},t.prototype.display=function(){this.visible=!0,this.updateViewState()},t.prototype.hide=function(){this.visible=!1,this.updateViewState()},t.prototype.addCapture=function(e){var t=this.mvx.insertChildState(this.captureListStateId,{capture:e,active:!1},0,this.captureListItemComponent);return this.selectCapture(t),t},t.prototype.initMenuComponent=function(){var e=this;this.mvx.updateState(this.menuStateId,{status:0,searchText:this.searchText,commandCount:0}),this.resultViewMenuComponent.onCloseClicked.add(function(t){e.hide()}),this.resultViewMenuComponent.onCapturesClicked.add(function(t){e.displayCaptures()}),this.resultViewMenuComponent.onCommandsClicked.add(function(t){e.displayCurrentCapture()}),this.resultViewMenuComponent.onInformationClicked.add(function(t){e.displayInformation()}),this.resultViewMenuComponent.onInitStateClicked.add(function(t){e.displayInitState()}),this.resultViewMenuComponent.onEndStateClicked.add(function(t){e.displayEndState()}),this.resultViewMenuComponent.onSearchTextChanged.add(function(t){e.search(t.sender.value)}),this.resultViewMenuComponent.onSearchTextCleared.add(function(t){e.mvx.updateState(e.menuStateId,{status:t.state.status,searchText:\"\",commandCount:t.state.commandCount}),e.search(\"\")})},t.prototype.onCaptureRelatedAction=function(e){var t=this.mvx.getGenericState(this.currentCaptureStateId);return this.commandCount=t.capture.commands.length,this.mvx.removeChildrenStates(this.contentStateId),this.mvx.updateState(this.menuStateId,{status:e,searchText:this.searchText,commandCount:this.commandCount}),this.mvx.getGenericState(this.captureListStateId)&&this.mvx.updateState(this.captureListStateId,!1),t.capture},t.prototype.displayCaptures=function(){this.mvx.updateState(this.menuStateId,{status:0,searchText:this.searchText,commandCount:this.commandCount}),this.mvx.updateState(this.captureListStateId,!0)},t.prototype.displayInformation=function(){var e=this.onCaptureRelatedAction(10),t=this.mvx.addChildState(this.contentStateId,!0,this.informationColumnComponent),n=this.mvx.addChildState(this.contentStateId,!1,this.informationColumnComponent),a=this.mvx.addChildState(t,null,this.jsonContentComponent);this.displayJSONGroup(a,\"Canvas\",e.canvas),this.displayJSONGroup(a,\"Context\",e.context);for(var r=this.mvx.addChildState(n,null,this.jsonContentComponent),o=0,i=e.analyses;o<i.length;o++){var s=i[o];this.displayJSONGroup(r,s.analyserName,s)}this.displayJSONGroup(r,\"Frame Memory Changes\",e.frameMemory),this.displayJSONGroup(r,\"Total Memory (seconds since application start: bytes)\",e.memory)},t.prototype.displayJSON=function(e,t){t.VisualState&&this.mvx.addChildState(e,t.VisualState,this.jsonVisualStateItemComponent);for(var n in t)if(\"VisualState\"!==n&&\"analyserName\"!==n){var a=t[n];if(\"source\"===n)this.mvx.addChildState(e,{key:n,value:a},this.jsonSourceItemComponent);else if(\"visual\"===n)for(var r in a)a.hasOwnProperty(r)&&a[r]&&this.mvx.addChildState(e,{key:r,value:a[r]},this.jsonImageItemComponent);else{var o=this.getJSONAsString(e,n,a);if(null===o||void 0===o)continue;if(this.toFilter(n)&&this.toFilter(a))continue;this.mvx.addChildState(e,{key:n,value:o},this.jsonItemComponent)}a&&a.__SPECTOR_Metadata&&this.displayJSONGroup(e,\"Metadata\",a.__SPECTOR_Metadata)}},t.prototype.getJSONAsString=function(e,t,n){if(null===n)return\"null\";if(void 0===n)return\"undefined\";if(\"number\"==typeof n)return Math.floor(n)===n?n.toFixed(0):n.toFixed(4);if(\"string\"==typeof n)return n;if(\"boolean\"==typeof n)return n?\"true\":\"false\";if(0===n.length)return\"Empty Array\";if(n.length){for(var a=[],r=0;r<n.length;r++){var o=this.getJSONAsString(e,t+\"(\"+r.toFixed(0)+\")\",n[r]);null!==o&&a.push(o)}return 0===a.length?null:a.join(\", \")}return n.help?(this.mvx.addChildState(e,{key:t,value:n.name,help:n.help},this.jsonHelpItemComponent),null):n.__SPECTOR_Object_TAG?n.__SPECTOR_Object_TAG.displayText:n.displayText?n.displayText:(\"object\"==typeof n&&this.displayJSONGroup(e,t,n),null)},t.prototype.displayJSONGroup=function(e,t,n){if(n){var a=this.mvx.addChildState(e,t,this.jsonGroupComponent);this.displayJSON(a,n),this.mvx.hasChildren(a)||this.mvx.removeState(a)}},t.prototype.displayInitState=function(){var e=this.onCaptureRelatedAction(20),t=this.mvx.addChildState(this.contentStateId,null,this.jsonContentComponent);this.displayJSON(t,e.initState)},t.prototype.displayEndState=function(){var e=this.onCaptureRelatedAction(30),t=this.mvx.addChildState(this.contentStateId,null,this.jsonContentComponent);this.displayJSON(t,e.endState)},t.prototype.displayCurrentCapture=function(){var e=this.onCaptureRelatedAction(40);this.mvx.updateAllChildrenGenericState(this.captureListStateId,function(e){return e.active=!1,e}),this.mvx.updateState(this.currentCaptureStateId,{capture:e,active:!0}),this.createVisualStates(e),this.commandListStateId=this.mvx.addChildState(this.contentStateId,null,this.commandListComponent),this.commandDetailStateId=this.mvx.addChildState(this.contentStateId,null,this.commandDetailComponent),this.createCommands(e)},t.prototype.displayCurrentCommand=function(){if(40!==this.mvx.getGenericState(this.menuStateId).status)return-1;var t=this.mvx.getGenericState(this.currentCommandStateId),n=t.capture;this.currentCommandId=n.id,this.mvx.updateAllChildrenGenericState(this.commandListStateId,function(e){return e.active=!1,e}),this.mvx.updateState(this.currentCommandStateId,{capture:n,visualStateId:t.visualStateId,active:!0}),this.mvx.removeChildrenStates(this.commandDetailStateId);var a=this.mvx.getGenericState(t.visualStateId);this.mvx.addChildState(this.commandDetailStateId,a.VisualState,this.jsonVisualStateItemComponent);var r=\"Unknown\";switch(n.status){case 50:r=\"Deprecated\";break;case 10:r=\"Unused\";break;case 20:r=\"Disabled\";break;case 30:r=\"Redundant\";break;case 40:r=\"Valid\"}var o=e.MDNCommandLinkHelper.getMDNLink(n.name);n.result?this.displayJSONGroup(this.commandDetailStateId,\"Global\",{name:{help:o,name:n.name},duration:n.commandEndTime-n.startTime,result:n.result,status:r}):this.displayJSONGroup(this.commandDetailStateId,\"Global\",{name:{help:o,name:n.name},duration:n.commandEndTime-n.startTime,status:r});for(var i in n)\"VisualState\"!==i&&\"result\"!==i&&\"object\"==typeof n[i]&&this.displayJSONGroup(this.commandDetailStateId,i,n[i]);return t.visualStateId},t.prototype.displayCurrentVisualState=function(){if(40!==this.mvx.getGenericState(this.menuStateId).status)return null;var e=this.mvx.getGenericState(this.currentVisualStateId);return e.commandStateId===Number.MIN_VALUE?this.displayInitState():e.commandStateId===Number.MAX_VALUE&&this.displayEndState(),this.mvx.updateAllChildrenGenericState(this.visualStateListStateId,function(e){return e.active=!1,e}),e.active=!0,this.mvx.updateState(this.currentVisualStateId,e),e.commandStateId},t.prototype.createVisualStates=function(e){this.visualStateListStateId=this.mvx.addChildState(this.contentStateId,null,this.visualStateListComponent),this.mvx.removeChildrenStates(this.visualStateListStateId),this.initVisualStateId=this.mvx.addChildState(this.visualStateListStateId,{VisualState:e.initState.VisualState,time:e.startTime,commandStateId:Number.MIN_VALUE,active:!1},this.visualStateListItemComponent)},t.prototype.createCommands=function(e){this.mvx.removeChildrenStates(this.commandListStateId);for(var t=this.initVisualStateId,n=!1,a=0;a<e.commands.length;a++){var r=e.commands[a];if(!this.toFilter(r.name)||r.id===this.currentCommandId){var o=this.mvx.addChildState(this.commandListStateId,{capture:r,active:!1},this.commandListItemComponent);if(r.VisualState)t=this.mvx.addChildState(this.visualStateListStateId,{VisualState:r.VisualState,time:r.endTime,commandStateId:o,active:!1},this.visualStateListItemComponent),n=!0;else if(!n){var i=this.mvx.getGenericState(this.initVisualStateId);i.commandStateId=o,this.mvx.updateState(this.initVisualStateId,i),n=!0}this.mvx.updateState(o,{capture:r,active:!1,visualStateId:t}),(-1===this.currentCommandId&&0===a||this.currentCommandId===r.id)&&(this.currentCommandStateId=o,this.displayCurrentCommand(),this.currentVisualStateId=t,this.displayCurrentVisualState())}}},t.prototype.updateViewState=function(){this.mvx.updateState(this.rootStateId,this.visible)},t.prototype.toFilter=function(e){return e+=\"\",!!(this.searchText&&this.searchText.length>2&&-1===e.indexOf(this.searchText))},t.prototype.search=function(e){switch(this.searchText=e,this.mvx.getGenericState(this.menuStateId).status){case 0:case 40:this.displayCurrentCapture();break;case 30:this.displayEndState();break;case 10:this.displayInformation();break;case 20:this.displayInitState()}this.searchText=\"\"},t}();e.ResultView=t}(e.EmbeddedFrontend||(e.EmbeddedFrontend={}))}(n||(n={}));var n;!function(e){!function(t){t.DefaultInjection={WebGlObjectNamespace:e.WebGlObjects,RecorderNamespace:e.Recorders,CommandNamespace:e.Commands,StateNamespace:e.States,AnalyserNamespace:e.Analysers,StackTraceCtor:e.Utils.StackTrace,LoggerCtor:e.Utils.ConsoleLogger,EventCtor:e.Utils.Event,TimeCtor:e.Utils.Time,CanvasSpyCtor:e.Spies.CanvasSpy,CommandSpyCtor:e.Spies.CommandSpy,ContextSpyCtor:e.Spies.ContextSpy,RecorderSpyCtor:e.Spies.RecorderSpy,StateSpyCtor:e.Spies.StateSpy,TimeSpyCtor:e.Spies.TimeSpy,WebGlObjectSpyCtor:e.Spies.WebGlObjectSpy,CaptureAnalyserCtor:e.Analysers.CaptureAnalyser,ExtensionsCtor:e.States.Information.Extensions,CapabilitiesCtor:e.States.Information.Capabilities,CompressedTexturesCtor:e.States.Information.CompressedTextures,DefaultCommandCtor:e.Commands.DefaultCommand,CaptureMenuConstructor:e.EmbeddedFrontend.CaptureMenu,ResultViewConstructor:e.EmbeddedFrontend.ResultView}}(e.ProvidedInjection||(e.ProvidedInjection={}))}(n||(n={}));var n;!function(e){var t=function(){function t(t){void 0===t&&(t={}),this.options=t,this.noFrameTimeout=-1,this.injection=t.injection||e.ProvidedInjection.DefaultInjection,this.captureNextFrames=0,this.retry=0,this.contexts=[],this.logger=new this.injection.LoggerCtor,this.time=new this.injection.TimeCtor,this.timeSpy=new this.injection.TimeSpyCtor({eventConstructor:this.injection.EventCtor,timeConstructor:this.injection.TimeCtor},this.logger),this.onCaptureStarted=new this.injection.EventCtor,this.onCapture=new this.injection.EventCtor,this.onError=new this.injection.EventCtor,this.timeSpy.onFrameStart.add(this.onFrameStart,this),this.timeSpy.onFrameEnd.add(this.onFrameEnd,this),this.timeSpy.onError.add(this.onErrorInternal,this)}return t.getFirstAvailable3dContext=function(e){return this.tryGetContextFromHelperField(e)||this.tryGetContextFromCanvas(e,\"webgl\")||this.tryGetContextFromCanvas(e,\"experimental-webgl\")||this.tryGetContextFromCanvas(e,\"webgl2\")||this.tryGetContextFromCanvas(e,\"experimental-webgl2\")},t.tryGetContextFromHelperField=function(e){var t=e.getAttribute(\"__spector_context_type\");if(t)return this.tryGetContextFromCanvas(e,t)},t.tryGetContextFromCanvas=function(e,t){var n;try{n=e.getContext(t)}catch(e){}return n},t.prototype.displayUI=function(){var e=this;this.captureMenu||(this.getCaptureUI(),this.captureMenu.onPauseRequested.add(this.pause,this),this.captureMenu.onPlayRequested.add(this.play,this),this.captureMenu.onPlayNextFrameRequested.add(this.playNextFrame,this),this.captureMenu.onCaptureRequested.add(function(t){t&&e.captureCanvas(t.ref)},this),setInterval(function(){e.captureMenu.setFPS(e.getFps())},1e3),this.captureMenu.trackPageCanvases(),this.captureMenu.display()),this.resultView||(this.getResultUI(),this.onCapture.add(function(t){e.resultView.display(),e.resultView.addCapture(t)}))},t.prototype.getResultUI=function(){return this.resultView||(this.resultView=new this.injection.ResultViewConstructor({eventConstructor:this.injection.EventCtor},this.logger)),this.resultView},t.prototype.getCaptureUI=function(){return this.captureMenu||(this.captureMenu=new this.injection.CaptureMenuConstructor({eventConstructor:this.injection.EventCtor},this.logger)),this.captureMenu},t.prototype.pause=function(){this.timeSpy.changeSpeedRatio(0)},t.prototype.play=function(){this.timeSpy.changeSpeedRatio(1)},t.prototype.playNextFrame=function(){this.timeSpy.playNextFrame()},t.prototype.drawOnlyEveryXFrame=function(e){this.timeSpy.changeSpeedRatio(e)},t.prototype.getFps=function(){return this.timeSpy.getFps()},t.prototype.spyCanvases=function(){if(this.canvasSpy)return void this.onErrorInternal(\"Already spying canvas.\");this.canvasSpy=new this.injection.CanvasSpyCtor({eventConstructor:this.injection.EventCtor},this.logger),this.canvasSpy.onContextRequested.add(this.spyContext,this)},t.prototype.spyCanvas=function(e){if(this.canvasSpy)return void this.onErrorInternal(\"Already spying canvas.\");this.canvasSpy=new this.injection.CanvasSpyCtor({eventConstructor:this.injection.EventCtor,canvas:e},this.logger),this.canvasSpy.onContextRequested.add(this.spyContext,this)},t.prototype.getAvailableContexts=function(){return this.getAvailableContexts()},t.prototype.captureCanvas=function(e){var n=this.getAvailableContextSpyByCanvas(e);if(n)this.captureContextSpy(n);else{var a=t.getFirstAvailable3dContext(e);a?this.captureContext(a):this.logger.error(\"No webgl context available on the chosen canvas.\")}},t.prototype.captureContext=function(e){var t=this.getAvailableContextSpyByCanvas(e.canvas);t||(t=e.getIndexedParameter?new this.injection.ContextSpyCtor({context:e,version:2,recordAlways:!1,injection:this.injection},this.time,this.logger):new this.injection.ContextSpyCtor({context:e,version:1,recordAlways:!1,injection:this.injection},this.time,this.logger),this.contexts.push({canvas:t.context.canvas,contextSpy:t})),t&&this.captureContextSpy(t)},t.prototype.captureContextSpy=function(e){var t=this;this.capturingContext?this.onErrorInternal(\"Already capturing a context.\"):(this.retry=0,this.capturingContext=e,this.capture(),this.noFrameTimeout=setTimeout(function(){t.capturingContext&&t.retry>1?t.onErrorInternal(\"No frames with gl commands detected. Try moving the camera.\"):t.onErrorInternal(\"No frames detected. Try moving the camera or implementing animationRequestFrame.\")},1e4))},t.prototype.capture=function(e){void 0===e&&(e=1),this.captureNextFrames=e,this.playNextFrame()},t.prototype.spyContext=function(e){var t=this.getAvailableContextSpyByCanvas(e.context.canvas);t||(t=new this.injection.ContextSpyCtor({context:e.context,version:e.contextVersion,recordAlways:!0,injection:this.injection},this.time,this.logger),this.contexts.push({canvas:t.context.canvas,contextSpy:t})),t.spy()},t.prototype.getAvailableContextSpyByCanvas=function(e){for(var t=0,n=this.contexts;t<n.length;t++){var a=n[t];if(a.canvas===e)return a.contextSpy}},t.prototype.onFrameStart=function(){this.captureNextFrames>0?(this.capturingContext&&(this.onCaptureStarted.trigger(void 0),this.capturingContext.startCapture()),this.captureNextFrames--):this.capturingContext=void 0},t.prototype.onFrameEnd=function(){if(this.capturingContext&&0===this.captureNextFrames){var e=this.capturingContext.stopCapture();e.commands.length>0?(this.noFrameTimeout>-1&&clearTimeout(this.noFrameTimeout),this.triggerCapture(e)):(this.retry++,this.capture(1))}},t.prototype.triggerCapture=function(e){this.captureMenu&&this.captureMenu.captureComplete(null),this.onCapture.trigger(e)},t.prototype.onErrorInternal=function(e){if(this.logger.error(e),this.noFrameTimeout>-1&&clearTimeout(this.noFrameTimeout),!this.capturingContext)throw e;this.capturingContext=void 0,this.captureNextFrames=0,this.retry=0,this.captureMenu&&this.captureMenu.captureComplete(e),this.onError.trigger(e)},t}();e.Spector=t}(n||(n={})),e.exports=n},function(e,t,n){var a=n(6);\"string\"==typeof a&&(a=[[e.i,a,\"\"]]);n(1)(a,{insertInto:\"html\"});a.locals&&(e.exports=a.locals)},function(e,t,n){var a=n(7);\"string\"==typeof a&&(a=[[e.i,a,\"\"]]);n(1)(a,{insertInto:\"html\"});a.locals&&(e.exports=a.locals)},function(e,t,n){t=e.exports=n(0)(void 0),t.push([e.i,\"code[class*=language-],pre[class*=language-]{color:#f8f8f2;background:none;text-shadow:0 1px rgba(0,0,0,.3);font-family:Consolas,Monaco,Andale Mono,Ubuntu Mono,monospace;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none}pre[class*=language-]{padding:1em;margin:.5em 0;overflow:auto;border-radius:.3em}:not(pre)>code[class*=language-]{padding:.1em;border-radius:.3em;white-space:normal}.token.cdata,.token.comment,.token.doctype,.token.prolog{color:#708090}.token.punctuation{color:#f8f8f2}.namespace{opacity:.7}.token.constant,.token.deleted,.token.property,.token.symbol,.token.tag{color:#f92672}.token.boolean,.token.number{color:#ae81ff}.token.attr-name,.token.builtin,.token.char,.token.inserted,.token.selector,.token.string{color:#a6e22e}.language-css .token.string,.style .token.string,.token.entity,.token.operator,.token.url,.token.variable{color:#f8f8f2}.token.atrule,.token.attr-value,.token.function{color:#e6db74}.token.keyword{color:#66d9ef}.token.important,.token.regex{color:#fd971f}.token.bold,.token.important{font-weight:700}.token.italic{font-style:italic}.token.entity{cursor:help}\",\"\"])},function(e,t,n){t=e.exports=n(0)(void 0),t.push([e.i,\"@import url(https://fonts.googleapis.com/css?family=Montserrat:300,400);\",\"\"]),t.push([e.i,'.resultViewComponent{position:absolute;z-index:99999;border:1px solid #000;top:0;left:0;bottom:0;right:0;background-color:#222;opacity:1;visibility:hidden;display:none;color:#f9f9f9;font-family:Consolas,monaco,monospace;font-size:14px;font-weight:500}.resultViewComponent.active{visibility:visible;display:block}.resultViewComponent,.resultViewComponent:after,.resultViewComponent:before{box-sizing:content-box}.resultViewMenuComponent{font-family:Montserrat,sans-serif;font-size:13px;font-weight:300;line-height:40px;flex:1 100%;height:40px;outline:0 none;border-bottom:2px solid #222;box-sizing:border-box;list-style:none;margin:0;background:#2c2c2c;display:-webkit-box;display:-moz-box;display:-ms-flexbox;display:-webkit-flex;display:flex;-webkit-flex-flow:row wrap;flex-flow:row wrap;justify-content:flex-end}.resultViewMenuComponent .resultViewMenuOpen{display:none;visibility:hidden}.resultViewMenuComponent a{outline:0 none;text-decoration:none;display:block;padding:0 20px;color:#ccc;background:#2c2c2c;box-sizing:border-box;height:100%}.resultViewMenuComponent a.active{background:#222;color:#fff;font-weight:400;border-bottom:2px solid #f0640d}.resultViewMenuComponent a:hover{background:#222;color:#c9c9c9;cursor:pointer;transition:color .3s;-webkit-transition:color .3s;-moz-transition:color .3s}.resultViewMenuComponent a:hover.active{color:#f0640d;transition:color 0;-webkit-transition:color 0;-moz-transition:color 0}.resultViewMenuComponent a.clearSearch{display:inline-block;padding:0;margin-left:-30px;margin-right:20px;z-index:9000;color:#f9f9f9}.resultViewMenuComponent a.clearSearch:hover{background:#2c2c2c;color:#f0640d}@media (max-width:1024px){.resultViewMenuComponent{padding:0;position:absolute;overflow-y:visible;top:0;left:0;right:0;bottom:0;z-index:999999;display:block}.resultViewMenuComponent .resultViewMenuOpen{display:block;visibility:visible}.resultViewMenuComponent li:not(.resultViewMenuSmall){display:none;visibility:hidden}.resultViewMenuComponent li{background:#2c2c2c}.resultViewMenuComponent li.searchContainer{background:#464646}.resultViewMenuComponent a.active{background:#2c2c2c}}.resultViewMenuComponent input{border:0;font-family:Montserrat,sans-serif;font-weight:300;padding:0 20px;background:#464646;color:#f9f9f9;height:100%;position:relative;top:-1px;box-sizing:border-box}.resultViewMenuComponent input:focus{border:0;outline:0 none}.resultViewMenuComponent .clearSearch{position:relative;background:transparent;display:inline;padding:0;margin-left:-30px;z-index:9000;color:#f0640d}.resultViewMenuComponent .clearSearch:hover{background:transparent!important}.resultViewMenuComponent ::-webkit-input-placeholder{color:#ccc}.resultViewMenuComponent :-moz-placeholder,.resultViewMenuComponent ::-moz-placeholder{color:#ccc}.resultViewMenuComponent :-ms-input-placeholder{color:#ccc}.resultViewContentComponent{position:absolute;top:40px;left:0;bottom:0;right:0}.informationColumnLeftComponent{left:0;right:50%}.informationColumnLeftComponent,.informationColumnRightComponent{position:absolute;top:0;bottom:0;overflow:auto;overflow-x:hidden;overflow-y:visible}.informationColumnRightComponent{left:50%;right:0}.captureListComponent{position:absolute;top:40px;left:0;bottom:0;right:0;background:#222;z-index:9000;display:none;visibility:hidden;overflow-y:visible;overflow-x:hidden}.captureListComponent.active{display:block;visibility:visible}.captureListComponent .openCaptureFile{border:1px dashed #f9f9f9;display:block;margin:5px;padding:5px;text-align:center;font-style:italic}.captureListComponent .openCaptureFile span{line-height:100%;vertical-align:middle}.captureListComponent ul{margin:0;padding:0;list-style:none;display:-webkit-box;display:-moz-box;display:-ms-flexbox;display:-webkit-flex;display:flex;-webkit-flex-flow:row wrap;flex-flow:row wrap;justify-content:flex-start}.captureListComponent ul li{margin:5px;border:1px solid #606060}.captureListComponent ul li img{width:295px;background-image:-moz-linear-gradient(45deg,#d9d9d9 25%,transparent 25%),-moz-linear-gradient(-45deg,#d9d9d9 25%,transparent 25%),-moz-linear-gradient(45deg,transparent 75%,#d9d9d9 75%),-moz-linear-gradient(-45deg,transparent 75%,#d9d9d9 75%);background-image:-webkit-gradient(linear,0 100%,100% 0,color-stop(.25,#c9c9c9),color-stop(.25,transparent)),-webkit-gradient(linear,0 0,100% 100%,color-stop(.25,#c9c9c9),color-stop(.25,transparent)),-webkit-gradient(linear,0 100%,100% 0,color-stop(.75,transparent),color-stop(.75,#c9c9c9)),-webkit-gradient(linear,0 0,100% 100%,color-stop(.75,transparent),color-stop(.75,#c9c9c9));-moz-background-size:50px 50px;background-size:50px 50px;-webkit-background-size:50px 51px;background-position:0 0,25px 0,25px -25px,0 25px;display:block}.captureListComponent ul li span{display:block;text-align:center;border:5px solid #222}.captureListComponent ul li span .captureListItemSave{color:#f9f9f9;font-size:16px;margin-left:10px;position:relative;padding:3px 8px 3px 32px}.captureListComponent ul li span .captureListItemSave:after,.captureListComponent ul li span .captureListItemSave:before{box-sizing:border-box;content:\"\";position:absolute}.captureListComponent ul li span .captureListItemSave:before{background:#d9d9d9;border-color:#f9f9f9;border-style:solid;border-width:7px 2px 1px;border-radius:1px;height:16px;left:8px;top:5px;width:16px}.captureListComponent ul li span .captureListItemSave:after{background:#f9f9f9;border-color:#d9d9d9;border-style:solid;border-width:1px 1px 1px 4px;height:5px;left:13px;top:5px;width:7px}.captureListComponent ul li:hover{cursor:pointer}.captureListComponent ul li.active span{background:#f0640d;border:5px solid #f0640d}.captureListComponent ul li.active span .captureListItemSave:before{background:#f0640d}.captureListComponent ul li.active span .captureListItemSave:after{border-color:#f0640d}.visualStateListComponent{position:absolute;top:0;left:0;bottom:0;padding:5px;right:80%;overflow-y:visible;overflow-x:hidden}.visualStateListComponent ul{margin:0;padding:0;list-style:none}.visualStateListComponent ul li{margin:20px 15px 0;border:1px solid #606060}.visualStateListComponent ul li img{display:block;width:100%;margin:0;padding:0;box-sizing:border-box;background-image:-moz-linear-gradient(45deg,#d9d9d9 25%,transparent 25%),-moz-linear-gradient(-45deg,#d9d9d9 25%,transparent 25%),-moz-linear-gradient(45deg,transparent 75%,#d9d9d9 75%),-moz-linear-gradient(-45deg,transparent 75%,#d9d9d9 75%);background-image:-webkit-gradient(linear,0 100%,100% 0,color-stop(.25,#c9c9c9),color-stop(.25,transparent)),-webkit-gradient(linear,0 0,100% 100%,color-stop(.25,#c9c9c9),color-stop(.25,transparent)),-webkit-gradient(linear,0 100%,100% 0,color-stop(.75,transparent),color-stop(.75,#c9c9c9)),-webkit-gradient(linear,0 0,100% 100%,color-stop(.75,transparent),color-stop(.75,#c9c9c9));-moz-background-size:50px 50px;background-size:50px 50px;-webkit-background-size:50px 51px;background-position:0 0,25px 0,25px -25px,0 25px}.visualStateListComponent ul li:hover{cursor:pointer}.visualStateListComponent ul li span{border:5px solid #222;background:#222;box-sizing:border-box;display:inline-block;width:100%;margin:0;padding:5px;word-wrap:break-word}.visualStateListComponent ul li.active{border:2px solid #f0640d}.commandListComponent{position:absolute;top:0;left:20%;right:40%;bottom:0;color:#d3d3d3}.commandListComponent ul{margin:0;padding:0;list-style:none;overflow-y:visible;overflow-x:hidden;height:100%}.commandListComponent ul li{padding:8px}.commandListComponent ul li span{word-wrap:break-word}.commandListComponent ul li:hover{color:#f9f9f9;cursor:pointer;transition:color .3s;-webkit-transition:color .3s;-moz-transition:color .3s}.commandListComponent ul li:nth-child(2n){background:#2c2c2c}.commandListComponent ul li:nth-child(odd){background:#222}.commandListComponent ul li .important{font-weight:800}.commandListComponent ul li .important.deprecated{color:red}.commandListComponent ul li .important.unused{color:#ff0}.commandListComponent ul li .important.disabled{color:gray}.commandListComponent ul li .important.redundant{color:orange}.commandListComponent ul li .important.valid{color:#adff2f}.commandListComponent ul li.active{background:#f37628;color:#222}.commandListComponent ul li.drawCall{background:#5db0d7;color:#222}.commandDetailComponent{position:absolute;top:0;left:60%;right:0;bottom:0;overflow-y:visible;overflow-x:hidden}.jsonGroupComponent{display:block;margin:10px;padding:10px;padding-bottom:5px}.jsonGroupComponent .jsonGroupComponentTitle{display:block;font-size:16px;color:#5db0d7;border-bottom:1px solid #5db0d7;padding-bottom:5px;margin-bottom:5px;text-transform:capitalize}.jsonGroupComponent ul{margin:0;padding:0;list-style:none}.jsonGroupComponent ul li:nth-child(2n),.jsonGroupComponent ul li:nth-child(odd){background:#222}.jsonItemComponentKey{color:#f0640d}.jsonItemComponentValue{white-space:pre-wrap}.jsonItemImageHolder{width:50%;margin:auto}.jsonItemImageHolder .jsonItemImage{margin:5px;display:block;border:1px solid #606060;width:100%}.jsonItemImageHolder .jsonItemImage img{width:100%;display:block;margin:auto;max-width:256px;background-image:-moz-linear-gradient(45deg,#d9d9d9 25%,transparent 25%),-moz-linear-gradient(-45deg,#d9d9d9 25%,transparent 25%),-moz-linear-gradient(45deg,transparent 75%,#d9d9d9 75%),-moz-linear-gradient(-45deg,transparent 75%,#d9d9d9 75%);background-image:-webkit-gradient(linear,0 100%,100% 0,color-stop(.25,#c9c9c9),color-stop(.25,transparent)),-webkit-gradient(linear,0 0,100% 100%,color-stop(.25,#c9c9c9),color-stop(.25,transparent)),-webkit-gradient(linear,0 100%,100% 0,color-stop(.75,transparent),color-stop(.75,#c9c9c9)),-webkit-gradient(linear,0 0,100% 100%,color-stop(.75,transparent),color-stop(.75,#c9c9c9));-moz-background-size:50px 50px;background-size:50px 50px;-webkit-background-size:50px 51px;background-position:0 0,25px 0,25px -25px,0 25px}.jsonItemImageHolder .jsonItemImage span{margin:0;padding:5px;word-wrap:break-word;display:inline-block;width:100%;box-sizing:border-box}[commandName=onOpenSourceClicked]:hover{color:#f9f9f9;cursor:pointer;transition:color .3s;-webkit-transition:color .3s;-moz-transition:color .3s}.jsonVisualStateItemComponent{text-align:center;padding:10px}.jsonVisualStateItemComponent img{border:1px solid #606060;margin:5px;background-image:-moz-linear-gradient(45deg,#d9d9d9 25%,transparent 25%),-moz-linear-gradient(-45deg,#d9d9d9 25%,transparent 25%),-moz-linear-gradient(45deg,transparent 75%,#d9d9d9 75%),-moz-linear-gradient(-45deg,transparent 75%,#d9d9d9 75%);background-image:-webkit-gradient(linear,0 100%,100% 0,color-stop(.25,#c9c9c9),color-stop(.25,transparent)),-webkit-gradient(linear,0 0,100% 100%,color-stop(.25,#c9c9c9),color-stop(.25,transparent)),-webkit-gradient(linear,0 100%,100% 0,color-stop(.75,transparent),color-stop(.75,#c9c9c9)),-webkit-gradient(linear,0 0,100% 100%,color-stop(.75,transparent),color-stop(.75,#c9c9c9));-moz-background-size:50px 50px;background-size:50px 50px;-webkit-background-size:50px 51px;background-position:0 0,25px 0,25px -25px,0 25px;width:100%;max-width:512px}.jsonVisualStateItemComponent span{display:block}.jsonContentComponent{position:absolute;top:0;left:0;right:0;bottom:0;padding:10px;overflow-y:visible;overflow-x:hidden}.jsonItemComponentValue{word-break:break-all;white-space:normal}.jsonSourceItemComponentOpen{font-weight:700;color:#5db0d7;text-decoration:underline}.sourceCodeComponent{position:absolute;top:0;left:0;bottom:0;right:0;height:100%;background:#222;z-index:9000;overflow-x:visible;overflow:auto}.sourceCodeComponent .sourceCodeComponentTitle{font-size:16px;font-weight:800;line-height:50px;color:#f0640d;padding:1em;margin:.5em 0}.captureMenuComponent{position:absolute;padding:7px;z-index:99999;top:10px;left:50%;margin-left:-209px;height:40px;width:400px;border:2px solid #222;background-color:#2c2c2c;visibility:hidden;display:none;color:#f9f9f9;font-family:Consolas,monaco,monospace;font-size:14px;font-weight:500}.captureMenuComponent.active{visibility:visible;display:block}.captureMenuComponent,.captureMenuComponent:after,.captureMenuComponent:before{box-sizing:content-box}.captureMenuLogComponent{position:absolute;padding:7px;z-index:80000;top:66px;left:50%;margin-left:-209px;height:40px;width:400px;border:2px solid #222;background-color:#2c2c2c;visibility:hidden;display:none;color:#f9f9f9;font-family:Consolas,monaco,monospace;font-size:14px;font-weight:500}.captureMenuLogComponent.active{visibility:visible;display:block}.captureMenuLogComponent,.captureMenuLogComponent:after,.captureMenuLogComponent:before{box-sizing:content-box}.captureMenuLogComponent span.error{color:red}.canvasListComponent{float:left;width:50%;height:100%}.canvasListComponent [commandName=onCanvasSelection]{vertical-align:center;line-height:40px;white-space:nowrap;text-overflow:ellipsis;width:190px;display:inline-block;overflow:hidden;margin:0 5px}.canvasListComponent [commandName=onCanvasSelection]:hover{color:#c9c9c9;cursor:pointer;transition:color .3s;-webkit-transition:color .3s;-moz-transition:color .3s}.canvasListComponent ul{margin:0;padding:7px;list-style:none;position:absolute;top:54px;left:-2px;width:400px;border:2px solid #222;background-color:#2c2c2c}.canvasListComponent ul li{margin:5px}.canvasListComponent ul li:hover{color:#c9c9c9;cursor:pointer;transition:color .3s;-webkit-transition:color .3s;-moz-transition:color .3s}.captureMenuActionsComponent{float:left;width:30%;height:100%;margin-top:7.5px}.captureMenuActionsComponent div{float:left}.captureMenuActionsComponent [commandName=onCaptureRequested]{border-radius:50%;background:#2c2c2c;border:2px solid red;width:21px;height:21px}.captureMenuActionsComponent [commandName=onCaptureRequested]:hover{background:red;cursor:pointer;transition:background .3s;-webkit-transition:background .3s;-moz-transition:background .3s}.captureMenuActionsComponent [commandName=onPlayNextFrameRequested],.captureMenuActionsComponent [commandName=onPlayRequested]{width:21px;height:21px;border:2px solid #f9f9f9;border-radius:50%;margin-left:9px}.captureMenuActionsComponent [commandName=onPlayNextFrameRequested]:before,.captureMenuActionsComponent [commandName=onPlayRequested]:before{content:\"\";position:absolute;display:inline-block;margin-top:6px;margin-left:4px;width:7px;height:7px;border-top:2px solid #f9f9f9;border-right:2px solid #f9f9f9;background-color:#f9f9f9;-moz-transform:rotate(45deg);-webkit-transform:rotate(45deg);transform:rotate(45deg);z-index:-20}.captureMenuActionsComponent [commandName=onPlayNextFrameRequested]:after,.captureMenuActionsComponent [commandName=onPlayRequested]:after{content:\"\";position:absolute;display:inline-block;width:8px;height:20px;background-color:#2c2c2c;z-index:-10}.captureMenuActionsComponent [commandName=onPlayNextFrameRequested]:hover,.captureMenuActionsComponent [commandName=onPlayRequested]:hover{cursor:pointer;border:2px solid #c9c9c9;transition:border .3s;-webkit-transition:border .3s;-moz-transition:border .3s}.captureMenuActionsComponent [commandName=onPauseRequested]{width:21px;height:21px;border:2px solid #f9f9f9;border-radius:50%;margin-left:9px}.captureMenuActionsComponent [commandName=onPauseRequested]:before{content:\"\";position:absolute;display:inline-block;width:2px;height:13px;margin-left:12px;margin-top:4px;background-color:#f9f9f9}.captureMenuActionsComponent [commandName=onPauseRequested]:after{content:\"\";position:absolute;display:inline-block;width:2px;height:13px;margin-left:7px;margin-top:4px;background-color:#f9f9f9}.captureMenuActionsComponent [commandName=onPauseRequested]:hover{cursor:pointer;border:2px solid #c9c9c9;transition:border .3s;-webkit-transition:border .3s;-moz-transition:border .3s}.captureMenuActionsComponent [commandName=onPlayNextFrameRequested]:before{background-color:#2c2c2c}.fpsCounterComponent{float:left;width:20%;vertical-align:center;line-height:40px;white-space:nowrap}',\"\"])},function(e,t){e.exports=function(e){var t=\"undefined\"!=typeof window&&window.location;if(!t)throw new Error(\"fixUrls requires window.location\");if(!e||\"string\"!=typeof e)return e;var n=t.protocol+\"//\"+t.host,a=n+t.pathname.replace(/\\/[^\\/]*$/,\"/\");return e.replace(/url\\s*\\(((?:[^)(]|\\((?:[^)(]+|\\([^)(]*\\))*\\))*)\\)/gi,function(e,t){var r=t.trim().replace(/^\"(.*)\"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});if(/^(#|data:|http:\\/\\/|https:\\/\\/|file:\\/\\/\\/)/i.test(r))return e;var o;return o=0===r.indexOf(\"//\")?r:0===r.indexOf(\"/\")?n+r:a+r.replace(/^\\.\\//,\"\"),\"url(\"+JSON.stringify(o)+\")\"})}},function(e,t){var n;n=function(){return this}();try{n=n||Function(\"return this\")()||(0,eval)(\"this\")}catch(e){\"object\"==typeof window&&(n=window)}e.exports=n},function(e,t,n){n(5),n(4),n(2),e.exports=n(3)}])});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/spectorjs/dist/spector.bundle.js\n// module id = 37\n// module chunks = 0","export function stringToBuffer(binaryString: string): ArrayBuffer{\r\n    const array = new Uint8Array(binaryString.length);\r\n    for (var i = 0; i < binaryString.length; i++) {\r\n        array[i] = binaryString.charCodeAt(i);        \r\n    }\r\n    return array.buffer;\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/BinaryHelpers.ts","import { PaletteChunk, HeaderChunk, DataChunk, EndChunk, PngChunk } from './chunks';\r\nimport { ChunkType, SIGN_OFFSET, ColorType } from './constants';\r\n\r\n\r\n\r\nexport class PngReader {\r\n    private _signature: Uint8Array;\r\n    private _dataView: DataView;\r\n    private _header: HeaderChunk;\r\n    private _palette: PaletteChunk;\r\n    private _data: DataChunk;\r\n\r\n    constructor(private data: ArrayBuffer){\r\n        this._dataView = new DataView(data);\r\n        this._signature = new Uint8Array(data, 0, SIGN_OFFSET);\r\n        this._read();\r\n    }\r\n\r\n    get header() {\r\n        return this._header;\r\n    }    \r\n\r\n    get palette(){\r\n        return this._palette;\r\n    }\r\n\r\n    get imageData(){\r\n        return this._data;\r\n    }\r\n\r\n    get imageColorComponents(){\r\n        switch (this._header.colorType) {\r\n            case ColorType.Greyscale:\r\n            case ColorType.Indexed:\r\n                return 1;\r\n            case ColorType.TruecolorAlpha:\r\n                return 4;\r\n            case ColorType.Truecolor:\r\n                return 3;        \r\n            default:\r\n                throw \"unsupported color format\";\r\n        }\r\n    }\r\n\r\n    createPixelData(){\r\n        const w = this._header.width;\r\n        const h = this._header.height;\r\n        const c = this.imageColorComponents;\r\n        let bytes = w * h  * c;\r\n\r\n        let pngData = this.imageData.decompress();\r\n        let data = new Uint8Array(bytes);\r\n\r\n        for (var y = 0; y < h; y++) {\r\n            for (var x = 0; x < w; x++) {\r\n                let pngOffset =  y * (w*c+1) + x*c+1;\r\n                let pxOffset =  y * (w*c) + x*c;\r\n                \r\n                for (var i = 0; i < c; i++) {\r\n                    data[pxOffset+i] = pngData[pngOffset+i];     \r\n                }\r\n            }            \r\n        }      \r\n        \r\n        return data;\r\n    }\r\n\r\n    createPaletteDataRgba(size: number){\r\n        // rgba\r\n        const c = 4;\r\n        // rgb\r\n        const cPng = 3;\r\n        \r\n        let data = new Uint8Array(size * c);\r\n        let pngData = this._palette.data;\r\n\r\n        for (var i = 0; i < this._palette.colors; i++) {\r\n            let offsetPng = cPng * i;\r\n            let offset = c * i;\r\n            data[offset] = pngData[offsetPng];\r\n            data[offset+1] = pngData[offsetPng+1];\r\n            data[offset+2] = pngData[offsetPng+2];\r\n            data[offset+3] = 255;\r\n        }\r\n\r\n        return data;\r\n    }\r\n\r\n    private _read(){\r\n        this._checkSignature();\r\n        this._readChunks();\r\n    }\r\n\r\n    protected _checkSignature(){\r\n        let sig = this._signature;\r\n        if(!(sig[0] == 137 \r\n        && sig[1] == 80 \r\n        && sig[2] == 78 \r\n        && sig[3] == 71 \r\n        && sig[4] == 13 \r\n        && sig[5] == 10 \r\n        && sig[6] == 26 \r\n        && sig[7] == 10))\r\n            throw \"Data is not a png\";\r\n    }\r\n\r\n    protected _readChunks(){\r\n        let offset = SIGN_OFFSET;\r\n        while(offset < this._dataView.byteLength){\r\n            let chunk = this._readChunk(offset);\r\n            if(chunk){\r\n                switch (chunk.type) {\r\n                    case ChunkType.Header:\r\n                        this._header = <HeaderChunk>chunk;\r\n                        break;\r\n                    case ChunkType.Palette:\r\n                        this._palette = <PaletteChunk>chunk;\r\n                        break;\r\n                    case ChunkType.Data:\r\n                        this._data = <DataChunk>chunk;\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n                \r\n                offset += chunk.totalLength;\r\n            }\r\n        }\r\n    }\r\n\r\n    protected _readChunk(offset: number){\r\n        let view = this._dataView;\r\n\r\n        let length = view.getUint32(offset, false);\r\n        offset+=4;\r\n\r\n        let type = <ChunkType>view.getUint32(offset, false);\r\n        offset+=4;\r\n        \r\n        let data = new Uint8Array(this._dataView.buffer, offset, length);\r\n        offset+=length;\r\n\r\n        let crc = view.getUint32(offset, false);\r\n        console.log(this._chunkToString(type));\r\n        switch (type) {\r\n            case ChunkType.Header:\r\n                return new HeaderChunk(length, type, data, crc);\r\n            case ChunkType.Palette:\r\n                return new PaletteChunk(length, type, data, crc);                \r\n            case ChunkType.Data:\r\n                return new DataChunk(length, type, data, crc);                \r\n            case ChunkType.End:\r\n                return new EndChunk(length, type, data, crc);                \r\n            default:\r\n                // unknown chunk, return generic chunk\r\n                return new PngChunk(length, type, data, crc);\r\n        }\r\n    }\r\n\r\n    private _chunkToString(id: number){\r\n        return [\r\n            (id >>> 24) & 0x000000FF,\r\n            (id >>> 16) & 0x000000FF,\r\n            (id >>> 8) & 0x000000FF,\r\n            (id) & 0x000000FF\r\n        ].reduce((p,c,i) => p + String.fromCharCode(c), \"\");\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/PngReader/PngReader.ts","import { ChunkType, BitDepth, ColorType, LENGTH_LENGTH, TYPE_LENGTH, CRC_LENGTH } from './constants';\r\nimport * as pako from \"pako\";\r\n\r\nexport class PngChunk {\r\n    constructor(private _length: number, private _type: ChunkType, protected _data: Uint8Array, private _crc: number){\r\n        if(_length != _data.length)\r\n            throw \"Invalid length\";        \r\n    }\r\n\r\n    get dataLength() {\r\n        return this._length;\r\n    }\r\n\r\n    get totalLength(){\r\n        return this._length + LENGTH_LENGTH + TYPE_LENGTH + CRC_LENGTH;\r\n    }\r\n\r\n    get type(){\r\n        return this._type;\r\n    }\r\n\r\n    get crc(){\r\n        return this._crc;\r\n    }\r\n\r\n    get data(){\r\n        return this._data;\r\n    }\r\n}\r\n\r\nexport class HeaderChunk extends PngChunk {\r\n    \r\n    private _width: number;\r\n    private _height: number;\r\n    private _bitDepth: BitDepth;\r\n    private _colorType: ColorType;\r\n    private _compressionMethod: number;\r\n    private _filterMethod: number;\r\n    private _interlace: boolean;\r\n    \r\n    constructor(length: number, type: ChunkType, data: Uint8Array, crc: number){\r\n        super(length, type, data, crc);\r\n        if(type != ChunkType.Header)\r\n            throw \"Not a header chunk\";\r\n\r\n        this._read();\r\n    }\r\n\r\n    private _read(){\r\n        let view = new DataView(this._data.buffer, this._data.byteOffset, this._data.byteLength);\r\n        this._width = view.getUint32(0, false);\r\n        this._height = view.getUint32(4, false);\r\n        this._bitDepth = <BitDepth>view.getUint8(8);\r\n        this._colorType = <ColorType>view.getUint8(9);\r\n        this._compressionMethod = view.getUint8(10);\r\n        this._filterMethod = view.getUint8(11);\r\n        this._interlace = view.getUint8(12) == 1 ? true : false;\r\n    }\r\n\r\n    get width(){\r\n        return this._width;\r\n    }\r\n\r\n    get height(){\r\n        return this._height;\r\n    }\r\n\r\n    get bitDepth(){\r\n        return this._bitDepth;\r\n    }\r\n\r\n    get colorType(){\r\n        return this._colorType;\r\n    }\r\n\r\n    get interlaced(){\r\n        return this._interlace;\r\n    }\r\n}\r\n\r\nexport class PaletteChunk extends PngChunk {\r\n    constructor(length: number, type: ChunkType, data: Uint8Array, crc: number){\r\n        super(length, type, data, crc);\r\n        if(type != ChunkType.Palette)\r\n            throw \"Not a palette chunk\";\r\n\r\n        if(data.length%3 != 0)\r\n            throw \"Invalid palette length\";\r\n    }\r\n\r\n    get colors(){\r\n        return this._data.length / 3;\r\n    }\r\n\r\n    getColor(id: number){\r\n        return new Uint8Array(this._data.buffer, this._data.byteOffset + id * 3, 3);\r\n    }\r\n}\r\n\r\nexport class DataChunk extends PngChunk {\r\n    constructor(length: number, type: ChunkType, data: Uint8Array, crc: number){\r\n        super(length, type, data, crc);\r\n        if(type != ChunkType.Data)\r\n            throw \"Not a data chunk\";\r\n    }\r\n\r\n    decompress(){\r\n        return pako.inflate(this._data);\r\n    }\r\n}\r\n\r\nexport class EndChunk extends PngChunk {\r\n    constructor(length: number, type: ChunkType, data: Uint8Array, crc: number){\r\n        super(length, type, data, crc);\r\n        if(type != ChunkType.End)\r\n            throw \"Not a end chunk\";\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/PngReader/chunks.ts","// Top level file is just a mixin of submodules & constants\n'use strict';\n\nvar assign    = require('./lib/utils/common').assign;\n\nvar deflate   = require('./lib/deflate');\nvar inflate   = require('./lib/inflate');\nvar constants = require('./lib/zlib/constants');\n\nvar pako = {};\n\nassign(pako, deflate, inflate, constants);\n\nmodule.exports = pako;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/pako/index.js\n// module id = 41\n// module chunks = 0","'use strict';\n\n\nvar zlib_deflate = require('./zlib/deflate');\nvar utils        = require('./utils/common');\nvar strings      = require('./utils/strings');\nvar msg          = require('./zlib/messages');\nvar ZStream      = require('./zlib/zstream');\n\nvar toString = Object.prototype.toString;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nvar Z_NO_FLUSH      = 0;\nvar Z_FINISH        = 4;\n\nvar Z_OK            = 0;\nvar Z_STREAM_END    = 1;\nvar Z_SYNC_FLUSH    = 2;\n\nvar Z_DEFAULT_COMPRESSION = -1;\n\nvar Z_DEFAULT_STRATEGY    = 0;\n\nvar Z_DEFLATED  = 8;\n\n/* ===========================================================================*/\n\n\n/**\n * class Deflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[deflate]],\n * [[deflateRaw]] and [[gzip]].\n **/\n\n/* internal\n * Deflate.chunks -> Array\n *\n * Chunks of output data, if [[Deflate#onData]] not overriden.\n **/\n\n/**\n * Deflate.result -> Uint8Array|Array\n *\n * Compressed result, generated by default [[Deflate#onData]]\n * and [[Deflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Deflate#push]] with `Z_FINISH` / `true` param)  or if you\n * push a chunk with explicit flush (call [[Deflate#push]] with\n * `Z_SYNC_FLUSH` param).\n **/\n\n/**\n * Deflate.err -> Number\n *\n * Error code after deflate finished. 0 (Z_OK) on success.\n * You will not need it in real life, because deflate errors\n * are possible only on wrong options or bad `onData` / `onEnd`\n * custom handlers.\n **/\n\n/**\n * Deflate.msg -> String\n *\n * Error message, if [[Deflate.err]] != 0\n **/\n\n\n/**\n * new Deflate(options)\n * - options (Object): zlib deflate options.\n *\n * Creates new deflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `level`\n * - `windowBits`\n * - `memLevel`\n * - `strategy`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw deflate\n * - `gzip` (Boolean) - create gzip wrapper\n * - `to` (String) - if equal to 'string', then result will be \"binary string\"\n *    (each char code [0..255])\n * - `header` (Object) - custom header for gzip\n *   - `text` (Boolean) - true if compressed data believed to be text\n *   - `time` (Number) - modification time, unix timestamp\n *   - `os` (Number) - operation system code\n *   - `extra` (Array) - array of bytes with extra data (max 65536)\n *   - `name` (String) - file name (binary string)\n *   - `comment` (String) - comment (binary string)\n *   - `hcrc` (Boolean) - true if header crc should be added\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])\n *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * var deflate = new pako.Deflate({ level: 3});\n *\n * deflate.push(chunk1, false);\n * deflate.push(chunk2, true);  // true -> last chunk\n *\n * if (deflate.err) { throw new Error(deflate.err); }\n *\n * console.log(deflate.result);\n * ```\n **/\nfunction Deflate(options) {\n  if (!(this instanceof Deflate)) return new Deflate(options);\n\n  this.options = utils.assign({\n    level: Z_DEFAULT_COMPRESSION,\n    method: Z_DEFLATED,\n    chunkSize: 16384,\n    windowBits: 15,\n    memLevel: 8,\n    strategy: Z_DEFAULT_STRATEGY,\n    to: ''\n  }, options || {});\n\n  var opt = this.options;\n\n  if (opt.raw && (opt.windowBits > 0)) {\n    opt.windowBits = -opt.windowBits;\n  }\n\n  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {\n    opt.windowBits += 16;\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm = new ZStream();\n  this.strm.avail_out = 0;\n\n  var status = zlib_deflate.deflateInit2(\n    this.strm,\n    opt.level,\n    opt.method,\n    opt.windowBits,\n    opt.memLevel,\n    opt.strategy\n  );\n\n  if (status !== Z_OK) {\n    throw new Error(msg[status]);\n  }\n\n  if (opt.header) {\n    zlib_deflate.deflateSetHeader(this.strm, opt.header);\n  }\n\n  if (opt.dictionary) {\n    var dict;\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      // If we need to compress text, change encoding to utf8.\n      dict = strings.string2buf(opt.dictionary);\n    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n      dict = new Uint8Array(opt.dictionary);\n    } else {\n      dict = opt.dictionary;\n    }\n\n    status = zlib_deflate.deflateSetDictionary(this.strm, dict);\n\n    if (status !== Z_OK) {\n      throw new Error(msg[status]);\n    }\n\n    this._dict_set = true;\n  }\n}\n\n/**\n * Deflate#push(data[, mode]) -> Boolean\n * - data (Uint8Array|Array|ArrayBuffer|String): input data. Strings will be\n *   converted to utf8 byte sequence.\n * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` meansh Z_FINISH.\n *\n * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with\n * new compressed chunks. Returns `true` on success. The last data block must have\n * mode Z_FINISH (or `true`). That will flush internal pending buffers and call\n * [[Deflate#onEnd]]. For interim explicit flushes (without ending the stream) you\n * can use mode Z_SYNC_FLUSH, keeping the compression context.\n *\n * On fail call [[Deflate#onEnd]] with error code and return false.\n *\n * We strongly recommend to use `Uint8Array` on input for best speed (output\n * array format is detected automatically). Also, don't skip last param and always\n * use the same type in your code (boolean or number). That will improve JS speed.\n *\n * For regular `Array`-s make sure all elements are [0..255].\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nDeflate.prototype.push = function (data, mode) {\n  var strm = this.strm;\n  var chunkSize = this.options.chunkSize;\n  var status, _mode;\n\n  if (this.ended) { return false; }\n\n  _mode = (mode === ~~mode) ? mode : ((mode === true) ? Z_FINISH : Z_NO_FLUSH);\n\n  // Convert data if needed\n  if (typeof data === 'string') {\n    // If we need to compress text, change encoding to utf8.\n    strm.input = strings.string2buf(data);\n  } else if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  do {\n    if (strm.avail_out === 0) {\n      strm.output = new utils.Buf8(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n    status = zlib_deflate.deflate(strm, _mode);    /* no bad return value */\n\n    if (status !== Z_STREAM_END && status !== Z_OK) {\n      this.onEnd(status);\n      this.ended = true;\n      return false;\n    }\n    if (strm.avail_out === 0 || (strm.avail_in === 0 && (_mode === Z_FINISH || _mode === Z_SYNC_FLUSH))) {\n      if (this.options.to === 'string') {\n        this.onData(strings.buf2binstring(utils.shrinkBuf(strm.output, strm.next_out)));\n      } else {\n        this.onData(utils.shrinkBuf(strm.output, strm.next_out));\n      }\n    }\n  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== Z_STREAM_END);\n\n  // Finalize on the last chunk.\n  if (_mode === Z_FINISH) {\n    status = zlib_deflate.deflateEnd(this.strm);\n    this.onEnd(status);\n    this.ended = true;\n    return status === Z_OK;\n  }\n\n  // callback interim results if Z_SYNC_FLUSH.\n  if (_mode === Z_SYNC_FLUSH) {\n    this.onEnd(Z_OK);\n    strm.avail_out = 0;\n    return true;\n  }\n\n  return true;\n};\n\n\n/**\n * Deflate#onData(chunk) -> Void\n * - chunk (Uint8Array|Array|String): ouput data. Type of array depends\n *   on js engine support. When string output requested, each chunk\n *   will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nDeflate.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Deflate#onEnd(status) -> Void\n * - status (Number): deflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called once after you tell deflate that the input stream is\n * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)\n * or if an error happened. By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nDeflate.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === Z_OK) {\n    if (this.options.to === 'string') {\n      this.result = this.chunks.join('');\n    } else {\n      this.result = utils.flattenChunks(this.chunks);\n    }\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * deflate(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * Compress `data` with deflate algorithm and `options`.\n *\n * Supported options are:\n *\n * - level\n * - windowBits\n * - memLevel\n * - strategy\n * - dictionary\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be \"binary string\"\n *    (each char code [0..255])\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , data = Uint8Array([1,2,3,4,5,6,7,8,9]);\n *\n * console.log(pako.deflate(data));\n * ```\n **/\nfunction deflate(input, options) {\n  var deflator = new Deflate(options);\n\n  deflator.push(input, true);\n\n  // That will never happens, if you don't cheat with options :)\n  if (deflator.err) { throw deflator.msg || msg[deflator.err]; }\n\n  return deflator.result;\n}\n\n\n/**\n * deflateRaw(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction deflateRaw(input, options) {\n  options = options || {};\n  options.raw = true;\n  return deflate(input, options);\n}\n\n\n/**\n * gzip(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but create gzip wrapper instead of\n * deflate one.\n **/\nfunction gzip(input, options) {\n  options = options || {};\n  options.gzip = true;\n  return deflate(input, options);\n}\n\n\nexports.Deflate = Deflate;\nexports.deflate = deflate;\nexports.deflateRaw = deflateRaw;\nexports.gzip = gzip;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/pako/lib/deflate.js\n// module id = 42\n// module chunks = 0","'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar utils   = require('../utils/common');\nvar trees   = require('./trees');\nvar adler32 = require('./adler32');\nvar crc32   = require('./crc32');\nvar msg     = require('./messages');\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n/* Allowed flush values; see deflate() and inflate() below for details */\nvar Z_NO_FLUSH      = 0;\nvar Z_PARTIAL_FLUSH = 1;\n//var Z_SYNC_FLUSH    = 2;\nvar Z_FULL_FLUSH    = 3;\nvar Z_FINISH        = 4;\nvar Z_BLOCK         = 5;\n//var Z_TREES         = 6;\n\n\n/* Return codes for the compression/decompression functions. Negative values\n * are errors, positive values are used for special but normal events.\n */\nvar Z_OK            = 0;\nvar Z_STREAM_END    = 1;\n//var Z_NEED_DICT     = 2;\n//var Z_ERRNO         = -1;\nvar Z_STREAM_ERROR  = -2;\nvar Z_DATA_ERROR    = -3;\n//var Z_MEM_ERROR     = -4;\nvar Z_BUF_ERROR     = -5;\n//var Z_VERSION_ERROR = -6;\n\n\n/* compression levels */\n//var Z_NO_COMPRESSION      = 0;\n//var Z_BEST_SPEED          = 1;\n//var Z_BEST_COMPRESSION    = 9;\nvar Z_DEFAULT_COMPRESSION = -1;\n\n\nvar Z_FILTERED            = 1;\nvar Z_HUFFMAN_ONLY        = 2;\nvar Z_RLE                 = 3;\nvar Z_FIXED               = 4;\nvar Z_DEFAULT_STRATEGY    = 0;\n\n/* Possible values of the data_type field (though see inflate()) */\n//var Z_BINARY              = 0;\n//var Z_TEXT                = 1;\n//var Z_ASCII               = 1; // = Z_TEXT\nvar Z_UNKNOWN             = 2;\n\n\n/* The deflate compression method */\nvar Z_DEFLATED  = 8;\n\n/*============================================================================*/\n\n\nvar MAX_MEM_LEVEL = 9;\n/* Maximum value for memLevel in deflateInit2 */\nvar MAX_WBITS = 15;\n/* 32K LZ77 window */\nvar DEF_MEM_LEVEL = 8;\n\n\nvar LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\nvar LITERALS      = 256;\n/* number of literal bytes 0..255 */\nvar L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\nvar D_CODES       = 30;\n/* number of distance codes */\nvar BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\nvar HEAP_SIZE     = 2 * L_CODES + 1;\n/* maximum heap size */\nvar MAX_BITS  = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nvar MIN_MATCH = 3;\nvar MAX_MATCH = 258;\nvar MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);\n\nvar PRESET_DICT = 0x20;\n\nvar INIT_STATE = 42;\nvar EXTRA_STATE = 69;\nvar NAME_STATE = 73;\nvar COMMENT_STATE = 91;\nvar HCRC_STATE = 103;\nvar BUSY_STATE = 113;\nvar FINISH_STATE = 666;\n\nvar BS_NEED_MORE      = 1; /* block not completed, need more input or more output */\nvar BS_BLOCK_DONE     = 2; /* block flush performed */\nvar BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */\nvar BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */\n\nvar OS_CODE = 0x03; // Unix :) . Don't detect, use this default.\n\nfunction err(strm, errorCode) {\n  strm.msg = msg[errorCode];\n  return errorCode;\n}\n\nfunction rank(f) {\n  return ((f) << 1) - ((f) > 4 ? 9 : 0);\n}\n\nfunction zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }\n\n\n/* =========================================================================\n * Flush as much pending output as possible. All deflate() output goes\n * through this function so some applications may wish to modify it\n * to avoid allocating a large strm->output buffer and copying into it.\n * (See also read_buf()).\n */\nfunction flush_pending(strm) {\n  var s = strm.state;\n\n  //_tr_flush_bits(s);\n  var len = s.pending;\n  if (len > strm.avail_out) {\n    len = strm.avail_out;\n  }\n  if (len === 0) { return; }\n\n  utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);\n  strm.next_out += len;\n  s.pending_out += len;\n  strm.total_out += len;\n  strm.avail_out -= len;\n  s.pending -= len;\n  if (s.pending === 0) {\n    s.pending_out = 0;\n  }\n}\n\n\nfunction flush_block_only(s, last) {\n  trees._tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);\n  s.block_start = s.strstart;\n  flush_pending(s.strm);\n}\n\n\nfunction put_byte(s, b) {\n  s.pending_buf[s.pending++] = b;\n}\n\n\n/* =========================================================================\n * Put a short in the pending buffer. The 16-bit value is put in MSB order.\n * IN assertion: the stream state is correct and there is enough room in\n * pending_buf.\n */\nfunction putShortMSB(s, b) {\n//  put_byte(s, (Byte)(b >> 8));\n//  put_byte(s, (Byte)(b & 0xff));\n  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;\n  s.pending_buf[s.pending++] = b & 0xff;\n}\n\n\n/* ===========================================================================\n * Read a new buffer from the current input stream, update the adler32\n * and total number of bytes read.  All deflate() input goes through\n * this function so some applications may wish to modify it to avoid\n * allocating a large strm->input buffer and copying from it.\n * (See also flush_pending()).\n */\nfunction read_buf(strm, buf, start, size) {\n  var len = strm.avail_in;\n\n  if (len > size) { len = size; }\n  if (len === 0) { return 0; }\n\n  strm.avail_in -= len;\n\n  // zmemcpy(buf, strm->next_in, len);\n  utils.arraySet(buf, strm.input, strm.next_in, len, start);\n  if (strm.state.wrap === 1) {\n    strm.adler = adler32(strm.adler, buf, len, start);\n  }\n\n  else if (strm.state.wrap === 2) {\n    strm.adler = crc32(strm.adler, buf, len, start);\n  }\n\n  strm.next_in += len;\n  strm.total_in += len;\n\n  return len;\n}\n\n\n/* ===========================================================================\n * Set match_start to the longest match starting at the given string and\n * return its length. Matches shorter or equal to prev_length are discarded,\n * in which case the result is equal to prev_length and match_start is\n * garbage.\n * IN assertions: cur_match is the head of the hash chain for the current\n *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1\n * OUT assertion: the match length is not greater than s->lookahead.\n */\nfunction longest_match(s, cur_match) {\n  var chain_length = s.max_chain_length;      /* max hash chain length */\n  var scan = s.strstart; /* current string */\n  var match;                       /* matched string */\n  var len;                           /* length of current match */\n  var best_len = s.prev_length;              /* best match length so far */\n  var nice_match = s.nice_match;             /* stop if match long enough */\n  var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?\n      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;\n\n  var _win = s.window; // shortcut\n\n  var wmask = s.w_mask;\n  var prev  = s.prev;\n\n  /* Stop when cur_match becomes <= limit. To simplify the code,\n   * we prevent matches with the string of window index 0.\n   */\n\n  var strend = s.strstart + MAX_MATCH;\n  var scan_end1  = _win[scan + best_len - 1];\n  var scan_end   = _win[scan + best_len];\n\n  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.\n   * It is easy to get rid of this optimization if necessary.\n   */\n  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, \"Code too clever\");\n\n  /* Do not waste too much time if we already have a good match: */\n  if (s.prev_length >= s.good_match) {\n    chain_length >>= 2;\n  }\n  /* Do not look for matches beyond the end of the input. This is necessary\n   * to make deflate deterministic.\n   */\n  if (nice_match > s.lookahead) { nice_match = s.lookahead; }\n\n  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, \"need lookahead\");\n\n  do {\n    // Assert(cur_match < s->strstart, \"no future\");\n    match = cur_match;\n\n    /* Skip to next match if the match length cannot increase\n     * or if the match length is less than 2.  Note that the checks below\n     * for insufficient lookahead only occur occasionally for performance\n     * reasons.  Therefore uninitialized memory will be accessed, and\n     * conditional jumps will be made that depend on those values.\n     * However the length of the match is limited to the lookahead, so\n     * the output of deflate is not affected by the uninitialized values.\n     */\n\n    if (_win[match + best_len]     !== scan_end  ||\n        _win[match + best_len - 1] !== scan_end1 ||\n        _win[match]                !== _win[scan] ||\n        _win[++match]              !== _win[scan + 1]) {\n      continue;\n    }\n\n    /* The check at best_len-1 can be removed because it will be made\n     * again later. (This heuristic is not always a win.)\n     * It is not necessary to compare scan[2] and match[2] since they\n     * are always equal when the other bytes match, given that\n     * the hash keys are equal and that HASH_BITS >= 8.\n     */\n    scan += 2;\n    match++;\n    // Assert(*scan == *match, \"match[2]?\");\n\n    /* We check for insufficient lookahead only every 8th comparison;\n     * the 256th check will be made at strstart+258.\n     */\n    do {\n      /*jshint noempty:false*/\n    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             scan < strend);\n\n    // Assert(scan <= s->window+(unsigned)(s->window_size-1), \"wild scan\");\n\n    len = MAX_MATCH - (strend - scan);\n    scan = strend - MAX_MATCH;\n\n    if (len > best_len) {\n      s.match_start = cur_match;\n      best_len = len;\n      if (len >= nice_match) {\n        break;\n      }\n      scan_end1  = _win[scan + best_len - 1];\n      scan_end   = _win[scan + best_len];\n    }\n  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);\n\n  if (best_len <= s.lookahead) {\n    return best_len;\n  }\n  return s.lookahead;\n}\n\n\n/* ===========================================================================\n * Fill the window when the lookahead becomes insufficient.\n * Updates strstart and lookahead.\n *\n * IN assertion: lookahead < MIN_LOOKAHEAD\n * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD\n *    At least one byte has been read, or avail_in == 0; reads are\n *    performed for at least two bytes (required for the zip translate_eol\n *    option -- not supported here).\n */\nfunction fill_window(s) {\n  var _w_size = s.w_size;\n  var p, n, m, more, str;\n\n  //Assert(s->lookahead < MIN_LOOKAHEAD, \"already enough lookahead\");\n\n  do {\n    more = s.window_size - s.lookahead - s.strstart;\n\n    // JS ints have 32 bit, block below not needed\n    /* Deal with !@#$% 64K limit: */\n    //if (sizeof(int) <= 2) {\n    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {\n    //        more = wsize;\n    //\n    //  } else if (more == (unsigned)(-1)) {\n    //        /* Very unlikely, but possible on 16 bit machine if\n    //         * strstart == 0 && lookahead == 1 (input done a byte at time)\n    //         */\n    //        more--;\n    //    }\n    //}\n\n\n    /* If the window is almost full and there is insufficient lookahead,\n     * move the upper half to the lower one to make room in the upper half.\n     */\n    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {\n\n      utils.arraySet(s.window, s.window, _w_size, _w_size, 0);\n      s.match_start -= _w_size;\n      s.strstart -= _w_size;\n      /* we now have strstart >= MAX_DIST */\n      s.block_start -= _w_size;\n\n      /* Slide the hash table (could be avoided with 32 bit values\n       at the expense of memory usage). We slide even when level == 0\n       to keep the hash table consistent if we switch back to level > 0\n       later. (Using level 0 permanently is not an optimal usage of\n       zlib, so we don't care about this pathological case.)\n       */\n\n      n = s.hash_size;\n      p = n;\n      do {\n        m = s.head[--p];\n        s.head[p] = (m >= _w_size ? m - _w_size : 0);\n      } while (--n);\n\n      n = _w_size;\n      p = n;\n      do {\n        m = s.prev[--p];\n        s.prev[p] = (m >= _w_size ? m - _w_size : 0);\n        /* If n is not on any hash chain, prev[n] is garbage but\n         * its value will never be used.\n         */\n      } while (--n);\n\n      more += _w_size;\n    }\n    if (s.strm.avail_in === 0) {\n      break;\n    }\n\n    /* If there was no sliding:\n     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&\n     *    more == window_size - lookahead - strstart\n     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)\n     * => more >= window_size - 2*WSIZE + 2\n     * In the BIG_MEM or MMAP case (not yet supported),\n     *   window_size == input_size + MIN_LOOKAHEAD  &&\n     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.\n     * Otherwise, window_size == 2*WSIZE so more >= 2.\n     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.\n     */\n    //Assert(more >= 2, \"more < 2\");\n    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);\n    s.lookahead += n;\n\n    /* Initialize the hash value now that we have some input: */\n    if (s.lookahead + s.insert >= MIN_MATCH) {\n      str = s.strstart - s.insert;\n      s.ins_h = s.window[str];\n\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;\n//#if MIN_MATCH != 3\n//        Call update_hash() MIN_MATCH-3 more times\n//#endif\n      while (s.insert) {\n        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;\n\n        s.prev[str & s.w_mask] = s.head[s.ins_h];\n        s.head[s.ins_h] = str;\n        str++;\n        s.insert--;\n        if (s.lookahead + s.insert < MIN_MATCH) {\n          break;\n        }\n      }\n    }\n    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,\n     * but this is not important since only literal bytes will be emitted.\n     */\n\n  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);\n\n  /* If the WIN_INIT bytes after the end of the current data have never been\n   * written, then zero those bytes in order to avoid memory check reports of\n   * the use of uninitialized (or uninitialised as Julian writes) bytes by\n   * the longest match routines.  Update the high water mark for the next\n   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match\n   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.\n   */\n//  if (s.high_water < s.window_size) {\n//    var curr = s.strstart + s.lookahead;\n//    var init = 0;\n//\n//    if (s.high_water < curr) {\n//      /* Previous high water mark below current data -- zero WIN_INIT\n//       * bytes or up to end of window, whichever is less.\n//       */\n//      init = s.window_size - curr;\n//      if (init > WIN_INIT)\n//        init = WIN_INIT;\n//      zmemzero(s->window + curr, (unsigned)init);\n//      s->high_water = curr + init;\n//    }\n//    else if (s->high_water < (ulg)curr + WIN_INIT) {\n//      /* High water mark at or above current data, but below current data\n//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up\n//       * to end of window, whichever is less.\n//       */\n//      init = (ulg)curr + WIN_INIT - s->high_water;\n//      if (init > s->window_size - s->high_water)\n//        init = s->window_size - s->high_water;\n//      zmemzero(s->window + s->high_water, (unsigned)init);\n//      s->high_water += init;\n//    }\n//  }\n//\n//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,\n//    \"not enough room for search\");\n}\n\n/* ===========================================================================\n * Copy without compression as much as possible from the input stream, return\n * the current block state.\n * This function does not insert new strings in the dictionary since\n * uncompressible data is probably not useful. This function is used\n * only for the level=0 compression option.\n * NOTE: this function should be optimized to avoid extra copying from\n * window to pending_buf.\n */\nfunction deflate_stored(s, flush) {\n  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited\n   * to pending_buf_size, and each stored block has a 5 byte header:\n   */\n  var max_block_size = 0xffff;\n\n  if (max_block_size > s.pending_buf_size - 5) {\n    max_block_size = s.pending_buf_size - 5;\n  }\n\n  /* Copy as much as possible from input to output: */\n  for (;;) {\n    /* Fill the window as much as possible: */\n    if (s.lookahead <= 1) {\n\n      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||\n      //  s->block_start >= (long)s->w_size, \"slide too late\");\n//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||\n//        s.block_start >= s.w_size)) {\n//        throw  new Error(\"slide too late\");\n//      }\n\n      fill_window(s);\n      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n\n      if (s.lookahead === 0) {\n        break;\n      }\n      /* flush the current block */\n    }\n    //Assert(s->block_start >= 0L, \"block gone\");\n//    if (s.block_start < 0) throw new Error(\"block gone\");\n\n    s.strstart += s.lookahead;\n    s.lookahead = 0;\n\n    /* Emit a stored block if pending_buf will be full: */\n    var max_start = s.block_start + max_block_size;\n\n    if (s.strstart === 0 || s.strstart >= max_start) {\n      /* strstart == 0 is possible when wraparound on 16-bit machine */\n      s.lookahead = s.strstart - max_start;\n      s.strstart = max_start;\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n\n\n    }\n    /* Flush if we may have to slide, otherwise block_start may become\n     * negative and the data will be gone:\n     */\n    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n\n  s.insert = 0;\n\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n\n  if (s.strstart > s.block_start) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_NEED_MORE;\n}\n\n/* ===========================================================================\n * Compress as much as possible from the input stream, return the current\n * block state.\n * This function does not perform lazy evaluation of matches and inserts\n * new strings in the dictionary only for unmatched strings or for short\n * matches. It is used only for the fast compression options.\n */\nfunction deflate_fast(s, flush) {\n  var hash_head;        /* head of the hash chain */\n  var bflush;           /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) {\n        break; /* flush the current block */\n      }\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     * At this point we have always match_length < MIN_MATCH\n     */\n    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n    }\n    if (s.match_length >= MIN_MATCH) {\n      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only\n\n      /*** _tr_tally_dist(s, s.strstart - s.match_start,\n                     s.match_length - MIN_MATCH, bflush); ***/\n      bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n\n      /* Insert new strings in the hash table only if the match length\n       * is not too large. This saves time but degrades compression.\n       */\n      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {\n        s.match_length--; /* string at strstart already in table */\n        do {\n          s.strstart++;\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n          /* strstart never exceeds WSIZE-MAX_MATCH, so there are\n           * always MIN_MATCH bytes ahead.\n           */\n        } while (--s.match_length !== 0);\n        s.strstart++;\n      } else\n      {\n        s.strstart += s.match_length;\n        s.match_length = 0;\n        s.ins_h = s.window[s.strstart];\n        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */\n        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;\n\n//#if MIN_MATCH != 3\n//                Call UPDATE_HASH() MIN_MATCH-3 more times\n//#endif\n        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not\n         * matter since it will be recomputed at next deflate call.\n         */\n      }\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s.window[s.strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n}\n\n/* ===========================================================================\n * Same as above, but achieves better compression. We use a lazy\n * evaluation for matches: a match is finally adopted only if there is\n * no better match at the next window position.\n */\nfunction deflate_slow(s, flush) {\n  var hash_head;          /* head of hash chain */\n  var bflush;              /* set if current block must be flushed */\n\n  var max_insert;\n\n  /* Process the input block. */\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     */\n    s.prev_length = s.match_length;\n    s.prev_match = s.match_start;\n    s.match_length = MIN_MATCH - 1;\n\n    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&\n        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n\n      if (s.match_length <= 5 &&\n         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {\n\n        /* If prev_match is also MIN_MATCH, match_start is garbage\n         * but we will ignore the current match anyway.\n         */\n        s.match_length = MIN_MATCH - 1;\n      }\n    }\n    /* If there was a match at the previous step and the current\n     * match is not better, output the previous match:\n     */\n    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {\n      max_insert = s.strstart + s.lookahead - MIN_MATCH;\n      /* Do not insert strings in hash table beyond this. */\n\n      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);\n\n      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,\n                     s.prev_length - MIN_MATCH, bflush);***/\n      bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);\n      /* Insert in hash table all strings up to the end of the match.\n       * strstart-1 and strstart are already inserted. If there is not\n       * enough lookahead, the last two strings are not inserted in\n       * the hash table.\n       */\n      s.lookahead -= s.prev_length - 1;\n      s.prev_length -= 2;\n      do {\n        if (++s.strstart <= max_insert) {\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n        }\n      } while (--s.prev_length !== 0);\n      s.match_available = 0;\n      s.match_length = MIN_MATCH - 1;\n      s.strstart++;\n\n      if (bflush) {\n        /*** FLUSH_BLOCK(s, 0); ***/\n        flush_block_only(s, false);\n        if (s.strm.avail_out === 0) {\n          return BS_NEED_MORE;\n        }\n        /***/\n      }\n\n    } else if (s.match_available) {\n      /* If there was no match at the previous position, output a\n       * single literal. If there was a match but the current match\n       * is longer, truncate the previous match to a single literal.\n       */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n      bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);\n\n      if (bflush) {\n        /*** FLUSH_BLOCK_ONLY(s, 0) ***/\n        flush_block_only(s, false);\n        /***/\n      }\n      s.strstart++;\n      s.lookahead--;\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n    } else {\n      /* There is no previous match to compare with, wait for\n       * the next step to decide.\n       */\n      s.match_available = 1;\n      s.strstart++;\n      s.lookahead--;\n    }\n  }\n  //Assert (flush != Z_NO_FLUSH, \"no flush?\");\n  if (s.match_available) {\n    //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n    bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);\n\n    s.match_available = 0;\n  }\n  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_BLOCK_DONE;\n}\n\n\n/* ===========================================================================\n * For Z_RLE, simply look for runs of bytes, generate matches only of distance\n * one.  Do not maintain a hash table.  (It will be regenerated if this run of\n * deflate switches away from Z_RLE.)\n */\nfunction deflate_rle(s, flush) {\n  var bflush;            /* set if current block must be flushed */\n  var prev;              /* byte at distance one to match */\n  var scan, strend;      /* scan goes up to strend for length of run */\n\n  var _win = s.window;\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the longest run, plus one for the unrolled loop.\n     */\n    if (s.lookahead <= MAX_MATCH) {\n      fill_window(s);\n      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* See how many times the previous byte repeats */\n    s.match_length = 0;\n    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {\n      scan = s.strstart - 1;\n      prev = _win[scan];\n      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {\n        strend = s.strstart + MAX_MATCH;\n        do {\n          /*jshint noempty:false*/\n        } while (prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 scan < strend);\n        s.match_length = MAX_MATCH - (strend - scan);\n        if (s.match_length > s.lookahead) {\n          s.match_length = s.lookahead;\n        }\n      }\n      //Assert(scan <= s->window+(uInt)(s->window_size-1), \"wild scan\");\n    }\n\n    /* Emit match if have run of MIN_MATCH or longer, else emit literal */\n    if (s.match_length >= MIN_MATCH) {\n      //check_match(s, s.strstart, s.strstart - 1, s.match_length);\n\n      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/\n      bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n      s.strstart += s.match_length;\n      s.match_length = 0;\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n}\n\n/* ===========================================================================\n * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.\n * (It will be regenerated if this run of deflate switches away from Huffman.)\n */\nfunction deflate_huff(s, flush) {\n  var bflush;             /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we have a literal to write. */\n    if (s.lookahead === 0) {\n      fill_window(s);\n      if (s.lookahead === 0) {\n        if (flush === Z_NO_FLUSH) {\n          return BS_NEED_MORE;\n        }\n        break;      /* flush the current block */\n      }\n    }\n\n    /* Output a literal byte */\n    s.match_length = 0;\n    //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n    bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n    s.lookahead--;\n    s.strstart++;\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n}\n\n/* Values for max_lazy_match, good_match and max_chain_length, depending on\n * the desired pack level (0..9). The values given below have been tuned to\n * exclude worst case performance for pathological files. Better values may be\n * found for specific files.\n */\nfunction Config(good_length, max_lazy, nice_length, max_chain, func) {\n  this.good_length = good_length;\n  this.max_lazy = max_lazy;\n  this.nice_length = nice_length;\n  this.max_chain = max_chain;\n  this.func = func;\n}\n\nvar configuration_table;\n\nconfiguration_table = [\n  /*      good lazy nice chain */\n  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */\n  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */\n  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */\n  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */\n\n  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */\n  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */\n  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */\n  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */\n  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */\n  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */\n];\n\n\n/* ===========================================================================\n * Initialize the \"longest match\" routines for a new zlib stream\n */\nfunction lm_init(s) {\n  s.window_size = 2 * s.w_size;\n\n  /*** CLEAR_HASH(s); ***/\n  zero(s.head); // Fill with NIL (= 0);\n\n  /* Set the default configuration parameters:\n   */\n  s.max_lazy_match = configuration_table[s.level].max_lazy;\n  s.good_match = configuration_table[s.level].good_length;\n  s.nice_match = configuration_table[s.level].nice_length;\n  s.max_chain_length = configuration_table[s.level].max_chain;\n\n  s.strstart = 0;\n  s.block_start = 0;\n  s.lookahead = 0;\n  s.insert = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  s.ins_h = 0;\n}\n\n\nfunction DeflateState() {\n  this.strm = null;            /* pointer back to this zlib stream */\n  this.status = 0;            /* as the name implies */\n  this.pending_buf = null;      /* output still pending */\n  this.pending_buf_size = 0;  /* size of pending_buf */\n  this.pending_out = 0;       /* next pending byte to output to the stream */\n  this.pending = 0;           /* nb of bytes in the pending buffer */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n  this.gzhead = null;         /* gzip header information to write */\n  this.gzindex = 0;           /* where in extra, name, or comment */\n  this.method = Z_DEFLATED; /* can only be DEFLATED */\n  this.last_flush = -1;   /* value of flush param for previous deflate call */\n\n  this.w_size = 0;  /* LZ77 window size (32K by default) */\n  this.w_bits = 0;  /* log2(w_size)  (8..16) */\n  this.w_mask = 0;  /* w_size - 1 */\n\n  this.window = null;\n  /* Sliding window. Input bytes are read into the second half of the window,\n   * and move to the first half later to keep a dictionary of at least wSize\n   * bytes. With this organization, matches are limited to a distance of\n   * wSize-MAX_MATCH bytes, but this ensures that IO is always\n   * performed with a length multiple of the block size.\n   */\n\n  this.window_size = 0;\n  /* Actual size of window: 2*wSize, except when the user input buffer\n   * is directly used as sliding window.\n   */\n\n  this.prev = null;\n  /* Link to older string with same hash index. To limit the size of this\n   * array to 64K, this link is maintained only for the last 32K strings.\n   * An index in this array is thus a window index modulo 32K.\n   */\n\n  this.head = null;   /* Heads of the hash chains or NIL. */\n\n  this.ins_h = 0;       /* hash index of string to be inserted */\n  this.hash_size = 0;   /* number of elements in hash table */\n  this.hash_bits = 0;   /* log2(hash_size) */\n  this.hash_mask = 0;   /* hash_size-1 */\n\n  this.hash_shift = 0;\n  /* Number of bits by which ins_h must be shifted at each input\n   * step. It must be such that after MIN_MATCH steps, the oldest\n   * byte no longer takes part in the hash key, that is:\n   *   hash_shift * MIN_MATCH >= hash_bits\n   */\n\n  this.block_start = 0;\n  /* Window position at the beginning of the current output block. Gets\n   * negative when the window is moved backwards.\n   */\n\n  this.match_length = 0;      /* length of best match */\n  this.prev_match = 0;        /* previous match */\n  this.match_available = 0;   /* set if previous match exists */\n  this.strstart = 0;          /* start of string to insert */\n  this.match_start = 0;       /* start of matching string */\n  this.lookahead = 0;         /* number of valid bytes ahead in window */\n\n  this.prev_length = 0;\n  /* Length of the best match at previous step. Matches not greater than this\n   * are discarded. This is used in the lazy match evaluation.\n   */\n\n  this.max_chain_length = 0;\n  /* To speed up deflation, hash chains are never searched beyond this\n   * length.  A higher limit improves compression ratio but degrades the\n   * speed.\n   */\n\n  this.max_lazy_match = 0;\n  /* Attempt to find a better match only when the current match is strictly\n   * smaller than this value. This mechanism is used only for compression\n   * levels >= 4.\n   */\n  // That's alias to max_lazy_match, don't use directly\n  //this.max_insert_length = 0;\n  /* Insert new strings in the hash table only if the match length is not\n   * greater than this length. This saves time but degrades compression.\n   * max_insert_length is used only for compression levels <= 3.\n   */\n\n  this.level = 0;     /* compression level (1..9) */\n  this.strategy = 0;  /* favor or force Huffman coding*/\n\n  this.good_match = 0;\n  /* Use a faster search when the previous match is longer than this */\n\n  this.nice_match = 0; /* Stop searching when current match exceeds this */\n\n              /* used by trees.c: */\n\n  /* Didn't use ct_data typedef below to suppress compiler warning */\n\n  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */\n  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */\n  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */\n\n  // Use flat array of DOUBLE size, with interleaved fata,\n  // because JS does not support effective\n  this.dyn_ltree  = new utils.Buf16(HEAP_SIZE * 2);\n  this.dyn_dtree  = new utils.Buf16((2 * D_CODES + 1) * 2);\n  this.bl_tree    = new utils.Buf16((2 * BL_CODES + 1) * 2);\n  zero(this.dyn_ltree);\n  zero(this.dyn_dtree);\n  zero(this.bl_tree);\n\n  this.l_desc   = null;         /* desc. for literal tree */\n  this.d_desc   = null;         /* desc. for distance tree */\n  this.bl_desc  = null;         /* desc. for bit length tree */\n\n  //ush bl_count[MAX_BITS+1];\n  this.bl_count = new utils.Buf16(MAX_BITS + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */\n  this.heap = new utils.Buf16(2 * L_CODES + 1);  /* heap used to build the Huffman trees */\n  zero(this.heap);\n\n  this.heap_len = 0;               /* number of elements in the heap */\n  this.heap_max = 0;               /* element of largest frequency */\n  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.\n   * The same heap array is used to build all trees.\n   */\n\n  this.depth = new utils.Buf16(2 * L_CODES + 1); //uch depth[2*L_CODES+1];\n  zero(this.depth);\n  /* Depth of each subtree used as tie breaker for trees of equal frequency\n   */\n\n  this.l_buf = 0;          /* buffer index for literals or lengths */\n\n  this.lit_bufsize = 0;\n  /* Size of match buffer for literals/lengths.  There are 4 reasons for\n   * limiting lit_bufsize to 64K:\n   *   - frequencies can be kept in 16 bit counters\n   *   - if compression is not successful for the first block, all input\n   *     data is still in the window so we can still emit a stored block even\n   *     when input comes from standard input.  (This can also be done for\n   *     all blocks if lit_bufsize is not greater than 32K.)\n   *   - if compression is not successful for a file smaller than 64K, we can\n   *     even emit a stored file instead of a stored block (saving 5 bytes).\n   *     This is applicable only for zip (not gzip or zlib).\n   *   - creating new Huffman trees less frequently may not provide fast\n   *     adaptation to changes in the input data statistics. (Take for\n   *     example a binary file with poorly compressible code followed by\n   *     a highly compressible string table.) Smaller buffer sizes give\n   *     fast adaptation but have of course the overhead of transmitting\n   *     trees more frequently.\n   *   - I can't count above 4\n   */\n\n  this.last_lit = 0;      /* running index in l_buf */\n\n  this.d_buf = 0;\n  /* Buffer index for distances. To simplify the code, d_buf and l_buf have\n   * the same number of elements. To use different lengths, an extra flag\n   * array would be necessary.\n   */\n\n  this.opt_len = 0;       /* bit length of current block with optimal trees */\n  this.static_len = 0;    /* bit length of current block with static trees */\n  this.matches = 0;       /* number of string matches in current block */\n  this.insert = 0;        /* bytes at end of window left to insert */\n\n\n  this.bi_buf = 0;\n  /* Output buffer. bits are inserted starting at the bottom (least\n   * significant bits).\n   */\n  this.bi_valid = 0;\n  /* Number of valid bits in bi_buf.  All bits above the last valid bit\n   * are always zero.\n   */\n\n  // Used for window memory init. We safely ignore it for JS. That makes\n  // sense only for pointers and memory check tools.\n  //this.high_water = 0;\n  /* High water mark offset in window for initialized bytes -- bytes above\n   * this are set to zero in order to avoid memory check warnings when\n   * longest match routines access bytes past the input.  This is then\n   * updated to the new high water mark.\n   */\n}\n\n\nfunction deflateResetKeep(strm) {\n  var s;\n\n  if (!strm || !strm.state) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n  strm.total_in = strm.total_out = 0;\n  strm.data_type = Z_UNKNOWN;\n\n  s = strm.state;\n  s.pending = 0;\n  s.pending_out = 0;\n\n  if (s.wrap < 0) {\n    s.wrap = -s.wrap;\n    /* was made negative by deflate(..., Z_FINISH); */\n  }\n  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);\n  strm.adler = (s.wrap === 2) ?\n    0  // crc32(0, Z_NULL, 0)\n  :\n    1; // adler32(0, Z_NULL, 0)\n  s.last_flush = Z_NO_FLUSH;\n  trees._tr_init(s);\n  return Z_OK;\n}\n\n\nfunction deflateReset(strm) {\n  var ret = deflateResetKeep(strm);\n  if (ret === Z_OK) {\n    lm_init(strm.state);\n  }\n  return ret;\n}\n\n\nfunction deflateSetHeader(strm, head) {\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  if (strm.state.wrap !== 2) { return Z_STREAM_ERROR; }\n  strm.state.gzhead = head;\n  return Z_OK;\n}\n\n\nfunction deflateInit2(strm, level, method, windowBits, memLevel, strategy) {\n  if (!strm) { // === Z_NULL\n    return Z_STREAM_ERROR;\n  }\n  var wrap = 1;\n\n  if (level === Z_DEFAULT_COMPRESSION) {\n    level = 6;\n  }\n\n  if (windowBits < 0) { /* suppress zlib wrapper */\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n\n  else if (windowBits > 15) {\n    wrap = 2;           /* write gzip wrapper instead */\n    windowBits -= 16;\n  }\n\n\n  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||\n    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||\n    strategy < 0 || strategy > Z_FIXED) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n\n  if (windowBits === 8) {\n    windowBits = 9;\n  }\n  /* until 256-byte window bug fixed */\n\n  var s = new DeflateState();\n\n  strm.state = s;\n  s.strm = strm;\n\n  s.wrap = wrap;\n  s.gzhead = null;\n  s.w_bits = windowBits;\n  s.w_size = 1 << s.w_bits;\n  s.w_mask = s.w_size - 1;\n\n  s.hash_bits = memLevel + 7;\n  s.hash_size = 1 << s.hash_bits;\n  s.hash_mask = s.hash_size - 1;\n  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);\n\n  s.window = new utils.Buf8(s.w_size * 2);\n  s.head = new utils.Buf16(s.hash_size);\n  s.prev = new utils.Buf16(s.w_size);\n\n  // Don't need mem init magic for JS.\n  //s.high_water = 0;  /* nothing written to s->window yet */\n\n  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */\n\n  s.pending_buf_size = s.lit_bufsize * 4;\n\n  //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);\n  //s->pending_buf = (uchf *) overlay;\n  s.pending_buf = new utils.Buf8(s.pending_buf_size);\n\n  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)\n  //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);\n  s.d_buf = 1 * s.lit_bufsize;\n\n  //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;\n  s.l_buf = (1 + 2) * s.lit_bufsize;\n\n  s.level = level;\n  s.strategy = strategy;\n  s.method = method;\n\n  return deflateReset(strm);\n}\n\nfunction deflateInit(strm, level) {\n  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);\n}\n\n\nfunction deflate(strm, flush) {\n  var old_flush, s;\n  var beg, val; // for gzip header write only\n\n  if (!strm || !strm.state ||\n    flush > Z_BLOCK || flush < 0) {\n    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;\n  }\n\n  s = strm.state;\n\n  if (!strm.output ||\n      (!strm.input && strm.avail_in !== 0) ||\n      (s.status === FINISH_STATE && flush !== Z_FINISH)) {\n    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);\n  }\n\n  s.strm = strm; /* just in case */\n  old_flush = s.last_flush;\n  s.last_flush = flush;\n\n  /* Write the header */\n  if (s.status === INIT_STATE) {\n\n    if (s.wrap === 2) { // GZIP header\n      strm.adler = 0;  //crc32(0L, Z_NULL, 0);\n      put_byte(s, 31);\n      put_byte(s, 139);\n      put_byte(s, 8);\n      if (!s.gzhead) { // s->gzhead == Z_NULL\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, s.level === 9 ? 2 :\n                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                     4 : 0));\n        put_byte(s, OS_CODE);\n        s.status = BUSY_STATE;\n      }\n      else {\n        put_byte(s, (s.gzhead.text ? 1 : 0) +\n                    (s.gzhead.hcrc ? 2 : 0) +\n                    (!s.gzhead.extra ? 0 : 4) +\n                    (!s.gzhead.name ? 0 : 8) +\n                    (!s.gzhead.comment ? 0 : 16)\n                );\n        put_byte(s, s.gzhead.time & 0xff);\n        put_byte(s, (s.gzhead.time >> 8) & 0xff);\n        put_byte(s, (s.gzhead.time >> 16) & 0xff);\n        put_byte(s, (s.gzhead.time >> 24) & 0xff);\n        put_byte(s, s.level === 9 ? 2 :\n                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                     4 : 0));\n        put_byte(s, s.gzhead.os & 0xff);\n        if (s.gzhead.extra && s.gzhead.extra.length) {\n          put_byte(s, s.gzhead.extra.length & 0xff);\n          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);\n        }\n        if (s.gzhead.hcrc) {\n          strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);\n        }\n        s.gzindex = 0;\n        s.status = EXTRA_STATE;\n      }\n    }\n    else // DEFLATE header\n    {\n      var header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;\n      var level_flags = -1;\n\n      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {\n        level_flags = 0;\n      } else if (s.level < 6) {\n        level_flags = 1;\n      } else if (s.level === 6) {\n        level_flags = 2;\n      } else {\n        level_flags = 3;\n      }\n      header |= (level_flags << 6);\n      if (s.strstart !== 0) { header |= PRESET_DICT; }\n      header += 31 - (header % 31);\n\n      s.status = BUSY_STATE;\n      putShortMSB(s, header);\n\n      /* Save the adler32 of the preset dictionary: */\n      if (s.strstart !== 0) {\n        putShortMSB(s, strm.adler >>> 16);\n        putShortMSB(s, strm.adler & 0xffff);\n      }\n      strm.adler = 1; // adler32(0L, Z_NULL, 0);\n    }\n  }\n\n//#ifdef GZIP\n  if (s.status === EXTRA_STATE) {\n    if (s.gzhead.extra/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n\n      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            break;\n          }\n        }\n        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);\n        s.gzindex++;\n      }\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (s.gzindex === s.gzhead.extra.length) {\n        s.gzindex = 0;\n        s.status = NAME_STATE;\n      }\n    }\n    else {\n      s.status = NAME_STATE;\n    }\n  }\n  if (s.status === NAME_STATE) {\n    if (s.gzhead.name/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n      //int val;\n\n      do {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            val = 1;\n            break;\n          }\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.name.length) {\n          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (val === 0) {\n        s.gzindex = 0;\n        s.status = COMMENT_STATE;\n      }\n    }\n    else {\n      s.status = COMMENT_STATE;\n    }\n  }\n  if (s.status === COMMENT_STATE) {\n    if (s.gzhead.comment/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n      //int val;\n\n      do {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            val = 1;\n            break;\n          }\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.comment.length) {\n          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (val === 0) {\n        s.status = HCRC_STATE;\n      }\n    }\n    else {\n      s.status = HCRC_STATE;\n    }\n  }\n  if (s.status === HCRC_STATE) {\n    if (s.gzhead.hcrc) {\n      if (s.pending + 2 > s.pending_buf_size) {\n        flush_pending(strm);\n      }\n      if (s.pending + 2 <= s.pending_buf_size) {\n        put_byte(s, strm.adler & 0xff);\n        put_byte(s, (strm.adler >> 8) & 0xff);\n        strm.adler = 0; //crc32(0L, Z_NULL, 0);\n        s.status = BUSY_STATE;\n      }\n    }\n    else {\n      s.status = BUSY_STATE;\n    }\n  }\n//#endif\n\n  /* Flush as much pending output as possible */\n  if (s.pending !== 0) {\n    flush_pending(strm);\n    if (strm.avail_out === 0) {\n      /* Since avail_out is 0, deflate will be called again with\n       * more output space, but possibly with both pending and\n       * avail_in equal to zero. There won't be anything to do,\n       * but this is not an error situation so make sure we\n       * return OK instead of BUF_ERROR at next call of deflate:\n       */\n      s.last_flush = -1;\n      return Z_OK;\n    }\n\n    /* Make sure there is something to do and avoid duplicate consecutive\n     * flushes. For repeated and useless calls with Z_FINISH, we keep\n     * returning Z_STREAM_END instead of Z_BUF_ERROR.\n     */\n  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&\n    flush !== Z_FINISH) {\n    return err(strm, Z_BUF_ERROR);\n  }\n\n  /* User must not provide more input after the first FINISH: */\n  if (s.status === FINISH_STATE && strm.avail_in !== 0) {\n    return err(strm, Z_BUF_ERROR);\n  }\n\n  /* Start a new block or continue the current one.\n   */\n  if (strm.avail_in !== 0 || s.lookahead !== 0 ||\n    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {\n    var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :\n      (s.strategy === Z_RLE ? deflate_rle(s, flush) :\n        configuration_table[s.level].func(s, flush));\n\n    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {\n      s.status = FINISH_STATE;\n    }\n    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {\n      if (strm.avail_out === 0) {\n        s.last_flush = -1;\n        /* avoid BUF_ERROR next call, see above */\n      }\n      return Z_OK;\n      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call\n       * of deflate should use the same flush parameter to make sure\n       * that the flush is complete. So we don't have to output an\n       * empty block here, this will be done at next call. This also\n       * ensures that for a very small output buffer, we emit at most\n       * one empty block.\n       */\n    }\n    if (bstate === BS_BLOCK_DONE) {\n      if (flush === Z_PARTIAL_FLUSH) {\n        trees._tr_align(s);\n      }\n      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */\n\n        trees._tr_stored_block(s, 0, 0, false);\n        /* For a full flush, this empty block will be recognized\n         * as a special marker by inflate_sync().\n         */\n        if (flush === Z_FULL_FLUSH) {\n          /*** CLEAR_HASH(s); ***/             /* forget history */\n          zero(s.head); // Fill with NIL (= 0);\n\n          if (s.lookahead === 0) {\n            s.strstart = 0;\n            s.block_start = 0;\n            s.insert = 0;\n          }\n        }\n      }\n      flush_pending(strm);\n      if (strm.avail_out === 0) {\n        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */\n        return Z_OK;\n      }\n    }\n  }\n  //Assert(strm->avail_out > 0, \"bug2\");\n  //if (strm.avail_out <= 0) { throw new Error(\"bug2\");}\n\n  if (flush !== Z_FINISH) { return Z_OK; }\n  if (s.wrap <= 0) { return Z_STREAM_END; }\n\n  /* Write the trailer */\n  if (s.wrap === 2) {\n    put_byte(s, strm.adler & 0xff);\n    put_byte(s, (strm.adler >> 8) & 0xff);\n    put_byte(s, (strm.adler >> 16) & 0xff);\n    put_byte(s, (strm.adler >> 24) & 0xff);\n    put_byte(s, strm.total_in & 0xff);\n    put_byte(s, (strm.total_in >> 8) & 0xff);\n    put_byte(s, (strm.total_in >> 16) & 0xff);\n    put_byte(s, (strm.total_in >> 24) & 0xff);\n  }\n  else\n  {\n    putShortMSB(s, strm.adler >>> 16);\n    putShortMSB(s, strm.adler & 0xffff);\n  }\n\n  flush_pending(strm);\n  /* If avail_out is zero, the application will call deflate again\n   * to flush the rest.\n   */\n  if (s.wrap > 0) { s.wrap = -s.wrap; }\n  /* write the trailer only once! */\n  return s.pending !== 0 ? Z_OK : Z_STREAM_END;\n}\n\nfunction deflateEnd(strm) {\n  var status;\n\n  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {\n    return Z_STREAM_ERROR;\n  }\n\n  status = strm.state.status;\n  if (status !== INIT_STATE &&\n    status !== EXTRA_STATE &&\n    status !== NAME_STATE &&\n    status !== COMMENT_STATE &&\n    status !== HCRC_STATE &&\n    status !== BUSY_STATE &&\n    status !== FINISH_STATE\n  ) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n  strm.state = null;\n\n  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;\n}\n\n\n/* =========================================================================\n * Initializes the compression dictionary from the given byte\n * sequence without producing any compressed output.\n */\nfunction deflateSetDictionary(strm, dictionary) {\n  var dictLength = dictionary.length;\n\n  var s;\n  var str, n;\n  var wrap;\n  var avail;\n  var next;\n  var input;\n  var tmpDict;\n\n  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {\n    return Z_STREAM_ERROR;\n  }\n\n  s = strm.state;\n  wrap = s.wrap;\n\n  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {\n    return Z_STREAM_ERROR;\n  }\n\n  /* when using zlib wrappers, compute Adler-32 for provided dictionary */\n  if (wrap === 1) {\n    /* adler32(strm->adler, dictionary, dictLength); */\n    strm.adler = adler32(strm.adler, dictionary, dictLength, 0);\n  }\n\n  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */\n\n  /* if dictionary would fill window, just replace the history */\n  if (dictLength >= s.w_size) {\n    if (wrap === 0) {            /* already empty otherwise */\n      /*** CLEAR_HASH(s); ***/\n      zero(s.head); // Fill with NIL (= 0);\n      s.strstart = 0;\n      s.block_start = 0;\n      s.insert = 0;\n    }\n    /* use the tail */\n    // dictionary = dictionary.slice(dictLength - s.w_size);\n    tmpDict = new utils.Buf8(s.w_size);\n    utils.arraySet(tmpDict, dictionary, dictLength - s.w_size, s.w_size, 0);\n    dictionary = tmpDict;\n    dictLength = s.w_size;\n  }\n  /* insert dictionary into window and hash */\n  avail = strm.avail_in;\n  next = strm.next_in;\n  input = strm.input;\n  strm.avail_in = dictLength;\n  strm.next_in = 0;\n  strm.input = dictionary;\n  fill_window(s);\n  while (s.lookahead >= MIN_MATCH) {\n    str = s.strstart;\n    n = s.lookahead - (MIN_MATCH - 1);\n    do {\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;\n\n      s.prev[str & s.w_mask] = s.head[s.ins_h];\n\n      s.head[s.ins_h] = str;\n      str++;\n    } while (--n);\n    s.strstart = str;\n    s.lookahead = MIN_MATCH - 1;\n    fill_window(s);\n  }\n  s.strstart += s.lookahead;\n  s.block_start = s.strstart;\n  s.insert = s.lookahead;\n  s.lookahead = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  strm.next_in = next;\n  strm.input = input;\n  strm.avail_in = avail;\n  s.wrap = wrap;\n  return Z_OK;\n}\n\n\nexports.deflateInit = deflateInit;\nexports.deflateInit2 = deflateInit2;\nexports.deflateReset = deflateReset;\nexports.deflateResetKeep = deflateResetKeep;\nexports.deflateSetHeader = deflateSetHeader;\nexports.deflate = deflate;\nexports.deflateEnd = deflateEnd;\nexports.deflateSetDictionary = deflateSetDictionary;\nexports.deflateInfo = 'pako deflate (from Nodeca project)';\n\n/* Not implemented\nexports.deflateBound = deflateBound;\nexports.deflateCopy = deflateCopy;\nexports.deflateParams = deflateParams;\nexports.deflatePending = deflatePending;\nexports.deflatePrime = deflatePrime;\nexports.deflateTune = deflateTune;\n*/\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/pako/lib/zlib/deflate.js\n// module id = 43\n// module chunks = 0","'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar utils = require('../utils/common');\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n//var Z_FILTERED          = 1;\n//var Z_HUFFMAN_ONLY      = 2;\n//var Z_RLE               = 3;\nvar Z_FIXED               = 4;\n//var Z_DEFAULT_STRATEGY  = 0;\n\n/* Possible values of the data_type field (though see inflate()) */\nvar Z_BINARY              = 0;\nvar Z_TEXT                = 1;\n//var Z_ASCII             = 1; // = Z_TEXT\nvar Z_UNKNOWN             = 2;\n\n/*============================================================================*/\n\n\nfunction zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }\n\n// From zutil.h\n\nvar STORED_BLOCK = 0;\nvar STATIC_TREES = 1;\nvar DYN_TREES    = 2;\n/* The three kinds of block type */\n\nvar MIN_MATCH    = 3;\nvar MAX_MATCH    = 258;\n/* The minimum and maximum match lengths */\n\n// From deflate.h\n/* ===========================================================================\n * Internal compression state.\n */\n\nvar LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\n\nvar LITERALS      = 256;\n/* number of literal bytes 0..255 */\n\nvar L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\n\nvar D_CODES       = 30;\n/* number of distance codes */\n\nvar BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\n\nvar HEAP_SIZE     = 2 * L_CODES + 1;\n/* maximum heap size */\n\nvar MAX_BITS      = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nvar Buf_size      = 16;\n/* size of bit buffer in bi_buf */\n\n\n/* ===========================================================================\n * Constants\n */\n\nvar MAX_BL_BITS = 7;\n/* Bit length codes must not exceed MAX_BL_BITS bits */\n\nvar END_BLOCK   = 256;\n/* end of block literal code */\n\nvar REP_3_6     = 16;\n/* repeat previous bit length 3-6 times (2 bits of repeat count) */\n\nvar REPZ_3_10   = 17;\n/* repeat a zero length 3-10 times  (3 bits of repeat count) */\n\nvar REPZ_11_138 = 18;\n/* repeat a zero length 11-138 times  (7 bits of repeat count) */\n\n/* eslint-disable comma-spacing,array-bracket-spacing */\nvar extra_lbits =   /* extra bits for each length code */\n  [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];\n\nvar extra_dbits =   /* extra bits for each distance code */\n  [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];\n\nvar extra_blbits =  /* extra bits for each bit length code */\n  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];\n\nvar bl_order =\n  [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];\n/* eslint-enable comma-spacing,array-bracket-spacing */\n\n/* The lengths of the bit length codes are sent in order of decreasing\n * probability, to avoid transmitting the lengths for unused bit length codes.\n */\n\n/* ===========================================================================\n * Local data. These are initialized only once.\n */\n\n// We pre-fill arrays with 0 to avoid uninitialized gaps\n\nvar DIST_CODE_LEN = 512; /* see definition of array dist_code below */\n\n// !!!! Use flat array insdead of structure, Freq = i*2, Len = i*2+1\nvar static_ltree  = new Array((L_CODES + 2) * 2);\nzero(static_ltree);\n/* The static literal tree. Since the bit lengths are imposed, there is no\n * need for the L_CODES extra codes used during heap construction. However\n * The codes 286 and 287 are needed to build a canonical tree (see _tr_init\n * below).\n */\n\nvar static_dtree  = new Array(D_CODES * 2);\nzero(static_dtree);\n/* The static distance tree. (Actually a trivial tree since all codes use\n * 5 bits.)\n */\n\nvar _dist_code    = new Array(DIST_CODE_LEN);\nzero(_dist_code);\n/* Distance codes. The first 256 values correspond to the distances\n * 3 .. 258, the last 256 values correspond to the top 8 bits of\n * the 15 bit distances.\n */\n\nvar _length_code  = new Array(MAX_MATCH - MIN_MATCH + 1);\nzero(_length_code);\n/* length code for each normalized match length (0 == MIN_MATCH) */\n\nvar base_length   = new Array(LENGTH_CODES);\nzero(base_length);\n/* First normalized length for each code (0 = MIN_MATCH) */\n\nvar base_dist     = new Array(D_CODES);\nzero(base_dist);\n/* First normalized distance for each code (0 = distance of 1) */\n\n\nfunction StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {\n\n  this.static_tree  = static_tree;  /* static tree or NULL */\n  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */\n  this.extra_base   = extra_base;   /* base index for extra_bits */\n  this.elems        = elems;        /* max number of elements in the tree */\n  this.max_length   = max_length;   /* max bit length for the codes */\n\n  // show if `static_tree` has data or dummy - needed for monomorphic objects\n  this.has_stree    = static_tree && static_tree.length;\n}\n\n\nvar static_l_desc;\nvar static_d_desc;\nvar static_bl_desc;\n\n\nfunction TreeDesc(dyn_tree, stat_desc) {\n  this.dyn_tree = dyn_tree;     /* the dynamic tree */\n  this.max_code = 0;            /* largest code with non zero frequency */\n  this.stat_desc = stat_desc;   /* the corresponding static tree */\n}\n\n\n\nfunction d_code(dist) {\n  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];\n}\n\n\n/* ===========================================================================\n * Output a short LSB first on the stream.\n * IN assertion: there is enough room in pendingBuf.\n */\nfunction put_short(s, w) {\n//    put_byte(s, (uch)((w) & 0xff));\n//    put_byte(s, (uch)((ush)(w) >> 8));\n  s.pending_buf[s.pending++] = (w) & 0xff;\n  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;\n}\n\n\n/* ===========================================================================\n * Send a value on a given number of bits.\n * IN assertion: length <= 16 and value fits in length bits.\n */\nfunction send_bits(s, value, length) {\n  if (s.bi_valid > (Buf_size - length)) {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    put_short(s, s.bi_buf);\n    s.bi_buf = value >> (Buf_size - s.bi_valid);\n    s.bi_valid += length - Buf_size;\n  } else {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    s.bi_valid += length;\n  }\n}\n\n\nfunction send_code(s, c, tree) {\n  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);\n}\n\n\n/* ===========================================================================\n * Reverse the first len bits of a code, using straightforward code (a faster\n * method would use a table)\n * IN assertion: 1 <= len <= 15\n */\nfunction bi_reverse(code, len) {\n  var res = 0;\n  do {\n    res |= code & 1;\n    code >>>= 1;\n    res <<= 1;\n  } while (--len > 0);\n  return res >>> 1;\n}\n\n\n/* ===========================================================================\n * Flush the bit buffer, keeping at most 7 bits in it.\n */\nfunction bi_flush(s) {\n  if (s.bi_valid === 16) {\n    put_short(s, s.bi_buf);\n    s.bi_buf = 0;\n    s.bi_valid = 0;\n\n  } else if (s.bi_valid >= 8) {\n    s.pending_buf[s.pending++] = s.bi_buf & 0xff;\n    s.bi_buf >>= 8;\n    s.bi_valid -= 8;\n  }\n}\n\n\n/* ===========================================================================\n * Compute the optimal bit lengths for a tree and update the total bit length\n * for the current block.\n * IN assertion: the fields freq and dad are set, heap[heap_max] and\n *    above are the tree nodes sorted by increasing frequency.\n * OUT assertions: the field len is set to the optimal bit length, the\n *     array bl_count contains the frequencies for each bit length.\n *     The length opt_len is updated; static_len is also updated if stree is\n *     not null.\n */\nfunction gen_bitlen(s, desc)\n//    deflate_state *s;\n//    tree_desc *desc;    /* the tree descriptor */\n{\n  var tree            = desc.dyn_tree;\n  var max_code        = desc.max_code;\n  var stree           = desc.stat_desc.static_tree;\n  var has_stree       = desc.stat_desc.has_stree;\n  var extra           = desc.stat_desc.extra_bits;\n  var base            = desc.stat_desc.extra_base;\n  var max_length      = desc.stat_desc.max_length;\n  var h;              /* heap index */\n  var n, m;           /* iterate over the tree elements */\n  var bits;           /* bit length */\n  var xbits;          /* extra bits */\n  var f;              /* frequency */\n  var overflow = 0;   /* number of elements with bit length too large */\n\n  for (bits = 0; bits <= MAX_BITS; bits++) {\n    s.bl_count[bits] = 0;\n  }\n\n  /* In a first pass, compute the optimal bit lengths (which may\n   * overflow in the case of the bit length tree).\n   */\n  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */\n\n  for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {\n    n = s.heap[h];\n    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;\n    if (bits > max_length) {\n      bits = max_length;\n      overflow++;\n    }\n    tree[n * 2 + 1]/*.Len*/ = bits;\n    /* We overwrite tree[n].Dad which is no longer needed */\n\n    if (n > max_code) { continue; } /* not a leaf node */\n\n    s.bl_count[bits]++;\n    xbits = 0;\n    if (n >= base) {\n      xbits = extra[n - base];\n    }\n    f = tree[n * 2]/*.Freq*/;\n    s.opt_len += f * (bits + xbits);\n    if (has_stree) {\n      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);\n    }\n  }\n  if (overflow === 0) { return; }\n\n  // Trace((stderr,\"\\nbit length overflow\\n\"));\n  /* This happens for example on obj2 and pic of the Calgary corpus */\n\n  /* Find the first bit length which could increase: */\n  do {\n    bits = max_length - 1;\n    while (s.bl_count[bits] === 0) { bits--; }\n    s.bl_count[bits]--;      /* move one leaf down the tree */\n    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */\n    s.bl_count[max_length]--;\n    /* The brother of the overflow item also moves one step up,\n     * but this does not affect bl_count[max_length]\n     */\n    overflow -= 2;\n  } while (overflow > 0);\n\n  /* Now recompute all bit lengths, scanning in increasing frequency.\n   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all\n   * lengths instead of fixing only the wrong ones. This idea is taken\n   * from 'ar' written by Haruhiko Okumura.)\n   */\n  for (bits = max_length; bits !== 0; bits--) {\n    n = s.bl_count[bits];\n    while (n !== 0) {\n      m = s.heap[--h];\n      if (m > max_code) { continue; }\n      if (tree[m * 2 + 1]/*.Len*/ !== bits) {\n        // Trace((stderr,\"code %d bits %d->%d\\n\", m, tree[m].Len, bits));\n        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;\n        tree[m * 2 + 1]/*.Len*/ = bits;\n      }\n      n--;\n    }\n  }\n}\n\n\n/* ===========================================================================\n * Generate the codes for a given tree and bit counts (which need not be\n * optimal).\n * IN assertion: the array bl_count contains the bit length statistics for\n * the given tree and the field len is set for all tree elements.\n * OUT assertion: the field code is set for all tree elements of non\n *     zero code length.\n */\nfunction gen_codes(tree, max_code, bl_count)\n//    ct_data *tree;             /* the tree to decorate */\n//    int max_code;              /* largest code with non zero frequency */\n//    ushf *bl_count;            /* number of codes at each bit length */\n{\n  var next_code = new Array(MAX_BITS + 1); /* next code value for each bit length */\n  var code = 0;              /* running code value */\n  var bits;                  /* bit index */\n  var n;                     /* code index */\n\n  /* The distribution counts are first used to generate the code values\n   * without bit reversal.\n   */\n  for (bits = 1; bits <= MAX_BITS; bits++) {\n    next_code[bits] = code = (code + bl_count[bits - 1]) << 1;\n  }\n  /* Check that the bit counts in bl_count are consistent. The last code\n   * must be all ones.\n   */\n  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,\n  //        \"inconsistent bit counts\");\n  //Tracev((stderr,\"\\ngen_codes: max_code %d \", max_code));\n\n  for (n = 0;  n <= max_code; n++) {\n    var len = tree[n * 2 + 1]/*.Len*/;\n    if (len === 0) { continue; }\n    /* Now reverse the bits */\n    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);\n\n    //Tracecv(tree != static_ltree, (stderr,\"\\nn %3d %c l %2d c %4x (%x) \",\n    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));\n  }\n}\n\n\n/* ===========================================================================\n * Initialize the various 'constant' tables.\n */\nfunction tr_static_init() {\n  var n;        /* iterates over tree elements */\n  var bits;     /* bit counter */\n  var length;   /* length value */\n  var code;     /* code value */\n  var dist;     /* distance index */\n  var bl_count = new Array(MAX_BITS + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  // do check in _tr_init()\n  //if (static_init_done) return;\n\n  /* For some embedded targets, global variables are not initialized: */\n/*#ifdef NO_INIT_GLOBAL_POINTERS\n  static_l_desc.static_tree = static_ltree;\n  static_l_desc.extra_bits = extra_lbits;\n  static_d_desc.static_tree = static_dtree;\n  static_d_desc.extra_bits = extra_dbits;\n  static_bl_desc.extra_bits = extra_blbits;\n#endif*/\n\n  /* Initialize the mapping length (0..255) -> length code (0..28) */\n  length = 0;\n  for (code = 0; code < LENGTH_CODES - 1; code++) {\n    base_length[code] = length;\n    for (n = 0; n < (1 << extra_lbits[code]); n++) {\n      _length_code[length++] = code;\n    }\n  }\n  //Assert (length == 256, \"tr_static_init: length != 256\");\n  /* Note that the length 255 (match length 258) can be represented\n   * in two different ways: code 284 + 5 bits or code 285, so we\n   * overwrite length_code[255] to use the best encoding:\n   */\n  _length_code[length - 1] = code;\n\n  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */\n  dist = 0;\n  for (code = 0; code < 16; code++) {\n    base_dist[code] = dist;\n    for (n = 0; n < (1 << extra_dbits[code]); n++) {\n      _dist_code[dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: dist != 256\");\n  dist >>= 7; /* from now on, all distances are divided by 128 */\n  for (; code < D_CODES; code++) {\n    base_dist[code] = dist << 7;\n    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {\n      _dist_code[256 + dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: 256+dist != 512\");\n\n  /* Construct the codes of the static literal tree */\n  for (bits = 0; bits <= MAX_BITS; bits++) {\n    bl_count[bits] = 0;\n  }\n\n  n = 0;\n  while (n <= 143) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  while (n <= 255) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 9;\n    n++;\n    bl_count[9]++;\n  }\n  while (n <= 279) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 7;\n    n++;\n    bl_count[7]++;\n  }\n  while (n <= 287) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  /* Codes 286 and 287 do not exist, but we must include them in the\n   * tree construction to get a canonical Huffman tree (longest code\n   * all ones)\n   */\n  gen_codes(static_ltree, L_CODES + 1, bl_count);\n\n  /* The static distance tree is trivial: */\n  for (n = 0; n < D_CODES; n++) {\n    static_dtree[n * 2 + 1]/*.Len*/ = 5;\n    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);\n  }\n\n  // Now data ready and we can init static trees\n  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);\n  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);\n  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);\n\n  //static_init_done = true;\n}\n\n\n/* ===========================================================================\n * Initialize a new block.\n */\nfunction init_block(s) {\n  var n; /* iterates over tree elements */\n\n  /* Initialize the trees. */\n  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }\n\n  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;\n  s.opt_len = s.static_len = 0;\n  s.last_lit = s.matches = 0;\n}\n\n\n/* ===========================================================================\n * Flush the bit buffer and align the output on a byte boundary\n */\nfunction bi_windup(s)\n{\n  if (s.bi_valid > 8) {\n    put_short(s, s.bi_buf);\n  } else if (s.bi_valid > 0) {\n    //put_byte(s, (Byte)s->bi_buf);\n    s.pending_buf[s.pending++] = s.bi_buf;\n  }\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n}\n\n/* ===========================================================================\n * Copy a stored block, storing first the length and its\n * one's complement if requested.\n */\nfunction copy_block(s, buf, len, header)\n//DeflateState *s;\n//charf    *buf;    /* the input data */\n//unsigned len;     /* its length */\n//int      header;  /* true if block header must be written */\n{\n  bi_windup(s);        /* align on byte boundary */\n\n  if (header) {\n    put_short(s, len);\n    put_short(s, ~len);\n  }\n//  while (len--) {\n//    put_byte(s, *buf++);\n//  }\n  utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);\n  s.pending += len;\n}\n\n/* ===========================================================================\n * Compares to subtrees, using the tree depth as tie breaker when\n * the subtrees have equal frequency. This minimizes the worst case length.\n */\nfunction smaller(tree, n, m, depth) {\n  var _n2 = n * 2;\n  var _m2 = m * 2;\n  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||\n         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));\n}\n\n/* ===========================================================================\n * Restore the heap property by moving down the tree starting at node k,\n * exchanging a node with the smallest of its two sons if necessary, stopping\n * when the heap property is re-established (each father smaller than its\n * two sons).\n */\nfunction pqdownheap(s, tree, k)\n//    deflate_state *s;\n//    ct_data *tree;  /* the tree to restore */\n//    int k;               /* node to move down */\n{\n  var v = s.heap[k];\n  var j = k << 1;  /* left son of k */\n  while (j <= s.heap_len) {\n    /* Set j to the smallest of the two sons: */\n    if (j < s.heap_len &&\n      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {\n      j++;\n    }\n    /* Exit if v is smaller than both sons */\n    if (smaller(tree, v, s.heap[j], s.depth)) { break; }\n\n    /* Exchange v with the smallest son */\n    s.heap[k] = s.heap[j];\n    k = j;\n\n    /* And continue down the tree, setting j to the left son of k */\n    j <<= 1;\n  }\n  s.heap[k] = v;\n}\n\n\n// inlined manually\n// var SMALLEST = 1;\n\n/* ===========================================================================\n * Send the block data compressed using the given Huffman trees\n */\nfunction compress_block(s, ltree, dtree)\n//    deflate_state *s;\n//    const ct_data *ltree; /* literal tree */\n//    const ct_data *dtree; /* distance tree */\n{\n  var dist;           /* distance of matched string */\n  var lc;             /* match length or unmatched char (if dist == 0) */\n  var lx = 0;         /* running index in l_buf */\n  var code;           /* the code to send */\n  var extra;          /* number of extra bits to send */\n\n  if (s.last_lit !== 0) {\n    do {\n      dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);\n      lc = s.pending_buf[s.l_buf + lx];\n      lx++;\n\n      if (dist === 0) {\n        send_code(s, lc, ltree); /* send a literal byte */\n        //Tracecv(isgraph(lc), (stderr,\" '%c' \", lc));\n      } else {\n        /* Here, lc is the match length - MIN_MATCH */\n        code = _length_code[lc];\n        send_code(s, code + LITERALS + 1, ltree); /* send the length code */\n        extra = extra_lbits[code];\n        if (extra !== 0) {\n          lc -= base_length[code];\n          send_bits(s, lc, extra);       /* send the extra length bits */\n        }\n        dist--; /* dist is now the match distance - 1 */\n        code = d_code(dist);\n        //Assert (code < D_CODES, \"bad d_code\");\n\n        send_code(s, code, dtree);       /* send the distance code */\n        extra = extra_dbits[code];\n        if (extra !== 0) {\n          dist -= base_dist[code];\n          send_bits(s, dist, extra);   /* send the extra distance bits */\n        }\n      } /* literal or match pair ? */\n\n      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */\n      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,\n      //       \"pendingBuf overflow\");\n\n    } while (lx < s.last_lit);\n  }\n\n  send_code(s, END_BLOCK, ltree);\n}\n\n\n/* ===========================================================================\n * Construct one Huffman tree and assigns the code bit strings and lengths.\n * Update the total bit length for the current block.\n * IN assertion: the field freq is set for all tree elements.\n * OUT assertions: the fields len and code are set to the optimal bit length\n *     and corresponding code. The length opt_len is updated; static_len is\n *     also updated if stree is not null. The field max_code is set.\n */\nfunction build_tree(s, desc)\n//    deflate_state *s;\n//    tree_desc *desc; /* the tree descriptor */\n{\n  var tree     = desc.dyn_tree;\n  var stree    = desc.stat_desc.static_tree;\n  var has_stree = desc.stat_desc.has_stree;\n  var elems    = desc.stat_desc.elems;\n  var n, m;          /* iterate over heap elements */\n  var max_code = -1; /* largest code with non zero frequency */\n  var node;          /* new node being created */\n\n  /* Construct the initial heap, with least frequent element in\n   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].\n   * heap[0] is not used.\n   */\n  s.heap_len = 0;\n  s.heap_max = HEAP_SIZE;\n\n  for (n = 0; n < elems; n++) {\n    if (tree[n * 2]/*.Freq*/ !== 0) {\n      s.heap[++s.heap_len] = max_code = n;\n      s.depth[n] = 0;\n\n    } else {\n      tree[n * 2 + 1]/*.Len*/ = 0;\n    }\n  }\n\n  /* The pkzip format requires that at least one distance code exists,\n   * and that at least one bit should be sent even if there is only one\n   * possible code. So to avoid special checks later on we force at least\n   * two codes of non zero frequency.\n   */\n  while (s.heap_len < 2) {\n    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);\n    tree[node * 2]/*.Freq*/ = 1;\n    s.depth[node] = 0;\n    s.opt_len--;\n\n    if (has_stree) {\n      s.static_len -= stree[node * 2 + 1]/*.Len*/;\n    }\n    /* node is 0 or 1 so it does not have extra bits */\n  }\n  desc.max_code = max_code;\n\n  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,\n   * establish sub-heaps of increasing lengths:\n   */\n  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }\n\n  /* Construct the Huffman tree by repeatedly combining the least two\n   * frequent nodes.\n   */\n  node = elems;              /* next internal node of the tree */\n  do {\n    //pqremove(s, tree, n);  /* n = node of least frequency */\n    /*** pqremove ***/\n    n = s.heap[1/*SMALLEST*/];\n    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n    /***/\n\n    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */\n\n    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */\n    s.heap[--s.heap_max] = m;\n\n    /* Create a new node father of n and m */\n    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;\n    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;\n    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;\n\n    /* and insert the new node in the heap */\n    s.heap[1/*SMALLEST*/] = node++;\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n\n  } while (s.heap_len >= 2);\n\n  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];\n\n  /* At this point, the fields freq and dad are set. We can now\n   * generate the bit lengths.\n   */\n  gen_bitlen(s, desc);\n\n  /* The field len is now set, we can generate the bit codes */\n  gen_codes(tree, max_code, s.bl_count);\n}\n\n\n/* ===========================================================================\n * Scan a literal or distance tree to determine the frequencies of the codes\n * in the bit length tree.\n */\nfunction scan_tree(s, tree, max_code)\n//    deflate_state *s;\n//    ct_data *tree;   /* the tree to be scanned */\n//    int max_code;    /* and its largest code of non zero frequency */\n{\n  var n;                     /* iterates over all tree elements */\n  var prevlen = -1;          /* last emitted length */\n  var curlen;                /* length of current code */\n\n  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  var count = 0;             /* repeat count of the current code */\n  var max_count = 7;         /* max repeat count */\n  var min_count = 4;         /* min repeat count */\n\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      s.bl_tree[curlen * 2]/*.Freq*/ += count;\n\n    } else if (curlen !== 0) {\n\n      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }\n      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;\n\n    } else if (count <= 10) {\n      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;\n\n    } else {\n      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;\n    }\n\n    count = 0;\n    prevlen = curlen;\n\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n}\n\n\n/* ===========================================================================\n * Send a literal or distance tree in compressed form, using the codes in\n * bl_tree.\n */\nfunction send_tree(s, tree, max_code)\n//    deflate_state *s;\n//    ct_data *tree; /* the tree to be scanned */\n//    int max_code;       /* and its largest code of non zero frequency */\n{\n  var n;                     /* iterates over all tree elements */\n  var prevlen = -1;          /* last emitted length */\n  var curlen;                /* length of current code */\n\n  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  var count = 0;             /* repeat count of the current code */\n  var max_count = 7;         /* max repeat count */\n  var min_count = 4;         /* min repeat count */\n\n  /* tree[max_code+1].Len = -1; */  /* guard already set */\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);\n\n    } else if (curlen !== 0) {\n      if (curlen !== prevlen) {\n        send_code(s, curlen, s.bl_tree);\n        count--;\n      }\n      //Assert(count >= 3 && count <= 6, \" 3_6?\");\n      send_code(s, REP_3_6, s.bl_tree);\n      send_bits(s, count - 3, 2);\n\n    } else if (count <= 10) {\n      send_code(s, REPZ_3_10, s.bl_tree);\n      send_bits(s, count - 3, 3);\n\n    } else {\n      send_code(s, REPZ_11_138, s.bl_tree);\n      send_bits(s, count - 11, 7);\n    }\n\n    count = 0;\n    prevlen = curlen;\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n}\n\n\n/* ===========================================================================\n * Construct the Huffman tree for the bit lengths and return the index in\n * bl_order of the last bit length code to send.\n */\nfunction build_bl_tree(s) {\n  var max_blindex;  /* index of last bit length code of non zero freq */\n\n  /* Determine the bit length frequencies for literal and distance trees */\n  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);\n  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);\n\n  /* Build the bit length tree: */\n  build_tree(s, s.bl_desc);\n  /* opt_len now includes the length of the tree representations, except\n   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.\n   */\n\n  /* Determine the number of bit length codes to send. The pkzip format\n   * requires that at least 4 bit length codes be sent. (appnote.txt says\n   * 3 but the actual value used is 4.)\n   */\n  for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {\n    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {\n      break;\n    }\n  }\n  /* Update opt_len to include the bit length tree and counts */\n  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;\n  //Tracev((stderr, \"\\ndyn trees: dyn %ld, stat %ld\",\n  //        s->opt_len, s->static_len));\n\n  return max_blindex;\n}\n\n\n/* ===========================================================================\n * Send the header for a block using dynamic Huffman trees: the counts, the\n * lengths of the bit length codes, the literal tree and the distance tree.\n * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.\n */\nfunction send_all_trees(s, lcodes, dcodes, blcodes)\n//    deflate_state *s;\n//    int lcodes, dcodes, blcodes; /* number of codes for each tree */\n{\n  var rank;                    /* index in bl_order */\n\n  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, \"not enough codes\");\n  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,\n  //        \"too many codes\");\n  //Tracev((stderr, \"\\nbl counts: \"));\n  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */\n  send_bits(s, dcodes - 1,   5);\n  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */\n  for (rank = 0; rank < blcodes; rank++) {\n    //Tracev((stderr, \"\\nbl code %2d \", bl_order[rank]));\n    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);\n  }\n  //Tracev((stderr, \"\\nbl tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */\n  //Tracev((stderr, \"\\nlit tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */\n  //Tracev((stderr, \"\\ndist tree: sent %ld\", s->bits_sent));\n}\n\n\n/* ===========================================================================\n * Check if the data type is TEXT or BINARY, using the following algorithm:\n * - TEXT if the two conditions below are satisfied:\n *    a) There are no non-portable control characters belonging to the\n *       \"black list\" (0..6, 14..25, 28..31).\n *    b) There is at least one printable character belonging to the\n *       \"white list\" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).\n * - BINARY otherwise.\n * - The following partially-portable control characters form a\n *   \"gray list\" that is ignored in this detection algorithm:\n *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).\n * IN assertion: the fields Freq of dyn_ltree are set.\n */\nfunction detect_data_type(s) {\n  /* black_mask is the bit mask of black-listed bytes\n   * set bits 0..6, 14..25, and 28..31\n   * 0xf3ffc07f = binary 11110011111111111100000001111111\n   */\n  var black_mask = 0xf3ffc07f;\n  var n;\n\n  /* Check for non-textual (\"black-listed\") bytes. */\n  for (n = 0; n <= 31; n++, black_mask >>>= 1) {\n    if ((black_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {\n      return Z_BINARY;\n    }\n  }\n\n  /* Check for textual (\"white-listed\") bytes. */\n  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||\n      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {\n    return Z_TEXT;\n  }\n  for (n = 32; n < LITERALS; n++) {\n    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {\n      return Z_TEXT;\n    }\n  }\n\n  /* There are no \"black-listed\" or \"white-listed\" bytes:\n   * this stream either is empty or has tolerated (\"gray-listed\") bytes only.\n   */\n  return Z_BINARY;\n}\n\n\nvar static_init_done = false;\n\n/* ===========================================================================\n * Initialize the tree data structures for a new zlib stream.\n */\nfunction _tr_init(s)\n{\n\n  if (!static_init_done) {\n    tr_static_init();\n    static_init_done = true;\n  }\n\n  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);\n  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);\n  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);\n\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n\n  /* Initialize the first block of the first file: */\n  init_block(s);\n}\n\n\n/* ===========================================================================\n * Send a stored block\n */\nfunction _tr_stored_block(s, buf, stored_len, last)\n//DeflateState *s;\n//charf *buf;       /* input block */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n{\n  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */\n  copy_block(s, buf, stored_len, true); /* with header */\n}\n\n\n/* ===========================================================================\n * Send one empty static block to give enough lookahead for inflate.\n * This takes 10 bits, of which 7 may remain in the bit buffer.\n */\nfunction _tr_align(s) {\n  send_bits(s, STATIC_TREES << 1, 3);\n  send_code(s, END_BLOCK, static_ltree);\n  bi_flush(s);\n}\n\n\n/* ===========================================================================\n * Determine the best encoding for the current block: dynamic trees, static\n * trees or store, and output the encoded block to the zip file.\n */\nfunction _tr_flush_block(s, buf, stored_len, last)\n//DeflateState *s;\n//charf *buf;       /* input block, or NULL if too old */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n{\n  var opt_lenb, static_lenb;  /* opt_len and static_len in bytes */\n  var max_blindex = 0;        /* index of last bit length code of non zero freq */\n\n  /* Build the Huffman trees unless a stored block is forced */\n  if (s.level > 0) {\n\n    /* Check if the file is binary or text */\n    if (s.strm.data_type === Z_UNKNOWN) {\n      s.strm.data_type = detect_data_type(s);\n    }\n\n    /* Construct the literal and distance trees */\n    build_tree(s, s.l_desc);\n    // Tracev((stderr, \"\\nlit data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n\n    build_tree(s, s.d_desc);\n    // Tracev((stderr, \"\\ndist data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n    /* At this point, opt_len and static_len are the total bit lengths of\n     * the compressed block data, excluding the tree representations.\n     */\n\n    /* Build the bit length tree for the above two trees, and get the index\n     * in bl_order of the last bit length code to send.\n     */\n    max_blindex = build_bl_tree(s);\n\n    /* Determine the best encoding. Compute the block lengths in bytes. */\n    opt_lenb = (s.opt_len + 3 + 7) >>> 3;\n    static_lenb = (s.static_len + 3 + 7) >>> 3;\n\n    // Tracev((stderr, \"\\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u \",\n    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,\n    //        s->last_lit));\n\n    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }\n\n  } else {\n    // Assert(buf != (char*)0, \"lost buf\");\n    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */\n  }\n\n  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {\n    /* 4: two words for the lengths */\n\n    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.\n     * Otherwise we can't have processed more than WSIZE input bytes since\n     * the last block flush, because compression would have been\n     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to\n     * transform a block into a stored block.\n     */\n    _tr_stored_block(s, buf, stored_len, last);\n\n  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {\n\n    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);\n    compress_block(s, static_ltree, static_dtree);\n\n  } else {\n    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);\n    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);\n    compress_block(s, s.dyn_ltree, s.dyn_dtree);\n  }\n  // Assert (s->compressed_len == s->bits_sent, \"bad compressed size\");\n  /* The above check is made mod 2^32, for files larger than 512 MB\n   * and uLong implemented on 32 bits.\n   */\n  init_block(s);\n\n  if (last) {\n    bi_windup(s);\n  }\n  // Tracev((stderr,\"\\ncomprlen %lu(%lu) \", s->compressed_len>>3,\n  //       s->compressed_len-7*last));\n}\n\n/* ===========================================================================\n * Save the match info and tally the frequency counts. Return true if\n * the current block must be flushed.\n */\nfunction _tr_tally(s, dist, lc)\n//    deflate_state *s;\n//    unsigned dist;  /* distance of matched string */\n//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */\n{\n  //var out_length, in_length, dcode;\n\n  s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;\n  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;\n\n  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;\n  s.last_lit++;\n\n  if (dist === 0) {\n    /* lc is the unmatched char */\n    s.dyn_ltree[lc * 2]/*.Freq*/++;\n  } else {\n    s.matches++;\n    /* Here, lc is the match length - MIN_MATCH */\n    dist--;             /* dist = match distance - 1 */\n    //Assert((ush)dist < (ush)MAX_DIST(s) &&\n    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&\n    //       (ush)d_code(dist) < (ush)D_CODES,  \"_tr_tally: bad match\");\n\n    s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]/*.Freq*/++;\n    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;\n  }\n\n// (!) This block is disabled in zlib defailts,\n// don't enable it for binary compatibility\n\n//#ifdef TRUNCATE_BLOCK\n//  /* Try to guess if it is profitable to stop the current block here */\n//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {\n//    /* Compute an upper bound for the compressed length */\n//    out_length = s.last_lit*8;\n//    in_length = s.strstart - s.block_start;\n//\n//    for (dcode = 0; dcode < D_CODES; dcode++) {\n//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);\n//    }\n//    out_length >>>= 3;\n//    //Tracev((stderr,\"\\nlast_lit %u, in %ld, out ~%ld(%ld%%) \",\n//    //       s->last_lit, in_length, out_length,\n//    //       100L - out_length*100L/in_length));\n//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {\n//      return true;\n//    }\n//  }\n//#endif\n\n  return (s.last_lit === s.lit_bufsize - 1);\n  /* We avoid equality with lit_bufsize because of wraparound at 64K\n   * on 16 bit machines and because stored blocks are restricted to\n   * 64K-1 bytes.\n   */\n}\n\nexports._tr_init  = _tr_init;\nexports._tr_stored_block = _tr_stored_block;\nexports._tr_flush_block  = _tr_flush_block;\nexports._tr_tally = _tr_tally;\nexports._tr_align = _tr_align;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/pako/lib/zlib/trees.js\n// module id = 44\n// module chunks = 0","'use strict';\n\n\nvar zlib_inflate = require('./zlib/inflate');\nvar utils        = require('./utils/common');\nvar strings      = require('./utils/strings');\nvar c            = require('./zlib/constants');\nvar msg          = require('./zlib/messages');\nvar ZStream      = require('./zlib/zstream');\nvar GZheader     = require('./zlib/gzheader');\n\nvar toString = Object.prototype.toString;\n\n/**\n * class Inflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[inflate]]\n * and [[inflateRaw]].\n **/\n\n/* internal\n * inflate.chunks -> Array\n *\n * Chunks of output data, if [[Inflate#onData]] not overriden.\n **/\n\n/**\n * Inflate.result -> Uint8Array|Array|String\n *\n * Uncompressed result, generated by default [[Inflate#onData]]\n * and [[Inflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Inflate#push]] with `Z_FINISH` / `true` param) or if you\n * push a chunk with explicit flush (call [[Inflate#push]] with\n * `Z_SYNC_FLUSH` param).\n **/\n\n/**\n * Inflate.err -> Number\n *\n * Error code after inflate finished. 0 (Z_OK) on success.\n * Should be checked if broken data possible.\n **/\n\n/**\n * Inflate.msg -> String\n *\n * Error message, if [[Inflate.err]] != 0\n **/\n\n\n/**\n * new Inflate(options)\n * - options (Object): zlib inflate options.\n *\n * Creates new inflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `windowBits`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw inflate\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n * By default, when no options set, autodetect deflate/gzip data format via\n * wrapper header.\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])\n *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * var inflate = new pako.Inflate({ level: 3});\n *\n * inflate.push(chunk1, false);\n * inflate.push(chunk2, true);  // true -> last chunk\n *\n * if (inflate.err) { throw new Error(inflate.err); }\n *\n * console.log(inflate.result);\n * ```\n **/\nfunction Inflate(options) {\n  if (!(this instanceof Inflate)) return new Inflate(options);\n\n  this.options = utils.assign({\n    chunkSize: 16384,\n    windowBits: 0,\n    to: ''\n  }, options || {});\n\n  var opt = this.options;\n\n  // Force window size for `raw` data, if not set directly,\n  // because we have no header for autodetect.\n  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {\n    opt.windowBits = -opt.windowBits;\n    if (opt.windowBits === 0) { opt.windowBits = -15; }\n  }\n\n  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate\n  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&\n      !(options && options.windowBits)) {\n    opt.windowBits += 32;\n  }\n\n  // Gzip header has no info about windows size, we can do autodetect only\n  // for deflate. So, if window size not set, force it to max when gzip possible\n  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {\n    // bit 3 (16) -> gzipped data\n    // bit 4 (32) -> autodetect gzip/deflate\n    if ((opt.windowBits & 15) === 0) {\n      opt.windowBits |= 15;\n    }\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm   = new ZStream();\n  this.strm.avail_out = 0;\n\n  var status  = zlib_inflate.inflateInit2(\n    this.strm,\n    opt.windowBits\n  );\n\n  if (status !== c.Z_OK) {\n    throw new Error(msg[status]);\n  }\n\n  this.header = new GZheader();\n\n  zlib_inflate.inflateGetHeader(this.strm, this.header);\n}\n\n/**\n * Inflate#push(data[, mode]) -> Boolean\n * - data (Uint8Array|Array|ArrayBuffer|String): input data\n * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` meansh Z_FINISH.\n *\n * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with\n * new output chunks. Returns `true` on success. The last data block must have\n * mode Z_FINISH (or `true`). That will flush internal pending buffers and call\n * [[Inflate#onEnd]]. For interim explicit flushes (without ending the stream) you\n * can use mode Z_SYNC_FLUSH, keeping the decompression context.\n *\n * On fail call [[Inflate#onEnd]] with error code and return false.\n *\n * We strongly recommend to use `Uint8Array` on input for best speed (output\n * format is detected automatically). Also, don't skip last param and always\n * use the same type in your code (boolean or number). That will improve JS speed.\n *\n * For regular `Array`-s make sure all elements are [0..255].\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nInflate.prototype.push = function (data, mode) {\n  var strm = this.strm;\n  var chunkSize = this.options.chunkSize;\n  var dictionary = this.options.dictionary;\n  var status, _mode;\n  var next_out_utf8, tail, utf8str;\n  var dict;\n\n  // Flag to properly process Z_BUF_ERROR on testing inflate call\n  // when we check that all output data was flushed.\n  var allowBufError = false;\n\n  if (this.ended) { return false; }\n  _mode = (mode === ~~mode) ? mode : ((mode === true) ? c.Z_FINISH : c.Z_NO_FLUSH);\n\n  // Convert data if needed\n  if (typeof data === 'string') {\n    // Only binary strings can be decompressed on practice\n    strm.input = strings.binstring2buf(data);\n  } else if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  do {\n    if (strm.avail_out === 0) {\n      strm.output = new utils.Buf8(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n\n    status = zlib_inflate.inflate(strm, c.Z_NO_FLUSH);    /* no bad return value */\n\n    if (status === c.Z_NEED_DICT && dictionary) {\n      // Convert data if needed\n      if (typeof dictionary === 'string') {\n        dict = strings.string2buf(dictionary);\n      } else if (toString.call(dictionary) === '[object ArrayBuffer]') {\n        dict = new Uint8Array(dictionary);\n      } else {\n        dict = dictionary;\n      }\n\n      status = zlib_inflate.inflateSetDictionary(this.strm, dict);\n\n    }\n\n    if (status === c.Z_BUF_ERROR && allowBufError === true) {\n      status = c.Z_OK;\n      allowBufError = false;\n    }\n\n    if (status !== c.Z_STREAM_END && status !== c.Z_OK) {\n      this.onEnd(status);\n      this.ended = true;\n      return false;\n    }\n\n    if (strm.next_out) {\n      if (strm.avail_out === 0 || status === c.Z_STREAM_END || (strm.avail_in === 0 && (_mode === c.Z_FINISH || _mode === c.Z_SYNC_FLUSH))) {\n\n        if (this.options.to === 'string') {\n\n          next_out_utf8 = strings.utf8border(strm.output, strm.next_out);\n\n          tail = strm.next_out - next_out_utf8;\n          utf8str = strings.buf2string(strm.output, next_out_utf8);\n\n          // move tail\n          strm.next_out = tail;\n          strm.avail_out = chunkSize - tail;\n          if (tail) { utils.arraySet(strm.output, strm.output, next_out_utf8, tail, 0); }\n\n          this.onData(utf8str);\n\n        } else {\n          this.onData(utils.shrinkBuf(strm.output, strm.next_out));\n        }\n      }\n    }\n\n    // When no more input data, we should check that internal inflate buffers\n    // are flushed. The only way to do it when avail_out = 0 - run one more\n    // inflate pass. But if output data not exists, inflate return Z_BUF_ERROR.\n    // Here we set flag to process this error properly.\n    //\n    // NOTE. Deflate does not return error in this case and does not needs such\n    // logic.\n    if (strm.avail_in === 0 && strm.avail_out === 0) {\n      allowBufError = true;\n    }\n\n  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== c.Z_STREAM_END);\n\n  if (status === c.Z_STREAM_END) {\n    _mode = c.Z_FINISH;\n  }\n\n  // Finalize on the last chunk.\n  if (_mode === c.Z_FINISH) {\n    status = zlib_inflate.inflateEnd(this.strm);\n    this.onEnd(status);\n    this.ended = true;\n    return status === c.Z_OK;\n  }\n\n  // callback interim results if Z_SYNC_FLUSH.\n  if (_mode === c.Z_SYNC_FLUSH) {\n    this.onEnd(c.Z_OK);\n    strm.avail_out = 0;\n    return true;\n  }\n\n  return true;\n};\n\n\n/**\n * Inflate#onData(chunk) -> Void\n * - chunk (Uint8Array|Array|String): ouput data. Type of array depends\n *   on js engine support. When string output requested, each chunk\n *   will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nInflate.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Inflate#onEnd(status) -> Void\n * - status (Number): inflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called either after you tell inflate that the input stream is\n * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)\n * or if an error happened. By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nInflate.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === c.Z_OK) {\n    if (this.options.to === 'string') {\n      // Glue & convert here, until we teach pako to send\n      // utf8 alligned strings to onData\n      this.result = this.chunks.join('');\n    } else {\n      this.result = utils.flattenChunks(this.chunks);\n    }\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * inflate(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Decompress `data` with inflate/ungzip and `options`. Autodetect\n * format via wrapper header by default. That's why we don't provide\n * separate `ungzip` method.\n *\n * Supported options are:\n *\n * - windowBits\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , input = pako.deflate([1,2,3,4,5,6,7,8,9])\n *   , output;\n *\n * try {\n *   output = pako.inflate(input);\n * } catch (err)\n *   console.log(err);\n * }\n * ```\n **/\nfunction inflate(input, options) {\n  var inflator = new Inflate(options);\n\n  inflator.push(input, true);\n\n  // That will never happens, if you don't cheat with options :)\n  if (inflator.err) { throw inflator.msg || msg[inflator.err]; }\n\n  return inflator.result;\n}\n\n\n/**\n * inflateRaw(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * The same as [[inflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction inflateRaw(input, options) {\n  options = options || {};\n  options.raw = true;\n  return inflate(input, options);\n}\n\n\n/**\n * ungzip(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Just shortcut to [[inflate]], because it autodetects format\n * by header.content. Done for convenience.\n **/\n\n\nexports.Inflate = Inflate;\nexports.inflate = inflate;\nexports.inflateRaw = inflateRaw;\nexports.ungzip  = inflate;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/pako/lib/inflate.js\n// module id = 45\n// module chunks = 0","'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar utils         = require('../utils/common');\nvar adler32       = require('./adler32');\nvar crc32         = require('./crc32');\nvar inflate_fast  = require('./inffast');\nvar inflate_table = require('./inftrees');\n\nvar CODES = 0;\nvar LENS = 1;\nvar DISTS = 2;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n/* Allowed flush values; see deflate() and inflate() below for details */\n//var Z_NO_FLUSH      = 0;\n//var Z_PARTIAL_FLUSH = 1;\n//var Z_SYNC_FLUSH    = 2;\n//var Z_FULL_FLUSH    = 3;\nvar Z_FINISH        = 4;\nvar Z_BLOCK         = 5;\nvar Z_TREES         = 6;\n\n\n/* Return codes for the compression/decompression functions. Negative values\n * are errors, positive values are used for special but normal events.\n */\nvar Z_OK            = 0;\nvar Z_STREAM_END    = 1;\nvar Z_NEED_DICT     = 2;\n//var Z_ERRNO         = -1;\nvar Z_STREAM_ERROR  = -2;\nvar Z_DATA_ERROR    = -3;\nvar Z_MEM_ERROR     = -4;\nvar Z_BUF_ERROR     = -5;\n//var Z_VERSION_ERROR = -6;\n\n/* The deflate compression method */\nvar Z_DEFLATED  = 8;\n\n\n/* STATES ====================================================================*/\n/* ===========================================================================*/\n\n\nvar    HEAD = 1;       /* i: waiting for magic header */\nvar    FLAGS = 2;      /* i: waiting for method and flags (gzip) */\nvar    TIME = 3;       /* i: waiting for modification time (gzip) */\nvar    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */\nvar    EXLEN = 5;      /* i: waiting for extra length (gzip) */\nvar    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */\nvar    NAME = 7;       /* i: waiting for end of file name (gzip) */\nvar    COMMENT = 8;    /* i: waiting for end of comment (gzip) */\nvar    HCRC = 9;       /* i: waiting for header crc (gzip) */\nvar    DICTID = 10;    /* i: waiting for dictionary check value */\nvar    DICT = 11;      /* waiting for inflateSetDictionary() call */\nvar        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */\nvar        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */\nvar        STORED = 14;    /* i: waiting for stored size (length and complement) */\nvar        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */\nvar        COPY = 16;      /* i/o: waiting for input or output to copy stored block */\nvar        TABLE = 17;     /* i: waiting for dynamic block table lengths */\nvar        LENLENS = 18;   /* i: waiting for code length code lengths */\nvar        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */\nvar            LEN_ = 20;      /* i: same as LEN below, but only first time in */\nvar            LEN = 21;       /* i: waiting for length/lit/eob code */\nvar            LENEXT = 22;    /* i: waiting for length extra bits */\nvar            DIST = 23;      /* i: waiting for distance code */\nvar            DISTEXT = 24;   /* i: waiting for distance extra bits */\nvar            MATCH = 25;     /* o: waiting for output space to copy string */\nvar            LIT = 26;       /* o: waiting for output space to write literal */\nvar    CHECK = 27;     /* i: waiting for 32-bit check value */\nvar    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */\nvar    DONE = 29;      /* finished check, done -- remain here until reset */\nvar    BAD = 30;       /* got a data error -- remain here until reset */\nvar    MEM = 31;       /* got an inflate() memory error -- remain here until reset */\nvar    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */\n\n/* ===========================================================================*/\n\n\n\nvar ENOUGH_LENS = 852;\nvar ENOUGH_DISTS = 592;\n//var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);\n\nvar MAX_WBITS = 15;\n/* 32K LZ77 window */\nvar DEF_WBITS = MAX_WBITS;\n\n\nfunction zswap32(q) {\n  return  (((q >>> 24) & 0xff) +\n          ((q >>> 8) & 0xff00) +\n          ((q & 0xff00) << 8) +\n          ((q & 0xff) << 24));\n}\n\n\nfunction InflateState() {\n  this.mode = 0;             /* current inflate mode */\n  this.last = false;          /* true if processing last block */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n  this.havedict = false;      /* true if dictionary provided */\n  this.flags = 0;             /* gzip header method and flags (0 if zlib) */\n  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */\n  this.check = 0;             /* protected copy of check value */\n  this.total = 0;             /* protected copy of output count */\n  // TODO: may be {}\n  this.head = null;           /* where to save gzip header information */\n\n  /* sliding window */\n  this.wbits = 0;             /* log base 2 of requested window size */\n  this.wsize = 0;             /* window size or zero if not using window */\n  this.whave = 0;             /* valid bytes in the window */\n  this.wnext = 0;             /* window write index */\n  this.window = null;         /* allocated sliding window, if needed */\n\n  /* bit accumulator */\n  this.hold = 0;              /* input bit accumulator */\n  this.bits = 0;              /* number of bits in \"in\" */\n\n  /* for string and stored block copying */\n  this.length = 0;            /* literal or length of data to copy */\n  this.offset = 0;            /* distance back to copy string from */\n\n  /* for table and code decoding */\n  this.extra = 0;             /* extra bits needed */\n\n  /* fixed and dynamic code tables */\n  this.lencode = null;          /* starting table for length/literal codes */\n  this.distcode = null;         /* starting table for distance codes */\n  this.lenbits = 0;           /* index bits for lencode */\n  this.distbits = 0;          /* index bits for distcode */\n\n  /* dynamic table building */\n  this.ncode = 0;             /* number of code length code lengths */\n  this.nlen = 0;              /* number of length code lengths */\n  this.ndist = 0;             /* number of distance code lengths */\n  this.have = 0;              /* number of code lengths in lens[] */\n  this.next = null;              /* next available space in codes[] */\n\n  this.lens = new utils.Buf16(320); /* temporary storage for code lengths */\n  this.work = new utils.Buf16(288); /* work area for code table building */\n\n  /*\n   because we don't have pointers in js, we use lencode and distcode directly\n   as buffers so we don't need codes\n  */\n  //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */\n  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */\n  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */\n  this.sane = 0;                   /* if false, allow invalid distance too far */\n  this.back = 0;                   /* bits back of last unprocessed length/lit */\n  this.was = 0;                    /* initial length of match */\n}\n\nfunction inflateResetKeep(strm) {\n  var state;\n\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  state = strm.state;\n  strm.total_in = strm.total_out = state.total = 0;\n  strm.msg = ''; /*Z_NULL*/\n  if (state.wrap) {       /* to support ill-conceived Java test suite */\n    strm.adler = state.wrap & 1;\n  }\n  state.mode = HEAD;\n  state.last = 0;\n  state.havedict = 0;\n  state.dmax = 32768;\n  state.head = null/*Z_NULL*/;\n  state.hold = 0;\n  state.bits = 0;\n  //state.lencode = state.distcode = state.next = state.codes;\n  state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);\n  state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);\n\n  state.sane = 1;\n  state.back = -1;\n  //Tracev((stderr, \"inflate: reset\\n\"));\n  return Z_OK;\n}\n\nfunction inflateReset(strm) {\n  var state;\n\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  state = strm.state;\n  state.wsize = 0;\n  state.whave = 0;\n  state.wnext = 0;\n  return inflateResetKeep(strm);\n\n}\n\nfunction inflateReset2(strm, windowBits) {\n  var wrap;\n  var state;\n\n  /* get the state */\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  state = strm.state;\n\n  /* extract wrap request from windowBits parameter */\n  if (windowBits < 0) {\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n  else {\n    wrap = (windowBits >> 4) + 1;\n    if (windowBits < 48) {\n      windowBits &= 15;\n    }\n  }\n\n  /* set number of window bits, free window if different */\n  if (windowBits && (windowBits < 8 || windowBits > 15)) {\n    return Z_STREAM_ERROR;\n  }\n  if (state.window !== null && state.wbits !== windowBits) {\n    state.window = null;\n  }\n\n  /* update state and reset the rest of it */\n  state.wrap = wrap;\n  state.wbits = windowBits;\n  return inflateReset(strm);\n}\n\nfunction inflateInit2(strm, windowBits) {\n  var ret;\n  var state;\n\n  if (!strm) { return Z_STREAM_ERROR; }\n  //strm.msg = Z_NULL;                 /* in case we return an error */\n\n  state = new InflateState();\n\n  //if (state === Z_NULL) return Z_MEM_ERROR;\n  //Tracev((stderr, \"inflate: allocated\\n\"));\n  strm.state = state;\n  state.window = null/*Z_NULL*/;\n  ret = inflateReset2(strm, windowBits);\n  if (ret !== Z_OK) {\n    strm.state = null/*Z_NULL*/;\n  }\n  return ret;\n}\n\nfunction inflateInit(strm) {\n  return inflateInit2(strm, DEF_WBITS);\n}\n\n\n/*\n Return state with length and distance decoding tables and index sizes set to\n fixed code decoding.  Normally this returns fixed tables from inffixed.h.\n If BUILDFIXED is defined, then instead this routine builds the tables the\n first time it's called, and returns those tables the first time and\n thereafter.  This reduces the size of the code by about 2K bytes, in\n exchange for a little execution time.  However, BUILDFIXED should not be\n used for threaded applications, since the rewriting of the tables and virgin\n may not be thread-safe.\n */\nvar virgin = true;\n\nvar lenfix, distfix; // We have no pointers in JS, so keep tables separate\n\nfunction fixedtables(state) {\n  /* build fixed huffman tables if first call (may not be thread safe) */\n  if (virgin) {\n    var sym;\n\n    lenfix = new utils.Buf32(512);\n    distfix = new utils.Buf32(32);\n\n    /* literal/length table */\n    sym = 0;\n    while (sym < 144) { state.lens[sym++] = 8; }\n    while (sym < 256) { state.lens[sym++] = 9; }\n    while (sym < 280) { state.lens[sym++] = 7; }\n    while (sym < 288) { state.lens[sym++] = 8; }\n\n    inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });\n\n    /* distance table */\n    sym = 0;\n    while (sym < 32) { state.lens[sym++] = 5; }\n\n    inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });\n\n    /* do this just once */\n    virgin = false;\n  }\n\n  state.lencode = lenfix;\n  state.lenbits = 9;\n  state.distcode = distfix;\n  state.distbits = 5;\n}\n\n\n/*\n Update the window with the last wsize (normally 32K) bytes written before\n returning.  If window does not exist yet, create it.  This is only called\n when a window is already in use, or when output has been written during this\n inflate call, but the end of the deflate stream has not been reached yet.\n It is also called to create a window for dictionary data when a dictionary\n is loaded.\n\n Providing output buffers larger than 32K to inflate() should provide a speed\n advantage, since only the last 32K of output is copied to the sliding window\n upon return from inflate(), and since all distances after the first 32K of\n output will fall in the output data, making match copies simpler and faster.\n The advantage may be dependent on the size of the processor's data caches.\n */\nfunction updatewindow(strm, src, end, copy) {\n  var dist;\n  var state = strm.state;\n\n  /* if it hasn't been done already, allocate space for the window */\n  if (state.window === null) {\n    state.wsize = 1 << state.wbits;\n    state.wnext = 0;\n    state.whave = 0;\n\n    state.window = new utils.Buf8(state.wsize);\n  }\n\n  /* copy state->wsize or less output bytes into the circular window */\n  if (copy >= state.wsize) {\n    utils.arraySet(state.window, src, end - state.wsize, state.wsize, 0);\n    state.wnext = 0;\n    state.whave = state.wsize;\n  }\n  else {\n    dist = state.wsize - state.wnext;\n    if (dist > copy) {\n      dist = copy;\n    }\n    //zmemcpy(state->window + state->wnext, end - copy, dist);\n    utils.arraySet(state.window, src, end - copy, dist, state.wnext);\n    copy -= dist;\n    if (copy) {\n      //zmemcpy(state->window, end - copy, copy);\n      utils.arraySet(state.window, src, end - copy, copy, 0);\n      state.wnext = copy;\n      state.whave = state.wsize;\n    }\n    else {\n      state.wnext += dist;\n      if (state.wnext === state.wsize) { state.wnext = 0; }\n      if (state.whave < state.wsize) { state.whave += dist; }\n    }\n  }\n  return 0;\n}\n\nfunction inflate(strm, flush) {\n  var state;\n  var input, output;          // input/output buffers\n  var next;                   /* next input INDEX */\n  var put;                    /* next output INDEX */\n  var have, left;             /* available input and output */\n  var hold;                   /* bit buffer */\n  var bits;                   /* bits in bit buffer */\n  var _in, _out;              /* save starting available input and output */\n  var copy;                   /* number of stored or match bytes to copy */\n  var from;                   /* where to copy match bytes from */\n  var from_source;\n  var here = 0;               /* current decoding table entry */\n  var here_bits, here_op, here_val; // paked \"here\" denormalized (JS specific)\n  //var last;                   /* parent table entry */\n  var last_bits, last_op, last_val; // paked \"last\" denormalized (JS specific)\n  var len;                    /* length to copy for repeats, bits to drop */\n  var ret;                    /* return code */\n  var hbuf = new utils.Buf8(4);    /* buffer for gzip header crc calculation */\n  var opts;\n\n  var n; // temporary var for NEED_BITS\n\n  var order = /* permutation of code lengths */\n    [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];\n\n\n  if (!strm || !strm.state || !strm.output ||\n      (!strm.input && strm.avail_in !== 0)) {\n    return Z_STREAM_ERROR;\n  }\n\n  state = strm.state;\n  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */\n\n\n  //--- LOAD() ---\n  put = strm.next_out;\n  output = strm.output;\n  left = strm.avail_out;\n  next = strm.next_in;\n  input = strm.input;\n  have = strm.avail_in;\n  hold = state.hold;\n  bits = state.bits;\n  //---\n\n  _in = have;\n  _out = left;\n  ret = Z_OK;\n\n  inf_leave: // goto emulation\n  for (;;) {\n    switch (state.mode) {\n    case HEAD:\n      if (state.wrap === 0) {\n        state.mode = TYPEDO;\n        break;\n      }\n      //=== NEEDBITS(16);\n      while (bits < 16) {\n        if (have === 0) { break inf_leave; }\n        have--;\n        hold += input[next++] << bits;\n        bits += 8;\n      }\n      //===//\n      if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */\n        state.check = 0/*crc32(0L, Z_NULL, 0)*/;\n        //=== CRC2(state.check, hold);\n        hbuf[0] = hold & 0xff;\n        hbuf[1] = (hold >>> 8) & 0xff;\n        state.check = crc32(state.check, hbuf, 2, 0);\n        //===//\n\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = FLAGS;\n        break;\n      }\n      state.flags = 0;           /* expect zlib header */\n      if (state.head) {\n        state.head.done = false;\n      }\n      if (!(state.wrap & 1) ||   /* check if zlib header allowed */\n        (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {\n        strm.msg = 'incorrect header check';\n        state.mode = BAD;\n        break;\n      }\n      if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {\n        strm.msg = 'unknown compression method';\n        state.mode = BAD;\n        break;\n      }\n      //--- DROPBITS(4) ---//\n      hold >>>= 4;\n      bits -= 4;\n      //---//\n      len = (hold & 0x0f)/*BITS(4)*/ + 8;\n      if (state.wbits === 0) {\n        state.wbits = len;\n      }\n      else if (len > state.wbits) {\n        strm.msg = 'invalid window size';\n        state.mode = BAD;\n        break;\n      }\n      state.dmax = 1 << len;\n      //Tracev((stderr, \"inflate:   zlib header ok\\n\"));\n      strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n      state.mode = hold & 0x200 ? DICTID : TYPE;\n      //=== INITBITS();\n      hold = 0;\n      bits = 0;\n      //===//\n      break;\n    case FLAGS:\n      //=== NEEDBITS(16); */\n      while (bits < 16) {\n        if (have === 0) { break inf_leave; }\n        have--;\n        hold += input[next++] << bits;\n        bits += 8;\n      }\n      //===//\n      state.flags = hold;\n      if ((state.flags & 0xff) !== Z_DEFLATED) {\n        strm.msg = 'unknown compression method';\n        state.mode = BAD;\n        break;\n      }\n      if (state.flags & 0xe000) {\n        strm.msg = 'unknown header flags set';\n        state.mode = BAD;\n        break;\n      }\n      if (state.head) {\n        state.head.text = ((hold >> 8) & 1);\n      }\n      if (state.flags & 0x0200) {\n        //=== CRC2(state.check, hold);\n        hbuf[0] = hold & 0xff;\n        hbuf[1] = (hold >>> 8) & 0xff;\n        state.check = crc32(state.check, hbuf, 2, 0);\n        //===//\n      }\n      //=== INITBITS();\n      hold = 0;\n      bits = 0;\n      //===//\n      state.mode = TIME;\n      /* falls through */\n    case TIME:\n      //=== NEEDBITS(32); */\n      while (bits < 32) {\n        if (have === 0) { break inf_leave; }\n        have--;\n        hold += input[next++] << bits;\n        bits += 8;\n      }\n      //===//\n      if (state.head) {\n        state.head.time = hold;\n      }\n      if (state.flags & 0x0200) {\n        //=== CRC4(state.check, hold)\n        hbuf[0] = hold & 0xff;\n        hbuf[1] = (hold >>> 8) & 0xff;\n        hbuf[2] = (hold >>> 16) & 0xff;\n        hbuf[3] = (hold >>> 24) & 0xff;\n        state.check = crc32(state.check, hbuf, 4, 0);\n        //===\n      }\n      //=== INITBITS();\n      hold = 0;\n      bits = 0;\n      //===//\n      state.mode = OS;\n      /* falls through */\n    case OS:\n      //=== NEEDBITS(16); */\n      while (bits < 16) {\n        if (have === 0) { break inf_leave; }\n        have--;\n        hold += input[next++] << bits;\n        bits += 8;\n      }\n      //===//\n      if (state.head) {\n        state.head.xflags = (hold & 0xff);\n        state.head.os = (hold >> 8);\n      }\n      if (state.flags & 0x0200) {\n        //=== CRC2(state.check, hold);\n        hbuf[0] = hold & 0xff;\n        hbuf[1] = (hold >>> 8) & 0xff;\n        state.check = crc32(state.check, hbuf, 2, 0);\n        //===//\n      }\n      //=== INITBITS();\n      hold = 0;\n      bits = 0;\n      //===//\n      state.mode = EXLEN;\n      /* falls through */\n    case EXLEN:\n      if (state.flags & 0x0400) {\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.length = hold;\n        if (state.head) {\n          state.head.extra_len = hold;\n        }\n        if (state.flags & 0x0200) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32(state.check, hbuf, 2, 0);\n          //===//\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n      }\n      else if (state.head) {\n        state.head.extra = null/*Z_NULL*/;\n      }\n      state.mode = EXTRA;\n      /* falls through */\n    case EXTRA:\n      if (state.flags & 0x0400) {\n        copy = state.length;\n        if (copy > have) { copy = have; }\n        if (copy) {\n          if (state.head) {\n            len = state.head.extra_len - state.length;\n            if (!state.head.extra) {\n              // Use untyped array for more conveniend processing later\n              state.head.extra = new Array(state.head.extra_len);\n            }\n            utils.arraySet(\n              state.head.extra,\n              input,\n              next,\n              // extra field is limited to 65536 bytes\n              // - no need for additional size check\n              copy,\n              /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/\n              len\n            );\n            //zmemcpy(state.head.extra + len, next,\n            //        len + copy > state.head.extra_max ?\n            //        state.head.extra_max - len : copy);\n          }\n          if (state.flags & 0x0200) {\n            state.check = crc32(state.check, input, copy, next);\n          }\n          have -= copy;\n          next += copy;\n          state.length -= copy;\n        }\n        if (state.length) { break inf_leave; }\n      }\n      state.length = 0;\n      state.mode = NAME;\n      /* falls through */\n    case NAME:\n      if (state.flags & 0x0800) {\n        if (have === 0) { break inf_leave; }\n        copy = 0;\n        do {\n          // TODO: 2 or 1 bytes?\n          len = input[next + copy++];\n          /* use constant limit because in js we should not preallocate memory */\n          if (state.head && len &&\n              (state.length < 65536 /*state.head.name_max*/)) {\n            state.head.name += String.fromCharCode(len);\n          }\n        } while (len && copy < have);\n\n        if (state.flags & 0x0200) {\n          state.check = crc32(state.check, input, copy, next);\n        }\n        have -= copy;\n        next += copy;\n        if (len) { break inf_leave; }\n      }\n      else if (state.head) {\n        state.head.name = null;\n      }\n      state.length = 0;\n      state.mode = COMMENT;\n      /* falls through */\n    case COMMENT:\n      if (state.flags & 0x1000) {\n        if (have === 0) { break inf_leave; }\n        copy = 0;\n        do {\n          len = input[next + copy++];\n          /* use constant limit because in js we should not preallocate memory */\n          if (state.head && len &&\n              (state.length < 65536 /*state.head.comm_max*/)) {\n            state.head.comment += String.fromCharCode(len);\n          }\n        } while (len && copy < have);\n        if (state.flags & 0x0200) {\n          state.check = crc32(state.check, input, copy, next);\n        }\n        have -= copy;\n        next += copy;\n        if (len) { break inf_leave; }\n      }\n      else if (state.head) {\n        state.head.comment = null;\n      }\n      state.mode = HCRC;\n      /* falls through */\n    case HCRC:\n      if (state.flags & 0x0200) {\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (hold !== (state.check & 0xffff)) {\n          strm.msg = 'header crc mismatch';\n          state.mode = BAD;\n          break;\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n      }\n      if (state.head) {\n        state.head.hcrc = ((state.flags >> 9) & 1);\n        state.head.done = true;\n      }\n      strm.adler = state.check = 0;\n      state.mode = TYPE;\n      break;\n    case DICTID:\n      //=== NEEDBITS(32); */\n      while (bits < 32) {\n        if (have === 0) { break inf_leave; }\n        have--;\n        hold += input[next++] << bits;\n        bits += 8;\n      }\n      //===//\n      strm.adler = state.check = zswap32(hold);\n      //=== INITBITS();\n      hold = 0;\n      bits = 0;\n      //===//\n      state.mode = DICT;\n      /* falls through */\n    case DICT:\n      if (state.havedict === 0) {\n        //--- RESTORE() ---\n        strm.next_out = put;\n        strm.avail_out = left;\n        strm.next_in = next;\n        strm.avail_in = have;\n        state.hold = hold;\n        state.bits = bits;\n        //---\n        return Z_NEED_DICT;\n      }\n      strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n      state.mode = TYPE;\n      /* falls through */\n    case TYPE:\n      if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }\n      /* falls through */\n    case TYPEDO:\n      if (state.last) {\n        //--- BYTEBITS() ---//\n        hold >>>= bits & 7;\n        bits -= bits & 7;\n        //---//\n        state.mode = CHECK;\n        break;\n      }\n      //=== NEEDBITS(3); */\n      while (bits < 3) {\n        if (have === 0) { break inf_leave; }\n        have--;\n        hold += input[next++] << bits;\n        bits += 8;\n      }\n      //===//\n      state.last = (hold & 0x01)/*BITS(1)*/;\n      //--- DROPBITS(1) ---//\n      hold >>>= 1;\n      bits -= 1;\n      //---//\n\n      switch ((hold & 0x03)/*BITS(2)*/) {\n      case 0:                             /* stored block */\n        //Tracev((stderr, \"inflate:     stored block%s\\n\",\n        //        state.last ? \" (last)\" : \"\"));\n        state.mode = STORED;\n        break;\n      case 1:                             /* fixed block */\n        fixedtables(state);\n        //Tracev((stderr, \"inflate:     fixed codes block%s\\n\",\n        //        state.last ? \" (last)\" : \"\"));\n        state.mode = LEN_;             /* decode codes */\n        if (flush === Z_TREES) {\n          //--- DROPBITS(2) ---//\n          hold >>>= 2;\n          bits -= 2;\n          //---//\n          break inf_leave;\n        }\n        break;\n      case 2:                             /* dynamic block */\n        //Tracev((stderr, \"inflate:     dynamic codes block%s\\n\",\n        //        state.last ? \" (last)\" : \"\"));\n        state.mode = TABLE;\n        break;\n      case 3:\n        strm.msg = 'invalid block type';\n        state.mode = BAD;\n      }\n      //--- DROPBITS(2) ---//\n      hold >>>= 2;\n      bits -= 2;\n      //---//\n      break;\n    case STORED:\n      //--- BYTEBITS() ---// /* go to byte boundary */\n      hold >>>= bits & 7;\n      bits -= bits & 7;\n      //---//\n      //=== NEEDBITS(32); */\n      while (bits < 32) {\n        if (have === 0) { break inf_leave; }\n        have--;\n        hold += input[next++] << bits;\n        bits += 8;\n      }\n      //===//\n      if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {\n        strm.msg = 'invalid stored block lengths';\n        state.mode = BAD;\n        break;\n      }\n      state.length = hold & 0xffff;\n      //Tracev((stderr, \"inflate:       stored length %u\\n\",\n      //        state.length));\n      //=== INITBITS();\n      hold = 0;\n      bits = 0;\n      //===//\n      state.mode = COPY_;\n      if (flush === Z_TREES) { break inf_leave; }\n      /* falls through */\n    case COPY_:\n      state.mode = COPY;\n      /* falls through */\n    case COPY:\n      copy = state.length;\n      if (copy) {\n        if (copy > have) { copy = have; }\n        if (copy > left) { copy = left; }\n        if (copy === 0) { break inf_leave; }\n        //--- zmemcpy(put, next, copy); ---\n        utils.arraySet(output, input, next, copy, put);\n        //---//\n        have -= copy;\n        next += copy;\n        left -= copy;\n        put += copy;\n        state.length -= copy;\n        break;\n      }\n      //Tracev((stderr, \"inflate:       stored end\\n\"));\n      state.mode = TYPE;\n      break;\n    case TABLE:\n      //=== NEEDBITS(14); */\n      while (bits < 14) {\n        if (have === 0) { break inf_leave; }\n        have--;\n        hold += input[next++] << bits;\n        bits += 8;\n      }\n      //===//\n      state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;\n      //--- DROPBITS(5) ---//\n      hold >>>= 5;\n      bits -= 5;\n      //---//\n      state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;\n      //--- DROPBITS(5) ---//\n      hold >>>= 5;\n      bits -= 5;\n      //---//\n      state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;\n      //--- DROPBITS(4) ---//\n      hold >>>= 4;\n      bits -= 4;\n      //---//\n//#ifndef PKZIP_BUG_WORKAROUND\n      if (state.nlen > 286 || state.ndist > 30) {\n        strm.msg = 'too many length or distance symbols';\n        state.mode = BAD;\n        break;\n      }\n//#endif\n      //Tracev((stderr, \"inflate:       table sizes ok\\n\"));\n      state.have = 0;\n      state.mode = LENLENS;\n      /* falls through */\n    case LENLENS:\n      while (state.have < state.ncode) {\n        //=== NEEDBITS(3);\n        while (bits < 3) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);\n        //--- DROPBITS(3) ---//\n        hold >>>= 3;\n        bits -= 3;\n        //---//\n      }\n      while (state.have < 19) {\n        state.lens[order[state.have++]] = 0;\n      }\n      // We have separate tables & no pointers. 2 commented lines below not needed.\n      //state.next = state.codes;\n      //state.lencode = state.next;\n      // Switch to use dynamic table\n      state.lencode = state.lendyn;\n      state.lenbits = 7;\n\n      opts = { bits: state.lenbits };\n      ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);\n      state.lenbits = opts.bits;\n\n      if (ret) {\n        strm.msg = 'invalid code lengths set';\n        state.mode = BAD;\n        break;\n      }\n      //Tracev((stderr, \"inflate:       code lengths ok\\n\"));\n      state.have = 0;\n      state.mode = CODELENS;\n      /* falls through */\n    case CODELENS:\n      while (state.have < state.nlen + state.ndist) {\n        for (;;) {\n          here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if ((here_bits) <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        if (here_val < 16) {\n          //--- DROPBITS(here.bits) ---//\n          hold >>>= here_bits;\n          bits -= here_bits;\n          //---//\n          state.lens[state.have++] = here_val;\n        }\n        else {\n          if (here_val === 16) {\n            //=== NEEDBITS(here.bits + 2);\n            n = here_bits + 2;\n            while (bits < n) {\n              if (have === 0) { break inf_leave; }\n              have--;\n              hold += input[next++] << bits;\n              bits += 8;\n            }\n            //===//\n            //--- DROPBITS(here.bits) ---//\n            hold >>>= here_bits;\n            bits -= here_bits;\n            //---//\n            if (state.have === 0) {\n              strm.msg = 'invalid bit length repeat';\n              state.mode = BAD;\n              break;\n            }\n            len = state.lens[state.have - 1];\n            copy = 3 + (hold & 0x03);//BITS(2);\n            //--- DROPBITS(2) ---//\n            hold >>>= 2;\n            bits -= 2;\n            //---//\n          }\n          else if (here_val === 17) {\n            //=== NEEDBITS(here.bits + 3);\n            n = here_bits + 3;\n            while (bits < n) {\n              if (have === 0) { break inf_leave; }\n              have--;\n              hold += input[next++] << bits;\n              bits += 8;\n            }\n            //===//\n            //--- DROPBITS(here.bits) ---//\n            hold >>>= here_bits;\n            bits -= here_bits;\n            //---//\n            len = 0;\n            copy = 3 + (hold & 0x07);//BITS(3);\n            //--- DROPBITS(3) ---//\n            hold >>>= 3;\n            bits -= 3;\n            //---//\n          }\n          else {\n            //=== NEEDBITS(here.bits + 7);\n            n = here_bits + 7;\n            while (bits < n) {\n              if (have === 0) { break inf_leave; }\n              have--;\n              hold += input[next++] << bits;\n              bits += 8;\n            }\n            //===//\n            //--- DROPBITS(here.bits) ---//\n            hold >>>= here_bits;\n            bits -= here_bits;\n            //---//\n            len = 0;\n            copy = 11 + (hold & 0x7f);//BITS(7);\n            //--- DROPBITS(7) ---//\n            hold >>>= 7;\n            bits -= 7;\n            //---//\n          }\n          if (state.have + copy > state.nlen + state.ndist) {\n            strm.msg = 'invalid bit length repeat';\n            state.mode = BAD;\n            break;\n          }\n          while (copy--) {\n            state.lens[state.have++] = len;\n          }\n        }\n      }\n\n      /* handle error breaks in while */\n      if (state.mode === BAD) { break; }\n\n      /* check for end-of-block code (better have one) */\n      if (state.lens[256] === 0) {\n        strm.msg = 'invalid code -- missing end-of-block';\n        state.mode = BAD;\n        break;\n      }\n\n      /* build code tables -- note: do not change the lenbits or distbits\n         values here (9 and 6) without reading the comments in inftrees.h\n         concerning the ENOUGH constants, which depend on those values */\n      state.lenbits = 9;\n\n      opts = { bits: state.lenbits };\n      ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);\n      // We have separate tables & no pointers. 2 commented lines below not needed.\n      // state.next_index = opts.table_index;\n      state.lenbits = opts.bits;\n      // state.lencode = state.next;\n\n      if (ret) {\n        strm.msg = 'invalid literal/lengths set';\n        state.mode = BAD;\n        break;\n      }\n\n      state.distbits = 6;\n      //state.distcode.copy(state.codes);\n      // Switch to use dynamic table\n      state.distcode = state.distdyn;\n      opts = { bits: state.distbits };\n      ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);\n      // We have separate tables & no pointers. 2 commented lines below not needed.\n      // state.next_index = opts.table_index;\n      state.distbits = opts.bits;\n      // state.distcode = state.next;\n\n      if (ret) {\n        strm.msg = 'invalid distances set';\n        state.mode = BAD;\n        break;\n      }\n      //Tracev((stderr, 'inflate:       codes ok\\n'));\n      state.mode = LEN_;\n      if (flush === Z_TREES) { break inf_leave; }\n      /* falls through */\n    case LEN_:\n      state.mode = LEN;\n      /* falls through */\n    case LEN:\n      if (have >= 6 && left >= 258) {\n        //--- RESTORE() ---\n        strm.next_out = put;\n        strm.avail_out = left;\n        strm.next_in = next;\n        strm.avail_in = have;\n        state.hold = hold;\n        state.bits = bits;\n        //---\n        inflate_fast(strm, _out);\n        //--- LOAD() ---\n        put = strm.next_out;\n        output = strm.output;\n        left = strm.avail_out;\n        next = strm.next_in;\n        input = strm.input;\n        have = strm.avail_in;\n        hold = state.hold;\n        bits = state.bits;\n        //---\n\n        if (state.mode === TYPE) {\n          state.back = -1;\n        }\n        break;\n      }\n      state.back = 0;\n      for (;;) {\n        here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/\n        here_bits = here >>> 24;\n        here_op = (here >>> 16) & 0xff;\n        here_val = here & 0xffff;\n\n        if (here_bits <= bits) { break; }\n        //--- PULLBYTE() ---//\n        if (have === 0) { break inf_leave; }\n        have--;\n        hold += input[next++] << bits;\n        bits += 8;\n        //---//\n      }\n      if (here_op && (here_op & 0xf0) === 0) {\n        last_bits = here_bits;\n        last_op = here_op;\n        last_val = here_val;\n        for (;;) {\n          here = state.lencode[last_val +\n                  ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if ((last_bits + here_bits) <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        //--- DROPBITS(last.bits) ---//\n        hold >>>= last_bits;\n        bits -= last_bits;\n        //---//\n        state.back += last_bits;\n      }\n      //--- DROPBITS(here.bits) ---//\n      hold >>>= here_bits;\n      bits -= here_bits;\n      //---//\n      state.back += here_bits;\n      state.length = here_val;\n      if (here_op === 0) {\n        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n        //        \"inflate:         literal '%c'\\n\" :\n        //        \"inflate:         literal 0x%02x\\n\", here.val));\n        state.mode = LIT;\n        break;\n      }\n      if (here_op & 32) {\n        //Tracevv((stderr, \"inflate:         end of block\\n\"));\n        state.back = -1;\n        state.mode = TYPE;\n        break;\n      }\n      if (here_op & 64) {\n        strm.msg = 'invalid literal/length code';\n        state.mode = BAD;\n        break;\n      }\n      state.extra = here_op & 15;\n      state.mode = LENEXT;\n      /* falls through */\n    case LENEXT:\n      if (state.extra) {\n        //=== NEEDBITS(state.extra);\n        n = state.extra;\n        while (bits < n) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n        //--- DROPBITS(state.extra) ---//\n        hold >>>= state.extra;\n        bits -= state.extra;\n        //---//\n        state.back += state.extra;\n      }\n      //Tracevv((stderr, \"inflate:         length %u\\n\", state.length));\n      state.was = state.length;\n      state.mode = DIST;\n      /* falls through */\n    case DIST:\n      for (;;) {\n        here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/\n        here_bits = here >>> 24;\n        here_op = (here >>> 16) & 0xff;\n        here_val = here & 0xffff;\n\n        if ((here_bits) <= bits) { break; }\n        //--- PULLBYTE() ---//\n        if (have === 0) { break inf_leave; }\n        have--;\n        hold += input[next++] << bits;\n        bits += 8;\n        //---//\n      }\n      if ((here_op & 0xf0) === 0) {\n        last_bits = here_bits;\n        last_op = here_op;\n        last_val = here_val;\n        for (;;) {\n          here = state.distcode[last_val +\n                  ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if ((last_bits + here_bits) <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        //--- DROPBITS(last.bits) ---//\n        hold >>>= last_bits;\n        bits -= last_bits;\n        //---//\n        state.back += last_bits;\n      }\n      //--- DROPBITS(here.bits) ---//\n      hold >>>= here_bits;\n      bits -= here_bits;\n      //---//\n      state.back += here_bits;\n      if (here_op & 64) {\n        strm.msg = 'invalid distance code';\n        state.mode = BAD;\n        break;\n      }\n      state.offset = here_val;\n      state.extra = (here_op) & 15;\n      state.mode = DISTEXT;\n      /* falls through */\n    case DISTEXT:\n      if (state.extra) {\n        //=== NEEDBITS(state.extra);\n        n = state.extra;\n        while (bits < n) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n        //--- DROPBITS(state.extra) ---//\n        hold >>>= state.extra;\n        bits -= state.extra;\n        //---//\n        state.back += state.extra;\n      }\n//#ifdef INFLATE_STRICT\n      if (state.offset > state.dmax) {\n        strm.msg = 'invalid distance too far back';\n        state.mode = BAD;\n        break;\n      }\n//#endif\n      //Tracevv((stderr, \"inflate:         distance %u\\n\", state.offset));\n      state.mode = MATCH;\n      /* falls through */\n    case MATCH:\n      if (left === 0) { break inf_leave; }\n      copy = _out - left;\n      if (state.offset > copy) {         /* copy from window */\n        copy = state.offset - copy;\n        if (copy > state.whave) {\n          if (state.sane) {\n            strm.msg = 'invalid distance too far back';\n            state.mode = BAD;\n            break;\n          }\n// (!) This block is disabled in zlib defailts,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//          Trace((stderr, \"inflate.c too far\\n\"));\n//          copy -= state.whave;\n//          if (copy > state.length) { copy = state.length; }\n//          if (copy > left) { copy = left; }\n//          left -= copy;\n//          state.length -= copy;\n//          do {\n//            output[put++] = 0;\n//          } while (--copy);\n//          if (state.length === 0) { state.mode = LEN; }\n//          break;\n//#endif\n        }\n        if (copy > state.wnext) {\n          copy -= state.wnext;\n          from = state.wsize - copy;\n        }\n        else {\n          from = state.wnext - copy;\n        }\n        if (copy > state.length) { copy = state.length; }\n        from_source = state.window;\n      }\n      else {                              /* copy from output */\n        from_source = output;\n        from = put - state.offset;\n        copy = state.length;\n      }\n      if (copy > left) { copy = left; }\n      left -= copy;\n      state.length -= copy;\n      do {\n        output[put++] = from_source[from++];\n      } while (--copy);\n      if (state.length === 0) { state.mode = LEN; }\n      break;\n    case LIT:\n      if (left === 0) { break inf_leave; }\n      output[put++] = state.length;\n      left--;\n      state.mode = LEN;\n      break;\n    case CHECK:\n      if (state.wrap) {\n        //=== NEEDBITS(32);\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          // Use '|' insdead of '+' to make sure that result is signed\n          hold |= input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        _out -= left;\n        strm.total_out += _out;\n        state.total += _out;\n        if (_out) {\n          strm.adler = state.check =\n              /*UPDATE(state.check, put - _out, _out);*/\n              (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));\n\n        }\n        _out = left;\n        // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too\n        if ((state.flags ? hold : zswap32(hold)) !== state.check) {\n          strm.msg = 'incorrect data check';\n          state.mode = BAD;\n          break;\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        //Tracev((stderr, \"inflate:   check matches trailer\\n\"));\n      }\n      state.mode = LENGTH;\n      /* falls through */\n    case LENGTH:\n      if (state.wrap && state.flags) {\n        //=== NEEDBITS(32);\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (hold !== (state.total & 0xffffffff)) {\n          strm.msg = 'incorrect length check';\n          state.mode = BAD;\n          break;\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        //Tracev((stderr, \"inflate:   length matches trailer\\n\"));\n      }\n      state.mode = DONE;\n      /* falls through */\n    case DONE:\n      ret = Z_STREAM_END;\n      break inf_leave;\n    case BAD:\n      ret = Z_DATA_ERROR;\n      break inf_leave;\n    case MEM:\n      return Z_MEM_ERROR;\n    case SYNC:\n      /* falls through */\n    default:\n      return Z_STREAM_ERROR;\n    }\n  }\n\n  // inf_leave <- here is real place for \"goto inf_leave\", emulated via \"break inf_leave\"\n\n  /*\n     Return from inflate(), updating the total counts and the check value.\n     If there was no progress during the inflate() call, return a buffer\n     error.  Call updatewindow() to create and/or update the window state.\n     Note: a memory error from inflate() is non-recoverable.\n   */\n\n  //--- RESTORE() ---\n  strm.next_out = put;\n  strm.avail_out = left;\n  strm.next_in = next;\n  strm.avail_in = have;\n  state.hold = hold;\n  state.bits = bits;\n  //---\n\n  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&\n                      (state.mode < CHECK || flush !== Z_FINISH))) {\n    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {\n      state.mode = MEM;\n      return Z_MEM_ERROR;\n    }\n  }\n  _in -= strm.avail_in;\n  _out -= strm.avail_out;\n  strm.total_in += _in;\n  strm.total_out += _out;\n  state.total += _out;\n  if (state.wrap && _out) {\n    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/\n      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));\n  }\n  strm.data_type = state.bits + (state.last ? 64 : 0) +\n                    (state.mode === TYPE ? 128 : 0) +\n                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);\n  if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {\n    ret = Z_BUF_ERROR;\n  }\n  return ret;\n}\n\nfunction inflateEnd(strm) {\n\n  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {\n    return Z_STREAM_ERROR;\n  }\n\n  var state = strm.state;\n  if (state.window) {\n    state.window = null;\n  }\n  strm.state = null;\n  return Z_OK;\n}\n\nfunction inflateGetHeader(strm, head) {\n  var state;\n\n  /* check state */\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  state = strm.state;\n  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }\n\n  /* save header structure */\n  state.head = head;\n  head.done = false;\n  return Z_OK;\n}\n\nfunction inflateSetDictionary(strm, dictionary) {\n  var dictLength = dictionary.length;\n\n  var state;\n  var dictid;\n  var ret;\n\n  /* check state */\n  if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) { return Z_STREAM_ERROR; }\n  state = strm.state;\n\n  if (state.wrap !== 0 && state.mode !== DICT) {\n    return Z_STREAM_ERROR;\n  }\n\n  /* check for correct dictionary identifier */\n  if (state.mode === DICT) {\n    dictid = 1; /* adler32(0, null, 0)*/\n    /* dictid = adler32(dictid, dictionary, dictLength); */\n    dictid = adler32(dictid, dictionary, dictLength, 0);\n    if (dictid !== state.check) {\n      return Z_DATA_ERROR;\n    }\n  }\n  /* copy dictionary to window using updatewindow(), which will amend the\n   existing dictionary if appropriate */\n  ret = updatewindow(strm, dictionary, dictLength, dictLength);\n  if (ret) {\n    state.mode = MEM;\n    return Z_MEM_ERROR;\n  }\n  state.havedict = 1;\n  // Tracev((stderr, \"inflate:   dictionary set\\n\"));\n  return Z_OK;\n}\n\nexports.inflateReset = inflateReset;\nexports.inflateReset2 = inflateReset2;\nexports.inflateResetKeep = inflateResetKeep;\nexports.inflateInit = inflateInit;\nexports.inflateInit2 = inflateInit2;\nexports.inflate = inflate;\nexports.inflateEnd = inflateEnd;\nexports.inflateGetHeader = inflateGetHeader;\nexports.inflateSetDictionary = inflateSetDictionary;\nexports.inflateInfo = 'pako inflate (from Nodeca project)';\n\n/* Not implemented\nexports.inflateCopy = inflateCopy;\nexports.inflateGetDictionary = inflateGetDictionary;\nexports.inflateMark = inflateMark;\nexports.inflatePrime = inflatePrime;\nexports.inflateSync = inflateSync;\nexports.inflateSyncPoint = inflateSyncPoint;\nexports.inflateUndermine = inflateUndermine;\n*/\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/pako/lib/zlib/inflate.js\n// module id = 46\n// module chunks = 0","'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// See state defs from inflate.js\nvar BAD = 30;       /* got a data error -- remain here until reset */\nvar TYPE = 12;      /* i: waiting for type bits, including last-flag bit */\n\n/*\n   Decode literal, length, and distance codes and write out the resulting\n   literal and match bytes until either not enough input or output is\n   available, an end-of-block is encountered, or a data error is encountered.\n   When large enough input and output buffers are supplied to inflate(), for\n   example, a 16K input buffer and a 64K output buffer, more than 95% of the\n   inflate execution time is spent in this routine.\n\n   Entry assumptions:\n\n        state.mode === LEN\n        strm.avail_in >= 6\n        strm.avail_out >= 258\n        start >= strm.avail_out\n        state.bits < 8\n\n   On return, state.mode is one of:\n\n        LEN -- ran out of enough output space or enough available input\n        TYPE -- reached end of block code, inflate() to interpret next block\n        BAD -- error in block data\n\n   Notes:\n\n    - The maximum input bits used by a length/distance pair is 15 bits for the\n      length code, 5 bits for the length extra, 15 bits for the distance code,\n      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.\n      Therefore if strm.avail_in >= 6, then there is enough input to avoid\n      checking for available input while decoding.\n\n    - The maximum bytes that a single length/distance pair can output is 258\n      bytes, which is the maximum length that can be coded.  inflate_fast()\n      requires strm.avail_out >= 258 for each loop to avoid checking for\n      output space.\n */\nmodule.exports = function inflate_fast(strm, start) {\n  var state;\n  var _in;                    /* local strm.input */\n  var last;                   /* have enough input while in < last */\n  var _out;                   /* local strm.output */\n  var beg;                    /* inflate()'s initial strm.output */\n  var end;                    /* while out < end, enough space available */\n//#ifdef INFLATE_STRICT\n  var dmax;                   /* maximum distance from zlib header */\n//#endif\n  var wsize;                  /* window size or zero if not using window */\n  var whave;                  /* valid bytes in the window */\n  var wnext;                  /* window write index */\n  // Use `s_window` instead `window`, avoid conflict with instrumentation tools\n  var s_window;               /* allocated sliding window, if wsize != 0 */\n  var hold;                   /* local strm.hold */\n  var bits;                   /* local strm.bits */\n  var lcode;                  /* local strm.lencode */\n  var dcode;                  /* local strm.distcode */\n  var lmask;                  /* mask for first level of length codes */\n  var dmask;                  /* mask for first level of distance codes */\n  var here;                   /* retrieved table entry */\n  var op;                     /* code bits, operation, extra bits, or */\n                              /*  window position, window bytes to copy */\n  var len;                    /* match length, unused bytes */\n  var dist;                   /* match distance */\n  var from;                   /* where to copy match from */\n  var from_source;\n\n\n  var input, output; // JS specific, because we have no pointers\n\n  /* copy state to local variables */\n  state = strm.state;\n  //here = state.here;\n  _in = strm.next_in;\n  input = strm.input;\n  last = _in + (strm.avail_in - 5);\n  _out = strm.next_out;\n  output = strm.output;\n  beg = _out - (start - strm.avail_out);\n  end = _out + (strm.avail_out - 257);\n//#ifdef INFLATE_STRICT\n  dmax = state.dmax;\n//#endif\n  wsize = state.wsize;\n  whave = state.whave;\n  wnext = state.wnext;\n  s_window = state.window;\n  hold = state.hold;\n  bits = state.bits;\n  lcode = state.lencode;\n  dcode = state.distcode;\n  lmask = (1 << state.lenbits) - 1;\n  dmask = (1 << state.distbits) - 1;\n\n\n  /* decode literals and length/distances until end-of-block or not enough\n     input data or output space */\n\n  top:\n  do {\n    if (bits < 15) {\n      hold += input[_in++] << bits;\n      bits += 8;\n      hold += input[_in++] << bits;\n      bits += 8;\n    }\n\n    here = lcode[hold & lmask];\n\n    dolen:\n    for (;;) { // Goto emulation\n      op = here >>> 24/*here.bits*/;\n      hold >>>= op;\n      bits -= op;\n      op = (here >>> 16) & 0xff/*here.op*/;\n      if (op === 0) {                          /* literal */\n        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n        //        \"inflate:         literal '%c'\\n\" :\n        //        \"inflate:         literal 0x%02x\\n\", here.val));\n        output[_out++] = here & 0xffff/*here.val*/;\n      }\n      else if (op & 16) {                     /* length base */\n        len = here & 0xffff/*here.val*/;\n        op &= 15;                           /* number of extra bits */\n        if (op) {\n          if (bits < op) {\n            hold += input[_in++] << bits;\n            bits += 8;\n          }\n          len += hold & ((1 << op) - 1);\n          hold >>>= op;\n          bits -= op;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", len));\n        if (bits < 15) {\n          hold += input[_in++] << bits;\n          bits += 8;\n          hold += input[_in++] << bits;\n          bits += 8;\n        }\n        here = dcode[hold & dmask];\n\n        dodist:\n        for (;;) { // goto emulation\n          op = here >>> 24/*here.bits*/;\n          hold >>>= op;\n          bits -= op;\n          op = (here >>> 16) & 0xff/*here.op*/;\n\n          if (op & 16) {                      /* distance base */\n            dist = here & 0xffff/*here.val*/;\n            op &= 15;                       /* number of extra bits */\n            if (bits < op) {\n              hold += input[_in++] << bits;\n              bits += 8;\n              if (bits < op) {\n                hold += input[_in++] << bits;\n                bits += 8;\n              }\n            }\n            dist += hold & ((1 << op) - 1);\n//#ifdef INFLATE_STRICT\n            if (dist > dmax) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD;\n              break top;\n            }\n//#endif\n            hold >>>= op;\n            bits -= op;\n            //Tracevv((stderr, \"inflate:         distance %u\\n\", dist));\n            op = _out - beg;                /* max distance in output */\n            if (dist > op) {                /* see if copy from window */\n              op = dist - op;               /* distance back in window */\n              if (op > whave) {\n                if (state.sane) {\n                  strm.msg = 'invalid distance too far back';\n                  state.mode = BAD;\n                  break top;\n                }\n\n// (!) This block is disabled in zlib defailts,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//                if (len <= op - whave) {\n//                  do {\n//                    output[_out++] = 0;\n//                  } while (--len);\n//                  continue top;\n//                }\n//                len -= op - whave;\n//                do {\n//                  output[_out++] = 0;\n//                } while (--op > whave);\n//                if (op === 0) {\n//                  from = _out - dist;\n//                  do {\n//                    output[_out++] = output[from++];\n//                  } while (--len);\n//                  continue top;\n//                }\n//#endif\n              }\n              from = 0; // window index\n              from_source = s_window;\n              if (wnext === 0) {           /* very common case */\n                from += wsize - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              else if (wnext < op) {      /* wrap around window */\n                from += wsize + wnext - op;\n                op -= wnext;\n                if (op < len) {         /* some from end of window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = 0;\n                  if (wnext < len) {  /* some from start of window */\n                    op = wnext;\n                    len -= op;\n                    do {\n                      output[_out++] = s_window[from++];\n                    } while (--op);\n                    from = _out - dist;      /* rest from output */\n                    from_source = output;\n                  }\n                }\n              }\n              else {                      /* contiguous in window */\n                from += wnext - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              while (len > 2) {\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                len -= 3;\n              }\n              if (len) {\n                output[_out++] = from_source[from++];\n                if (len > 1) {\n                  output[_out++] = from_source[from++];\n                }\n              }\n            }\n            else {\n              from = _out - dist;          /* copy direct from output */\n              do {                        /* minimum length is three */\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                len -= 3;\n              } while (len > 2);\n              if (len) {\n                output[_out++] = output[from++];\n                if (len > 1) {\n                  output[_out++] = output[from++];\n                }\n              }\n            }\n          }\n          else if ((op & 64) === 0) {          /* 2nd level distance code */\n            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n            continue dodist;\n          }\n          else {\n            strm.msg = 'invalid distance code';\n            state.mode = BAD;\n            break top;\n          }\n\n          break; // need to emulate goto via \"continue\"\n        }\n      }\n      else if ((op & 64) === 0) {              /* 2nd level length code */\n        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n        continue dolen;\n      }\n      else if (op & 32) {                     /* end-of-block */\n        //Tracevv((stderr, \"inflate:         end of block\\n\"));\n        state.mode = TYPE;\n        break top;\n      }\n      else {\n        strm.msg = 'invalid literal/length code';\n        state.mode = BAD;\n        break top;\n      }\n\n      break; // need to emulate goto via \"continue\"\n    }\n  } while (_in < last && _out < end);\n\n  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */\n  len = bits >> 3;\n  _in -= len;\n  bits -= len << 3;\n  hold &= (1 << bits) - 1;\n\n  /* update state and return */\n  strm.next_in = _in;\n  strm.next_out = _out;\n  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));\n  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));\n  state.hold = hold;\n  state.bits = bits;\n  return;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/pako/lib/zlib/inffast.js\n// module id = 47\n// module chunks = 0","'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar utils = require('../utils/common');\n\nvar MAXBITS = 15;\nvar ENOUGH_LENS = 852;\nvar ENOUGH_DISTS = 592;\n//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);\n\nvar CODES = 0;\nvar LENS = 1;\nvar DISTS = 2;\n\nvar lbase = [ /* Length codes 257..285 base */\n  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,\n  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0\n];\n\nvar lext = [ /* Length codes 257..285 extra */\n  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,\n  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78\n];\n\nvar dbase = [ /* Distance codes 0..29 base */\n  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,\n  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,\n  8193, 12289, 16385, 24577, 0, 0\n];\n\nvar dext = [ /* Distance codes 0..29 extra */\n  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,\n  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,\n  28, 28, 29, 29, 64, 64\n];\n\nmodule.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts)\n{\n  var bits = opts.bits;\n      //here = opts.here; /* table entry for duplication */\n\n  var len = 0;               /* a code's length in bits */\n  var sym = 0;               /* index of code symbols */\n  var min = 0, max = 0;          /* minimum and maximum code lengths */\n  var root = 0;              /* number of index bits for root table */\n  var curr = 0;              /* number of index bits for current table */\n  var drop = 0;              /* code bits to drop for sub-table */\n  var left = 0;                   /* number of prefix codes available */\n  var used = 0;              /* code entries in table used */\n  var huff = 0;              /* Huffman code */\n  var incr;              /* for incrementing code, index */\n  var fill;              /* index for replicating entries */\n  var low;               /* low bits for current root entry */\n  var mask;              /* mask for low root bits */\n  var next;             /* next available space in table */\n  var base = null;     /* base value table to use */\n  var base_index = 0;\n//  var shoextra;    /* extra bits table to use */\n  var end;                    /* use base and extra for symbol > end */\n  var count = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */\n  var offs = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */\n  var extra = null;\n  var extra_index = 0;\n\n  var here_bits, here_op, here_val;\n\n  /*\n   Process a set of code lengths to create a canonical Huffman code.  The\n   code lengths are lens[0..codes-1].  Each length corresponds to the\n   symbols 0..codes-1.  The Huffman code is generated by first sorting the\n   symbols by length from short to long, and retaining the symbol order\n   for codes with equal lengths.  Then the code starts with all zero bits\n   for the first code of the shortest length, and the codes are integer\n   increments for the same length, and zeros are appended as the length\n   increases.  For the deflate format, these bits are stored backwards\n   from their more natural integer increment ordering, and so when the\n   decoding tables are built in the large loop below, the integer codes\n   are incremented backwards.\n\n   This routine assumes, but does not check, that all of the entries in\n   lens[] are in the range 0..MAXBITS.  The caller must assure this.\n   1..MAXBITS is interpreted as that code length.  zero means that that\n   symbol does not occur in this code.\n\n   The codes are sorted by computing a count of codes for each length,\n   creating from that a table of starting indices for each length in the\n   sorted table, and then entering the symbols in order in the sorted\n   table.  The sorted table is work[], with that space being provided by\n   the caller.\n\n   The length counts are used for other purposes as well, i.e. finding\n   the minimum and maximum length codes, determining if there are any\n   codes at all, checking for a valid set of lengths, and looking ahead\n   at length counts to determine sub-table sizes when building the\n   decoding tables.\n   */\n\n  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */\n  for (len = 0; len <= MAXBITS; len++) {\n    count[len] = 0;\n  }\n  for (sym = 0; sym < codes; sym++) {\n    count[lens[lens_index + sym]]++;\n  }\n\n  /* bound code lengths, force root to be within code lengths */\n  root = bits;\n  for (max = MAXBITS; max >= 1; max--) {\n    if (count[max] !== 0) { break; }\n  }\n  if (root > max) {\n    root = max;\n  }\n  if (max === 0) {                     /* no symbols to code at all */\n    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */\n    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;\n    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n\n    //table.op[opts.table_index] = 64;\n    //table.bits[opts.table_index] = 1;\n    //table.val[opts.table_index++] = 0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n    opts.bits = 1;\n    return 0;     /* no symbols, but wait for decoding to report error */\n  }\n  for (min = 1; min < max; min++) {\n    if (count[min] !== 0) { break; }\n  }\n  if (root < min) {\n    root = min;\n  }\n\n  /* check for an over-subscribed or incomplete set of lengths */\n  left = 1;\n  for (len = 1; len <= MAXBITS; len++) {\n    left <<= 1;\n    left -= count[len];\n    if (left < 0) {\n      return -1;\n    }        /* over-subscribed */\n  }\n  if (left > 0 && (type === CODES || max !== 1)) {\n    return -1;                      /* incomplete set */\n  }\n\n  /* generate offsets into symbol table for each length for sorting */\n  offs[1] = 0;\n  for (len = 1; len < MAXBITS; len++) {\n    offs[len + 1] = offs[len] + count[len];\n  }\n\n  /* sort symbols by length, by symbol order within each length */\n  for (sym = 0; sym < codes; sym++) {\n    if (lens[lens_index + sym] !== 0) {\n      work[offs[lens[lens_index + sym]]++] = sym;\n    }\n  }\n\n  /*\n   Create and fill in decoding tables.  In this loop, the table being\n   filled is at next and has curr index bits.  The code being used is huff\n   with length len.  That code is converted to an index by dropping drop\n   bits off of the bottom.  For codes where len is less than drop + curr,\n   those top drop + curr - len bits are incremented through all values to\n   fill the table with replicated entries.\n\n   root is the number of index bits for the root table.  When len exceeds\n   root, sub-tables are created pointed to by the root entry with an index\n   of the low root bits of huff.  This is saved in low to check for when a\n   new sub-table should be started.  drop is zero when the root table is\n   being filled, and drop is root when sub-tables are being filled.\n\n   When a new sub-table is needed, it is necessary to look ahead in the\n   code lengths to determine what size sub-table is needed.  The length\n   counts are used for this, and so count[] is decremented as codes are\n   entered in the tables.\n\n   used keeps track of how many table entries have been allocated from the\n   provided *table space.  It is checked for LENS and DIST tables against\n   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in\n   the initial root table size constants.  See the comments in inftrees.h\n   for more information.\n\n   sym increments through all symbols, and the loop terminates when\n   all codes of length max, i.e. all codes, have been processed.  This\n   routine permits incomplete codes, so another loop after this one fills\n   in the rest of the decoding tables with invalid code markers.\n   */\n\n  /* set up for code type */\n  // poor man optimization - use if-else instead of switch,\n  // to avoid deopts in old v8\n  if (type === CODES) {\n    base = extra = work;    /* dummy value--not used */\n    end = 19;\n\n  } else if (type === LENS) {\n    base = lbase;\n    base_index -= 257;\n    extra = lext;\n    extra_index -= 257;\n    end = 256;\n\n  } else {                    /* DISTS */\n    base = dbase;\n    extra = dext;\n    end = -1;\n  }\n\n  /* initialize opts for loop */\n  huff = 0;                   /* starting code */\n  sym = 0;                    /* starting code symbol */\n  len = min;                  /* starting code length */\n  next = table_index;              /* current table to fill in */\n  curr = root;                /* current table index bits */\n  drop = 0;                   /* current bits to drop from code for index */\n  low = -1;                   /* trigger new sub-table when len > root */\n  used = 1 << root;          /* use root table entries */\n  mask = used - 1;            /* mask for comparing low */\n\n  /* check available table space */\n  if ((type === LENS && used > ENOUGH_LENS) ||\n    (type === DISTS && used > ENOUGH_DISTS)) {\n    return 1;\n  }\n\n  /* process all codes and make table entries */\n  for (;;) {\n    /* create table entry */\n    here_bits = len - drop;\n    if (work[sym] < end) {\n      here_op = 0;\n      here_val = work[sym];\n    }\n    else if (work[sym] > end) {\n      here_op = extra[extra_index + work[sym]];\n      here_val = base[base_index + work[sym]];\n    }\n    else {\n      here_op = 32 + 64;         /* end of block */\n      here_val = 0;\n    }\n\n    /* replicate for those indices with low len bits equal to huff */\n    incr = 1 << (len - drop);\n    fill = 1 << curr;\n    min = fill;                 /* save offset to next table */\n    do {\n      fill -= incr;\n      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;\n    } while (fill !== 0);\n\n    /* backwards increment the len-bit code huff */\n    incr = 1 << (len - 1);\n    while (huff & incr) {\n      incr >>= 1;\n    }\n    if (incr !== 0) {\n      huff &= incr - 1;\n      huff += incr;\n    } else {\n      huff = 0;\n    }\n\n    /* go to next symbol, update count, len */\n    sym++;\n    if (--count[len] === 0) {\n      if (len === max) { break; }\n      len = lens[lens_index + work[sym]];\n    }\n\n    /* create new sub-table if needed */\n    if (len > root && (huff & mask) !== low) {\n      /* if first time, transition to sub-tables */\n      if (drop === 0) {\n        drop = root;\n      }\n\n      /* increment past last table */\n      next += min;            /* here min is 1 << curr */\n\n      /* determine length of next table */\n      curr = len - drop;\n      left = 1 << curr;\n      while (curr + drop < max) {\n        left -= count[curr + drop];\n        if (left <= 0) { break; }\n        curr++;\n        left <<= 1;\n      }\n\n      /* check for enough space */\n      used += 1 << curr;\n      if ((type === LENS && used > ENOUGH_LENS) ||\n        (type === DISTS && used > ENOUGH_DISTS)) {\n        return 1;\n      }\n\n      /* point entry in root table to sub-table */\n      low = huff & mask;\n      /*table.op[low] = curr;\n      table.bits[low] = root;\n      table.val[low] = next - opts.table_index;*/\n      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;\n    }\n  }\n\n  /* fill in remaining table entry if code is incomplete (guaranteed to have\n   at most one remaining entry, since if the code is incomplete, the\n   maximum code length that was allowed to get this far is one bit) */\n  if (huff !== 0) {\n    //table.op[next + huff] = 64;            /* invalid code marker */\n    //table.bits[next + huff] = len - drop;\n    //table.val[next + huff] = 0;\n    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;\n  }\n\n  /* set return parameters */\n  //opts.table_index += used;\n  opts.bits = root;\n  return 0;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/pako/lib/zlib/inftrees.js\n// module id = 48\n// module chunks = 0","'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction GZheader() {\n  /* true if compressed data believed to be text */\n  this.text       = 0;\n  /* modification time */\n  this.time       = 0;\n  /* extra flags (not used when writing a gzip file) */\n  this.xflags     = 0;\n  /* operating system */\n  this.os         = 0;\n  /* pointer to extra field or Z_NULL if none */\n  this.extra      = null;\n  /* extra field length (valid if extra != Z_NULL) */\n  this.extra_len  = 0; // Actually, we don't need it in JS,\n                       // but leave for few code modifications\n\n  //\n  // Setup limits is not necessary because in js we should not preallocate memory\n  // for inflate use constant limit in 65536 bytes\n  //\n\n  /* space at extra (only when reading header) */\n  // this.extra_max  = 0;\n  /* pointer to zero-terminated file name or Z_NULL */\n  this.name       = '';\n  /* space at name (only when reading header) */\n  // this.name_max   = 0;\n  /* pointer to zero-terminated comment or Z_NULL */\n  this.comment    = '';\n  /* space at comment (only when reading header) */\n  // this.comm_max   = 0;\n  /* true if there was or will be a header crc */\n  this.hcrc       = 0;\n  /* true when done reading gzip header (not used when writing a gzip file) */\n  this.done       = false;\n}\n\nmodule.exports = GZheader;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/pako/lib/zlib/gzheader.js\n// module id = 49\n// module chunks = 0","module.exports = \"attribute vec4 position;\\r\\nattribute float z_index;\\r\\nattribute float pal_shift;\\r\\nattribute vec2 texcoord;\\r\\n\\r\\nuniform mat4 matrix;\\r\\n\\r\\nvarying vec2 v_uv;\\r\\nvarying float v_pal;\\r\\n\\r\\nconst float HALF_PX = 0.001953125; \\r\\nconst float PX = 0.00390625;\\r\\n\\r\\nvoid main() {\\r\\n    v_uv = texcoord * PX + HALF_PX;// vec2(PX * texcoord.x + HALF_PX, PX * texcoord.y + HALF_PX);//(texcoord - tweak2);\\r\\n    v_pal = pal_shift;\\r\\n    vec4 res = matrix * vec4(position.xy, z_index, 1.0);\\r\\n    //res.z =  -(z_index / 128.0) + 1.0;\\r\\n    //res.w = res.w * res.z;\\r\\n    gl_Position = res;\\r\\n}\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./res/shaders/8bit_vs.glsl\n// module id = 50\n// module chunks = 0","module.exports = \"precision mediump float;\\r\\n\\r\\nuniform sampler2D texture;\\r\\nuniform sampler2D palette;\\r\\nuniform float pal_offset;\\r\\n\\r\\nconst float HALF_PX = 0.001953125; \\r\\nconst float PX = 0.00390625;\\r\\n\\r\\nvarying vec2 v_uv;\\r\\nvarying float v_pal;\\r\\n\\r\\nvoid main() {\\r\\n    // get palette index.\\r\\n    float lookup = texture2D(texture, v_uv).r;\\r\\n    \\r\\n    // create uv from palette index and palette offset\\r\\n    vec2 palUv = vec2(lookup+v_pal,pal_offset);\\r\\n    \\r\\n    //lookup color and discard if alpha is present.\\r\\n    vec4 res = texture2D(palette, palUv);\\r\\n    if(res.a < 1.0)\\r\\n         discard;\\r\\n    else\\r\\n        gl_FragColor = res;\\r\\n}\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./res/shaders/8bit_fs.glsl\n// module id = 51\n// module chunks = 0","module.exports = \"PNG\\r\\n\\u001a\\n\\u0000\\u0000\\u0000\\rIHDR\\u0000\\u0000\\u0001\\u0000\\u0000\\u0000\\u0001\\u0000\\b\\u0003\\u0000\\u0000\\u0000k¬XT\\u0000\\u0000\\u0000\\tpHYs\\u0000\\u0000\\u000b\\u0013\\u0000\\u0000\\u000b\\u0013\\u0001\\u0000\\u0018\\u0000\\u0000\\nOiCCPPhotoshop ICC profile\\u0000\\u0000xÚSgTSé\\u0016=÷ÞôBKKoR\\u0015\\b RB\\u0014&*!\\t\\u0010J!¡Ù\\u0015QÁ\\u0011EE\\u0004\\u001bÈ \\u0003\\u0015Q,\\f\\nØ\\u0007ä!¢£Êûá{£kÖ¼÷æÍþµ×>ç¬ó³Ï\\u0007À\\b\\fH3Q5\\f©B\\u001e\\u0011àÇÄÆáä.@\\n$p\\u0000\\u0010\\b³d!sý#\\u0001\\u0000ø~<<+\\\"À\\u0007¾\\u0000\\u0001xÓ\\u000b\\b\\u0000ÀMÀ0\\u001cÿ\\u000fêB\\\\\\u0001\\u0001Àt8K\\b\\u0014\\u0000@zB¦\\u0000@F\\u0001&S\\u0000 \\u0004\\u0000`Ëcbã\\u0000P-\\u0000`'æÓ\\u0000ø{\\u0001\\u0000[!\\u0015\\u0001 \\u0000 \\u0013eD\\u0000h;\\u0000¬ÏVE\\u0000X0\\u0000\\u0014fKÄ9\\u0000Ø-\\u00000IWfH\\u0000°·\\u0000ÀÎ\\u0010\\u000b²\\u0000\\b\\f\\u00000Q)\\u0000\\u0004{\\u0000`È##x\\u0000\\u0000\\u0014FòW<ñ+®\\u0010ç*\\u0000\\u0000x²<¹$9E[\\b-q\\u0007WW.\\u001e(ÎI\\u0017+\\u00146a\\u0002a@.Ây\\u001924\\u000fàóÌ\\u0000\\u0000 \\u0015\\u0011àóýxÎ\\u000e®ÎÎ6¶\\u000e_-ê¿\\u0006ÿ\\\"bbãþåÏ«p@\\u0000\\u0000át~Ñþ,/³\\u001a;\\u0006mþ¢%î\\u0004h^\\u000b u÷f²\\u000f@µ\\u0000 éÚWópø~<<E¡¹ÙÙåääØJÄB[aÊW}þgÂ_ÀWýlù~<ü÷õà¾â$2]G\\u0004øàÂÌôL¥\\u001cÏ\\tbÜæGü·\\u000bÿü\\u001dÓ\\\"ÄIb¹X*\\u0014ãQ\\u0012qDó2¥\\\"B)Å%Òÿdâß,û\\u0003>ß5\\u0000°j>\\u0001{-¨]c\\u0003öK'\\u0010XtÀâ÷\\u0000\\u0000ò»oÁÔ(\\b\\u0003háÏwÿï?ýG %\\u0000fIq\\u0000\\u0000^D$.TÊ³?Ç\\b\\u0000\\u0000D *°A\\u001bôÁ\\u0018,À\\u0006\\u001cÁ\\u0005ÜÁ\\u000bü`6B$ÄÂB\\u0010B\\nd\\u001cr`)¬B(Í°\\u001d*`/Ô@\\u001d4ÀQhp\\u000e.ÂU¸\\u000e=p\\u000fúa\\bÁ(¼\\t\\u0004AÈ\\b\\u0013a!Ú\\u0001bX#\\b\\u0017ø!ÁH\\u0004\\u0012$ É\\u0014Q\\\"K5H1RT UH\\u001dò=r\\u00029\\\\Fº;È\\u00002ü¼G1²Q=Ô\\fµC¹¨7\\u001aF¢\\u000bÐdt1\\u0016 Ðr´\\u001a=6¡çÐ«h\\u000fÚ>CÇ0Àè\\u0018\\u00073Äl0.ÆÃB±8,\\tcË±\\\"¬\\f«Æ\\u001a°V¬\\u0003»õcÏ±w\\u0004\\u0012EÀ\\t6\\u0004wB a\\u001eAHXLXNØH¨ \\u001c$4\\u0011Ú\\t7\\t\\u0003QÂ'\\\"¨K´&º\\u0011ùÄ\\u0018b21XH,#Ö\\u0012\\u0013/\\u0010{CÄ7$\\u0012C2'¹\\u0002I±¤TÒ\\u0012ÒFÒnR#é,©4H\\u001a#ÉÚdk²\\u00079, +ÈääÃä3ä\\u001bä!ò[\\nb@q¤øSâ(RÊjJ\\u0019å\\u0010å4å\\u0006e2AU£RÝ¨¡T\\u00115ZB­¡¶R¯Q¨\\u00134u9Í\\u0016IK¥­¢Ó\\u001ah\\u0017h÷i¯ètº\\u0011Ý\\u001eNÐWÒËéGèè\\u0003ôw\\f\\r\\u0015Çg(\\u0019\\u0018\\u0007\\u0018g\\u0019w\\u0018¯L¦\\u0019Ó\\u0019ÇT071ëç\\u000foUX*¶*|\\u0015Ê\\nJ&\\u001b*/T©ª¦ªÞª\\u000bUóUËT©^S}®FU3Sã©\\tÔ«UªPëS\\u001bSg©;¨ªg¨oT?¤~Yý\\u0006YÃLÃOC¤Q ±_ã¼Æ \\u000bc\\u0019³x,!k\\r«u5Ä&±ÍÙ|v*»ý\\u001d»=ª©¡9C3J3W³Róf?\\u0007ãqøtN\\tç(§ó~Þ\\u0014ï)â)\\u001b¦4L¹1e\\\\kªX«H«Q«Gë½6®í§¦½E»Yû\\u000eAÇJ'\\\\'GgÎ\\u0005çSÙSÝ§\\n§\\u0016M=:õ®.ªk¥\\u001b¡»Dw¿n§î¾^Lo§Þy½çú\\u001c}/ýTýmú§õG\\fX\\u0006³\\f$\\u0006Û\\fÎ\\u0018<Å5qo<\\u001d/ÇÛñQC]Ã@C¥aaá¹Ñ<£ÕFF\\u000fiÆ\\\\ã$ãmÆmÆ£&\\u0006&!&KMêMîRM¹¦)¦;L;LÇÍÌÍ¢ÍÖ5=1×2çç×ß·`ZxZ,¶¨¶¸eI²äZ¦Yî¶¼nZ9Y¥XUZ]³F­­%Ö»­»§\\u0011§¹NN«ÖgÃ°ñ¶É¶©·\\u0019°åØ\\u0006Û®¶m¶}agb\\u0017g·Å®Ãî½}º}ý=\\u0007\\rÙ\\u000e«\\u001dZ\\u001d~s´r\\u0014:V:ÞÎî?}Åôé/gXÏ\\u0010ÏØ3ã¶\\u0013Ë)ÄiSÓGg\\u0017g¹sóKË.>.\\u001bÆÝÈ½äJtõq]ázÒõ³Âí¨Û¯î6îiîÜÌ4)Y3sÐÃÈCàQåÑ?\\u000b0kß¬~OCOgµç#/c/W­×°·¥wª÷aï\\u0017>ö>rã>ã<7Þ2ÞY_Ì7À·È·ËOÃo_ßC#ÿdÿzÿÑ\\u0000§%\\u0001g\\u0003A[\\u0002ûøz|!¿?:Ûeö²ÙíA ¹A\\u0015A­åÁ­!hÈì­!÷çÎÎi\\u000eP~èÖÐ\\u0007aæaÃ~\\f'W?pX\\u001aÑ15wÑÜCsßDúDDÞg1O9¯-J5*>ª.j<Ú7º4º?Æ.fYÌÕXXIlK\\u001c9.*®6nl¾ßüíóââ\\u000bã{\\u0017/È]py¡ÎÂô§\\u0016©.\\u0012,:@LN8ðA\\u0010*¨\\u0016%ò\\u0013w%\\nyÂ\\u001dÂg\\\"/Ñ6ÑØC\\\\*\\u001eNòH*Mzì¼5y$Å3¥,å¹'©¼L\\rLÝ:\\u0016v m2=:½1qBª!M¶gêgæfvË¬e²þÅn·/\\u001e\\u0007Ék³¬\\u0005Y-\\n¶B¦èTZ(×*\\u0007²geWf¿ÍÊ9«+ÍíÌ³ÊÛ7ïÿí\\u0012Â\\u0012á¶¥KW-\\u001dXæ½¬j9²<qyÛ\\nã\\u0015\\u0005+V\\u0006¬<¸¶*mÕO«íW®~½&zMk^ÁÊÁµ\\u0001kë\\u000bU\\nå}ëÜ×í]OX/Yßµaú\\u001b>\\u0015®\\u0014Û\\u0017\\u0015Ø(Üxå\\u001boÊ¿Ü´©«Ä¹dÏfÒféæÞ-[\\u000eªæ\\u000en\\rÙÚ´\\rßV´íõöEÛ/Í(Û»¶C¹£¿<¸¼e§ÉÎÍ;?T¤TôTúT6îÒÝµa×ønÑî\\u001b{¼ö4ìÕÛ[¼÷ý>É¾ÛU\\u0001UMÕfÕeûIû³÷?®ªéøûm]­NmqíÇ\\u0003Ò\\u0003ý\\u0007#\\u000e¶×¹ÔÕ\\u001dÒ=TRÖ+ëG\\u000eÇ\\u001f¾þïw-\\r6\\rUÆâ#pDyäé÷\\tß÷\\u001e\\r:Úv{¬á\\u0007Ó\\u001fv\\u001dg\\u001d/jBòFSû[b[ºOÌ>ÑÖêÞzüGÛ\\u001f\\u000f4<YyJóTÉiÚéÓgòÏ}~.ùÜ`Û¢¶{çcÎßj\\u000foïº\\u0010táÒEÿç;¼;Î\\\\ò¸tò²Ûå\\u0013W¸W¯:_mêtê<þÓOÇ»»®¹\\\\k¹îz½µ{f÷é\\u001b7ÎÝô½yñ\\u0016ÿÖÕ9=Ý½ózo÷Å÷õß\\u0016Ý~r'ýÎË»Ùw'î­¼O¼_ô@íAÙCÝÕ?[þÜØïÜjÀw óÑÜG÷\\u0006Ïþõ\\u000fC\\u0005Ë\\rë8>99â?rýéü§CÏdÏ&\\u0017þ¢þË®\\u0017\\u0016/~øÕë×ÎÑÑ¡ò¿m|¥ýêÀë\\u0019¯ÛÆÂÆ\\u001e¾Éx31^ôVûíÁwÜw\\u001dï£ß\\u000fOä| (ÿhù±õSÐ§û\\u0019ÿ\\u0004\\u0003óüc3-Û\\u0000\\u0000\\u0000 cHRM\\u0000\\u0000z%\\u0000\\u0000\\u0000\\u0000ùÿ\\u0000\\u0000é\\u0000\\u0000u0\\u0000\\u0000ê`\\u0000\\u0000:\\u0000\\u0000\\u0017o_ÅF\\u0000\\u0000\\u0003\\u0000PLTE-O-$-È`ø3\\u0000ÌGhÙ5ÁÙP°x©á¹ùáhñ±GèÀ¨øxPÿÿÿ\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u00001Öä}\\u0000\\u0000\\u0000\\rtRNSÿÿÿÿÿÿÿÿÿÿÿÿ\\u0000=è\\\"\\u0000\\u0000\\u0001ÆIDATxÚì×±n@\\u0010\\u0004Ð#Füÿ\\u0012LÌ)ioÏ[$¿j{ÆÃwäûÎ6q«¥M<Ö­MÜ÷¥Mü¦×ø:æ6QâZ7¼\\u0002ä>ÖÜkî{î¥{áxä~¿\\u0018ÀôæÃÙ½§ÜrßÜÎ«>s/öþ\\u0018û\\u000fgçÑ\\u0001Ô-÷uÉ}ï\\u0000J÷â#,À\\u0002,À\\u0002,À\\u0002,À\\u0002,À\\u0002,à\\u000b8£M\\u0012mbÛ¢M,K´Z£MÌs´¹Ü½ü\\u001dþ´\\u001b\\u0003\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000x{Ó§=x·\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000à\\u0000ÖÙb\\u0007\\u0010va\\u0000\\u0000\\u0000\\u0000IEND®B`\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./res/textures/8bit/tiles.png\n// module id = 52\n// module chunks = 0","module.exports = \"PNG\\r\\n\\u001a\\n\\u0000\\u0000\\u0000\\rIHDR\\u0000\\u0000\\u0001\\u0000\\u0000\\u0000\\u0001\\u0000\\b\\u0003\\u0000\\u0000\\u0000k¬XT\\u0000\\u0000\\u0000\\tpHYs\\u0000\\u0000\\nï\\u0000\\u0000\\nï\\u0001}vH\\u0000\\u0000\\nOiCCPPhotoshop ICC profile\\u0000\\u0000xÚSgTSé\\u0016=÷ÞôBKKoR\\u0015\\b RB\\u0014&*!\\t\\u0010J!¡Ù\\u0015QÁ\\u0011EE\\u0004\\u001bÈ \\u0003\\u0015Q,\\f\\nØ\\u0007ä!¢£Êûá{£kÖ¼÷æÍþµ×>ç¬ó³Ï\\u0007À\\b\\fH3Q5\\f©B\\u001e\\u0011àÇÄÆáä.@\\n$p\\u0000\\u0010\\b³d!sý#\\u0001\\u0000ø~<<+\\\"À\\u0007¾\\u0000\\u0001xÓ\\u000b\\b\\u0000ÀMÀ0\\u001cÿ\\u000fêB\\\\\\u0001\\u0001Àt8K\\b\\u0014\\u0000@zB¦\\u0000@F\\u0001&S\\u0000 \\u0004\\u0000`Ëcbã\\u0000P-\\u0000`'æÓ\\u0000ø{\\u0001\\u0000[!\\u0015\\u0001 \\u0000 \\u0013eD\\u0000h;\\u0000¬ÏVE\\u0000X0\\u0000\\u0014fKÄ9\\u0000Ø-\\u00000IWfH\\u0000°·\\u0000ÀÎ\\u0010\\u000b²\\u0000\\b\\f\\u00000Q)\\u0000\\u0004{\\u0000`È##x\\u0000\\u0000\\u0014FòW<ñ+®\\u0010ç*\\u0000\\u0000x²<¹$9E[\\b-q\\u0007WW.\\u001e(ÎI\\u0017+\\u00146a\\u0002a@.Ây\\u001924\\u000fàóÌ\\u0000\\u0000 \\u0015\\u0011àóýxÎ\\u000e®ÎÎ6¶\\u000e_-ê¿\\u0006ÿ\\\"bbãþåÏ«p@\\u0000\\u0000át~Ñþ,/³\\u001a;\\u0006mþ¢%î\\u0004h^\\u000b u÷f²\\u000f@µ\\u0000 éÚWópø~<<E¡¹ÙÙåääØJÄB[aÊW}þgÂ_ÀWýlù~<ü÷õà¾â$2]G\\u0004øàÂÌôL¥\\u001cÏ\\tbÜæGü·\\u000bÿü\\u001dÓ\\\"ÄIb¹X*\\u0014ãQ\\u0012qDó2¥\\\"B)Å%Òÿdâß,û\\u0003>ß5\\u0000°j>\\u0001{-¨]c\\u0003öK'\\u0010XtÀâ÷\\u0000\\u0000ò»oÁÔ(\\b\\u0003háÏwÿï?ýG %\\u0000fIq\\u0000\\u0000^D$.TÊ³?Ç\\b\\u0000\\u0000D *°A\\u001bôÁ\\u0018,À\\u0006\\u001cÁ\\u0005ÜÁ\\u000bü`6B$ÄÂB\\u0010B\\nd\\u001cr`)¬B(Í°\\u001d*`/Ô@\\u001d4ÀQhp\\u000e.ÂU¸\\u000e=p\\u000fúa\\bÁ(¼\\t\\u0004AÈ\\b\\u0013a!Ú\\u0001bX#\\b\\u0017ø!ÁH\\u0004\\u0012$ É\\u0014Q\\\"K5H1RT UH\\u001dò=r\\u00029\\\\Fº;È\\u00002ü¼G1²Q=Ô\\fµC¹¨7\\u001aF¢\\u000bÐdt1\\u0016 Ðr´\\u001a=6¡çÐ«h\\u000fÚ>CÇ0Àè\\u0018\\u00073Äl0.ÆÃB±8,\\tcË±\\\"¬\\f«Æ\\u001a°V¬\\u0003»õcÏ±w\\u0004\\u0012EÀ\\t6\\u0004wB a\\u001eAHXLXNØH¨ \\u001c$4\\u0011Ú\\t7\\t\\u0003QÂ'\\\"¨K´&º\\u0011ùÄ\\u0018b21XH,#Ö\\u0012\\u0013/\\u0010{CÄ7$\\u0012C2'¹\\u0002I±¤TÒ\\u0012ÒFÒnR#é,©4H\\u001a#ÉÚdk²\\u00079, +ÈääÃä3ä\\u001bä!ò[\\nb@q¤øSâ(RÊjJ\\u0019å\\u0010å4å\\u0006e2AU£RÝ¨¡T\\u00115ZB­¡¶R¯Q¨\\u00134u9Í\\u0016IK¥­¢Ó\\u001ah\\u0017h÷i¯ètº\\u0011Ý\\u001eNÐWÒËéGèè\\u0003ôw\\f\\r\\u0015Çg(\\u0019\\u0018\\u0007\\u0018g\\u0019w\\u0018¯L¦\\u0019Ó\\u0019ÇT071ëç\\u000foUX*¶*|\\u0015Ê\\nJ&\\u001b*/T©ª¦ªÞª\\u000bUóUËT©^S}®FU3Sã©\\tÔ«UªPëS\\u001bSg©;¨ªg¨oT?¤~Yý\\u0006YÃLÃOC¤Q ±_ã¼Æ \\u000bc\\u0019³x,!k\\r«u5Ä&±ÍÙ|v*»ý\\u001d»=ª©¡9C3J3W³Róf?\\u0007ãqøtN\\tç(§ó~Þ\\u0014ï)â)\\u001b¦4L¹1e\\\\kªX«H«Q«Gë½6®í§¦½E»Yû\\u000eAÇJ'\\\\'GgÎ\\u0005çSÙSÝ§\\n§\\u0016M=:õ®.ªk¥\\u001b¡»Dw¿n§î¾^Lo§Þy½çú\\u001c}/ýTýmú§õG\\fX\\u0006³\\f$\\u0006Û\\fÎ\\u0018<Å5qo<\\u001d/ÇÛñQC]Ã@C¥aaá¹Ñ<£ÕFF\\u000fiÆ\\\\ã$ãmÆmÆ£&\\u0006&!&KMêMîRM¹¦)¦;L;LÇÍÌÍ¢ÍÖ5=1×2çç×ß·`ZxZ,¶¨¶¸eI²äZ¦Yî¶¼nZ9Y¥XUZ]³F­­%Ö»­»§\\u0011§¹NN«ÖgÃ°ñ¶É¶©·\\u0019°åØ\\u0006Û®¶m¶}agb\\u0017g·Å®Ãî½}º}ý=\\u0007\\rÙ\\u000e«\\u001dZ\\u001d~s´r\\u0014:V:ÞÎî?}Åôé/gXÏ\\u0010ÏØ3ã¶\\u0013Ë)ÄiSÓGg\\u0017g¹sóKË.>.\\u001bÆÝÈ½äJtõq]ázÒõ³Âí¨Û¯î6îiîÜÌ4)Y3sÐÃÈCàQåÑ?\\u000b0kß¬~OCOgµç#/c/W­×°·¥wª÷aï\\u0017>ö>rã>ã<7Þ2ÞY_Ì7À·È·ËOÃo_ßC#ÿdÿzÿÑ\\u0000§%\\u0001g\\u0003A[\\u0002ûøz|!¿?:Ûeö²ÙíA ¹A\\u0015A­åÁ­!hÈì­!÷çÎÎi\\u000eP~èÖÐ\\u0007aæaÃ~\\f'W?pX\\u001aÑ15wÑÜCsßDúDDÞg1O9¯-J5*>ª.j<Ú7º4º?Æ.fYÌÕXXIlK\\u001c9.*®6nl¾ßüíóââ\\u000bã{\\u0017/È]py¡ÎÂô§\\u0016©.\\u0012,:@LN8ðA\\u0010*¨\\u0016%ò\\u0013w%\\nyÂ\\u001dÂg\\\"/Ñ6ÑØC\\\\*\\u001eNòH*Mzì¼5y$Å3¥,å¹'©¼L\\rLÝ:\\u0016v m2=:½1qBª!M¶gêgæfvË¬e²þÅn·/\\u001e\\u0007Ék³¬\\u0005Y-\\n¶B¦èTZ(×*\\u0007²geWf¿ÍÊ9«+ÍíÌ³ÊÛ7ïÿí\\u0012Â\\u0012á¶¥KW-\\u001dXæ½¬j9²<qyÛ\\nã\\u0015\\u0005+V\\u0006¬<¸¶*mÕO«íW®~½&zMk^ÁÊÁµ\\u0001kë\\u000bU\\nå}ëÜ×í]OX/Yßµaú\\u001b>\\u0015®\\u0014Û\\u0017\\u0015Ø(Üxå\\u001boÊ¿Ü´©«Ä¹dÏfÒféæÞ-[\\u000eªæ\\u000en\\rÙÚ´\\rßV´íõöEÛ/Í(Û»¶C¹£¿<¸¼e§ÉÎÍ;?T¤TôTúT6îÒÝµa×ønÑî\\u001b{¼ö4ìÕÛ[¼÷ý>É¾ÛU\\u0001UMÕfÕeûIû³÷?®ªéøûm]­NmqíÇ\\u0003Ò\\u0003ý\\u0007#\\u000e¶×¹ÔÕ\\u001dÒ=TRÖ+ëG\\u000eÇ\\u001f¾þïw-\\r6\\rUÆâ#pDyäé÷\\tß÷\\u001e\\r:Úv{¬á\\u0007Ó\\u001fv\\u001dg\\u001d/jBòFSû[b[ºOÌ>ÑÖêÞzüGÛ\\u001f\\u000f4<YyJóTÉiÚéÓgòÏ}~.ùÜ`Û¢¶{çcÎßj\\u000foïº\\u0010táÒEÿç;¼;Î\\\\ò¸tò²Ûå\\u0013W¸W¯:_mêtê<þÓOÇ»»®¹\\\\k¹îz½µ{f÷é\\u001b7ÎÝô½yñ\\u0016ÿÖÕ9=Ý½ózo÷Å÷õß\\u0016Ý~r'ýÎË»Ùw'î­¼O¼_ô@íAÙCÝÕ?[þÜØïÜjÀw óÑÜG÷\\u0006Ïþõ\\u000fC\\u0005Ë\\rë8>99â?rýéü§CÏdÏ&\\u0017þ¢þË®\\u0017\\u0016/~øÕë×ÎÑÑ¡ò¿m|¥ýêÀë\\u0019¯ÛÆÂÆ\\u001e¾Éx31^ôVûíÁwÜw\\u001dï£ß\\u000fOä| (ÿhù±õSÐ§û\\u0019ÿ\\u0004\\u0003óüc3-Û\\u0000\\u0000\\u0000 cHRM\\u0000\\u0000z%\\u0000\\u0000\\u0000\\u0000ùÿ\\u0000\\u0000é\\u0000\\u0000u0\\u0000\\u0000ê`\\u0000\\u0000:\\u0000\\u0000\\u0017o_ÅF\\u0000\\u0000\\u0003\\u0000PLTE\\u0018((øøàxxxÿÿÿ\\u0018((þþ\\u0000{~X\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000î\\u0015d\\u0002\\u0000\\u0000\\u0000\\u0004tRNSÿÿÿ\\u0000@*©ô\\u0000\\u0000\\u0006éIDATxÚìÛã:\\bDÁøÿÿØp\\u001ef­P¸!j%=3§Ëod]¶%B8jò³¯C\\b\\u00006/¿^yÿnmÛ\\u0000°\\u0003~­u)<Ú;JG¾_¯­öW\\u001f_«àw\\u001dá¢ñPc\\u0004\\fÈ=\\u0011Ø§\\t\\u0011\\t?»\\u0004Bú\\u000eD\\b\\fYR\\u0003D?\\u0001Ê\\u0014ÐÐW/¹Ôâ9\\u0015/¯I\\u0017Q\\u0017½ì~P*\\u001a7æ1ÛÔùÒ\\u0003øÊe+\\u0000ê#×x|Æ*¢ê´qDÈqÙK:ûÁ?>¯ÏED|r\\u0005À´ä\\\\EEô£\\t;L<ò\\u0012Ð'ÐñaÉ\\r=E¦\\u0005ÛÒ\\u0004¨Ýq\\\\´ý6\\u00063þ~dÀ¹@x»âlA¾e\\u0013ÔyË6\\u0011û¨UU\\u0014F¬?¨Öm¬Ûô||±üÈ;¾çò\\u0014\\\\ÆE#A\\u000eñÇ5èSvAõ¶4\\tX\\fiÝ\\u0017CÝôþë½ÖÏý.üÉk\\u0017¾R\\u000e\\u0013\\u0000\\u0001\\u0010ÀO¾L#Ä\\u001f1xJI@>¦ñ\\u0006®ü_ëí\\u0015ÐÀºW¹Û§]{C­\\u001anºRÿë\\u0001\\u0014; [ãÅÇüÞÌÙÔ³b»¡\\u001aÈé'Ì¬\\u0007Ó\\u0013Õ º¥é!Tº#Ä¹÷rL=·¨^$ÿA__LgdÁé«zÉ$7x>³flÁð\\u001býÚ¹\\u0003;\\t\\u0016¡\\r\\r¸D*¤PÆäÜü\\u0000\\u0000}0è¡æê­l#0§zÉùê¢+¶o\\u001cÒÎ\\u0000\\u0011\\u0015\\u0016\\u0016=BÖÏ@ð\\b<±fÛ\\u0002>í\\u0001¨ÿ/9\\u001e\\u000bU\\u000f\\u0012:òý'®AÇ\\u0019«IÝ5\\u000e\\nÌÖøT>¦5frõK\\u0012\\tæñ\\u000e\\u001e´I?{ñ¸E_Ê,¯\\u001eU\\u000fROðS¼¶ÇÃ\\u0014C\\u0004@\\u0000\\u0004ð¯óÆôM¶¢í8å{\\u0016c%]î\\u000fKÖ^µ3²1XÊGµT1ÿ1í8ô½,¦'½ÿD</¹\\fàd6ÊÑX80Ø¤ïcÈ7ëÓ1Xn6ßÚ\\u0001G/OáhìWüBs­Åï;\\bÚ¡¤ñ~õEÓm8<Ã\\u0002«gÄoÁ\\u000e­º¨¦%!^Ä®µ0<\\u0000§zD¿\\tFö\\u0005öÇ|¯5êGZ\\u0007Cï\\u0000ª\\u0001\\u0005x2V_£:Ø\\fÒÙU\\u001f1àã|2\\u001d\\u0000ÜðÃ\\u001e\\b¸¦[@:¬y\\bÒX&PÚó¨Ïë;\\u0015ÞÔpü/1èõX÷'üXð?\\u0004¸k{õ¥òXÊ\\u0011}PÑÿÝ\\u0012´K~ôE\\bÕ \\u0001P\\u000eÿS\\u000fï¬ß\\u001fÕ«zÿ&?Æ\\u000ez|9-èPèMåbÉ{o;«z¿÷¿7 ?qk¡]\\\"[\\u0002çt>Æóþ-ë^åÒG¡\\u0017\\u001c½õ\\u000eI\\u001bÅpvv~¡Ã¦C)ÁP[s|È½\\u0003dÒª6Ì£A\\fyh\\\\ë³øÓ¤)(1ôùä\\u0000Ñ-[öóf+ðÉÙr\\u0014O¾áÀWo\\tII\\u0003Æ¿«®ÇÐ÷{A\\rxW@\\u001eF\\u000eÿµIípo\\nG©æçý¹\\u0006ðá9Æ\\u0010\\r\\u001e!ÑéÍ¿ê±\\u0002\\u0000U\\u0017§jôF\\u000fÀ×6FtDç\\u000fèSÏì1ÿs5¸n\\tÞí8¿üs¦p¼8þ\\u0000Êa\\u0002 \\r`:æyâ\\u0018¨/\\u0012}vý¿¾ÀX~\\u0015À¦xB\\b¬Ù)cdè¯r.\\u001e\\u001f\\fÇü\\u000f\\u001er>Öç0P±³u\\fGKV\\u001f+<Zg¾^õ\\bÅð\\u0005\\b\\f\\u0000Ë¯?áéórþ×§ËAébj§ne>>÷X¼£oï6Hj±Æo]³û\\u001eñ5¸\\u001b\\u001fÐÇ«ú^_¼k\\u001fc\\u0007ø\\u0000,¯Í·?\\u000bÛ#Pâ\\u0003îåbö\\u0007tñ\\u0001>ÉÑò\\u00173å«³XSsù½U÷ìò\\u0011UëÏøv5X^³Óz[*ý\\u0005;àoshT`ï}Dô\\u0007P\\r\\u0012\\u0000\\u0001\\u0010ÀÞ{íúé\\u0000þí\\u0019 Zõ2~ñ1EdË0\\f¿ð´ö\\u0011\\\"Þ}qòzChÐ÷£?`3@\\u0004\\u0003\\\"n&¾y\\t¬}!¢õ\\u000f\\u0012·E/ðÍÞ\\u001bó)ã5ö\\u0005-Ô>Øx½w\\u0006,n\\u001aËs2¸°\\u001c¢ßÕ¿sü5Dfz¾>3-ñý¨ó\\bàë\\u0004\\f(þ\\u0002Õ·þÕðÿ0àø77óÑPÜ\\u00039~ GqÝø\\u000bÞü\\u001a¬ï?ú\\u0007«þí\\u0019\\u0010iãßüù\\u0006ý\\u0001\\u0014C\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000\\u0004@\\u0000o¿þ\\u001b\\u0000øq¬ç)>\\u0017\\u0000\\u0000\\u0000\\u0000IEND®B`\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./res/textures/8bit/font.png\n// module id = 53\n// module chunks = 0","module.exports = {\n\t\"x\": 16,\n\t\"y\": 16,\n\t\"chars\": \" !\\\"#$%&'()°+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz\",\n\t\"widths\": [\n\t\t3,\n\t\t2,\n\t\t4,\n\t\t9,\n\t\t6,\n\t\t6,\n\t\t6,\n\t\t2,\n\t\t4,\n\t\t4,\n\t\t4,\n\t\t6,\n\t\t3,\n\t\t6,\n\t\t2,\n\t\t5,\n\t\t5,\n\t\t4,\n\t\t5,\n\t\t5,\n\t\t5,\n\t\t5,\n\t\t5,\n\t\t5,\n\t\t5,\n\t\t5,\n\t\t2,\n\t\t3,\n\t\t7,\n\t\t6,\n\t\t7,\n\t\t5,\n\t\t8,\n\t\t5,\n\t\t5,\n\t\t5,\n\t\t5,\n\t\t5,\n\t\t5,\n\t\t5,\n\t\t6,\n\t\t4,\n\t\t5,\n\t\t6,\n\t\t5,\n\t\t6,\n\t\t6,\n\t\t5,\n\t\t5,\n\t\t5,\n\t\t5,\n\t\t5,\n\t\t6,\n\t\t6,\n\t\t6,\n\t\t6,\n\t\t6,\n\t\t6,\n\t\t6,\n\t\t4,\n\t\t5,\n\t\t4,\n\t\t6,\n\t\t7,\n\t\t3,\n\t\t5,\n\t\t5,\n\t\t5,\n\t\t5,\n\t\t5,\n\t\t4,\n\t\t5,\n\t\t5,\n\t\t2,\n\t\t3,\n\t\t5,\n\t\t2,\n\t\t6,\n\t\t5,\n\t\t5,\n\t\t5,\n\t\t5,\n\t\t5,\n\t\t5,\n\t\t4,\n\t\t5,\n\t\t5,\n\t\t6,\n\t\t6,\n\t\t5,\n\t\t5\n\t]\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./res/fonts/font.json\n// module id = 54\n// module chunks = 0"],"sourceRoot":""}